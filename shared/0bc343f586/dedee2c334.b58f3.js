(function (b, c, a) {
    function d(e) {
      var f = c[e];
      if (!f) {
        var g = b[e];
        if (!g) {
          return;
        }
        var h = {};
        f = c[e] = {
          exports: h
        };
        g[0](function (a) {
          return d(g[1][a] || a);
        }, f, h);
      }
      return f.exports;
    }
    for (var e = 0; e < a.length; e++) {
      d(a[e]);
    }
  })({
    1: [function (a) {
      "use strict";
  
      a("../core/platform/CCClass");
      var b = a("../core/utils/misc");
      cc.Action = cc.Class({
        name: "cc.Action",
        ctor: function () {
          this.originalTarget = null;
          this.target = null;
          this.tag = cc.Action.TAG_INVALID;
        },
        clone: function () {
          var a = new cc.Action();
          a.originalTarget = null;
          a.target = null;
          a.tag = this.tag;
          return a;
        },
        isDone: function () {
          return true;
        },
        startWithTarget: function (a) {
          this.originalTarget = a;
          this.target = a;
        },
        stop: function () {
          this.target = null;
        },
        step: function () {},
        update: function () {},
        getTarget: function () {
          return this.target;
        },
        setTarget: function (a) {
          this.target = a;
        },
        getOriginalTarget: function () {
          return this.originalTarget;
        },
        setOriginalTarget: function (a) {
          this.originalTarget = a;
        },
        getTag: function () {
          return this.tag;
        },
        setTag: function (a) {
          this.tag = a;
        },
        retain: function () {},
        release: function () {}
      });
      cc.Action.TAG_INVALID = -1;
      cc.FiniteTimeAction = cc.Class({
        name: "cc.FiniteTimeAction",
        extends: cc.Action,
        ctor: function () {
          this._duration = 0;
        },
        getDuration: function () {
          return this._duration * (this._timesForRepeat || 1);
        },
        setDuration: function (a) {
          this._duration = a;
        },
        reverse: function () {
          return null;
        },
        clone: function () {
          return new cc.FiniteTimeAction();
        }
      });
      cc.Speed = cc.Class({
        name: "cc.Speed",
        extends: cc.Action,
        ctor: function (a, b) {
          this._speed = 0;
          this._innerAction = null;
          if (a) {
            this.initWithAction(a, b);
          }
        },
        getSpeed: function () {
          return this._speed;
        },
        setSpeed: function (a) {
          this._speed = a;
        },
        initWithAction: function (a, b) {
          return !!a && (this._innerAction = a, this._speed = b, true);
        },
        clone: function () {
          var a = new cc.Speed();
          a.initWithAction(this._innerAction.clone(), this._speed);
          return a;
        },
        startWithTarget: function (a) {
          cc.Action.prototype.startWithTarget.call(this, a);
          this._innerAction.startWithTarget(a);
        },
        stop: function () {
          this._innerAction.stop();
          cc.Action.prototype.stop.call(this);
        },
        step: function (a) {
          this._innerAction.step(a * this._speed);
        },
        isDone: function () {
          return this._innerAction.isDone();
        },
        reverse: function () {
          return new cc.Speed(this._innerAction.reverse(), this._speed);
        },
        setInnerAction: function (a) {
          if (this._innerAction !== a) {
            this._innerAction = a;
          }
        },
        getInnerAction: function () {
          return this._innerAction;
        }
      });
      cc.speed = function (a, b) {
        return new cc.Speed(a, b);
      };
      cc.Follow = cc.Class({
        name: "cc.Follow",
        extends: cc.Action,
        ctor: function (a, b) {
          this._followedNode = null;
          this._boundarySet = false;
          this._boundaryFullyCovered = false;
          this._halfScreenSize = null;
          this._fullScreenSize = null;
          this.leftBoundary = 0;
          this.rightBoundary = 0;
          this.topBoundary = 0;
          this.bottomBoundary = 0;
          this._worldRect = cc.rect(0, 0, 0, 0);
          if (a) {
            if (b) {
              this.initWithTarget(a, b);
            } else {
              this.initWithTarget(a);
            }
          }
        },
        clone: function () {
          var a = new cc.Follow();
          var b = this._worldRect;
          var c = new cc.Rect(b.x, b.y, b.width, b.height);
          a.initWithTarget(this._followedNode, c);
          return a;
        },
        isBoundarySet: function () {
          return this._boundarySet;
        },
        setBoundarySet: function (a) {
          this._boundarySet = a;
        },
        setBoudarySet: function (a) {
          this.setBoundarySet(a);
        },
        initWithTarget: function (a, b) {
          if (!a) {
            return false;
          }
          b = b || cc.rect(0, 0, 0, 0);
          this._followedNode = a;
          this._worldRect = b;
          this._boundarySet = !(b.width === 0 && b.height === 0);
          this._boundaryFullyCovered = false;
          var c = cc.winSize;
          this._fullScreenSize = cc.v2(c.width, c.height);
          this._halfScreenSize = this._fullScreenSize.mul(0.5);
          if (this._boundarySet) {
            this.leftBoundary = -(b.x + b.width - this._fullScreenSize.x);
            this.rightBoundary = -b.x;
            this.topBoundary = -b.y;
            this.bottomBoundary = -(b.y + b.height - this._fullScreenSize.y);
            if (this.rightBoundary < this.leftBoundary) {
              this.rightBoundary = this.leftBoundary = (this.leftBoundary + this.rightBoundary) / 2;
            }
            if (this.topBoundary < this.bottomBoundary) {
              this.topBoundary = this.bottomBoundary = (this.topBoundary + this.bottomBoundary) / 2;
            }
            if (this.topBoundary === this.bottomBoundary && this.leftBoundary === this.rightBoundary) {
              this._boundaryFullyCovered = true;
            }
          }
          return true;
        },
        step: function () {
          var a = this.target.convertToWorldSpaceAR(cc.Vec2.ZERO);
          var c = this._followedNode.convertToWorldSpaceAR(cc.Vec2.ZERO);
          var d = a.sub(c);
          var e = this.target.parent.convertToNodeSpaceAR(d.add(this._halfScreenSize));
          if (this._boundarySet) {
            if (this._boundaryFullyCovered) {
              return;
            }
            this.target.setPosition(b.clampf(e.x, this.leftBoundary, this.rightBoundary), b.clampf(e.y, this.bottomBoundary, this.topBoundary));
          } else {
            this.target.setPosition(e.x, e.y);
          }
        },
        isDone: function () {
          return !this._followedNode.activeInHierarchy;
        },
        stop: function () {
          this.target = null;
          cc.Action.prototype.stop.call(this);
        }
      });
      cc.follow = function (a, b) {
        return new cc.Follow(a, b);
      };
    }, {
      "../core/platform/CCClass": 162,
      "../core/utils/misc": 236
    }],
    2: [function () {
      "use strict";
  
      function b(a, b) {
        return a[Math.min(a.length - 1, Math.max(b, 0))];
      }
      function a(a) {
        for (var b = [], c = a.length - 1; c >= 0; c--) {
          b.push(cc.v2(a[c].x, a[c].y));
        }
        return b;
      }
      function c(a) {
        for (var b = [], c = 0; c < a.length; c++) {
          b.push(cc.v2(a[c].x, a[c].y));
        }
        return b;
      }
      cc.CardinalSplineTo = cc.Class({
        name: "cc.CardinalSplineTo",
        extends: cc.ActionInterval,
        ctor: function (a, b, c) {
          this._points = [];
          this._deltaT = 0;
          this._tension = 0;
          this._previousPosition = null;
          this._accumulatedDiff = null;
          if (c !== undefined) {
            cc.CardinalSplineTo.prototype.initWithDuration.call(this, a, b, c);
          }
        },
        initWithDuration: function (a, b, c) {
          return !(!b || b.length === 0 || !cc.ActionInterval.prototype.initWithDuration.call(this, a) || (this.setPoints(b), this._tension = c, 0));
        },
        clone: function () {
          var a = new cc.CardinalSplineTo();
          a.initWithDuration(this._duration, c(this._points), this._tension);
          return a;
        },
        startWithTarget: function (a) {
          cc.ActionInterval.prototype.startWithTarget.call(this, a);
          this._deltaT = 1 / (this._points.length - 1);
          this._previousPosition = cc.v2(this.target.x, this.target.y);
          this._accumulatedDiff = cc.v2(0, 0);
        },
        update: function (j) {
          var k;
          var q;
          j = this._computeEaseTime(j);
          var t = this._points;
          if (j === 1) {
            k = t.length - 1;
            q = 1;
          } else {
            var r = this._deltaT;
            q = (j - r * (k = j / r | 0)) / r;
          }
          var s;
          var w;
          var z;
          var B;
          var C;
          var D;
          var F;
          var G;
          var H;
          var I;
          var J;
          var K;
          var L;
          var M;
          var N;
          var O;
          s = b(t, k - 1);
          w = b(t, k - 0);
          z = b(t, k + 1);
          B = b(t, k + 2);
          H = (G = (1 - this._tension) / 2) * ((D = (C = q) * C) * 2 - (F = D * C) - C);
          I = G * (-F + D) + (F * 2 - D * 3) + 1;
          J = G * (F - D * 2 + C) + F * -2 + D * 3;
          K = G * (F - D);
          L = s.x * H + w.x * I + z.x * J + B.x * K;
          M = s.y * H + w.y * I + z.y * J + B.y * K;
          var P = cc.v2(L, M);
          if (cc.macro.ENABLE_STACKABLE_ACTIONS && (N = this.target.x - this._previousPosition.x, O = this.target.y - this._previousPosition.y, N !== 0 || O !== 0)) {
            var A = this._accumulatedDiff;
            N = A.x + N;
            O = A.y + O;
            A.x = N;
            A.y = O;
            P.x += N;
            P.y += O;
          }
          this.updatePosition(P);
        },
        reverse: function () {
          var b = a(this._points);
          return cc.cardinalSplineTo(this._duration, b, this._tension);
        },
        updatePosition: function (a) {
          this.target.setPosition(a);
          this._previousPosition = a;
        },
        getPoints: function () {
          return this._points;
        },
        setPoints: function (a) {
          this._points = a;
        }
      });
      cc.cardinalSplineTo = function (a, b, c) {
        return new cc.CardinalSplineTo(a, b, c);
      };
      cc.CardinalSplineBy = cc.Class({
        name: "cc.CardinalSplineBy",
        extends: cc.CardinalSplineTo,
        ctor: function (a, b, c) {
          this._startPosition = cc.v2(0, 0);
          if (c !== undefined) {
            this.initWithDuration(a, b, c);
          }
        },
        startWithTarget: function (a) {
          cc.CardinalSplineTo.prototype.startWithTarget.call(this, a);
          this._startPosition.x = a.x;
          this._startPosition.y = a.y;
        },
        reverse: function () {
          for (var b, c = this._points.slice(), d = c[0], e = 1; e < c.length; ++e) {
            b = c[e];
            c[e] = b.sub(d);
            d = b;
          }
          var f = a(c);
          d = f[f.length - 1];
          f.pop();
          d.x = -d.x;
          d.y = -d.y;
          f.unshift(d);
          e = 1;
          for (; e < f.length; ++e) {
            (b = f[e]).x = -b.x;
            b.y = -b.y;
            b.x += d.x;
            b.y += d.y;
            f[e] = b;
            d = b;
          }
          return cc.cardinalSplineBy(this._duration, f, this._tension);
        },
        updatePosition: function (a) {
          var b = this._startPosition;
          var c = a.x + b.x;
          var d = a.y + b.y;
          this._previousPosition.x = c;
          this._previousPosition.y = d;
          this.target.setPosition(c, d);
        },
        clone: function () {
          var a = new cc.CardinalSplineBy();
          a.initWithDuration(this._duration, c(this._points), this._tension);
          return a;
        }
      });
      cc.cardinalSplineBy = function (a, b, c) {
        return new cc.CardinalSplineBy(a, b, c);
      };
      cc.CatmullRomTo = cc.Class({
        name: "cc.CatmullRomTo",
        extends: cc.CardinalSplineTo,
        ctor: function (a, b) {
          if (b) {
            this.initWithDuration(a, b);
          }
        },
        initWithDuration: function (a, b) {
          return cc.CardinalSplineTo.prototype.initWithDuration.call(this, a, b, 0.5);
        },
        clone: function () {
          var a = new cc.CatmullRomTo();
          a.initWithDuration(this._duration, c(this._points));
          return a;
        }
      });
      cc.catmullRomTo = function (a, b) {
        return new cc.CatmullRomTo(a, b);
      };
      cc.CatmullRomBy = cc.Class({
        name: "cc.CatmullRomBy",
        extends: cc.CardinalSplineBy,
        ctor: function (a, b) {
          if (b) {
            this.initWithDuration(a, b);
          }
        },
        initWithDuration: function (a, b) {
          return cc.CardinalSplineTo.prototype.initWithDuration.call(this, a, b, 0.5);
        },
        clone: function () {
          var a = new cc.CatmullRomBy();
          a.initWithDuration(this._duration, c(this._points));
          return a;
        }
      });
      cc.catmullRomBy = function (a, b) {
        return new cc.CatmullRomBy(a, b);
      };
    }, {}],
    3: [function () {
      "use strict";
  
      cc.easeIn = function (a) {
        return {
          _rate: a,
          easing: function (a) {
            return Math.pow(a, this._rate);
          },
          reverse: function () {
            return cc.easeIn(1 / this._rate);
          }
        };
      };
      cc.easeOut = function (a) {
        return {
          _rate: a,
          easing: function (a) {
            return Math.pow(a, 1 / this._rate);
          },
          reverse: function () {
            return cc.easeOut(1 / this._rate);
          }
        };
      };
      cc.easeInOut = function (a) {
        return {
          _rate: a,
          easing: function (a) {
            if ((a *= 2) < 1) {
              return Math.pow(a, this._rate) * 0.5;
            } else {
              return 1 - Math.pow(2 - a, this._rate) * 0.5;
            }
          },
          reverse: function () {
            return cc.easeInOut(this._rate);
          }
        };
      };
      var j = {
        easing: function (a) {
          if (a === 0) {
            return 0;
          } else {
            return Math.pow(2, (a - 1) * 10);
          }
        },
        reverse: function () {
          return k;
        }
      };
      cc.easeExponentialIn = function () {
        return j;
      };
      var k = {
        easing: function (a) {
          if (a === 1) {
            return 1;
          } else {
            return 1 - Math.pow(2, a * -10);
          }
        },
        reverse: function () {
          return j;
        }
      };
      cc.easeExponentialOut = function () {
        return k;
      };
      var e = {
        easing: function (a) {
          if (a !== 1 && a !== 0) {
            if ((a *= 2) < 1) {
              return Math.pow(2, (a - 1) * 10) * 0.5;
            } else {
              return (2 - Math.pow(2, (a - 1) * -10)) * 0.5;
            }
          } else {
            return a;
          }
        },
        reverse: function () {
          return e;
        }
      };
      cc.easeExponentialInOut = function () {
        return e;
      };
      var i = {
        easing: function (a) {
          if (a === 0 || a === 1) {
            return a;
          } else {
            return Math.cos(a * Math.PI / 2) * -1 + 1;
          }
        },
        reverse: function () {
          return n;
        }
      };
      cc.easeSineIn = function () {
        return i;
      };
      var n = {
        easing: function (a) {
          if (a === 0 || a === 1) {
            return a;
          } else {
            return Math.sin(a * Math.PI / 2);
          }
        },
        reverse: function () {
          return i;
        }
      };
      cc.easeSineOut = function () {
        return n;
      };
      var q = {
        easing: function (a) {
          if (a === 0 || a === 1) {
            return a;
          } else {
            return (Math.cos(Math.PI * a) - 1) * -0.5;
          }
        },
        reverse: function () {
          return q;
        }
      };
      cc.easeSineInOut = function () {
        return q;
      };
      var r = {
        easing: function (a) {
          if (a === 0 || a === 1) {
            return a;
          } else {
            return -Math.pow(2, (a -= 1) * 10) * Math.sin((a - 0.075) * Math.PI * 2 / 0.3);
          }
        },
        reverse: function () {
          return a;
        }
      };
      cc.easeElasticIn = function (a) {
        if (a && a !== 0.3) {
          return {
            _period: a,
            easing: function (a) {
              if (a === 0 || a === 1) {
                return a;
              } else {
                return -Math.pow(2, (a -= 1) * 10) * Math.sin((a - this._period / 4) * Math.PI * 2 / this._period);
              }
            },
            reverse: function () {
              return cc.easeElasticOut(this._period);
            }
          };
        } else {
          return r;
        }
      };
      var a = {
        easing: function (a) {
          if (a === 0 || a === 1) {
            return a;
          } else {
            return Math.pow(2, a * -10) * Math.sin((a - 0.075) * Math.PI * 2 / 0.3) + 1;
          }
        },
        reverse: function () {
          return r;
        }
      };
      function o(a) {
        if (a < 1 / 2.75) {
          return a * 7.5625 * a;
        } else if (a < 2 / 2.75) {
          return (a -= 1.5 / 2.75) * 7.5625 * a + 0.75;
        } else if (a < 2.5 / 2.75) {
          return (a -= 2.25 / 2.75) * 7.5625 * a + 0.9375;
        } else {
          return (a -= 2.625 / 2.75) * 7.5625 * a + 0.984375;
        }
      }
      cc.easeElasticOut = function (b) {
        if (b && b !== 0.3) {
          return {
            _period: b,
            easing: function (a) {
              if (a === 0 || a === 1) {
                return a;
              } else {
                return Math.pow(2, a * -10) * Math.sin((a - this._period / 4) * Math.PI * 2 / this._period) + 1;
              }
            },
            reverse: function () {
              return cc.easeElasticIn(this._period);
            }
          };
        } else {
          return a;
        }
      };
      cc.easeElasticInOut = function (a) {
        return {
          _period: a = a || 0.3,
          easing: function (a) {
            var b = 0;
            var c = this._period;
            if (a === 0 || a === 1) {
              b = a;
            } else {
              a *= 2;
              if (!c) {
                c = this._period = 0.44999999999999996;
              }
              var d = c / 4;
              b = (a -= 1) < 0 ? Math.pow(2, a * 10) * -0.5 * Math.sin((a - d) * Math.PI * 2 / c) : Math.pow(2, a * -10) * Math.sin((a - d) * Math.PI * 2 / c) * 0.5 + 1;
            }
            return b;
          },
          reverse: function () {
            return cc.easeElasticInOut(this._period);
          }
        };
      };
      var c = {
        easing: function (a) {
          return 1 - o(1 - a);
        },
        reverse: function () {
          return l;
        }
      };
      cc.easeBounceIn = function () {
        return c;
      };
      var l = {
        easing: function (a) {
          return o(a);
        },
        reverse: function () {
          return c;
        }
      };
      cc.easeBounceOut = function () {
        return l;
      };
      var h = {
        easing: function (a) {
          if (a < 0.5) {
            return (1 - o(1 - (a *= 2))) * 0.5;
          } else {
            return o(a * 2 - 1) * 0.5 + 0.5;
          }
        },
        reverse: function () {
          return h;
        }
      };
      cc.easeBounceInOut = function () {
        return h;
      };
      var s = {
        easing: function (a) {
          if (a === 0 || a === 1) {
            return a;
          } else {
            return a * a * (a * 2.70158 - 1.70158);
          }
        },
        reverse: function () {
          return f;
        }
      };
      cc.easeBackIn = function () {
        return s;
      };
      var f = {
        easing: function (a) {
          if (a === 0) {
            return 0;
          } else {
            return (a -= 1) * a * (a * 2.70158 + 1.70158) + 1;
          }
        },
        reverse: function () {
          return s;
        }
      };
      cc.easeBackOut = function () {
        return f;
      };
      var d = {
        easing: function (a) {
          if ((a *= 2) < 1) {
            return a * a * (a * 3.5949095 - 2.5949095) / 2;
          } else {
            return (a -= 2) * a * (a * 3.5949095 + 2.5949095) / 2 + 1;
          }
        },
        reverse: function () {
          return d;
        }
      };
      cc.easeBackInOut = function () {
        return d;
      };
      cc.easeBezierAction = function (a, b, c, d) {
        return {
          easing: function (e) {
            return Math.pow(1 - e, 3) * a + e * 3 * Math.pow(1 - e, 2) * b + Math.pow(e, 2) * 3 * (1 - e) * c + Math.pow(e, 3) * d;
          },
          reverse: function () {
            return cc.easeBezierAction(d, c, b, a);
          }
        };
      };
      var t = {
        easing: function (a) {
          return Math.pow(a, 2);
        },
        reverse: function () {
          return t;
        }
      };
      cc.easeQuadraticActionIn = function () {
        return t;
      };
      var p = {
        easing: function (a) {
          return -a * (a - 2);
        },
        reverse: function () {
          return p;
        }
      };
      cc.easeQuadraticActionOut = function () {
        return p;
      };
      var u = {
        easing: function (a) {
          if ((a *= 2) < 1) {
            return a * a * 0.5;
          } else {
            return (--a * (a - 2) - 1) * -0.5;
          }
        },
        reverse: function () {
          return u;
        }
      };
      cc.easeQuadraticActionInOut = function () {
        return u;
      };
      var g = {
        easing: function (a) {
          return a * a * a * a;
        },
        reverse: function () {
          return g;
        }
      };
      cc.easeQuarticActionIn = function () {
        return g;
      };
      var m = {
        easing: function (a) {
          return -((a -= 1) * a * a * a - 1);
        },
        reverse: function () {
          return m;
        }
      };
      cc.easeQuarticActionOut = function () {
        return m;
      };
      var v = {
        easing: function (a) {
          if ((a *= 2) < 1) {
            return a * 0.5 * a * a * a;
          } else {
            return ((a -= 2) * a * a * a - 2) * -0.5;
          }
        },
        reverse: function () {
          return v;
        }
      };
      cc.easeQuarticActionInOut = function () {
        return v;
      };
      var y = {
        easing: function (a) {
          return a * a * a * a * a;
        },
        reverse: function () {
          return y;
        }
      };
      cc.easeQuinticActionIn = function () {
        return y;
      };
      var z = {
        easing: function (a) {
          return (a -= 1) * a * a * a * a + 1;
        },
        reverse: function () {
          return z;
        }
      };
      cc.easeQuinticActionOut = function () {
        return z;
      };
      var A = {
        easing: function (a) {
          if ((a *= 2) < 1) {
            return a * 0.5 * a * a * a * a;
          } else {
            return ((a -= 2) * a * a * a * a + 2) * 0.5;
          }
        },
        reverse: function () {
          return A;
        }
      };
      cc.easeQuinticActionInOut = function () {
        return A;
      };
      var x = {
        easing: function (a) {
          return (Math.sqrt(1 - a * a) - 1) * -1;
        },
        reverse: function () {
          return x;
        }
      };
      cc.easeCircleActionIn = function () {
        return x;
      };
      var B = {
        easing: function (a) {
          return Math.sqrt(1 - (a -= 1) * a);
        },
        reverse: function () {
          return B;
        }
      };
      cc.easeCircleActionOut = function () {
        return B;
      };
      var b = {
        easing: function (a) {
          if ((a *= 2) < 1) {
            return (Math.sqrt(1 - a * a) - 1) * -0.5;
          } else {
            return (Math.sqrt(1 - (a -= 2) * a) + 1) * 0.5;
          }
        },
        reverse: function () {
          return b;
        }
      };
      cc.easeCircleActionInOut = function () {
        return b;
      };
      var C = {
        easing: function (a) {
          return a * a * a;
        },
        reverse: function () {
          return C;
        }
      };
      cc.easeCubicActionIn = function () {
        return C;
      };
      var D = {
        easing: function (a) {
          return (a -= 1) * a * a + 1;
        },
        reverse: function () {
          return D;
        }
      };
      cc.easeCubicActionOut = function () {
        return D;
      };
      var E = {
        easing: function (a) {
          if ((a *= 2) < 1) {
            return a * 0.5 * a * a;
          } else {
            return ((a -= 2) * a * a + 2) * 0.5;
          }
        },
        reverse: function () {
          return E;
        }
      };
      cc.easeCubicActionInOut = function () {
        return E;
      };
    }, {}],
    4: [function () {
      "use strict";
  
      cc.ActionInstant = cc.Class({
        name: "cc.ActionInstant",
        extends: cc.FiniteTimeAction,
        isDone: function () {
          return true;
        },
        step: function () {
          this.update(1);
        },
        update: function () {},
        reverse: function () {
          return this.clone();
        },
        clone: function () {
          return new cc.ActionInstant();
        }
      });
      cc.Show = cc.Class({
        name: "cc.Show",
        extends: cc.ActionInstant,
        update: function () {
          for (var a = this.target.getComponentsInChildren(cc.RenderComponent), b = 0; b < a.length; ++b) {
            a[b].enabled = true;
          }
        },
        reverse: function () {
          return new cc.Hide();
        },
        clone: function () {
          return new cc.Show();
        }
      });
      cc.show = function () {
        return new cc.Show();
      };
      cc.Hide = cc.Class({
        name: "cc.Hide",
        extends: cc.ActionInstant,
        update: function () {
          for (var a = this.target.getComponentsInChildren(cc.RenderComponent), b = 0; b < a.length; ++b) {
            a[b].enabled = false;
          }
        },
        reverse: function () {
          return new cc.Show();
        },
        clone: function () {
          return new cc.Hide();
        }
      });
      cc.hide = function () {
        return new cc.Hide();
      };
      cc.ToggleVisibility = cc.Class({
        name: "cc.ToggleVisibility",
        extends: cc.ActionInstant,
        update: function () {
          for (var a = this.target.getComponentsInChildren(cc.RenderComponent), b = 0; b < a.length; ++b) {
            var c = a[b];
            c.enabled = !c.enabled;
          }
        },
        reverse: function () {
          return new cc.ToggleVisibility();
        },
        clone: function () {
          return new cc.ToggleVisibility();
        }
      });
      cc.toggleVisibility = function () {
        return new cc.ToggleVisibility();
      };
      cc.RemoveSelf = cc.Class({
        name: "cc.RemoveSelf",
        extends: cc.ActionInstant,
        ctor: function (a) {
          this._isNeedCleanUp = true;
          if (a !== undefined) {
            this.init(a);
          }
        },
        update: function () {
          this.target.removeFromParent(this._isNeedCleanUp);
        },
        init: function (a) {
          this._isNeedCleanUp = a;
          return true;
        },
        reverse: function () {
          return new cc.RemoveSelf(this._isNeedCleanUp);
        },
        clone: function () {
          return new cc.RemoveSelf(this._isNeedCleanUp);
        }
      });
      cc.removeSelf = function (a) {
        return new cc.RemoveSelf(a);
      };
      cc.DestroySelf = cc.Class({
        name: "cc.DestroySelf",
        extends: cc.ActionInstant,
        update: function () {
          this.target.destroy();
        },
        reverse: function () {
          return new cc.DestroySelf();
        },
        clone: function () {
          return new cc.DestroySelf();
        }
      });
      cc.destroySelf = function () {
        return new cc.DestroySelf();
      };
      cc.FlipX = cc.Class({
        name: "cc.FlipX",
        extends: cc.ActionInstant,
        ctor: function (a) {
          this._flippedX = false;
          if (a !== undefined) {
            this.initWithFlipX(a);
          }
        },
        initWithFlipX: function (a) {
          this._flippedX = a;
          return true;
        },
        update: function () {
          this.target.scaleX = Math.abs(this.target.scaleX) * (this._flippedX ? -1 : 1);
        },
        reverse: function () {
          return new cc.FlipX(!this._flippedX);
        },
        clone: function () {
          var a = new cc.FlipX();
          a.initWithFlipX(this._flippedX);
          return a;
        }
      });
      cc.flipX = function (a) {
        return new cc.FlipX(a);
      };
      cc.FlipY = cc.Class({
        name: "cc.FlipY",
        extends: cc.ActionInstant,
        ctor: function (a) {
          this._flippedY = false;
          if (a !== undefined) {
            this.initWithFlipY(a);
          }
        },
        initWithFlipY: function (a) {
          this._flippedY = a;
          return true;
        },
        update: function () {
          this.target.scaleY = Math.abs(this.target.scaleY) * (this._flippedY ? -1 : 1);
        },
        reverse: function () {
          return new cc.FlipY(!this._flippedY);
        },
        clone: function () {
          var a = new cc.FlipY();
          a.initWithFlipY(this._flippedY);
          return a;
        }
      });
      cc.flipY = function (a) {
        return new cc.FlipY(a);
      };
      cc.Place = cc.Class({
        name: "cc.Place",
        extends: cc.ActionInstant,
        ctor: function (a, b) {
          this._x = 0;
          this._y = 0;
          if (a !== undefined) {
            if (a.x !== undefined) {
              b = a.y;
              a = a.x;
            }
            this.initWithPosition(a, b);
          }
        },
        initWithPosition: function (a, b) {
          this._x = a;
          this._y = b;
          return true;
        },
        update: function () {
          this.target.setPosition(this._x, this._y);
        },
        clone: function () {
          var a = new cc.Place();
          a.initWithPosition(this._x, this._y);
          return a;
        }
      });
      cc.place = function (a, b) {
        return new cc.Place(a, b);
      };
      cc.CallFunc = cc.Class({
        name: "cc.CallFunc",
        extends: cc.ActionInstant,
        ctor: function (a, b, c) {
          this._selectorTarget = null;
          this._function = null;
          this._data = null;
          this.initWithFunction(a, b, c);
        },
        initWithFunction: function (a, b, c) {
          if (a) {
            this._function = a;
          }
          if (b) {
            this._selectorTarget = b;
          }
          if (c !== undefined) {
            this._data = c;
          }
          return true;
        },
        execute: function () {
          if (this._function) {
            this._function.call(this._selectorTarget, this.target, this._data);
          }
        },
        update: function () {
          this.execute();
        },
        getTargetCallback: function () {
          return this._selectorTarget;
        },
        setTargetCallback: function (a) {
          if (a !== this._selectorTarget) {
            if (this._selectorTarget) {
              this._selectorTarget = null;
            }
            this._selectorTarget = a;
          }
        },
        clone: function () {
          var a = new cc.CallFunc();
          a.initWithFunction(this._function, this._selectorTarget, this._data);
          return a;
        }
      });
      cc.callFunc = function (a, b, c) {
        return new cc.CallFunc(a, b, c);
      };
    }, {}],
    5: [function () {
      "use strict";
  
      function b(a, b, c, d, e) {
        return Math.pow(1 - e, 3) * a + e * 3 * Math.pow(1 - e, 2) * b + Math.pow(e, 2) * 3 * (1 - e) * c + Math.pow(e, 3) * d;
      }
      cc.ActionInterval = cc.Class({
        name: "cc.ActionInterval",
        extends: cc.FiniteTimeAction,
        ctor: function (a) {
          this.MAX_VALUE = 2;
          this._elapsed = 0;
          this._firstTick = false;
          this._easeList = null;
          this._speed = 1;
          this._timesForRepeat = 1;
          this._repeatForever = false;
          this._repeatMethod = false;
          this._speedMethod = false;
          if (a !== undefined) {
            cc.ActionInterval.prototype.initWithDuration.call(this, a);
          }
        },
        getElapsed: function () {
          return this._elapsed;
        },
        initWithDuration: function (a) {
          this._duration = a === 0 ? cc.macro.FLT_EPSILON : a;
          this._elapsed = 0;
          this._firstTick = true;
          return true;
        },
        isDone: function () {
          return this._elapsed >= this._duration;
        },
        _cloneDecoration: function (a) {
          a._repeatForever = this._repeatForever;
          a._speed = this._speed;
          a._timesForRepeat = this._timesForRepeat;
          a._easeList = this._easeList;
          a._speedMethod = this._speedMethod;
          a._repeatMethod = this._repeatMethod;
        },
        _reverseEaseList: function (a) {
          if (this._easeList) {
            a._easeList = [];
            for (var b = 0; b < this._easeList.length; b++) {
              a._easeList.push(this._easeList[b].reverse());
            }
          }
        },
        clone: function () {
          var a = new cc.ActionInterval(this._duration);
          this._cloneDecoration(a);
          return a;
        },
        easing: function () {
          if (this._easeList) {
            this._easeList.length = 0;
          } else {
            this._easeList = [];
          }
          for (var a = 0; a < arguments.length; a++) {
            this._easeList.push(arguments[a]);
          }
          return this;
        },
        _computeEaseTime: function (a) {
          var b = this._easeList;
          if (!b || b.length === 0) {
            return a;
          }
          for (var c = 0, d = b.length; c < d; c++) {
            a = b[c].easing(a);
          }
          return a;
        },
        step: function (a) {
          if (this._firstTick) {
            this._firstTick = false;
            this._elapsed = 0;
          } else {
            this._elapsed += a;
          }
          var b = this._elapsed / (this._duration > 1.192092896e-7 ? this._duration : 1.192092896e-7);
          b = b < 1 ? b : 1;
          this.update(b > 0 ? b : 0);
          if (this._repeatMethod && this._timesForRepeat > 1 && this.isDone()) {
            if (!this._repeatForever) {
              this._timesForRepeat--;
            }
            this.startWithTarget(this.target);
            this.step(this._elapsed - this._duration);
          }
        },
        startWithTarget: function (a) {
          cc.Action.prototype.startWithTarget.call(this, a);
          this._elapsed = 0;
          this._firstTick = true;
        },
        reverse: function () {
          return null;
        },
        setAmplitudeRate: function () {},
        getAmplitudeRate: function () {
          return 0;
        },
        speed: function (a) {
          if (a <= 0) {
            return this;
          } else {
            this._speedMethod = true;
            this._speed *= a;
            return this;
          }
        },
        getSpeed: function () {
          return this._speed;
        },
        setSpeed: function (a) {
          this._speed = a;
          return this;
        },
        repeat: function (a) {
          if (isNaN(a = Math.round(a)) || a < 1) {
            return this;
          } else {
            this._repeatMethod = true;
            this._timesForRepeat *= a;
            return this;
          }
        },
        repeatForever: function () {
          this._repeatMethod = true;
          this._timesForRepeat = this.MAX_VALUE;
          this._repeatForever = true;
          return this;
        }
      });
      cc.actionInterval = function (a) {
        return new cc.ActionInterval(a);
      };
      cc.Sequence = cc.Class({
        name: "cc.Sequence",
        extends: cc.ActionInterval,
        ctor: function (a) {
          this._actions = [];
          this._split = null;
          this._last = 0;
          this._reversed = false;
          var b = a instanceof Array ? a : arguments;
          if (b.length !== 1) {
            var c = b.length - 1;
            if (c >= 0) {
              b[c];
            }
            if (c >= 0) {
              for (var d, e = b[0], f = 1; f < c; f++) {
                if (b[f]) {
                  d = e;
                  e = cc.Sequence._actionOneTwo(d, b[f]);
                }
              }
              this.initWithTwoActions(e, b[c]);
            }
          }
        },
        initWithTwoActions: function (a, b) {
          if (!a || !b) {
            return false;
          }
          var c = a._duration;
          var d = b._duration;
          var e = (c *= a._repeatMethod ? a._timesForRepeat : 1) + (d *= b._repeatMethod ? b._timesForRepeat : 1);
          this.initWithDuration(e);
          this._actions[0] = a;
          this._actions[1] = b;
          return true;
        },
        clone: function () {
          var a = new cc.Sequence();
          this._cloneDecoration(a);
          a.initWithTwoActions(this._actions[0].clone(), this._actions[1].clone());
          return a;
        },
        startWithTarget: function (a) {
          cc.ActionInterval.prototype.startWithTarget.call(this, a);
          this._split = this._actions[0]._duration / this._duration;
          this._split *= this._actions[0]._repeatMethod ? this._actions[0]._timesForRepeat : 1;
          this._last = -1;
        },
        stop: function () {
          if (this._last !== -1) {
            this._actions[this._last].stop();
          }
          cc.Action.prototype.stop.call(this);
        },
        update: function (b) {
          var c;
          var d;
          var f = 0;
          var g = this._split;
          var h = this._actions;
          var j = this._last;
          if ((b = this._computeEaseTime(b)) < g) {
            c = g !== 0 ? b / g : 1;
            if (f === 0 && j === 1 && this._reversed) {
              h[1].update(0);
              h[1].stop();
            }
          } else {
            f = 1;
            c = g === 1 ? 1 : (b - g) / (1 - g);
            if (j === -1) {
              h[0].startWithTarget(this.target);
              h[0].update(1);
              h[0].stop();
            }
            if (j === 0) {
              h[0].update(1);
              h[0].stop();
            }
          }
          d = h[f];
          if (!(j === f && d.isDone())) {
            if (j !== f) {
              d.startWithTarget(this.target);
            }
            c *= d._timesForRepeat;
            d.update(c > 1 ? c % 1 : c);
            this._last = f;
          }
        },
        reverse: function () {
          var a = cc.Sequence._actionOneTwo(this._actions[1].reverse(), this._actions[0].reverse());
          this._cloneDecoration(a);
          this._reverseEaseList(a);
          a._reversed = true;
          return a;
        }
      });
      cc.sequence = function (a) {
        var b = a instanceof Array ? a : arguments;
        if (b.length === 1) {
          return null;
        }
        var c = b.length - 1;
        if (c >= 0) {
          b[c];
        }
        var d = null;
        if (c >= 0) {
          d = b[0];
          for (var e = 1; e <= c; e++) {
            if (b[e]) {
              d = cc.Sequence._actionOneTwo(d, b[e]);
            }
          }
        }
        return d;
      };
      cc.Sequence._actionOneTwo = function (a, b) {
        var c = new cc.Sequence();
        c.initWithTwoActions(a, b);
        return c;
      };
      cc.Repeat = cc.Class({
        name: "cc.Repeat",
        extends: cc.ActionInterval,
        ctor: function (a, b) {
          this._times = 0;
          this._total = 0;
          this._nextDt = 0;
          this._actionInstant = false;
          this._innerAction = null;
          if (b !== undefined) {
            this.initWithAction(a, b);
          }
        },
        initWithAction: function (a, b) {
          var c = a._duration * b;
          return !!this.initWithDuration(c) && (this._times = b, this._innerAction = a, a instanceof cc.ActionInstant && (this._actionInstant = true, this._times -= 1), this._total = 0, true);
        },
        clone: function () {
          var a = new cc.Repeat();
          this._cloneDecoration(a);
          a.initWithAction(this._innerAction.clone(), this._times);
          return a;
        },
        startWithTarget: function (a) {
          this._total = 0;
          this._nextDt = this._innerAction._duration / this._duration;
          cc.ActionInterval.prototype.startWithTarget.call(this, a);
          this._innerAction.startWithTarget(a);
        },
        stop: function () {
          this._innerAction.stop();
          cc.Action.prototype.stop.call(this);
        },
        update: function (a) {
          a = this._computeEaseTime(a);
          var b = this._innerAction;
          var c = this._duration;
          var d = this._times;
          var e = this._nextDt;
          if (a >= e) {
            for (; a > e && this._total < d;) {
              b.update(1);
              this._total++;
              b.stop();
              b.startWithTarget(this.target);
              e += b._duration / c;
              this._nextDt = e > 1 ? 1 : e;
            }
            if (a >= 1 && this._total < d) {
              b.update(1);
              this._total++;
            }
            if (!this._actionInstant) {
              if (this._total === d) {
                b.stop();
              } else {
                b.update(a - (e - b._duration / c));
              }
            }
          } else {
            b.update(a * d % 1);
          }
        },
        isDone: function () {
          return this._total === this._times;
        },
        reverse: function () {
          var a = new cc.Repeat(this._innerAction.reverse(), this._times);
          this._cloneDecoration(a);
          this._reverseEaseList(a);
          return a;
        },
        setInnerAction: function (a) {
          if (this._innerAction !== a) {
            this._innerAction = a;
          }
        },
        getInnerAction: function () {
          return this._innerAction;
        }
      });
      cc.repeat = function (a, b) {
        return new cc.Repeat(a, b);
      };
      cc.repeatForever = function (a) {
        return new cc.RepeatForever(a);
      };
      cc.RepeatForever = cc.Class({
        name: "cc.RepeatForever",
        extends: cc.ActionInterval,
        ctor: function (a) {
          this._innerAction = null;
          if (a) {
            this.initWithAction(a);
          }
        },
        initWithAction: function (a) {
          return !!a && (this._innerAction = a, true);
        },
        clone: function () {
          var a = new cc.RepeatForever();
          this._cloneDecoration(a);
          a.initWithAction(this._innerAction.clone());
          return a;
        },
        startWithTarget: function (a) {
          cc.ActionInterval.prototype.startWithTarget.call(this, a);
          this._innerAction.startWithTarget(a);
        },
        step: function (a) {
          var b = this._innerAction;
          b.step(a);
          if (b.isDone()) {
            b.startWithTarget(this.target);
            b.step(b.getElapsed() - b._duration);
          }
        },
        isDone: function () {
          return false;
        },
        reverse: function () {
          var a = new cc.RepeatForever(this._innerAction.reverse());
          this._cloneDecoration(a);
          this._reverseEaseList(a);
          return a;
        },
        setInnerAction: function (a) {
          if (this._innerAction !== a) {
            this._innerAction = a;
          }
        },
        getInnerAction: function () {
          return this._innerAction;
        }
      });
      cc.repeatForever = function (a) {
        return new cc.RepeatForever(a);
      };
      cc.Spawn = cc.Class({
        name: "cc.Spawn",
        extends: cc.ActionInterval,
        ctor: function (a) {
          this._one = null;
          this._two = null;
          var b = a instanceof Array ? a : arguments;
          if (b.length !== 1) {
            var c = b.length - 1;
            if (c >= 0) {
              b[c];
            }
            if (c >= 0) {
              for (var d, e = b[0], f = 1; f < c; f++) {
                if (b[f]) {
                  d = e;
                  e = cc.Spawn._actionOneTwo(d, b[f]);
                }
              }
              this.initWithTwoActions(e, b[c]);
            }
          }
        },
        initWithTwoActions: function (a, b) {
          if (!a || !b) {
            return false;
          }
          var c = false;
          var d = a._duration;
          var e = b._duration;
          if (this.initWithDuration(Math.max(d, e))) {
            this._one = a;
            this._two = b;
            if (d > e) {
              this._two = cc.Sequence._actionOneTwo(b, cc.delayTime(d - e));
            } else if (d < e) {
              this._one = cc.Sequence._actionOneTwo(a, cc.delayTime(e - d));
            }
            c = true;
          }
          return c;
        },
        clone: function () {
          var a = new cc.Spawn();
          this._cloneDecoration(a);
          a.initWithTwoActions(this._one.clone(), this._two.clone());
          return a;
        },
        startWithTarget: function (a) {
          cc.ActionInterval.prototype.startWithTarget.call(this, a);
          this._one.startWithTarget(a);
          this._two.startWithTarget(a);
        },
        stop: function () {
          this._one.stop();
          this._two.stop();
          cc.Action.prototype.stop.call(this);
        },
        update: function (a) {
          a = this._computeEaseTime(a);
          if (this._one) {
            this._one.update(a);
          }
          if (this._two) {
            this._two.update(a);
          }
        },
        reverse: function () {
          var a = cc.Spawn._actionOneTwo(this._one.reverse(), this._two.reverse());
          this._cloneDecoration(a);
          this._reverseEaseList(a);
          return a;
        }
      });
      cc.spawn = function (a) {
        var b = a instanceof Array ? a : arguments;
        if (b.length === 1) {
          return null;
        }
        if (b.length > 0) {
          b[b.length - 1];
        }
        for (var c = b[0], d = 1; d < b.length; d++) {
          if (b[d] != null) {
            c = cc.Spawn._actionOneTwo(c, b[d]);
          }
        }
        return c;
      };
      cc.Spawn._actionOneTwo = function (a, b) {
        var c = new cc.Spawn();
        c.initWithTwoActions(a, b);
        return c;
      };
      cc.RotateTo = cc.Class({
        name: "cc.RotateTo",
        extends: cc.ActionInterval,
        statics: {
          _reverse: false
        },
        ctor: function (a, b) {
          this._startAngle = 0;
          this._dstAngle = 0;
          this._angle = 0;
          if (b !== undefined) {
            this.initWithDuration(a, b);
          }
        },
        initWithDuration: function (a, b) {
          return !!cc.ActionInterval.prototype.initWithDuration.call(this, a) && (this._dstAngle = b, true);
        },
        clone: function () {
          var a = new cc.RotateTo();
          this._cloneDecoration(a);
          a.initWithDuration(this._duration, this._dstAngle);
          return a;
        },
        startWithTarget: function (a) {
          cc.ActionInterval.prototype.startWithTarget.call(this, a);
          var b = a.angle % 360;
          var c = cc.RotateTo._reverse ? this._dstAngle - b : this._dstAngle + b;
          if (c > 180) {
            c -= 360;
          }
          if (c < -180) {
            c += 360;
          }
          this._startAngle = b;
          this._angle = cc.RotateTo._reverse ? c : -c;
        },
        reverse: function () {},
        update: function (a) {
          a = this._computeEaseTime(a);
          if (this.target) {
            this.target.angle = this._startAngle + this._angle * a;
          }
        }
      });
      cc.rotateTo = function (a, b) {
        return new cc.RotateTo(a, b);
      };
      cc.RotateBy = cc.Class({
        name: "cc.RotateBy",
        extends: cc.ActionInterval,
        statics: {
          _reverse: false
        },
        ctor: function (a, b) {
          b *= cc.RotateBy._reverse ? 1 : -1;
          this._deltaAngle = 0;
          this._startAngle = 0;
          if (b !== undefined) {
            this.initWithDuration(a, b);
          }
        },
        initWithDuration: function (a, b) {
          return !!cc.ActionInterval.prototype.initWithDuration.call(this, a) && (this._deltaAngle = b, true);
        },
        clone: function () {
          var a = new cc.RotateBy();
          this._cloneDecoration(a);
          a.initWithDuration(this._duration, this._deltaAngle);
          return a;
        },
        startWithTarget: function (a) {
          cc.ActionInterval.prototype.startWithTarget.call(this, a);
          this._startAngle = a.angle;
        },
        update: function (a) {
          a = this._computeEaseTime(a);
          if (this.target) {
            this.target.angle = this._startAngle + this._deltaAngle * a;
          }
        },
        reverse: function () {
          var a = new cc.RotateBy();
          a.initWithDuration(this._duration, -this._deltaAngle);
          this._cloneDecoration(a);
          this._reverseEaseList(a);
          return a;
        }
      });
      cc.rotateBy = function (a, b) {
        return new cc.RotateBy(a, b);
      };
      cc.MoveBy = cc.Class({
        name: "cc.MoveBy",
        extends: cc.ActionInterval,
        ctor: function (a, b, c) {
          this._positionDelta = cc.v2(0, 0);
          this._startPosition = cc.v2(0, 0);
          this._previousPosition = cc.v2(0, 0);
          if (b !== undefined) {
            cc.MoveBy.prototype.initWithDuration.call(this, a, b, c);
          }
        },
        initWithDuration: function (a, b, c) {
          return !!cc.ActionInterval.prototype.initWithDuration.call(this, a) && (b.x !== undefined && (c = b.y, b = b.x), this._positionDelta.x = b, this._positionDelta.y = c, true);
        },
        clone: function () {
          var a = new cc.MoveBy();
          this._cloneDecoration(a);
          a.initWithDuration(this._duration, this._positionDelta);
          return a;
        },
        startWithTarget: function (a) {
          cc.ActionInterval.prototype.startWithTarget.call(this, a);
          var b = a.x;
          var c = a.y;
          this._previousPosition.x = b;
          this._previousPosition.y = c;
          this._startPosition.x = b;
          this._startPosition.y = c;
        },
        update: function (b) {
          b = this._computeEaseTime(b);
          if (this.target) {
            var c = this._positionDelta.x * b;
            var d = this._positionDelta.y * b;
            var f = this._startPosition;
            if (cc.macro.ENABLE_STACKABLE_ACTIONS) {
              var g = this.target.x;
              var h = this.target.y;
              var j = this._previousPosition;
              f.x = f.x + g - j.x;
              f.y = f.y + h - j.y;
              c += f.x;
              d += f.y;
              j.x = c;
              j.y = d;
              this.target.setPosition(c, d);
            } else {
              this.target.setPosition(f.x + c, f.y + d);
            }
          }
        },
        reverse: function () {
          var a = new cc.MoveBy(this._duration, cc.v2(-this._positionDelta.x, -this._positionDelta.y));
          this._cloneDecoration(a);
          this._reverseEaseList(a);
          return a;
        }
      });
      cc.moveBy = function (a, b, c) {
        return new cc.MoveBy(a, b, c);
      };
      cc.MoveTo = cc.Class({
        name: "cc.MoveTo",
        extends: cc.MoveBy,
        ctor: function (a, b, c) {
          this._endPosition = cc.v2(0, 0);
          if (b !== undefined) {
            this.initWithDuration(a, b, c);
          }
        },
        initWithDuration: function (a, b, c) {
          return !!cc.MoveBy.prototype.initWithDuration.call(this, a, b, c) && (b.x !== undefined && (c = b.y, b = b.x), this._endPosition.x = b, this._endPosition.y = c, true);
        },
        clone: function () {
          var a = new cc.MoveTo();
          this._cloneDecoration(a);
          a.initWithDuration(this._duration, this._endPosition);
          return a;
        },
        startWithTarget: function (a) {
          cc.MoveBy.prototype.startWithTarget.call(this, a);
          this._positionDelta.x = this._endPosition.x - a.x;
          this._positionDelta.y = this._endPosition.y - a.y;
        }
      });
      cc.moveTo = function (a, b, c) {
        return new cc.MoveTo(a, b, c);
      };
      cc.SkewTo = cc.Class({
        name: "cc.SkewTo",
        extends: cc.ActionInterval,
        ctor: function (a, b, c) {
          this._skewX = 0;
          this._skewY = 0;
          this._startSkewX = 0;
          this._startSkewY = 0;
          this._endSkewX = 0;
          this._endSkewY = 0;
          this._deltaX = 0;
          this._deltaY = 0;
          if (c !== undefined) {
            cc.SkewTo.prototype.initWithDuration.call(this, a, b, c);
          }
        },
        initWithDuration: function (a, b, c) {
          var d = false;
          if (cc.ActionInterval.prototype.initWithDuration.call(this, a)) {
            this._endSkewX = b;
            this._endSkewY = c;
            d = true;
          }
          return d;
        },
        clone: function () {
          var a = new cc.SkewTo();
          this._cloneDecoration(a);
          a.initWithDuration(this._duration, this._endSkewX, this._endSkewY);
          return a;
        },
        startWithTarget: function (a) {
          cc.ActionInterval.prototype.startWithTarget.call(this, a);
          this._startSkewX = a.skewX % 180;
          this._deltaX = this._endSkewX - this._startSkewX;
          if (this._deltaX > 180) {
            this._deltaX -= 360;
          }
          if (this._deltaX < -180) {
            this._deltaX += 360;
          }
          this._startSkewY = a.skewY % 360;
          this._deltaY = this._endSkewY - this._startSkewY;
          if (this._deltaY > 180) {
            this._deltaY -= 360;
          }
          if (this._deltaY < -180) {
            this._deltaY += 360;
          }
        },
        update: function (a) {
          a = this._computeEaseTime(a);
          this.target.skewX = this._startSkewX + this._deltaX * a;
          this.target.skewY = this._startSkewY + this._deltaY * a;
        }
      });
      cc.skewTo = function (a, b, c) {
        return new cc.SkewTo(a, b, c);
      };
      cc.SkewBy = cc.Class({
        name: "cc.SkewBy",
        extends: cc.SkewTo,
        ctor: function (a, b, c) {
          if (c !== undefined) {
            this.initWithDuration(a, b, c);
          }
        },
        initWithDuration: function (a, b, c) {
          var d = false;
          if (cc.SkewTo.prototype.initWithDuration.call(this, a, b, c)) {
            this._skewX = b;
            this._skewY = c;
            d = true;
          }
          return d;
        },
        clone: function () {
          var a = new cc.SkewBy();
          this._cloneDecoration(a);
          a.initWithDuration(this._duration, this._skewX, this._skewY);
          return a;
        },
        startWithTarget: function (a) {
          cc.SkewTo.prototype.startWithTarget.call(this, a);
          this._deltaX = this._skewX;
          this._deltaY = this._skewY;
          this._endSkewX = this._startSkewX + this._deltaX;
          this._endSkewY = this._startSkewY + this._deltaY;
        },
        reverse: function () {
          var a = new cc.SkewBy(this._duration, -this._skewX, -this._skewY);
          this._cloneDecoration(a);
          this._reverseEaseList(a);
          return a;
        }
      });
      cc.skewBy = function (a, b, c) {
        return new cc.SkewBy(a, b, c);
      };
      cc.JumpBy = cc.Class({
        name: "cc.JumpBy",
        extends: cc.ActionInterval,
        ctor: function (a, b, c, d, e) {
          this._startPosition = cc.v2(0, 0);
          this._previousPosition = cc.v2(0, 0);
          this._delta = cc.v2(0, 0);
          this._height = 0;
          this._jumps = 0;
          if (d !== undefined) {
            cc.JumpBy.prototype.initWithDuration.call(this, a, b, c, d, e);
          }
        },
        initWithDuration: function (a, b, c, d, f) {
          return !!cc.ActionInterval.prototype.initWithDuration.call(this, a) && (f === undefined && (f = d, d = c, c = b.y, b = b.x), this._delta.x = b, this._delta.y = c, this._height = d, this._jumps = f, true);
        },
        clone: function () {
          var a = new cc.JumpBy();
          this._cloneDecoration(a);
          a.initWithDuration(this._duration, this._delta, this._height, this._jumps);
          return a;
        },
        startWithTarget: function (a) {
          cc.ActionInterval.prototype.startWithTarget.call(this, a);
          var b = a.x;
          var c = a.y;
          this._previousPosition.x = b;
          this._previousPosition.y = c;
          this._startPosition.x = b;
          this._startPosition.y = c;
        },
        update: function (b) {
          b = this._computeEaseTime(b);
          if (this.target) {
            var c = b * this._jumps % 1;
            var d = this._height * 4 * c * (1 - c);
            d += this._delta.y * b;
            var e = this._delta.x * b;
            var f = this._startPosition;
            if (cc.macro.ENABLE_STACKABLE_ACTIONS) {
              var g = this.target.x;
              var h = this.target.y;
              var a = this._previousPosition;
              f.x = f.x + g - a.x;
              f.y = f.y + h - a.y;
              e += f.x;
              d += f.y;
              a.x = e;
              a.y = d;
              this.target.setPosition(e, d);
            } else {
              this.target.setPosition(f.x + e, f.y + d);
            }
          }
        },
        reverse: function () {
          var a = new cc.JumpBy(this._duration, cc.v2(-this._delta.x, -this._delta.y), this._height, this._jumps);
          this._cloneDecoration(a);
          this._reverseEaseList(a);
          return a;
        }
      });
      cc.jumpBy = function (a, b, c, d, e) {
        return new cc.JumpBy(a, b, c, d, e);
      };
      cc.JumpTo = cc.Class({
        name: "cc.JumpTo",
        extends: cc.JumpBy,
        ctor: function (a, b, c, d, e) {
          this._endPosition = cc.v2(0, 0);
          if (d !== undefined) {
            this.initWithDuration(a, b, c, d, e);
          }
        },
        initWithDuration: function (a, b, c, d, f) {
          return !!cc.JumpBy.prototype.initWithDuration.call(this, a, b, c, d, f) && (f === undefined && (c = b.y, b = b.x), this._endPosition.x = b, this._endPosition.y = c, true);
        },
        startWithTarget: function (a) {
          cc.JumpBy.prototype.startWithTarget.call(this, a);
          this._delta.x = this._endPosition.x - this._startPosition.x;
          this._delta.y = this._endPosition.y - this._startPosition.y;
        },
        clone: function () {
          var a = new cc.JumpTo();
          this._cloneDecoration(a);
          a.initWithDuration(this._duration, this._endPosition, this._height, this._jumps);
          return a;
        }
      });
      cc.jumpTo = function (a, b, c, d, e) {
        return new cc.JumpTo(a, b, c, d, e);
      };
      cc.BezierBy = cc.Class({
        name: "cc.BezierBy",
        extends: cc.ActionInterval,
        ctor: function (a, b) {
          this._config = [];
          this._startPosition = cc.v2(0, 0);
          this._previousPosition = cc.v2(0, 0);
          if (b) {
            cc.BezierBy.prototype.initWithDuration.call(this, a, b);
          }
        },
        initWithDuration: function (a, b) {
          return !!cc.ActionInterval.prototype.initWithDuration.call(this, a) && (this._config = b, true);
        },
        clone: function () {
          var a = new cc.BezierBy();
          this._cloneDecoration(a);
          for (var b = [], c = 0; c < this._config.length; c++) {
            var d = this._config[c];
            b.push(cc.v2(d.x, d.y));
          }
          a.initWithDuration(this._duration, b);
          return a;
        },
        startWithTarget: function (a) {
          cc.ActionInterval.prototype.startWithTarget.call(this, a);
          var b = a.x;
          var c = a.y;
          this._previousPosition.x = b;
          this._previousPosition.y = c;
          this._startPosition.x = b;
          this._startPosition.y = c;
        },
        update: function (g) {
          g = this._computeEaseTime(g);
          if (this.target) {
            var j = this._config;
            var i = j[0].x;
            var k = j[1].x;
            var m = j[2].x;
            var n = j[0].y;
            var a = j[1].y;
            var o = j[2].y;
            var c = b(0, i, k, m, g);
            var p = b(0, n, a, o, g);
            var q = this._startPosition;
            if (cc.macro.ENABLE_STACKABLE_ACTIONS) {
              var r = this.target.x;
              var f = this.target.y;
              var d = this._previousPosition;
              q.x = q.x + r - d.x;
              q.y = q.y + f - d.y;
              c += q.x;
              p += q.y;
              d.x = c;
              d.y = p;
              this.target.setPosition(c, p);
            } else {
              this.target.setPosition(q.x + c, q.y + p);
            }
          }
        },
        reverse: function () {
          var b = this._config;
          var d = b[0].x;
          var e = b[0].y;
          var f = b[1].x;
          var g = b[1].y;
          var h = b[2].x;
          var i = b[2].y;
          var a = [cc.v2(f - h, g - i), cc.v2(d - h, e - i), cc.v2(-h, -i)];
          var j = new cc.BezierBy(this._duration, a);
          this._cloneDecoration(j);
          this._reverseEaseList(j);
          return j;
        }
      });
      cc.bezierBy = function (a, b) {
        return new cc.BezierBy(a, b);
      };
      cc.BezierTo = cc.Class({
        name: "cc.BezierTo",
        extends: cc.BezierBy,
        ctor: function (a, b) {
          this._toConfig = [];
          if (b) {
            this.initWithDuration(a, b);
          }
        },
        initWithDuration: function (a, b) {
          return !!cc.ActionInterval.prototype.initWithDuration.call(this, a) && (this._toConfig = b, true);
        },
        clone: function () {
          var a = new cc.BezierTo();
          this._cloneDecoration(a);
          a.initWithDuration(this._duration, this._toConfig);
          return a;
        },
        startWithTarget: function (a) {
          cc.BezierBy.prototype.startWithTarget.call(this, a);
          var b = this._startPosition;
          var c = this._toConfig;
          var d = this._config;
          d[0] = c[0].sub(b);
          d[1] = c[1].sub(b);
          d[2] = c[2].sub(b);
        }
      });
      cc.bezierTo = function (a, b) {
        return new cc.BezierTo(a, b);
      };
      cc.ScaleTo = cc.Class({
        name: "cc.ScaleTo",
        extends: cc.ActionInterval,
        ctor: function (a, b, c) {
          this._scaleX = 1;
          this._scaleY = 1;
          this._startScaleX = 1;
          this._startScaleY = 1;
          this._endScaleX = 0;
          this._endScaleY = 0;
          this._deltaX = 0;
          this._deltaY = 0;
          if (b !== undefined) {
            cc.ScaleTo.prototype.initWithDuration.call(this, a, b, c);
          }
        },
        initWithDuration: function (a, b, c) {
          return !!cc.ActionInterval.prototype.initWithDuration.call(this, a) && (this._endScaleX = b, this._endScaleY = c != null ? c : b, true);
        },
        clone: function () {
          var a = new cc.ScaleTo();
          this._cloneDecoration(a);
          a.initWithDuration(this._duration, this._endScaleX, this._endScaleY);
          return a;
        },
        startWithTarget: function (a) {
          cc.ActionInterval.prototype.startWithTarget.call(this, a);
          this._startScaleX = a.scaleX;
          this._startScaleY = a.scaleY;
          this._deltaX = this._endScaleX - this._startScaleX;
          this._deltaY = this._endScaleY - this._startScaleY;
        },
        update: function (a) {
          a = this._computeEaseTime(a);
          if (this.target) {
            this.target.scaleX = this._startScaleX + this._deltaX * a;
            this.target.scaleY = this._startScaleY + this._deltaY * a;
          }
        }
      });
      cc.scaleTo = function (a, b, c) {
        return new cc.ScaleTo(a, b, c);
      };
      cc.ScaleBy = cc.Class({
        name: "cc.ScaleBy",
        extends: cc.ScaleTo,
        startWithTarget: function (a) {
          cc.ScaleTo.prototype.startWithTarget.call(this, a);
          this._deltaX = this._startScaleX * this._endScaleX - this._startScaleX;
          this._deltaY = this._startScaleY * this._endScaleY - this._startScaleY;
        },
        reverse: function () {
          var a = new cc.ScaleBy(this._duration, 1 / this._endScaleX, 1 / this._endScaleY);
          this._cloneDecoration(a);
          this._reverseEaseList(a);
          return a;
        },
        clone: function () {
          var a = new cc.ScaleBy();
          this._cloneDecoration(a);
          a.initWithDuration(this._duration, this._endScaleX, this._endScaleY);
          return a;
        }
      });
      cc.scaleBy = function (a, b, c) {
        return new cc.ScaleBy(a, b, c);
      };
      cc.Blink = cc.Class({
        name: "cc.Blink",
        extends: cc.ActionInterval,
        ctor: function (a, b) {
          this._times = 0;
          this._originalState = false;
          if (b !== undefined) {
            this.initWithDuration(a, b);
          }
        },
        initWithDuration: function (a, b) {
          return !!cc.ActionInterval.prototype.initWithDuration.call(this, a) && (this._times = b, true);
        },
        clone: function () {
          var a = new cc.Blink();
          this._cloneDecoration(a);
          a.initWithDuration(this._duration, this._times);
          return a;
        },
        update: function (a) {
          a = this._computeEaseTime(a);
          if (this.target && !this.isDone()) {
            var b = 1 / this._times;
            var c = a % b;
            this.target.opacity = c > b / 2 ? 255 : 0;
          }
        },
        startWithTarget: function (a) {
          cc.ActionInterval.prototype.startWithTarget.call(this, a);
          this._originalState = a.opacity;
        },
        stop: function () {
          this.target.opacity = this._originalState;
          cc.ActionInterval.prototype.stop.call(this);
        },
        reverse: function () {
          var a = new cc.Blink(this._duration, this._times);
          this._cloneDecoration(a);
          this._reverseEaseList(a);
          return a;
        }
      });
      cc.blink = function (a, b) {
        return new cc.Blink(a, b);
      };
      cc.FadeTo = cc.Class({
        name: "cc.FadeTo",
        extends: cc.ActionInterval,
        ctor: function (a, b) {
          this._toOpacity = 0;
          this._fromOpacity = 0;
          if (b !== undefined) {
            cc.FadeTo.prototype.initWithDuration.call(this, a, b);
          }
        },
        initWithDuration: function (a, b) {
          return !!cc.ActionInterval.prototype.initWithDuration.call(this, a) && (this._toOpacity = b, true);
        },
        clone: function () {
          var a = new cc.FadeTo();
          this._cloneDecoration(a);
          a.initWithDuration(this._duration, this._toOpacity);
          return a;
        },
        update: function (a) {
          a = this._computeEaseTime(a);
          var b = this._fromOpacity !== undefined ? this._fromOpacity : 255;
          this.target.opacity = b + (this._toOpacity - b) * a;
        },
        startWithTarget: function (a) {
          cc.ActionInterval.prototype.startWithTarget.call(this, a);
          this._fromOpacity = a.opacity;
        }
      });
      cc.fadeTo = function (a, b) {
        return new cc.FadeTo(a, b);
      };
      cc.FadeIn = cc.Class({
        name: "cc.FadeIn",
        extends: cc.FadeTo,
        ctor: function (a) {
          if (a == null) {
            a = 0;
          }
          this._reverseAction = null;
          this.initWithDuration(a, 255);
        },
        reverse: function () {
          var a = new cc.FadeOut();
          a.initWithDuration(this._duration, 0);
          this._cloneDecoration(a);
          this._reverseEaseList(a);
          return a;
        },
        clone: function () {
          var a = new cc.FadeIn();
          this._cloneDecoration(a);
          a.initWithDuration(this._duration, this._toOpacity);
          return a;
        },
        startWithTarget: function (a) {
          if (this._reverseAction) {
            this._toOpacity = this._reverseAction._fromOpacity;
          }
          cc.FadeTo.prototype.startWithTarget.call(this, a);
        }
      });
      cc.fadeIn = function (a) {
        return new cc.FadeIn(a);
      };
      cc.FadeOut = cc.Class({
        name: "cc.FadeOut",
        extends: cc.FadeTo,
        ctor: function (a) {
          if (a == null) {
            a = 0;
          }
          this._reverseAction = null;
          this.initWithDuration(a, 0);
        },
        reverse: function () {
          var a = new cc.FadeIn();
          a._reverseAction = this;
          a.initWithDuration(this._duration, 255);
          this._cloneDecoration(a);
          this._reverseEaseList(a);
          return a;
        },
        clone: function () {
          var a = new cc.FadeOut();
          this._cloneDecoration(a);
          a.initWithDuration(this._duration, this._toOpacity);
          return a;
        }
      });
      cc.fadeOut = function (a) {
        return new cc.FadeOut(a);
      };
      cc.TintTo = cc.Class({
        name: "cc.TintTo",
        extends: cc.ActionInterval,
        ctor: function (a, b, c, d) {
          this._to = cc.color(0, 0, 0);
          this._from = cc.color(0, 0, 0);
          if (b instanceof cc.Color) {
            d = b.b;
            c = b.g;
            b = b.r;
          }
          if (d !== undefined) {
            this.initWithDuration(a, b, c, d);
          }
        },
        initWithDuration: function (a, b, c, d) {
          return !!cc.ActionInterval.prototype.initWithDuration.call(this, a) && (this._to = cc.color(b, c, d), true);
        },
        clone: function () {
          var a = new cc.TintTo();
          this._cloneDecoration(a);
          var b = this._to;
          a.initWithDuration(this._duration, b.r, b.g, b.b);
          return a;
        },
        startWithTarget: function (a) {
          cc.ActionInterval.prototype.startWithTarget.call(this, a);
          this._from = this.target.color;
        },
        update: function (a) {
          a = this._computeEaseTime(a);
          var b = this._from;
          var c = this._to;
          if (b) {
            this.target.color = cc.color(b.r + (c.r - b.r) * a, b.g + (c.g - b.g) * a, b.b + (c.b - b.b) * a);
          }
        }
      });
      cc.tintTo = function (a, b, c, d) {
        return new cc.TintTo(a, b, c, d);
      };
      cc.TintBy = cc.Class({
        name: "cc.TintBy",
        extends: cc.ActionInterval,
        ctor: function (a, b, c, d) {
          this._deltaR = 0;
          this._deltaG = 0;
          this._deltaB = 0;
          this._fromR = 0;
          this._fromG = 0;
          this._fromB = 0;
          if (d !== undefined) {
            this.initWithDuration(a, b, c, d);
          }
        },
        initWithDuration: function (a, b, c, d) {
          return !!cc.ActionInterval.prototype.initWithDuration.call(this, a) && (this._deltaR = b, this._deltaG = c, this._deltaB = d, true);
        },
        clone: function () {
          var a = new cc.TintBy();
          this._cloneDecoration(a);
          a.initWithDuration(this._duration, this._deltaR, this._deltaG, this._deltaB);
          return a;
        },
        startWithTarget: function (a) {
          cc.ActionInterval.prototype.startWithTarget.call(this, a);
          var b = a.color;
          this._fromR = b.r;
          this._fromG = b.g;
          this._fromB = b.b;
        },
        update: function (a) {
          a = this._computeEaseTime(a);
          this.target.color = cc.color(this._fromR + this._deltaR * a, this._fromG + this._deltaG * a, this._fromB + this._deltaB * a);
        },
        reverse: function () {
          var a = new cc.TintBy(this._duration, -this._deltaR, -this._deltaG, -this._deltaB);
          this._cloneDecoration(a);
          this._reverseEaseList(a);
          return a;
        }
      });
      cc.tintBy = function (a, b, c, d) {
        return new cc.TintBy(a, b, c, d);
      };
      cc.DelayTime = cc.Class({
        name: "cc.DelayTime",
        extends: cc.ActionInterval,
        update: function () {},
        reverse: function () {
          var a = new cc.DelayTime(this._duration);
          this._cloneDecoration(a);
          this._reverseEaseList(a);
          return a;
        },
        clone: function () {
          var a = new cc.DelayTime();
          this._cloneDecoration(a);
          a.initWithDuration(this._duration);
          return a;
        }
      });
      cc.delayTime = function (a) {
        return new cc.DelayTime(a);
      };
      cc.ReverseTime = cc.Class({
        name: "cc.ReverseTime",
        extends: cc.ActionInterval,
        ctor: function (a) {
          this._other = null;
          if (a) {
            this.initWithAction(a);
          }
        },
        initWithAction: function (a) {
          return !!a && a !== this._other && !!cc.ActionInterval.prototype.initWithDuration.call(this, a._duration) && (this._other = a, true);
        },
        clone: function () {
          var a = new cc.ReverseTime();
          this._cloneDecoration(a);
          a.initWithAction(this._other.clone());
          return a;
        },
        startWithTarget: function (a) {
          cc.ActionInterval.prototype.startWithTarget.call(this, a);
          this._other.startWithTarget(a);
        },
        update: function (a) {
          a = this._computeEaseTime(a);
          if (this._other) {
            this._other.update(1 - a);
          }
        },
        reverse: function () {
          return this._other.clone();
        },
        stop: function () {
          this._other.stop();
          cc.Action.prototype.stop.call(this);
        }
      });
      cc.reverseTime = function (a) {
        return new cc.ReverseTime(a);
      };
      cc.TargetedAction = cc.Class({
        name: "cc.TargetedAction",
        extends: cc.ActionInterval,
        ctor: function (a, b) {
          this._action = null;
          this._forcedTarget = null;
          if (b) {
            this.initWithTarget(a, b);
          }
        },
        initWithTarget: function (a, b) {
          return !!this.initWithDuration(b._duration) && (this._forcedTarget = a, this._action = b, true);
        },
        clone: function () {
          var a = new cc.TargetedAction();
          this._cloneDecoration(a);
          a.initWithTarget(this._forcedTarget, this._action.clone());
          return a;
        },
        startWithTarget: function (a) {
          cc.ActionInterval.prototype.startWithTarget.call(this, a);
          this._action.startWithTarget(this._forcedTarget);
        },
        stop: function () {
          this._action.stop();
        },
        update: function (a) {
          a = this._computeEaseTime(a);
          this._action.update(a);
        },
        getForcedTarget: function () {
          return this._forcedTarget;
        },
        setForcedTarget: function (a) {
          if (this._forcedTarget !== a) {
            this._forcedTarget = a;
          }
        }
      });
      cc.targetedAction = function (a, b) {
        return new cc.TargetedAction(a, b);
      };
    }, {}],
    6: [function (a) {
      "use strict";
  
      a("../core/platform/CCClass");
      var b = a("../core/platform/js");
      function c() {
        this.actions = [];
        this.target = null;
        this.actionIndex = 0;
        this.currentAction = null;
        this.paused = false;
        this.lock = false;
      }
      cc.ActionManager = function () {
        this._hashTargets = b.createMap(true);
        this._arrayTargets = [];
        this._currentTarget = null;
        if (cc.director._scheduler) {
          cc.director._scheduler.enableForTarget(this);
        }
      };
      cc.ActionManager.prototype = {
        constructor: cc.ActionManager,
        _elementPool: [],
        _searchElementByTarget: function (a, b) {
          for (var c = 0; c < a.length; c++) {
            if (b === a[c].target) {
              return a[c];
            }
          }
          return null;
        },
        _getElement: function (a, b) {
          var d = this._elementPool.pop();
          if (!d) {
            d = new c();
          }
          d.target = a;
          d.paused = !!b;
          return d;
        },
        _putElement: function (a) {
          a.actions.length = 0;
          a.actionIndex = 0;
          a.currentAction = null;
          a.paused = false;
          a.target = null;
          a.lock = false;
          this._elementPool.push(a);
        },
        addAction: function (a, b, c) {
          if (a && b) {
            var d = this._hashTargets[b._id];
            if (d) {
              if (!d.actions) {
                d.actions = [];
              }
            } else {
              d = this._getElement(b, c);
              this._hashTargets[b._id] = d;
              this._arrayTargets.push(d);
            }
            d.actions.push(a);
            a.startWithTarget(b);
          }
        },
        removeAllActions: function () {
          for (var a = this._arrayTargets, c = 0; c < a.length; c++) {
            var d = a[c];
            if (d) {
              this._putElement(d);
            }
          }
          this._arrayTargets.length = 0;
          this._hashTargets = b.createMap(true);
        },
        removeAllActionsFromTarget: function (a) {
          if (a != null) {
            var b = this._hashTargets[a._id];
            if (b) {
              b.actions.length = 0;
              this._deleteHashElement(b);
            }
          }
        },
        removeAction: function (a) {
          if (a) {
            var b = a.getOriginalTarget();
            var c = this._hashTargets[b._id];
            if (c) {
              for (var d = 0; d < c.actions.length; d++) {
                if (c.actions[d] === a) {
                  c.actions.splice(d, 1);
                  if (c.actionIndex >= d) {
                    c.actionIndex--;
                  }
                  break;
                }
              }
            }
          }
        },
        _removeActionByTag: function (a, b, c) {
          for (var d = 0, e = b.actions.length; d < e; ++d) {
            var f = b.actions[d];
            if (f && f.getTag() === a) {
              if (c && f.getOriginalTarget() !== c) {
                continue;
              }
              this._removeActionAtIndex(d, b);
              break;
            }
          }
        },
        _removeAllActionsByTag: function (a, b, c) {
          for (var d = b.actions.length - 1; d >= 0; --d) {
            var e = b.actions[d];
            if (e && e.getTag() === a) {
              if (c && e.getOriginalTarget() !== c) {
                continue;
              }
              this._removeActionAtIndex(d, b);
            }
          }
        },
        removeActionByTag: function (a, b) {
          cc.Action.TAG_INVALID;
          var c = this._hashTargets;
          if (b) {
            var d = c[b._id];
            if (d) {
              this._removeActionByTag(a, d, b);
            }
          } else {
            for (var e in c) {
              var f = c[e];
              this._removeActionByTag(a, f);
            }
          }
        },
        removeAllActionsByTag: function (a, b) {
          cc.Action.TAG_INVALID;
          var c = this._hashTargets;
          if (b) {
            var d = c[b._id];
            if (d) {
              this._removeAllActionsByTag(a, d, b);
            }
          } else {
            for (var e in c) {
              var f = c[e];
              this._removeAllActionsByTag(a, f);
            }
          }
        },
        getActionByTag: function (a, b) {
          cc.Action.TAG_INVALID;
          var c = this._hashTargets[b._id];
          if (c && c.actions != null) {
            for (var d = 0; d < c.actions.length; ++d) {
              var e = c.actions[d];
              if (e && e.getTag() === a) {
                return e;
              }
            }
          }
          return null;
        },
        getNumberOfRunningActionsInTarget: function (a) {
          var b = this._hashTargets[a._id];
          if (b && b.actions) {
            return b.actions.length;
          } else {
            return 0;
          }
        },
        pauseTarget: function (a) {
          var b = this._hashTargets[a._id];
          if (b) {
            b.paused = true;
          }
        },
        resumeTarget: function (a) {
          var b = this._hashTargets[a._id];
          if (b) {
            b.paused = false;
          }
        },
        pauseAllRunningActions: function () {
          for (var a = [], b = this._arrayTargets, c = 0; c < b.length; c++) {
            var d = b[c];
            if (d && !d.paused) {
              d.paused = true;
              a.push(d.target);
            }
          }
          return a;
        },
        resumeTargets: function (a) {
          if (a) {
            for (var b = 0; b < a.length; b++) {
              if (a[b]) {
                this.resumeTarget(a[b]);
              }
            }
          }
        },
        pauseTargets: function (a) {
          if (a) {
            for (var b = 0; b < a.length; b++) {
              if (a[b]) {
                this.pauseTarget(a[b]);
              }
            }
          }
        },
        purgeSharedManager: function () {
          cc.director.getScheduler().unscheduleUpdate(this);
        },
        _removeActionAtIndex: function (a, b) {
          b.actions[a];
          b.actions.splice(a, 1);
          if (b.actionIndex >= a) {
            b.actionIndex--;
          }
          if (b.actions.length === 0) {
            this._deleteHashElement(b);
          }
        },
        _deleteHashElement: function (a) {
          var b = false;
          if (a && !a.lock && this._hashTargets[a.target._id]) {
            delete this._hashTargets[a.target._id];
            for (var c = this._arrayTargets, d = 0, f = c.length; d < f; d++) {
              if (c[d] === a) {
                c.splice(d, 1);
                break;
              }
            }
            this._putElement(a);
            b = true;
          }
          return b;
        },
        update: function (a) {
          for (var b, c = this._arrayTargets, d = 0; d < c.length; d++) {
            this._currentTarget = c[d];
            if (!(b = this._currentTarget).paused && b.actions) {
              b.lock = true;
              b.actionIndex = 0;
              for (; b.actionIndex < b.actions.length; b.actionIndex++) {
                b.currentAction = b.actions[b.actionIndex];
                if (b.currentAction) {
                  b.currentAction.step(a * (b.currentAction._speedMethod ? b.currentAction._speed : 1));
                  if (b.currentAction && b.currentAction.isDone()) {
                    b.currentAction.stop();
                    var f = b.currentAction;
                    b.currentAction = null;
                    this.removeAction(f);
                  }
                  b.currentAction = null;
                }
              }
              b.lock = false;
            }
            if (b.actions.length === 0 && this._deleteHashElement(b)) {
              d--;
            }
          }
        }
      };
    }, {
      "../core/platform/CCClass": 162,
      "../core/platform/js": 183
    }],
    7: [function (a) {
      "use strict";
  
      a("./CCActionManager");
      a("./CCAction");
      a("./CCActionInterval");
      a("./CCActionInstant");
      a("./CCActionEase");
      a("./CCActionCatmullRom");
      a("./tween");
    }, {
      "./CCAction": 1,
      "./CCActionCatmullRom": 2,
      "./CCActionEase": 3,
      "./CCActionInstant": 4,
      "./CCActionInterval": 5,
      "./CCActionManager": 6,
      "./tween": 8
    }],
    8: [function (b) {
      "use strict";
  
      var g = b("../animation/bezier");
      var e = 0;
      var j = cc.Class({
        name: "cc.TweenAction",
        extends: cc.ActionInterval,
        ctor: function (b, d, e) {
          this._opts = e = e || Object.create(null);
          this._props = Object.create(null);
          e.progress = e.progress || this.progress;
          if (e.easing && typeof e.easing == "string") {
            var f = e.easing;
            e.easing = cc.easing[f];
            e.easing;
          }
          var g = this._opts.relative;
          for (var h in d) {
            var j = d[h];
            var k = undefined;
            var m = undefined;
            if (j.value !== undefined && (j.easing || j.progress)) {
              k = typeof j.easing == "string" ? cc.easing[j.easing] : j.easing;
              m = j.progress;
              j = j.value;
            }
            if (typeof j == "number" || j.lerp && (!g || j.add || j.mul) && j.clone) {
              var n = Object.create(null);
              n.value = j;
              n.easing = k;
              n.progress = m;
              this._props[h] = n;
            }
          }
          this._originProps = d;
          this.initWithDuration(b);
        },
        clone: function () {
          var a = new j(this._duration, this._originProps, this._opts);
          this._cloneDecoration(a);
          return a;
        },
        startWithTarget: function (a) {
          cc.ActionInterval.prototype.startWithTarget.call(this, a);
          var b = !!this._opts.relative;
          var c = this._props;
          for (var d in c) {
            var e = a[d];
            var f = c[d];
            if (typeof e == "number") {
              f.start = e;
              f.current = e;
              f.end = b ? e + f.value : f.value;
            } else {
              f.start = e.clone();
              f.current = e.clone();
              f.end = b ? (e.add || e.mul).call(e, f.value) : f.value;
            }
          }
        },
        update: function (b) {
          var d = this._opts;
          var e = b;
          if (d.easing) {
            e = d.easing(b);
          }
          var f = this.target;
          if (f) {
            var g = this._props;
            var j = d.progress;
            for (var k in g) {
              var m = g[k];
              var n = m.easing ? m.easing(b) : e;
              var p = m.current = (m.progress || j)(m.start, m.end, m.current, n);
              f[k] = p;
            }
            var q = d.onUpdate;
            if (q) {
              q(f, b);
            }
          }
        },
        progress: function (a, b, c, d) {
          if (typeof a == "number") {
            c = a + (b - a) * d;
          } else {
            a.lerp(b, d, c);
          }
          return c;
        }
      });
      var k = cc.Class({
        name: "cc.SetAction",
        extends: cc.ActionInstant,
        ctor: function (a) {
          this._props = {};
          if (a !== undefined) {
            this.init(a);
          }
        },
        init: function (a) {
          for (var b in a) {
            this._props[b] = a[b];
          }
          return true;
        },
        update: function () {
          var a = this._props;
          var b = this.target;
          for (var c in a) {
            b[c] = a[c];
          }
        },
        clone: function () {
          var a = new k();
          a.init(this._props);
          return a;
        }
      });
      function m(a) {
        this._actions = [];
        this._finalAction = null;
        this._target = a;
        this._tag = cc.Action.TAG_INVALID;
      }
      m.stopAll = function () {
        cc.director.getActionManager().removeAllActions();
      };
      m.stopAllByTag = function (a) {
        cc.director.getActionManager().removeAllActionsByTag(a);
      };
      m.stopAllByTarget = function (a) {
        cc.director.getActionManager().removeAllActionsFromTarget(a);
      };
      m.prototype.then = function (a) {
        if (a instanceof cc.Action) {
          this._actions.push(a.clone());
        } else {
          this._actions.push(a._union());
        }
        return this;
      };
      m.prototype.target = function (a) {
        this._target = a;
        return this;
      };
      m.prototype.start = function () {
        var a = this._target;
        if (a) {
          if (a instanceof cc.Object && !a.isValid) {
            return undefined;
          } else {
            if (this._finalAction) {
              cc.director.getActionManager().removeAction(this._finalAction);
            }
            this._finalAction = this._union();
            if (a._id === undefined) {
              a._id = ++e;
            }
            this._finalAction.setTag(this._tag);
            cc.director.getActionManager().addAction(this._finalAction, a, false);
            return this;
          }
        } else {
          return this;
        }
      };
      m.prototype.stop = function () {
        if (this._finalAction) {
          cc.director.getActionManager().removeAction(this._finalAction);
          this._finalAction = null;
        }
        return this;
      };
      m.prototype.tag = function (a) {
        this._tag = a;
        return this;
      };
      m.prototype.clone = function (a) {
        var b = this._union();
        return cc.tween(a).then(b.clone());
      };
      m.prototype.union = function () {
        var a = this._union();
        this._actions.length = 0;
        this._actions.push(a);
        return this;
      };
      m.prototype._union = function () {
        var a = this._actions;
        if (a.length === 1) {
          return a[0];
        } else {
          return cc.sequence(a);
        }
      };
      Object.assign(m.prototype, {
        bezierTo: function (b, d, e, f, h) {
          var j = d.x;
          var a = d.y;
          var k = e.x;
          var c = e.y;
          (h = h || Object.create(null)).progress = function (b, d, e, f) {
            e.x = (0, g.bezier)(b.x, j, k, d.x, f);
            e.y = (0, g.bezier)(b.y, a, c, d.y, f);
            return e;
          };
          return this.to(b, {
            position: f
          }, h);
        },
        bezierBy: function (b, d, e, f, h) {
          var j = d.x;
          var a = d.y;
          var k = e.x;
          var c = e.y;
          (h = h || Object.create(null)).progress = function (b, d, e, f) {
            var i = b.x;
            var l = b.y;
            e.x = (0, g.bezier)(i, j + i, k + i, d.x, f);
            e.y = (0, g.bezier)(l, a + l, c + l, d.y, f);
            return e;
          };
          return this.by(b, {
            position: f
          }, h);
        },
        flipX: function () {
          var a = this;
          return this.call(function () {
            a._target.scaleX *= -1;
          }, this);
        },
        flipY: function () {
          var a = this;
          return this.call(function () {
            a._target.scaleY *= -1;
          }, this);
        },
        blink: function (a, b, c) {
          var d = 1 / b;
          (c = c || Object.create(null)).progress = function (a, b, c, e) {
            if (e >= 1) {
              return a;
            } else if (e % d > d / 2) {
              return 255;
            } else {
              return 0;
            }
          };
          return this.to(a, {
            opacity: 1
          }, c);
        }
      });
      var p = [];
      function a(a) {
        return function () {
          p.length = 0;
          for (var b = arguments.length, c = 0; c < b; c++) {
            var d = p[c] = arguments[c];
            if (d instanceof m) {
              p[c] = d._union();
            }
          }
          return a.apply(this, p);
        };
      }
      for (var n = {
          to: function (a, b, c) {
            (c = c || Object.create(null)).relative = false;
            return new j(a, b, c);
          },
          by: function (a, b, c) {
            (c = c || Object.create(null)).relative = true;
            return new j(a, b, c);
          },
          set: function (a) {
            return new k(a);
          },
          delay: cc.delayTime,
          call: cc.callFunc,
          hide: cc.hide,
          show: cc.show,
          removeSelf: cc.removeSelf,
          sequence: a(cc.sequence),
          parallel: a(cc.spawn)
        }, c = {
          repeat: cc.repeat,
          repeatForever: cc.repeatForever,
          reverseTime: cc.reverseTime
        }, l = Object.keys(n), o = function (a) {
          var b = l[a];
          m.prototype[b] = function () {
            var a = n[b].apply(this, arguments);
            this._actions.push(a);
            return this;
          };
        }, q = 0; q < l.length; q++) {
        o(q);
      }
      l = Object.keys(c);
      for (var r = function (a) {
          var b = l[a];
          m.prototype[b] = function () {
            var a = this._actions;
            var d = arguments[arguments.length - 1];
            var e = arguments.length - 1;
            if (d instanceof cc.Tween) {
              d = d._union();
            } else if (!(d instanceof cc.Action)) {
              d = a[a.length - 1];
              a.length -= 1;
              e += 1;
            }
            for (var f = [d], g = 0; g < e; g++) {
              f.push(arguments[g]);
            }
            d = c[b].apply(this, f);
            a.push(d);
            return this;
          };
        }, d = 0; d < l.length; d++) {
        r(d);
      }
      cc.tween = function (a) {
        return new m(a);
      };
      cc.Tween = m;
    }, {
      "../animation/bezier": 14
    }],
    9: [function (b, d) {
      "use strict";
  
      var f = cc.js;
      var g = b("./playable");
      var e = b("./animation-curves");
      var i = e.EventAnimCurve;
      var j = e.EventInfo;
      var a = b("./types").WrapModeMask;
      var k = b("../core/utils/binary-search").binarySearchEpsilon;
      function c(a, b) {
        g.call(this);
        this.target = a;
        this.animation = b;
        this._anims = new f.array.MutableForwardIterator([]);
      }
      f.extend(c, g);
      var l = c.prototype;
      function h(b, c) {
        var e = c.clip;
        c.duration = e.duration;
        c.speed = e.speed;
        c.wrapMode = e.wrapMode;
        c.frameRate = e.sample;
        if ((c.wrapMode & a.Loop) === a.Loop) {
          c.repeatCount = Infinity;
        } else {
          c.repeatCount = 1;
        }
        var g = c.curves = e.createCurves(c, b);
        var m = e.events;
        if (m) {
          for (var n, o = 0, q = m.length; o < q; o++) {
            if (!n) {
              (n = new i()).target = b;
              g.push(n);
            }
            var r = m[o];
            var s = r.frame / c.duration;
            var t = undefined;
            var u = k(n.ratios, s);
            if (u >= 0) {
              t = n.events[u];
            } else {
              t = new j();
              n.ratios.push(s);
              n.events.push(t);
            }
            t.add(r.func, r.params);
          }
        }
      }
      l.playState = function (a, b) {
        if (a.clip) {
          if (!a.curveLoaded) {
            h(this.target, a);
          }
          a.animator = this;
          a.play();
          if (typeof b == "number") {
            a.setTime(b);
          }
          this.play();
        }
      };
      l.stopStatesExcept = function (a) {
        var b = this._anims;
        var c = b.array;
        for (b.i = 0; b.i < c.length; ++b.i) {
          var d = c[b.i];
          if (d !== a) {
            this.stopState(d);
          }
        }
      };
      l.addAnimation = function (a) {
        if (this._anims.array.indexOf(a) === -1) {
          this._anims.push(a);
        }
        a._setEventTarget(this.animation);
      };
      l.removeAnimation = function (a) {
        var b = this._anims.array.indexOf(a);
        if (b >= 0) {
          this._anims.fastRemoveAt(b);
          if (this._anims.array.length === 0) {
            this.stop();
          }
        }
        a.animator = null;
      };
      l.sample = function () {
        var a = this._anims;
        var b = a.array;
        for (a.i = 0; a.i < b.length; ++a.i) {
          b[a.i].sample();
        }
      };
      l.stopState = function (a) {
        if (a) {
          a.stop();
        }
      };
      l.pauseState = function (a) {
        if (a) {
          a.pause();
        }
      };
      l.resumeState = function (a) {
        if (a) {
          a.resume();
        }
        if (this.isPaused) {
          this.resume();
        }
      };
      l.setStateTime = function (a, b) {
        if (b !== undefined) {
          if (a) {
            a.setTime(b);
            a.sample();
          }
        } else {
          b = a;
          for (var c = this._anims.array, d = 0; d < c.length; ++d) {
            var f = c[d];
            f.setTime(b);
            f.sample();
          }
        }
      };
      l.onStop = function () {
        var a = this._anims;
        var b = a.array;
        for (a.i = 0; a.i < b.length; ++a.i) {
          b[a.i].stop();
        }
      };
      l.onPause = function () {
        for (var a = this._anims.array, b = 0; b < a.length; ++b) {
          var c = a[b];
          c.pause();
          c.animator = null;
        }
      };
      l.onResume = function () {
        for (var a = this._anims.array, b = 0; b < a.length; ++b) {
          var c = a[b];
          c.animator = this;
          c.resume();
        }
      };
      l._reloadClip = function (a) {
        h(this.target, a);
      };
      d.exports = c;
    }, {
      "../core/utils/binary-search": 229,
      "./animation-curves": 11,
      "./playable": 18,
      "./types": 19
    }],
    10: [function (b, d) {
      "use strict";
  
      var e = b("./types").WrapMode;
      var f = b("./animation-curves");
      var j = f.DynamicAnimCurve;
      var k = f.quickFindIndex;
      var g = b("./motion-path-helper").sampleMotionPaths;
      var a = b("../core/utils/binary-search").binarySearchEpsilon;
      var h = cc.Class({
        name: "cc.AnimationClip",
        extends: cc.Asset,
        properties: {
          _duration: {
            default: 0,
            type: cc.Float
          },
          duration: {
            get: function () {
              return this._duration;
            }
          },
          sample: {
            default: 60
          },
          speed: {
            default: 1
          },
          wrapMode: {
            default: e.Normal
          },
          curveData: {
            default: {},
            visible: false
          },
          events: {
            default: [],
            visible: false
          }
        },
        statics: {
          createWithSpriteFrames: function (b, c) {
            if (!Array.isArray(b)) {
              return null;
            }
            var d = new h();
            d.sample = c || d.sample;
            d._duration = b.length / d.sample;
            for (var e = [], f = 1 / d.sample, g = 0, i = b.length; g < i; g++) {
              e[g] = {
                frame: g * f,
                value: b[g]
              };
            }
            d.curveData = {
              comps: {
                "cc.Sprite": {
                  spriteFrame: e
                }
              }
            };
            return d;
          }
        },
        onLoad: function () {
          this._duration = Number.parseFloat(this.duration);
          this.speed = Number.parseFloat(this.speed);
          this.wrapMode = Number.parseInt(this.wrapMode);
          this.frameRate = Number.parseFloat(this.sample);
        },
        createPropCurve: function (b, o, e) {
          var i = [];
          var n = b instanceof cc.Node && o === "position";
          var c = new j();
          c.target = b;
          c.prop = o;
          for (var l = 0, q = e.length; l < q; l++) {
            var r = e[l];
            var s = r.frame / this.duration;
            c.ratios.push(s);
            if (n) {
              i.push(r.motionPath);
            }
            var t = r.value;
            c.values.push(t);
            var u = r.curve;
            if (u) {
              if (typeof u == "string") {
                c.types.push(u);
                continue;
              }
              if (Array.isArray(u)) {
                if (u[0] === u[1] && u[2] === u[3]) {
                  c.types.push(j.Linear);
                } else {
                  c.types.push(j.Bezier(u));
                }
                continue;
              }
            }
            c.types.push(j.Linear);
          }
          if (n) {
            g(i, c, this.duration, this.sample, b);
          }
          for (var w, x, z = c.ratios, m = true, B = 1, C = z.length; B < C; B++) {
            w = z[B] - z[B - 1];
            if (B === 1) {
              x = w;
            } else if (Math.abs(w - x) > 0.000001) {
              m = false;
              break;
            }
          }
          c._findFrameIndex = m ? k : a;
          var D = c.values[0];
          if (!(D == null || c._lerp)) {
            if (typeof D == "number") {
              c._lerp = j.prototype._lerpNumber;
            } else if (D instanceof cc.Quat) {
              c._lerp = j.prototype._lerpQuat;
            } else if (D instanceof cc.Vec2) {
              c._lerp = j.prototype._lerpVector2;
            } else if (D instanceof cc.Vec3) {
              c._lerp = j.prototype._lerpVector3;
            } else if (D.lerp) {
              c._lerp = j.prototype._lerpObject;
            }
          }
          return c;
        },
        createTargetCurves: function (b, g, e) {
          var i = g.props;
          var j = g.comps;
          if (i) {
            for (var k in i) {
              var m = i[k];
              var n = this.createPropCurve(b, k, m);
              e.push(n);
            }
          }
          if (j) {
            for (var p in j) {
              var q = b.getComponent(p);
              if (q) {
                var r = j[p];
                for (var t in r) {
                  var v = r[t];
                  var w = this.createPropCurve(q, t, v);
                  e.push(w);
                }
              }
            }
          }
        },
        createCurves: function (b, c) {
          var d = this.curveData;
          var e = d.paths;
          var f = [];
          this.createTargetCurves(c, d, f);
          for (var g in e) {
            var h = cc.find(g, c);
            if (h) {
              var i = e[g];
              this.createTargetCurves(h, i, f);
            }
          }
          return f;
        }
      });
      cc.AnimationClip = d.exports = h;
    }, {
      "../core/utils/binary-search": 229,
      "./animation-curves": 11,
      "./motion-path-helper": 17,
      "./types": 19
    }],
    11: [function (b, d) {
      "use strict";
  
      var f = b("./bezier").bezierByTime;
      var g = b("../core/utils/binary-search").binarySearchEpsilon;
      var e = b("./types").WrapModeMask;
      var i = b("./types").WrappedInfo;
      function j(a, b) {
        if (typeof b == "string") {
          var c = cc.easing[b];
          if (c) {
            a = c(a);
          }
        } else if (Array.isArray(b)) {
          a = f(b, a);
        }
        return a;
      }
      var a = cc.Class({
        name: "cc.AnimCurve",
        sample: function () {},
        onTimeChangedManually: undefined
      });
      var k;
      var m = cc.Class({
        name: "cc.DynamicAnimCurve",
        extends: a,
        ctor: function () {
          this._cachedIndex = 0;
        },
        properties: {
          target: null,
          prop: "",
          values: [],
          ratios: [],
          types: []
        },
        _findFrameIndex: g,
        _lerp: undefined,
        _lerpNumber: function (a, b, c) {
          return a + (b - a) * c;
        },
        _lerpObject: function (a, b, c) {
          return a.lerp(b, c);
        },
        _lerpQuat: (k = cc.quat(), function (a, b, c) {
          return a.lerp(b, c, k);
        }),
        _lerpVector2: function () {
          var a = cc.v2();
          return function (b, c, d) {
            return b.lerp(c, d, a);
          };
        }(),
        _lerpVector3: function () {
          var a = cc.v3();
          return function (b, c, d) {
            return b.lerp(c, d, a);
          };
        }(),
        sample: function (a, b) {
          var e = this.values;
          var i = this.ratios;
          var k = i.length;
          if (k !== 0) {
            var m;
            var n = true;
            var q = this._cachedIndex;
            if (q < 0 && (q = ~q) > 0 && q < i.length) {
              var r = i[q - 1];
              var l = i[q];
              if (b > r && b < l) {
                n = false;
              }
            }
            if (n) {
              this._cachedIndex = this._findFrameIndex(i, b);
            }
            var h = this._cachedIndex;
            if (h < 0) {
              if ((h = ~h) <= 0) {
                m = e[0];
              } else if (h >= k) {
                m = e[k - 1];
              } else {
                var t = e[h - 1];
                if (this._lerp) {
                  var f = i[h - 1];
                  var d = i[h];
                  var w = this.types[h - 1];
                  var p = (b - f) / (d - f);
                  if (w) {
                    p = j(p, w);
                  }
                  var x = e[h];
                  m = this._lerp(t, x, p);
                } else {
                  m = t;
                }
              }
            } else {
              m = e[h];
            }
            this.target[this.prop] = m;
          }
        }
      });
      m.Linear = null;
      m.Bezier = function (a) {
        return a;
      };
      function l() {
        this.events = [];
      }
      l.prototype.add = function (a, b) {
        this.events.push({
          func: a || "",
          params: b || []
        });
      };
      var h = cc.Class({
        name: "cc.EventAnimCurve",
        extends: a,
        properties: {
          target: null,
          ratios: [],
          events: [],
          _wrappedInfo: {
            default: function () {
              return new i();
            }
          },
          _lastWrappedInfo: null,
          _ignoreIndex: NaN
        },
        _wrapIterations: function (a) {
          if (a - (a | 0) == 0) {
            a -= 1;
          }
          return a | 0;
        },
        sample: function (b, j, k) {
          var m = this.ratios.length;
          var a = k.getWrappedInfo(k.time, this._wrappedInfo);
          var n = a.direction;
          var o = g(this.ratios, a.ratio);
          if (o < 0) {
            o = ~o - 1;
            if (n < 0) {
              o += 1;
            }
          }
          if (this._ignoreIndex !== o) {
            this._ignoreIndex = NaN;
          }
          a.frameIndex = o;
          if (!this._lastWrappedInfo) {
            this._fireEvent(o);
            this._lastWrappedInfo = new i(a);
            return;
          }
          var q = k.wrapMode;
          var h = this._wrapIterations(a.iterations);
          var r = this._lastWrappedInfo;
          var f = this._wrapIterations(r.iterations);
          var s = r.frameIndex;
          var t = r.direction;
          var p = f !== -1 && h !== f;
          if (s === o && p && m === 1) {
            this._fireEvent(0);
          } else if (s !== o || p) {
            n = t;
            do {
              if (s !== o) {
                if (n === -1 && s === 0 && o > 0) {
                  if ((q & e.PingPong) === e.PingPong) {
                    n *= -1;
                  } else {
                    s = m;
                  }
                  f++;
                } else if (n === 1 && s === m - 1 && o < m - 1) {
                  if ((q & e.PingPong) === e.PingPong) {
                    n *= -1;
                  } else {
                    s = -1;
                  }
                  f++;
                }
                if (s === o) {
                  break;
                }
                if (f > h) {
                  break;
                }
              }
              s += n;
              cc.director.getAnimationManager().pushDelayEvent(this, "_fireEvent", [s]);
            } while (s !== o && s > -1 && s < m);
          }
          this._lastWrappedInfo.set(a);
        },
        _fireEvent: function (b) {
          if (!(b < 0 || b >= this.events.length || this._ignoreIndex === b)) {
            var d = this.events[b].events;
            if (this.target.isValid) {
              for (var e = this.target._components, f = 0; f < d.length; f++) {
                for (var g = d[f], h = g.func, i = 0; i < e.length; i++) {
                  var j = e[i];
                  var k = j[h];
                  if (k) {
                    k.apply(j, g.params);
                  }
                }
              }
            }
          }
        },
        onTimeChangedManually: function (a, b) {
          this._lastWrappedInfo = null;
          this._ignoreIndex = NaN;
          var c = b.getWrappedInfo(a, this._wrappedInfo);
          var d = c.direction;
          var e = g(this.ratios, c.ratio);
          if (e < 0) {
            e = ~e - 1;
            if (d < 0) {
              e += 1;
            }
            this._ignoreIndex = e;
          }
        }
      });
      d.exports = {
        AnimCurve: a,
        DynamicAnimCurve: m,
        EventAnimCurve: h,
        EventInfo: l,
        computeRatioByType: j,
        quickFindIndex: function (b, c) {
          var d = b.length - 1;
          if (d === 0) {
            return 0;
          }
          var f = b[0];
          if (c < f) {
            return 0;
          }
          var g = b[d];
          if (c > g) {
            return ~b.length;
          }
          var h = (c = (c - f) / (g - f)) / (1 / d);
          var i = h | 0;
          if (h - i < 0.000001) {
            return i;
          } else if (i + 1 - h < 0.000001) {
            return i + 1;
          } else {
            return ~(i + 1);
          }
        }
      };
    }, {
      "../core/utils/binary-search": 229,
      "./bezier": 14,
      "./types": 19
    }],
    12: [function (a, b) {
      "use strict";
  
      var c = cc.js;
      var d = cc.Class({
        ctor: function () {
          this._anims = new c.array.MutableForwardIterator([]);
          this._delayEvents = [];
          if (cc.director._scheduler) {
            cc.director._scheduler.enableForTarget(this);
          }
        },
        update: function (b) {
          var c = this._anims;
          var d = c.array;
          for (c.i = 0; c.i < d.length; ++c.i) {
            var e = d[c.i];
            if (e._isPlaying && !e._isPaused) {
              e.update(b);
            }
          }
          for (var f = this._delayEvents, g = 0; g < f.length; g++) {
            var h = f[g];
            h.target[h.func].apply(h.target, h.args);
          }
          f.length = 0;
        },
        destruct: function () {},
        addAnimation: function (a) {
          if (this._anims.array.indexOf(a) === -1) {
            this._anims.push(a);
          }
        },
        removeAnimation: function (a) {
          var b = this._anims.array.indexOf(a);
          if (b >= 0) {
            this._anims.fastRemoveAt(b);
          }
        },
        pushDelayEvent: function (a, b, c) {
          this._delayEvents.push({
            target: a,
            func: b,
            args: c
          });
        }
      });
      cc.AnimationManager = b.exports = d;
    }, {}],
    13: [function (b, d) {
      "use strict";
  
      var e = cc.js;
      var f = b("./playable");
      var g = b("./types");
      var j = g.WrappedInfo;
      var i = g.WrapMode;
      var k = g.WrapModeMask;
      function a(a, b) {
        f.call(this);
        this._currentFramePlayed = false;
        this._delay = 0;
        this._delayTime = 0;
        this._wrappedInfo = new j();
        this._lastWrappedInfo = null;
        this._process = l;
        this._clip = a;
        this._name = b || a && a.name;
        this.animator = null;
        this.curves = [];
        this.delay = 0;
        this.repeatCount = 1;
        this.duration = 1;
        this.speed = 1;
        this.wrapMode = i.Normal;
        this.time = 0;
        this._target = null;
        this._lastframeEventOn = false;
        this.emit = function () {
          for (var a = Array(arguments.length), b = 0, c = a.length; b < c; b++) {
            a[b] = arguments[b];
          }
          cc.director.getAnimationManager().pushDelayEvent(this, "_emit", a);
        };
      }
      e.extend(a, f);
      var c = a.prototype;
      function l() {
        var a;
        var b = this.sample();
        if (this._lastframeEventOn) {
          a = this._lastWrappedInfo ? this._lastWrappedInfo : this._lastWrappedInfo = new j(b);
          if (this.repeatCount > 1 && (b.iterations | 0) > (a.iterations | 0)) {
            this.emit("lastframe", this);
          }
          a.set(b);
        }
        if (b.stopped) {
          this.stop();
          this.emit("finished", this);
        }
      }
      function h() {
        var a = this.time;
        var b = this.duration;
        if (a > b) {
          if ((a %= b) == 0) {
            a = b;
          }
        } else if (a < 0 && (a %= b) != 0) {
          a += b;
        }
        for (var c = a / b, d = this.curves, e = 0, f = d.length; e < f; e++) {
          d[e].sample(a, c, this);
        }
        if (this._lastframeEventOn) {
          if (this._lastIterations === undefined) {
            this._lastIterations = c;
          }
          if (this.time > 0 && this._lastIterations > c || this.time < 0 && this._lastIterations < c) {
            this.emit("lastframe", this);
          }
          this._lastIterations = c;
        }
      }
      c._emit = function (a, b) {
        if (this._target && this._target.isValid) {
          this._target.emit(a, a, b);
        }
      };
      c.on = function (a, b, c) {
        if (this._target && this._target.isValid) {
          if (a === "lastframe") {
            this._lastframeEventOn = true;
          }
          return this._target.on(a, b, c);
        } else {
          return null;
        }
      };
      c.once = function (a, b, c) {
        if (this._target && this._target.isValid) {
          if (a === "lastframe") {
            this._lastframeEventOn = true;
          }
          var d = this;
          return this._target.once(a, function (a) {
            b.call(c, a);
            d._lastframeEventOn = false;
          });
        }
        return null;
      };
      c.off = function (a, b, c) {
        if (this._target && this._target.isValid) {
          if (a === "lastframe") {
            if (!this._target.hasEventListener(a)) {
              this._lastframeEventOn = false;
            }
          }
          this._target.off(a, b, c);
        }
      };
      c._setEventTarget = function (a) {
        this._target = a;
      };
      c.onPlay = function () {
        this.setTime(0);
        this._delayTime = this._delay;
        cc.director.getAnimationManager().addAnimation(this);
        if (this.animator) {
          this.animator.addAnimation(this);
        }
        this.emit("play", this);
      };
      c.onStop = function () {
        if (!this.isPaused) {
          cc.director.getAnimationManager().removeAnimation(this);
        }
        if (this.animator) {
          this.animator.removeAnimation(this);
        }
        this.emit("stop", this);
      };
      c.onResume = function () {
        cc.director.getAnimationManager().addAnimation(this);
        this.emit("resume", this);
      };
      c.onPause = function () {
        cc.director.getAnimationManager().removeAnimation(this);
        this.emit("pause", this);
      };
      c.setTime = function (a) {
        this._currentFramePlayed = false;
        this.time = a || 0;
        for (var b = this.curves, c = 0, d = b.length; c < d; c++) {
          var e = b[c];
          if (e.onTimeChangedManually) {
            e.onTimeChangedManually(a, this);
          }
        }
      };
      c.update = function (a) {
        if (!(this._delayTime > 0 && (this._delayTime -= a, this._delayTime > 0))) {
          if (this._currentFramePlayed) {
            this.time += a * this.speed;
          } else {
            this._currentFramePlayed = true;
          }
          this._process();
        }
      };
      c._needRevers = function (a) {
        var b = this.wrapMode;
        var c = false;
        if ((b & k.PingPong) === k.PingPong) {
          if (a - (a | 0) == 0 && a > 0) {
            a -= 1;
          }
          if (a & 1) {
            c = !c;
          }
        }
        if ((b & k.Reverse) === k.Reverse) {
          c = !c;
        }
        return c;
      };
      c.getWrappedInfo = function (b, d) {
        d = d || new j();
        var g = false;
        var m = this.duration;
        var n = this.repeatCount;
        var o = b > 0 ? b / m : -b / m;
        if (o >= n) {
          o = n;
          g = true;
          var p = n - (n | 0);
          if (p === 0) {
            p = 1;
          }
          b = p * m * (b > 0 ? 1 : -1);
        }
        if (b > m) {
          var q = b % m;
          b = q === 0 ? m : q;
        } else if (b < 0 && (b %= m) != 0) {
          b += m;
        }
        var l = false;
        var r = this._wrapMode & k.ShouldWrap;
        if (r) {
          l = this._needRevers(o);
        }
        var s = l ? -1 : 1;
        if (this.speed < 0) {
          s *= -1;
        }
        if (r && l) {
          b = m - b;
        }
        d.ratio = b / m;
        d.time = b;
        d.direction = s;
        d.stopped = g;
        d.iterations = o;
        return d;
      };
      c.sample = function () {
        for (var a = this.getWrappedInfo(this.time, this._wrappedInfo), b = this.curves, c = 0, d = b.length; c < d; c++) {
          b[c].sample(a.time, a.ratio, this);
        }
        return a;
      };
      e.get(c, "clip", function () {
        return this._clip;
      });
      e.get(c, "name", function () {
        return this._name;
      });
      e.obsolete(c, "AnimationState.length", "duration");
      e.getset(c, "curveLoaded", function () {
        return this.curves.length > 0;
      }, function () {
        this.curves.length = 0;
      });
      e.getset(c, "wrapMode", function () {
        return this._wrapMode;
      }, function (a) {
        this._wrapMode = a;
        this.time = 0;
        if (a & k.Loop) {
          this.repeatCount = Infinity;
        } else {
          this.repeatCount = 1;
        }
      });
      e.getset(c, "repeatCount", function () {
        return this._repeatCount;
      }, function (a) {
        this._repeatCount = a;
        var b = this._wrapMode & k.ShouldWrap;
        var c = (this.wrapMode & k.Reverse) === k.Reverse;
        this._process = a !== Infinity || b || c ? l : h;
      });
      e.getset(c, "delay", function () {
        return this._delay;
      }, function (a) {
        this._delayTime = this._delay = a;
      });
      cc.AnimationState = d.exports = a;
    }, {
      "./playable": 18,
      "./types": 19
    }],
    14: [function (b, d) {
      "use strict";
  
      var e = Math.cos;
      var f = Math.acos;
      var g = Math.max;
      var i = 6.283185307179586;
      var j = Math.sqrt;
      function a(a) {
        if (a < 0) {
          return -Math.pow(-a, 1 / 3);
        } else {
          return Math.pow(a, 1 / 3);
        }
      }
      function h(k, n) {
        var o;
        var q;
        var r;
        var s;
        var t = n - 0;
        var z = n - k[0];
        var d = t * 3;
        var B = z * 3;
        var p = (n - k[2]) * 3;
        var v = 1 / (-t + B - p + (n - 1));
        var D = (d - z * 6 + p) * v;
        var m = D * (1 / 3);
        var y = (-d + B) * v;
        var F = 1 / 3 * (y * 3 - D * D);
        var E = F * (1 / 3);
        var A = (D * 2 * D * D - D * 9 * y + t * v * 27) / 27;
        var x = A / 2;
        var C = x * x + E * E * E;
        if (C < 0) {
          var b = 1 / 3 * -F;
          var G = j(b * b * b);
          var H = -A / (G * 2);
          var J = f(H < -1 ? -1 : H > 1 ? 1 : H);
          var w = a(G) * 2;
          q = w * e(J * (1 / 3)) - m;
          r = w * e((J + i) * (1 / 3)) - m;
          s = w * e((J + i * 2) * (1 / 3)) - m;
          if (q >= 0 && q <= 1) {
            if (r >= 0 && r <= 1) {
              if (s >= 0 && s <= 1) {
                return g(q, r, s);
              } else {
                return g(q, r);
              }
            } else if (s >= 0 && s <= 1) {
              return g(q, s);
            } else {
              return q;
            }
          } else if (r >= 0 && r <= 1) {
            if (s >= 0 && s <= 1) {
              return g(r, s);
            } else {
              return r;
            }
          } else {
            return s;
          }
        }
        if (C === 0) {
          r = -(o = x < 0 ? a(-x) : -a(x)) - m;
          if ((q = o * 2 - m) >= 0 && q <= 1) {
            if (r >= 0 && r <= 1) {
              return g(q, r);
            } else {
              return q;
            }
          } else {
            return r;
          }
        }
        var I = j(C);
        return (o = a(-x + I)) - a(x + I) - m;
      }
      d.exports = {
        bezier: function (a, b, c, d, e) {
          var f = 1 - e;
          return f * (f * (a + (b * 3 - a) * e) + c * 3 * e * e) + d * e * e * e;
        },
        bezierByTime: function (a, b) {
          var c = h(a, b);
          var d = a[1];
          return ((1 - c) * (d + (a[3] - d) * c) * 3 + c * c) * c;
        }
      };
    }, {}],
    15: [function (a, b) {
      "use strict";
  
      var c = {
        constant: function () {
          return 0;
        },
        linear: function (a) {
          return a;
        },
        quadIn: function (a) {
          return a * a;
        },
        quadOut: function (a) {
          return a * (2 - a);
        },
        quadInOut: function (a) {
          if ((a *= 2) < 1) {
            return a * 0.5 * a;
          } else {
            return (--a * (a - 2) - 1) * -0.5;
          }
        },
        cubicIn: function (a) {
          return a * a * a;
        },
        cubicOut: function (a) {
          return --a * a * a + 1;
        },
        cubicInOut: function (a) {
          if ((a *= 2) < 1) {
            return a * 0.5 * a * a;
          } else {
            return ((a -= 2) * a * a + 2) * 0.5;
          }
        },
        quartIn: function (a) {
          return a * a * a * a;
        },
        quartOut: function (a) {
          return 1 - --a * a * a * a;
        },
        quartInOut: function (a) {
          if ((a *= 2) < 1) {
            return a * 0.5 * a * a * a;
          } else {
            return ((a -= 2) * a * a * a - 2) * -0.5;
          }
        },
        quintIn: function (a) {
          return a * a * a * a * a;
        },
        quintOut: function (a) {
          return --a * a * a * a * a + 1;
        },
        quintInOut: function (a) {
          if ((a *= 2) < 1) {
            return a * 0.5 * a * a * a * a;
          } else {
            return ((a -= 2) * a * a * a * a + 2) * 0.5;
          }
        },
        sineIn: function (a) {
          return 1 - Math.cos(a * Math.PI / 2);
        },
        sineOut: function (a) {
          return Math.sin(a * Math.PI / 2);
        },
        sineInOut: function (a) {
          return (1 - Math.cos(Math.PI * a)) * 0.5;
        },
        expoIn: function (a) {
          if (a === 0) {
            return 0;
          } else {
            return Math.pow(1024, a - 1);
          }
        },
        expoOut: function (a) {
          if (a === 1) {
            return 1;
          } else {
            return 1 - Math.pow(2, a * -10);
          }
        },
        expoInOut: function (a) {
          if (a === 0) {
            return 0;
          } else if (a === 1) {
            return 1;
          } else if ((a *= 2) < 1) {
            return Math.pow(1024, a - 1) * 0.5;
          } else {
            return (2 - Math.pow(2, (a - 1) * -10)) * 0.5;
          }
        },
        circIn: function (a) {
          return 1 - Math.sqrt(1 - a * a);
        },
        circOut: function (a) {
          return Math.sqrt(1 - --a * a);
        },
        circInOut: function (a) {
          if ((a *= 2) < 1) {
            return (Math.sqrt(1 - a * a) - 1) * -0.5;
          } else {
            return (Math.sqrt(1 - (a -= 2) * a) + 1) * 0.5;
          }
        },
        elasticIn: function (a) {
          var b;
          var c = 0.1;
          if (a === 0) {
            return 0;
          } else if (a === 1) {
            return 1;
          } else {
            if (!c || c < 1) {
              c = 1;
              b = 0.1;
            } else {
              b = Math.asin(1 / c) * 0.4 / (Math.PI * 2);
            }
            return -c * Math.pow(2, (a -= 1) * 10) * Math.sin(Math.PI * 2 * (a - b) / 0.4);
          }
        },
        elasticOut: function (a) {
          var b;
          var c = 0.1;
          if (a === 0) {
            return 0;
          } else if (a === 1) {
            return 1;
          } else {
            if (!c || c < 1) {
              c = 1;
              b = 0.1;
            } else {
              b = Math.asin(1 / c) * 0.4 / (Math.PI * 2);
            }
            return c * Math.pow(2, a * -10) * Math.sin(Math.PI * 2 * (a - b) / 0.4) + 1;
          }
        },
        elasticInOut: function (a) {
          var b;
          var c = 0.1;
          if (a === 0) {
            return 0;
          } else if (a === 1) {
            return 1;
          } else {
            if (!c || c < 1) {
              c = 1;
              b = 0.1;
            } else {
              b = Math.asin(1 / c) * 0.4 / (Math.PI * 2);
            }
            if ((a *= 2) < 1) {
              return c * Math.pow(2, (a -= 1) * 10) * Math.sin(Math.PI * 2 * (a - b) / 0.4) * -0.5;
            } else {
              return c * Math.pow(2, (a -= 1) * -10) * Math.sin(Math.PI * 2 * (a - b) / 0.4) * 0.5 + 1;
            }
          }
        },
        backIn: function (a) {
          var b = 1.70158;
          return a * a * ((b + 1) * a - b);
        },
        backOut: function (a) {
          var b = 1.70158;
          return --a * a * ((b + 1) * a + b) + 1;
        },
        backInOut: function (a) {
          var b = 2.5949095;
          if ((a *= 2) < 1) {
            return a * a * ((b + 1) * a - b) * 0.5;
          } else {
            return ((a -= 2) * a * ((b + 1) * a + b) + 2) * 0.5;
          }
        },
        bounceIn: function (a) {
          return 1 - c.bounceOut(1 - a);
        },
        bounceOut: function (a) {
          if (a < 1 / 2.75) {
            return a * 7.5625 * a;
          } else if (a < 2 / 2.75) {
            return (a -= 1.5 / 2.75) * 7.5625 * a + 0.75;
          } else if (a < 2.5 / 2.75) {
            return (a -= 2.25 / 2.75) * 7.5625 * a + 0.9375;
          } else {
            return (a -= 2.625 / 2.75) * 7.5625 * a + 0.984375;
          }
        },
        bounceInOut: function (a) {
          if (a < 0.5) {
            return c.bounceIn(a * 2) * 0.5;
          } else {
            return c.bounceOut(a * 2 - 1) * 0.5 + 0.5;
          }
        },
        smooth: function (a) {
          if (a <= 0) {
            return 0;
          } else if (a >= 1) {
            return 1;
          } else {
            return a * a * (3 - a * 2);
          }
        },
        fade: function (a) {
          if (a <= 0) {
            return 0;
          } else if (a >= 1) {
            return 1;
          } else {
            return a * a * a * (a * (a * 6 - 15) + 10);
          }
        }
      };
      function d(a, b) {
        return function (c) {
          if (c < 0.5) {
            return b(c * 2) / 2;
          } else {
            return a(c * 2 - 1) / 2 + 0.5;
          }
        };
      }
      c.quadOutIn = d(c.quadIn, c.quadOut);
      c.cubicOutIn = d(c.cubicIn, c.cubicOut);
      c.quartOutIn = d(c.quartIn, c.quartOut);
      c.quintOutIn = d(c.quintIn, c.quintOut);
      c.sineOutIn = d(c.sineIn, c.sineOut);
      c.expoOutIn = d(c.expoIn, c.expoOut);
      c.circOutIn = d(c.circIn, c.circOut);
      c.backOutIn = d(c.backIn, c.backOut);
      c.bounceIn = function (a) {
        return 1 - c.bounceOut(1 - a);
      };
      c.bounceInOut = function (a) {
        if (a < 0.5) {
          return c.bounceIn(a * 2) * 0.5;
        } else {
          return c.bounceOut(a * 2 - 1) * 0.5 + 0.5;
        }
      };
      c.bounceOutIn = d(c.bounceIn, c.bounceOut);
      cc.easing = b.exports = c;
    }, {}],
    16: [function (a) {
      "use strict";
  
      a("./bezier");
      a("./easing");
      a("./types");
      a("./motion-path-helper");
      a("./animation-curves");
      a("./animation-clip");
      a("./animation-manager");
      a("./animation-state");
      a("./animation-animator");
    }, {
      "./animation-animator": 9,
      "./animation-clip": 10,
      "./animation-curves": 11,
      "./animation-manager": 12,
      "./animation-state": 13,
      "./bezier": 14,
      "./easing": 15,
      "./motion-path-helper": 17,
      "./types": 19
    }],
    17: [function (b, d) {
      "use strict";
  
      var f = b("./animation-curves").DynamicAnimCurve;
      var e = b("./animation-curves").computeRatioByType;
      var g = b("./bezier").bezier;
      var h = b("../core/utils/binary-search").binarySearchEpsilon;
      var j = cc.v2;
      function a(a) {
        this.points = a || [];
        this.beziers = [];
        this.ratios = [];
        this.progresses = [];
        this.length = 0;
        this.computeBeziers();
      }
      function k() {
        this.start = j();
        this.end = j();
        this.startCtrlPoint = j();
        this.endCtrlPoint = j();
      }
      function c(a) {
        if (!Array.isArray(a)) {
          return false;
        }
        for (var b = 0, c = a.length; b < c; b++) {
          var d = a[b];
          if (!Array.isArray(d) || d.length !== 6) {
            return false;
          }
        }
        return true;
      }
      a.prototype.computeBeziers = function () {
        var a;
        this.beziers.length = 0;
        this.ratios.length = 0;
        this.progresses.length = 0;
        this.length = 0;
        for (var b = 1; b < this.points.length; b++) {
          var c = this.points[b - 1];
          var d = this.points[b];
          (a = new k()).start = c.pos;
          a.startCtrlPoint = c.out;
          a.end = d.pos;
          a.endCtrlPoint = d.in;
          this.beziers.push(a);
          this.length += a.getLength();
        }
        var f = 0;
        for (b = 0; b < this.beziers.length; b++) {
          a = this.beziers[b];
          this.ratios[b] = a.getLength() / this.length;
          this.progresses[b] = f += this.ratios[b];
        }
        return this.beziers;
      };
      k.prototype.getPointAt = function (a) {
        var b = this.getUtoTmapping(a);
        return this.getPoint(b);
      };
      k.prototype.getPoint = function (a) {
        var b = g(this.start.x, this.startCtrlPoint.x, this.endCtrlPoint.x, this.end.x, a);
        var c = g(this.start.y, this.startCtrlPoint.y, this.endCtrlPoint.y, this.end.y, a);
        return new j(b, c);
      };
      k.prototype.getLength = function () {
        var a = this.getLengths();
        return a[a.length - 1];
      };
      k.prototype.getLengths = function (a) {
        if (!a) {
          a = this.__arcLengthDivisions ? this.__arcLengthDivisions : 200;
        }
        if (this.cacheArcLengths && this.cacheArcLengths.length === a + 1) {
          return this.cacheArcLengths;
        }
        var b;
        var c;
        var d = [];
        var f = this.getPoint(0);
        var g = j();
        var h = 0;
        d.push(0);
        c = 1;
        for (; c <= a; c++) {
          b = this.getPoint(c / a);
          g.x = f.x - b.x;
          g.y = f.y - b.y;
          h += g.mag();
          d.push(h);
          f = b;
        }
        this.cacheArcLengths = d;
        return d;
      };
      k.prototype.getUtoTmapping = function (b, d) {
        var e;
        var f = this.getLengths();
        var g = 0;
        var h = f.length;
        e = d || b * f[h - 1];
        for (var j, k = 0, m = h - 1; k <= m;) {
          if ((j = f[g = Math.floor(k + (m - k) / 2)] - e) < 0) {
            k = g + 1;
          } else {
            if (!(j > 0)) {
              m = g;
              break;
            }
            m = g - 1;
          }
        }
        if (f[g = m] === e) {
          return g / (h - 1);
        }
        var n = f[g];
        return (g + (e - n) / (f[g + 1] - n)) / (h - 1);
      };
      d.exports = {
        sampleMotionPaths: function (i, l, n, o) {
          function q(a) {
            if (a instanceof cc.Vec2) {
              return {
                in: a,
                pos: a,
                out: a
              };
            } else if (Array.isArray(a) && a.length === 6) {
              return {
                in: j(a[2], a[3]),
                pos: j(a[0], a[1]),
                out: j(a[4], a[5])
              };
            } else {
              return {
                in: cc.Vec2.ZERO,
                pos: cc.Vec2.ZERO,
                out: cc.Vec2.ZERO
              };
            }
          }
          var r = l.values = l.values.map(function (a) {
            if (Array.isArray(a)) {
              a = a.length === 2 ? cc.v2(a[0], a[1]) : cc.v3(a[0], a[1], a[2]);
            }
            return a;
          });
          if (i.length !== 0 && r.length !== 0) {
            for (var s = false, t = 0; t < i.length; t++) {
              var u = i[t];
              if (u && !c(u)) {
                u = null;
              }
              if (u && u.length > 0) {
                s = true;
                break;
              }
            }
            if (s && r.length !== 1) {
              for (var J = l.types, p = l.ratios, v = l.values = [], g = l.types = [], m = l.ratios = [], y = 0, K = f.Linear, Q = 0, Z = i.length; Q < Z - 1; Q++) {
                var x;
                var $ = i[Q];
                var aa = p[Q];
                var ba = p[Q + 1] - aa;
                var ca = r[Q];
                var da = r[Q + 1];
                var ea = J[Q];
                var fa = [];
                var ga = y / ba;
                var ha = 1 / (ba * n * o);
                if ($ && $.length > 0) {
                  var ia = [];
                  ia.push(q(ca));
                  for (var ja = 0, ka = $.length; ja < ka; ja++) {
                    var la = q($[ja]);
                    ia.push(la);
                  }
                  ia.push(q(da));
                  var ma = new a(ia);
                  ma.computeBeziers();
                  for (var na = ma.progresses; 1 - ga > 0.000001;) {
                    var oa;
                    var pa;
                    var qa;
                    var ra;
                    if ((x = e(x = ga, ea)) < 0) {
                      ra = (0 - x) * (pa = ma.beziers[0]).getLength();
                      qa = pa.start.sub(pa.endCtrlPoint).normalize();
                      oa = pa.start.add(qa.mul(ra));
                    } else if (x > 1) {
                      ra = (x - 1) * (pa = ma.beziers[ma.beziers.length - 1]).getLength();
                      qa = pa.end.sub(pa.startCtrlPoint).normalize();
                      oa = pa.end.add(qa.mul(ra));
                    } else {
                      var sa = h(na, x);
                      if (sa < 0) {
                        sa = ~sa;
                      }
                      x -= sa > 0 ? na[sa - 1] : 0;
                      x /= ma.ratios[sa];
                      oa = ma.beziers[sa].getPointAt(x);
                    }
                    fa.push(oa);
                    ga += ha;
                  }
                } else {
                  for (; 1 - ga > 0.000001;) {
                    x = e(x = ga, ea);
                    fa.push(ca.lerp(da, x));
                    ga += ha;
                  }
                }
                K = ea === "constant" ? ea : f.Linear;
                ja = 0;
                ka = fa.length;
                for (; ja < ka; ja++) {
                  var ta = aa + y + ha * ja * ba;
                  ua(fa[ja], K, ta);
                }
                y = Math.abs(ga - 1) > 0.000001 ? (ga - 1) * ba : 0;
              }
              if (p[p.length - 1] !== m[m.length - 1]) {
                ua(r[r.length - 1], K, p[p.length - 1]);
              }
            }
          }
          function ua(a, b, c) {
            v.push(a);
            g.push(b);
            m.push(c);
          }
        },
        Curve: a,
        Bezier: k
      };
    }, {
      "../core/utils/binary-search": 229,
      "./animation-curves": 11,
      "./bezier": 14
    }],
    18: [function (b, c) {
      "use strict";
  
      var d = cc.js;
      var e = b("../core/CCDebug");
      function f() {
        this._isPlaying = false;
        this._isPaused = false;
        this._stepOnce = false;
      }
      var g = f.prototype;
      d.get(g, "isPlaying", function () {
        return this._isPlaying;
      }, true);
      d.get(g, "isPaused", function () {
        return this._isPaused;
      }, true);
      function h() {}
      g.onPlay = h;
      g.onPause = h;
      g.onResume = h;
      g.onStop = h;
      g.onError = h;
      g.play = function () {
        if (this._isPlaying) {
          if (this._isPaused) {
            this._isPaused = false;
            this.onResume();
          } else {
            this.onError(e.getError(3912));
          }
        } else {
          this._isPlaying = true;
          this.onPlay();
        }
      };
      g.stop = function () {
        if (this._isPlaying) {
          this._isPlaying = false;
          this.onStop();
          this._isPaused = false;
        }
      };
      g.pause = function () {
        if (this._isPlaying && !this._isPaused) {
          this._isPaused = true;
          this.onPause();
        }
      };
      g.resume = function () {
        if (this._isPlaying && this._isPaused) {
          this._isPaused = false;
          this.onResume();
        }
      };
      g.step = function () {
        this.pause();
        this._stepOnce = true;
        if (!this._isPlaying) {
          this.play();
        }
      };
      c.exports = f;
    }, {
      "../core/CCDebug": 23
    }],
    19: [function (a, b) {
      "use strict";
  
      var c = {
        Loop: 2,
        ShouldWrap: 4,
        PingPong: 22,
        Reverse: 36
      };
      var d = cc.Enum({
        Default: 0,
        Normal: 1,
        Reverse: c.Reverse,
        Loop: c.Loop,
        LoopReverse: c.Loop | c.Reverse,
        PingPong: c.PingPong,
        PingPongReverse: c.PingPong | c.Reverse
      });
      function e(a) {
        if (a) {
          this.set(a);
        } else {
          this.ratio = 0;
          this.time = 0;
          this.direction = 1;
          this.stopped = true;
          this.iterations = 0;
          this.frameIndex = undefined;
        }
      }
      cc.WrapMode = d;
      e.prototype.set = function (a) {
        this.ratio = a.ratio;
        this.time = a.time;
        this.direction = a.direction;
        this.stopped = a.stopped;
        this.iterations = a.iterations;
        this.frameIndex = a.frameIndex;
      };
      b.exports = {
        WrapModeMask: c,
        WrapMode: d,
        WrappedInfo: e
      };
    }, {}],
    20: [function (b, d) {
      "use strict";
  
      var e;
      var f = b("../core/event/event-target");
      var g = b("../core/platform/CCSys");
      var h = function b(a) {
        f.call(this);
        this._shouldRecycleOnEnded = false;
        this._src = a;
        this._element = null;
        this._state = b.State.INITIALZING;
        var c = this;
        this._onended = function () {
          c._state = b.State.STOPPED;
          c.emit("ended");
        };
        this._onendedSecond = function () {
          c._unbindEnded(c._onendedSecond);
          c._bindEnded();
        };
      };
      function j(a) {
        a.onended = undefined;
        a.stop(0);
        if (h.ScratchAudioBuffer) {
          try {
            a.buffer = h.ScratchAudioBuffer;
          } catch (a) {}
        }
      }
      cc.js.extend(h, f);
      h.State = {
        ERROR: -1,
        INITIALZING: 0,
        PLAYING: 1,
        PAUSED: 2,
        STOPPED: 3
      };
      h.ScratchAudioBuffer = undefined;
      (e = h.prototype)._bindEnded = function (a) {
        if (!(a = a || this._onended)._binded) {
          a._binded = true;
          var b = this._element;
          if (this._src && b instanceof HTMLAudioElement) {
            b.addEventListener("ended", this._onended);
          } else {
            b.onended = this._onended;
          }
        }
      };
      e._unbindEnded = function (a) {
        if ((a = a || this._onended)._binded) {
          a._binded = false;
          var b = this._element;
          if (b instanceof HTMLAudioElement) {
            b.removeEventListener("ended", a);
          } else if (b) {
            b.onended = null;
          }
        }
      };
      e._onLoaded = function () {
        this._createElement();
        this._state = h.State.INITIALZING;
        this.setVolume(1);
        this.setLoop(false);
      };
      e._createElement = function () {
        var b = this._src._nativeAsset;
        if (b instanceof HTMLAudioElement) {
          if (!this._element) {
            this._element = document.createElement("audio");
          }
          this._element.src = b.src;
        } else {
          this._element = new a(b, this);
        }
      };
      e.play = function (a, b) {
        var c = this;
        if (this._src) {
          this._src._ensureLoaded(function () {
            c._state = h.State.PLAYING;
            c._offset = c._length = 0;
            c._bindEnded();
            var d = c._element.play(a, b);
            if (window.Promise && d instanceof Promise) {
              d.catch(function () {});
            }
          });
        }
      };
      e.destroy = function () {
        this._element = null;
      };
      e.pause = function () {
        if (this.getState() === h.State.PLAYING) {
          var a = this;
          if (this._src) {
            this._src._ensureLoaded(function () {
              a._unbindEnded();
              a._element.pause();
              a._state = h.State.PAUSED;
            });
          }
        }
      };
      e.resume = function () {
        if (this.getState() === h.State.PAUSED) {
          var a = this;
          if (this._src) {
            this._src._ensureLoaded(function () {
              a._bindEnded();
              a._element.play();
              a._state = h.State.PLAYING;
            });
          }
        }
      };
      e.stop = function () {
        var a = this;
        if (this._src) {
          this._src._ensureLoaded(function () {
            a._element._rateParam = undefined;
            a._element.pause();
            a._element.currentTime = 0;
            a._unbindEnded();
            a._state = h.State.STOPPED;
            a.emit("stop");
          });
        }
      };
      e.setLoop = function (a) {
        var b = this;
        if (this._src) {
          this._src._ensureLoaded(function () {
            b._element.loop = a;
          });
        }
      };
      e.isLoop = function () {
        return !!this._element && this._element.loop;
      };
      e.setVolume = function (a) {
        var b = this;
        if (this._src) {
          this._src._ensureLoaded(function () {
            b._element.volume = a;
          });
        }
      };
      e.getVolume = function () {
        if (this._element) {
          return this._element.volume;
        } else {
          return 1;
        }
      };
      e.setCurrentTime = function (a) {
        var b = this;
        if (this._src) {
          this._src._ensureLoaded(function () {
            b._unbindEnded();
            b._bindEnded(b._onendedSecond);
            b._element.currentTime = a;
          });
        }
      };
      e.getCurrentTime = function () {
        if (this._element) {
          return this._element.currentTime;
        } else {
          return 0;
        }
      };
      e.getDuration = function () {
        if (this._src) {
          return this._src.duration;
        } else {
          return 0;
        }
      };
      e.getState = function (a) {
        if (a === undefined) {
          a = true;
        }
        if (a) {
          this._forceUpdatingState();
        }
        return this._state;
      };
      e._forceUpdatingState = function () {
        var a = this._element;
        if (a) {
          if (h.State.PLAYING === this._state && a.paused) {
            this._state = h.State.STOPPED;
          } else if (!(h.State.STOPPED !== this._state || a.paused)) {
            this._state = h.State.PLAYING;
          }
        }
      };
      Object.defineProperty(e, "src", {
        get: function () {
          return this._src;
        },
        set: function (b) {
          this._unbindEnded();
          if (b && b.isValid) {
            if (b !== this._src) {
              this._src = b;
              if (b.loaded) {
                this._onLoaded();
              } else {
                var c = this;
                b.once("load", function () {
                  if (b === c._src) {
                    c._onLoaded();
                  }
                });
              }
            }
          } else {
            this._src = null;
            if (this._element instanceof a) {
              this._element = null;
            } else if (this._element) {
              this._element.src = "";
            }
            this._state = h.State.INITIALZING;
          }
        },
        enumerable: true,
        configurable: true
      });
      Object.defineProperty(e, "paused", {
        get: function () {
          return !this._element || this._element.paused;
        },
        enumerable: true,
        configurable: true
      });
      if (!(cc.sys.browserType === cc.sys.BROWSER_TYPE_EDGE || cc.sys.browserType === cc.sys.BROWSER_TYPE_BAIDU)) {
        cc.sys.browserType;
        cc.sys.BROWSER_TYPE_UC;
      }
      function a(a, b) {
        this._audio = b;
        this._context = g.__audioSupport.context;
        this._buffer = a;
        this._gainObj = this._context.createGain();
        this.volume = 1;
        this._useSetTarget = this._gainObj.gain.setValueAtTime !== undefined;
        if (this._useSetTarget) {
          this._gainObj.gain.setValueAtTime(1, this._context.currentTime);
        } else {
          this._gainObj.gain.value = 1;
        }
        this._gainObj.connect(this._context.destination);
        this._loop = false;
        this._startTime = -1;
        this._currentSource = null;
        this.playedLength = 0;
        this._offset = 0;
        this._duration = a.duration;
        this._fadeParam = undefined;
        this._rateParam = undefined;
        this._endCallback = function () {
          var a = this._currentSource;
          if (a) {
            this._currentSource = null;
            j(a);
          }
          if (this._fadeParam) {
            if (this._fadeParam.callback) {
              this._fadeParam.callback();
            }
            this._fadeParam.callback = undefined;
            this._stopFade(true);
          }
          this._rateParam = undefined;
          if (this.onended) {
            this.onended(this);
          }
        }.bind(this);
      }
      (function (a) {
        a.play = function (a, b) {
          if (a === undefined) {
            a = 0;
          }
          if (b === undefined) {
            b = 0;
          }
          if (!this.paused) {
            j(this._currentSource);
            this.playedLength = 0;
            this._stopFade(true);
          }
          var c = this.playedLength;
          if (a || b) {
            this._offset = a;
            if (b) {
              this._duration = b;
            } else {
              b = this._duration = this._buffer.duration - a;
            }
          } else {
            a = this._offset + c;
            b = this._duration - c;
          }
          if (this._context.state === "suspended") {
            this._context.resume();
          }
          var d = this._context.createBufferSource();
          d.buffer = this._buffer;
          d.connect(this._gainObj);
          this._startTime = this._context.currentTime - c;
          if (this._loop) {
            d.loop = true;
            d.loopStart = this._offset;
            d.loopEnd = this._offset + this._duration;
            if (d.start) {
              d.start(0, a);
            } else if (d.noteGrainOn) {
              d.noteGrainOn(0, a);
            } else {
              d.noteOn(0, a);
            }
          } else if (d.start) {
            d.start(0, a, b);
          } else if (d.noteGrainOn) {
            d.noteGrainOn(0, a, b);
          } else {
            d.noteOn(0, a, b);
          }
          if (this._rateParam && this._rateParam.applyTime === undefined) {
            if (this._rateParam.rate === 1) {
              this._rateParam = undefined;
            } else {
              d.playbackRate.value = this._rateParam.rate;
              this._rateParam.applyTime = this._context.currentTime;
            }
          }
          this._resumeFade();
          this._currentSource = d;
          d.onended = this._endCallback;
          var f = cc.sys;
          if (f.os === f.OS_IOS && f.isBrowser && f.isMobile && (d.context.state === "suspended" && this._context.currentTime !== 0 || d.context.state === "interrupted")) {
            d.context.resume();
          }
        };
        a.pause = function () {
          if (!this.paused) {
            var a = this._context.currentTime - this._startTime;
            var b = this._currentSource;
            this._currentSource = null;
            this._startTime = -1;
            if (b) {
              j(b);
              if (this._rateParam && this._rateParam.applyTime !== undefined) {
                a += this._instantRateOffset();
                this._rateParam.applyTime = undefined;
                this._rateParam.offset = 0;
              }
            }
            this.playedLength = a % this._duration;
            this._pauseFade();
          }
        };
        Object.defineProperty(a, "paused", {
          get: function () {
            if (this._currentSource && this._currentSource.loop) {
              return false;
            }
            if (this._startTime === -1) {
              return true;
            }
            var a = this._context.currentTime - this._startTime;
            if (this._rateParam && this._rateParam.applyTime !== undefined) {
              a += this._instantRateOffset();
            }
            return a > this._duration;
          },
          enumerable: true,
          configurable: true
        });
        a.fade = function (a, b, c, d) {
          if (this.paused || a === b || c === 0) {
            this.volume = b;
          } else {
            var e = c;
            if (this._rateParam) {
              c /= this._rateParam.rate;
            }
            this.volume = a;
            this._gainObj.gain.linearRampToValueAtTime(b, this._context.currentTime + c);
            this._volume = b;
            this._fadeParam = {
              from: a,
              to: b,
              duration: e,
              callback: d,
              cancel: // TOLOOK
              setTimeout(this._fadeComplete.bind(this), c * 1000)
            };
          }
        };
        a._stopFade = function (a) {
          if (this._fadeParam !== undefined) {
            if (this._fadeParam.cancel !== undefined) {
              clearTimeout(this._fadeParam.cancel);
            }
            this._gainObj.gain.cancelScheduledValues(this._context.currentTime);
            if (a) {
              this._volume = this._fadeParam.to;
              if (this._useSetTarget) {
                this._gainObj.gain.setValueAtTime(this._volume, this._context.currentTime);
              } else {
                this._gainObj.gain.value = this._volume;
              }
            }
            this._fadeParam = undefined;
          }
        };
        a._pauseFade = function () {
          if (this._fadeParam !== undefined && this._fadeParam.cancel) {
            clearTimeout(this._fadeParam.cancel);
            this._fadeParam.cancel = undefined;
            this._gainObj.gain.cancelScheduledValues(this._context.currentTime);
          }
        };
        a._resumeFade = function () {
          if (this._fadeParam !== undefined && !this._fadeParam.cancel) {
            var a = this._fadeParam.to;
            var b = this._fadeParam.from;
            var c = this._fadeParam.duration;
            var d = a - b;
            var e = (this._gainObj.gain.value - b) / d;
            if (e < 0 || e > 1) {
              e = 0;
              this._gainObj.gain.value = b;
            }
            var f = c * (1 - e);
            if (this._rateParam && this._rateParam.applyTime) {
              f /= this._rateParam.rate;
            }
            this._volume = a;
            this._gainObj.gain.linearRampToValueAtTime(a, this._context.currentTime + f);
            this._fadeParam.cancel = // TOLOOK
            setTimeout(this._fadeComplete.bind(this), f * 1000);
          }
        };
        a._fadeComplete = function () {
          if (this._fadeParam) {
            if (this._fadeParam.callback) {
              this._fadeParam.callback();
            }
            this._fadeParam = undefined;
          }
        };
        a._instantRateOffset = function () {
          if (this._rateParam && this._rateParam.applyTime) {
            var a = (this._context.currentTime - this._rateParam.applyTime) * (this._rateParam.rate - 1);
            return this._rateParam.offset + a;
          }
          return 0;
        };
        Object.defineProperty(a, "loop", {
          get: function () {
            return this._loop;
          },
          set: function (a) {
            if (this._loop !== a) {
              if (this.paused) {
                this._loop = a;
              } else {
                this.pause();
                this._loop = a;
                this.play();
              }
            }
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(a, "volume", {
          get: function () {
            return this._volume;
          },
          set: function (a) {
            this._stopFade(false);
            this._volume = a;
            if (this._useSetTarget) {
              this._gainObj.gain.setValueAtTime(a, this._context.currentTime);
            } else {
              this._gainObj.gain.value = a;
            }
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(a, "currentTime", {
          get: function () {
            if (this.paused) {
              return this.playedLength;
            }
            var a = this._context.currentTime - this._startTime;
            if (this._rateParam && this._rateParam.applyTime !== undefined) {
              a += this._instantRateOffset();
            }
            return a % this._duration;
          },
          set: function (a) {
            this._stopFade(true);
            if (this.paused) {
              this.playedLength = a;
            } else {
              if (this._rateParam && this._rateParam.applyTime !== undefined) {
                this._rateParam.applyTime = undefined;
                this._rateParam.offset = 0;
              }
              this.pause();
              this.playedLength = a;
              this.play();
            }
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(a, "duration", {
          get: function () {
            return this._duration;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(a, "rate", {
          get: function () {
            if (this._rateParam) {
              return this._rateParam.rate;
            } else {
              return 1;
            }
          },
          set: function (a) {
            if (!(a <= 0)) {
              var b = this._currentSource !== null;
              if (this._rateParam === undefined) {
                this._rateParam = {
                  applyTime: b ? this._context.currentTime : undefined,
                  rate: a,
                  offset: 0
                };
              } else {
                if (this._rateParam.rate === a) {
                  return;
                }
                if (this._rateParam.applyTime !== undefined && b) {
                  this._rateParam.offset = this._instantRateOffset();
                  this._rateParam.applyTime = this._context.currentTime;
                }
                this._rateParam.rate = a;
              }
              if (this._rateParam.applyTime !== undefined && b) {
                this._currentSource.playbackRate.value = a;
                this._pauseFade();
                this._resumeFade();
              }
            }
          },
          enumerable: true,
          configurable: true
        });
      })(a.prototype);
      var k = window.shell && window.shell.WebAudio ? window.shell.WebAudio : h;
      d.exports = cc._Audio = k;
    }, {
      "../core/event/event-target": 134,
      "../core/platform/CCSys": 171
    }],
    21: [function (a, b) {
      "use strict";
  
      var c = {
        name: "Jacob__Codec"
      };
      c.Base64 = a("./base64");
      c.unzip = function () {
        return c.GZip.gunzip.apply(c.GZip, arguments);
      };
      c.unzipBase64 = function () {
        var a = c.Base64.decode.apply(c.Base64, arguments);
        try {
          return c.GZip.gunzip.call(c.GZip, a);
        } catch (b) {
          return a.slice(7);
        }
      };
      c.unzipBase64AsArray = function (b, c) {
        c = c || 1;
        var d;
        var f;
        var g;
        var h = this.unzipBase64(b);
        var j = [];
        d = 0;
        g = h.length / c;
        for (; d < g; d++) {
          j[d] = 0;
          f = c - 1;
          j[d] = 0;
          f = c - 1;
          for (; f >= 0; --f) {
            j[d] += h.charCodeAt(d * c + f) << f * 8;
          }
        }
        return j;
      };
      c.unzipAsArray = function (b, c) {
        c = c || 1;
        var d;
        var f;
        var g;
        var h = this.unzip(b);
        var j = [];
        d = 0;
        g = h.length / c;
        for (; d < g; d++) {
          j[d] = 0;
          f = c - 1;
          j[d] = 0;
          f = c - 1;
          for (; f >= 0; --f) {
            j[d] += h.charCodeAt(d * c + f) << f * 8;
          }
        }
        return j;
      };
      cc.codec = b.exports = c;
    }, {
      "./base64": 22
    }],
    22: [function (a, b) {
      "use strict";
  
      var d = a("../core/utils/misc").BASE64_VALUES;
      var c = {
        name: "Jacob__Codec__Base64",
        decode: function (b) {
          var f;
          var g;
          var h;
          var i;
          var j;
          var k;
          var m = [];
          var c = 0;
          for (b = b.replace(/[^A-Za-z0-9\+\/\=]/g, ""); c < b.length;) {
            f = d[b.charCodeAt(c++)] << 2 | (i = d[b.charCodeAt(c++)]) >> 4;
            g = (i & 15) << 4 | (j = d[b.charCodeAt(c++)]) >> 2;
            h = (j & 3) << 6 | (k = d[b.charCodeAt(c++)]);
            m.push(String.fromCharCode(f));
            if (j !== 64) {
              m.push(String.fromCharCode(g));
            }
            if (k !== 64) {
              m.push(String.fromCharCode(h));
            }
          }
          return m.join("");
        },
        decodeAsArray: function (b, c) {
          var d;
          var e;
          var f;
          var g = this.decode(b);
          var h = [];
          d = 0;
          f = g.length / c;
          for (; d < f; d++) {
            h[d] = 0;
            e = c - 1;
            h[d] = 0;
            e = c - 1;
            for (; e >= 0; --e) {
              h[d] += g.charCodeAt(d * c + e) << e * 8;
            }
          }
          return h;
        }
      };
      b.exports = c;
    }, {
      "../core/utils/misc": 236
    }],
    23: [function (b, c) {
      "use strict";
  
      var d;
      var e = b("./platform/utils");
      b("../../DebugInfos");
      var f = (typeof window == "undefined" ? global : window).console;
      cc.log = cc.warn = cc.error = cc.assert = f.log.bind ? f.log.bind(f) : f.log;
      cc._throw = function (a) {
        e.callInNextTick(function () {
          throw a;
        });
      };
      cc.logID = function () {};
      cc.warnID = function () {};
      cc.errorID = function () {};
      cc.assertID = function () {};
      var g;
      var h = cc.Enum({
        NONE: 0,
        INFO: 1,
        WARN: 2,
        ERROR: 3,
        INFO_FOR_WEB_PAGE: 4,
        WARN_FOR_WEB_PAGE: 5,
        ERROR_FOR_WEB_PAGE: 6
      });
      c.exports = cc.debug = {
        DebugMode: h,
        _resetDebugSetting: function (a) {
          cc.log = cc.warn = cc.error = cc.assert = function () {};
          if (a !== h.NONE) {
            if (a > h.ERROR) {
              function b(a) {
                if (cc.game.canvas) {
                  if (!d) {
                    var b = document.createElement("Div");
                    b.setAttribute("id", "logInfoDiv");
                    b.setAttribute("width", "200");
                    b.setAttribute("height", cc.game.canvas.height);
                    var c = b.style;
                    c.zIndex = "99999";
                    c.position = "absolute";
                    c.top = c.left = "0";
                    (d = document.createElement("textarea")).setAttribute("rows", "20");
                    d.setAttribute("cols", "30");
                    d.setAttribute("disabled", "true");
                    var e = d.style;
                    e.backgroundColor = "transparent";
                    e.borderBottom = "1px solid #cccccc";
                    e.borderTopWidth = e.borderLeftWidth = e.borderRightWidth = "0px";
                    e.borderTopStyle = e.borderLeftStyle = e.borderRightStyle = "none";
                    e.padding = "0px";
                    e.margin = 0;
                    b.appendChild(d);
                    cc.game.canvas.parentNode.appendChild(b);
                  }
                  d.value = d.value + a + "\r\n";
                  d.scrollTop = d.scrollHeight;
                }
              }
              cc.error = function () {
                b("ERROR :  " + cc.js.formatStr.apply(null, arguments));
              };
              cc.assert = function (a, c) {
                if (!a && c) {
                  c = cc.js.formatStr.apply(null, cc.js.shiftArguments.apply(null, arguments));
                  b("ASSERT: " + c);
                }
              };
              if (a !== h.ERROR_FOR_WEB_PAGE) {
                cc.warn = function () {
                  b("WARN :  " + cc.js.formatStr.apply(null, arguments));
                };
              }
              if (a === h.INFO_FOR_WEB_PAGE) {
                cc.log = function () {
                  b(cc.js.formatStr.apply(null, arguments));
                };
              }
            } else if (f && f.log.apply) {
              if (!f.error) {
                f.error = f.log;
              }
              if (!f.warn) {
                f.warn = f.log;
              }
              if (f.error.bind) {
                cc.error = f.error.bind(f);
              } else {
                cc.error = function () {
                  return f.error.apply(f, arguments);
                };
              }
              cc.assert = function (a, b) {
                if (!a) {
                  if (b) {
                    b = cc.js.formatStr.apply(null, cc.js.shiftArguments.apply(null, arguments));
                  }
                  throw Error(b);
                }
              };
            }
            if (a !== h.ERROR) {
              if (f.warn.bind) {
                cc.warn = f.warn.bind(f);
              } else {
                cc.warn = function () {
                  return f.warn.apply(f, arguments);
                };
              }
            }
            if (a === h.INFO) {
              if (f.log.bind) {
                cc.log = f.log.bind(f);
              } else {
                cc.log = function () {
                  return f.log.apply(f, arguments);
                };
              }
            }
          }
        },
        getError: (g = "ERROR", function () {
          var a = arguments[0];
          var b = g + " " + a + ".";
          if (arguments.length === 1) {
            return b;
          }
          if (arguments.length === 2) {
            return b + " Arguments: " + arguments[1];
          }
          var c = cc.js.shiftArguments.apply(null, arguments);
          return b + " Arguments: " + c.join(", ");
        }),
        isDisplayStats: function () {
          return !!cc.profiler && cc.profiler.isShowingStats();
        },
        setDisplayStats: function (a) {
          if (cc.profiler && cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
            if (a) {
              cc.profiler.showStats();
            } else {
              cc.profiler.hideStats();
            }
            cc.game.config.showFPS = !!a;
          }
        }
      };
    }, {
      "../../DebugInfos": undefined,
      "./platform/utils": 186
    }],
    24: [function (b, d) {
      "use strict";
  
      var e = b("./event/event-target");
      var f = b("./component-scheduler");
      var g = b("./node-activator");
      var j = b("./platform/CCObject");
      var k = b("./CCGame");
      var a = b("./renderer");
      var h = b("./event-manager");
      var c = b("./CCScheduler");
      cc.Director = function () {
        e.call(this);
        this._invalid = false;
        this._paused = false;
        this._purgeDirectorInNextLoop = false;
        this._winSizeInPoints = null;
        this._scene = null;
        this._loadingScene = "";
        this._totalFrames = 0;
        this._lastUpdate = 0;
        this._deltaTime = 0;
        this._startTime = 0;
        this._maxParticleDeltaTime = 0;
        this._timeScale = 1;
        this._scheduler = null;
        this._compScheduler = null;
        this._nodeActivator = null;
        this._actionManager = null;
        var a = this;
        k.on(k.EVENT_SHOW, function () {
          a._lastUpdate = performance.now();
        });
        k.once(k.EVENT_ENGINE_INITED, this.init, this);
      };
      cc.Director.prototype = {
        constructor: cc.Director,
        init: function () {
          this._totalFrames = 0;
          this._lastUpdate = performance.now();
          this._startTime = this._lastUpdate;
          this._paused = false;
          this._purgeDirectorInNextLoop = false;
          this._winSizeInPoints = cc.size(0, 0);
          this._scheduler = new c();
          this.sharedInit();
          return true;
        },
        sharedInit: function () {
          this._compScheduler = new f();
          this._nodeActivator = new g();
          if (h) {
            h.setEnabled(true);
          }
          if (cc.ActionManager) {
            this._actionManager = new cc.ActionManager();
            this._scheduler.scheduleUpdate(this._actionManager, c.PRIORITY_SYSTEM, false);
          } else {
            this._actionManager = null;
          }
          if (cc.AnimationManager) {
            this._animationManager = new cc.AnimationManager();
            this._scheduler.scheduleUpdate(this._animationManager, c.PRIORITY_SYSTEM, false);
          } else {
            this._animationManager = null;
          }
          if (cc.CollisionManager) {
            this._collisionManager = new cc.CollisionManager();
            this._scheduler.scheduleUpdate(this._collisionManager, c.PRIORITY_SYSTEM, false);
          } else {
            this._collisionManager = null;
          }
          if (cc.PhysicsManager) {
            this._physicsManager = new cc.PhysicsManager();
            this._scheduler.scheduleUpdate(this._physicsManager, c.PRIORITY_SYSTEM, false);
          } else {
            this._physicsManager = null;
          }
          cc.Physics3DManager;
          this._physics3DManager = null;
          if (cc._widgetManager) {
            cc._widgetManager.init(this);
          }
        },
        calculateDeltaTime: function (a) {
          if (!a) {
            a = performance.now();
          }
          this._deltaTime = a > this._lastUpdate ? (a - this._lastUpdate) / 1000 : 0;
          this._lastUpdate = a;
        },
        convertToGL: function (a) {
          var b = k.container;
          var d = cc.view;
          var e = b.getBoundingClientRect();
          var f = e.left + window.pageXOffset - b.clientLeft;
          var g = e.top + window.pageYOffset - b.clientTop;
          var h = d._devicePixelRatio * (a.x - f);
          var i = d._devicePixelRatio * (g + e.height - a.y);
          if (d._isRotated) {
            return cc.v2(d._viewportRect.width - i, h);
          } else {
            return cc.v2(h, i);
          }
        },
        convertToUI: function (a) {
          var b = k.container;
          var c = cc.view;
          var d = b.getBoundingClientRect();
          var e = d.left + window.pageXOffset - b.clientLeft;
          var f = d.top + window.pageYOffset - b.clientTop;
          var g = cc.v2(0, 0);
          if (c._isRotated) {
            g.x = e + a.y / c._devicePixelRatio;
            g.y = f + d.height - (c._viewportRect.width - a.x) / c._devicePixelRatio;
          } else {
            g.x = e + a.x * c._devicePixelRatio;
            g.y = f + d.height - a.y * c._devicePixelRatio;
          }
          return g;
        },
        end: function () {
          this._purgeDirectorInNextLoop = true;
        },
        getWinSize: function () {
          return cc.size(cc.winSize);
        },
        getWinSizeInPixels: function () {
          return cc.size(cc.winSize);
        },
        pause: function () {
          if (!this._paused) {
            this._paused = true;
          }
        },
        purgeCachedData: function () {
          cc.assetManager.releaseAll();
        },
        purgeDirector: function () {
          this._scheduler.unscheduleAll();
          this._compScheduler.unscheduleAll();
          this._nodeActivator.reset();
          if (h) {
            h.setEnabled(false);
          }
          if (cc.isValid(this._scene)) {
            this._scene.destroy();
          }
          this._scene = null;
          cc.renderer.clear();
          cc.assetManager.builtins.clear();
          this.stopAnimation();
          cc.assetManager.releaseAll();
        },
        reset: function () {
          this.purgeDirector();
          if (h) {
            h.setEnabled(true);
          }
          if (this._actionManager) {
            this._scheduler.scheduleUpdate(this._actionManager, cc.Scheduler.PRIORITY_SYSTEM, false);
          }
          if (this._animationManager) {
            this._scheduler.scheduleUpdate(this._animationManager, cc.Scheduler.PRIORITY_SYSTEM, false);
          }
          if (this._collisionManager) {
            this._scheduler.scheduleUpdate(this._collisionManager, cc.Scheduler.PRIORITY_SYSTEM, false);
          }
          if (this._physicsManager) {
            this._scheduler.scheduleUpdate(this._physicsManager, cc.Scheduler.PRIORITY_SYSTEM, false);
          }
          this._resetDeltaTime();
          this.startAnimation();
        },
        runSceneImmediate: function (a, b, d) {
          if (a instanceof cc.SceneAsset) {
            a = a.scene;
          }
          a._load();
          this.emit(cc.Director.EVENT_BEFORE_SCENE_DESTROY, a);
          for (var e = Object.keys(k._persistRootNodes).map(function (a) {
              return k._persistRootNodes[a];
            }), f = 0; f < e.length; f++) {
            var g = e[f];
            var i = a.getChildByUuid(g.uuid);
            if (i) {
              var m = i.getSiblingIndex();
              i._destroyImmediate();
              a.insertChild(g, m);
            } else {
              g.parent = a;
            }
          }
          var n = this._scene;
          cc.assetManager._releaseManager._autoRelease(n, a, k._persistRootNodes);
          if (cc.isValid(n)) {
            n.destroy();
          }
          this._scene = null;
          j._deferredDestroy();
          if (b) {
            b();
          }
          this.emit(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, a);
          this._scene = a;
          a._activate();
          this.startAnimation();
          if (d) {
            d(null, a);
          }
          this.emit(cc.Director.EVENT_AFTER_SCENE_LAUNCH, a);
        },
        runScene: function (a, b, c) {
          if (a instanceof cc.SceneAsset) {
            a = a.scene;
          }
          a._load();
          this.once(cc.Director.EVENT_AFTER_DRAW, function () {
            this.runSceneImmediate(a, b, c);
          }, this);
        },
        loadScene: function (a, b, c) {
          if (this._loadingScene) {
            return false;
          }
          var d = cc.assetManager.bundles.find(function (b) {
            return b.getSceneInfo(a);
          });
          if (d) {
            this.emit(cc.Director.EVENT_BEFORE_SCENE_LOADING, a);
            this._loadingScene = a;
            var e = this;
            d.loadScene(a, function (a, d) {
              e._loadingScene = "";
              if (a) {
                a = "Failed to load scene: " + a;
                if (b) {
                  b(a);
                }
              } else {
                e.runSceneImmediate(d, c, b);
              }
            });
            return true;
          }
          return false;
        },
        preloadScene: function (a, b, c) {
          var d = cc.assetManager.bundles.find(function (b) {
            return b.getSceneInfo(a);
          });
          if (!d) {
            return null;
          }
          d.preloadScene(a, null, b, c);
        },
        resume: function () {
          if (this._paused) {
            this._lastUpdate = performance.now();
            this._lastUpdate;
            this._paused = false;
            this._deltaTime = 0;
          }
        },
        setDepthTest: function (a) {
          if (cc.Camera.main) {
            cc.Camera.main.depth = !!a;
          }
        },
        setClearColor: function (a) {
          if (cc.Camera.main) {
            cc.Camera.main.backgroundColor = a;
          }
        },
        getRunningScene: function () {
          return this._scene;
        },
        getScene: function () {
          return this._scene;
        },
        getAnimationInterval: function () {
          return 1000 / k.getFrameRate();
        },
        setAnimationInterval: function (a) {
          k.setFrameRate(Math.round(1000 / a));
        },
        getDeltaTime: function () {
          return this._deltaTime;
        },
        getTotalTime: function () {
          return performance.now() - this._startTime;
        },
        getTotalFrames: function () {
          return this._totalFrames;
        },
        isPaused: function () {
          return this._paused;
        },
        getScheduler: function () {
          return this._scheduler;
        },
        setScheduler: function (a) {
          if (this._scheduler !== a) {
            this._scheduler = a;
          }
        },
        getActionManager: function () {
          return this._actionManager;
        },
        setActionManager: function (a) {
          if (this._actionManager !== a) {
            if (this._actionManager) {
              this._scheduler.unscheduleUpdate(this._actionManager);
            }
            this._actionManager = a;
            this._scheduler.scheduleUpdate(this._actionManager, cc.Scheduler.PRIORITY_SYSTEM, false);
          }
        },
        getAnimationManager: function () {
          return this._animationManager;
        },
        getCollisionManager: function () {
          return this._collisionManager;
        },
        getPhysicsManager: function () {
          return this._physicsManager;
        },
        getPhysics3DManager: function () {
          return this._physics3DManager;
        },
        startAnimation: function () {
          this._invalid = false;
        },
        stopAnimation: function () {
          this._invalid = true;
        },
        _resetDeltaTime: function () {
          this._lastUpdate = performance.now();
          this._deltaTime = 0;
        },
        setTimeScale: function (a) {
          this._timeScale = a;
        },
        getTimeScale: function () {
          return this._timeScale;
        },
        mainLoop: function (b) {
          if (this._purgeDirectorInNextLoop) {
            this._purgeDirectorInNextLoop = false;
            this.purgeDirector();
          } else if (!this._invalid) {
            this.calculateDeltaTime(b);
            var c = this._deltaTime;
            if (this._timeScale !== 1) {
              c *= this._timeScale;
            }
            if (!this._paused) {
              this.emit(cc.Director.EVENT_BEFORE_UPDATE);
              this._compScheduler.startPhase();
              this._compScheduler.updatePhase(c);
              this._scheduler.update(c);
              this._compScheduler.lateUpdatePhase(c);
              this.emit(cc.Director.EVENT_AFTER_UPDATE);
              j._deferredDestroy();
            }
            this.emit(cc.Director.EVENT_BEFORE_DRAW);
            a.render(this._scene, c);
            this.emit(cc.Director.EVENT_AFTER_DRAW);
            h.frameUpdateListeners();
            this._totalFrames++;
          }
        },
        __fastOn: function (a, b, c) {
          this.on(a, b, c);
        },
        __fastOff: function (a, b, c) {
          this.off(a, b, c);
        }
      };
      cc.js.addon(cc.Director.prototype, e.prototype);
      cc.Director.EVENT_PROJECTION_CHANGED = "director_projection_changed";
      cc.Director.EVENT_BEFORE_SCENE_LOADING = "director_before_scene_loading";
      cc.Director.EVENT_BEFORE_SCENE_DESTROY = "director_before_scene_destroy";
      cc.Director.EVENT_BEFORE_SCENE_LAUNCH = "director_before_scene_launch";
      cc.Director.EVENT_AFTER_SCENE_LAUNCH = "director_after_scene_launch";
      cc.Director.EVENT_BEFORE_UPDATE = "director_before_update";
      cc.Director.EVENT_AFTER_UPDATE = "director_after_update";
      cc.Director.EVENT_BEFORE_VISIT = "director_before_draw";
      cc.Director.EVENT_AFTER_VISIT = "director_before_draw";
      cc.Director.EVENT_BEFORE_DRAW = "director_before_draw";
      cc.Director.EVENT_AFTER_DRAW = "director_after_draw";
      cc.Director.PROJECTION_2D = 0;
      cc.Director.PROJECTION_3D = 1;
      cc.Director.PROJECTION_CUSTOM = 3;
      cc.Director.PROJECTION_DEFAULT = cc.Director.PROJECTION_2D;
      cc.Director.EVENT_BEFORE_PHYSICS = "director_before_physics";
      cc.Director.EVENT_AFTER_PHYSICS = "director_after_physics";
      cc.director = new cc.Director();
      d.exports = cc.director;
    }, {
      "./CCGame": 25,
      "./CCScheduler": 29,
      "./component-scheduler": 95,
      "./event-manager": 133,
      "./event/event-target": 134,
      "./node-activator": 161,
      "./platform/CCObject": 168,
      "./renderer": 193
    }],
    25: [function (b, c) {
      "use strict";
  
      var d = b("./utils/text-utils");
      var e = b("./event/event-target");
      var f = b("./CCDebug");
      var g = b("./renderer");
      var i = b("../core/renderer/utils/dynamic-atlas/manager");
      var a = {
        EVENT_HIDE: "game_on_hide",
        EVENT_SHOW: "game_on_show",
        EVENT_RESTART: "game_on_restart",
        EVENT_GAME_INITED: "game_inited",
        EVENT_ENGINE_INITED: "engine_inited",
        EVENT_RENDERER_INITED: "engine_inited",
        RENDER_TYPE_CANVAS: 0,
        RENDER_TYPE_WEBGL: 1,
        RENDER_TYPE_OPENGL: 2,
        _persistRootNodes: {},
        _paused: true,
        _configLoaded: false,
        _isCloning: false,
        _prepared: false,
        _rendererInitialized: false,
        _renderContext: null,
        _intervalId: null,
        _lastTime: null,
        _frameTime: null,
        frame: null,
        container: null,
        canvas: null,
        renderType: -1,
        config: null,
        onStart: null,
        setFrameRate: function (a) {
          this.config.frameRate = a;
          this._setAnimFrame();
          if (!this._paused) {
            if (this._intervalId) {
              window.cancelAnimFrame(this._intervalId);
            }
            this._intervalId = 0;
            this._runMainLoop();
          }
        },
        getFrameRate: function () {
          return this.config.frameRate;
        },
        step: function () {
          cc.director.mainLoop();
        },
        pause: function () {
          if (!this._paused) {
            this._paused = true;
            if (this._intervalId) {
              window.cancelAnimFrame(this._intervalId);
            }
            this._intervalId = 0;
            this.emit(a.EVENT_HIDE, this);
          }
        },
        resume: function () {
          if (this._paused) {
            this._paused = false;
            cc.director._resetDeltaTime();
            this._runMainLoop();
            this.emit(a.EVENT_SHOW, this);
          }
        },
        isPaused: function () {
          return this._paused;
        },
        restart: function () {
          cc.director.once(cc.Director.EVENT_AFTER_DRAW, function () {
            for (var b in a._persistRootNodes) {
              a.removePersistRootNode(a._persistRootNodes[b]);
            }
            cc.director.getScene().destroy();
            cc.Object._deferredDestroy();
            cc.director.reset();
            a.pause();
            cc.assetManager.builtins.init(function (b) {
              if (b) {
                throw b;
              }
              a.onStart();
              a.emit(a.EVENT_RESTART);
            });
          });
        },
        end: function () {
          close();
        },
        _initEngine: function () {
          if (!this._rendererInitialized) {
            this._initRenderer();
            this._initEvents();
            this.emit(this.EVENT_ENGINE_INITED);
          }
        },
        _loadPreviewScript: function (a) {
          a();
        },
        _prepareFinished: function (a) {
          var b = this;
          try {
            this._initEngine();
          } catch (b) {
            if (a) {
              a(b);
            }
            return;
          }
          this._setAnimFrame();
          cc.assetManager.builtins.init(function (c) {
            if (c) {
              if (a) {
                a(c);
              }
            } else {
              b._prepared = true;
              b._runMainLoop();
              b._paused = false;
              b.emit(b.EVENT_GAME_INITED);
              if (a) {
                a();
              }
            }
          });
        },
        eventTargetOn: e.prototype.on,
        eventTargetOnce: e.prototype.once,
        on: function (a, b, c, d) {
          if (this._prepared && a === this.EVENT_ENGINE_INITED || !this._paused && a === this.EVENT_GAME_INITED) {
            b.call(c);
          } else {
            this.eventTargetOn(a, b, c, d);
          }
        },
        once: function (a, b, c) {
          if (this._prepared && a === this.EVENT_ENGINE_INITED || !this._paused && a === this.EVENT_GAME_INITED) {
            b.call(c);
          } else {
            this.eventTargetOnce(a, b, c);
          }
        },
        prepare: function (a) {
          var b = this;
          if (this._prepared) {
            if (a) {
              a();
            }
          } else {
            this._loadPreviewScript(function () {
              b._prepareFinished(a);
            });
          }
        },
        run: function (b, c) {
          this._initConfig(b);
          this.onStart = c;
          this.prepare(a.onStart && a.onStart.bind(a));
        },
        addPersistRootNode: function (a) {
          if (cc.Node.isNode(a) && a.uuid) {
            var b = a.uuid;
            if (!this._persistRootNodes[b]) {
              var c = cc.director._scene;
              if (cc.isValid(c)) {
                if (a.parent) {
                  if (!(a.parent instanceof cc.Scene)) {
                    return;
                  }
                  if (a.parent !== c) {
                    return;
                  }
                } else {
                  a.parent = c;
                }
              }
              this._persistRootNodes[b] = a;
              a._persistNode = true;
              cc.assetManager._releaseManager._addPersistNodeRef(a);
            }
          }
        },
        removePersistRootNode: function (a) {
          var b = a.uuid || "";
          if (a === this._persistRootNodes[b]) {
            delete this._persistRootNodes[b];
            a._persistNode = false;
            cc.assetManager._releaseManager._removePersistNodeRef(a);
          }
        },
        isPersistRootNode: function (a) {
          return a._persistNode;
        },
        _setAnimFrame: function () {
          this._lastTime = performance.now();
          var b = a.config.frameRate;
          this._frameTime = 1000 / b;
          cc.director._maxParticleDeltaTime = this._frameTime / 1000 * 2;
          var c = window.requestAnimationFrame = window.requestAnimationFrame || window.webkitRequestAnimationFrame || window.mozRequestAnimationFrame || window.oRequestAnimationFrame || window.msRequestAnimationFrame;
          if (b !== 60 && b !== 30) {
            window.requestAnimFrame = c ? this._stTimeWithRAF : this._stTime;
            window.cancelAnimFrame = this._ctTime;
          } else {
            window.requestAnimFrame = c || this._stTime;
            window.cancelAnimFrame = window.cancelAnimationFrame || window.cancelRequestAnimationFrame || window.msCancelRequestAnimationFrame || window.mozCancelRequestAnimationFrame || window.oCancelRequestAnimationFrame || window.webkitCancelRequestAnimationFrame || window.msCancelAnimationFrame || window.mozCancelAnimationFrame || window.webkitCancelAnimationFrame || window.oCancelAnimationFrame || this._ctTime;
          }
        },
        _stTimeWithRAF: function (b) {
          var c = performance.now();
          var d = Math.max(0, a._frameTime - (c - a._lastTime));
          var e = window.setTimeout(function () {
            window.requestAnimationFrame(b);
          }, d);
          a._lastTime = c + d;
          return e;
        },
        _stTime: function (b) {
          var c = performance.now();
          var d = Math.max(0, a._frameTime - (c - a._lastTime));
          var e = window.setTimeout(function () {
            b();
          }, d);
          a._lastTime = c + d;
          return e;
        },
        _ctTime: function (a) {
          window.clearTimeout(a);
        },
        _runMainLoop: function () {
          if (this._prepared) {
            var b;
            var c = this;
            var d = c.config;
            var e = cc.director;
            var g = true;
            var h = d.frameRate;
            f.setDisplayStats(d.showFPS);
            b = function (a) {
              if (!c._paused) {
                c._intervalId = window.requestAnimFrame(b);
                if (h === 30 && (g = !g)) {
                  return;
                }
                e.mainLoop(a);
              }
            };
            c._intervalId = window.requestAnimFrame(b);
          }
        },
        _initConfig: function (a) {
          if (typeof a.debugMode != "number") {
            a.debugMode = 0;
          }
          a.exposeClassName = !!a.exposeClassName;
          if (typeof a.frameRate != "number") {
            a.frameRate = 60;
          }
          var b = a.renderMode;
          if (typeof b != "number" || b > 2 || b < 0) {
            a.renderMode = 0;
          }
          if (typeof a.registerSystemEvent != "boolean") {
            a.registerSystemEvent = true;
          }
          a.showFPS = b !== 1 && !!a.showFPS;
          this.collisionMatrix = a.collisionMatrix || [];
          this.groupList = a.groupList || [];
          f._resetDebugSetting(a.debugMode);
          this.config = a;
          this._configLoaded = true;
        },
        _determineRenderType: function () {
          var a = this.config;
          var b = parseInt(a.renderMode) || 0;
          this.renderType = this.RENDER_TYPE_CANVAS;
          var c = false;
          if (b === 0) {
            if (cc.sys.capabilities.opengl) {
              this.renderType = this.RENDER_TYPE_WEBGL;
              c = true;
            } else if (cc.sys.capabilities.canvas) {
              this.renderType = this.RENDER_TYPE_CANVAS;
              c = true;
            }
          } else if (b === 1 && cc.sys.capabilities.canvas) {
            this.renderType = this.RENDER_TYPE_CANVAS;
            c = true;
          } else if (b === 2 && cc.sys.capabilities.opengl) {
            this.renderType = this.RENDER_TYPE_WEBGL;
            c = true;
          }
          if (!c) {
            throw Error(f.getError(3820, b));
          }
        },
        _initRenderer: function () {
          if (!this._rendererInitialized) {
            var a;
            var b;
            var f;
            var j;
            var k = this.config;
            var m = k.id;
            var c = m instanceof HTMLElement ? m : document.querySelector(m) || document.querySelector("#" + m);
            if (c.tagName === "CANVAS") {
              a = c.width;
              b = c.height;
              this.canvas = f = c;
              this.container = j = document.createElement("DIV");
              if (f.parentNode) {
                f.parentNode.insertBefore(j, f);
              }
            } else {
              c.tagName;
              a = c.clientWidth;
              b = c.clientHeight;
              this.canvas = f = document.createElement("CANVAS");
              this.container = j = document.createElement("DIV");
              c.appendChild(j);
            }
            j.setAttribute("id", "Cocos2dGameContainer");
            j.appendChild(f);
            this.frame = j.parentNode === document.body ? document.documentElement : j.parentNode;
            (function (a) {
              if (!((" " + a.className + " ").indexOf(" gameCanvas ") > -1)) {
                if (a.className) {
                  a.className += " ";
                }
                a.className += "gameCanvas";
              }
            })(f);
            f.setAttribute("width", a || 480);
            f.setAttribute("height", b || 320);
            f.setAttribute("tabindex", 99);
            this._determineRenderType();
            if (this.renderType === this.RENDER_TYPE_WEBGL) {
              var l = {
                stencil: true,
                antialias: cc.macro.ENABLE_WEBGL_ANTIALIAS,
                alpha: cc.macro.ENABLE_TRANSPARENT_CANVAS
              };
              g.initWebGL(f, l);
              this._renderContext = g.device._gl;
              if (!cc.macro.CLEANUP_IMAGE_CACHE && i) {
                i.enabled = true;
              }
            }
            if (!this._renderContext) {
              this.renderType = this.RENDER_TYPE_CANVAS;
              g.initCanvas(f);
              this._renderContext = g.device._ctx;
            }
            this.canvas.oncontextmenu = function () {
              if (!cc._isContextMenuEnable) {
                return false;
              }
            };
            d.setRegexLang(k.localeHint);
            this._rendererInitialized = true;
          }
        },
        _initEvents: function () {
          var b;
          var d = window;
          var e = this;
          if (this.config.registerSystemEvent) {
            cc.internal.inputManager.registerSystemEvent(this.canvas);
          }
          if (document.hidden !== undefined) {
            b = "hidden";
          } else if (document.mozHidden !== undefined) {
            b = "mozHidden";
          } else if (document.msHidden !== undefined) {
            b = "msHidden";
          } else if (document.webkitHidden !== undefined) {
            b = "webkitHidden";
          }
          var f = false;
          function g() {
            if (!(f || e._paused)) {
              f = true;
              e.pause();
            }
          }
          function h() {
            if (f) {
              f = false;
              e.resume();
            }
          }
          if (b) {
            for (var i = ["visibilitychange", "mozvisibilitychange", "msvisibilitychange", "webkitvisibilitychange", "qbrowserVisibilityChange"], a = function (a) {
                var c = document[b];
                if (c = c || a.hidden) {
                  g();
                } else {
                  h();
                }
              }, j = 0; j < i.length; j++) {
              document.addEventListener(i[j], a);
            }
          } else {
            d.addEventListener("blur", g);
            d.addEventListener("focus", h);
          }
          if (navigator.userAgent.indexOf("MicroMessenger") > -1) {
            d.onfocus = h;
          }
          if ("onpageshow" in window && "onpagehide" in window) {
            d.addEventListener("pagehide", g);
            d.addEventListener("pageshow", h);
            document.addEventListener("pagehide", g);
            document.addEventListener("pageshow", h);
          }
        }
      };
      e.call(a);
      cc.js.addon(a, e.prototype);
      cc.game = c.exports = a;
    }, {
      "../core/renderer/utils/dynamic-atlas/manager": 196,
      "./CCDebug": 23,
      "./event/event-target": 134,
      "./renderer": 193,
      "./utils/text-utils": 243
    }],
    26: [function (aa, t) {
      "use strict";
  
      var ba = aa("./value-types");
      var ca = aa("./value-types/utils");
      var e = aa("./utils/base-node");
      var i = aa("./utils/prefab-helper");
      var n = aa("./utils/trans-pool").NodeMemPool;
      var a = aa("./utils/affine-transform");
      var da = aa("./event-manager");
      var c = aa("./platform/CCMacro");
      var l = aa("./platform/js");
      aa("./event/event");
      var h = aa("./event/event-target");
      var o = aa("./renderer/render-flow");
      var f = cc.Object.Flags.Destroying;
      var ea = Math.PI / 180;
      var d = !!cc.ActionManager;
      function p() {}
      var r = new ba.Vec3();
      var g = new ba.Quat();
      var m = new ba.Vec3();
      var s = new ba.Vec3();
      var u = new ba.Quat();
      var v = new ba.Quat();
      var y = new ba.Vec3();
      var x = new ba.Vec3();
      var A = new ba.Vec3();
      var b = new ba.Vec3();
      var C = new ba.Vec3();
      var E = new ba.Quat();
      var M = new ba.Quat();
      var w = new ba.Vec3();
      var I = new ba.Quat();
      var O = new ba.Vec3();
      var L = new ba.Quat();
      var P = new ba.Vec3();
      var D = new ba.Vec3();
      var N = new ba.Quat();
      var F = new ba.Quat();
      new ba.Quat();
      var B = cc.mat4();
      var R = new ba.Vec3();
      var k = new l.Pool();
      k.get = function () {
        return this._get() || [];
      };
      var S = cc.Enum({
        DEBUG: 31
      });
      var z = cc.Enum({
        POSITION: 1,
        SCALE: 2,
        ROTATION: 4,
        SKEW: 8,
        TRS: 7,
        RS: 6,
        TRSS: 15,
        PHYSICS_POSITION: 16,
        PHYSICS_SCALE: 32,
        PHYSICS_ROTATION: 64,
        PHYSICS_TRS: 112,
        PHYSICS_RS: 96,
        ALL_POSITION: 17,
        ALL_SCALE: 34,
        ALL_ROTATION: 68,
        ALL_TRS: 119,
        ALL: 65535
      });
      var G = cc.Enum({
        TOUCH_START: "touchstart",
        TOUCH_MOVE: "touchmove",
        TOUCH_END: "touchend",
        TOUCH_CANCEL: "touchcancel",
        MOUSE_DOWN: "mousedown",
        MOUSE_MOVE: "mousemove",
        MOUSE_ENTER: "mouseenter",
        MOUSE_LEAVE: "mouseleave",
        MOUSE_UP: "mouseup",
        MOUSE_WHEEL: "mousewheel",
        POSITION_CHANGED: "position-changed",
        ROTATION_CHANGED: "rotation-changed",
        SCALE_CHANGED: "scale-changed",
        SIZE_CHANGED: "size-changed",
        ANCHOR_CHANGED: "anchor-changed",
        COLOR_CHANGED: "color-changed",
        CHILD_ADDED: "child-added",
        CHILD_REMOVED: "child-removed",
        CHILD_REORDER: "child-reorder",
        GROUP_CHANGED: "group-changed",
        SIBLING_ORDER_CHANGED: "sibling-order-changed"
      });
      var H = [G.TOUCH_START, G.TOUCH_MOVE, G.TOUCH_END, G.TOUCH_CANCEL];
      var T = [G.MOUSE_DOWN, G.MOUSE_ENTER, G.MOUSE_MOVE, G.MOUSE_LEAVE, G.MOUSE_UP, G.MOUSE_WHEEL];
      var U = null;
      function V(a, b) {
        var c = a.getLocation();
        var d = this.owner;
        return !!d._hitTest(c, this) && (b.type = G.TOUCH_START, b.touch = a, b.bubbles = true, d.dispatchEvent(b), true);
      }
      function j(a, b) {
        var c = this.owner;
        b.type = G.TOUCH_MOVE;
        b.touch = a;
        b.bubbles = true;
        c.dispatchEvent(b);
      }
      function q(a, b) {
        var c = a.getLocation();
        var d = this.owner;
        if (d._hitTest(c, this)) {
          b.type = G.TOUCH_END;
        } else {
          b.type = G.TOUCH_CANCEL;
        }
        b.touch = a;
        b.bubbles = true;
        d.dispatchEvent(b);
      }
      function W(a, b) {
        a.getLocation();
        var c = this.owner;
        b.type = G.TOUCH_CANCEL;
        b.touch = a;
        b.bubbles = true;
        c.dispatchEvent(b);
      }
      function K(a) {
        var b = a.getLocation();
        var c = this.owner;
        if (c._hitTest(b, this)) {
          a.type = G.MOUSE_DOWN;
          a.bubbles = true;
          c.dispatchEvent(a);
        }
      }
      function Q(a) {
        var b = a.getLocation();
        var c = this.owner;
        if (c._hitTest(b, this)) {
          if (!this._previousIn) {
            if (U && U._mouseListener) {
              a.type = G.MOUSE_LEAVE;
              U.dispatchEvent(a);
              U._mouseListener._previousIn = false;
            }
            U = this.owner;
            a.type = G.MOUSE_ENTER;
            c.dispatchEvent(a);
            this._previousIn = true;
          }
          a.type = G.MOUSE_MOVE;
          a.bubbles = true;
          c.dispatchEvent(a);
        } else {
          if (!this._previousIn) {
            return;
          }
          a.type = G.MOUSE_LEAVE;
          c.dispatchEvent(a);
          this._previousIn = false;
          U = null;
        }
        a.stopPropagation();
      }
      function J(a) {
        var b = a.getLocation();
        var c = this.owner;
        if (c._hitTest(b, this)) {
          a.type = G.MOUSE_UP;
          a.bubbles = true;
          c.dispatchEvent(a);
          a.stopPropagation();
        }
      }
      function X(a) {
        var b = a.getLocation();
        var c = this.owner;
        if (c._hitTest(b, this)) {
          a.type = G.MOUSE_WHEEL;
          a.bubbles = true;
          c.dispatchEvent(a);
          a.stopPropagation();
        }
      }
      function Z(a, b) {
        if (b) {
          for (var c = 0, d = null, e = a; e && cc.Node.isNode(e); e = e._parent, ++c) {
            if (e.getComponent(b)) {
              var f = {
                index: c,
                node: e
              };
              if (d) {
                d.push(f);
              } else {
                d = [f];
              }
            }
          }
          return d;
        }
        return null;
      }
      function $(a, b) {
        if (!(a._objFlags & f)) {
          if (a._bubblingListeners) {
            for (var c = 0, d = b.length; c < d; ++c) {
              if (a._bubblingListeners.hasEventListener(b[c])) {
                return true;
              }
            }
          }
          if (a._capturingListeners) {
            for (var e = 0, g = b.length; e < g; ++e) {
              if (a._capturingListeners.hasEventListener(b[e])) {
                return true;
              }
            }
          }
          return false;
        }
        return true;
      }
      function _(a, b, c) {
        var d;
        var e;
        b.target = a;
        c.length = 0;
        a._getCapturingTargets(b.type, c);
        b.eventPhase = 1;
        e = c.length - 1;
        for (; e >= 0; --e) {
          if ((d = c[e])._capturingListeners && (b.currentTarget = d, d._capturingListeners.emit(b.type, b, c), b._propagationStopped)) {
            c.length = 0;
            return;
          }
        }
        c.length = 0;
        b.eventPhase = 2;
        b.currentTarget = a;
        if (a._capturingListeners) {
          a._capturingListeners.emit(b.type, b);
        }
        if (!b._propagationImmediateStopped && a._bubblingListeners) {
          a._bubblingListeners.emit(b.type, b);
        }
        if (!b._propagationStopped && b.bubbles) {
          a._getBubblingTargets(b.type, c);
          b.eventPhase = 3;
          e = 0;
          a._getBubblingTargets(b.type, c);
          b.eventPhase = 3;
          e = 0;
          for (; e < c.length; ++e) {
            if ((d = c[e])._bubblingListeners && (b.currentTarget = d, d._bubblingListeners.emit(b.type, b), b._propagationStopped)) {
              c.length = 0;
              return;
            }
          }
        }
        c.length = 0;
      }
      function fa(a) {
        var b = a.groupIndex;
        if (b === 0 && a.parent) {
          b = fa(a.parent);
        }
        return b;
      }
      function ga(a) {
        var b = fa(a);
        a._cullingMask = 1 << b;
        for (var c = 0; c < a._children.length; c++) {
          ga(a._children[c]);
        }
      }
      function ha() {
        if (this._localMatDirty & z.TRSS) {
          var b = this._matrix;
          var d = b.m;
          ba.Trs.toMat4(b, this._trs);
          if (this._skewX || this._skewY) {
            var e = d[0];
            var f = d[1];
            var g = d[4];
            var h = d[5];
            var a = Math.tan(this._skewX * ea);
            var i = Math.tan(this._skewY * ea);
            if (a === Infinity) {
              a = 99999999;
            }
            if (i === Infinity) {
              i = 99999999;
            }
            d[0] = e + g * i;
            d[1] = f + h * i;
            d[4] = g + e * a;
            d[5] = h + f * a;
          }
          this._localMatDirty &= ~z.TRSS;
          this._worldMatDirty = true;
        }
      }
      function ia() {
        var b = this._localMatDirty;
        if (b & z.TRSS) {
          var j = this._matrix.m;
          var e = this._trs;
          if (b & (z.RS | z.SKEW)) {
            var i = -this._eulerAngles.z;
            var k = this._skewX || this._skewY;
            var n = e[7];
            var q = e[8];
            if (i || k) {
              var a = 1;
              var r = 0;
              var s = 0;
              var t = 1;
              if (i) {
                var w = i * ea;
                s = Math.sin(w);
                a = t = Math.cos(w);
                r = -s;
              }
              j[0] = a *= n;
              j[1] = r *= n;
              j[4] = s *= q;
              j[5] = t *= q;
              if (k) {
                var u = j[0];
                var f = j[1];
                var d = j[4];
                var p = j[5];
                var v = Math.tan(this._skewX * ea);
                var x = Math.tan(this._skewY * ea);
                if (v === Infinity) {
                  v = 99999999;
                }
                if (x === Infinity) {
                  x = 99999999;
                }
                j[0] = u + d * x;
                j[1] = f + p * x;
                j[4] = d + u * v;
                j[5] = p + f * v;
              }
            } else {
              j[0] = n;
              j[1] = 0;
              j[4] = 0;
              j[5] = q;
            }
          }
          j[12] = e[0];
          j[13] = e[1];
          this._localMatDirty &= ~z.TRSS;
          this._worldMatDirty = true;
        }
      }
      function ja() {
        if (this._localMatDirty & z.TRSS) {
          this._updateLocalMatrix();
        }
        if (this._parent) {
          var a = this._parent._worldMatrix;
          ba.Mat4.mul(this._worldMatrix, a, this._matrix);
        } else {
          ba.Mat4.copy(this._worldMatrix, this._matrix);
        }
        this._worldMatDirty = false;
      }
      function ka() {
        if (this._localMatDirty & z.TRSS) {
          this._updateLocalMatrix();
        }
        var a = this._parent;
        if (a) {
          this._mulMat(this._worldMatrix, a._worldMatrix, this._matrix);
        } else {
          ba.Mat4.copy(this._worldMatrix, this._matrix);
        }
        this._worldMatDirty = false;
      }
      function la(b, j, e) {
        var i = j.m;
        var k = e.m;
        var m = b.m;
        var n = i[0];
        var a = i[1];
        var o = i[4];
        var c = i[5];
        var l = i[12];
        var h = i[13];
        var q = k[0];
        var f = k[1];
        var d = k[4];
        var r = k[5];
        var p = k[12];
        var s = k[13];
        if (a !== 0 || o !== 0) {
          m[0] = q * n + f * o;
          m[1] = q * a + f * c;
          m[4] = d * n + r * o;
          m[5] = d * a + r * c;
          m[12] = n * p + o * s + l;
          m[13] = a * p + c * s + h;
        } else {
          m[0] = q * n;
          m[1] = f * c;
          m[4] = d * n;
          m[5] = r * c;
          m[12] = n * p + l;
          m[13] = c * s + h;
        }
      }
      var ma = ba.Mat4.mul;
      var na = {
        name: "cc.Node",
        extends: e,
        properties: {
          _opacity: 255,
          _color: cc.Color.WHITE,
          _contentSize: cc.Size,
          _anchorPoint: cc.v2(0.5, 0.5),
          _position: undefined,
          _scale: undefined,
          _trs: null,
          _eulerAngles: cc.Vec3,
          _skewX: 0,
          _skewY: 0,
          _zIndex: {
            default: undefined,
            type: cc.Integer
          },
          _localZOrder: {
            default: 0,
            serializable: false
          },
          _is3DNode: false,
          _groupIndex: {
            default: 0,
            formerlySerializedAs: "groupIndex"
          },
          groupIndex: {
            get: function () {
              return this._groupIndex;
            },
            set: function (a) {
              this._groupIndex = a;
              ga(this);
              this.emit(G.GROUP_CHANGED, this);
            }
          },
          group: {
            get: function () {
              return cc.game.groupList[this.groupIndex] || "";
            },
            set: function (a) {
              this.groupIndex = cc.game.groupList.indexOf(a);
            }
          },
          x: {
            get: function () {
              return this._trs[0];
            },
            set: function (a) {
              var b = this._trs;
              if (a !== b[0]) {
                b[0] = a;
                this.setLocalDirty(z.ALL_POSITION);
                if (this._eventMask & 1) {
                  this.emit(G.POSITION_CHANGED);
                }
              }
            }
          },
          y: {
            get: function () {
              return this._trs[1];
            },
            set: function (a) {
              var b = this._trs;
              if (a !== b[1]) {
                b[1] = a;
                this.setLocalDirty(z.ALL_POSITION);
                if (this._eventMask & 1) {
                  this.emit(G.POSITION_CHANGED);
                }
              }
            }
          },
          z: {
            get: function () {
              return this._trs[2];
            },
            set: function (a) {
              var b = this._trs;
              if (a !== b[2]) {
                b[2] = a;
                this.setLocalDirty(z.ALL_POSITION);
                this._renderFlag |= o.FLAG_WORLD_TRANSFORM;
                if (this._eventMask & 1) {
                  this.emit(G.POSITION_CHANGED);
                }
              }
            }
          },
          rotation: {
            get: function () {
              return -this.angle;
            },
            set: function (a) {
              this.angle = -a;
            }
          },
          angle: {
            get: function () {
              return this._eulerAngles.z;
            },
            set: function (a) {
              ba.Vec3.set(this._eulerAngles, 0, 0, a);
              ba.Trs.fromAngleZ(this._trs, a);
              this.setLocalDirty(z.ALL_ROTATION);
              if (this._eventMask & 4) {
                this.emit(G.ROTATION_CHANGED);
              }
            }
          },
          rotationX: {
            get: function () {
              return this._eulerAngles.x;
            },
            set: function (a) {
              if (this._eulerAngles.x !== a) {
                this._eulerAngles.x = a;
                if (this._eulerAngles.x === this._eulerAngles.y) {
                  ba.Trs.fromAngleZ(this._trs, -a);
                } else {
                  ba.Trs.fromEulerNumber(this._trs, a, this._eulerAngles.y, 0);
                }
                this.setLocalDirty(z.ALL_ROTATION);
                if (this._eventMask & 4) {
                  this.emit(G.ROTATION_CHANGED);
                }
              }
            }
          },
          rotationY: {
            get: function () {
              return this._eulerAngles.y;
            },
            set: function (a) {
              if (this._eulerAngles.y !== a) {
                this._eulerAngles.y = a;
                if (this._eulerAngles.x === this._eulerAngles.y) {
                  ba.Trs.fromAngleZ(this._trs, -a);
                } else {
                  ba.Trs.fromEulerNumber(this._trs, this._eulerAngles.x, a, 0);
                }
                this.setLocalDirty(z.ALL_ROTATION);
                if (this._eventMask & 4) {
                  this.emit(G.ROTATION_CHANGED);
                }
              }
            }
          },
          eulerAngles: {
            get: function () {
              return ba.Trs.toEuler(this._eulerAngles, this._trs);
            },
            set: function (a) {
              ba.Trs.fromEuler(this._trs, a);
              this.setLocalDirty(z.ALL_ROTATION);
              this._renderFlag |= o.FLAG_TRANSFORM;
              if (this._eventMask & 4) {
                this.emit(G.ROTATION_CHANGED);
              }
            }
          },
          quat: {
            get: function () {
              var a = this._trs;
              return new ba.Quat(a[3], a[4], a[5], a[6]);
            },
            set: function (a) {
              this.setRotation(a);
            }
          },
          scale: {
            get: function () {
              return this._trs[7];
            },
            set: function (a) {
              this.setScale(a);
            }
          },
          scaleX: {
            get: function () {
              return this._trs[7];
            },
            set: function (a) {
              if (this._trs[7] !== a) {
                this._trs[7] = a;
                this.setLocalDirty(z.ALL_SCALE);
                if (this._eventMask & 2) {
                  this.emit(G.SCALE_CHANGED);
                }
              }
            }
          },
          scaleY: {
            get: function () {
              return this._trs[8];
            },
            set: function (a) {
              if (this._trs[8] !== a) {
                this._trs[8] = a;
                this.setLocalDirty(z.ALL_SCALE);
                if (this._eventMask & 2) {
                  this.emit(G.SCALE_CHANGED);
                }
              }
            }
          },
          scaleZ: {
            get: function () {
              return this._trs[9];
            },
            set: function (a) {
              if (this._trs[9] !== a) {
                this._trs[9] = a;
                this.setLocalDirty(z.ALL_SCALE);
                this._renderFlag |= o.FLAG_TRANSFORM;
                if (this._eventMask & 2) {
                  this.emit(G.SCALE_CHANGED);
                }
              }
            }
          },
          skewX: {
            get: function () {
              return this._skewX;
            },
            set: function (a) {
              this._skewX = a;
              this.setLocalDirty(z.SKEW);
            }
          },
          skewY: {
            get: function () {
              return this._skewY;
            },
            set: function (a) {
              this._skewY = a;
              this.setLocalDirty(z.SKEW);
            }
          },
          opacity: {
            get: function () {
              return this._opacity;
            },
            set: function (a) {
              if (this._opacity !== a) {
                this._opacity = a;
                this._renderFlag |= o.FLAG_OPACITY_COLOR;
              }
            },
            range: [0, 255]
          },
          color: {
            get: function () {
              return this._color.clone();
            },
            set: function (a) {
              if (!this._color.equals(a)) {
                this._color.set(a);
                this._renderFlag |= o.FLAG_COLOR;
                if (this._eventMask & 32) {
                  this.emit(G.COLOR_CHANGED, a);
                }
              }
            }
          },
          anchorX: {
            get: function () {
              return this._anchorPoint.x;
            },
            set: function (a) {
              var b = this._anchorPoint;
              if (b.x !== a) {
                b.x = a;
                if (this._eventMask & 16) {
                  this.emit(G.ANCHOR_CHANGED);
                }
              }
            }
          },
          anchorY: {
            get: function () {
              return this._anchorPoint.y;
            },
            set: function (a) {
              var b = this._anchorPoint;
              if (b.y !== a) {
                b.y = a;
                if (this._eventMask & 16) {
                  this.emit(G.ANCHOR_CHANGED);
                }
              }
            }
          },
          width: {
            get: function () {
              return this._contentSize.width;
            },
            set: function (a) {
              if (a !== this._contentSize.width) {
                this._contentSize.width = a;
                if (this._eventMask & 8) {
                  this.emit(G.SIZE_CHANGED);
                }
              }
            }
          },
          height: {
            get: function () {
              return this._contentSize.height;
            },
            set: function (a) {
              if (a !== this._contentSize.height) {
                this._contentSize.height = a;
                if (this._eventMask & 8) {
                  this.emit(G.SIZE_CHANGED);
                }
              }
            }
          },
          zIndex: {
            get: function () {
              return this._localZOrder >> 16;
            },
            set: function (a) {
              if (a > c.MAX_ZINDEX) {
                a = c.MAX_ZINDEX;
              } else if (a < c.MIN_ZINDEX) {
                a = c.MIN_ZINDEX;
              }
              if (this.zIndex !== a) {
                this._localZOrder = this._localZOrder & 65535 | a << 16;
                this.emit(G.SIBLING_ORDER_CHANGED);
                this._onSiblingIndexChanged();
              }
            }
          },
          swallowTouches: {
            get: function () {
              return this._swallowTouches;
            },
            set: function (a) {
              this._swallowTouches = a;
              if (this._touchListener) {
                this._touchListener.setSwallowTouches(a);
              }
            }
          },
          is3DNode: {
            get: function () {
              return this._is3DNode;
            },
            set: function (a) {
              if (this._is3DNode !== a) {
                this._is3DNode = a;
                this._update3DFunction();
              }
            }
          },
          up: {
            get: function () {
              return ba.Vec3.transformQuat(O, ba.Vec3.UP, this.getWorldRotation(L)).clone();
            }
          },
          right: {
            get: function () {
              return ba.Vec3.transformQuat(O, ba.Vec3.RIGHT, this.getWorldRotation(L)).clone();
            }
          },
          forward: {
            get: function () {
              return ba.Vec3.transformQuat(O, ba.Vec3.FORWARD, this.getWorldRotation(L)).clone();
            }
          }
        },
        ctor: function () {
          this._reorderChildDirty = false;
          this._widget = null;
          this._renderComponent = null;
          this._capturingListeners = null;
          this._bubblingListeners = null;
          this._touchListener = null;
          this._mouseListener = null;
          this._initDataFromPool();
          this._eventMask = 0;
          this._cullingMask = 1;
          this._childArrivalOrder = 1;
          this._swallowTouches = true;
          this._renderFlag = o.FLAG_TRANSFORM | o.FLAG_OPACITY_COLOR;
        },
        statics: {
          EventType: G,
          _LocalDirtyFlag: z,
          isNode: function (a) {
            return a instanceof oa && (a.constructor === oa || !(a instanceof cc.Scene));
          },
          BuiltinGroupIndex: S
        },
        _onSiblingIndexChanged: function () {
          if (this._parent) {
            this._parent._delaySort();
          }
        },
        _onPreDestroy: function () {
          this._onPreDestroyBase();
          if (d) {
            cc.director.getActionManager().removeAllActionsFromTarget(this);
          }
          if (U === this) {
            U = null;
          }
          if (this._bubblingListeners) {
            this._bubblingListeners.clear();
          }
          if (this._capturingListeners) {
            this._capturingListeners.clear();
          }
          if (this._touchListener || this._mouseListener) {
            da.removeListeners(this);
            if (this._touchListener) {
              this._touchListener.owner = null;
              this._touchListener.mask = null;
              this._touchListener = null;
            }
            if (this._mouseListener) {
              this._mouseListener.owner = null;
              this._mouseListener.mask = null;
              this._mouseListener = null;
            }
          }
          this._backDataIntoPool();
          if (this._reorderChildDirty) {
            cc.director.__fastOff(cc.Director.EVENT_AFTER_UPDATE, this.sortAllChildren, this);
          }
        },
        _onPostActivated: function (a) {
          var b = d ? cc.director.getActionManager() : null;
          if (a) {
            this._renderFlag |= o.FLAG_WORLD_TRANSFORM;
            if (b) {
              b.resumeTarget(this);
            }
            da.resumeTarget(this);
            this._checkListenerMask();
          } else {
            if (b) {
              b.pauseTarget(this);
            }
            da.pauseTarget(this);
          }
        },
        _onHierarchyChanged: function (a) {
          this._updateOrderOfArrival();
          ga(this);
          if (this._parent) {
            this._parent._delaySort();
          }
          this._renderFlag |= o.FLAG_WORLD_TRANSFORM | o.FLAG_OPACITY_COLOR;
          this._onHierarchyChangedBase(a);
          if (cc._widgetManager) {
            cc._widgetManager._nodesOrderDirty = true;
          }
          if (a && this._activeInHierarchy) {
            this._checkListenerMask();
          }
        },
        _update3DFunction: function () {
          if (this._is3DNode) {
            this._updateLocalMatrix = ha;
            this._calculWorldMatrix = ja;
            this._mulMat = ma;
          } else {
            this._updateLocalMatrix = ia;
            this._calculWorldMatrix = ka;
            this._mulMat = la;
          }
          if (this._renderComponent && this._renderComponent._on3DNodeChanged) {
            this._renderComponent._on3DNodeChanged();
          }
          this._renderFlag |= o.FLAG_TRANSFORM;
          this._localMatDirty = z.ALL;
        },
        _initDataFromPool: function () {
          if (!this._spaceInfo) {
            this._spaceInfo = n.pop();
          }
          var a = this._spaceInfo;
          this._matrix = cc.mat4(a.localMat);
          ba.Mat4.identity(this._matrix);
          this._worldMatrix = cc.mat4(a.worldMat);
          ba.Mat4.identity(this._worldMatrix);
          this._localMatDirty = z.ALL;
          this._worldMatDirty = true;
          var b = this._trs = a.trs;
          b[0] = 0;
          b[1] = 0;
          b[2] = 0;
          b[3] = 0;
          b[4] = 0;
          b[5] = 0;
          b[6] = 1;
          b[7] = 1;
          b[8] = 1;
          b[9] = 1;
        },
        _backDataIntoPool: function () {
          n.push(this._spaceInfo);
          this._matrix = null;
          this._worldMatrix = null;
          this._trs = null;
          this._spaceInfo = null;
        },
        _toEuler: function () {
          if (this.is3DNode) {
            ba.Trs.toEuler(this._eulerAngles, this._trs);
          } else {
            var a = Math.asin(this._trs[5]) / ea * 2;
            ba.Vec3.set(this._eulerAngles, 0, 0, a);
          }
        },
        _fromEuler: function () {
          if (this.is3DNode) {
            ba.Trs.fromEuler(this._trs, this._eulerAngles);
          } else {
            ba.Trs.fromAngleZ(this._trs, this._eulerAngles.z);
          }
        },
        _initProperties: function () {
          if (this._is3DNode) {
            this._update3DFunction();
          }
          var a = this._trs;
          if (a) {
            var b = a;
            a = this._trs = this._spaceInfo.trs;
            if (b.length === 11) {
              a.set(b.subarray(1));
            } else {
              a.set(b);
            }
          } else {
            a = this._trs = this._spaceInfo.trs;
          }
          this._fromEuler();
        },
        _onBatchCreated: function (b) {
          this._initProperties();
          this._cullingMask = 1 << fa(this);
          if (!this._activeInHierarchy) {
            if (d) {
              cc.director.getActionManager().pauseTarget(this);
            }
            da.pauseTarget(this);
          }
          for (var c = this._children, e = 0, f = c.length; e < f; e++) {
            var g = c[e];
            if (!b) {
              var h = g._prefab;
              if (h && h.sync && h.root === g) {
                i.syncWithPrefab(g);
              }
              g._updateOrderOfArrival();
            }
            g._onBatchCreated(b);
          }
          if (c.length > 0) {
            this._renderFlag |= o.FLAG_CHILDREN;
          }
        },
        _checkListenerMask: function () {
          if (this._touchListener) {
            var a = this._touchListener.mask = Z(this, cc.Mask);
            if (this._mouseListener) {
              this._mouseListener.mask = a;
            }
          } else if (this._mouseListener) {
            this._mouseListener.mask = Z(this, cc.Mask);
          }
        },
        _checknSetupSysEvent: function (a) {
          var b = false;
          var c = false;
          if (H.indexOf(a) !== -1) {
            if (!this._touchListener) {
              this._touchListener = cc.EventListener.create({
                event: cc.EventListener.TOUCH_ONE_BY_ONE,
                swallowTouches: this._swallowTouches,
                owner: this,
                mask: Z(this, cc.Mask),
                onTouchBegan: V,
                onTouchMoved: j,
                onTouchEnded: q,
                onTouchCancelled: W
              });
              da.addListener(this._touchListener, this);
              b = true;
            }
            c = true;
          } else if (T.indexOf(a) !== -1) {
            if (!this._mouseListener) {
              this._mouseListener = cc.EventListener.create({
                event: cc.EventListener.MOUSE,
                _previousIn: false,
                owner: this,
                mask: Z(this, cc.Mask),
                onMouseDown: K,
                onMouseMove: Q,
                onMouseUp: J,
                onMouseScroll: X
              });
              da.addListener(this._mouseListener, this);
              b = true;
            }
            c = true;
          }
          if (b && !this._activeInHierarchy) {
            cc.director.getScheduler().schedule(function () {
              if (!this._activeInHierarchy) {
                da.pauseTarget(this);
              }
            }, this, 0, 0, 0, false);
          }
          return c;
        },
        on: function (a, b, c, d) {
          return this._realon(a, b, c, d, false);
        },
        _realon: function (a, b, c, d, e) {
          if (typeof c == "boolean") {
            d = c;
            c = undefined;
          } else {
            d = !!d;
          }
          if (b) {
            if (this._checknSetupSysEvent(a)) {
              return this._onDispatch(a, b, c, d, e);
            }
            switch (a) {
              case G.POSITION_CHANGED:
                this._eventMask |= 1;
                break;
              case G.SCALE_CHANGED:
                this._eventMask |= 2;
                break;
              case G.ROTATION_CHANGED:
                this._eventMask |= 4;
                break;
              case G.SIZE_CHANGED:
                this._eventMask |= 8;
                break;
              case G.ANCHOR_CHANGED:
                this._eventMask |= 16;
                break;
              case G.COLOR_CHANGED:
                this._eventMask |= 32;
            }
            return this._onDispatch(a, b, c, false, e);
          }
        },
        once: function (a, b, c, d) {
          this._realon(a, b, c, d, true);
        },
        _onDispatch: function (a, b, c, d, e) {
          var f = null;
          if (!(f = d ? this._capturingListeners = this._capturingListeners || new h() : this._bubblingListeners = this._bubblingListeners || new h()).hasEventListener(a, b, c)) {
            f.on(a, b, c, e);
            if (c && c.__eventTargets) {
              c.__eventTargets.push(this);
            }
          }
          return b;
        },
        off: function (a, b, c, d) {
          if (typeof c == "boolean") {
            d = c;
            c = undefined;
          } else {
            d = !!d;
          }
          var e = H.indexOf(a) !== -1;
          var f = !e && T.indexOf(a) !== -1;
          if (e || f) {
            this._offDispatch(a, b, c, d);
            if (e) {
              if (this._touchListener && !$(this, H)) {
                da.removeListener(this._touchListener);
                this._touchListener = null;
              }
            } else if (f && this._mouseListener && !$(this, T)) {
              da.removeListener(this._mouseListener);
              this._mouseListener = null;
            }
          } else if (this._bubblingListeners && (this._offDispatch(a, b, c, false), !this._bubblingListeners.hasEventListener(a))) {
            switch (a) {
              case G.POSITION_CHANGED:
                this._eventMask &= -2;
                break;
              case G.SCALE_CHANGED:
                this._eventMask &= -3;
                break;
              case G.ROTATION_CHANGED:
                this._eventMask &= -5;
                break;
              case G.SIZE_CHANGED:
                this._eventMask &= -9;
                break;
              case G.ANCHOR_CHANGED:
                this._eventMask &= -17;
                break;
              case G.COLOR_CHANGED:
                this._eventMask &= -33;
            }
          }
        },
        _offDispatch: function (a, b, c, d) {
          if (b) {
            var e = d ? this._capturingListeners : this._bubblingListeners;
            if (e && e.off(a, b, c) && c && c.__eventTargets) {
              l.array.fastRemove(c.__eventTargets, this);
            }
          } else {
            if (this._capturingListeners) {
              this._capturingListeners.removeAll(a);
            }
            if (this._bubblingListeners) {
              this._bubblingListeners.removeAll(a);
            }
          }
        },
        targetOff: function (a) {
          var b = this._bubblingListeners;
          if (b) {
            b.targetOff(a);
            if (this._eventMask & 1 && !b.hasEventListener(G.POSITION_CHANGED)) {
              this._eventMask &= -2;
            }
            if (this._eventMask & 2 && !b.hasEventListener(G.SCALE_CHANGED)) {
              this._eventMask &= -3;
            }
            if (this._eventMask & 4 && !b.hasEventListener(G.ROTATION_CHANGED)) {
              this._eventMask &= -5;
            }
            if (this._eventMask & 8 && !b.hasEventListener(G.SIZE_CHANGED)) {
              this._eventMask &= -9;
            }
            if (this._eventMask & 16 && !b.hasEventListener(G.ANCHOR_CHANGED)) {
              this._eventMask &= -17;
            }
            if (this._eventMask & 32 && !b.hasEventListener(G.COLOR_CHANGED)) {
              this._eventMask &= -33;
            }
          }
          if (this._capturingListeners) {
            this._capturingListeners.targetOff(a);
          }
          if (a && a.__eventTargets) {
            l.array.fastRemoveAll(a.__eventTargets, this);
          }
          if (this._touchListener && !$(this, H)) {
            da.removeListener(this._touchListener);
            this._touchListener = null;
          }
          if (this._mouseListener && !$(this, T)) {
            da.removeListener(this._mouseListener);
            this._mouseListener = null;
          }
        },
        hasEventListener: function (a) {
          var b = false;
          if (this._bubblingListeners) {
            b = this._bubblingListeners.hasEventListener(a);
          }
          if (!b && this._capturingListeners) {
            b = this._capturingListeners.hasEventListener(a);
          }
          return b;
        },
        emit: function (a, b, c, d, e, f) {
          if (this._bubblingListeners) {
            this._bubblingListeners.emit(a, b, c, d, e, f);
          }
        },
        dispatchEvent: function (a) {
          var b = k.get();
          _(this, a, b);
          k.put(b);
        },
        pauseSystemEvents: function (a) {
          da.pauseTarget(this, a);
        },
        resumeSystemEvents: function (a) {
          da.resumeTarget(this, a);
        },
        _hitTest: function (b, g) {
          var e = this._contentSize.width;
          var i = this._contentSize.height;
          var j = P;
          var k = D;
          var a = cc.Camera.findCamera(this);
          if (a) {
            a.getScreenToWorldPoint(b, j);
          } else {
            j.set(b);
          }
          this._updateWorldMatrix();
          if (!ba.Mat4.invert(B, this._worldMatrix)) {
            return false;
          }
          ba.Vec2.transformMat4(k, j, B);
          k.x += this._anchorPoint.x * e;
          k.y += this._anchorPoint.y * i;
          var m = false;
          if (k.x >= 0 && k.y >= 0 && k.x <= e && k.y <= i && (m = true, g && g.mask)) {
            for (var n = g.mask, l = this, o = n ? n.length : 0, q = 0, r = 0; l && r < o; ++q, l = l.parent) {
              var s = n[r];
              if (q === s.index) {
                if (l !== s.node) {
                  n.length = r;
                  break;
                }
                var t = l.getComponent(cc.Mask);
                if (t && t._enabled && !t._hitTest(j)) {
                  m = false;
                  break;
                }
                r++;
              } else if (q > s.index) {
                n.length = r;
                break;
              }
            }
          }
          return m;
        },
        _getCapturingTargets: function (a, b) {
          for (var c = this.parent; c;) {
            if (c._capturingListeners && c._capturingListeners.hasEventListener(a)) {
              b.push(c);
            }
            c = c.parent;
          }
        },
        _getBubblingTargets: function (a, b) {
          for (var c = this.parent; c;) {
            if (c._bubblingListeners && c._bubblingListeners.hasEventListener(a)) {
              b.push(c);
            }
            c = c.parent;
          }
        },
        runAction: d ? function (a) {
          if (this.active) {
            var b = cc.director.getActionManager();
            if (!b._suppressDeprecation) {
              b._suppressDeprecation = true;
            }
            b.addAction(a, this, false);
            return a;
          }
        } : p,
        pauseAllActions: d ? function () {
          cc.director.getActionManager().pauseTarget(this);
        } : p,
        resumeAllActions: d ? function () {
          cc.director.getActionManager().resumeTarget(this);
        } : p,
        stopAllActions: d ? function () {
          cc.director.getActionManager().removeAllActionsFromTarget(this);
        } : p,
        stopAction: d ? function (a) {
          cc.director.getActionManager().removeAction(a);
        } : p,
        stopActionByTag: d ? function (a) {
          if (a !== cc.Action.TAG_INVALID) {
            cc.director.getActionManager().removeActionByTag(a, this);
          }
        } : p,
        getActionByTag: d ? function (a) {
          if (a === cc.Action.TAG_INVALID) {
            return null;
          } else {
            return cc.director.getActionManager().getActionByTag(a, this);
          }
        } : function () {
          return null;
        },
        getNumberOfRunningActions: d ? function () {
          return cc.director.getActionManager().getNumberOfRunningActionsInTarget(this);
        } : function () {
          return 0;
        },
        getPosition: function (a) {
          a = a || new ba.Vec3();
          return ba.Trs.toPosition(a, this._trs);
        },
        setPosition: function (a, b, c) {
          var d;
          if (b === undefined) {
            d = a.x;
            b = a.y;
            c = a.z;
          } else {
            d = a;
          }
          var f = this._trs;
          if (c === undefined) {
            c = f[2];
          }
          if (f[0] !== d || f[1] !== b || f[2] !== c) {
            f[0] = d;
            f[1] = b;
            f[2] = c;
            this.setLocalDirty(z.ALL_POSITION);
            this._renderFlag |= o.FLAG_WORLD_TRANSFORM;
            if (this._eventMask & 1) {
              this.emit(G.POSITION_CHANGED);
            }
          }
        },
        getScale: function (a) {
          if (a !== undefined) {
            return ba.Trs.toScale(a, this._trs);
          } else {
            return this._trs[7];
          }
        },
        setScale: function (a, b, c) {
          var d;
          if (a && typeof a != "number") {
            d = a.x;
            b = a.y;
            c = a.z;
          } else if (a !== undefined && b === undefined) {
            d = a;
            b = a;
            c = a;
          } else {
            d = a;
          }
          var f = this._trs;
          if (c === undefined) {
            c = f[9];
          }
          if (!(f[7] === d && f[8] === b && f[9] === c)) {
            f[7] = d;
            f[8] = b;
            f[9] = c;
            this.setLocalDirty(z.ALL_SCALE);
            this._renderFlag |= o.FLAG_TRANSFORM;
            if (this._eventMask & 2) {
              this.emit(G.SCALE_CHANGED);
            }
          }
        },
        getRotation: function (a) {
          if (a instanceof ba.Quat) {
            return ba.Trs.toRotation(a, this._trs);
          } else {
            return -this.angle;
          }
        },
        setRotation: function (a, b, c, d) {
          if (typeof a == "number" && b === undefined) {
            this.angle = -a;
          } else {
            var f = a;
            if (b === undefined) {
              f = a.x;
              b = a.y;
              c = a.z;
              d = a.w;
            }
            var g = this._trs;
            if (!(g[3] === f && g[4] === b && g[5] === c && g[6] === d)) {
              g[3] = f;
              g[4] = b;
              g[5] = c;
              g[6] = d;
              this.setLocalDirty(z.ALL_ROTATION);
              if (this._eventMask & 4) {
                this.emit(G.ROTATION_CHANGED);
              }
            }
          }
        },
        getContentSize: function () {
          return cc.size(this._contentSize.width, this._contentSize.height);
        },
        setContentSize: function (a, b) {
          var c = this._contentSize;
          if (b === undefined) {
            if ((0, ca.approx)(a.width, c.width) && (0, ca.approx)(a.height, c.height)) {
              return;
            }
            c.width = a.width;
            c.height = a.height;
          } else {
            if ((0, ca.approx)(a, c.width) && (0, ca.approx)(b, c.height)) {
              return;
            }
            c.width = a;
            c.height = b;
          }
          if (this._eventMask & 8) {
            this.emit(G.SIZE_CHANGED);
          }
        },
        getAnchorPoint: function () {
          return cc.v2(this._anchorPoint);
        },
        setAnchorPoint: function (a, b) {
          var c = this._anchorPoint;
          if (b === undefined) {
            if (a.x === c.x && a.y === c.y) {
              return;
            }
            c.x = a.x;
            c.y = a.y;
          } else {
            if (a === c.x && b === c.y) {
              return;
            }
            c.x = a;
            c.y = b;
          }
          this.setLocalDirty(z.ALL_POSITION);
          if (this._eventMask & 16) {
            this.emit(G.ANCHOR_CHANGED);
          }
        },
        _invTransformPoint: function (a, b) {
          if (this._parent) {
            this._parent._invTransformPoint(a, b);
          } else {
            ba.Vec3.copy(a, b);
          }
          var c = this._trs;
          ba.Trs.toPosition(m, c);
          ba.Vec3.sub(a, a, m);
          ba.Trs.toRotation(u, c);
          ba.Quat.conjugate(v, u);
          ba.Vec3.transformQuat(a, a, v);
          ba.Trs.toScale(m, c);
          ba.Vec3.inverseSafe(s, m);
          ba.Vec3.mul(a, a, s);
          return a;
        },
        getWorldPosition: function (a) {
          ba.Trs.toPosition(a, this._trs);
          for (var b, c = this._parent; c;) {
            b = c._trs;
            ba.Trs.toScale(r, b);
            ba.Vec3.mul(a, a, r);
            ba.Trs.toRotation(g, b);
            ba.Vec3.transformQuat(a, a, g);
            ba.Trs.toPosition(r, b);
            ba.Vec3.add(a, a, r);
            c = c._parent;
          }
          return a;
        },
        setWorldPosition: function (a) {
          var b = this._trs;
          if (this._parent) {
            this._parent._invTransformPoint(y, a);
          } else {
            ba.Vec3.copy(y, a);
          }
          ba.Trs.fromPosition(b, y);
          this.setLocalDirty(z.ALL_POSITION);
          if (this._eventMask & 1) {
            this.emit(G.POSITION_CHANGED);
          }
        },
        getWorldRotation: function (a) {
          ba.Trs.toRotation(N, this._trs);
          ba.Quat.copy(a, N);
          for (var b = this._parent; b;) {
            ba.Trs.toRotation(N, b._trs);
            ba.Quat.mul(a, N, a);
            b = b._parent;
          }
          return a;
        },
        setWorldRotation: function (a) {
          if (this._parent) {
            this._parent.getWorldRotation(F);
            ba.Quat.conjugate(F, F);
            ba.Quat.mul(F, F, a);
          } else {
            ba.Quat.copy(F, a);
          }
          ba.Trs.fromRotation(this._trs, F);
          this.setLocalDirty(z.ALL_ROTATION);
        },
        getWorldScale: function (a) {
          ba.Trs.toScale(x, this._trs);
          ba.Vec3.copy(a, x);
          for (var b = this._parent; b;) {
            ba.Trs.toScale(x, b._trs);
            ba.Vec3.mul(a, a, x);
            b = b._parent;
          }
          return a;
        },
        setWorldScale: function (a) {
          if (this._parent) {
            this._parent.getWorldScale(A);
            ba.Vec3.div(A, a, A);
          } else {
            ba.Vec3.copy(A, a);
          }
          ba.Trs.fromScale(this._trs, A);
          this.setLocalDirty(z.ALL_SCALE);
        },
        getWorldRT: function (a) {
          var c = b;
          var d = E;
          var e = this._trs;
          ba.Trs.toPosition(c, e);
          ba.Trs.toRotation(d, e);
          for (var f = this._parent; f;) {
            e = f._trs;
            ba.Trs.toScale(C, e);
            ba.Vec3.mul(c, c, C);
            ba.Trs.toRotation(M, e);
            ba.Vec3.transformQuat(c, c, M);
            ba.Trs.toPosition(C, e);
            ba.Vec3.add(c, c, C);
            ba.Quat.mul(d, M, d);
            f = f._parent;
          }
          ba.Mat4.fromRT(a, d, c);
          return a;
        },
        lookAt: function (a, b) {
          this.getWorldPosition(w);
          ba.Vec3.sub(w, w, a);
          ba.Vec3.normalize(w, w);
          ba.Quat.fromViewUp(I, w, b);
          this.setWorldRotation(I);
        },
        _updateLocalMatrix: ia,
        _calculWorldMatrix: function () {
          if (this._localMatDirty & z.TRSS) {
            this._updateLocalMatrix();
          }
          var a = this._parent;
          if (a) {
            this._mulMat(this._worldMatrix, a._worldMatrix, this._matrix);
          } else {
            ba.Mat4.copy(this._worldMatrix, this._matrix);
          }
          this._worldMatDirty = false;
        },
        _mulMat: la,
        _updateWorldMatrix: function () {
          if (this._parent) {
            this._parent._updateWorldMatrix();
          }
          if (this._worldMatDirty) {
            this._calculWorldMatrix();
            for (var a = this._children, b = 0, c = a.length; b < c; b++) {
              a[b]._worldMatDirty = true;
            }
          }
        },
        setLocalDirty: function (a) {
          this._localMatDirty |= a;
          this._worldMatDirty = true;
          if (a === z.ALL_POSITION || a === z.POSITION) {
            this._renderFlag |= o.FLAG_WORLD_TRANSFORM;
          } else {
            this._renderFlag |= o.FLAG_TRANSFORM;
          }
        },
        setWorldDirty: function () {
          this._worldMatDirty = true;
        },
        getLocalMatrix: function (a) {
          this._updateLocalMatrix();
          return ba.Mat4.copy(a, this._matrix);
        },
        getWorldMatrix: function (a) {
          this._updateWorldMatrix();
          return ba.Mat4.copy(a, this._worldMatrix);
        },
        convertToNodeSpaceAR: function (a, b) {
          this._updateWorldMatrix();
          ba.Mat4.invert(B, this._worldMatrix);
          if (a instanceof cc.Vec2) {
            b = b || new cc.Vec2();
            return ba.Vec2.transformMat4(b, a, B);
          } else {
            b = b || new cc.Vec3();
            return ba.Vec3.transformMat4(b, a, B);
          }
        },
        convertToWorldSpaceAR: function (a, b) {
          this._updateWorldMatrix();
          if (a instanceof cc.Vec2) {
            b = b || new cc.Vec2();
            return ba.Vec2.transformMat4(b, a, this._worldMatrix);
          } else {
            b = b || new cc.Vec3();
            return ba.Vec3.transformMat4(b, a, this._worldMatrix);
          }
        },
        convertToNodeSpace: function (a) {
          this._updateWorldMatrix();
          ba.Mat4.invert(B, this._worldMatrix);
          var b = new cc.Vec2();
          ba.Vec2.transformMat4(b, a, B);
          b.x += this._anchorPoint.x * this._contentSize.width;
          b.y += this._anchorPoint.y * this._contentSize.height;
          return b;
        },
        convertToWorldSpace: function (a) {
          this._updateWorldMatrix();
          var b = new cc.Vec2(a.x - this._anchorPoint.x * this._contentSize.width, a.y - this._anchorPoint.y * this._contentSize.height);
          return ba.Vec2.transformMat4(b, b, this._worldMatrix);
        },
        getNodeToParentTransform: function (b) {
          if (!b) {
            b = a.identity();
          }
          this._updateLocalMatrix();
          var c = this._contentSize;
          R.x = -this._anchorPoint.x * c.width;
          R.y = -this._anchorPoint.y * c.height;
          ba.Mat4.copy(B, this._matrix);
          ba.Mat4.transform(B, B, R);
          return a.fromMat4(b, B);
        },
        getNodeToParentTransformAR: function (b) {
          if (!b) {
            b = a.identity();
          }
          this._updateLocalMatrix();
          return a.fromMat4(b, this._matrix);
        },
        getNodeToWorldTransform: function (b) {
          if (!b) {
            b = a.identity();
          }
          this._updateWorldMatrix();
          var c = this._contentSize;
          R.x = -this._anchorPoint.x * c.width;
          R.y = -this._anchorPoint.y * c.height;
          ba.Mat4.copy(B, this._worldMatrix);
          ba.Mat4.transform(B, B, R);
          return a.fromMat4(b, B);
        },
        getNodeToWorldTransformAR: function (b) {
          if (!b) {
            b = a.identity();
          }
          this._updateWorldMatrix();
          return a.fromMat4(b, this._worldMatrix);
        },
        getParentToNodeTransform: function (b) {
          if (!b) {
            b = a.identity();
          }
          this._updateLocalMatrix();
          ba.Mat4.invert(B, this._matrix);
          return a.fromMat4(b, B);
        },
        getWorldToNodeTransform: function (b) {
          if (!b) {
            b = a.identity();
          }
          this._updateWorldMatrix();
          ba.Mat4.invert(B, this._worldMatrix);
          return a.fromMat4(b, B);
        },
        convertTouchToNodeSpace: function (a) {
          return this.convertToNodeSpace(a.getLocation());
        },
        convertTouchToNodeSpaceAR: function (a) {
          return this.convertToNodeSpaceAR(a.getLocation());
        },
        getBoundingBox: function () {
          this._updateLocalMatrix();
          var a = this._contentSize.width;
          var b = this._contentSize.height;
          var c = cc.rect(-this._anchorPoint.x * a, -this._anchorPoint.y * b, a, b);
          return c.transformMat4(c, this._matrix);
        },
        getBoundingBoxToWorld: function () {
          if (this._parent) {
            this._parent._updateWorldMatrix();
            return this._getBoundingBoxTo();
          } else {
            return this.getBoundingBox();
          }
        },
        _getBoundingBoxTo: function () {
          var b = this._contentSize.width;
          var c = this._contentSize.height;
          var d = cc.rect(-this._anchorPoint.x * b, -this._anchorPoint.y * c, b, c);
          this._calculWorldMatrix();
          d.transformMat4(d, this._worldMatrix);
          if (!this._children) {
            return d;
          }
          for (var e = this._children, f = 0; f < e.length; f++) {
            var g = e[f];
            if (g && g.active) {
              var h = g._getBoundingBoxTo();
              if (h) {
                d.union(d, h);
              }
            }
          }
          return d;
        },
        _updateOrderOfArrival: function () {
          var a = this._parent ? ++this._parent._childArrivalOrder : 0;
          this._localZOrder = this._localZOrder & 4294901760 | a;
          this.emit(G.SIBLING_ORDER_CHANGED);
        },
        setSelfGroupIndex: function (a) {
          this._groupIndex = a || 0;
          this._cullingMask = 1 << a;
        },
        addChild: function (a, b, c) {
          a.parent = this;
          if (b !== undefined) {
            a.zIndex = b;
          }
          if (c !== undefined) {
            a.name = c;
          }
        },
        cleanup: function () {
          if (d) {
            cc.director.getActionManager().removeAllActionsFromTarget(this);
          }
          da.removeListeners(this);
          var a;
          var b;
          var c = this._children.length;
          for (a = 0; a < c; ++a) {
            if (b = this._children[a]) {
              b.cleanup();
            }
          }
        },
        sortAllChildren: function () {
          if (this._reorderChildDirty) {
            this._reorderChildDirty = false;
            var b = this._children;
            this._childArrivalOrder = 1;
            for (var c = 0, d = b.length; c < d; c++) {
              b[c]._updateOrderOfArrival();
            }
            da._setDirtyForNode(this);
            if (b.length > 1) {
              for (var f, g, h = 1, i = b.length; h < i; h++) {
                f = b[h];
                for (var a = h; a > 0 && (g = b[a - 1])._localZOrder > f._localZOrder; a--) {
                  b[a] = g;
                }
                b[a] = f;
              }
              this.emit(G.CHILD_REORDER, this);
            }
            cc.director.__fastOff(cc.Director.EVENT_AFTER_UPDATE, this.sortAllChildren, this);
          }
        },
        _delaySort: function () {
          if (!this._reorderChildDirty) {
            this._reorderChildDirty = true;
            cc.director.__fastOn(cc.Director.EVENT_AFTER_UPDATE, this.sortAllChildren, this);
          }
        },
        _restoreProperties: false,
        onRestore: false
      };
      var oa = cc.Class(na);
      var pa = oa.prototype;
      l.getset(pa, "position", pa.getPosition, pa.setPosition, false, true);
      cc.Node = t.exports = oa;
    }, {
      "./event-manager": 133,
      "./event/event": 135,
      "./event/event-target": 134,
      "./platform/CCMacro": 167,
      "./platform/js": 183,
      "./renderer/render-flow": 194,
      "./utils/affine-transform": 227,
      "./utils/base-node": 228,
      "./utils/prefab-helper": 239,
      "./utils/trans-pool": 245,
      "./value-types": 251,
      "./value-types/utils": 258
    }],
    27: [function (b, c) {
      "use strict";
  
      var d = b("./CCNode");
      var e = b("./renderer/render-flow");
      cc.Object.Flags.HideInHierarchy;
      var f = d._LocalDirtyFlag;
      var g = cc.Class({
        name: "cc.PrivateNode",
        extends: d,
        properties: {
          x: {
            get: function () {
              return this._originPos.x;
            },
            set: function (a) {
              var b = this._originPos;
              if (a !== b.x) {
                b.x = a;
                this._posDirty(true);
              }
            },
            override: true
          },
          y: {
            get: function () {
              return this._originPos.y;
            },
            set: function (a) {
              var b = this._originPos;
              if (a !== b.y) {
                b.y = a;
                this._posDirty(true);
              }
            },
            override: true
          },
          zIndex: {
            get: function () {
              return cc.macro.MIN_ZINDEX;
            },
            set: function () {},
            override: true
          },
          showInEditor: {
            default: false,
            editorOnly: true,
            override: true
          }
        },
        ctor: function () {
          this._localZOrder = cc.macro.MIN_ZINDEX << 16;
          this._originPos = cc.v2();
        },
        _posDirty: function (a) {
          this.setLocalDirty(f.POSITION);
          this._renderFlag |= e.FLAG_TRANSFORM;
          if (a === true && this._eventMask & 1) {
            this.emit(d.EventType.POSITION_CHANGED);
          }
        },
        _updateLocalMatrix: function () {
          if (this._localMatDirty) {
            var a = this.parent;
            if (a) {
              this._trs[0] = this._originPos.x - (a._anchorPoint.x - 0.5) * a._contentSize.width;
              this._trs[1] = this._originPos.y - (a._anchorPoint.y - 0.5) * a._contentSize.height;
            }
            this._super();
          }
        },
        getPosition: function () {
          return new cc.Vec2(this._originPos);
        },
        setPosition: function (a, b) {
          if (b === undefined) {
            b = (a = a.x).y;
          }
          var c = this._originPos;
          if (!(c.x === a && c.y === b)) {
            c.x = a;
            c.y = b;
            this._posDirty(true);
          }
        },
        setParent: function (a) {
          var b = this._parent;
          this._super(a);
          if (b !== a) {
            if (b) {
              b.off(d.EventType.ANCHOR_CHANGED, this._posDirty, this);
            }
            if (a) {
              a.on(d.EventType.ANCHOR_CHANGED, this._posDirty, this);
            }
          }
        },
        _updateOrderOfArrival: function () {}
      });
      var h = g.prototype;
      cc.js.getset(h, "parent", h.getParent, h.setParent);
      cc.js.getset(h, "position", h.getPosition, h.setPosition);
      cc.PrivateNode = c.exports = g;
    }, {
      "./CCNode": 26,
      "./renderer/render-flow": 194
    }],
    28: [function (a, b) {
      "use strict";
  
      cc.Scene = cc.Class({
        name: "cc.Scene",
        extends: a("./CCNode"),
        properties: {
          _is3DNode: {
            default: true,
            override: true
          },
          autoReleaseAssets: false
        },
        ctor: function () {
          this._anchorPoint.x = 0;
          this._anchorPoint.y = 0;
          this._activeInHierarchy = false;
          this._inited = !cc.game._isCloning;
          this.dependAssets = null;
        },
        destroy: function () {
          if (cc.Object.prototype.destroy.call(this)) {
            for (var a = this._children, b = 0; b < a.length; ++b) {
              a[b].active = false;
            }
          }
          this._active = false;
          this._activeInHierarchy = false;
        },
        _onHierarchyChanged: function () {},
        _instantiate: null,
        _load: function () {
          if (!this._inited) {
            this._onBatchCreated(false);
            this._inited = true;
          }
        },
        _activate: function (a) {
          a = a !== false;
          cc.director._nodeActivator.activateNode(this, a);
        }
      });
      b.exports = cc.Scene;
    }, {
      "./CCNode": 26
    }],
    29: [function (b, g) {
      "use strict";
  
      var e = b("./platform/js");
      var i = new (b("./platform/id-generater"))("Scheduler");
      function j(a, b, c, d) {
        this.target = a;
        this.priority = b;
        this.paused = c;
        this.markedForDeletion = d;
      }
      var k = [];
      j.get = function (b, c, d, e) {
        var f = k.pop();
        if (f) {
          f.target = b;
          f.priority = c;
          f.paused = d;
          f.markedForDeletion = e;
        } else {
          f = new j(b, c, d, e);
        }
        return f;
      };
      j.put = function (a) {
        if (k.length < 20) {
          a.target = null;
          k.push(a);
        }
      };
      function m(a, b, c, d) {
        this.list = a;
        this.entry = b;
        this.target = c;
        this.callback = d;
      }
      var a = [];
      m.get = function (b, c, d, e) {
        var f = a.pop();
        if (f) {
          f.list = b;
          f.entry = c;
          f.target = d;
          f.callback = e;
        } else {
          f = new m(b, c, d, e);
        }
        return f;
      };
      m.put = function (b) {
        if (a.length < 20) {
          b.list = b.entry = b.target = b.callback = null;
          a.push(b);
        }
      };
      function o(a, b, c, d) {
        this.timers = a;
        this.target = b;
        this.timerIndex = c;
        this.paused = d;
      }
      var c = [];
      function p() {
        this._lock = false;
        this._scheduler = null;
        this._elapsed = -1;
        this._runForever = false;
        this._useDelay = false;
        this._timesExecuted = 0;
        this._repeat = 0;
        this._delay = 0;
        this._interval = 0;
        this._target = null;
        this._callback = null;
      }
      o.get = function (a, b, d, e) {
        var f = c.pop();
        if (f) {
          f.timers = a;
          f.target = b;
          f.timerIndex = d;
          f.paused = e;
        } else {
          f = new o(a, b, d, e);
        }
        return f;
      };
      o.put = function (a) {
        if (c.length < 20) {
          a.timers = a.target = null;
          c.push(a);
        }
      };
      var h = p.prototype;
      h.initWithCallback = function (a, b, c, d, e, f) {
        this._lock = false;
        this._scheduler = a;
        this._target = c;
        this._callback = b;
        this._elapsed = -1;
        this._interval = d;
        this._delay = f;
        this._useDelay = this._delay > 0;
        this._repeat = e;
        this._runForever = this._repeat === cc.macro.REPEAT_FOREVER;
        return true;
      };
      h.getInterval = function () {
        return this._interval;
      };
      h.setInterval = function (a) {
        this._interval = a;
      };
      h.update = function (a) {
        if (this._elapsed === -1) {
          this._elapsed = 0;
          this._timesExecuted = 0;
        } else {
          this._elapsed += a;
          if (this._runForever && !this._useDelay) {
            if (this._elapsed >= this._interval) {
              this.trigger();
              this._elapsed = 0;
            }
          } else {
            if (this._useDelay) {
              if (this._elapsed >= this._delay) {
                this.trigger();
                this._elapsed -= this._delay;
                this._timesExecuted += 1;
                this._useDelay = false;
              }
            } else if (this._elapsed >= this._interval) {
              this.trigger();
              this._elapsed = 0;
              this._timesExecuted += 1;
            }
            if (this._callback && !this._runForever && this._timesExecuted > this._repeat) {
              this.cancel();
            }
          }
        }
      };
      h.getCallback = function () {
        return this._callback;
      };
      h.trigger = function () {
        if (this._target && this._callback) {
          this._lock = true;
          this._callback.call(this._target, this._elapsed);
          this._lock = false;
        }
      };
      h.cancel = function () {
        this._scheduler.unschedule(this._callback, this._target);
      };
      var l = [];
      function f() {}
      function d(a) {
        var b = a._id;
        if (!b) {
          if (a.__instanceId) {
            b = a._id = a.__instanceId;
          }
        }
        return b;
      }
      p.get = function () {
        return l.pop() || new p();
      };
      p.put = function (a) {
        if (l.length < 20 && !a._lock) {
          a._scheduler = a._target = a._callback = null;
          l.push(a);
        }
      };
      cc.Scheduler = function () {
        this._timeScale = 1;
        this._updatesNegList = [];
        this._updates0List = [];
        this._updatesPosList = [];
        this._hashForUpdates = e.createMap(true);
        this._hashForTimers = e.createMap(true);
        this._currentTarget = null;
        this._currentTargetSalvaged = false;
        this._updateHashLocked = false;
        this._arrayForTimers = [];
      };
      cc.Scheduler.prototype = {
        constructor: cc.Scheduler,
        _removeHashElement: function (a) {
          delete this._hashForTimers[a.target._id];
          for (var b = this._arrayForTimers, c = 0, d = b.length; c < d; c++) {
            if (b[c] === a) {
              b.splice(c, 1);
              break;
            }
          }
          o.put(a);
        },
        _removeUpdateFromHash: function (a) {
          var b = a.target._id;
          var d = this._hashForUpdates[b];
          if (d) {
            for (var e = d.list, f = d.entry, g = 0, h = e.length; g < h; g++) {
              if (e[g] === f) {
                e.splice(g, 1);
                break;
              }
            }
            delete this._hashForUpdates[b];
            j.put(f);
            m.put(d);
          }
        },
        _priorityIn: function (a, b, c) {
          for (var d = 0, e = a.length; d < e; d++) {
            if (c < a[d].priority) {
              a.splice(d, 0, b);
              return;
            }
          }
          a.push(b);
        },
        _appendIn: function (a, b) {
          a.push(b);
        },
        enableForTarget: function (a) {
          if (!(a._id || a.__instanceId)) {
            a._id = i.getNewId();
          }
        },
        setTimeScale: function (a) {
          this._timeScale = a;
        },
        getTimeScale: function () {
          return this._timeScale;
        },
        update: function (b) {
          var c;
          var d;
          var f;
          var g;
          this._updateHashLocked = true;
          if (this._timeScale !== 1) {
            b *= this._timeScale;
          }
          d = this._updatesNegList;
          for (; d != null;) {
            c = 0;
            f = d.length;
            for (; c < f; c++) {
              if (!((g = d[c]).paused || g.markedForDeletion)) {
                g.target.update(b);
              }
            }
            d = d === this._updatesNegList ? this._updates0List : d === this._updates0List ? this._updatesPosList : null;
          }
          var h;
          var j = this._arrayForTimers;
          for (c = 0; c < j.length; c++) {
            h = j[c];
            this._currentTarget = h;
            this._currentTargetSalvaged = false;
            if (!h.paused) {
              for (h.timerIndex = 0; h.timerIndex < h.timers.length; ++h.timerIndex) {
                h.timers[h.timerIndex].update(b);
              }
            }
            if (this._currentTargetSalvaged && this._currentTarget.timers.length === 0) {
              this._removeHashElement(this._currentTarget);
              --c;
            }
          }
          for (d = this._updatesNegList; d != null;) {
            for (c = 0; c < d.length;) {
              if ((g = d[c]).markedForDeletion) {
                this._removeUpdateFromHash(g);
              } else {
                c++;
              }
            }
            d = d === this._updatesNegList ? this._updates0List : d === this._updates0List ? this._updatesPosList : null;
          }
          this._updateHashLocked = false;
          this._currentTarget = null;
        },
        schedule: function (b, c, g, h, i, j) {
          if (typeof b != "function") {
            var k = b;
            b = c;
            c = k;
          }
          if (!(arguments.length !== 4 && arguments.length !== 5)) {
            j = !!h;
            h = cc.macro.REPEAT_FOREVER;
            i = 0;
          }
          var a;
          var m;
          var q = d(c);
          var u = this._hashForTimers[q];
          if (u) {
            u.paused;
          } else {
            u = o.get(null, c, 0, j);
            this._arrayForTimers.push(u);
            this._hashForTimers[q] = u;
          }
          if (u.timers == null) {
            u.timers = [];
          } else {
            for (m = 0; m < u.timers.length; ++m) {
              if ((a = u.timers[m]) && b === a._callback) {
                a._interval = g;
                return;
              }
            }
          }
          (a = p.get()).initWithCallback(this, b, c, g, h, i);
          u.timers.push(a);
          if (this._currentTarget === u && this._currentTargetSalvaged) {
            this._currentTargetSalvaged = false;
          }
        },
        scheduleUpdate: function (a, b, e) {
          var f = d(a);
          var g = this._hashForUpdates[f];
          if (g && g.entry) {
            if (g.entry.priority === b) {
              g.entry.markedForDeletion = false;
              g.entry.paused = e;
              return;
            }
            if (this._updateHashLocked) {
              g.entry.markedForDeletion = false;
              g.entry.paused = e;
              return;
            }
            this.unscheduleUpdate(a);
          }
          var h;
          var i = j.get(a, b, e, false);
          if (b === 0) {
            h = this._updates0List;
            this._appendIn(h, i);
          } else {
            h = b < 0 ? this._updatesNegList : this._updatesPosList;
            this._priorityIn(h, i, b);
          }
          this._hashForUpdates[f] = m.get(h, i, a, null);
        },
        unschedule: function (b, g) {
          if (arguments.length === 1 && typeof b != "function") {
            g = b;
            b = f;
          }
          if (g && b) {
            var h = d(g);
            var i = this;
            var j = i._hashForTimers[h];
            if (j) {
              for (var k = j.timers, l = 0, m = k.length; l < m; l++) {
                var n = k[l];
                if ((b === f || b === n._callback) && (p.put(n), b !== f)) {
                  k.splice(l, 1);
                  if (j.timerIndex >= l) {
                    j.timerIndex--;
                  }
                  break;
                }
              }
              if (b === f) {
                k.length = 0;
              }
              if (k.length === 0) {
                if (i._currentTarget === j) {
                  i._currentTargetSalvaged = true;
                } else {
                  i._removeHashElement(j);
                }
              }
            }
          }
        },
        unscheduleUpdate: function (a) {
          if (a) {
            var b = d(a);
            var c = this._hashForUpdates[b];
            if (c) {
              if (this._updateHashLocked) {
                c.entry.markedForDeletion = true;
              } else {
                this._removeUpdateFromHash(c.entry);
              }
            }
          }
        },
        unscheduleAllForTarget: function (a) {
          if (a) {
            this.unschedule(a);
            this.unscheduleUpdate(a);
          }
        },
        unscheduleAll: function () {
          var a;
          var b;
          var c = this._arrayForTimers;
          for (a = c.length - 1; a >= 0; a--) {
            b = c[a];
            this.unschedule(b.target);
          }
          this.unscheduleAllWithMinPriority(cc.Scheduler.PRIORITY_SYSTEM);
        },
        unscheduleAllWithMinPriority: function (a) {
          var b;
          var c;
          var d;
          var f = 0;
          for (c = a < 0 ? this._updatesNegList : a === 0 ? this._updates0List : this._updatesPosList; c != null;) {
            for (d = 0; d < c.length;) {
              f = c.length;
              if ((b = c[d]) && b.priority >= a) {
                this.unscheduleUpdate(b.target);
              }
              if (f === c.length) {
                d++;
              }
            }
            c = c === this._updatesNegList ? this._updates0List : c === this._updates0List ? this._updatesPosList : null;
          }
        },
        isScheduled: function (a, b) {
          var c = d(b);
          var e = this._hashForTimers[c];
          if (!e) {
            return false;
          }
          if (e.timers == null) {
            return false;
          }
          for (var f = e.timers, g = 0; g < f.length; ++g) {
            if (a === f[g]._callback) {
              return true;
            }
          }
          return false;
        },
        pauseAllTargets: function () {
          this._setPausedForAllTimers(true);
          this._setPausedForAllTargetsWithMinPriority(cc.Scheduler.PRIORITY_SYSTEM, true);
        },
        pauseAllTargetsWithMinPriority: function (a) {
          this._setPausedForAllTargetsWithMinPriority(a, true);
        },
        resumeAllTargets: function () {
          this._setPausedForAllTimers(false);
          this._setPausedForAllTargetsWithMinPriority(cc.Scheduler.PRIORITY_SYSTEM, false);
        },
        resumeAllTargetsWithMinPriority: function (a) {
          this._setPausedForAllTargetsWithMinPriority(a, false);
        },
        _setPausedForAllTimers: function (a) {
          var b;
          var c;
          var d;
          var f = this._arrayForTimers;
          c = 0;
          d = f.length;
          for (; c < d; c++) {
            if (b = f[c]) {
              b.paused = a;
            }
          }
        },
        _setPausedForAllTargetsWithMinPriority: function (a, b) {
          var c;
          var d;
          var e;
          for (e = a < 0 ? this._updatesNegList : a === 0 ? this._updates0List : this._updatesPosList; e != null;) {
            for (d = 0; d < e.length; d++) {
              if ((c = e[d]) && c.priority >= a) {
                c.paused = b;
              }
            }
            e = e === this._updatesNegList ? this._updates0List : e === this._updates0List ? this._updatesPosList : null;
          }
        },
        pauseTarget: function (a) {
          var b = d(a);
          var c = this._hashForTimers[b];
          if (c) {
            c.paused = true;
          }
          var e = this._hashForUpdates[b];
          if (e) {
            e.entry.paused = true;
          }
        },
        resumeTarget: function (a) {
          var b = d(a);
          var c = this._hashForTimers[b];
          if (c) {
            c.paused = false;
          }
          var e = this._hashForUpdates[b];
          if (e) {
            e.entry.paused = false;
          }
        },
        isTargetPaused: function (a) {
          var b = d(a);
          var c = this._hashForTimers[b];
          if (c) {
            return c.paused;
          }
          var e = this._hashForUpdates[b];
          return !!e && e.entry.paused;
        }
      };
      cc.Scheduler.PRIORITY_SYSTEM = 1 << 31;
      cc.Scheduler.PRIORITY_NON_SYSTEM = cc.Scheduler.PRIORITY_SYSTEM + 1;
      g.exports = cc.Scheduler;
    }, {
      "./platform/id-generater": 179,
      "./platform/js": 183
    }],
    30: [function (j, k) {
      "use strict";
  
      var e = j("./preprocess");
      var i = j("./fetch");
      var n = j("./cache");
      var q = j("./helper");
      var r = j("./releaseManager");
      var a = j("./depend-util");
      var o = j("./load");
      var c = j("./pipeline");
      var l = j("./task");
      var h = j("./request-item");
      var s = j("./downloader");
      var f = j("./parser");
      var d = j("./pack-manager");
      var t = j("./bundle");
      var p = j("./builtins");
      var u = j("./factory");
      var g = j("./urlTransformer");
      var m = g.parse;
      var v = g.combine;
      var y = j("./utilities");
      var z = y.parseParameters;
      var A = y.asyncify;
      var x = y.parseLoadResArgs;
      var B = j("./shared");
      var b = B.assets;
      var C = B.files;
      var E = B.parsed;
      var F = B.pipeline;
      var w = B.transformPipeline;
      var G = B.fetchPipeline;
      var H = B.RequestType;
      var I = B.bundles;
      var J = B.BuiltinBundleName;
      function D() {
        this._preprocessPipe = e;
        this._fetchPipe = i;
        this._loadPipe = o;
        this.pipeline = F.append(e).append(o);
        this.fetchPipeline = G.append(e).append(i);
        this.transformPipeline = w.append(m).append(v);
        this.bundles = I;
        this.assets = b;
        this._files = C;
        this._parsed = E;
        this.generalImportBase = "";
        this.generalNativeBase = "";
        this.dependUtil = a;
        this._releaseManager = r;
        this.cacheAsset = true;
        this.force = false;
        this.utils = q;
        this.downloader = s;
        this.parser = f;
        this.builtins = p;
        this.packManager = d;
        this.factory = u;
        this.cacheManager = null;
        this.presets = {
          default: {
            priority: 0
          },
          preload: {
            maxConcurrency: 2,
            maxRequestsPerFrame: 2,
            priority: -1
          },
          scene: {
            maxConcurrency: 8,
            maxRequestsPerFrame: 8,
            priority: 1
          },
          bundle: {
            maxConcurrency: 8,
            maxRequestsPerFrame: 8,
            priority: 2
          },
          script: {
            maxConcurrency: 1024,
            maxRequestsPerFrame: 1024,
            priority: 2
          }
        };
        this._parseLoadResArgs = x;
        this._onProgress = null;
      }
      D.Pipeline = c;
      D.Task = l;
      D.Cache = n;
      D.RequestItem = h;
      D.Bundle = t;
      D.BuiltinBundleName = J;
      D.prototype = {
        constructor: D,
        get main() {
          return I.get(J.MAIN);
        },
        get resources() {
          return I.get(J.RESOURCES);
        },
        get internal() {
          return I.get(J.INTERNAL);
        },
        init: function (a) {
          a = a || Object.create(null);
          this._files.clear();
          this._parsed.clear();
          this._releaseManager.init();
          this.assets.clear();
          this.bundles.clear();
          this.packManager.init();
          this.downloader.init(a.bundleVers, a.server);
          this.parser.init();
          this.dependUtil.init();
          this.generalImportBase = a.importBase;
          this.generalNativeBase = a.nativeBase;
        },
        getBundle: function (a) {
          return I.get(a);
        },
        removeBundle: function (a) {
          a._destroy();
          I.remove(a.name);
        },
        loadAny: function (a, b, c, d) {
          var f = z(b, c, d);
          b = f.options;
          c = f.onProgress;
          d = f.onComplete;
          b.preset = b.preset || "default";
          c = c || this._onProgress;
          a = Array.isArray(a) ? a.concat() : a;
          var g = new l({
            input: a,
            onProgress: c,
            onComplete: A(d),
            options: b
          });
          F.async(g);
        },
        preloadAny: function (a, b, c, d) {
          var f = z(b, c, d);
          b = f.options;
          c = f.onProgress;
          d = f.onComplete;
          b.preset = b.preset || "preload";
          c = c || this._onProgress;
          a = Array.isArray(a) ? a.concat() : a;
          var g = new l({
            input: a,
            onProgress: c,
            onComplete: A(d),
            options: b
          });
          G.async(g);
        },
        postLoadNative: function (b, c, d) {
          if (!(b instanceof cc.Asset)) {
            throw Error("input is not asset");
          }
          var f = z(c, undefined, d);
          c = f.options;
          d = f.onComplete;
          if (!b._native || b._nativeAsset) {
            return A(d)(null);
          }
          var g = a.getNativeDep(b._uuid);
          if (g) {
            if (!I.has(g.bundle)) {
              var h = I.find(function (a) {
                return a.getAssetInfo(b._uuid);
              });
              if (h) {
                g.bundle = h.name;
              }
            }
            this.loadAny(g, c, function (a, c) {
              if (!a) {
                if (b.isValid && !b._nativeAsset) {
                  b._nativeAsset = c;
                }
              }
              if (d) {
                d(a);
              }
            });
          }
        },
        loadRemote: function (a, b, c) {
          var d = z(b, undefined, c);
          b = d.options;
          c = d.onComplete;
          if (this.assets.has(a)) {
            return A(c)(null, this.assets.get(a));
          }
          b.__isNative__ = true;
          b.preset = b.preset || "remote";
          this.loadAny({
            url: a
          }, b, null, function (d, e) {
            if (d) {
              if (c) {
                c(d, null);
              }
            } else {
              u.create(a, e, b.ext || cc.path.extname(a), b, function (a, b) {
                if (c) {
                  c(a, b);
                }
              });
            }
          });
        },
        loadScript: function (a, b, c) {
          var d = z(b, undefined, c);
          b = d.options;
          c = d.onComplete;
          b.__requestType__ = H.URL;
          b.preset = b.preset || "script";
          this.loadAny(a, b, c);
        },
        loadBundle: function (a, b, c) {
          var d = z(b, undefined, c);
          b = d.options;
          c = d.onComplete;
          var f = cc.path.basename(a);
          if (this.bundles.has(f)) {
            return A(c)(null, this.getBundle(f));
          }
          b.preset = b.preset || "bundle";
          b.ext = "bundle";
          this.loadRemote(a, b, c);
        },
        releaseAsset: function (a) {
          r.tryRelease(a, true);
        },
        releaseUnusedAssets: function () {
          b.forEach(function (a) {
            r.tryRelease(a);
          });
        },
        releaseAll: function () {
          b.forEach(function (a) {
            r.tryRelease(a, true);
          });
        },
        _transform: function (b, d) {
          var e = l.create({
            input: b,
            options: d
          });
          var f = [];
          try {
            for (var g = w.sync(e), h = 0, i = g.length; h < i; h++) {
              var j = g[h];
              var k = j.url;
              j.recycle();
              f.push(k);
            }
          } catch (a) {
            h = 0;
            i = e.output.length;
            for (; h < i; h++) {
              e.output[h].recycle();
            }
          }
          e.recycle();
          if (f.length > 1) {
            return f;
          } else {
            return f[0];
          }
        }
      };
      cc.AssetManager = D;
      cc.assetManager = new D();
      Object.defineProperty(cc, "resources", {
        get: function () {
          return I.get(J.RESOURCES);
        }
      });
      k.exports = cc.assetManager;
    }, {
      "./builtins": 31,
      "./bundle": 32,
      "./cache": 33,
      "./depend-util": 35,
      "./downloader": 40,
      "./factory": 41,
      "./fetch": 42,
      "./helper": 44,
      "./load": 46,
      "./pack-manager": 47,
      "./parser": 48,
      "./pipeline": 49,
      "./preprocess": 50,
      "./releaseManager": 51,
      "./request-item": 52,
      "./shared": 53,
      "./task": 54,
      "./urlTransformer": 55,
      "./utilities": 56
    }],
    31: [function (a, b) {
      "use strict";
  
      var c = a("./cache");
      var d = a("./releaseManager");
      var f = a("./shared").BuiltinBundleName;
      var e = {
        _assets: new c({
          material: new c(),
          effect: new c()
        }),
        _loadBuiltins: function (a, b) {
          var c = a + "s";
          var d = this._assets.get(a);
          return cc.assetManager.internal.loadDir(c, null, null, function (a, c) {
            if (a) {
              b(a);
            } else {
              for (var e = 0; e < c.length; e++) {
                var f = c[e];
                d.add(f.name, f.addRef());
              }
              b();
            }
          });
        },
        init: function (a) {
          var b = this;
          this.clear();
          if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS || !cc.assetManager.bundles.has(f.INTERNAL)) {
            return a && a();
          }
          this._loadBuiltins("effect", function (c) {
            if (c) {
              if (a) {
                a(c);
              }
            } else {
              b._loadBuiltins("material", a);
            }
          });
        },
        getBuiltin: function (a, b) {
          if (arguments.length === 0) {
            return this._assets;
          } else if (arguments.length === 1) {
            return this._assets.get(a);
          } else {
            return this._assets.get(a).get(b);
          }
        },
        clear: function () {
          this._assets.forEach(function (a) {
            a.forEach(function (a) {
              d.tryRelease(a, true);
            });
            a.clear();
          });
        }
      };
      b.exports = e;
    }, {
      "./cache": 33,
      "./releaseManager": 51,
      "./shared": 53
    }],
    32: [function (b, d) {
      "use strict";
  
      var e = b("./config");
      var f = b("./releaseManager");
      var g = b("./utilities");
      var j = g.parseParameters;
      var k = g.parseLoadResArgs;
      var a = b("./shared");
      var m = a.RequestType;
      var c = a.assets;
      var i = a.bundles;
      function h() {
        this._config = new e();
      }
      h.prototype = {
        constructor: h,
        get name() {
          return this._config.name;
        },
        get deps() {
          return this._config.deps;
        },
        get base() {
          return this._config.base;
        },
        getInfoWithPath: function (a, b) {
          return this._config.getInfoWithPath(a, b);
        },
        getDirWithPath: function (a, b, c) {
          return this._config.getDirWithPath(a, b, c);
        },
        getAssetInfo: function (a) {
          return this._config.getAssetInfo(a);
        },
        getSceneInfo: function (a) {
          return this._config.getSceneInfo(a);
        },
        init: function (a) {
          this._config.init(a);
          i.add(a.name, this);
        },
        load: function (a, b, c, d) {
          var f = k(b, c, d);
          b = f.type;
          c = f.onProgress;
          d = f.onComplete;
          cc.assetManager.loadAny(a, {
            __requestType__: m.PATH,
            type: b,
            bundle: this.name,
            __outputAsArray__: Array.isArray(a)
          }, c, d);
        },
        preload: function (a, b, c, d) {
          var f = k(b, c, d);
          b = f.type;
          c = f.onProgress;
          d = f.onComplete;
          cc.assetManager.preloadAny(a, {
            __requestType__: m.PATH,
            type: b,
            bundle: this.name
          }, c, d);
        },
        loadDir: function (a, b, c, d) {
          var f = k(b, c, d);
          b = f.type;
          c = f.onProgress;
          d = f.onComplete;
          cc.assetManager.loadAny(a, {
            __requestType__: m.DIR,
            type: b,
            bundle: this.name,
            __outputAsArray__: true
          }, c, d);
        },
        preloadDir: function (a, b, c, d) {
          var f = k(b, c, d);
          b = f.type;
          c = f.onProgress;
          d = f.onComplete;
          cc.assetManager.preloadAny(a, {
            __requestType__: m.DIR,
            type: b,
            bundle: this.name
          }, c, d);
        },
        loadScene: function (a, b, c, d) {
          var f = j(b, c, d);
          b = f.options;
          c = f.onProgress;
          d = f.onComplete;
          b.preset = b.preset || "scene";
          b.bundle = this.name;
          cc.assetManager.loadAny({
            scene: a
          }, b, c, function (a, b) {
            if (a) {
              if (d) {
                d(a);
              }
            } else if (b instanceof cc.SceneAsset) {
              var c = b.scene;
              c._id = b._uuid;
              c._name = b._name;
              if (d) {
                d(null, b);
              }
            } else if (d) {
              d(Error("The asset " + b._uuid + " is not a scene"));
            }
          });
        },
        preloadScene: function (a, b, c, d) {
          var f = j(b, c, d);
          b = f.options;
          c = f.onProgress;
          d = f.onComplete;
          b.bundle = this.name;
          cc.assetManager.preloadAny({
            scene: a
          }, b, c, function (a) {
            if (d) {
              d(a);
            }
          });
        },
        get: function (a, b) {
          var d = this.getInfoWithPath(a, b);
          return c.get(d && d.uuid);
        },
        release: function (a, b) {
          f.tryRelease(this.get(a, b), true);
        },
        releaseUnusedAssets: function () {
          var a = this;
          c.forEach(function (b) {
            var c = a.getAssetInfo(b._uuid);
            if (c && !c.redirect) {
              f.tryRelease(b);
            }
          });
        },
        releaseAll: function () {
          var a = this;
          c.forEach(function (b) {
            var c = a.getAssetInfo(b._uuid);
            if (c && !c.redirect) {
              f.tryRelease(b, true);
            }
          });
        },
        _destroy: function () {
          this._config.destroy();
        }
      };
      d.exports = h;
    }, {
      "./config": 34,
      "./releaseManager": 51,
      "./shared": 53,
      "./utilities": 56
    }],
    33: [function (a, b) {
      "use strict";
  
      var c = a("../platform/js");
      function d(a) {
        if (a) {
          this._map = a;
          this._count = Object.keys(a).length;
        } else {
          this._map = c.createMap(true);
          this._count = 0;
        }
      }
      d.prototype = {
        constructor: d,
        add: function (a, b) {
          if (!(a in this._map)) {
            this._count++;
          }
          return this._map[a] = b;
        },
        get: function (a) {
          return this._map[a];
        },
        has: function (a) {
          return a in this._map;
        },
        remove: function (a) {
          var b = this._map[a];
          if (a in this._map) {
            delete this._map[a];
            this._count--;
          }
          return b;
        },
        clear: function () {
          if (this._count !== 0) {
            this._map = c.createMap(true);
            this._count = 0;
          }
        },
        forEach: function (a) {
          for (var b in this._map) {
            a(this._map[b], b);
          }
        },
        find: function (a) {
          for (var b in this._map) {
            if (a(this._map[b], b)) {
              return this._map[b];
            }
          }
          return null;
        },
        get count() {
          return this._count;
        },
        destroy: function () {
          this._map = null;
        }
      };
      b.exports = d;
    }, {
      "../platform/js": 183
    }],
    34: [function (b, c) {
      "use strict";
  
      var d = b("../platform/js");
      var e = b("./cache");
      var f = b("./helper").normalize;
      var g = b("./utilities").processOptions;
      function h() {
        this.name = "";
        this.base = "";
        this.importBase = "";
        this.nativeBase = "";
        this.deps = null;
        this.assetInfos = new e();
        this.scenes = new e();
        this.paths = new e();
      }
      h.prototype = {
        constructor: h,
        init: function (a) {
          g(a);
          this.importBase = a.importBase || "";
          this.nativeBase = a.nativeBase || "";
          this.base = a.base || "";
          this.name = a.name || "";
          this.deps = a.deps || [];
          this._initUuid(a.uuids);
          this._initPath(a.paths);
          this._initScene(a.scenes);
          this._initPackage(a.packs);
          this._initVersion(a.versions);
          this._initRedirect(a.redirect);
        },
        _initUuid: function (a) {
          if (a) {
            this.assetInfos.clear();
            for (var b = 0, c = a.length; b < c; b++) {
              var d = a[b];
              this.assetInfos.add(d, {
                uuid: d
              });
            }
          }
        },
        _initPath: function (b) {
          if (b) {
            var f = this.paths;
            f.clear();
            for (var e in b) {
              var g = b[e];
              var h = g[0];
              var i = g[1];
              var j = g.length === 3;
              var k = this.assetInfos.get(e);
              k.path = h;
              k.ctor = d._getClassById(i);
              if (f.has(h)) {
                if (j) {
                  f.get(h).push(k);
                } else {
                  f.get(h).unshift(k);
                }
              } else {
                f.add(h, [k]);
              }
            }
          }
        },
        _initScene: function (a) {
          if (a) {
            var b = this.scenes;
            b.clear();
            var c = this.assetInfos;
            for (var d in a) {
              var e = a[d];
              var f = c.get(e);
              f.url = d;
              b.add(d, f);
            }
          }
        },
        _initPackage: function (b) {
          if (b) {
            var d = this.assetInfos;
            for (var e in b) {
              var f = b[e];
              var g = {
                uuid: e,
                packs: f,
                ext: ".json"
              };
              d.add(e, g);
              for (var h = 0, j = f.length; h < j; h++) {
                var k = f[h];
                var m = d.get(k);
                var p = m.packs;
                if (p) {
                  if (j === 1) {
                    p.unshift(g);
                  } else {
                    p.push(g);
                  }
                } else {
                  m.packs = [g];
                }
              }
            }
          }
        },
        _initVersion: function (a) {
          if (a) {
            var b = this.assetInfos;
            var c = a.import;
            if (c) {
              for (var d = 0, e = c.length; d < e; d += 2) {
                var f = c[d];
                b.get(f).ver = c[d + 1];
              }
            }
            if (c = a.native) {
              d = 0;
              e = c.length;
              d = 0;
              e = c.length;
              for (; d < e; d += 2) {
                f = c[d];
                b.get(f).nativeVer = c[d + 1];
              }
            }
          }
        },
        _initRedirect: function (a) {
          if (a) {
            for (var b = this.assetInfos, c = 0, d = a.length; c < d; c += 2) {
              var e = a[c];
              b.get(e).redirect = a[c + 1];
            }
          }
        },
        getInfoWithPath: function (b, c) {
          if (!b) {
            return null;
          }
          b = f(b);
          var e = this.paths.get(b);
          if (e) {
            if (!c) {
              return e[0];
            }
            for (var g = 0, h = e.length; g < h; g++) {
              var a = e[g];
              if (d.isChildClassOf(a.ctor, c)) {
                return a;
              }
            }
          }
          return null;
        },
        getDirWithPath: function (b, c, e) {
          if ((b = f(b))[b.length - 1] === "/") {
            b = b.slice(0, -1);
          }
          var g = e || [];
          function h(a, b) {
            return !(a.length > b.length) || a.charCodeAt(b.length) === 47;
          }
          this.paths.forEach(function (a, e) {
            if (e.startsWith(b) && h(e, b) || !b) {
              for (var f = 0, i = a.length; f < i; f++) {
                var j = a[f];
                if (!(c && !d.isChildClassOf(j.ctor, c))) {
                  g.push(j);
                }
              }
            }
          });
          return g;
        },
        getAssetInfo: function (a) {
          return this.assetInfos.get(a);
        },
        getSceneInfo: function (a) {
          if (!a.endsWith(".fire")) {
            a += ".fire";
          }
          if (!(a[0] === "/" || a.startsWith("db://"))) {
            a = "/" + a;
          }
          return this.scenes.find(function (b, c) {
            return c.endsWith(a);
          });
        },
        destroy: function () {
          this.paths.destroy();
          this.scenes.destroy();
          this.assetInfos.destroy();
        }
      };
      c.exports = h;
    }, {
      "../platform/js": 183,
      "./cache": 33,
      "./helper": 44,
      "./utilities": 56
    }],
    35: [function (b, d) {
      "use strict";
  
      var f = function (b) {
        if (b && b.__esModule) {
          return b;
        }
        if (b === null || typeof b != "object" && typeof b != "function") {
          return {
            default: b
          };
        }
        var c = g(undefined);
        if (c && c.has(b)) {
          return c.get(b);
        }
        var d = {};
        var e = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var f in b) {
          if (f !== "default" && Object.prototype.hasOwnProperty.call(b, f)) {
            var h = e ? Object.getOwnPropertyDescriptor(b, f) : null;
            if (h && (h.get || h.set)) {
              Object.defineProperty(d, f, h);
            } else {
              d[f] = b[f];
            }
          }
        }
        d.default = b;
        if (c) {
          c.set(b, d);
        }
        return d;
      }(b("../platform/deserialize-compiled"));
      function g(a) {
        if (typeof WeakMap != "function") {
          return null;
        }
        var b = new WeakMap();
        var c = new WeakMap();
        return (g = function (a) {
          if (a) {
            return c;
          } else {
            return b;
          }
        })(a);
      }
      var e = b("./cache");
      var h = b("./deserialize");
      var i = b("./shared");
      var j = i.files;
      var a = i.parsed;
      var c = {
        _depends: new e(),
        init: function () {
          this._depends.clear();
        },
        getNativeDep: function (a) {
          var b = this._depends.get(a);
          if (b) {
            return b.nativeDep && Object.assign({}, b.nativeDep);
          } else {
            return null;
          }
        },
        getDeps: function (a) {
          if (this._depends.has(a)) {
            return this._depends.get(a).deps;
          } else {
            return [];
          }
        },
        getDepsRecursively: function (a) {
          var b = Object.create(null);
          var c = [];
          this._descend(a, b, c);
          return c;
        },
        _descend: function (a, b, c) {
          for (var d = this.getDeps(a), e = 0; e < d.length; e++) {
            var f = d[e];
            if (!b[f]) {
              b[f] = true;
              c.push(f);
              this._descend(f, b, c);
            }
          }
        },
        remove: function (a) {
          this._depends.remove(a);
        },
        parse: function (b, c) {
          var d = null;
          if (Array.isArray(c) || c.__type__) {
            if (d = this._depends.get(b)) {
              return d;
            }
            if (Array.isArray(c) && !(0, f.hasNativeDep)(c)) {
              d = {
                deps: this._parseDepsFromJson(c)
              };
            } else {
              try {
                var e = h(c);
                if ((d = this._parseDepsFromAsset(e)).nativeDep) {
                  d.nativeDep.uuid = b;
                }
                a.add(b + "@import", e);
              } catch (c) {
                j.remove(b + "@import");
                d = {
                  deps: []
                };
              }
            }
          } else {
            if ((d = this._depends.get(b)) && d.parsedFromExistAsset) {
              return d;
            }
            d = this._parseDepsFromAsset(c);
          }
          this._depends.add(b, d);
          return d;
        },
        _parseDepsFromAsset: function (a) {
          for (var b = {
              deps: [],
              parsedFromExistAsset: true,
              preventPreloadNativeObject: a.constructor.preventPreloadNativeObject,
              preventDeferredLoadDependents: a.constructor.preventDeferredLoadDependents
            }, c = a.__depends__, d = 0, e = c.length; d < e; d++) {
            var f = c[d].uuid;
            b.deps.push(f);
          }
          if (a.__nativeDepend__) {
            b.nativeDep = a._nativeDep;
          }
          return b;
        },
        _parseDepsFromJson: function (a) {
          var b = (0, f.getDependUuidList)(a);
          b.forEach(function (a, c) {
            return b[c] = cc.assetManager.utils.decodeUuid(a);
          });
          return b;
        }
      };
      d.exports = c;
    }, {
      "../platform/deserialize-compiled": 177,
      "./cache": 33,
      "./deserialize": 36,
      "./shared": 53
    }],
    36: [function (a, b) {
      "use strict";
  
      var d = a("./helper");
      a("../platform/deserialize");
      b.exports = function (b, g) {
        var e;
        e = cc._MissingScript.safeFindClass;
        var i;
        var j = null;
        var k = (j = cc.deserialize.Details.pool).get();
        try {
          i = cc.deserialize(b, k, {
            classFinder: e,
            customEnv: g
          });
        } catch (a) {
          j.put(k);
          throw a;
        }
        for (var a = k.uuidList, m = k.uuidObjList, c = k.uuidPropList, l = [], h = 0; h < a.length; h++) {
          var o = a[h];
          l[h] = {
            uuid: d.decodeUuid(o),
            owner: m[h],
            prop: c[h]
          };
        }
        i.__depends__ = l;
        if (i._native) {
          i.__nativeDepend__ = true;
        }
        j.put(k);
        return i;
      };
    }, {
      "../platform/deserialize": 178,
      "../platform/deserialize-compiled": 177,
      "../platform/deserialize-editor": undefined,
      "./helper": 44
    }],
    37: [function (a, b) {
      "use strict";
  
      var c = a("./utilities").parseParameters;
      var d = a("./download-file").downloadFile;
      b.exports = function (b, f, e) {
        var g = c(f, undefined, e);
        var h = g.options;
        var a = g.onComplete;
        h.responseType = "blobURL";
        d(b, h, function (c, d) {
          if (c) {
            if (a) {
              a(c);
            }
          } else {
            var e = new Image();
            e.addEventListener("load", f);
            e.addEventListener("error", g);
            e.src = d;
          }
          function f() {
            e.removeEventListener("load", f);
            e.removeEventListener("error", g);
            URL.revokeObjectURL(d);
            if (a) {
              a(null, e);
            }
          }
          function g() {
            e.removeEventListener("load", f);
            e.removeEventListener("error", g);
            URL.revokeObjectURL(d);
            if (a) {
              a(Error(cc.debug.getError(4930, b)));
            }
          }
        });
      };
    }, {
      "./download-file": 38,
      "./utilities": 56
    }],
    38: [function (b, g) {
      "use strict";
  
      var j = b("./utilities").parseParameters;
      var e = typeof window == "undefined" ? global : window;
      var i = e.shell || Object.create(null);
      var k = i.fetch || e.fetch;
      var m = i.fetchBlobURL || function (a, b) {
        return k(a, b).then(function (a) {
          if (!a.ok) {
            throw a.status;
          }
          return a.blob().then(function (a) {
            return URL.createObjectURL(a);
          });
        });
      };
      var a = i.unregisterBlobURL || function () {
        return null;
      };
      function p(a) {
        if (i.authenticate) {
          return i.authenticate(a);
        } else {
          return a;
        }
      }
      cc.setAuthenticateUrl = function (a) {
        p = a;
      };
      var q = function () {
        function a() {
          this._aborted = false;
        }
        var b = a.prototype;
        b.abort = function () {
          this._aborted = true;
        };
        b.isAborted = function () {
          return this._aborted;
        };
        return a;
      }();
      function l(a, b) {
        var c = +a.headers.get("Content-Length");
        if (!Number.isInteger(c)) {
          return a;
        }
        var d = a.body.getReader();
        var e = 0;
        var f = [];
        return d.read().then(function h(g) {
          if (g.done) {
            return new Response(new Blob(f, {
              type: a.headers.get("Content-Type")
            }), {
              status: a.status
            });
          } else {
            e += g.value.length;
            f.push(g.value);
            b(e, c);
            return d.read().then(h);
          }
        });
      }
      function h(a) {
        var b = Object.create(null);
        if (a.withCredentials === true) {
          b.credentials = "include";
        } else if (a.withCredentials === false) {
          b.credentials = "omit";
        }
        if (a.header) {
          b.headers = a.header;
        }
        return b;
      }
      function n(a, b, c) {
        var d = h(b);
        var f = new q();
        m(a, d).then(function (b) {
          if (f.isAborted()) {
            throw [4928, a + "(abort)"];
          }
          var d = c;
          c = null;
          d(null, b);
        }).catch(function (b) {
          if (c) {
            if (!Array.isArray(b)) {
              b = [4928, a + "(error)"];
            }
            if (f.isAborted()) {
              b[1] = "(abort)";
            }
            c(Error(cc.debug.getError(b[0], b[1])));
          }
        });
        return f;
      }
      function f(b, c, d, f) {
        var g = c.responseType !== undefined ? c.responseType : "text";
        var e = h(c);
        var a = new q();
        k(b, e).then(function (c) {
          if (a.isAborted()) {
            throw [4928, b + "(abort)"];
          }
          if (!c.ok) {
            throw [4928, b + "(wrong status)"];
          }
          if (d) {
            return l(c, d);
          } else {
            return c;
          }
        }).then(function (c) {
          if (a.isAborted()) {
            throw [4928, b + "(abort)"];
          }
          var d;
          switch (g) {
            case "json":
              d = c.json();
              break;
            case "arraybuffer":
              d = c.arrayBuffer();
              break;
            case "blob":
              d = c.blob();
              break;
            default:
              d = c.text();
          }
          return d.then(function (c) {
            if (a.isAborted()) {
              throw [4928, b + "(abort)"];
            }
            var d = f;
            f = null;
            d(null, c);
          });
        }).catch(function (a) {
          if (f) {
            if (!Array.isArray(a)) {
              a = [4928, b + "(error)"];
            }
            f(Error(cc.debug.getError(a[0]), a[1]));
          }
        });
        return a;
      }
      g.exports = {
        downloadFile: function (b, c, d, e) {
          var g = j(c, d, e);
          var i = g.options;
          var a = g.onProgress;
          var k = g.onComplete;
          var l = p(b);
          if (i.responseType === "blobURL") {
            return n(l, i, k);
          } else {
            return f(l, i, a, k);
          }
        },
        unregisterBlobURL: a
      };
    }, {
      "./utilities": 56
    }],
    39: [function (b, c) {
      "use strict";
  
      var d = b("./utilities").parseParameters;
      var e = b("./download-file");
      var f = e.downloadFile;
      var g = e.unregisterBlobURL;
      var h = {};
      c.exports = function (a, b, c) {
        var i = d(b, undefined, c);
        b = i.options;
        c = i.onComplete;
        if (h[a]) {
          return c && c(null);
        }
        b.responseType = "blobURL";
        f(a, b, function (b, d) {
          if (b) {
            return c && c(b);
          }
          var e = document.createElement("script");
          e.async = true;
          e.src = d;
          e.addEventListener("load", function () {
            document.head.removeChild(e);
            URL.revokeObjectURL(d);
            h[a] = true;
            if (c) {
              c(null);
            }
          }, false);
          e.addEventListener("error", function () {
            document.head.removeChild(e);
            URL.revokeObjectURL(d);
            g(d);
            if (c) {
              c(Error(cc.debug.getError(4928, a)));
            }
          }, false);
          document.head.appendChild(e);
        });
      };
    }, {
      "./download-file": 38,
      "./utilities": 56
    }],
    40: [function (j, k) {
      "use strict";
  
      function q() {
        return (q = Object.assign || function (a) {
          for (var b = 1; b < arguments.length; b++) {
            var c = arguments[b];
            for (var d in c) {
              if (Object.prototype.hasOwnProperty.call(c, d)) {
                a[d] = c[d];
              }
            }
          }
          return a;
        }).apply(this, arguments);
      }
      var e = j("../platform/js");
      var n = j("../CCDebug");
      var r = j("./font-loader").loadFont;
      var s = j("../platform/utils").callInNextTick;
      var a = j("./download-dom-image");
      var o = j("./download-file").downloadFile;
      var z = j("./download-script.js");
      var c = j("./cache");
      var B = j("./shared").files;
      var h = j("../platform/CCSys");
      var f = h.__audioSupport;
      var d = h.capabilities;
      var l = j("./utilities").retry;
      var p = /^(?:\w+:\/\/|\.+\/).+/;
      var u = f.format || [];
      function g(a, b, c) {
        c(Error(n.getError(4927)));
      }
      function m(a, b, c) {
        if (u.length > 0) {
          A(a, b, c);
        } else {
          g(0, 0, c);
        }
      }
      function t() {
        var b = d.imageBitmap && cc.macro.ALLOW_IMAGE_BITMAP ? v : a;
        b.apply(this, arguments);
      }
      function v(a, b, c) {
        b.responseType = "blob";
        o(a, b, b.onFileProgress, c);
      }
      function y(a, b, c) {
        b.responseType = "json";
        o(a, b, b.onFileProgress, function (a, b) {
          if (!a && typeof b == "string") {
            try {
              b = JSON.parse(b);
            } catch (b) {
              a = b;
            }
          }
          if (c) {
            c(a, b);
          }
        });
      }
      function A(a, b, c) {
        b.responseType = "arraybuffer";
        o(a, b, b.onFileProgress, c);
      }
      function x(a, b, c) {
        b.responseType = "text";
        o(a, b, b.onFileProgress, c);
      }
      function C(a, b, c) {
        c(null, a);
      }
      var b = new c();
      var E = [];
      var G = false;
      var H = 0;
      var J = 0;
      var K = -1;
      var Q = false;
      function R() {
        var a = Date.now();
        var b = cc.director._deltaTime > D._maxInterval ? D._maxInterval : cc.director._deltaTime;
        if (a - K > b * 1000) {
          J = 0;
          K = a;
        }
      }
      var P = function c(a, b) {
        Q = false;
        R();
        for (; E.length > 0 && H < a && J < b;) {
          if (G) {
            E.sort(function (a, b) {
              return a.priority - b.priority;
            });
            G = false;
          }
          var d = E.pop();
          if (!d) {
            break;
          }
          H++;
          J++;
          d.invoke();
        }
        if (E.length > 0 && H < a) {
          s(c, a, b);
          Q = true;
        }
      };
      var D = {
        _remoteServerAddress: "",
        _maxInterval: 1 / 30,
        get remoteServerAddress() {
          return this._remoteServerAddress;
        },
        maxConcurrency: 6,
        maxRequestsPerFrame: 6,
        maxRetryCount: 3,
        limited: true,
        retryInterval: 2000,
        bundleVers: null,
        downloadFile: o,
        downloadScript: z,
        init: function (a, c) {
          b.clear();
          E.length = 0;
          this._remoteServerAddress = c || "";
          if (this._remoteServerAddress && !this._remoteServerAddress.endsWith("/")) {
            this._remoteServerAddress += "/";
          }
          this.bundleVers = a || Object.create(null);
        },
        register: function (a, b) {
          if (typeof a == "object") {
            e.mixin(N, a);
          } else {
            N[a] = b;
          }
        },
        download: function (a, i, e, j, k) {
          var p = N[e] || N.default;
          j = q({
            remoteServerAddress: this.remoteServerAddress
          }, j);
          var n;
          var o;
          var t = this;
          if (n = B.get(a)) {
            k(null, n);
          } else if (o = b.get(a)) {
            o.push(k);
            for (var h = 0, u = E.length; h < u; h++) {
              var d = E[h];
              if (d.id === a) {
                var w = j.priority || 0;
                if (d.priority < w) {
                  d.priority = w;
                  G = true;
                }
                return;
              }
            }
          } else {
            var x = j.maxRetryCount !== undefined ? j.maxRetryCount : this.maxRetryCount;
            var g = j.maxConcurrency !== undefined ? j.maxConcurrency : this.maxConcurrency;
            var m = j.maxRequestsPerFrame !== undefined ? j.maxRequestsPerFrame : this.maxRequestsPerFrame;
            l(function (d, e) {
              if (d === 0) {
                b.add(a, [k]);
              }
              if (!t.limited) {
                return p(i, j, e);
              }
              function f() {
                p(i, j, function () {
                  H--;
                  if (!Q && E.length > 0) {
                    s(P, g, m);
                    Q = true;
                  }
                  e.apply(this, arguments);
                });
              }
              R();
              if (H < g && J < m) {
                f();
                H++;
                J++;
              } else {
                E.push({
                  id: a,
                  priority: j.priority || 0,
                  invoke: f
                });
                G = true;
                if (!Q && H < g) {
                  s(P, g, m);
                  Q = true;
                }
              }
            }, x, this.retryInterval, function (c, d) {
              if (!c) {
                B.add(a, d);
              }
              for (var e = b.remove(a), f = 0, g = e.length; f < g; f++) {
                e[f](c, d);
              }
            });
          }
        }
      };
      var N = {
        ".png": t,
        ".jpg": t,
        ".bmp": t,
        ".jpeg": t,
        ".gif": t,
        ".ico": t,
        ".tiff": t,
        ".webp": t,
        ".image": t,
        ".pvr": A,
        ".pkm": A,
        ".astc": A,
        ".mp3": m,
        ".ogg": m,
        ".wav": m,
        ".m4a": m,
        ".txt": x,
        ".xml": x,
        ".vsh": x,
        ".fsh": x,
        ".atlas": x,
        ".tmx": x,
        ".tsx": x,
        ".json": y,
        ".ExportJson": y,
        ".plist": x,
        ".fnt": x,
        ".font": r,
        ".eot": r,
        ".ttf": r,
        ".woff": r,
        ".svg": r,
        ".ttc": r,
        ".mp4": C,
        ".avi": C,
        ".mov": C,
        ".mpg": C,
        ".mpeg": C,
        ".rm": C,
        ".rmvb": C,
        ".binary": A,
        ".bin": A,
        ".dbbin": A,
        ".skel": A,
        ".js": z,
        bundle: function (b, d, e) {
          var f = cc.path.basename(b);
          var g = b;
          if (!p.test(g)) {
            g = d.remoteServerAddress ? d.remoteServerAddress + "assets/" + f : "assets/" + f;
          }
          var i;
          var j;
          var k = d.version || D.bundleVers[f];
          var l = 0;
          if (typeof k == "string") {
            i = j = k;
          } else if (k) {
            i = k.config;
            j = k.index;
          }
          var m = null;
          var n = null;
          y(g + "/config." + (i ? i + "." : "") + "json", d, function (a, b) {
            if (a) {
              n = a;
            }
            if (m = b) {
              m.base = g + "/";
            }
            if (++l == 2) {
              e(n, m);
            }
          });
          z(g + "/index." + (j ? j + "." : "") + "js", d, function (a) {
            if (a) {
              n = a;
            }
            if (++l == 2) {
              e(n, m);
            }
          });
        },
        default: x
      };
      D._downloaders = N;
      k.exports = D;
    }, {
      "../CCDebug": 23,
      "../platform/CCSys": 171,
      "../platform/js": 183,
      "../platform/utils": 186,
      "./cache": 33,
      "./download-dom-image": 37,
      "./download-file": 38,
      "./download-script.js": 39,
      "./font-loader": 43,
      "./shared": 53,
      "./utilities": 56
    }],
    41: [function (b, g) {
      "use strict";
  
      var j = b("./bundle");
      var e = b("./cache");
      var i = b("./shared");
      var k = i.assets;
      var m = i.bundles;
      var q = new e();
      function a(a, b, c, d) {
        var e = null;
        var f = null;
        try {
          (e = new cc.Texture2D())._nativeUrl = a;
          e._nativeAsset = b;
        } catch (b) {
          f = b;
        }
        if (d) {
          d(f, e);
        }
      }
      function c(a, b, c, d) {
        var e = new cc.AudioClip();
        e._nativeUrl = a;
        e._nativeAsset = b;
        e.duration = b.duration;
        if (d) {
          d(null, e);
        }
      }
      function l(a, b, c, d) {
        var e = new cc.VideoClip();
        e._nativeUrl = a;
        e._nativeAsset = b;
        if (d) {
          d(null, e);
        }
      }
      function h(a, b, c, d) {
        var e = new cc.JsonAsset();
        e.json = b;
        if (d) {
          d(null, e);
        }
      }
      function n(a, b, c, d) {
        var e = new cc.TextAsset();
        e.text = b;
        if (d) {
          d(null, e);
        }
      }
      function f(a, b, c, d) {
        var e = new cc.TTFFont();
        e._nativeUrl = a;
        e._nativeAsset = b;
        if (d) {
          d(null, e);
        }
      }
      function d(a, b, c, d) {
        var e = new cc.BufferAsset();
        e._nativeUrl = a;
        e._nativeAsset = b;
        if (d) {
          d(null, e);
        }
      }
      var o = {
        register: function (a, b) {
          if (typeof a == "object") {
            cc.js.mixin(p, a);
          } else {
            p[a] = b;
          }
        },
        create: function (b, d, e, f, g) {
          var h;
          var i;
          var j = p[e] || p.default;
          if (h = k.get(b)) {
            g(null, h);
          } else if (i = q.get(b)) {
            i.push(g);
          } else {
            q.add(b, [g]);
            j(b, d, f, function (c, d) {
              if (!c && d instanceof cc.Asset) {
                d._uuid = b;
                k.add(b, d);
              }
              for (var e = q.remove(b), f = 0, g = e.length; f < g; f++) {
                e[f](c, d);
              }
            });
          }
        }
      };
      var p = {
        ".png": a,
        ".jpg": a,
        ".bmp": a,
        ".jpeg": a,
        ".gif": a,
        ".ico": a,
        ".tiff": a,
        ".webp": a,
        ".image": a,
        ".pvr": a,
        ".pkm": a,
        ".astc": a,
        ".mp3": c,
        ".ogg": c,
        ".wav": c,
        ".m4a": c,
        ".mp4": l,
        ".avi": l,
        ".mov": l,
        ".mpg": l,
        ".mpeg": l,
        ".rm": l,
        ".rmvb": l,
        ".txt": n,
        ".xml": n,
        ".vsh": n,
        ".fsh": n,
        ".atlas": n,
        ".tmx": n,
        ".tsx": n,
        ".fnt": n,
        ".json": h,
        ".ExportJson": h,
        ".font": f,
        ".eot": f,
        ".ttf": f,
        ".woff": f,
        ".svg": f,
        ".ttc": f,
        ".binary": d,
        ".bin": d,
        ".dbbin": d,
        ".skel": d,
        bundle: function (a, b, c, d) {
          var e = m.get(b.name);
          if (!e) {
            e = new j();
            b.base = b.base || a + "/";
            e.init(b);
          }
          if (d) {
            d(null, e);
          }
        },
        default: function (a, b, c, d) {
          var e = new cc.Asset();
          e._nativeUrl = a;
          e._nativeAsset = b;
          if (d) {
            d(null, e);
          }
        }
      };
      g.exports = o;
    }, {
      "./bundle": 32,
      "./cache": 33,
      "./shared": 53
    }],
    42: [function (b, d) {
      "use strict";
  
      var g = b("./pack-manager");
      var j = b("./task");
      var e = b("./utilities");
      var k = e.getDepends;
      var i = e.clear;
      var a = e.forEach;
      var m = b("./shared");
      var o = m.assets;
      var l = m.fetchPipeline;
      function c(a) {
        for (var b = a.output, c = 0, d = b.length; c < d; c++) {
          if (b[c].content) {
            b[c].content.decRef(false);
          }
        }
      }
      function h(b, d, e, f, g, h, a) {
        var i = d.options.__exclude__;
        var c = d.progress;
        b.content = e;
        b.file = f;
        d.output.push(b);
        if (g) {
          i[b.uuid] = true;
          k(b.uuid, f || e, i, h, true, false, b.config);
          c.total = a + h.length;
        }
        if (c.canInvoke) {
          d.dispatch("progress", ++c.finish, c.total, b);
        }
      }
      d.exports = function (b, f) {
        var e = false;
        if (!b.progress) {
          b.progress = {
            finish: 0,
            total: b.input.length,
            canInvoke: true
          };
          e = true;
        }
        var k = b.options;
        var m = [];
        var n = b.progress;
        var d = n.total;
        k.__exclude__ = k.__exclude__ || Object.create(null);
        b.output = [];
        a(b.input, function (c, j) {
          if (!c.isNative && o.has(c.uuid)) {
            var i = o.get(c.uuid);
            i.addRef();
            h(c, b, i, null, i.__asyncLoadAssets__, m, d);
            return j();
          }
          g.load(c, b.options, function (g, i) {
            if (g) {
              if (!b.isFinish) {
                if (!cc.assetManager.force || e) {
                  n.canInvoke = false;
                  f(g);
                } else {
                  h(c, b, null, null, false, m, d);
                }
              }
            } else if (!b.isFinish) {
              h(c, b, null, i, !c.isNative, m, d);
            }
            j();
          });
        }, function () {
          if (b.isFinish) {
            i(b, true);
            return b.dispatch("error");
          }
          if (m.length > 0) {
            var a = j.create({
              name: b.name + " dependencies",
              input: m,
              progress: n,
              options: k,
              onProgress: b.onProgress,
              onError: j.prototype.recycle,
              onComplete: function (d) {
                if (!d) {
                  b.output.push.apply(b.output, this.output);
                  a.recycle();
                }
                if (e) {
                  c(b);
                }
                f(d);
              }
            });
            l.async(a);
          } else {
            if (e) {
              c(b);
            }
            f();
          }
        });
      };
    }, {
      "./pack-manager": 47,
      "./shared": 53,
      "./task": 54,
      "./utilities": 56
    }],
    43: [function (b, d) {
      "use strict";
  
      var g;
      var j = b("../utils/text-utils");
      var k = null;
      var n = "BES bswy:->@123丁ぁᄁ";
      var q = Object.create(null);
      var a = -1;
      var m = [];
      var c = 3000;
      g = undefined;
      function l() {
        if (g === undefined) {
          if (window.FontFace) {
            var a = /Gecko.*Firefox\/(\d+)/.exec(window.navigator.userAgent);
            var b = /OS X.*Version\/10\..*Safari/.exec(window.navigator.userAgent) && /Apple/.exec(window.navigator.vendor);
            g = a ? parseInt(a[1], 10) > 42 : !b;
          } else {
            g = false;
          }
        }
        return g;
      }
      function e() {
        for (var b = true, d = Date.now(), e = m.length - 1; e >= 0; e--) {
          var g = m[e];
          var l = g.fontFamilyName;
          if (d - g.startTime > c) {
            g.onComplete(null, l);
            m.splice(e, 1);
          } else {
            var o = g.refWidth;
            var p = "40px " + l;
            k.font = p;
            if (o !== j.safeMeasureText(k, n, p)) {
              m.splice(e, 1);
              g.onComplete(null, l);
            } else {
              b = false;
            }
          }
        }
        if (b) {
          clearInterval(a);
          a = -1;
        }
      }
      var h = {
        loadFont: function (f, o, r) {
          var i = h._getFontFamily(f);
          if (q[i]) {
            return r(null, i);
          }
          if (!k) {
            var d = document.createElement("canvas");
            d.width = 100;
            d.height = 100;
            k = d.getContext("2d");
          }
          var s = "40px " + i;
          k.font = s;
          var p = j.safeMeasureText(k, n, s);
          var t = document.createElement("style");
          t.type = "text/css";
          var g = "";
          g += isNaN(i - 0) ? "@font-face { font-family:" + i + "; src:" : "@font-face { font-family:'" + i + "'; src:";
          g += "url('" + f + "');";
          t.textContent = g + "}";
          document.body.appendChild(t);
          var u;
          var v;
          var w;
          var z;
          var B;
          var D;
          var F = document.createElement("div");
          var b = F.style;
          b.fontFamily = i;
          F.innerHTML = ".";
          b.position = "absolute";
          b.left = "-100px";
          b.top = "-100px";
          document.body.appendChild(F);
          if (l()) {
            u = Date.now();
            v = i;
            w = r;
            z = new Promise(function (a, b) {
              (function d() {
                if (Date.now() - u >= c) {
                  b();
                } else {
                  document.fonts.load("40px " + v).then(function (b) {
                    if (b.length >= 1) {
                      a();
                    } else {
                      // TOLOOK
                      setTimeout(d, 100);
                    }
                  }, function () {
                    b();
                  });
                }
              })();
            });
            B = null;
            D = new Promise(function (a, b) {
              B = // TOLOOK
              setTimeout(b, c);
            });
            Promise.race([D, z]).then(function () {
              if (B) {
                clearTimeout(B);
                B = null;
              }
              w(null, v);
            }, function () {
              w(null, v);
            });
          } else {
            var G = {
              fontFamilyName: i,
              refWidth: p,
              onComplete: r,
              startTime: Date.now()
            };
            m.push(G);
            if (a === -1) {
              a = // TOLOOK
              setInterval(e, 100);
            }
          }
          q[i] = t;
        },
        _getFontFamily: function (a) {
          var b = a.lastIndexOf(".ttf");
          if (b === -1) {
            return a;
          }
          var c;
          var d = a.lastIndexOf("/");
          if ((c = d === -1 ? a.substring(0, b) + "_LABEL" : a.substring(d + 1, b) + "_LABEL").indexOf(" ") !== -1) {
            c = "\"" + c + "\"";
          }
          return c;
        }
      };
      d.exports = h;
    }, {
      "../utils/text-utils": 243
    }],
    44: [function (a, b) {
      "use strict";
  
      var c;
      var d = a("./shared").bundles;
      var e = {
        decodeUuid: a("../utils/decode-uuid"),
        getUuidFromURL: (c = /.*[/\\][0-9a-fA-F]{2}[/\\]([0-9a-fA-F-]{8,})/, function (a) {
          var b = a.match(c);
          if (b) {
            return b[1];
          } else {
            return "";
          }
        }),
        getUrlWithUuid: function (a, b) {
          (b = b || Object.create(null)).__isNative__ = b.isNative;
          b.ext = b.nativeExt;
          var c = d.find(function (b) {
            return b.getAssetInfo(a);
          });
          if (c) {
            b.bundle = c.name;
          }
          return cc.assetManager._transform(a, b);
        },
        isScene: function (a) {
          return a && (a.constructor === cc.SceneAsset || a instanceof cc.Scene);
        },
        normalize: function (a) {
          if (a) {
            if (a.charCodeAt(0) === 46 && a.charCodeAt(1) === 47) {
              a = a.slice(2);
            } else if (a.charCodeAt(0) === 47) {
              a = a.slice(1);
            }
          }
          return a;
        }
      };
      b.exports = e;
    }, {
      "../utils/decode-uuid": 231,
      "./shared": 53
    }],
    45: [function (a) {
      "use strict";
  
      a("./CCAssetManager");
    }, {
      "./CCAssetManager": 30
    }],
    46: [function (b, j) {
      "use strict";
  
      var k = b("./pack-manager");
      var e = b("./pipeline");
      var q = b("./parser");
      var i = b("./utilities");
      var w = i.getDepends;
      var a = i.cache;
      var o = i.gatherAsset;
      var t = i.setProperties;
      var c = i.forEach;
      var h = i.clear;
      var r = i.checkCircleReference;
      var f = b("./shared");
      var x = f.assets;
      var d = f.files;
      var l = f.parsed;
      var p = f.pipeline;
      var g = b("./task");
      var m = new e("loadOneAsset", [function (b, d) {
        var e = b.output = b.input;
        var f = e.options;
        var g = e.isNative;
        var h = e.uuid;
        var a = e.file;
        var i = f.reload;
        if (a || !i && !g && x.has(h)) {
          return d();
        }
        k.load(e, b.options, function (a, b) {
          e.file = b;
          d(a);
        });
      }, function (b, f) {
        var e = b.output = b.input;
        var i = b.progress;
        var j = b.options.__exclude__;
        var k = e.id;
        var a = e.file;
        var n = e.options;
        if (e.isNative) {
          q.parse(k, a, e.ext, n, function (a, c) {
            if (a) {
              return f(a);
            }
            e.content = c;
            if (i.canInvoke) {
              b.dispatch("progress", ++i.finish, i.total, e);
            }
            d.remove(k);
            l.remove(k);
            f();
          });
        } else {
          var c = e.uuid;
          if (c in j) {
            var o = j[c];
            var h = o.finish;
            var p = o.content;
            var t = o.err;
            var g = o.callbacks;
            if (i.canInvoke) {
              b.dispatch("progress", ++i.finish, i.total, e);
            }
            if (h || r(c, c, j)) {
              if (p && p.addRef) {
                p.addRef();
              }
              e.content = p;
              f(t);
            } else {
              g.push({
                done: f,
                item: e
              });
            }
          } else if (!n.reload && x.has(c)) {
            var m = x.get(c);
            if (n.__asyncLoadAssets__ || !m.__asyncLoadAssets__) {
              e.content = m.addRef();
              if (i.canInvoke) {
                b.dispatch("progress", ++i.finish, i.total, e);
              }
              f();
            } else {
              s(b, m, f, false);
            }
          } else {
            q.parse(k, a, "import", n, function (a, d) {
              if (a) {
                return f(a);
              }
              d._uuid = c;
              s(b, d, f, true);
            });
          }
        }
      }]);
      function s(b, j, e, k) {
        var i = b.input;
        var m = b.progress;
        var n = i.uuid;
        var c = i.id;
        var h = i.options;
        var o = i.config;
        var q = h.__asyncLoadAssets__;
        var f = h.cacheAsset;
        var r = [];
        if (j.addRef) {
          j.addRef();
        }
        w(n, j, Object.create(null), r, false, q, o);
        if (m.canInvoke) {
          b.dispatch("progress", ++m.finish, m.total += r.length, i);
        }
        var v = b.options.__exclude__[n] = {
          content: j,
          finish: false,
          callbacks: [{
            done: e,
            item: i
          }]
        };
        var x = g.create({
          input: r,
          options: b.options,
          onProgress: b.onProgress,
          onError: g.prototype.recycle,
          progress: m,
          onComplete: function (b) {
            if (j.decRef) {
              j.decRef(false);
            }
            j.__asyncLoadAssets__ = q;
            v.finish = true;
            v.err = b;
            if (!b) {
              for (var e = Array.isArray(x.output) ? x.output : [x.output], h = Object.create(null), i = 0, o = e.length; i < o; i++) {
                var p = e[i];
                if (p) {
                  h[p instanceof cc.Asset ? p._uuid + "@import" : n + "@native"] = p;
                }
              }
              if (k) {
                if (!t(n, j, h) && !j.__onLoadInvoked__) {
                  try {
                    if (j.onLoad) {
                      j.onLoad();
                    }
                    j.__onLoadInvoked__ = true;
                  } catch (a) {}
                }
                d.remove(c);
                l.remove(c);
                a(n, j, f !== undefined ? f : cc.assetManager.cacheAsset);
              } else if (j.__nativeDepend__ && !j._nativeAsset && !t(n, j, h) && !j.__onLoadInvoked__) {
                try {
                  if (j.onLoad) {
                    j.onLoad();
                  }
                  j.__onLoadInvoked__ = true;
                } catch (a) {}
              }
              x.recycle();
            }
            for (var r = v.callbacks, w = 0, z = r.length; w < z; w++) {
              var m = r[w];
              if (j.addRef) {
                j.addRef();
              }
              m.item.content = j;
              m.done(b);
            }
            r.length = 0;
          }
        });
        p.async(x);
      }
      j.exports = function (b, a) {
        var d = false;
        if (!b.progress) {
          b.progress = {
            finish: 0,
            total: b.input.length,
            canInvoke: true
          };
          d = true;
        }
        var e = b.options;
        var f = b.progress;
        e.__exclude__ = e.__exclude__ || Object.create(null);
        b.output = [];
        c(b.input, function (c, h) {
          var i = g.create({
            input: c,
            onProgress: b.onProgress,
            options: e,
            progress: f,
            onComplete: function (c, e) {
              if (c && !b.isFinish) {
                if (!cc.assetManager.force || d) {
                  f.canInvoke = false;
                  a(c);
                } else if (f.canInvoke) {
                  b.dispatch("progress", ++f.finish, f.total, e);
                }
              }
              b.output.push(e);
              i.recycle();
              h();
            }
          });
          m.async(i);
        }, function () {
          e.__exclude__ = null;
          if (b.isFinish) {
            h(b, true);
            return b.dispatch("error");
          }
          o(b);
          h(b, true);
          a();
        });
      };
    }, {
      "./pack-manager": 47,
      "./parser": 48,
      "./pipeline": 49,
      "./shared": 53,
      "./task": 54,
      "./utilities": 56
    }],
    47: [function (b, d) {
      "use strict";
  
      var f = b("../platform/deserialize-compiled");
      var g = b("./downloader");
      var e = b("./cache");
      var i = b("../platform/js");
      var j = b("./shared").files;
      var a = new e();
      function k(b) {
        return a.has(b.uuid);
      }
      var c = {
        unpackJson: function (b, g, j, k) {
          var m = i.createMap(true);
          var n = null;
          if (Array.isArray(g)) {
            (g = (0, f.unpackJSONs)(g)).length;
            b.length;
            for (var q = 0; q < b.length; q++) {
              m[b[q] + "@import"] = g[q];
            }
          } else {
            var r = i._getClassId(cc.Texture2D);
            if (g.type === r) {
              if (g.data) {
                var l = g.data.split("|");
                l.length;
                b.length;
                if (!cc.sys.capabilities.webp) {
                  for (var h = 0, s = l.length; h < s; h++) {
                    var t = l[h];
                    var w = t.indexOf(",");
                    var x = t.substring(0, w);
                    x = x.replace("4_", "");
                    l[h] = x + t.substring(w);
                  }
                }
                for (var y = 0; y < b.length; y++) {
                  m[b[y] + "@import"] = (0, f.packCustomObjData)(r, l[y], true);
                }
              }
            } else {
              n = Error("unmatched type pack!");
              m = null;
            }
          }
          if (k) {
            k(n, m);
          }
        },
        init: function () {
          a.clear();
        },
        register: function (a, b) {
          if (typeof a == "object") {
            i.mixin(l, a);
          } else {
            l[a] = b;
          }
        },
        unpack: function (a, b, c, d, e) {
          if (b) {
            (0, l[c])(a, b, d, e);
          } else if (e) {
            e(Error("package data is wrong!"));
          }
        },
        load: function (b, d, e) {
          if (b.isNative || !b.info || !b.info.packs) {
            return g.download(b.id, b.url, b.ext, b.options, e);
          }
          if (j.has(b.id)) {
            return e(null, j.get(b.id));
          }
          var f = b.info.packs;
          var m = f.find(k);
          if (m) {
            return a.get(m.uuid).push({
              onComplete: e,
              id: b.id
            });
          }
          m = f[0];
          a.add(m.uuid, [{
            onComplete: e,
            id: b.id
          }]);
          var i = cc.assetManager._transform(m.uuid, {
            ext: m.ext,
            bundle: b.config.name
          });
          g.download(m.uuid, i, m.ext, b.options, function (d, e) {
            j.remove(m.uuid);
            c.unpack(m.packs, e, m.ext, b.options, function (b, d) {
              if (b) {
                b.message = "unpack " + i + " failed! details: " + b.message;
              } else {
                for (var e in d) {
                  j.add(e, d[e]);
                }
              }
              for (var f = a.remove(m.uuid), g = 0, h = f.length; g < h; g++) {
                var c = f[g];
                if (b) {
                  c.onComplete(b);
                } else {
                  var k = d[c.id];
                  if (k) {
                    c.onComplete(null, k);
                  } else {
                    c.onComplete(Error("can not retrieve data from package"));
                  }
                }
              }
            });
          });
        }
      };
      var l = {
        ".json": c.unpackJson
      };
      d.exports = c;
    }, {
      "../platform/deserialize-compiled": 177,
      "../platform/js": 183,
      "./cache": 33,
      "./downloader": 40,
      "./shared": 53
    }],
    48: [function (b, g) {
      "use strict";
  
      var j = b("../platform/CCSAXParser").plistParser;
      var e = b("../platform/js");
      var i = b("./deserialize");
      var k = b("./cache");
      var m = b("./helper").isScene;
      var a = b("./shared");
      var q = a.parsed;
      var c = a.files;
      var l = b("../platform/CCSys");
      var h = l.__audioSupport;
      var o = l.capabilities;
      var f = new k();
      var d = {
        parseImage: function (a, b, c) {
          if (o.imageBitmap && a instanceof Blob) {
            var d = {
              imageOrientation: b.__flipY__ ? "flipY" : "none",
              premultiplyAlpha: b.__premultiplyAlpha__ ? "premultiply" : "none"
            };
            createImageBitmap(a, d).then(function (a) {
              a.flipY = !!b.__flipY__;
              a.premultiplyAlpha = !!b.__premultiplyAlpha__;
              if (c) {
                c(null, a);
              }
            }, function (a) {
              if (c) {
                c(a, null);
              }
            });
          } else if (c) {
            c(null, a);
          }
        },
        parseAudio: function (a, b, c) {
          if (a instanceof ArrayBuffer && h.WEB_AUDIO) {
            h.context.decodeAudioData(a, function (a) {
              if (c) {
                c(null, a);
              }
            }, function (a) {
              if (c) {
                c(a, null);
              }
            });
          } else if (c) {
            c(null, a);
          }
        },
        parsePVRTex: function (b, d, e) {
          var f = null;
          var g = null;
          try {
            var h = b instanceof ArrayBuffer ? b : b.buffer;
            var i = new Int32Array(h, 0, 13);
            if (i[0] != 55727696) {
              throw Error("Invalid magic number in PVR header");
            }
            var a = i[7];
            var j = i[6];
            var c = i[12] + 52;
            g = {
              _data: new Uint8Array(h, c),
              _compressed: true,
              width: a,
              height: j
            };
          } catch (a) {
            f = a;
          }
          if (e) {
            e(f, g);
          }
        },
        parsePKMTex: function () {
          function b(a, b) {
            return a[b] << 8 | a[b + 1];
          }
          return function (d, e, f) {
            var g = null;
            var i = null;
            try {
              var j = d instanceof ArrayBuffer ? d : d.buffer;
              var a = new Uint8Array(j);
              var k = b(a, 6);
              if (k !== 0 && k !== 1 && k !== 3) {
                return Error("Invalid magic number in ETC header");
              }
              var c = b(a, 12);
              var l = b(a, 14);
              b(a, 8);
              b(a, 10);
              i = {
                _data: new Uint8Array(j, 16),
                _compressed: true,
                width: c,
                height: l
              };
            } catch (a) {
              g = a;
            }
            if (f) {
              f(g, i);
            }
          };
        }(),
        parseASTCTex: function () {
          function b(a, b) {
            if (a === 4) {
              return cc.Texture2D.PixelFormat.RGBA_ASTC_4x4;
            } else if (a === 5) {
              if (b === 4) {
                return cc.Texture2D.PixelFormat.RGBA_ASTC_5x4;
              } else {
                return cc.Texture2D.PixelFormat.RGBA_ASTC_5x5;
              }
            } else if (a === 6) {
              if (b === 5) {
                return cc.Texture2D.PixelFormat.RGBA_ASTC_6x5;
              } else {
                return cc.Texture2D.PixelFormat.RGBA_ASTC_6x6;
              }
            } else if (a === 8) {
              if (b === 5) {
                return cc.Texture2D.PixelFormat.RGBA_ASTC_8x5;
              } else if (b === 6) {
                return cc.Texture2D.PixelFormat.RGBA_ASTC_8x6;
              } else {
                return cc.Texture2D.PixelFormat.RGBA_ASTC_8x8;
              }
            } else if (a === 10) {
              if (b === 5) {
                return cc.Texture2D.PixelFormat.RGBA_ASTC_10x5;
              } else if (b === 6) {
                return cc.Texture2D.PixelFormat.RGBA_ASTC_10x6;
              } else if (b === 8) {
                return cc.Texture2D.PixelFormat.RGBA_ASTC_10x8;
              } else {
                return cc.Texture2D.PixelFormat.RGBA_ASTC_10x10;
              }
            } else if (b === 10) {
              return cc.Texture2D.PixelFormat.RGBA_ASTC_12x10;
            } else {
              return cc.Texture2D.PixelFormat.RGBA_ASTC_12x12;
            }
          }
          return function (g, e, i) {
            var j = null;
            var k = null;
            try {
              var m = g instanceof ArrayBuffer ? g : g.buffer;
              var a = new Uint8Array(m);
              if (a[0] + (a[1] << 8) + (a[2] << 16) + (a[3] << 24) !== 1554098963) {
                return Error("Invalid magic number in ASTC header");
              }
              var n = a[4];
              var c = a[5];
              var l = a[6];
              if ((n < 3 || n > 6 || c < 3 || c > 6 || l < 3 || l > 6) && (n < 4 || n === 7 || n === 9 || n === 11 || n > 12 || c < 4 || c === 7 || c === 9 || c === 11 || c > 12 || l !== 1)) {
                return Error("Invalid block number in ASTC header");
              }
              var h = b(n, c);
              var o = a[7] + (a[8] << 8) + (a[9] << 16);
              var f = a[10] + (a[11] << 8) + (a[12] << 16);
              a[13];
              a[14];
              a[15];
              k = {
                _data: new Uint8Array(m, 16),
                _compressed: true,
                width: o,
                height: f,
                format: h
              };
            } catch (a) {
              j = a;
            }
            i(j, k);
          };
        }(),
        parsePlist: function (a, b, c) {
          var d = null;
          var e = j.parse(a);
          if (!e) {
            d = Error("parse failed");
          }
          if (c) {
            c(d, e);
          }
        },
        parseImport: function (a, b, c) {
          if (!a) {
            return c && c(Error("Json is empty"));
          }
          var d;
          var e = null;
          try {
            d = i(a, b);
          } catch (b) {
            e = b;
          }
          if (c) {
            c(e, d);
          }
        },
        init: function () {
          f.clear();
        },
        register: function (a, b) {
          if (typeof a == "object") {
            e.mixin(u, a);
          } else {
            u[a] = b;
          }
        },
        parse: function (a, b, d, e, g) {
          var i;
          var j;
          var k;
          if (i = q.get(a)) {
            g(null, i);
          } else if (j = f.get(a)) {
            j.push(g);
          } else if (k = u[d]) {
            f.add(a, [g]);
            k(b, e, function (b, d) {
              if (b) {
                c.remove(a);
              } else if (!m(d)) {
                q.add(a, d);
              }
              for (var e = f.remove(a), g = 0, h = e.length; g < h; g++) {
                e[g](b, d);
              }
            });
          } else {
            g(null, b);
          }
        }
      };
      var u = {
        ".png": d.parseImage,
        ".jpg": d.parseImage,
        ".bmp": d.parseImage,
        ".jpeg": d.parseImage,
        ".gif": d.parseImage,
        ".ico": d.parseImage,
        ".tiff": d.parseImage,
        ".webp": d.parseImage,
        ".image": d.parseImage,
        ".pvr": d.parsePVRTex,
        ".pkm": d.parsePKMTex,
        ".astc": d.parseASTCTex,
        ".mp3": d.parseAudio,
        ".ogg": d.parseAudio,
        ".wav": d.parseAudio,
        ".m4a": d.parseAudio,
        ".plist": d.parsePlist,
        import: d.parseImport
      };
      g.exports = d;
    }, {
      "../platform/CCSAXParser": 169,
      "../platform/CCSys": 171,
      "../platform/js": 183,
      "./cache": 33,
      "./deserialize": 36,
      "./helper": 44,
      "./shared": 53
    }],
    49: [function (a, b) {
      "use strict";
  
      var c = a("./task");
      var d = 0;
      function e(a, b) {
        if (Array.isArray(b)) {
          this.id = d++;
          this.name = a;
          this.pipes = [];
          for (var c = 0, e = b.length; c < e; c++) {
            if (typeof b[c] == "function") {
              this.pipes.push(b[c]);
            }
          }
        }
      }
      e.prototype = {
        constructor: e,
        insert: function (a, b) {
          if (!(typeof a != "function" || b > this.pipes.length)) {
            this.pipes.splice(b, 0, a);
            return this;
          }
        },
        append: function (a) {
          if (typeof a == "function") {
            this.pipes.push(a);
            return this;
          }
        },
        remove: function (a) {
          if (typeof a == "number") {
            this.pipes.splice(a, 1);
            return this;
          }
        },
        sync: function (a) {
          var b = this.pipes;
          if (a instanceof c && b.length !== 0) {
            if (a.output != null) {
              a.input = a.output;
              a.output = null;
            }
            a._isFinish = false;
            for (var d = 0, e = b.length; d < e;) {
              var f = (0, b[d])(a);
              if (f) {
                a._isFinish = true;
                return f;
              }
              if (++d !== e) {
                a.input = a.output;
                a.output = null;
              }
            }
            a._isFinish = true;
            return a.output;
          }
        },
        async: function (a) {
          var b = this.pipes;
          if (a instanceof c && b.length !== 0) {
            if (a.output != null) {
              a.input = a.output;
              a.output = null;
            }
            a._isFinish = false;
            this._flow(0, a);
          }
        },
        _flow: function (a, b) {
          var c = this;
          (0, this.pipes[a])(b, function (d) {
            if (d) {
              b._isFinish = true;
              if (b.onComplete) {
                b.onComplete(d);
              }
            } else if (++a < c.pipes.length) {
              b.input = b.output;
              b.output = null;
              c._flow(a, b);
            } else {
              b._isFinish = true;
              if (b.onComplete) {
                b.onComplete(d, b.output);
              }
            }
          });
        }
      };
      b.exports = e;
    }, {
      "./task": 54
    }],
    50: [function (a, b) {
      "use strict";
  
      var d = a("./task");
      var c = a("./shared");
      var e = c.transformPipeline;
      var f = c.RequestType;
      b.exports = function (b, g) {
        var i = b.options;
        var j = Object.create(null);
        var a = Object.create(null);
        for (var k in i) {
          switch (k) {
            case f.PATH:
            case f.UUID:
            case f.DIR:
            case f.SCENE:
            case f.URL:
              break;
            case "__requestType__":
            case "__isNative__":
            case "ext":
            case "type":
            case "__nativeName__":
            case "audioLoadMode":
            case "bundle":
              j[k] = i[k];
              break;
            case "__exclude__":
            case "__outputAsArray__":
              a[k] = i[k];
              break;
            default:
              j[k] = i[k];
              a[k] = i[k];
          }
        }
        b.options = a;
        var m = d.create({
          input: b.input,
          options: j
        });
        var l = null;
        try {
          b.output = b.source = e.sync(m);
        } catch (a) {
          l = a;
          for (var n = 0, o = m.output.length; n < o; n++) {
            m.output[n].recycle();
          }
        }
        m.recycle();
        g(l);
      };
    }, {
      "./shared": 53,
      "./task": 54
    }],
    51: [function (b, g) {
      "use strict";
  
      var j = b("./depend-util");
      var e = b("./cache");
      b("../assets/CCAsset");
      var k = b("./shared").assets;
      var i = b("../platform/utils").callInNextTick;
      function m(a, b) {
        if (a._uuid) {
          b.push(a._uuid);
        }
      }
      function a(a, b) {
        for (var d = Object.getOwnPropertyNames(a), e = 0; e < d.length; e++) {
          var f = d[e];
          if (f !== "node" && f !== "__eventTargets") {
            var g = a[f];
            if (typeof g == "object" && g) {
              if (Array.isArray(g)) {
                for (var i = 0; i < g.length; i++) {
                  var j = g[i];
                  if (j instanceof cc.Asset) {
                    m(j, b);
                  }
                }
              } else if (g.constructor && g.constructor !== Object) {
                if (g instanceof cc.Asset) {
                  m(g, b);
                }
              } else {
                for (var k = Object.getOwnPropertyNames(g), p = 0; p < k.length; p++) {
                  var q = g[k[p]];
                  if (q instanceof cc.Asset) {
                    m(q, b);
                  }
                }
              }
            }
          }
        }
      }
      var n = [];
      function c(b, d) {
        for (var e = 0; e < b._components.length; e++) {
          a(b._components[e], d);
        }
        for (var f = 0; f < b._children.length; f++) {
          c(b._children[f], d);
        }
      }
      function o(b, d, e, f) {
        e.push(b._uuid);
        for (var g = j.getDeps(b._uuid), a = 0, h = g.length; a < h; a++) {
          var c = k.get(g[a]);
          if (c) {
            var i = c._uuid;
            if (i in d) {
              d[i] += f;
            } else {
              d[i] = c.refCount + f;
            }
            if (e.includes(i)) {
              continue;
            }
            o(c, d, e, f);
          }
        }
      }
      function h(a) {
        var b = Object.create(null);
        b[a._uuid] = a.refCount;
        o(a, b, n, -1);
        n.length = 0;
        if (b[a._uuid] !== 0) {
          return b[a._uuid];
        }
        for (var c in b) {
          if (b[c] !== 0) {
            o(k.get(c), b, n, 1);
          }
        }
        n.length = 0;
        return b[a._uuid];
      }
      var l = new e();
      var f = new e();
      var d = false;
      function q() {
        d = false;
        f.forEach(function (a) {
          p._free(a);
        });
        f.clear();
      }
      var p = {
        init: function () {
          l.clear();
          f.clear();
        },
        _addPersistNodeRef: function (a) {
          var b = [];
          c(a, b);
          for (var d = 0, e = b.length; d < e; d++) {
            var f = k.get(b[d]);
            if (f) {
              f.addRef();
            }
          }
          l.add(a.uuid, b);
        },
        _removePersistNodeRef: function (a) {
          if (l.has(a.uuid)) {
            for (var b = l.get(a.uuid), c = 0, d = b.length; c < d; c++) {
              var e = k.get(b[c]);
              if (e) {
                e.decRef();
              }
            }
            l.remove(a.uuid);
          }
        },
        _autoRelease: function (b, f, e) {
          if (b) {
            for (var i = j.getDeps(b._id), n = 0, q = i.length; n < q; n++) {
              var o = k.get(i[n]);
              if (o) {
                o.decRef(b.autoReleaseAssets);
              }
            }
            var r = j._depends.get(b._id);
            if (r && r.persistDeps) {
              for (var s = r.persistDeps, h = 0, t = s.length; h < t; h++) {
                var d = k.get(s[h]);
                if (d) {
                  d.decRef(b.autoReleaseAssets);
                }
              }
            }
            if (b._id !== f._id) {
              j.remove(b._id);
            }
          }
          var w = j._depends.get(f._id);
          if (w) {
            w.persistDeps = [];
          }
          for (var p in e) {
            for (var x = e[p], z = l.get(x.uuid), A = 0, B = z.length; A < B; A++) {
              var C = k.get(z[A]);
              if (C) {
                C.addRef();
              }
            }
            if (w) {
              w.persistDeps.push.apply(w.persistDeps, z);
            }
          }
        },
        _free: function (b, c) {
          f.remove(b._uuid);
          if (cc.isValid(b, true) && !(!c && b.refCount > 0 && h(b) > 0)) {
            k.remove(b._uuid);
            for (var d = j.getDeps(b._uuid), e = 0, g = d.length; e < g; e++) {
              var a = k.get(d[e]);
              if (a) {
                a.decRef(false);
                p._free(a, false);
              }
            }
            b.destroy();
            j.remove(b._uuid);
          }
        },
        tryRelease: function (a, b) {
          if (a instanceof cc.Asset) {
            if (b) {
              p._free(a, b);
            } else {
              f.add(a._uuid, a);
              if (!d) {
                d = true;
                i(q);
              }
            }
          }
        }
      };
      g.exports = p;
    }, {
      "../assets/CCAsset": 57,
      "../platform/utils": 186,
      "./cache": 33,
      "./depend-util": 35,
      "./shared": 53
    }],
    52: [function (a, b) {
      "use strict";
  
      var c = [];
      function d() {
        this._id = "";
        this.uuid = "";
        this.url = "";
        this.ext = ".json";
        this.content = null;
        this.file = null;
        this.info = null;
        this.config = null;
        this.isNative = false;
        this.options = Object.create(null);
      }
      d.prototype = {
        constructor: d,
        get id() {
          if (!this._id) {
            this._id = this.uuid + "@" + (this.isNative ? "native" : "import");
          }
          return this._id;
        },
        recycle: function () {
          if (c.length !== 500) {
            this._id = "";
            this.uuid = "";
            this.url = "";
            this.ext = ".json";
            this.content = null;
            this.file = null;
            this.info = null;
            this.config = null;
            this.isNative = false;
            this.options = Object.create(null);
            c.push(this);
          }
        }
      };
      d.create = function () {
        if (c.length !== 0) {
          return c.pop();
        } else {
          return new d();
        }
      };
      b.exports = d;
    }, {}],
    53: [function (b, d) {
      "use strict";
  
      var e = b("./cache");
      var f = b("./pipeline");
      var g = new e();
      var i = new e();
      var j = new e();
      var a = new e();
      var k = new f("normal load", []);
      var c = new f("fetch", []);
      var l = new f("transform url", []);
      d.exports = {
        assets: g,
        files: i,
        parsed: j,
        pipeline: k,
        fetchPipeline: c,
        transformPipeline: l,
        RequestType: {
          UUID: "uuid",
          PATH: "path",
          DIR: "dir",
          URL: "url",
          SCENE: "scene"
        },
        bundles: a,
        BuiltinBundleName: {
          RESOURCES: "resources",
          INTERNAL: "internal",
          MAIN: "main",
          START_SCENE: "start-scene"
        }
      };
    }, {
      "./cache": 33,
      "./pipeline": 49
    }],
    54: [function (a, b) {
      "use strict";
  
      var c = 0;
      var d = [];
      function e(a) {
        this.id = c++;
        this._isFinish = true;
        this.onComplete = null;
        this.onProgress = null;
        this.onError = null;
        this.source = null;
        this.output = null;
        this.input = null;
        this.progress = null;
        this.options = null;
        this.set(a);
      }
      e.prototype = {
        constructor: e,
        set: function (a) {
          a = a || Object.create(null);
          this.onComplete = a.onComplete;
          this.onProgress = a.onProgress;
          this.onError = a.onError;
          this.source = this.input = a.input;
          this.output = null;
          this.progress = a.progress;
          this.options = a.options || Object.create(null);
        },
        dispatch: function (a, b, c, d, e) {
          switch (a) {
            case "complete":
              if (this.onComplete) {
                this.onComplete(b, c, d, e);
              }
              break;
            case "progress":
              if (this.onProgress) {
                this.onProgress(b, c, d, e);
              }
              break;
            case "error":
              if (this.onError) {
                this.onError(b, c, d, e);
              }
              break;
            default:
              var f = "on" + a[0].toUpperCase() + a.substr(1);
              if (typeof this[f] == "function") {
                this[f](b, c, d, e);
              }
          }
        },
        recycle: function () {
          if (d.length !== 500) {
            this.onComplete = null;
            this.onProgress = null;
            this.onError = null;
            this.source = this.output = this.input = null;
            this.progress = null;
            this.options = null;
            d.push(this);
          }
        },
        get isFinish() {
          return this._isFinish;
        }
      };
      e.create = function (a) {
        var b = null;
        if (d.length !== 0) {
          (b = d.pop()).set(a);
        } else {
          b = new e(a);
        }
        return b;
      };
      b.exports = e;
    }, {}],
    55: [function (b, c) {
      "use strict";
  
      var g = b("./helper").decodeUuid;
      var i = b("./request-item");
      var d = b("./shared");
      var j = d.RequestType;
      var k = d.bundles;
      c.exports = {
        parse: function (a) {
          var b = a.input;
          var m = a.options;
          b = Array.isArray(b) ? b : [b];
          a.output = [];
          for (var n = 0; n < b.length; n++) {
            var q = b[n];
            var r = i.create();
            if (typeof q == "string") {
              (q = Object.create(null))[m.__requestType__ || j.UUID] = b[n];
            }
            if (typeof q == "object") {
              cc.js.addon(q, m);
              if (q.preset) {
                cc.js.addon(q, cc.assetManager.presets[q.preset]);
              }
              for (var s in q) {
                switch (s) {
                  case j.UUID:
                    var t = r.uuid = g(q.uuid);
                    if (k.has(q.bundle)) {
                      if ((z = (A = k.get(q.bundle)._config).getAssetInfo(t)) && z.redirect) {
                        if (!k.has(z.redirect)) {
                          throw Error("Please load bundle " + z.redirect + " first");
                        }
                        z = (A = k.get(z.redirect)._config).getAssetInfo(t);
                      }
                      r.config = A;
                      r.info = z;
                    }
                    r.ext = q.ext || ".json";
                    break;
                  case "__requestType__":
                  case "ext":
                  case "bundle":
                  case "preset":
                  case "type":
                    break;
                  case j.DIR:
                    if (k.has(q.bundle)) {
                      var w = [];
                      k.get(q.bundle)._config.getDirWithPath(q.dir, q.type, w);
                      for (var x = 0, y = w.length; x < y; x++) {
                        var z = w[x];
                        b.push({
                          uuid: z.uuid,
                          __isNative__: false,
                          ext: ".json",
                          bundle: q.bundle
                        });
                      }
                    }
                    r.recycle();
                    r = null;
                    break;
                  case j.PATH:
                    if (k.has(q.bundle)) {
                      if ((z = (A = k.get(q.bundle)._config).getInfoWithPath(q.path, q.type)) && z.redirect) {
                        if (!k.has(z.redirect)) {
                          throw Error("you need to load bundle " + z.redirect + " first");
                        }
                        z = (A = k.get(z.redirect)._config).getAssetInfo(z.uuid);
                      }
                      if (!z) {
                        r.recycle();
                        throw Error("Bundle " + q.bundle + " doesn't contain " + q.path);
                      }
                      r.config = A;
                      r.uuid = z.uuid;
                      r.info = z;
                    }
                    r.ext = q.ext || ".json";
                    break;
                  case j.SCENE:
                    if (k.has(q.bundle)) {
                      var A;
                      if ((z = (A = k.get(q.bundle)._config).getSceneInfo(q.scene)) && z.redirect) {
                        if (!k.has(z.redirect)) {
                          throw Error("you need to load bundle " + z.redirect + " first");
                        }
                        z = (A = k.get(z.redirect)._config).getAssetInfo(z.uuid);
                      }
                      if (!z) {
                        r.recycle();
                        throw Error("Bundle " + A.name + " doesn't contain scene " + q.scene);
                      }
                      r.config = A;
                      r.uuid = z.uuid;
                      r.info = z;
                    }
                    break;
                  case "__isNative__":
                    r.isNative = q.__isNative__;
                    break;
                  case j.URL:
                    r.url = q.url;
                    r.uuid = q.uuid || q.url;
                    r.ext = q.ext || cc.path.extname(q.url);
                    r.isNative = q.__isNative__ === undefined || q.__isNative__;
                    break;
                  default:
                    r.options[s] = q[s];
                }
                if (!r) {
                  break;
                }
              }
            }
            if (r && (a.output.push(r), !r.uuid && !r.url)) {
              throw Error("Can not parse this input:" + JSON.stringify(q));
            }
          }
          return null;
        },
        combine: function (b) {
          for (var d = b.output = b.input, e = 0; e < d.length; e++) {
            var f = d[e];
            if (!f.url) {
              var g;
              var h;
              var j = f.config;
              h = f.isNative ? j && j.nativeBase ? j.base + j.nativeBase : cc.assetManager.generalNativeBase : j && j.importBase ? j.base + j.importBase : cc.assetManager.generalImportBase;
              var k = f.uuid;
              var l = "";
              if (f.info) {
                l = f.isNative ? f.info.nativeVer ? "." + f.info.nativeVer : "" : f.info.ver ? "." + f.info.ver : "";
              }
              g = f.ext === ".ttf" ? h + "/" + k.slice(0, 2) + "/" + k + l + "/" + f.options.__nativeName__ : h + "/" + k.slice(0, 2) + "/" + k + l + f.ext;
              f.url = g;
            }
          }
          return null;
        }
      };
    }, {
      "./helper": 44,
      "./request-item": 52,
      "./shared": 53
    }],
    56: [function (b, d) {
      "use strict";
  
      var g = b("./depend-util");
      var e = b("./helper");
      var f = e.isScene;
      var h = e.decodeUuid;
      var i = b("./shared").assets;
      var a = b("../platform/utils").callInNextTick;
      b("../assets/CCAsset");
      var j = {
        processOptions: function (j) {
          var k = j.uuids;
          var q = j.paths;
          var i = j.types;
          var n = j.deps;
          var r = j.paths = Object.create(null);
          if (j.debug === false) {
            for (var a = 0, s = k.length; a < s; a++) {
              k[a] = h(k[a]);
            }
            for (var c in q) {
              var t = q[c];
              var z = t[1];
              t[1] = i[z];
            }
          } else {
            for (var B = Object.create(null), f = 0, D = k.length; f < D; f++) {
              var F = k[f];
              k[f] = B[F] = h(F);
            }
            k = B;
          }
          for (var G in q) {
            var H = q[G];
            r[k[G]] = H;
          }
          var J = j.scenes;
          for (var m in J) {
            var K = J[m];
            J[m] = k[K];
          }
          var L = j.packs;
          for (var E in L) {
            for (var N = L[E], P = 0; P < N.length; ++P) {
              N[P] = k[N[P]];
            }
          }
          var Q = j.versions;
          if (Q) {
            for (var b in Q) {
              for (var U = Q[b], V = 0; V < U.length; V += 2) {
                var W = U[V];
                U[V] = k[W] || W;
              }
            }
          }
          var X = j.redirect;
          if (X) {
            for (var I = 0; I < X.length; I += 2) {
              X[I] = k[X[I]];
              X[I + 1] = n[X[I + 1]];
            }
          }
        },
        clear: function (a, b) {
          for (var c = 0, d = a.input.length; c < d; c++) {
            var e = a.input[c];
            if (b && !e.isNative && e.content && e.content.decRef) {
              e.content.decRef(false);
            }
            e.recycle();
          }
          a.input = null;
        },
        retry: function (a, b, c, d, e) {
          a(e = e || 0, function (f, g) {
            e++;
            if (!f || e > b) {
              if (d) {
                d(f, g);
              }
            } else {
              // TOLOOK
              setTimeout(function () {
                j.retry(a, b, c, d, e);
              }, c);
            }
          });
        },
        getDepends: function (b, i, e, j, k, m, n) {
          try {
            var o = g.parse(b, i);
            var c = true;
            if (i instanceof cc.Asset && (!i.__nativeDepend__ || i._nativeAsset)) {
              c = false;
            }
            if (k) {
              for (var q = 0, r = o.deps.length; q < r; q++) {
                var s = o.deps[q];
                if (!(s in e)) {
                  e[s] = true;
                  j.push({
                    uuid: s,
                    bundle: n && n.name
                  });
                }
              }
              if (c && o.nativeDep) {
                if (n) {
                  o.nativeDep.bundle = n.name;
                }
                j.push(Object.assign({}, o.nativeDep));
              }
            } else {
              m = !!i.asyncLoadAssets || m && !o.preventDeferredLoadDependents;
              for (var t = 0, u = o.deps.length; t < u; t++) {
                var v = o.deps[t];
                if (!(v in e)) {
                  e[v] = true;
                  j.push({
                    uuid: v,
                    __asyncLoadAssets__: m,
                    bundle: n && n.name
                  });
                }
              }
              if (c && !m && !o.preventPreloadNativeObject && o.nativeDep) {
                if (n) {
                  o.nativeDep.bundle = n.name;
                }
                j.push(Object.assign({}, o.nativeDep));
              }
            }
          } catch (a) {}
        },
        cache: function (a, b, c) {
          if (b && !f(b) && c) {
            i.add(a, b);
          }
        },
        setProperties: function (b, d, e) {
          var f = false;
          var g = d.__depends__;
          if (g) {
            for (var h = 0, i = g.length; h < i; h++) {
              var a = g[h];
              var j = e[a.uuid + "@import"];
              if (j) {
                a.owner[a.prop] = j.addRef();
              } else {
                f = true;
              }
            }
            d.__depends__ = undefined;
          }
          if (d.__nativeDepend__) {
            if (!d._nativeAsset) {
              if (e[b + "@native"]) {
                d._nativeAsset = e[b + "@native"];
              } else {
                f = true;
              }
            }
            d.__nativeDepend__ = undefined;
          }
          return f;
        },
        gatherAsset: function (a) {
          var b = a.source;
          if (a.options.__outputAsArray__ || b.length !== 1) {
            for (var c = a.output = [], d = 0, e = b.length; d < e; d++) {
              c.push(b[d].content);
            }
          } else {
            a.output = b[0].content;
          }
        },
        forEach: function (b, c, d) {
          var e = 0;
          var f = [];
          if (b.length === 0 && d) {
            d(f);
          }
          for (var g = 0, h = b.length; g < h; g++) {
            c(b[g], function (a) {
              if (a) {
                f.push(a);
              }
              if (++e === h && d) {
                d(f);
              }
            });
          }
        },
        parseParameters: function (a, b, c) {
          if (c === undefined) {
            var d = typeof a == "function";
            if (b) {
              c = b;
              if (!d) {
                b = null;
              }
            } else if (b === undefined && d) {
              c = a;
              a = null;
              b = null;
            }
            if (b !== undefined && d) {
              b = a;
              a = null;
            }
          }
          return {
            options: a = a || Object.create(null),
            onProgress: b,
            onComplete: c
          };
        },
        parseLoadResArgs: function (a, b, c) {
          if (c === undefined) {
            var d = cc.js.isChildClassOf(a, cc.Asset);
            if (b) {
              c = b;
              if (d) {
                b = null;
              }
            } else if (!(b !== undefined || d)) {
              c = a;
              b = null;
              a = null;
            }
            if (!(b === undefined || d)) {
              b = a;
              a = null;
            }
          }
          return {
            type: a,
            onProgress: b,
            onComplete: c
          };
        },
        checkCircleReference: function (b, c, d, e) {
          if (!e) {
            e = Object.create(null);
          }
          if (!d[c] || e[c]) {
            return false;
          }
          e[c] = true;
          var f = false;
          var i = g.getDeps(c);
          if (i) {
            for (var a = 0, k = i.length; a < k; a++) {
              var l = i[a];
              if (l === b || j.checkCircleReference(b, l, d, e)) {
                f = true;
                break;
              }
            }
          }
          return f;
        },
        asyncify: function (b) {
          return function (c, d) {
            if (b) {
              var e = [];
              if (Array.isArray(d)) {
                d.forEach(function (a) {
                  return a instanceof cc.Asset && e.push(a.addRef());
                });
              } else if (d instanceof cc.Asset) {
                e.push(d.addRef());
              }
              a(function () {
                e.forEach(function (a) {
                  return a.decRef(false);
                });
                b(c, d);
              });
            }
          };
        }
      };
      d.exports = j;
    }, {
      "../assets/CCAsset": 57,
      "../platform/utils": 186,
      "./depend-util": 35,
      "./helper": 44,
      "./shared": 53
    }],
    57: [function (a, b) {
      "use strict";
  
      var c = a("../platform/CCObject");
      cc.Asset = cc.Class({
        name: "cc.Asset",
        extends: c,
        ctor: function () {
          Object.defineProperty(this, "_uuid", {
            value: "",
            writable: true
          });
          this.loaded = true;
          this._nativeUrl = "";
          this._ref = 0;
        },
        properties: {
          nativeUrl: {
            get: function () {
              if (!this._nativeUrl && this._native) {
                var a = this._native;
                if (a.charCodeAt(0) === 47) {
                  return a.slice(1);
                }
                if (a.charCodeAt(0) === 46) {
                  this._nativeUrl = cc.assetManager.utils.getUrlWithUuid(this._uuid, {
                    nativeExt: a,
                    isNative: true
                  });
                } else {
                  this._nativeUrl = cc.assetManager.utils.getUrlWithUuid(this._uuid, {
                    __nativeName__: a,
                    nativeExt: cc.path.extname(a),
                    isNative: true
                  });
                }
              }
              return this._nativeUrl;
            },
            visible: false
          },
          refCount: {
            get: function () {
              return this._ref;
            }
          },
          _native: "",
          _nativeAsset: {
            get: function () {
              return this._$nativeAsset;
            },
            set: function (a) {
              this._$nativeAsset = a;
            }
          },
          _nativeDep: {
            get: function () {
              if (this._native) {
                return {
                  __isNative__: true,
                  uuid: this._uuid,
                  ext: this._native
                };
              }
            }
          }
        },
        statics: {
          deserialize: false,
          preventDeferredLoadDependents: false,
          preventPreloadNativeObject: false
        },
        toString: function () {
          return this.nativeUrl;
        },
        serialize: false,
        createNode: null,
        _setRawAsset: function (a, b) {
          this._native = b !== false ? a || undefined : "/" + a;
        },
        addRef: function () {
          this._ref++;
          return this;
        },
        decRef: function (a) {
          if (this._ref > 0) {
            this._ref--;
          }
          if (a !== false) {
            cc.assetManager._releaseManager.tryRelease(this);
          }
          return this;
        },
        destroy: function () {
          this.loaded = false;
          return this._super();
        }
      });
      b.exports = cc.Asset;
    }, {
      "../platform/CCObject": 168
    }],
    58: [function (a, b) {
      "use strict";
  
      var c = a("./CCAsset");
      var d = a("../event/event-target");
      var e = cc.Enum({
        WEB_AUDIO: 0,
        DOM_AUDIO: 1
      });
      var f = cc.Class({
        name: "cc.AudioClip",
        extends: c,
        mixins: [d],
        ctor: function () {
          this._loading = false;
          this.loaded = false;
          this._audio = null;
        },
        properties: {
          duration: 0,
          loadMode: {
            default: e.WEB_AUDIO,
            type: e
          },
          _nativeAsset: {
            get: function () {
              return this._audio;
            },
            set: function (a) {
              if (a instanceof cc.AudioClip) {
                this._audio = a._nativeAsset;
              } else {
                this._audio = a;
              }
              if (this._audio) {
                this.loaded = true;
                this.emit("load");
              }
            },
            override: true
          },
          _nativeDep: {
            get: function () {
              return {
                uuid: this._uuid,
                audioLoadMode: this.loadMode,
                ext: cc.path.extname(this._native),
                __isNative__: true
              };
            },
            override: true
          }
        },
        statics: {
          LoadMode: e,
          _loadByUrl: null
        },
        _ensureLoaded: function (a) {
          if (this.isValid) {
            if (this.loaded) {
              return a && a();
            }
            if (a) {
              this.once("load", a);
            }
            if (!this._loading) {
              this._loading = true;
              var b = this;
              cc.assetManager.postLoadNative(this, function () {
                b._loading = false;
              });
            }
          }
        }
      });
      cc.AudioClip = f;
      b.exports = f;
    }, {
      "../event/event-target": 134,
      "./CCAsset": 57
    }],
    59: [function (a, b) {
      "use strict";
  
      function c() {
        this.u = 0;
        this.v = 0;
        this.w = 0;
        this.h = 0;
        this.offsetX = 0;
        this.offsetY = 0;
        this.textureID = 0;
        this.valid = false;
        this.xAdvance = 0;
      }
      function d(a) {
        this._letterDefinitions = {};
        this._texture = a;
      }
      d.prototype = {
        constructor: d,
        addLetterDefinitions: function (a, b) {
          this._letterDefinitions[a] = b;
        },
        cloneLetterDefinition: function () {
          var a = {};
          for (var b in this._letterDefinitions) {
            var d = new c();
            cc.js.mixin(d, this._letterDefinitions[b]);
            a[b] = d;
          }
          return a;
        },
        getTexture: function () {
          return this._texture;
        },
        getLetter: function (a) {
          return this._letterDefinitions[a];
        },
        getLetterDefinitionForChar: function (a) {
          var b = a.charCodeAt(0);
          if (this._letterDefinitions.hasOwnProperty(b)) {
            return this._letterDefinitions[b];
          } else {
            return null;
          }
        },
        clear: function () {
          this._letterDefinitions = {};
        }
      };
      var e = cc.Class({
        name: "cc.BitmapFont",
        extends: cc.Font,
        properties: {
          fntDataStr: {
            default: ""
          },
          spriteFrame: {
            default: null,
            type: cc.SpriteFrame
          },
          fontSize: {
            default: -1
          },
          _fntConfig: null,
          _fontDefDictionary: null
        },
        onLoad: function () {
          var b = this.spriteFrame;
          if (!this._fontDefDictionary) {
            this._fontDefDictionary = new d();
            if (b) {
              this._fontDefDictionary._texture = b._texture;
            }
          }
          var f = this._fntConfig;
          if (f) {
            var e = f.fontDefDictionary;
            for (var g in e) {
              var h = new c();
              var i = e[g].rect;
              h.offsetX = e[g].xOffset;
              h.offsetY = e[g].yOffset;
              h.w = i.width;
              h.h = i.height;
              h.u = i.x;
              h.v = i.y;
              h.textureID = 0;
              h.valid = true;
              h.xAdvance = e[g].xAdvance;
              this._fontDefDictionary.addLetterDefinitions(g, h);
            }
          }
        }
      });
      cc.BitmapFont = e;
      cc.BitmapFont.FontLetterDefinition = c;
      cc.BitmapFont.FontAtlas = d;
      b.exports = e;
    }, {}],
    60: [function (a, b) {
      "use strict";
  
      var c = cc.Class({
        name: "cc.BufferAsset",
        extends: cc.Asset,
        ctor: function () {
          this._buffer = null;
        },
        properties: {
          _nativeAsset: {
            get: function () {
              return this._buffer;
            },
            set: function (a) {
              this._buffer = a.buffer || a;
            },
            override: true
          },
          buffer: function () {
            return this._buffer;
          }
        }
      });
      cc.BufferAsset = b.exports = c;
    }, {}],
    61: [function (a, b) {
      "use strict";
  
      var c = cc.Class({
        name: "cc.Font",
        extends: cc.Asset
      });
      cc.Font = b.exports = c;
    }, {}],
    62: [function (a, b) {
      "use strict";
  
      var c = cc.Class({
        name: "cc.JsonAsset",
        extends: cc.Asset,
        properties: {
          json: null
        }
      });
      b.exports = cc.JsonAsset = c;
    }, {}],
    63: [function (a, b) {
      "use strict";
  
      var c = cc.Class({
        name: "cc.LabelAtlas",
        extends: cc.BitmapFont,
        onLoad: function () {
          if (this.spriteFrame && this._fntConfig) {
            this._super();
          }
        }
      });
      cc.LabelAtlas = c;
      b.exports = c;
    }, {}],
    64: [function (a, b) {
      "use strict";
  
      var c = cc.Enum({
        AUTO: 0,
        SINGLE_INSTANCE: 1,
        MULTI_INSTANCE: 2
      });
      var d = cc.Class({
        name: "cc.Prefab",
        extends: cc.Asset,
        ctor: function () {
          this._createFunction = null;
          this._instantiatedTimes = 0;
        },
        properties: {
          data: null,
          optimizationPolicy: c.AUTO,
          asyncLoadAssets: false,
          readonly: {
            default: false,
            editorOnly: true
          }
        },
        statics: {
          OptimizationPolicy: c,
          OptimizationPolicyThreshold: 3
        },
        createNode: false,
        compileCreateFunction: function () {
          var b = a("../platform/instantiate-jit");
          this._createFunction = b.compile(this.data);
        },
        _doInstantiate: function (a) {
          this.data._prefab;
          if (!this._createFunction) {
            this.compileCreateFunction();
          }
          return this._createFunction(a);
        },
        _instantiate: function () {
          var a;
          if (this.optimizationPolicy !== c.SINGLE_INSTANCE && (this.optimizationPolicy === c.MULTI_INSTANCE || this._instantiatedTimes + 1 >= d.OptimizationPolicyThreshold)) {
            a = this._doInstantiate();
            this.data._instantiate(a);
          } else {
            a = this.data._instantiate();
          }
          ++this._instantiatedTimes;
          return a;
        },
        destroy: function () {
          if (this.data) {
            this.data.destroy();
          }
          this._super();
        }
      });
      cc.Prefab = b.exports = d;
      cc.js.obsolete(cc, "cc._Prefab", "Prefab");
    }, {
      "../platform/instantiate-jit": 181
    }],
    65: [function (b, c) {
      "use strict";
  
      var d;
      var f = (d = b("../../renderer/gfx")) && d.__esModule ? d : {
        default: d
      };
      var g = b("../renderer");
      var e = b("./CCTexture2D");
      var h = cc.Enum({
        RB_FMT_D24S8: f.default.RB_FMT_D24S8,
        RB_FMT_S8: f.default.RB_FMT_S8,
        RB_FMT_D16: f.default.RB_FMT_D16
      });
      var a = cc.Class({
        name: "cc.RenderTexture",
        extends: e,
        statics: {
          DepthStencilFormat: h
        },
        ctor: function () {
          this._framebuffer = null;
        },
        initWithSize: function (b, c, d) {
          this.width = Math.floor(b || cc.visibleRect.width);
          this.height = Math.floor(c || cc.visibleRect.height);
          this._resetUnderlyingMipmaps();
          var e;
          var h = {
            colors: [this._texture]
          };
          if (this._depthStencilBuffer) {
            this._depthStencilBuffer.destroy();
          }
          if (d) {
            e = new f.default.RenderBuffer(g.device, d, b, c);
            if (d === f.default.RB_FMT_D24S8) {
              h.depthStencil = e;
            } else if (d === f.default.RB_FMT_S8) {
              h.stencil = e;
            } else if (d === f.default.RB_FMT_D16) {
              h.depth = e;
            }
          }
          this._depthStencilBuffer = e;
          if (this._framebuffer) {
            this._framebuffer.destroy();
          }
          this._framebuffer = new f.default.FrameBuffer(g.device, b, c, h);
          this._packable = false;
          this.loaded = true;
          this.emit("load");
        },
        updateSize: function (a, b) {
          this.width = Math.floor(a || cc.visibleRect.width);
          this.height = Math.floor(b || cc.visibleRect.height);
          this._resetUnderlyingMipmaps();
          var c = this._depthStencilBuffer;
          if (c) {
            c.update(this.width, this.height);
          }
          this._framebuffer._width = a;
          this._framebuffer._height = b;
        },
        drawTextureAt: function (a, b, c) {
          if (a._image && a._image.width !== 0) {
            this._texture.updateSubImage({
              x: b,
              y: c,
              image: a._image,
              width: a.width,
              height: a.height,
              level: 0,
              flipY: false,
              premultiplyAlpha: a._premultiplyAlpha
            });
          }
        },
        readPixels: function (b, d, f, g, h) {
          if (!this._framebuffer || !this._texture) {
            return b;
          }
          d = d || 0;
          f = f || 0;
          var j = g || this.width;
          var k = h || this.height;
          b = b || new Uint8Array(j * k * 4);
          var a = cc.game._renderContext;
          var l = a.getParameter(a.FRAMEBUFFER_BINDING);
          a.bindFramebuffer(a.FRAMEBUFFER, this._framebuffer.getHandle());
          a.readPixels(d, f, j, k, a.RGBA, a.UNSIGNED_BYTE, b);
          a.bindFramebuffer(a.FRAMEBUFFER, l);
          return b;
        },
        destroy: function () {
          this._super();
          if (this._framebuffer) {
            this._framebuffer.destroy();
            this._framebuffer = null;
          }
        }
      });
      cc.RenderTexture = c.exports = a;
    }, {
      "../../renderer/gfx": 282,
      "../renderer": 193,
      "./CCTexture2D": 72
    }],
    66: [function (a, b) {
      "use strict";
  
      var c = cc.Class({
        name: "cc.SceneAsset",
        extends: cc.Asset,
        properties: {
          scene: null,
          asyncLoadAssets: undefined
        }
      });
      cc.SceneAsset = c;
      b.exports = c;
    }, {}],
    67: [function () {
      "use strict";
  
      var a = cc.Class({
        name: "cc.Script",
        extends: cc.Asset
      });
      cc._Script = a;
      var b = cc.Class({
        name: "cc.JavaScript",
        extends: a
      });
      cc._JavaScript = b;
      var c = cc.Class({
        name: "cc.TypeScript",
        extends: a
      });
      cc._TypeScript = c;
    }, {}],
    68: [function (a, b) {
      "use strict";
  
      var c = cc.Class({
        name: "cc.SpriteAtlas",
        extends: cc.Asset,
        properties: {
          _spriteFrames: {
            default: {}
          }
        },
        getTexture: function () {
          var a = Object.keys(this._spriteFrames);
          if (a.length > 0) {
            var b = this._spriteFrames[a[0]];
            if (b) {
              return b.getTexture();
            } else {
              return null;
            }
          }
          return null;
        },
        getSpriteFrame: function (a) {
          var b = this._spriteFrames[a];
          if (b) {
            if (!b.name) {
              b.name = a;
            }
            return b;
          } else {
            return null;
          }
        },
        getSpriteFrames: function () {
          var a = [];
          var b = this._spriteFrames;
          for (var c in b) {
            a.push(this.getSpriteFrame(c));
          }
          return a;
        }
      });
      cc.SpriteAtlas = c;
      b.exports = c;
    }, {}],
    69: [function (a, b) {
      "use strict";
  
      var c = a("../event/event-target");
      var j = [{
        u: 0,
        v: 0
      }, {
        u: 0,
        v: 0
      }, {
        u: 0,
        v: 0
      }, {
        u: 0,
        v: 0
      }];
      var d = cc.Class({
        name: "cc.SpriteFrame",
        extends: a("../assets/CCAsset"),
        mixins: [c],
        properties: {
          _textureSetter: {
            set: function (a) {
              if (a && this._texture !== a) {
                this._refreshTexture(a);
              }
            }
          },
          insetTop: {
            get: function () {
              return this._capInsets[1];
            },
            set: function (a) {
              this._capInsets[1] = a;
              if (this._texture) {
                this._calculateSlicedUV();
              }
            }
          },
          insetBottom: {
            get: function () {
              return this._capInsets[3];
            },
            set: function (a) {
              this._capInsets[3] = a;
              if (this._texture) {
                this._calculateSlicedUV();
              }
            }
          },
          insetLeft: {
            get: function () {
              return this._capInsets[0];
            },
            set: function (a) {
              this._capInsets[0] = a;
              if (this._texture) {
                this._calculateSlicedUV();
              }
            }
          },
          insetRight: {
            get: function () {
              return this._capInsets[2];
            },
            set: function (a) {
              this._capInsets[2] = a;
              if (this._texture) {
                this._calculateSlicedUV();
              }
            }
          }
        },
        ctor: function () {
          c.call(this);
          var a = arguments[0];
          var b = arguments[1];
          var d = arguments[2];
          var e = arguments[3];
          var f = arguments[4];
          this._rect = null;
          this.uv = [];
          this._texture = null;
          this._original = null;
          this._offset = null;
          this._originalSize = null;
          this._rotated = false;
          this._flipX = false;
          this._flipY = false;
          this.vertices = null;
          this._capInsets = [0, 0, 0, 0];
          this.uvSliced = [];
          if (a !== undefined) {
            this.setTexture(a, b, d, e, f);
          }
        },
        textureLoaded: function () {
          return this._texture && this._texture.loaded;
        },
        onTextureLoaded: function (a, b) {
          if (this.textureLoaded()) {
            a.call(b);
            return true;
          } else {
            this.once("load", a, b);
            this.ensureLoadTexture();
            return false;
          }
        },
        isRotated: function () {
          return this._rotated;
        },
        setRotated: function (a) {
          this._rotated = a;
          if (this._texture) {
            this._calculateUV();
          }
        },
        isFlipX: function () {
          return this._flipX;
        },
        isFlipY: function () {
          return this._flipY;
        },
        setFlipX: function (a) {
          this._flipX = a;
          if (this._texture) {
            this._calculateUV();
          }
        },
        setFlipY: function (a) {
          this._flipY = a;
          if (this._texture) {
            this._calculateUV();
          }
        },
        getRect: function () {
          return cc.rect(this._rect);
        },
        setRect: function (a) {
          this._rect = a;
          if (this._texture) {
            this._calculateUV();
          }
        },
        getOriginalSize: function () {
          return cc.size(this._originalSize);
        },
        setOriginalSize: function (a) {
          if (this._originalSize) {
            this._originalSize.width = a.width;
            this._originalSize.height = a.height;
          } else {
            this._originalSize = cc.size(a);
          }
        },
        getTexture: function () {
          return this._texture;
        },
        _textureLoadedCallback: function () {
          var a = this._texture;
          if (a) {
            var b = a.width;
            var c = a.height;
            if (this._rect) {
              this._checkRect(this._texture);
            } else {
              this._rect = cc.rect(0, 0, b, c);
            }
            if (!this._originalSize) {
              this._originalSize = cc.size(b, c);
            }
            if (!this._offset) {
              this._offset = cc.v2(0, 0);
            }
            this._calculateUV();
            this.emit("load");
          }
        },
        _refreshTexture: function (a) {
          this._texture = a;
          if (a.loaded) {
            this._textureLoadedCallback();
          } else {
            a.once("load", this._textureLoadedCallback, this);
          }
        },
        getOffset: function () {
          return cc.v2(this._offset);
        },
        setOffset: function (a) {
          this._offset = cc.v2(a);
        },
        clone: function () {
          return new d(this._texture, this.getRect(), this._rotated, this.getOffset(), this.getOriginalSize());
        },
        setTexture: function (a, b, c, d, e) {
          if ((arguments.length !== 1 || a !== this._texture) && (this._rect = b || null, d ? this.setOffset(d) : this._offset = null, e ? this.setOriginalSize(e) : this._originalSize = null, this._rotated = c || false, typeof a != "string")) {
            if (a instanceof cc.Texture2D) {
              this._refreshTexture(a);
            }
            return true;
          }
        },
        ensureLoadTexture: function () {
          if (this._texture) {
            if (!this._texture.loaded) {
              this._refreshTexture(this._texture);
              cc.assetManager.postLoadNative(this._texture);
            }
          }
        },
        _checkRect: function (a) {
          var b = this._rect;
          b.x;
          b.y;
          if (this._rotated) {
            b.height;
            b.width;
          } else {
            b.width;
            b.height;
          }
          a.width;
          a.height;
        },
        _flipXY: function (a) {
          if (this._flipX) {
            var b = a[0];
            a[0] = a[1];
            a[1] = b;
            b = a[2];
            a[2] = a[3];
            a[3] = b;
          }
          if (this._flipY) {
            var c = a[0];
            a[0] = a[2];
            a[2] = c;
            c = a[1];
            a[1] = a[3];
            a[3] = c;
          }
        },
        _calculateSlicedUV: function () {
          var b = this._rect;
          var k = this._texture.width;
          var e = this._texture.height;
          var i = this._capInsets[0];
          var n = this._capInsets[2];
          var q = b.width - i - n;
          var a = this._capInsets[1];
          var o = this._capInsets[3];
          var c = b.height - a - o;
          var l = this.uvSliced;
          l.length = 0;
          if (this._rotated) {
            j[0].u = b.x / k;
            j[1].u = (b.x + o) / k;
            j[2].u = (b.x + o + c) / k;
            j[3].u = (b.x + b.height) / k;
            j[3].v = b.y / e;
            j[2].v = (b.y + i) / e;
            j[1].v = (b.y + i + q) / e;
            j[0].v = (b.y + b.width) / e;
            this._flipXY(j);
            for (var h = 0; h < 4; ++h) {
              for (var r = j[h], s = 0; s < 4; ++s) {
                var t = j[3 - s];
                l.push({
                  u: r.u,
                  v: t.v
                });
              }
            }
          } else {
            j[0].u = b.x / k;
            j[1].u = (b.x + i) / k;
            j[2].u = (b.x + i + q) / k;
            j[3].u = (b.x + b.width) / k;
            j[3].v = b.y / e;
            j[2].v = (b.y + a) / e;
            j[1].v = (b.y + a + c) / e;
            j[0].v = (b.y + b.height) / e;
            this._flipXY(j);
            for (var w = 0; w < 4; ++w) {
              for (var x = j[w], y = 0; y < 4; ++y) {
                var z = j[y];
                l.push({
                  u: z.u,
                  v: x.v
                });
              }
            }
          }
        },
        _setDynamicAtlasFrame: function (a) {
          if (a) {
            this._original = {
              _texture: this._texture,
              _x: this._rect.x,
              _y: this._rect.y
            };
            this._texture = a.texture;
            this._rect.x = a.x;
            this._rect.y = a.y;
            this._calculateUV();
          }
        },
        _resetDynamicAtlasFrame: function () {
          if (this._original) {
            this._rect.x = this._original._x;
            this._rect.y = this._original._y;
            this._texture = this._original._texture;
            this._original = null;
            if (this._texture.loaded) {
              this._calculateUV();
            } else {
              this.ensureLoadTexture();
            }
          }
        },
        _calculateUV: function () {
          var b = this._rect;
          var g = this._texture;
          var e = this.uv;
          var i = g.width;
          var j = g.height;
          if (this._rotated) {
            var k = i === 0 ? 0 : b.x / i;
            var m = i === 0 ? 0 : (b.x + b.height) / i;
            var a = j === 0 ? 0 : (b.y + b.width) / j;
            var n = j === 0 ? 0 : b.y / j;
            e[0] = k;
            e[1] = n;
            e[2] = k;
            e[3] = a;
            e[4] = m;
            e[5] = n;
            e[6] = m;
            e[7] = a;
          } else {
            var c = i === 0 ? 0 : b.x / i;
            var l = i === 0 ? 0 : (b.x + b.width) / i;
            var h = j === 0 ? 0 : (b.y + b.height) / j;
            var o = j === 0 ? 0 : b.y / j;
            e[0] = c;
            e[1] = h;
            e[2] = l;
            e[3] = h;
            e[4] = c;
            e[5] = o;
            e[6] = l;
            e[7] = o;
          }
          if (this._flipX) {
            var f = e[0];
            e[0] = e[2];
            e[2] = f;
            f = e[1];
            e[1] = e[3];
            e[3] = f;
            f = e[4];
            e[4] = e[6];
            e[6] = f;
            f = e[5];
            e[5] = e[7];
            e[7] = f;
          }
          if (this._flipY) {
            var q = e[0];
            e[0] = e[4];
            e[4] = q;
            q = e[1];
            e[1] = e[5];
            e[5] = q;
            q = e[2];
            e[2] = e[6];
            e[6] = q;
            q = e[3];
            e[3] = e[7];
            e[7] = q;
          }
          var r = this.vertices;
          if (r) {
            r.nu.length = 0;
            r.nv.length = 0;
            for (var p = 0; p < r.u.length; p++) {
              r.nu[p] = r.u[p] / i;
              r.nv[p] = r.v[p] / j;
            }
          }
          this._calculateSlicedUV();
        },
        _serialize: false,
        _deserialize: function (a) {
          var b = a.rect;
          if (b) {
            this._rect = new cc.Rect(b[0], b[1], b[2], b[3]);
          }
          if (a.offset) {
            this.setOffset(new cc.Vec2(a.offset[0], a.offset[1]));
          }
          if (a.originalSize) {
            this.setOriginalSize(new cc.Size(a.originalSize[0], a.originalSize[1]));
          }
          this._rotated = a.rotated === 1;
          this._name = a.name;
          var c = a.capInsets;
          if (c) {
            this._capInsets[0] = c[0];
            this._capInsets[1] = c[1];
            this._capInsets[2] = c[2];
            this._capInsets[3] = c[3];
          }
          this.vertices = a.vertices;
          if (this.vertices) {
            this.vertices.nu = [];
            this.vertices.nv = [];
          }
        }
      });
      var e = d.prototype;
      e.copyWithZone = e.clone;
      e.copy = e.clone;
      e.initWithTexture = e.setTexture;
      cc.SpriteFrame = d;
      b.exports = d;
    }, {
      "../assets/CCAsset": 57,
      "../event/event-target": 134
    }],
    70: [function (a, b) {
      "use strict";
  
      var c = a("./CCFont");
      var d = cc.Class({
        name: "cc.TTFFont",
        extends: c,
        properties: {
          _fontFamily: null,
          _nativeAsset: {
            type: cc.String,
            get: function () {
              return this._fontFamily;
            },
            set: function (a) {
              this._fontFamily = a || "Arial";
            },
            override: true
          },
          _nativeDep: {
            get: function () {
              return {
                uuid: this._uuid,
                __nativeName__: this._native,
                ext: cc.path.extname(this._native),
                __isNative__: true
              };
            },
            override: true
          }
        }
      });
      cc.TTFFont = b.exports = d;
    }, {
      "./CCFont": 61
    }],
    71: [function (a, b) {
      "use strict";
  
      var c = cc.Class({
        name: "cc.TextAsset",
        extends: cc.Asset,
        properties: {
          text: ""
        },
        toString: function () {
          return this.text;
        }
      });
      b.exports = cc.TextAsset = c;
    }, {}],
    72: [function (b, g) {
      "use strict";
  
      var e;
      var j = (e = b("../../renderer/gfx")) && e.__esModule ? e : {
        default: e
      };
      var k = b("../event/event-target");
      var m = b("../renderer");
      b("../platform/CCClass");
      var n = new (b("../platform/id-generater"))("Tex");
      var a = 1024;
      var q = cc.Enum({
        RGB565: j.default.TEXTURE_FMT_R5_G6_B5,
        RGB5A1: j.default.TEXTURE_FMT_R5_G5_B5_A1,
        RGBA4444: j.default.TEXTURE_FMT_R4_G4_B4_A4,
        RGB888: j.default.TEXTURE_FMT_RGB8,
        RGBA8888: j.default.TEXTURE_FMT_RGBA8,
        RGBA32F: j.default.TEXTURE_FMT_RGBA32F,
        A8: j.default.TEXTURE_FMT_A8,
        I8: j.default.TEXTURE_FMT_L8,
        AI8: j.default.TEXTURE_FMT_L8_A8,
        RGB_PVRTC_2BPPV1: j.default.TEXTURE_FMT_RGB_PVRTC_2BPPV1,
        RGBA_PVRTC_2BPPV1: j.default.TEXTURE_FMT_RGBA_PVRTC_2BPPV1,
        RGB_A_PVRTC_2BPPV1: a++,
        RGB_PVRTC_4BPPV1: j.default.TEXTURE_FMT_RGB_PVRTC_4BPPV1,
        RGBA_PVRTC_4BPPV1: j.default.TEXTURE_FMT_RGBA_PVRTC_4BPPV1,
        RGB_A_PVRTC_4BPPV1: a++,
        RGB_ETC1: j.default.TEXTURE_FMT_RGB_ETC1,
        RGBA_ETC1: a++,
        RGB_ETC2: j.default.TEXTURE_FMT_RGB_ETC2,
        RGBA_ETC2: j.default.TEXTURE_FMT_RGBA_ETC2,
        RGBA_ASTC_4x4: j.default.TEXTURE_FMT_RGBA_ASTC_4X4,
        RGBA_ASTC_5x4: j.default.TEXTURE_FMT_RGBA_ASTC_5X4,
        RGBA_ASTC_5x5: j.default.TEXTURE_FMT_RGBA_ASTC_5X5,
        RGBA_ASTC_6x5: j.default.TEXTURE_FMT_RGBA_ASTC_6X5,
        RGBA_ASTC_6x6: j.default.TEXTURE_FMT_RGBA_ASTC_6X6,
        RGBA_ASTC_8x5: j.default.TEXTURE_FMT_RGBA_ASTC_8X5,
        RGBA_ASTC_8x6: j.default.TEXTURE_FMT_RGBA_ASTC_8X6,
        RGBA_ASTC_8x8: j.default.TEXTURE_FMT_RGBA_ASTC_8X8,
        RGBA_ASTC_10x5: j.default.TEXTURE_FMT_RGBA_ASTC_10X5,
        RGBA_ASTC_10x6: j.default.TEXTURE_FMT_RGBA_ASTC_10X6,
        RGBA_ASTC_10x8: j.default.TEXTURE_FMT_RGBA_ASTC_10X8,
        RGBA_ASTC_10x10: j.default.TEXTURE_FMT_RGBA_ASTC_10X10,
        RGBA_ASTC_12x10: j.default.TEXTURE_FMT_RGBA_ASTC_12X10,
        RGBA_ASTC_12x12: j.default.TEXTURE_FMT_RGBA_ASTC_12X12
      });
      var c = cc.Enum({
        REPEAT: 10497,
        CLAMP_TO_EDGE: 33071,
        MIRRORED_REPEAT: 33648
      });
      var l = cc.Enum({
        LINEAR: 9729,
        NEAREST: 9728
      });
      var h = {
        9728: 0,
        9729: 1
      };
      var r = [];
      var f = {
        width: undefined,
        height: undefined,
        minFilter: undefined,
        magFilter: undefined,
        wrapS: undefined,
        wrapT: undefined,
        format: undefined,
        genMipmaps: undefined,
        images: undefined,
        image: undefined,
        flipY: undefined,
        premultiplyAlpha: undefined
      };
      function d() {
        for (var a in f) {
          f[a] = undefined;
        }
        r.length = 0;
        f.images = r;
        return f;
      }
      var s = cc.Class({
        name: "cc.Texture2D",
        extends: b("../assets/CCAsset"),
        mixins: [k],
        properties: {
          _nativeAsset: {
            get: function () {
              return this._image;
            },
            set: function (a) {
              if (a._compressed && a._data) {
                this.initWithData(a._data, this._format, a.width, a.height);
              } else {
                this.initWithElement(a);
              }
            },
            override: true
          },
          _format: q.RGBA8888,
          _premultiplyAlpha: false,
          _flipY: false,
          _minFilter: l.LINEAR,
          _magFilter: l.LINEAR,
          _mipFilter: l.LINEAR,
          _wrapS: c.CLAMP_TO_EDGE,
          _wrapT: c.CLAMP_TO_EDGE,
          _isAlphaAtlas: false,
          _genMipmaps: false,
          genMipmaps: {
            get: function () {
              return this._genMipmaps;
            },
            set: function (a) {
              if (this._genMipmaps !== a) {
                var b = d();
                b.genMipmaps = a;
                this.update(b);
              }
            }
          },
          _packable: true,
          packable: {
            get: function () {
              return this._packable;
            },
            set: function (a) {
              this._packable = a;
            }
          },
          _nativeDep: {
            get: function () {
              return {
                __isNative__: true,
                uuid: this._uuid,
                ext: this._native,
                __flipY__: this._flipY,
                __premultiplyAlpha__: this._premultiplyAlpha
              };
            },
            override: true
          }
        },
        statics: {
          PixelFormat: q,
          WrapMode: c,
          Filter: l,
          _FilterIndex: h,
          extnames: [".png", ".jpg", ".jpeg", ".bmp", ".webp", ".pvr", ".pkm", ".astc"],
          _parseExt: function (b, c) {
            for (var e = cc.renderer.device, g = b.split("_"), i = "", j = "", k = 999, m = c, n = cc.macro.SUPPORT_TEXTURE_FORMATS, l = 0; l < g.length; l++) {
              var p = g[l].split("@");
              var t = p[0];
              t = s.extnames[t.charCodeAt(0) - 48] || t;
              var v = n.indexOf(t);
              if (v !== -1 && v < k) {
                var w = p[1] ? parseInt(p[1]) : c;
                if (t === ".astc" && !e.ext("WEBGL_compressed_texture_astc")) {
                  continue;
                }
                if (t === ".pvr" && !e.ext("WEBGL_compressed_texture_pvrtc")) {
                  continue;
                }
                if (!(w !== q.RGB_ETC1 && w !== q.RGBA_ETC1 || e.ext("WEBGL_compressed_texture_etc1"))) {
                  continue;
                }
                if (!(w !== q.RGB_ETC2 && w !== q.RGBA_ETC2 || e.ext("WEBGL_compressed_texture_etc"))) {
                  continue;
                }
                if (t === ".webp" && !cc.sys.capabilities.webp) {
                  continue;
                }
                k = v;
                j = t;
                m = w;
              } else if (!i) {
                i = t;
              }
            }
            return {
              bestExt: j,
              bestFormat: m,
              defaultExt: i
            };
          }
        },
        ctor: function () {
          this._id = n.getNewId();
          this.loaded = false;
          this.width = 0;
          this.height = 0;
          this._hashDirty = true;
          this._hash = 0;
          this._texture = null;
        },
        getImpl: function () {
          if (!this._texture) {
            this._texture = new m.Texture2D(m.device, {});
          }
          return this._texture;
        },
        getId: function () {
          return this._id;
        },
        toString: function () {
          return this.nativeUrl || "";
        },
        update: function (a) {
          if (a) {
            var b = false;
            if (a.width !== undefined) {
              this.width = a.width;
            }
            if (a.height !== undefined) {
              this.height = a.height;
            }
            if (a.minFilter !== undefined) {
              this._minFilter = a.minFilter;
              a.minFilter = h[a.minFilter];
            }
            if (a.magFilter !== undefined) {
              this._magFilter = a.magFilter;
              a.magFilter = h[a.magFilter];
            }
            if (a.mipFilter !== undefined) {
              this._mipFilter = a.mipFilter;
              a.mipFilter = h[a.mipFilter];
            }
            if (a.wrapS !== undefined) {
              this._wrapS = a.wrapS;
            }
            if (a.wrapT !== undefined) {
              this._wrapT = a.wrapT;
            }
            if (a.format !== undefined) {
              this._format = a.format;
            }
            if (a.flipY !== undefined) {
              this._flipY = a.flipY;
              b = true;
            }
            if (a.premultiplyAlpha !== undefined) {
              this._premultiplyAlpha = a.premultiplyAlpha;
              b = true;
            }
            if (a.genMipmaps !== undefined) {
              this._genMipmaps = a.genMipmaps;
            }
            if (cc.sys.capabilities.imageBitmap && this._image instanceof ImageBitmap) {
              this._checkImageBitmap(this._upload.bind(this, a, b));
            } else {
              this._upload(a, b);
            }
          }
        },
        _upload: function (a, b) {
          if (b && this._image) {
            a.image = this._image;
          }
          if (a.images && a.images.length > 0) {
            this._image = a.images[0];
          } else if (a.image !== undefined) {
            this._image = a.image;
            if (!a.images) {
              r.length = 0;
              a.images = r;
            }
            a.images.push(a.image);
          }
          if (this._texture) {
            this._texture.update(a);
          }
          this._hashDirty = true;
        },
        initWithElement: function (a) {
          if (a) {
            this._image = a;
            if (a.complete || a instanceof HTMLCanvasElement) {
              this.handleLoadedTexture();
            } else if (cc.sys.capabilities.imageBitmap && a instanceof ImageBitmap) {
              this._checkImageBitmap(this.handleLoadedTexture.bind(this));
            } else {
              var b = this;
              a.addEventListener("load", function () {
                b.handleLoadedTexture();
              });
              a.addEventListener("error", function () {});
            }
          }
        },
        initWithData: function (a, b, c, e) {
          var f = d();
          f.image = a;
          f.images = [f.image];
          f.genMipmaps = this._genMipmaps;
          f.premultiplyAlpha = this._premultiplyAlpha;
          f.flipY = this._flipY;
          f.minFilter = h[this._minFilter];
          f.magFilter = h[this._magFilter];
          f.wrapS = this._wrapS;
          f.wrapT = this._wrapT;
          f.format = this._getGFXPixelFormat(b);
          f.width = c;
          f.height = e;
          if (this._texture) {
            this._texture.update(f);
          } else {
            this._texture = new m.Texture2D(m.device, f);
          }
          this.width = c;
          this.height = e;
          this._updateFormat();
          this._checkPackable();
          this.loaded = true;
          this.emit("load");
          return true;
        },
        getHtmlElementObj: function () {
          return this._image;
        },
        destroy: function () {
          if (cc.sys.capabilities.imageBitmap && this._image instanceof ImageBitmap && this._image.close) {
            this._image.close();
          }
          if (this._packable && cc.dynamicAtlasManager) {
            cc.dynamicAtlasManager.deleteAtlasTexture(this);
          }
          this._image = null;
          if (this._texture) {
            this._texture.destroy();
          }
          this._super();
        },
        getPixelFormat: function () {
          return this._format;
        },
        hasPremultipliedAlpha: function () {
          return this._premultiplyAlpha || false;
        },
        isAlphaAtlas: function () {
          return this._isAlphaAtlas;
        },
        handleLoadedTexture: function () {
          if (this._image && this._image.width && this._image.height) {
            this.width = this._image.width;
            this.height = this._image.height;
            var a = d();
            a.image = this._image;
            a.images = [a.image];
            a.width = this.width;
            a.height = this.height;
            a.genMipmaps = this._genMipmaps;
            a.format = this._getGFXPixelFormat(this._format);
            a.premultiplyAlpha = this._premultiplyAlpha;
            a.flipY = this._flipY;
            a.minFilter = h[this._minFilter];
            a.magFilter = h[this._magFilter];
            a.wrapS = this._wrapS;
            a.wrapT = this._wrapT;
            if (this._texture) {
              this._texture.update(a);
            } else {
              this._texture = new m.Texture2D(m.device, a);
            }
            this._updateFormat();
            this._checkPackable();
            this.loaded = true;
            this.emit("load");
            if (cc.macro.CLEANUP_IMAGE_CACHE) {
              this._cleanupImageCache();
            }
          }
        },
        _cleanupImageCache: function () {
          if (this._image instanceof HTMLImageElement) {
            this._clearImage();
          } else if (cc.sys.capabilities.imageBitmap && this._image instanceof ImageBitmap && this._image.close) {
            this._image.close();
          }
        },
        description: function () {
          return "<cc.Texture2D | Name = " + this.nativeUrl + " | Dimensions = " + this.width + " x " + this.height + ">";
        },
        releaseTexture: function () {
          this._image = null;
          if (this._texture) {
            this._texture.destroy();
          }
        },
        setWrapMode: function (a, b) {
          if (this._wrapS !== a || this._wrapT !== b) {
            var c = d();
            c.wrapS = a;
            c.wrapT = b;
            this.update(c);
          }
        },
        setFilters: function (a, b) {
          if (this._minFilter !== a || this._magFilter !== b) {
            var c = d();
            c.minFilter = a;
            c.magFilter = b;
            this.update(c);
          }
        },
        setFlipY: function (a) {
          if (this._flipY !== a) {
            var b = d();
            b.flipY = a;
            b.premultiplyAlpha = this._premultiplyAlpha;
            this.update(b);
          }
        },
        setPremultiplyAlpha: function (a) {
          if (this._premultiplyAlpha !== a) {
            var b = d();
            b.flipY = this._flipY;
            b.premultiplyAlpha = a;
            this.update(b);
          }
        },
        _updateFormat: function () {
          this._isAlphaAtlas = this._format === q.RGBA_ETC1 || this._format === q.RGB_A_PVRTC_4BPPV1 || this._format === q.RGB_A_PVRTC_2BPPV1;
        },
        _checkPackable: function () {
          var a = cc.dynamicAtlasManager;
          if (a) {
            if (this._isCompressed()) {
              this._packable = false;
            } else {
              var b = this.width;
              var c = this.height;
              if (!this._image || b > a.maxFrameSize || c > a.maxFrameSize || this._getHash() !== a.Atlas.DEFAULT_HASH) {
                this._packable = false;
              } else if (this._image && this._image instanceof HTMLCanvasElement) {
                this._packable = true;
              }
            }
          }
        },
        _getOpts: function () {
          var a = d();
          a.width = this.width;
          a.height = this.height;
          a.genMipmaps = this._genMipmaps;
          a.format = this._format;
          a.premultiplyAlpha = this._premultiplyAlpha;
          a.anisotropy = this._anisotropy;
          a.flipY = this._flipY;
          a.minFilter = h[this._minFilter];
          a.magFilter = h[this._magFilter];
          a.mipFilter = h[this._mipFilter];
          a.wrapS = this._wrapS;
          a.wrapT = this._wrapT;
          return a;
        },
        _getGFXPixelFormat: function (a) {
          if (a === q.RGBA_ETC1) {
            a = q.RGB_ETC1;
          } else if (a === q.RGB_A_PVRTC_4BPPV1) {
            a = q.RGB_PVRTC_4BPPV1;
          } else if (a === q.RGB_A_PVRTC_2BPPV1) {
            a = q.RGB_PVRTC_2BPPV1;
          }
          return a;
        },
        _resetUnderlyingMipmaps: function (a) {
          var b = this._getOpts();
          b.images = a || [null];
          if (this._texture) {
            this._texture.update(b);
          } else {
            this._texture = new m.Texture2D(m.device, b);
          }
        },
        _serialize: false,
        _deserialize: function (a) {
          var b = a.split(",");
          var c = b[0];
          if (c) {
            var d = s._parseExt(c, this._format);
            if (d.bestExt) {
              this._setRawAsset(d.bestExt);
              this._format = d.bestFormat;
            } else {
              if (!d.defaultExt) {
                throw Error(cc.debug.getError(3121));
              }
              this._setRawAsset(d.defaultExt);
            }
          }
          if (b.length === 8) {
            this._minFilter = parseInt(b[1]);
            this._magFilter = parseInt(b[2]);
            this._wrapS = parseInt(b[3]);
            this._wrapT = parseInt(b[4]);
            this._premultiplyAlpha = b[5].charCodeAt(0) === 49;
            this._genMipmaps = b[6].charCodeAt(0) === 49;
            this._packable = b[7].charCodeAt(0) === 49;
          }
        },
        _getHash: function () {
          if (!this._hashDirty) {
            return this._hash;
          }
          var b = this._genMipmaps ? 1 : 0;
          var d = this._premultiplyAlpha ? 1 : 0;
          var e = this._flipY ? 1 : 0;
          var f = this._minFilter === l.LINEAR ? 1 : 2;
          var g = this._magFilter === l.LINEAR ? 1 : 2;
          var h = this._wrapS === c.REPEAT ? 1 : this._wrapS === c.CLAMP_TO_EDGE ? 2 : 3;
          var i = this._wrapT === c.REPEAT ? 1 : this._wrapT === c.CLAMP_TO_EDGE ? 2 : 3;
          var a = this._format;
          this._image;
          this._hash = +("" + f + g + a + h + i + b + d + e);
          this._hashDirty = false;
          return this._hash;
        },
        _isCompressed: function () {
          return this._format < q.A8 || this._format > q.RGBA32F;
        },
        _clearImage: function () {
          this._image.src = "";
        },
        _checkImageBitmap: function (a) {
          var b = this;
          var c = this._image;
          var d = this._flipY;
          var e = this._premultiplyAlpha;
          if (this._flipY !== c.flipY || this._premultiplyAlpha !== c.premultiplyAlpha) {
            createImageBitmap(c, {
              imageOrientation: d !== c.flipY ? "flipY" : "none",
              premultiplyAlpha: e ? "premultiply" : "none"
            }).then(function (f) {
              if (c.close) {
                c.close();
              }
              f.flipY = d;
              f.premultiplyAlpha = e;
              b._image = f;
              a();
            }, function () {});
          } else {
            a();
          }
        }
      });
      cc.Texture2D = g.exports = s;
    }, {
      "../../renderer/gfx": 282,
      "../assets/CCAsset": 57,
      "../event/event-target": 134,
      "../platform/CCClass": 162,
      "../platform/id-generater": 179,
      "../renderer": 193
    }],
    73: [function (a, b) {
      "use strict";
  
      var c = a("./CCAsset");
      var d = a("../event/event-target");
      var e = cc.Class({
        name: "cc.VideoClip",
        extends: c,
        mixins: [d]
      });
      cc.VideoClip = e;
      b.exports = e;
    }, {
      "../event/event-target": 134,
      "./CCAsset": 57
    }],
    74: [function (a) {
      "use strict";
  
      a("./CCAsset");
      a("./CCFont");
      a("./CCPrefab");
      a("./CCAudioClip");
      a("./CCVideoClip");
      a("./CCScripts");
      a("./CCSceneAsset");
      a("./CCSpriteFrame");
      a("./CCTexture2D");
      a("./CCRenderTexture");
      a("./CCTTFFont");
      a("./CCSpriteAtlas");
      a("./CCBitmapFont");
      a("./CCLabelAtlas");
      a("./CCTextAsset");
      a("./CCJsonAsset");
      a("./CCBufferAsset");
      a("./material");
    }, {
      "./CCAsset": 57,
      "./CCAudioClip": 58,
      "./CCBitmapFont": 59,
      "./CCBufferAsset": 60,
      "./CCFont": 61,
      "./CCJsonAsset": 62,
      "./CCLabelAtlas": 63,
      "./CCPrefab": 64,
      "./CCRenderTexture": 65,
      "./CCSceneAsset": 66,
      "./CCScripts": 67,
      "./CCSpriteAtlas": 68,
      "./CCSpriteFrame": 69,
      "./CCTTFFont": 70,
      "./CCTextAsset": 71,
      "./CCTexture2D": 72,
      "./CCVideoClip": 73,
      "./material": 81
    }],
    75: [function (a, b) {
      "use strict";
  
      var c;
      var d = (c = a("../CCAsset")) && c.__esModule ? c : {
        default: c
      };
      var e = a("./effect-parser");
      var f = cc.Class({
        name: "cc.EffectAsset",
        extends: d.default,
        ctor: function () {
          this._effect = null;
        },
        properties: {
          properties: Object,
          techniques: [],
          shaders: []
        },
        onLoad: function () {
          if (cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
            for (var a = cc.renderer._forward._programLib, b = 0; b < this.shaders.length; b++) {
              a.define(this.shaders[b]);
            }
            this._initEffect();
          }
        },
        _initEffect: function () {
          if (!this._effect) {
            this._effect = (0, e.parseEffect)(this);
            Object.freeze(this._effect);
          }
        },
        getInstantiatedEffect: function () {
          this._initEffect();
          return this._effect.clone();
        },
        getEffect: function () {
          this._initEffect();
          return this._effect;
        }
      });
      b.exports = cc.EffectAsset = f;
    }, {
      "../CCAsset": 57,
      "./effect-parser": 78
    }],
    76: [function (b, d, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var f = b("../CCAsset");
      var g = b("../CCTexture2D");
      g.PixelFormat;
      var h = b("./CCEffectAsset");
      b("../../utils/texture-util");
      var i = cc.gfx;
      var a = cc.Enum({
        SPRITE: "2d-sprite",
        GRAY_SPRITE: "2d-gray-sprite",
        UNLIT: "unlit"
      });
      var j = cc.Class({
        name: "cc.Material",
        extends: f,
        ctor: function () {
          this.loaded = false;
          this._manualHash = false;
          this._dirty = true;
          this._effect = null;
        },
        properties: {
          _defines: {
            default: undefined,
            type: Object
          },
          _props: {
            default: undefined,
            type: Object
          },
          _effectAsset: {
            type: h,
            default: null
          },
          _techniqueIndex: 0,
          _techniqueData: Object,
          effectName: undefined,
          effectAsset: {
            get: function () {
              return this._effectAsset;
            },
            set: function (a) {
              if (cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
                this._effectAsset = a;
                if (a) {
                  this._effect = this._effectAsset.getInstantiatedEffect();
                }
              }
            }
          },
          effect: {
            get: function () {
              return this._effect;
            }
          },
          techniqueIndex: {
            get: function () {
              return this._techniqueIndex;
            },
            set: function (a) {
              this._techniqueIndex = a;
              this._effect.switchTechnique(a);
            }
          }
        },
        statics: {
          getBuiltinMaterial: function (a) {
            if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
              return new cc.Material();
            } else {
              return cc.assetManager.builtins.getBuiltin("material", "builtin-" + a);
            }
          },
          BUILTIN_NAME: a,
          createWithBuiltin: function (a, b) {
            if (b === undefined) {
              b = 0;
            }
            var c = cc.assetManager.builtins.getBuiltin("effect", "builtin-" + a);
            return j.create(c, b);
          },
          create: function (a, b) {
            if (b === undefined) {
              b = 0;
            }
            if (!a) {
              return null;
            }
            var c = new j();
            c.effectAsset = a;
            c.techniqueIndex = b;
            return c;
          }
        },
        setProperty: function (b, c, d, e) {
          if (cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
            if (typeof d == "string") {
              d = parseInt(d);
            }
            if (c instanceof g) {
              var f = c.isAlphaAtlas();
              var h = "CC_USE_ALPHA_ATLAS_" + b;
              var a = this.getDefine(h, d);
              if (f || a) {
                this.define(h, f);
              }
              if (!c.loaded) {
                cc.assetManager.postLoadNative(c);
              }
            }
            this._effect.setProperty(b, c, d, e);
          }
        },
        getProperty: function (a, b) {
          if (typeof b == "string") {
            b = parseInt(b);
          }
          return this._effect.getProperty(a, b);
        },
        define: function (a, b, c, d) {
          if (cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
            if (typeof c == "string") {
              c = parseInt(c);
            }
            this._effect.define(a, b, c, d);
          }
        },
        getDefine: function (a, b) {
          if (typeof b == "string") {
            b = parseInt(b);
          }
          return this._effect.getDefine(a, b);
        },
        setCullMode: function (a, b) {
          if (a === undefined) {
            a = i.CULL_BACK;
          }
          this._effect.setCullMode(a, b);
        },
        setDepth: function (a, b, c, d) {
          if (a === undefined) {
            a = false;
          }
          if (b === undefined) {
            b = false;
          }
          if (c === undefined) {
            c = i.DS_FUNC_LESS;
          }
          this._effect.setDepth(a, b, c, d);
        },
        setBlend: function (a, b, d, f, g, h, j, k, m) {
          if (a === undefined) {
            a = false;
          }
          if (b === undefined) {
            b = i.BLEND_FUNC_ADD;
          }
          if (d === undefined) {
            d = i.BLEND_SRC_ALPHA;
          }
          if (f === undefined) {
            f = i.BLEND_ONE_MINUS_SRC_ALPHA;
          }
          if (g === undefined) {
            g = i.BLEND_FUNC_ADD;
          }
          if (h === undefined) {
            h = i.BLEND_SRC_ALPHA;
          }
          if (j === undefined) {
            j = i.BLEND_ONE_MINUS_SRC_ALPHA;
          }
          if (k === undefined) {
            k = 4294967295;
          }
          this._effect.setBlend(a, b, d, f, g, h, j, k, m);
        },
        setStencilEnabled: function (a, b) {
          if (a === undefined) {
            a = i.STENCIL_INHERIT;
          }
          this._effect.setStencilEnabled(a, b);
        },
        setStencil: function (a, b, d, f, g, h, j, k, m) {
          if (a === undefined) {
            a = i.STENCIL_INHERIT;
          }
          if (b === undefined) {
            b = i.DS_FUNC_ALWAYS;
          }
          if (d === undefined) {
            d = 0;
          }
          if (f === undefined) {
            f = 255;
          }
          if (g === undefined) {
            g = i.STENCIL_OP_KEEP;
          }
          if (h === undefined) {
            h = i.STENCIL_OP_KEEP;
          }
          if (j === undefined) {
            j = i.STENCIL_OP_KEEP;
          }
          if (k === undefined) {
            k = 255;
          }
          this._effect.setStencil(a, b, d, f, g, h, j, k, m);
        },
        updateHash: function (a) {
          this._manualHash = a;
          if (this._effect) {
            this._effect.updateHash(a);
          }
        },
        getHash: function () {
          return this._manualHash || this._effect && this._effect.getHash();
        },
        onLoad: function () {
          this.effectAsset = this._effectAsset;
          if (this._effect) {
            if (this._techniqueIndex) {
              this._effect.switchTechnique(this._techniqueIndex);
            }
            this._techniqueData = this._techniqueData || {};
            var a = this._techniqueData;
            for (var b in a) {
              var c = a[b = parseInt(b)];
              if (c) {
                for (var d in c.defines) {
                  this.define(d, c.defines[d], b);
                }
                for (var f in c.props) {
                  this.setProperty(f, c.props[f], b);
                }
              }
            }
          }
        }
      });
      var c = j;
      e.default = c;
      cc.Material = j;
      d.exports = e.default;
    }, {
      "../../utils/texture-util": 244,
      "../CCAsset": 57,
      "../CCTexture2D": 72,
      "./CCEffectAsset": 75
    }],
    77: [function (b, d, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var f = h(b("../../../renderer/core/pass"));
      var g = h(b("../../../renderer/enums"));
      function h(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      function j(a, b) {
        for (var c = 0; c < b.length; c++) {
          var d = b[c];
          d.enumerable = d.enumerable || false;
          d.configurable = true;
          if ("value" in d) {
            d.writable = true;
          }
          Object.defineProperty(a, d.key, d);
        }
      }
      var a = cc.gfx;
      var i = function () {
        function b() {
          this._dirty = true;
          this._name = "";
          this._technique = null;
        }
        var c;
        var d;
        var h = b.prototype;
        h._createPassProp = function (a, b) {
          var c = b._properties[a];
          if (c) {
            var d = Object.create(null);
            d.name = a;
            d.type = c.type;
            if (c.value instanceof Float32Array) {
              d.value = new Float32Array(c.value);
            } else if (c.value instanceof Float64Array) {
              d.value = new Float64Array(c.value);
            } else {
              d.value = c.value;
            }
            b._properties[a] = d;
            return d;
          }
        };
        h._setPassProperty = function (b, d, e, h) {
          var i = e._properties;
          if (!i.hasOwnProperty(b)) {
            this._createPassProp(b, e);
          }
          var a = i[b];
          var j = d;
          if (a.type === g.default.PARAM_TEXTURE_2D) {
            j = d && d.getImpl();
          }
          return a.value === j || (this._dirty = true, f.default.prototype.setProperty.call(e, b, d, h));
        };
        h.setProperty = function (b, c, d, e) {
          var f = this.passes;
          var g = 0;
          var h = f.length;
          if (d !== undefined) {
            g = d;
            h = d + 1;
          }
          for (var i = g; i < h; i++) {
            this._setPassProperty(b, c, f[i], e);
          }
        };
        h.getProperty = function (b, c) {
          var d = this.passes;
          if (!(c >= d.length)) {
            var e = 0;
            var f = d.length;
            if (c !== undefined) {
              e = c;
              f = c + 1;
            }
            for (var g = e; g < f; g++) {
              var h = d[g].getProperty(b);
              if (h !== undefined) {
                return h;
              }
            }
          }
        };
        h.define = function (b, c, d, e) {
          var f = this.passes;
          var g = 0;
          var h = f.length;
          if (d !== undefined) {
            g = d;
            h = d + 1;
          }
          for (var i = g; i < h; i++) {
            f[i].define(b, c, e);
          }
        };
        h.getDefine = function (b, c) {
          var d = this.passes;
          if (!(c >= d.length)) {
            var e = 0;
            var f = d.length;
            if (c !== undefined) {
              e = c;
              f = c + 1;
            }
            for (var g = e; g < f; g++) {
              var h = d[g].getDefine(b);
              if (h !== undefined) {
                return h;
              }
            }
          }
        };
        h.setCullMode = function (b, c) {
          if (b === undefined) {
            b = a.CULL_BACK;
          }
          var d = this.passes;
          var e = 0;
          var f = d.length;
          if (c !== undefined) {
            e = c;
            f = c + 1;
          }
          for (var g = e; g < f; g++) {
            d[g].setCullMode(b);
          }
          this._dirty = true;
        };
        h.setDepth = function (b, c, d, e) {
          var f = this.passes;
          var g = 0;
          var h = f.length;
          if (e !== undefined) {
            g = e;
            h = e + 1;
          }
          for (var i = g; i < h; i++) {
            f[i].setDepth(b, c, d);
          }
          this._dirty = true;
        };
        h.setBlend = function (b, d, e, g, i, j, k, a, m) {
          var c = this.passes;
          var l = 0;
          var n = c.length;
          if (m !== undefined) {
            l = m;
            n = m + 1;
          }
          for (var o = l; o < n; o++) {
            c[o].setBlend(b, d, e, g, i, j, k, a);
          }
          this._dirty = true;
        };
        h.setStencilEnabled = function (b, c) {
          if (b === undefined) {
            b = a.STENCIL_INHERIT;
          }
          var d = this.passes;
          var e = 0;
          var f = d.length;
          if (c !== undefined) {
            e = c;
            f = c + 1;
          }
          for (var g = e; g < f; g++) {
            d[g].setStencilEnabled(b);
          }
          this._dirty = true;
        };
        h.setStencil = function (b, g, e, i, j, k, m, a, n) {
          var c = this.passes;
          var l = 0;
          var o = c.length;
          if (n !== undefined) {
            l = n;
            o = n + 1;
          }
          for (var p = l; p < o; p++) {
            var q = c[p];
            q.setStencilFront(b, g, e, i, j, k, m, a);
            q.setStencilBack(b, g, e, i, j, k, m, a);
          }
          this._dirty = true;
        };
        c = b;
        if (d = [{
          key: "name",
          get: function () {
            return this._name;
          }
        }, {
          key: "technique",
          get: function () {
            return this._technique;
          }
        }, {
          key: "passes",
          get: function () {
            return [];
          }
        }]) {
          j(c.prototype, d);
        }
        Object.defineProperty(c, "prototype", {
          writable: false
        });
        return b;
      }();
      e.default = i;
      cc.EffectBase = i;
      d.exports = e.default;
    }, {
      "../../../renderer/core/pass": 273,
      "../../../renderer/enums": 277
    }],
    78: [function (b, d, e) {
      "use strict";
  
      e.__esModule = true;
      e.parseEffect = function (a) {
        var b = l(a);
        return new k.default(a.name, b, 0, a);
      };
      var i = a(b("../../../renderer/core/pass"));
      var g = b("../../../renderer/types");
      var j = a(b("../../../renderer/enums"));
      var k = a(b("./effect"));
      var n = a(b("../../../renderer/core/technique"));
      function a(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      function m(a) {
        return cc.renderer._forward._programLib.getTemplate(a);
      }
      function c(b, d) {
        var f = d.properties || {};
        var e = m(d.program);
        function h(a) {
          if (!e.uniforms.find(function (b) {
            return b.name === a;
          })) {
            return "continue";
          }
        }
        for (var a in f) {
          h(a);
        }
        var i = {};
        e.uniforms.forEach(function (b) {
          var c;
          var d = b.name;
          var h = i[d] = Object.assign({}, b);
          var a = f[d];
          if ((c = a ? a.type === j.default.PARAM_TEXTURE_2D ? null : a.type === j.default.PARAM_INT || a.type === j.default.PARAM_FLOAT ? Array.isArray(a.value) ? a.value[0] : a.value : new Float32Array(a.value) : g.enums2default[b.type]) === undefined) {
            c = null;
          }
          h.value = c;
        });
        return i;
      }
      function h(a) {
        var b = {};
        m(a.program).defines.forEach(function (a) {
          b[a.name] = g.enums2default[a.type];
        });
        return b;
      }
      function l(b) {
        for (var j = b.techniques.length, e = Array(j), k = 0; k < j; ++k) {
          for (var o = b.techniques[k], q = o.name || k, t = o.passes.length, u = Array(t), w = 0; w < t; ++w) {
            var x = o.passes[w];
            var z = x.name || w;
            var A = b.name + "-" + q + "-" + z;
            var B = x.stage || "opaque";
            var C = c(0, x);
            var D = h(x);
            var F = u[w] = new i.default(z, A, x.program, B, C, D);
            if (x.rasterizerState) {
              F.setCullMode(x.rasterizerState.cullMode);
            }
            var G = x.blendState && x.blendState.targets[0];
            if (G) {
              F.setBlend(G.blend, G.blendEq, G.blendSrc, G.blendDst, G.blendAlphaEq, G.blendSrcAlpha, G.blendDstAlpha, G.blendColor);
            }
            var H = x.depthStencilState;
            if (H) {
              F.setDepth(H.depthTest, H.depthWrite, H.depthFunc);
              F.setStencilFront(H.stencilTest, H.stencilFuncFront, H.stencilRefFront, H.stencilMaskFront, H.stencilFailOpFront, H.stencilZFailOpFront, H.stencilZPassOpFront, H.stencilWriteMaskFront);
              F.setStencilBack(H.stencilTest, H.stencilFuncBack, H.stencilRefBack, H.stencilMaskBack, H.stencilFailOpBack, H.stencilZFailOpBack, H.stencilZPassOpBack, H.stencilWriteMaskBack);
            }
          }
          e[k] = new n.default(q, u);
        }
        return e;
      }
    }, {
      "../../../renderer/core/pass": 273,
      "../../../renderer/core/technique": 275,
      "../../../renderer/enums": 277,
      "../../../renderer/types": 305,
      "./effect": 80
    }],
    79: [function (b, d, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var f = i(b("../../../renderer/murmurhash2_gc"));
      var g = i(b("./utils"));
      var h = i(b("./effect-base"));
      function i(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      function j(a, b) {
        for (var c = 0; c < b.length; c++) {
          var d = b[c];
          d.enumerable = d.enumerable || false;
          d.configurable = true;
          if ("value" in d) {
            d.writable = true;
          }
          Object.defineProperty(a, d.key, d);
        }
      }
      function k(a, b) {
        return (k = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      cc.gfx;
      var a = function (b) {
        var c;
        var d;
        function m(a) {
          var c;
          (c = b.call(this) || this)._effect = undefined;
          c._passes = [];
          c._stagePasses = {};
          c._hash = 0;
          c.init(a);
          return c;
        }
        d = b;
        (c = m).prototype = Object.create(d.prototype);
        c.prototype.constructor = c;
        k(c, d);
        var n;
        var o;
        var p = m.prototype;
        p._onEffectChanged = function () {};
        p.init = function (b) {
          if (b instanceof m) {
            b = b.effect;
          }
          this._effect = b;
          this._dirty = true;
          if (b) {
            var c = b.passes;
            var d = this._passes;
            d.length = 0;
            for (var e = this._stagePasses = {}, f = 0; f < c.length; f++) {
              var g = d[f] = Object.setPrototypeOf({}, c[f]);
              g._properties = Object.setPrototypeOf({}, c[f]._properties);
              g._defines = Object.setPrototypeOf({}, c[f]._defines);
              if (!e[g._stage]) {
                e[g._stage] = [];
              }
              e[g._stage].push(g);
            }
          }
        };
        p.updateHash = function () {};
        p.getHash = function () {
          if (!this._dirty) {
            return this._hash;
          }
          this._dirty = false;
          var a = "";
          a += g.default.serializePasses(this._passes);
          var b = this._effect;
          if (b) {
            a += g.default.serializePasses(b.passes);
          }
          this._hash = (0, f.default)(a, 666);
          this.updateHash(this._hash);
          return this._hash;
        };
        n = m;
        if (o = [{
          key: "effect",
          get: function () {
            return this._effect;
          }
        }, {
          key: "name",
          get: function () {
            return this._effect && this._effect.name + " (variant)";
          }
        }, {
          key: "passes",
          get: function () {
            return this._passes;
          }
        }, {
          key: "stagePasses",
          get: function () {
            return this._stagePasses;
          }
        }]) {
          j(n.prototype, o);
        }
        Object.defineProperty(n, "prototype", {
          writable: false
        });
        return m;
      }(h.default);
      e.default = a;
      cc.EffectVariant = a;
      d.exports = e.default;
    }, {
      "../../../renderer/murmurhash2_gc": 300,
      "./effect-base": 77,
      "./utils": 84
    }],
    80: [function (b, c, d) {
      "use strict";
  
      var e;
      function f(a, b) {
        for (var c = 0; c < b.length; c++) {
          var d = b[c];
          d.enumerable = d.enumerable || false;
          d.configurable = true;
          if ("value" in d) {
            d.writable = true;
          }
          Object.defineProperty(a, d.key, d);
        }
      }
      function g(a, b) {
        return (g = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      d.__esModule = true;
      d.default = undefined;
      var h = function (b) {
        var d;
        var h;
        function j(a, c, d, e) {
          var f;
          (f = b.call(this) || this)._techniques = [];
          f._asset = null;
          f.init(a, c, d, e, true);
          return f;
        }
        h = b;
        (d = j).prototype = Object.create(h.prototype);
        d.prototype.constructor = d;
        g(d, h);
        var k;
        var l;
        var m = j.prototype;
        m.init = function (a, b, c, d) {
          this._name = a;
          this._techniques = b;
          this._technique = b[c];
          this._asset = d;
        };
        m.switchTechnique = function (a) {
          if (!(a >= this._techniques.length)) {
            this._technique = this._techniques[a];
          }
        };
        m.clear = function () {
          this._techniques = [];
        };
        m.clone = function () {
          for (var a = [], b = 0; b < this._techniques.length; b++) {
            a.push(this._techniques[b].clone());
          }
          var c = this._techniques.indexOf(this._technique);
          return new j(this._name, a, c, this._asset);
        };
        k = j;
        if (l = [{
          key: "technique",
          get: function () {
            return this._technique;
          }
        }, {
          key: "passes",
          get: function () {
            return this._technique.passes;
          }
        }]) {
          f(k.prototype, l);
        }
        Object.defineProperty(k, "prototype", {
          writable: false
        });
        return j;
      }(((e = b("./effect-base")) && e.__esModule ? e : {
        default: e
      }).default);
      d.default = h;
      cc.Effect = h;
      c.exports = d.default;
    }, {
      "./effect-base": 77
    }],
    81: [function (a) {
      "use strict";
  
      a("./CCEffectAsset");
      a("./CCMaterial");
      a("./material-variant");
    }, {
      "./CCEffectAsset": 75,
      "./CCMaterial": 76,
      "./material-variant": 83
    }],
    82: [function (b, d, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var f = h(b("./utils"));
      var g = h(b("../../utils/pool"));
      function h(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      function j(a, b) {
        return (j = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      var i = new (function (a) {
        var b;
        var c;
        function d() {
          for (var b, c = arguments.length, d = Array(c), f = 0; f < c; f++) {
            d[f] = arguments[f];
          }
          (b = a.call.apply(a, [this].concat(d)) || this).enabled = false;
          b._pool = {};
          return b;
        }
        c = a;
        (b = d).prototype = Object.create(c.prototype);
        b.prototype.constructor = b;
        j(b, c);
        var g = d.prototype;
        g.get = function (b, c) {
          var d;
          var e = this._pool;
          if (b instanceof cc.MaterialVariant) {
            if (!b._owner) {
              b._owner = c;
              return b;
            }
            if (b._owner === c) {
              return b;
            }
            b = b.material;
          }
          if (this.enabled) {
            var g = b.effectAsset._uuid;
            if (e[g]) {
              var h = f.default.serializeDefines(b._effect._defines) + f.default.serializeTechniques(b._effect._techniques);
              d = e[g][h] && e[g][h].pop();
            }
          }
          if (d) {
            this.count--;
          } else {
            (d = new cc.MaterialVariant(b))._name = b._name + " (Instance)";
            d._uuid = b._uuid;
          }
          d._owner = c;
          return d;
        };
        g.put = function (a) {
          if (this.enabled && a._owner) {
            var b = this._pool;
            var c = a.effectAsset._uuid;
            if (!b[c]) {
              b[c] = {};
            }
            var d = f.default.serializeDefines(a._effect._defines) + f.default.serializeTechniques(a._effect._techniques);
            if (!b[c][d]) {
              b[c][d] = [];
            }
            if (!(this.count > this.maxSize)) {
              this._clean(a);
              b[c][d].push(a);
              this.count++;
            }
          }
        };
        g.clear = function () {
          this._pool = {};
          this.count = 0;
        };
        g._clean = function (a) {
          a._owner = null;
        };
        return d;
      }(g.default))();
      g.default.register("material", i);
      var k = i;
      e.default = k;
      d.exports = e.default;
    }, {
      "../../utils/pool": 238,
      "./utils": 84
    }],
    83: [function (b, d, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var f;
      var g = a(b("./CCMaterial"));
      var i = a(b("./effect-variant"));
      var j = a(b("./material-pool"));
      function a(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      function k(a, b) {
        for (var c = 0; c < b.length; c++) {
          var d = b[c];
          d.enumerable = d.enumerable || false;
          d.configurable = true;
          if ("value" in d) {
            d.writable = true;
          }
          Object.defineProperty(a, d.key, d);
        }
      }
      function c(a, b) {
        return (c = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      var m = (0, cc._decorator.ccclass)("cc.MaterialVariant")(f = function (a) {
        var b;
        var d;
        var f;
        var l;
        function m(b) {
          var c;
          (c = a.call(this) || this)._owner = null;
          c._material = null;
          c.init(b);
          return c;
        }
        d = a;
        (b = m).prototype = Object.create(d.prototype);
        b.prototype.constructor = b;
        c(b, d);
        m.createWithBuiltin = function (a, b) {
          return m.create(g.default.getBuiltinMaterial(a), b);
        };
        m.create = function (a, b) {
          if (a) {
            return j.default.get(a, b);
          } else {
            return null;
          }
        };
        m.prototype.init = function (a) {
          this._effect = new i.default(a.effect);
          this._effectAsset = a._effectAsset;
          this._material = a;
        };
        f = m;
        if (l = [{
          key: "uuid",
          get: function () {
            return this._material._uuid;
          }
        }, {
          key: "owner",
          get: function () {
            return this._owner;
          }
        }, {
          key: "material",
          get: function () {
            return this._material;
          }
        }]) {
          k(f.prototype, l);
        }
        Object.defineProperty(f, "prototype", {
          writable: false
        });
        return m;
      }(g.default)) || f;
      e.default = m;
      cc.MaterialVariant = m;
      d.exports = e.default;
    }, {
      "./CCMaterial": 76,
      "./effect-variant": 79,
      "./material-pool": 82
    }],
    84: [function (b, d, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var f;
      var g = (f = b("../../../renderer/enums")) && f.__esModule ? f : {
        default: f
      };
      var h = [];
      function i(a, b) {
        for (var c = b.length, d = 0; d < c; d++) {
          var e = b[d];
          h[d] = e + a[e];
        }
        h.length = c;
        return h.join("");
      }
      function a(b, d) {
        for (var e = 0, f = 0, j = d.length; f < j; f++) {
          var a = b[d[f]];
          var k = a.value;
          if (k) {
            if (a.type === g.default.PARAM_TEXTURE_2D || a.type === g.default.PARAM_TEXTURE_CUBE) {
              h[e] = k._id;
            } else {
              h[e] = k.toString();
            }
            e++;
          }
        }
        h.length = e;
        return h.join(";");
      }
      var j = {
        serializeDefines: i,
        serializePasses: function (b) {
          for (var c, d, f = "", g = 0; g < b.length; g++) {
            undefined;
            d = undefined;
            d = (c = b[g])._programName + c._cullMode;
            if (c._blend) {
              d += c._blendEq + c._blendAlphaEq + c._blendSrc + c._blendDst + c._blendSrcAlpha + c._blendDstAlpha + c._blendColor;
            }
            if (c._depthTest) {
              d += c._depthWrite + c._depthFunc;
            }
            if (c._stencilTest) {
              d += c._stencilFuncFront + c._stencilRefFront + c._stencilMaskFront + c._stencilFailOpFront + c._stencilZFailOpFront + c._stencilZPassOpFront + c._stencilWriteMaskFront + c._stencilFuncBack + c._stencilRefBack + c._stencilMaskBack + c._stencilFailOpBack + c._stencilZFailOpBack + c._stencilZPassOpBack + c._stencilWriteMaskBack;
            }
            d += a(c._properties, c._propertyNames);
            f += d += i(c._defines, c._defineNames);
          }
          return f;
        },
        serializeUniforms: a
      };
      e.default = j;
      d.exports = e.default;
    }, {
      "../../../renderer/enums": 277
    }],
    85: [function (b, d) {
      "use strict";
  
      b("../CCNode").EventType;
      var j = 56;
      var i = 7;
      var g = cc.Enum({
        ONCE: 0,
        ON_WINDOW_RESIZE: 1,
        ALWAYS: 2
      });
      function e(b, d, e, f) {
        var g = b._parent.scaleX;
        var i = b._parent.scaleY;
        var j = 0;
        var k = 0;
        var m = b._parent;
        for (;;) {
          j += m.x;
          k += m.y;
          if (!(m = m._parent)) {
            e.x = e.y = 0;
            f.x = f.y = 1;
            return;
          }
          if (m === d) {
            break;
          }
          var n = m.scaleX;
          var p = m.scaleY;
          j *= n;
          k *= p;
          g *= n;
          i *= p;
        }
        f.x = g !== 0 ? 1 / g : 1;
        f.y = i !== 0 ? 1 / i : 1;
        e.x = -j;
        e.y = -k;
      }
      var k = cc.Vec2.ZERO;
      var a = cc.Vec2.ONE;
      function m(n, o) {
        var q;
        var s;
        var t;
        var z = o._target;
        if (z) {
          e(n, q = z, s = k, t = a);
        } else {
          q = n._parent;
        }
        var h;
        var B = (h = q) instanceof cc.Scene ? cc.visibleRect : h._contentSize;
        var f = q._anchorPoint;
        var d = q instanceof cc.Scene;
        var D = n.x;
        var F = n.y;
        var G = n._anchorPoint;
        if (o._alignFlags & j) {
          var g;
          var H;
          var J = B.width;
          if (d) {
            g = cc.visibleRect.left.x;
            H = cc.visibleRect.right.x;
          } else {
            H = (g = -f.x * J) + J;
          }
          g += o._isAbsLeft ? o._left : o._left * J;
          H -= o._isAbsRight ? o._right : o._right * J;
          if (z) {
            g += s.x;
            g *= t.x;
            H += s.x;
            H *= t.x;
          }
          var K;
          var N = G.x;
          var Q = n.scaleX;
          if (Q < 0) {
            N = 1 - N;
            Q = -Q;
          }
          if (o.isStretchWidth) {
            K = H - g;
            if (Q !== 0) {
              n.width = K / Q;
            }
            D = g + N * K;
          } else {
            K = n.width * Q;
            if (o.isAlignHorizontalCenter) {
              var T = o._isAbsHorizontalCenter ? o._horizontalCenter : o._horizontalCenter * J;
              var U = (0.5 - f.x) * B.width;
              if (z) {
                T *= t.x;
                U += s.x;
                U *= t.x;
              }
              D = U + (N - 0.5) * K + T;
            } else {
              D = o.isAlignLeft ? g + N * K : H + (N - 1) * K;
            }
          }
        }
        if (o._alignFlags & i) {
          var V;
          var W;
          var X = B.height;
          if (d) {
            W = cc.visibleRect.bottom.y;
            V = cc.visibleRect.top.y;
          } else {
            V = (W = -f.y * X) + X;
          }
          W += o._isAbsBottom ? o._bottom : o._bottom * X;
          V -= o._isAbsTop ? o._top : o._top * X;
          if (z) {
            W += s.y;
            W *= t.y;
            V += s.y;
            V *= t.y;
          }
          var M;
          var Y = G.y;
          var Z = n.scaleY;
          if (Z < 0) {
            Y = 1 - Y;
            Z = -Z;
          }
          if (o.isStretchHeight) {
            M = V - W;
            if (Z !== 0) {
              n.height = M / Z;
            }
            F = W + Y * M;
          } else {
            M = n.height * Z;
            if (o.isAlignVerticalCenter) {
              var $ = o._isAbsVerticalCenter ? o._verticalCenter : o._verticalCenter * X;
              var _ = (0.5 - f.y) * B.height;
              if (z) {
                $ *= t.y;
                _ += s.y;
                _ *= t.y;
              }
              F = _ + (Y - 0.5) * M + $;
            } else {
              F = o.isAlignBottom ? W + Y * M : V + (Y - 1) * M;
            }
          }
        }
        n.setPosition(D, F);
      }
      function c(a) {
        var b = a._widget;
        if (b) {
          m(a, b);
          if (b.alignMode !== g.ALWAYS) {
            n.remove(b);
          } else {
            h.push(b);
          }
        }
        for (var d = a._children, e = 0; e < d.length; e++) {
          var f = d[e];
          if (f._active) {
            c(f);
          }
        }
      }
      function l() {
        var a = cc.director.getScene();
        if (a) {
          n.isAligning = true;
          if (n._nodesOrderDirty) {
            h.length = 0;
            c(a);
            n._nodesOrderDirty = false;
          } else {
            var b;
            var d = n._activeWidgetsIterator;
            for (d.i = 0; d.i < h.length; ++d.i) {
              m((b = h[d.i]).node, b);
            }
          }
          n.isAligning = false;
        }
      }
      var h = [];
      var n = cc._widgetManager = d.exports = {
        _AlignFlags: {
          TOP: 1,
          MID: 2,
          BOT: 4,
          LEFT: 8,
          CENTER: 16,
          RIGHT: 32
        },
        isAligning: false,
        _nodesOrderDirty: false,
        _activeWidgetsIterator: new cc.js.array.MutableForwardIterator(h),
        init: function (a) {
          a.on(cc.Director.EVENT_AFTER_UPDATE, l);
          var b = this.onResized.bind(this);
          cc.view.on("canvas-resize", b);
          window.addEventListener("orientationchange", b);
        },
        add: function (a) {
          a.node._widget = a;
          this._nodesOrderDirty = true;
        },
        remove: function (a) {
          a.node._widget = null;
          this._activeWidgetsIterator.remove(a);
        },
        onResized: function () {
          var a = cc.director.getScene();
          if (a) {
            this.refreshWidgetOnResized(a);
          }
        },
        refreshWidgetOnResized: function (a) {
          var b = cc.Node.isNode(a) && a.getComponent(cc.Widget);
          if (b && b.enabled && b.alignMode === g.ON_WINDOW_RESIZE) {
            this.add(b);
          }
          for (var c = a._children, d = 0; d < c.length; d++) {
            var e = c[d];
            this.refreshWidgetOnResized(e);
          }
        },
        updateAlignment: function b(a) {
          var c = a._parent;
          if (cc.Node.isNode(c)) {
            b(c);
          }
          var d = a._widget || a.getComponent(cc.Widget);
          if (d && c) {
            m(a, d);
          }
        },
        AlignMode: g
      };
    }, {
      "../CCNode": 26
    }],
    86: [function (b, j) {
      "use strict";
  
      var k = b("../value-types");
      var e = b("../geom-utils");
      var i = b("../utils/affine-transform");
      var n = b("../renderer/index");
      var q = b("../renderer/render-flow");
      var a = b("../CCGame");
      var o = null;
      o = b("../../renderer/scene/camera");
      var w = cc.mat4();
      var l = cc.mat4();
      var h = cc.v3();
      var r = cc.v3();
      var f = cc.v3();
      var d = [];
      function s() {
        for (var a = 0, b = Number.MAX_VALUE; a < d.length; a++) {
          var c = d[a];
          if (c._depth < b) {
            x.main = c;
            b = c._depth;
          }
        }
      }
      var p = null;
      function u() {
        if (p) {
          var a = p.getNode();
          var b = cc.game.canvas;
          a.z = b.height / 1.1566;
          a.x = b.width / 2;
          a.y = b.height / 2;
        }
      }
      var g = cc.Enum({
        COLOR: 1,
        DEPTH: 2,
        STENCIL: 4
      });
      var m = cc.Enum({
        OPAQUE: 1,
        TRANSPARENT: 2
      });
      var x = cc.Class({
        name: "cc.Camera",
        extends: cc.Component,
        ctor: function () {
          if (a.renderType !== a.RENDER_TYPE_CANVAS) {
            var b = new o();
            b.setStages(["opaque"]);
            b.dirty = true;
            this._inited = false;
            this._camera = b;
          } else {
            this._inited = true;
          }
        },
        editor: false,
        properties: {
          _cullingMask: 4294967295,
          _clearFlags: g.DEPTH | g.STENCIL,
          _backgroundColor: cc.color(0, 0, 0, 255),
          _depth: 0,
          _zoomRatio: 1,
          _targetTexture: null,
          _fov: 60,
          _orthoSize: 10,
          _nearClip: 1,
          _farClip: 4096,
          _ortho: true,
          _rect: cc.rect(0, 0, 1, 1),
          _renderStages: 1,
          _alignWithScreen: true,
          zoomRatio: {
            get: function () {
              return this._zoomRatio;
            },
            set: function (a) {
              this._zoomRatio = a;
            },
            tooltip: false
          },
          fov: {
            get: function () {
              return this._fov;
            },
            set: function (a) {
              this._fov = a;
            },
            tooltip: false
          },
          orthoSize: {
            get: function () {
              return this._orthoSize;
            },
            set: function (a) {
              this._orthoSize = a;
            },
            tooltip: false
          },
          nearClip: {
            get: function () {
              return this._nearClip;
            },
            set: function (a) {
              this._nearClip = a;
              this._updateClippingpPlanes();
            },
            tooltip: false
          },
          farClip: {
            get: function () {
              return this._farClip;
            },
            set: function (a) {
              this._farClip = a;
              this._updateClippingpPlanes();
            },
            tooltip: false
          },
          ortho: {
            get: function () {
              return this._ortho;
            },
            set: function (a) {
              this._ortho = a;
              this._updateProjection();
            },
            tooltip: false
          },
          rect: {
            get: function () {
              return this._rect;
            },
            set: function (a) {
              this._rect = a;
              this._updateRect();
            },
            tooltip: false
          },
          cullingMask: {
            get: function () {
              return this._cullingMask;
            },
            set: function (a) {
              this._cullingMask = a;
              this._updateCameraMask();
            },
            tooltip: false
          },
          clearFlags: {
            get: function () {
              return this._clearFlags;
            },
            set: function (a) {
              this._clearFlags = a;
              if (this._camera) {
                this._camera.setClearFlags(a);
              }
            },
            tooltip: false
          },
          backgroundColor: {
            get: function () {
              return this._backgroundColor;
            },
            set: function (a) {
              if (!this._backgroundColor.equals(a)) {
                this._backgroundColor.set(a);
                this._updateBackgroundColor();
              }
            },
            tooltip: false
          },
          depth: {
            get: function () {
              return this._depth;
            },
            set: function (a) {
              if (x.main === this) {
                if (this._depth < a) {
                  s();
                }
              } else if (x.main && a < x.main._depth && d.includes(this)) {
                x.main = this;
              }
              this._depth = a;
              if (this._camera) {
                this._camera.setPriority(a);
              }
            },
            tooltip: false
          },
          targetTexture: {
            get: function () {
              return this._targetTexture;
            },
            set: function (a) {
              this._targetTexture = a;
              this._updateTargetTexture();
            },
            tooltip: false
          },
          renderStages: {
            get: function () {
              return this._renderStages;
            },
            set: function (a) {
              this._renderStages = a;
              this._updateStages();
            },
            tooltip: false
          },
          alignWithScreen: {
            get: function () {
              return this._alignWithScreen;
            },
            set: function (a) {
              this._alignWithScreen = a;
            }
          },
          _is3D: {
            get: function () {
              return this.node && this.node._is3DNode;
            }
          }
        },
        statics: {
          main: null,
          cameras: d,
          ClearFlags: g,
          findCamera: function (a) {
            for (var b = 0, c = d.length; b < c; b++) {
              var f = d[b];
              if (f.containsNode(a)) {
                return f;
              }
            }
            return null;
          },
          _findRendererCamera: function (a) {
            for (var b = n.scene._cameras, c = 0; c < b._count; c++) {
              if (b._data[c]._cullingMask & a._cullingMask) {
                return b._data[c];
              }
            }
            return null;
          },
          _setupDebugCamera: function () {
            if (!p && a.renderType !== a.RENDER_TYPE_CANVAS) {
              var b = new o();
              p = b;
              b.setStages(["opaque"]);
              b.setFov(Math.PI * 60 / 180);
              b.setNear(0.1);
              b.setFar(4096);
              b.dirty = true;
              b.cullingMask = 1 << cc.Node.BuiltinGroupIndex.DEBUG;
              b.setPriority(cc.macro.MAX_ZINDEX);
              b.setClearFlags(0);
              b.setColor(0, 0, 0, 0);
              var c = new cc.Node();
              b.setNode(c);
              u();
              cc.view.on("design-resolution-changed", u);
              n.scene.addCamera(b);
            }
          }
        },
        _updateCameraMask: function () {
          if (this._camera) {
            var a = this._cullingMask & ~(1 << cc.Node.BuiltinGroupIndex.DEBUG);
            this._camera.cullingMask = a;
          }
        },
        _updateBackgroundColor: function () {
          if (this._camera) {
            var a = this._backgroundColor;
            this._camera.setColor(a.r / 255, a.g / 255, a.b / 255, a.a / 255);
          }
        },
        _updateTargetTexture: function () {
          if (this._camera) {
            var a = this._targetTexture;
            this._camera.setFrameBuffer(a ? a._framebuffer : null);
          }
        },
        _updateClippingpPlanes: function () {
          if (this._camera) {
            this._camera.setNear(this._nearClip);
            this._camera.setFar(this._farClip);
          }
        },
        _updateProjection: function () {
          if (this._camera) {
            var a = this._ortho ? 1 : 0;
            this._camera.setType(a);
          }
        },
        _updateRect: function () {
          if (this._camera) {
            var a = this._rect;
            this._camera.setRect(a.x, a.y, a.width, a.height);
          }
        },
        _updateStages: function () {
          var a = this._renderStages;
          var b = [];
          if (a & m.OPAQUE) {
            b.push("opaque");
          }
          if (a & m.TRANSPARENT) {
            b.push("transparent");
          }
          this._camera.setStages(b);
        },
        _init: function () {
          if (!this._inited) {
            this._inited = true;
            var a = this._camera;
            if (a) {
              a.setNode(this.node);
              a.setClearFlags(this._clearFlags);
              a.setPriority(this._depth);
              this._updateBackgroundColor();
              this._updateCameraMask();
              this._updateTargetTexture();
              this._updateClippingpPlanes();
              this._updateProjection();
              this._updateStages();
              this._updateRect();
              this.beforeDraw();
            }
          }
        },
        __preload: function () {
          this._init();
        },
        onEnable: function () {
          if (a.renderType !== a.RENDER_TYPE_CANVAS) {
            cc.director.on(cc.Director.EVENT_BEFORE_DRAW, this.beforeDraw, this);
            n.scene.addCamera(this._camera);
          }
          d.push(this);
          if (!x.main || this._depth < x.main._depth) {
            x.main = this;
          }
        },
        onDisable: function () {
          if (a.renderType !== a.RENDER_TYPE_CANVAS) {
            cc.director.off(cc.Director.EVENT_BEFORE_DRAW, this.beforeDraw, this);
            n.scene.removeCamera(this._camera);
          }
          cc.js.array.fastRemove(d, this);
          if (x.main === this) {
            x.main = null;
            s();
          }
        },
        getScreenToWorldMatrix2D: function (a) {
          this.getWorldToScreenMatrix2D(a);
          k.Mat4.invert(a, a);
          return a;
        },
        getWorldToScreenMatrix2D: function (b) {
          this.node.getWorldRT(w);
          var c = this.zoomRatio;
          var d = w.m;
          d[0] *= c;
          d[1] *= c;
          d[4] *= c;
          d[5] *= c;
          var e = d[12];
          var f = d[13];
          var g = cc.visibleRect.center;
          d[12] = g.x - (d[0] * e + d[4] * f);
          d[13] = g.y - (d[1] * e + d[5] * f);
          if (b !== w) {
            k.Mat4.copy(b, w);
          }
          return b;
        },
        getScreenToWorldPoint: function (a, b) {
          if (this.node.is3DNode) {
            b = b || new cc.Vec3();
            this._camera.screenToWorld(b, a, cc.visibleRect.width, cc.visibleRect.height);
          } else {
            b = b || new cc.Vec2();
            this.getScreenToWorldMatrix2D(w);
            k.Vec2.transformMat4(b, a, w);
          }
          return b;
        },
        getWorldToScreenPoint: function (a, b) {
          if (this.node.is3DNode) {
            b = b || new cc.Vec3();
            this._camera.worldToScreen(b, a, cc.visibleRect.width, cc.visibleRect.height);
          } else {
            b = b || new cc.Vec2();
            this.getWorldToScreenMatrix2D(w);
            k.Vec2.transformMat4(b, a, w);
          }
          return b;
        },
        getRay: function (a) {
          if (cc.geomUtils) {
            k.Vec3.set(f, a.x, a.y, 1);
            this._camera.screenToWorld(r, f, cc.visibleRect.width, cc.visibleRect.height);
            if (this.ortho) {
              k.Vec3.set(f, a.x, a.y, -1);
              this._camera.screenToWorld(h, f, cc.visibleRect.width, cc.visibleRect.height);
            } else {
              this.node.getWorldPosition(h);
            }
            return e.Ray.fromPoints(new e.Ray(), h, r);
          } else {
            return a;
          }
        },
        containsNode: function (a) {
          return (a._cullingMask & this.cullingMask) > 0;
        },
        render: function (a) {
          if (!(a = a || cc.director.getScene())) {
            return null;
          }
          this.node.getWorldMatrix(w);
          this.beforeDraw();
          q.renderCamera(this._camera, a);
        },
        _onAlignWithScreen: function () {
          var a = cc.game.canvas.height / cc.view._scaleY;
          if (this._targetTexture) {
            a = cc.visibleRect.height;
          }
          var b = this._fov * cc.macro.RAD;
          this.node.z = a / (Math.tan(b / 2) * 2);
          b = Math.atan(Math.tan(b / 2) / this.zoomRatio) * 2;
          this._camera.setFov(b);
          this._camera.setOrthoHeight(a / 2 / this.zoomRatio);
          this.node.setRotation(0, 0, 0, 1);
        },
        beforeDraw: function () {
          if (this._camera) {
            if (this._alignWithScreen) {
              this._onAlignWithScreen();
            } else {
              var a = this._fov * cc.macro.RAD;
              a = Math.atan(Math.tan(a / 2) / this.zoomRatio) * 2;
              this._camera.setFov(a);
              this._camera.setOrthoHeight(this._orthoSize / this.zoomRatio);
            }
            this._camera.dirty = true;
          }
        }
      });
      cc.js.mixin(x.prototype, {
        getNodeToCameraTransform: function (a) {
          var b = i.identity();
          a.getWorldMatrix(l);
          if (this.containsNode(a)) {
            this.getWorldToCameraMatrix(w);
            k.Mat4.mul(l, l, w);
          }
          i.fromMat4(b, l);
          return b;
        },
        getCameraToWorldPoint: function (a, b) {
          return this.getScreenToWorldPoint(a, b);
        },
        getWorldToCameraPoint: function (a, b) {
          return this.getWorldToScreenPoint(a, b);
        },
        getCameraToWorldMatrix: function (a) {
          return this.getScreenToWorldMatrix2D(a);
        },
        getWorldToCameraMatrix: function (a) {
          return this.getWorldToScreenMatrix2D(a);
        }
      });
      j.exports = cc.Camera = x;
    }, {
      "../../renderer/scene/camera": 302,
      "../CCGame": 25,
      "../geom-utils": 142,
      "../renderer/index": 193,
      "../renderer/render-flow": 194,
      "../utils/affine-transform": 227,
      "../value-types": 251
    }],
    87: [function (a, b) {
      "use strict";
  
      cc.Collider.Box = cc.Class({
        properties: {
          _offset: cc.v2(0, 0),
          _size: cc.size(100, 100),
          offset: {
            tooltip: false,
            get: function () {
              return this._offset;
            },
            set: function (a) {
              this._offset = a;
            },
            type: cc.Vec2
          },
          size: {
            tooltip: false,
            get: function () {
              return this._size;
            },
            set: function (a) {
              this._size.width = a.width < 0 ? 0 : a.width;
              this._size.height = a.height < 0 ? 0 : a.height;
            },
            type: cc.Size
          }
        },
        resetInEditor: false
      });
      var c = cc.Class({
        name: "cc.BoxCollider",
        extends: cc.Collider,
        mixins: [cc.Collider.Box],
        editor: false
      });
      cc.BoxCollider = b.exports = c;
    }, {}],
    88: [function (a, b) {
      "use strict";
  
      cc.Collider.Circle = cc.Class({
        properties: {
          _offset: cc.v2(0, 0),
          _radius: 50,
          offset: {
            tooltip: false,
            get: function () {
              return this._offset;
            },
            set: function (a) {
              this._offset = a;
            },
            type: cc.Vec2
          },
          radius: {
            tooltip: false,
            get: function () {
              return this._radius;
            },
            set: function (a) {
              this._radius = a < 0 ? 0 : a;
            }
          }
        },
        resetInEditor: false
      });
      var c = cc.Class({
        name: "cc.CircleCollider",
        extends: cc.Collider,
        mixins: [cc.Collider.Circle],
        editor: false
      });
      cc.CircleCollider = b.exports = c;
    }, {}],
    89: [function (a, b) {
      "use strict";
  
      var c = cc.Class({
        name: "cc.Collider",
        extends: cc.Component,
        properties: {
          editing: {
            default: false,
            serializable: false,
            tooltip: false
          },
          tag: {
            tooltip: false,
            default: 0,
            range: [0, 10000000],
            type: cc.Integer
          }
        },
        onDisable: function () {
          cc.director.getCollisionManager().removeCollider(this);
        },
        onEnable: function () {
          cc.director.getCollisionManager().addCollider(this);
        }
      });
      cc.Collider = b.exports = c;
    }, {}],
    90: [function (b, d) {
      "use strict";
  
      var e;
      var f = (e = b("../value-types/vec2")) && e.__esModule ? e : {
        default: e
      };
      var g = b("./CCContact");
      var h = g.CollisionType;
      var j = b("../CCNode").EventType;
      var a = new f.default();
      function k(b, j, e, i, k, n) {
        var q = b.x;
        var a = b.y;
        var o = b.width;
        var c = b.height;
        var l = j.m;
        var h = l[0];
        var r = l[1];
        var f = l[4];
        var d = l[5];
        var s = h * q + f * a + l[12];
        var p = r * q + d * a + l[13];
        var t = h * o;
        var g = r * o;
        var m = f * c;
        var u = d * c;
        i.x = s;
        i.y = p;
        k.x = t + s;
        k.y = g + p;
        e.x = m + s;
        e.y = u + p;
        n.x = t + m + s;
        n.y = g + u + p;
      }
      var c = cc.Class({
        mixins: [cc.EventTarget],
        properties: {
          enabled: false,
          enabledDrawBoundingBox: false
        },
        ctor: function () {
          this._contacts = [];
          this._colliders = [];
          this._debugDrawer = null;
          this._enabledDebugDraw = false;
          if (cc.director._scheduler) {
            cc.director._scheduler.enableForTarget(this);
          }
        },
        update: function () {
          if (this.enabled) {
            var b;
            var c;
            var d = this._colliders;
            b = 0;
            c = d.length;
            for (; b < c; b++) {
              this.updateCollider(d[b]);
            }
            var f = this._contacts;
            var g = [];
            b = 0;
            c = f.length;
            for (; b < c; b++) {
              var i = f[b].updateState();
              if (i !== h.None) {
                g.push([i, f[b]]);
              }
            }
            b = 0;
            c = g.length;
            for (; b < c; b++) {
              var j = g[b];
              this._doCollide(j[0], j[1]);
            }
            this.drawColliders();
          }
        },
        _doCollide: function (b, d) {
          var e;
          switch (b) {
            case h.CollisionEnter:
              e = "onCollisionEnter";
              break;
            case h.CollisionStay:
              e = "onCollisionStay";
              break;
            case h.CollisionExit:
              e = "onCollisionExit";
          }
          var f;
          var g;
          var j;
          var k = d.collider1;
          var m = d.collider2;
          var c = k.node._components;
          var l = m.node._components;
          f = 0;
          g = c.length;
          for (; f < g; f++) {
            if ((j = c[f])[e]) {
              j[e](m, k);
            }
          }
          f = 0;
          g = l.length;
          for (; f < g; f++) {
            if ((j = l[f])[e]) {
              j[e](k, m);
            }
          }
        },
        shouldCollide: function (a, b) {
          var c = a.node;
          var d = b.node;
          var e = cc.game.collisionMatrix;
          return c !== d && e[c.groupIndex][d.groupIndex];
        },
        initCollider: function (a) {
          if (!a.world) {
            var b = a.world = {};
            b.aabb = cc.rect();
            b.preAabb = cc.rect();
            b.matrix = cc.mat4();
            b.radius = 0;
            if (a instanceof cc.BoxCollider) {
              b.position = null;
              b.points = [cc.v2(), cc.v2(), cc.v2(), cc.v2()];
            } else if (a instanceof cc.PolygonCollider) {
              b.position = null;
              b.points = a.points.map(function (a) {
                return cc.v2(a.x, a.y);
              });
            } else if (a instanceof cc.CircleCollider) {
              b.position = cc.v2();
              b.points = null;
            }
          }
        },
        updateCollider: function (c) {
          var j = c.offset;
          var e = c.world;
          var i = e.aabb;
          var n = e.matrix;
          c.node.getWorldMatrix(n);
          var o = e.preAabb;
          o.x = i.x;
          o.y = i.y;
          o.width = i.width;
          o.height = i.height;
          if (c instanceof cc.BoxCollider) {
            var q = c.size;
            i.x = j.x - q.width / 2;
            i.y = j.y - q.height / 2;
            i.width = q.width;
            i.height = q.height;
            var l = e.points;
            var h = l[0];
            var r = l[1];
            var s = l[2];
            var d = l[3];
            k(i, n, h, r, s, d);
            var t = Math.min(h.x, r.x, s.x, d.x);
            var p = Math.min(h.y, r.y, s.y, d.y);
            var u = Math.max(h.x, r.x, s.x, d.x);
            var g = Math.max(h.y, r.y, s.y, d.y);
            i.x = t;
            i.y = p;
            i.width = u - t;
            i.height = g - p;
          } else if (c instanceof cc.CircleCollider) {
            f.default.transformMat4(a, c.offset, n);
            e.position.x = a.x;
            e.position.y = a.y;
            var m = n.m;
            var v = m[12];
            var y = m[13];
            m[12] = m[13] = 0;
            a.x = c.radius;
            a.y = 0;
            f.default.transformMat4(a, a, n);
            var z = Math.sqrt(a.x * a.x + a.y * a.y);
            e.radius = z;
            i.x = e.position.x - z;
            i.y = e.position.y - z;
            i.width = z * 2;
            i.height = z * 2;
            m[12] = v;
            m[13] = y;
          } else if (c instanceof cc.PolygonCollider) {
            var A = c.points;
            var x = e.points;
            x.length = A.length;
            for (var B = 1000000, C = 1000000, D = -1000000, E = -1000000, F = 0, G = A.length; F < G; F++) {
              if (!x[F]) {
                x[F] = cc.v2();
              }
              a.x = A[F].x + j.x;
              a.y = A[F].y + j.y;
              f.default.transformMat4(a, a, n);
              var H = a.x;
              var I = a.y;
              x[F].x = H;
              x[F].y = I;
              if (H > D) {
                D = H;
              }
              if (H < B) {
                B = H;
              }
              if (I > E) {
                E = I;
              }
              if (I < C) {
                C = I;
              }
            }
            i.x = B;
            i.y = C;
            i.width = D - B;
            i.height = E - C;
          }
        },
        addCollider: function (a) {
          var b = this._colliders;
          if (b.indexOf(a) === -1) {
            for (var c = 0, d = b.length; c < d; c++) {
              var e = b[c];
              if (this.shouldCollide(a, e)) {
                var f = new g(a, e);
                this._contacts.push(f);
              }
            }
            b.push(a);
            this.initCollider(a);
          }
          a.node.on(j.GROUP_CHANGED, this.onNodeGroupChanged, this);
        },
        removeCollider: function (a) {
          var b = this._colliders;
          var c = b.indexOf(a);
          if (c >= 0) {
            b.splice(c, 1);
            for (var d = this._contacts, e = d.length - 1; e >= 0; e--) {
              var f = d[e];
              if (!(f.collider1 !== a && f.collider2 !== a)) {
                if (f.touching) {
                  this._doCollide(h.CollisionExit, f);
                }
                d.splice(e, 1);
              }
            }
            a.node.off(j.GROUP_CHANGED, this.onNodeGroupChanged, this);
          }
        },
        onNodeGroupChanged: function (a) {
          for (var b = a.getComponents(cc.Collider), c = 0, d = b.length; c < d; c++) {
            var e = b[c];
            if (!(cc.PhysicsCollider && e instanceof cc.PhysicsCollider)) {
              this.removeCollider(e);
              this.addCollider(e);
            }
          }
        },
        drawColliders: function () {
          if (this._enabledDebugDraw) {
            this._checkDebugDrawValid();
            var b = this._debugDrawer;
            b.clear();
            for (var c = this._colliders, d = 0, e = c.length; d < e; d++) {
              var f = c[d];
              b.strokeColor = cc.Color.WHITE;
              if (f instanceof cc.BoxCollider || f instanceof cc.PolygonCollider) {
                var g = f.world.points;
                if (g.length > 0) {
                  b.moveTo(g[0].x, g[0].y);
                  for (var h = 1; h < g.length; h++) {
                    b.lineTo(g[h].x, g[h].y);
                  }
                  b.close();
                  b.stroke();
                }
              } else if (f instanceof cc.CircleCollider) {
                b.circle(f.world.position.x, f.world.position.y, f.world.radius);
                b.stroke();
              }
              if (this.enabledDrawBoundingBox) {
                var j = f.world.aabb;
                b.strokeColor = cc.Color.BLUE;
                b.moveTo(j.xMin, j.yMin);
                b.lineTo(j.xMin, j.yMax);
                b.lineTo(j.xMax, j.yMax);
                b.lineTo(j.xMax, j.yMin);
                b.close();
                b.stroke();
              }
            }
          }
        },
        _checkDebugDrawValid: function () {
          if (!this._debugDrawer || !this._debugDrawer.isValid) {
            var a = new cc.Node("COLLISION_MANAGER_DEBUG_DRAW");
            a.zIndex = cc.macro.MAX_ZINDEX;
            cc.game.addPersistRootNode(a);
            this._debugDrawer = a.addComponent(cc.Graphics);
          }
        }
      });
      cc.js.getset(c.prototype, "enabledDebugDraw", function () {
        return this._enabledDebugDraw;
      }, function (a) {
        if (a && !this._enabledDebugDraw) {
          this._checkDebugDrawValid();
          this._debugDrawer.node.active = true;
        } else if (!a && this._enabledDebugDraw) {
          this._debugDrawer.clear(true);
          this._debugDrawer.node.active = false;
        }
        this._enabledDebugDraw = a;
      });
      cc.CollisionManager = d.exports = c;
    }, {
      "../CCNode": 26,
      "../value-types/vec2": 260,
      "./CCContact": 91
    }],
    91: [function (a, b) {
      "use strict";
  
      var c = a("./CCIntersection");
      var d = cc.Enum({
        None: 0,
        CollisionEnter: 1,
        CollisionStay: 2,
        CollisionExit: 3
      });
      function e(b, d) {
        this.collider1 = b;
        this.collider2 = d;
        this.touching = false;
        var e = b instanceof cc.BoxCollider || b instanceof cc.PolygonCollider;
        var f = d instanceof cc.BoxCollider || d instanceof cc.PolygonCollider;
        var g = b instanceof cc.CircleCollider;
        var h = d instanceof cc.CircleCollider;
        if (e && f) {
          this.testFunc = c.polygonPolygon;
        } else if (g && h) {
          this.testFunc = c.circleCircle;
        } else if (e && h) {
          this.testFunc = c.polygonCircle;
        } else if (g && f) {
          this.testFunc = c.polygonCircle;
          this.collider1 = d;
          this.collider2 = b;
        }
      }
      e.prototype.test = function () {
        var a = this.collider1.world;
        var b = this.collider2.world;
        return !!a.aabb.intersects(b.aabb) && (this.testFunc === c.polygonPolygon ? this.testFunc(a.points, b.points) : this.testFunc === c.circleCircle ? this.testFunc(a, b) : this.testFunc === c.polygonCircle && this.testFunc(a.points, b));
      };
      e.prototype.updateState = function () {
        var a = this.test();
        var b = d.None;
        if (a && !this.touching) {
          this.touching = true;
          b = d.CollisionEnter;
        } else if (a && this.touching) {
          b = d.CollisionStay;
        } else if (!a && this.touching) {
          this.touching = false;
          b = d.CollisionExit;
        }
        return b;
      };
      e.CollisionType = d;
      b.exports = e;
    }, {
      "./CCIntersection": 92
    }],
    92: [function (b, c) {
      "use strict";
  
      var d = {};
      function f(b, d, e, f) {
        var g = (f.x - e.x) * (b.y - e.y) - (f.y - e.y) * (b.x - e.x);
        var h = (d.x - b.x) * (b.y - e.y) - (d.y - b.y) * (b.x - e.x);
        var i = (f.y - e.y) * (d.x - b.x) - (f.x - e.x) * (d.y - b.y);
        if (i !== 0) {
          var a = g / i;
          var j = h / i;
          if (a >= 0 && a <= 1 && j >= 0 && j <= 1) {
            return true;
          }
        }
        return false;
      }
      function g(a, b, c) {
        for (var d = c.length, e = 0; e < d; ++e) {
          if (f(a, b, c[e], c[(e + 1) % d])) {
            return true;
          }
        }
        return false;
      }
      function h(b, d) {
        for (var e = false, f = b.x, g = b.y, j = d.length, k = 0, m = j - 1; k < j; m = k++) {
          var n = d[k].x;
          var p = d[k].y;
          var q = d[m].x;
          var r = d[m].y;
          if (p > g != r > g && f < (q - n) * (g - p) / (r - p) + n) {
            e = !e;
          }
        }
        return e;
      }
      function j(b, d, e, f) {
        var g;
        var h = e.x - d.x;
        var i = e.y - d.y;
        var j = h * h + i * i;
        var k = ((b.x - d.x) * h + (b.y - d.y) * i) / j;
        g = f ? j ? k < 0 ? d : k > 1 ? e : cc.v2(d.x + k * h, d.y + k * i) : d : cc.v2(d.x + k * h, d.y + k * i);
        h = b.x - g.x;
        i = b.y - g.y;
        return Math.sqrt(h * h + i * i);
      }
      d.lineLine = f;
      d.lineRect = function (b, c, d) {
        var e = new cc.Vec2(d.x, d.y);
        var g = new cc.Vec2(d.x, d.yMax);
        var h = new cc.Vec2(d.xMax, d.yMax);
        var a = new cc.Vec2(d.xMax, d.y);
        return !!(f(b, c, e, g) || f(b, c, g, h) || f(b, c, h, a) || f(b, c, a, e));
      };
      d.linePolygon = g;
      d.rectRect = function (b, d) {
        var e = b.x;
        var f = b.y;
        var g = b.x + b.width;
        var h = b.y + b.height;
        var i = d.x;
        var a = d.y;
        var j = d.x + d.width;
        var c = d.y + d.height;
        return e <= j && g >= i && f <= c && h >= a;
      };
      d.rectPolygon = function (b, d) {
        var e;
        var f;
        var j = new cc.Vec2(b.x, b.y);
        var a = new cc.Vec2(b.x, b.yMax);
        var k = new cc.Vec2(b.xMax, b.yMax);
        var c = new cc.Vec2(b.xMax, b.y);
        if (g(j, a, d)) {
          return true;
        }
        if (g(a, k, d)) {
          return true;
        }
        if (g(k, c, d)) {
          return true;
        }
        if (g(c, j, d)) {
          return true;
        }
        e = 0;
        f = d.length;
        for (; e < f; ++e) {
          if (h(d[e], b)) {
            return true;
          }
        }
        return !!(h(j, d) || h(a, d) || h(k, d) || h(c, d));
      };
      d.polygonPolygon = function (a, b) {
        var c;
        var d;
        c = 0;
        d = a.length;
        for (; c < d; ++c) {
          if (g(a[c], a[(c + 1) % d], b)) {
            return true;
          }
        }
        c = 0;
        d = b.length;
        for (; c < d; ++c) {
          if (h(b[c], a)) {
            return true;
          }
        }
        c = 0;
        d = a.length;
        for (; c < d; ++c) {
          if (h(a[c], b)) {
            return true;
          }
        }
        return false;
      };
      d.circleCircle = function (a, b) {
        return a.position.sub(b.position).mag() < a.radius + b.radius;
      };
      d.polygonCircle = function (a, b) {
        var c = b.position;
        if (h(c, a)) {
          return true;
        }
        for (var d = 0, e = a.length; d < e; d++) {
          if (j(c, d === 0 ? a[a.length - 1] : a[d - 1], a[d], true) < b.radius) {
            return true;
          }
        }
        return false;
      };
      d.pointInPolygon = h;
      d.pointLineDistance = j;
      cc.Intersection = c.exports = d;
    }, {}],
    93: [function (a, b) {
      "use strict";
  
      cc.Collider.Polygon = cc.Class({
        properties: {
          threshold: {
            default: 1,
            serializable: false,
            visible: false
          },
          _offset: cc.v2(0, 0),
          offset: {
            get: function () {
              return this._offset;
            },
            set: function (a) {
              this._offset = a;
            },
            type: cc.Vec2
          },
          points: {
            tooltip: false,
            default: function () {
              return [cc.v2(-50, -50), cc.v2(50, -50), cc.v2(50, 50), cc.v2(-50, 50)];
            },
            type: [cc.Vec2]
          }
        },
        resetPointsByContour: false
      });
      var c = cc.Class({
        name: "cc.PolygonCollider",
        extends: cc.Collider,
        mixins: [cc.Collider.Polygon],
        editor: false
      });
      cc.PolygonCollider = b.exports = c;
    }, {}],
    94: [function (a) {
      "use strict";
  
      a("./CCCollisionManager");
      a("./CCCollider");
      a("./CCBoxCollider");
      a("./CCCircleCollider");
      a("./CCPolygonCollider");
    }, {
      "./CCBoxCollider": 87,
      "./CCCircleCollider": 88,
      "./CCCollider": 89,
      "./CCCollisionManager": 90,
      "./CCPolygonCollider": 93
    }],
    95: [function (b, j) {
      "use strict";
  
      b("./platform/CCClass");
      var e = b("./platform/CCObject").Flags;
      var i = b("./platform/js").array;
      var k = e.IsStartCalled;
      var m = e.IsOnEnableCalled;
      function q(b, d) {
        for (var e = d.constructor._executionOrder, f = d._id, g = 0, h = b.length - 1, i = h >>> 1; g <= h; i = g + h >>> 1) {
          var j = b[i];
          var k = j.constructor._executionOrder;
          if (k > e) {
            h = i - 1;
          } else if (k < e) {
            g = i + 1;
          } else {
            var m = j._id;
            if (m > f) {
              h = i - 1;
            } else {
              if (!(m < f)) {
                return i;
              }
              g = i + 1;
            }
          }
        }
        return ~g;
      }
      function a(a, b) {
        for (var c = a.array, d = a.i + 1; d < c.length;) {
          var e = c[d];
          if (e._enabled && e.node && e.node._activeInHierarchy) {
            ++d;
          } else {
            a.removeAt(d);
            if (b) {
              e._objFlags &= ~b;
            }
          }
        }
      }
      e.IsEditorOnEnableCalled;
      var n = cc.Class({
        __ctor__: function (a) {
          var b = i.MutableForwardIterator;
          this._zero = new b([]);
          this._neg = new b([]);
          this._pos = new b([]);
          this._invoke = a;
        },
        statics: {
          stableRemoveInactive: a
        },
        add: null,
        remove: null,
        invoke: null
      });
      function c(a, b) {
        return a.constructor._executionOrder - b.constructor._executionOrder;
      }
      var l = cc.Class({
        extends: n,
        add: function (a) {
          var b = a.constructor._executionOrder;
          (b === 0 ? this._zero : b < 0 ? this._neg : this._pos).array.push(a);
        },
        remove: function (a) {
          var b = a.constructor._executionOrder;
          (b === 0 ? this._zero : b < 0 ? this._neg : this._pos).fastRemove(a);
        },
        cancelInactive: function (b) {
          a(this._zero, b);
          a(this._neg, b);
          a(this._pos, b);
        },
        invoke: function () {
          var a = this._neg;
          if (a.array.length > 0) {
            a.array.sort(c);
            this._invoke(a);
            a.array.length = 0;
          }
          this._invoke(this._zero);
          this._zero.array.length = 0;
          var b = this._pos;
          if (b.array.length > 0) {
            b.array.sort(c);
            this._invoke(b);
            b.array.length = 0;
          }
        }
      });
      var h = cc.Class({
        extends: n,
        add: function (a) {
          var b = a.constructor._executionOrder;
          if (b === 0) {
            this._zero.array.push(a);
          } else {
            var c = b < 0 ? this._neg.array : this._pos.array;
            var d = q(c, a);
            if (d < 0) {
              c.splice(~d, 0, a);
            }
          }
        },
        remove: function (a) {
          var b = a.constructor._executionOrder;
          if (b === 0) {
            this._zero.fastRemove(a);
          } else {
            var c = b < 0 ? this._neg : this._pos;
            var d = q(c.array, a);
            if (d >= 0) {
              c.removeAt(d);
            }
          }
        },
        invoke: function (a) {
          if (this._neg.array.length > 0) {
            this._invoke(this._neg, a);
          }
          this._invoke(this._zero, a);
          if (this._pos.array.length > 0) {
            this._invoke(this._pos, a);
          }
        }
      });
      function o(a, b, c, d) {
        var e = "var a=it.array;for(it.i=0;it.i<a.length;++it.i){var c=a[it.i];" + a + "}";
        d = b ? Function("it", "dt", e) : Function("it", e);
        a = Function("c", "dt", a);
        return function (b, e) {
          try {
            d(b, e);
          } catch (d) {
            cc._throw(d);
            var f = b.array;
            if (c) {
              f[b.i]._objFlags |= c;
            }
            ++b.i;
            for (; b.i < f.length; ++b.i) {
              try {
                a(f[b.i], e);
              } catch (d) {
                cc._throw(d);
                if (c) {
                  f[b.i]._objFlags |= c;
                }
              }
            }
          }
        };
      }
      var f = o("c.start();c._objFlags|=" + k, false, k);
      var d = o("c.update(dt)", true);
      var r = o("c.lateUpdate(dt)", true);
      function p() {
        this.startInvoker = new l(f);
        this.updateInvoker = new h(d);
        this.lateUpdateInvoker = new h(r);
        this._deferredComps = [];
        this._updating = false;
      }
      var s = cc.Class({
        ctor: p,
        unscheduleAll: p,
        statics: {
          LifeCycleInvoker: n,
          OneOffInvoker: l,
          createInvokeImpl: o,
          invokeOnEnable: function (a) {
            var b = cc.director._compScheduler;
            var c = a.array;
            for (a.i = 0; a.i < c.length; ++a.i) {
              var d = c[a.i];
              if (d._enabled) {
                d.onEnable();
                if (!!d.node._activeInHierarchy) {
                  b._onEnabled(d);
                }
              }
            }
          }
        },
        _onEnabled: function (a) {
          cc.director.getScheduler().resumeTarget(a);
          a._objFlags |= m;
          if (this._updating) {
            this._deferredComps.push(a);
          } else {
            this._scheduleImmediate(a);
          }
        },
        _onDisabled: function (a) {
          cc.director.getScheduler().pauseTarget(a);
          a._objFlags &= ~m;
          var b = this._deferredComps.indexOf(a);
          if (b >= 0) {
            i.fastRemoveAt(this._deferredComps, b);
          } else {
            if (!(!a.start || a._objFlags & k)) {
              this.startInvoker.remove(a);
            }
            if (a.update) {
              this.updateInvoker.remove(a);
            }
            if (a.lateUpdate) {
              this.lateUpdateInvoker.remove(a);
            }
          }
        },
        enableComp: function (a, b) {
          if (!(a._objFlags & m)) {
            if (a.onEnable) {
              if (b) {
                b.add(a);
                return;
              }
              a.onEnable();
              if (!a.node._activeInHierarchy) {
                return;
              }
            }
            this._onEnabled(a);
          }
        },
        disableComp: function (a) {
          if (a._objFlags & m) {
            if (a.onDisable) {
              a.onDisable();
            }
            this._onDisabled(a);
          }
        },
        _scheduleImmediate: function (a) {
          if (!(typeof a.start != "function" || a._objFlags & k)) {
            this.startInvoker.add(a);
          }
          if (typeof a.update == "function") {
            this.updateInvoker.add(a);
          }
          if (typeof a.lateUpdate == "function") {
            this.lateUpdateInvoker.add(a);
          }
        },
        _deferredSchedule: function () {
          for (var a = this._deferredComps, b = 0, c = a.length; b < c; b++) {
            this._scheduleImmediate(a[b]);
          }
          a.length = 0;
        },
        _startForNewComps: function () {
          if (this._deferredComps.length > 0) {
            this._deferredSchedule();
            this.startInvoker.invoke();
          }
        },
        startPhase: function () {
          this._updating = true;
          this.startInvoker.invoke();
          this._startForNewComps();
        },
        updatePhase: function (a) {
          this.updateInvoker.invoke(a);
        },
        lateUpdatePhase: function (a) {
          this.lateUpdateInvoker.invoke(a);
          this._updating = false;
          this._startForNewComps();
        }
      });
      j.exports = s;
    }, {
      "./platform/CCClass": 162,
      "./platform/CCObject": 168,
      "./platform/js": 183,
      "./utils/misc": 236
    }],
    96: [function (b, d) {
      "use strict";
  
      var e = b("../../animation/animation-animator");
      var f = b("../../animation/animation-clip");
      var g = b("../event/event-target");
      var h = b("../platform/js");
      function j(a, b) {
        return a === b;
      }
      var a = cc.Enum({
        PLAY: "play",
        STOP: "stop",
        PAUSE: "pause",
        RESUME: "resume",
        LASTFRAME: "lastframe",
        FINISHED: "finished"
      });
      var i = cc.Class({
        name: "cc.Animation",
        extends: b("./CCComponent"),
        mixins: [g],
        editor: false,
        statics: {
          EventType: a
        },
        ctor: function () {
          cc.EventTarget.call(this);
          this._animator = null;
          this._nameToState = h.createMap(true);
          this._didInit = false;
          this._currentClip = null;
        },
        properties: {
          _defaultClip: {
            default: null,
            type: f
          },
          defaultClip: {
            type: f,
            get: function () {
              return this._defaultClip;
            },
            set: function () {},
            tooltip: false
          },
          currentClip: {
            get: function () {
              return this._currentClip;
            },
            set: function (a) {
              this._currentClip = a;
            },
            type: f,
            visible: false
          },
          _writableClips: {
            get: function () {
              return this._clips;
            },
            set: function (a) {
              this._didInit = false;
              this._clips = a;
              this._init();
            },
            type: [f]
          },
          _clips: {
            default: [],
            type: [f],
            tooltip: false,
            visible: true
          },
          playOnLoad: {
            default: false,
            tooltip: false
          }
        },
        start: function () {
          if (this.playOnLoad && this._defaultClip && (!this._animator || !this._animator.isPlaying)) {
            var a = this.getAnimationState(this._defaultClip.name);
            this._animator.playState(a);
          }
        },
        onEnable: function () {
          if (this._animator) {
            this._animator.resume();
          }
        },
        onDisable: function () {
          if (this._animator) {
            this._animator.pause();
          }
        },
        onDestroy: function () {
          this.stop();
        },
        getClips: function () {
          return this._clips;
        },
        play: function (a, b) {
          var c = this.playAdditive(a, b);
          this._animator.stopStatesExcept(c);
          return c;
        },
        playAdditive: function (a, b) {
          this._init();
          var c = this.getAnimationState(a || this._defaultClip && this._defaultClip.name);
          if (c) {
            this.enabled = true;
            var d = this._animator;
            if (d.isPlaying && c.isPlaying) {
              if (c.isPaused) {
                d.resumeState(c);
              } else {
                d.stopState(c);
                d.playState(c, b);
              }
            } else {
              d.playState(c, b);
            }
            if (!this.enabledInHierarchy) {
              d.pause();
            }
            this.currentClip = c.clip;
          }
          return c;
        },
        stop: function (a) {
          if (this._didInit) {
            if (a) {
              var b = this._nameToState[a];
              if (b) {
                this._animator.stopState(b);
              }
            } else {
              this._animator.stop();
            }
          }
        },
        pause: function (a) {
          if (this._didInit) {
            if (a) {
              var b = this._nameToState[a];
              if (b) {
                this._animator.pauseState(b);
              }
            } else {
              this.enabled = false;
            }
          }
        },
        resume: function (a) {
          if (this._didInit) {
            if (a) {
              var b = this.getAnimationState(a);
              if (b) {
                this._animator.resumeState(b);
              }
            } else {
              this.enabled = true;
            }
          }
        },
        setCurrentTime: function (a, b) {
          this._init();
          if (b) {
            var c = this.getAnimationState(b);
            if (c) {
              this._animator.setStateTime(c, a);
            }
          } else {
            this._animator.setStateTime(a);
          }
        },
        getAnimationState: function (a) {
          this._init();
          var b = this._nameToState[a];
          if (b && !b.curveLoaded) {
            this._animator._reloadClip(b);
          }
          return b || null;
        },
        hasAnimationState: function (a) {
          this._init();
          return !!this._nameToState[a];
        },
        addClip: function (a, b) {
          if (a) {
            this._init();
            if (!cc.js.array.contains(this._clips, a)) {
              this._clips.push(a);
            }
            b = b || a.name;
            var c = this._nameToState[b];
            if (c) {
              if (c.clip === a) {
                return c;
              }
              var d = this._clips.indexOf(c.clip);
              if (d !== -1) {
                this._clips.splice(d, 1);
              }
            }
            var f = new cc.AnimationState(a, b);
            this._nameToState[b] = f;
            return f;
          }
        },
        removeClip: function (a, b) {
          if (a) {
            var c;
            this._init();
            for (var d in this._nameToState) {
              c = this._nameToState[d];
              if (j(c.clip, a)) {
                break;
              }
            }
            if (a === this._defaultClip) {
              if (!b) {
                return;
              }
              this._defaultClip = null;
            }
            if (c && c.isPlaying) {
              if (!b) {
                return;
              }
              this.stop(c.name);
            }
            this._clips = this._clips.filter(function (b) {
              return !j(b, a);
            });
            if (c) {
              delete this._nameToState[c.name];
            }
          }
        },
        sample: function (a) {
          this._init();
          if (a) {
            var b = this.getAnimationState(a);
            if (b) {
              b.sample();
            }
          } else {
            this._animator.sample();
          }
        },
        on: function (b, c, d, e) {
          this._init();
          var f = this._EventTargetOn(b, c, d, e);
          if (b === "lastframe") {
            var g = this._nameToState;
            for (var h in g) {
              g[h]._lastframeEventOn = true;
            }
          }
          return f;
        },
        off: function (a, b, c) {
          this._init();
          if (a === "lastframe") {
            var d = this._nameToState;
            for (var e in d) {
              d[e]._lastframeEventOn = false;
            }
          }
          this._EventTargetOff(a, b, c);
        },
        _init: function () {
          if (!this._didInit) {
            this._didInit = true;
            this._animator = new e(this.node, this);
            this._createStates();
          }
        },
        _createStates: function () {
          this._nameToState = h.createMap(true);
          for (var a = null, b = false, c = 0; c < this._clips.length; ++c) {
            var d = this._clips[c];
            if (d) {
              a = new cc.AnimationState(d);
              this._nameToState[a.name] = a;
              if (j(this._defaultClip, d)) {
                b = a;
              }
            }
          }
          if (this._defaultClip && !b) {
            a = new cc.AnimationState(this._defaultClip);
            this._nameToState[a.name] = a;
          }
        }
      });
      i.prototype._EventTargetOn = g.prototype.on;
      i.prototype._EventTargetOff = g.prototype.off;
      cc.Animation = d.exports = i;
    }, {
      "../../animation/animation-animator": 9,
      "../../animation/animation-clip": 10,
      "../event/event-target": 134,
      "../platform/js": 183,
      "./CCComponent": 100
    }],
    97: [function (a, b) {
      "use strict";
  
      var c = ["touchstart", "touchmove", "touchend", "mousedown", "mousemove", "mouseup", "mouseenter", "mouseleave", "mousewheel"];
      function d(a) {
        a.stopPropagation();
      }
      var e = cc.Class({
        name: "cc.BlockInputEvents",
        extends: a("./CCComponent"),
        editor: {
          menu: "i18n:MAIN_MENU.component.ui/Block Input Events",
          inspector: "packages://inspector/inspectors/comps/block-input-events.js",
          help: "i18n:COMPONENT.help_url.block_input_events"
        },
        onEnable: function () {
          for (var a = 0; a < c.length; a++) {
            this.node.on(c[a], d, this);
          }
        },
        onDisable: function () {
          for (var a = 0; a < c.length; a++) {
            this.node.off(c[a], d, this);
          }
        }
      });
      cc.BlockInputEvents = b.exports = e;
    }, {
      "./CCComponent": 100
    }],
    98: [function (b, c) {
      "use strict";
  
      var d = b("./CCComponent");
      var e = b("../utils/gray-sprite-state");
      var f = cc.Enum({
        NONE: 0,
        COLOR: 1,
        SPRITE: 2,
        SCALE: 3
      });
      var g = cc.Enum({
        NORMAL: 0,
        HOVER: 1,
        PRESSED: 2,
        DISABLED: 3
      });
      var h = cc.Class({
        name: "cc.Button",
        extends: d,
        mixins: [e],
        ctor: function () {
          this._pressed = false;
          this._hovered = false;
          this._fromColor = null;
          this._toColor = null;
          this._time = 0;
          this._transitionFinished = true;
          this._fromScale = cc.Vec2.ZERO;
          this._toScale = cc.Vec2.ZERO;
          this._originalScale = null;
          this._graySpriteMaterial = null;
          this._spriteMaterial = null;
          this._sprite = null;
        },
        editor: false,
        properties: {
          interactable: {
            default: true,
            tooltip: false,
            notify: function () {
              this._updateState();
              if (!this.interactable) {
                this._resetState();
              }
            },
            animatable: false
          },
          _resizeToTarget: {
            animatable: false,
            set: function (a) {
              if (a) {
                this._resizeNodeToTargetNode();
              }
            }
          },
          enableAutoGrayEffect: {
            default: false,
            tooltip: false,
            notify: function () {
              this._updateDisabledState(true);
            }
          },
          transition: {
            default: f.NONE,
            tooltip: false,
            type: f,
            animatable: false,
            notify: function (a) {
              this._updateTransition(a);
            },
            formerlySerializedAs: "transition"
          },
          normalColor: {
            default: cc.Color.WHITE,
            displayName: "Normal",
            tooltip: false,
            notify: function () {
              if (this.transition === f.Color && this._getButtonState() === g.NORMAL) {
                this._getTarget().opacity = this.normalColor.a;
              }
              this._updateState();
            }
          },
          pressedColor: {
            default: cc.color(211, 211, 211),
            displayName: "Pressed",
            tooltip: false,
            notify: function () {
              if (this.transition === f.Color && this._getButtonState() === g.PRESSED) {
                this._getTarget().opacity = this.pressedColor.a;
              }
              this._updateState();
            },
            formerlySerializedAs: "pressedColor"
          },
          hoverColor: {
            default: cc.Color.WHITE,
            displayName: "Hover",
            tooltip: false,
            notify: function () {
              if (this.transition === f.Color && this._getButtonState() === g.HOVER) {
                this._getTarget().opacity = this.hoverColor.a;
              }
              this._updateState();
            },
            formerlySerializedAs: "hoverColor"
          },
          disabledColor: {
            default: cc.color(124, 124, 124),
            displayName: "Disabled",
            tooltip: false,
            notify: function () {
              if (this.transition === f.Color && this._getButtonState() === g.DISABLED) {
                this._getTarget().opacity = this.disabledColor.a;
              }
              this._updateState();
            }
          },
          duration: {
            default: 0.1,
            range: [0, 10],
            tooltip: false
          },
          zoomScale: {
            default: 1.2,
            tooltip: false
          },
          normalSprite: {
            default: null,
            type: cc.SpriteFrame,
            displayName: "Normal",
            tooltip: false,
            notify: function () {
              this._updateState();
            }
          },
          pressedSprite: {
            default: null,
            type: cc.SpriteFrame,
            displayName: "Pressed",
            tooltip: false,
            formerlySerializedAs: "pressedSprite",
            notify: function () {
              this._updateState();
            }
          },
          hoverSprite: {
            default: null,
            type: cc.SpriteFrame,
            displayName: "Hover",
            tooltip: false,
            formerlySerializedAs: "hoverSprite",
            notify: function () {
              this._updateState();
            }
          },
          disabledSprite: {
            default: null,
            type: cc.SpriteFrame,
            displayName: "Disabled",
            tooltip: false,
            notify: function () {
              this._updateState();
            }
          },
          target: {
            default: null,
            type: cc.Node,
            tooltip: false,
            notify: function (a) {
              this._applyTarget();
              if (a && this.target !== a) {
                this._unregisterTargetEvent(a);
              }
            }
          },
          clickEvents: {
            default: [],
            type: cc.Component.EventHandler,
            tooltip: false
          }
        },
        statics: {
          Transition: f
        },
        __preload: function () {
          this._applyTarget();
          this._resetState();
        },
        _resetState: function () {
          this._pressed = false;
          this._hovered = false;
          var a = this._getTarget();
          var b = this.transition;
          var c = this._originalScale;
          if (b === f.COLOR && this.interactable) {
            this._setTargetColor(this.normalColor);
          } else if (b === f.SCALE && c) {
            a.setScale(c.x, c.y);
          }
          this._transitionFinished = true;
        },
        onEnable: function () {
          if (this.normalSprite) {
            this.normalSprite.ensureLoadTexture();
          }
          if (this.hoverSprite) {
            this.hoverSprite.ensureLoadTexture();
          }
          if (this.pressedSprite) {
            this.pressedSprite.ensureLoadTexture();
          }
          if (this.disabledSprite) {
            this.disabledSprite.ensureLoadTexture();
          }
          this._registerNodeEvent();
          this._updateState();
        },
        onDisable: function () {
          this._resetState();
          this._unregisterNodeEvent();
        },
        _getTarget: function () {
          if (this.target) {
            return this.target;
          } else {
            return this.node;
          }
        },
        _onTargetSpriteFrameChanged: function (a) {
          if (this.transition === f.SPRITE) {
            this._setCurrentStateSprite(a.spriteFrame);
          }
        },
        _onTargetColorChanged: function (a) {
          if (this.transition === f.COLOR) {
            this._setCurrentStateColor(a);
          }
        },
        _onTargetScaleChanged: function () {
          var a = this._getTarget();
          if (this._originalScale && (this.transition !== f.SCALE || this._transitionFinished)) {
            this._originalScale.x = a.scaleX;
            this._originalScale.y = a.scaleY;
          }
        },
        _setTargetColor: function (a) {
          var b = this._getTarget();
          var c = a.clone();
          b.opacity = c.a;
          c.a = 255;
          b.color = c;
        },
        _getStateColor: function (a) {
          switch (a) {
            case g.NORMAL:
              return this.normalColor;
            case g.HOVER:
              return this.hoverColor;
            case g.PRESSED:
              return this.pressedColor;
            case g.DISABLED:
              return this.disabledColor;
          }
        },
        _getStateSprite: function (a) {
          switch (a) {
            case g.NORMAL:
              return this.normalSprite;
            case g.HOVER:
              return this.hoverSprite;
            case g.PRESSED:
              return this.pressedSprite;
            case g.DISABLED:
              return this.disabledSprite;
          }
        },
        _setCurrentStateColor: function (a) {
          switch (this._getButtonState()) {
            case g.NORMAL:
              this.normalColor = a;
              break;
            case g.HOVER:
              this.hoverColor = a;
              break;
            case g.PRESSED:
              this.pressedColor = a;
              break;
            case g.DISABLED:
              this.disabledColor = a;
          }
        },
        _setCurrentStateSprite: function (a) {
          switch (this._getButtonState()) {
            case g.NORMAL:
              this.normalSprite = a;
              break;
            case g.HOVER:
              this.hoverSprite = a;
              break;
            case g.PRESSED:
              this.pressedSprite = a;
              break;
            case g.DISABLED:
              this.disabledSprite = a;
          }
        },
        update: function (a) {
          var b = this._getTarget();
          if (!this._transitionFinished && (this.transition === f.COLOR || this.transition === f.SCALE)) {
            this.time += a;
            var c = 1;
            if (this.duration > 0) {
              c = this.time / this.duration;
            }
            if (c >= 1) {
              c = 1;
            }
            if (this.transition === f.COLOR) {
              var d = this._fromColor.lerp(this._toColor, c);
              this._setTargetColor(d);
            } else if (this.transition === f.SCALE && this._originalScale) {
              b.scale = this._fromScale.lerp(this._toScale, c);
            }
            if (c === 1) {
              this._transitionFinished = true;
            }
          }
        },
        _registerNodeEvent: function () {
          this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
          this.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMove, this);
          this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
          this.node.on(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancel, this);
          this.node.on(cc.Node.EventType.MOUSE_ENTER, this._onMouseMoveIn, this);
          this.node.on(cc.Node.EventType.MOUSE_LEAVE, this._onMouseMoveOut, this);
        },
        _unregisterNodeEvent: function () {
          this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
          this.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMove, this);
          this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
          this.node.off(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancel, this);
          this.node.off(cc.Node.EventType.MOUSE_ENTER, this._onMouseMoveIn, this);
          this.node.off(cc.Node.EventType.MOUSE_LEAVE, this._onMouseMoveOut, this);
        },
        _registerTargetEvent: function (a) {
          a.on(cc.Node.EventType.SCALE_CHANGED, this._onTargetScaleChanged, this);
        },
        _unregisterTargetEvent: function (a) {
          a.off(cc.Node.EventType.SCALE_CHANGED, this._onTargetScaleChanged, this);
        },
        _getTargetSprite: function (a) {
          var b = null;
          if (a) {
            b = a.getComponent(cc.Sprite);
          }
          return b;
        },
        _applyTarget: function () {
          var a = this._getTarget();
          this._sprite = this._getTargetSprite(a);
          if (!this._originalScale) {
            this._originalScale = cc.Vec2.ZERO;
          }
          this._originalScale.x = a.scaleX;
          this._originalScale.y = a.scaleY;
          this._registerTargetEvent(a);
        },
        _onTouchBegan: function (a) {
          if (this.interactable && this.enabledInHierarchy) {
            this._pressed = true;
            this._updateState();
            a.stopPropagation();
          }
        },
        _onTouchMove: function (b) {
          if (this.interactable && this.enabledInHierarchy && this._pressed) {
            var c;
            var d = b.touch;
            var h = this.node._hitTest(d.getLocation());
            var i = this._getTarget();
            var a = this._originalScale;
            if (this.transition === f.SCALE && a) {
              if (h) {
                this._fromScale.x = a.x;
                this._fromScale.y = a.y;
                this._toScale.x = a.x * this.zoomScale;
                this._toScale.y = a.y * this.zoomScale;
                this._transitionFinished = false;
              } else {
                this.time = 0;
                this._transitionFinished = true;
                i.setScale(a.x, a.y);
              }
            } else {
              c = h ? g.PRESSED : g.NORMAL;
              this._applyTransition(c);
            }
            b.stopPropagation();
          }
        },
        _onTouchEnded: function (a) {
          if (this.interactable && this.enabledInHierarchy) {
            if (this._pressed) {
              cc.Component.EventHandler.emitEvents(this.clickEvents, a);
              this.node.emit("click", this);
            }
            this._pressed = false;
            this._updateState();
            a.stopPropagation();
          }
        },
        _onTouchCancel: function () {
          if (this.interactable && this.enabledInHierarchy) {
            this._pressed = false;
            this._updateState();
          }
        },
        _onMouseMoveIn: function () {
          if (!this._pressed && this.interactable && this.enabledInHierarchy && (this.transition !== f.SPRITE || this.hoverSprite)) {
            if (!this._hovered) {
              this._hovered = true;
              this._updateState();
            }
          }
        },
        _onMouseMoveOut: function () {
          if (this._hovered) {
            this._hovered = false;
            this._updateState();
          }
        },
        _updateState: function () {
          var a = this._getButtonState();
          this._applyTransition(a);
          this._updateDisabledState();
        },
        _getButtonState: function () {
          if (this.interactable) {
            if (this._pressed) {
              return g.PRESSED;
            } else if (this._hovered) {
              return g.HOVER;
            } else {
              return g.NORMAL;
            }
          } else {
            return g.DISABLED;
          }
        },
        _updateColorTransitionImmediately: function (a) {
          var b = this._getStateColor(a);
          this._setTargetColor(b);
          this._fromColor = b.clone();
          this._toColor = b;
        },
        _updateColorTransition: function (a) {
          if (a === g.DISABLED) {
            this._updateColorTransitionImmediately(a);
          } else {
            var b = this._getTarget();
            var c = this._getStateColor(a);
            this._fromColor = b.color.clone();
            this._toColor = c;
            this.time = 0;
            this._transitionFinished = false;
          }
        },
        _updateSpriteTransition: function (a) {
          var b = this._getStateSprite(a);
          if (this._sprite && b) {
            this._sprite.spriteFrame = b;
          }
        },
        _updateScaleTransition: function (a) {
          if (a === g.PRESSED) {
            this._zoomUp();
          } else {
            this._zoomBack();
          }
        },
        _zoomUp: function () {
          if (this._originalScale) {
            this._fromScale.x = this._originalScale.x;
            this._fromScale.y = this._originalScale.y;
            this._toScale.x = this._originalScale.x * this.zoomScale;
            this._toScale.y = this._originalScale.y * this.zoomScale;
            this.time = 0;
            this._transitionFinished = false;
          }
        },
        _zoomBack: function () {
          if (this._originalScale) {
            var a = this._getTarget();
            this._fromScale.x = a.scaleX;
            this._fromScale.y = a.scaleY;
            this._toScale.x = this._originalScale.x;
            this._toScale.y = this._originalScale.y;
            this.time = 0;
            this._transitionFinished = false;
          }
        },
        _updateTransition: function (a) {
          if (a === f.COLOR) {
            this._updateColorTransitionImmediately(g.NORMAL);
          } else if (a === f.SPRITE) {
            this._updateSpriteTransition(g.NORMAL);
          }
          this._updateState();
        },
        _applyTransition: function (a) {
          var b = this.transition;
          if (b === f.COLOR) {
            this._updateColorTransition(a);
          } else if (b === f.SPRITE) {
            this._updateSpriteTransition(a);
          } else if (b === f.SCALE) {
            this._updateScaleTransition(a);
          }
        },
        _resizeNodeToTargetNode: false,
        _updateDisabledState: function (a) {
          if (this._sprite && (this.enableAutoGrayEffect || a)) {
            var b = false;
            if (!(this.transition === f.SPRITE && this.disabledSprite)) {
              b = this.enableAutoGrayEffect && !this.interactable;
            }
            this._switchGrayMaterial(b, this._sprite);
          }
        }
      });
      cc.Button = c.exports = h;
    }, {
      "../utils/gray-sprite-state": 233,
      "./CCComponent": 100
    }],
    99: [function (a, b) {
      "use strict";
  
      var c = a("../camera/CCCamera");
      var d = a("./CCComponent");
      var e = cc.Class({
        name: "cc.Canvas",
        extends: d,
        editor: false,
        resetInEditor: false,
        statics: {
          instance: null
        },
        properties: {
          _designResolution: cc.size(960, 640),
          designResolution: {
            get: function () {
              return cc.size(this._designResolution);
            },
            set: function (a) {
              this._designResolution.width = a.width;
              this._designResolution.height = a.height;
              this.applySettings();
            },
            tooltip: false
          },
          _fitWidth: false,
          _fitHeight: true,
          fitHeight: {
            get: function () {
              return this._fitHeight;
            },
            set: function (a) {
              if (this._fitHeight !== a) {
                this._fitHeight = a;
                this.applySettings();
              }
            },
            tooltip: false
          },
          fitWidth: {
            get: function () {
              return this._fitWidth;
            },
            set: function (a) {
              if (this._fitWidth !== a) {
                this._fitWidth = a;
                this.applySettings();
              }
            },
            tooltip: false
          }
        },
        _fitDesignResolution: false,
        __preload: function () {
          if (!e.instance) {
            e.instance = this;
            this.applySettings();
            var a = this.getComponent(cc.Widget);
            if (a) {
              a.updateAlignment();
            }
          }
        },
        start: function () {
          if (!c.main && cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
            var a = new cc.Node("Main Camera");
            a.parent = this.node;
            a.setSiblingIndex(0);
            var b = a.addComponent(c);
            var d = c.ClearFlags;
            b.clearFlags = d.COLOR | d.DEPTH | d.STENCIL;
            b.depth = -1;
          }
        },
        onDestroy: function () {
          if (e.instance === this) {
            e.instance = null;
          }
        },
        applySettings: function () {
          var a;
          var b = cc.ResolutionPolicy;
          a = this.fitHeight && this.fitWidth ? b.SHOW_ALL : this.fitHeight || this.fitWidth ? this.fitWidth ? b.FIXED_WIDTH : b.FIXED_HEIGHT : b.NO_BORDER;
          var c = this._designResolution;
          cc.view.setDesignResolutionSize(c.width, c.height, a);
        }
      });
      cc.Canvas = b.exports = e;
    }, {
      "../camera/CCCamera": 86,
      "./CCComponent": 100
    }],
    100: [function (b, c) {
      "use strict";
  
      var d = b("../platform/CCObject");
      var e = b("../platform/js");
      var f = new (b("../platform/id-generater"))("Comp");
      d.Flags.IsOnEnableCalled;
      var g = d.Flags.IsOnLoadCalled;
      var h = !!cc.ActionManager;
      var a = cc.Class({
        name: "cc.Component",
        extends: d,
        ctor: function () {
          this._id = f.getNewId();
          this.__eventTargets = [];
        },
        properties: {
          node: {
            default: null,
            visible: false
          },
          name: {
            get: function () {
              if (this._name) {
                return this._name;
              }
              var a = cc.js.getClassName(this);
              var b = a.lastIndexOf(".");
              if (b >= 0) {
                a = a.slice(b + 1);
              }
              return this.node.name + "<" + a + ">";
            },
            set: function (a) {
              this._name = a;
            },
            visible: false
          },
          uuid: {
            get: function () {
              return this._id;
            },
            visible: false
          },
          __scriptAsset: false,
          _enabled: true,
          enabled: {
            get: function () {
              return this._enabled;
            },
            set: function (a) {
              if (this._enabled !== a && (this._enabled = a, this.node._activeInHierarchy)) {
                var b = cc.director._compScheduler;
                if (a) {
                  b.enableComp(this);
                } else {
                  b.disableComp(this);
                }
              }
            },
            visible: false,
            animatable: true
          },
          enabledInHierarchy: {
            get: function () {
              return this._enabled && this.node && this.node._activeInHierarchy;
            },
            visible: false
          },
          _isOnLoadCalled: {
            get: function () {
              return this._objFlags & g;
            }
          }
        },
        update: null,
        lateUpdate: null,
        __preload: null,
        onLoad: null,
        start: null,
        onEnable: null,
        onDisable: null,
        onDestroy: null,
        onFocusInEditor: null,
        onLostFocusInEditor: null,
        resetInEditor: null,
        addComponent: function (a) {
          return this.node.addComponent(a);
        },
        getComponent: function (a) {
          return this.node.getComponent(a);
        },
        getComponents: function (a) {
          return this.node.getComponents(a);
        },
        getComponentInChildren: function (a) {
          return this.node.getComponentInChildren(a);
        },
        getComponentsInChildren: function (a) {
          return this.node.getComponentsInChildren(a);
        },
        _getLocalBounds: null,
        onRestore: null,
        destroy: function () {
          if (this._super() && this._enabled && this.node._activeInHierarchy) {
            cc.director._compScheduler.disableComp(this);
          }
        },
        _onPreDestroy: function () {
          if (h) {
            cc.director.getActionManager().removeAllActionsFromTarget(this);
          }
          this.unscheduleAllCallbacks();
          for (var a = this.__eventTargets; a.length;) {
            var b = a.pop();
            if (b) {
              b.targetOff(this);
            }
          }
          cc.director._nodeActivator.destroyComp(this);
          this.node._removeComponent(this);
        },
        _instantiate: function (a) {
          if (!a) {
            a = cc.instantiate._clone(this, this);
          }
          a.node = null;
          return a;
        },
        schedule: function (a, b, c, d) {
          b = b || 0;
          c = isNaN(c) ? cc.macro.REPEAT_FOREVER : c;
          d = d || 0;
          var f = cc.director.getScheduler();
          var g = f.isTargetPaused(this);
          f.schedule(a, this, b, c, d, g);
        },
        scheduleOnce: function (a, b) {
          this.schedule(a, 0, 0, b);
        },
        unschedule: function (a) {
          if (a) {
            cc.director.getScheduler().unschedule(a, this);
          }
        },
        unscheduleAllCallbacks: function () {
          cc.director.getScheduler().unscheduleAllForTarget(this);
        }
      });
      a._requireComponent = null;
      a._executionOrder = 0;
      e.value(a, "_registerEditorProps", function (a, b) {
        var c = b.requireComponent;
        if (c) {
          a._requireComponent = c;
        }
        var d = b.executionOrder;
        if (d && typeof d == "number") {
          a._executionOrder = d;
        }
      });
      a.prototype.__scriptUuid = "";
      cc.Component = c.exports = a;
    }, {
      "../platform/CCObject": 168,
      "../platform/id-generater": 179,
      "../platform/js": 183
    }],
    101: [function () {
      "use strict";
  
      cc.Component.EventHandler = cc.Class({
        name: "cc.ClickEvent",
        properties: {
          target: {
            default: null,
            type: cc.Node
          },
          component: "",
          _componentId: "",
          _componentName: {
            get: function () {
              this._genCompIdIfNeeded();
              return this._compId2Name(this._componentId);
            },
            set: function (a) {
              this._componentId = this._compName2Id(a);
            }
          },
          handler: {
            default: ""
          },
          customEventData: {
            default: ""
          }
        },
        statics: {
          emitEvents: function (b) {
            var c;
            if (arguments.length > 0) {
              for (var d = 0, f = (c = Array(arguments.length - 1)).length; d < f; d++) {
                c[d] = arguments[d + 1];
              }
            }
            for (var g = 0, h = b.length; g < h; g++) {
              var j = b[g];
              if (j instanceof cc.Component.EventHandler) {
                j.emit(c);
              }
            }
          }
        },
        emit: function (a) {
          var b = this.target;
          if (cc.isValid(b)) {
            this._genCompIdIfNeeded();
            var c = cc.js._getClassById(this._componentId);
            var d = b.getComponent(c);
            if (cc.isValid(d)) {
              var e = d[this.handler];
              if (typeof e == "function") {
                if (this.customEventData != null && this.customEventData !== "") {
                  (a = a.slice()).push(this.customEventData);
                }
                e.apply(d, a);
              }
            }
          }
        },
        _compName2Id: function (a) {
          var b = cc.js.getClassByName(a);
          return cc.js._getClassId(b);
        },
        _compId2Name: function (a) {
          var b = cc.js._getClassById(a);
          return cc.js.getClassName(b);
        },
        _genCompIdIfNeeded: function () {
          if (!this._componentId) {
            this._componentName = this.component;
            this.component = "";
          }
        }
      });
    }, {}],
    102: [function (b, d) {
      "use strict";
  
      var e = b("../platform/CCMacro");
      var f = b("./CCRenderComponent");
      b("../assets/material/CCMaterial");
      var g = b("../renderer/utils/label/label-frame");
      var i = b("../utils/blend-func");
      var j = b("../renderer/utils/utils").deleteFromDynamicAtlas;
      var a = e.TextAlignment;
      var k = e.VerticalTextAlignment;
      var c = cc.Enum({
        NONE: 0,
        CLAMP: 1,
        SHRINK: 2,
        RESIZE_HEIGHT: 3
      });
      var l = cc.Enum({
        NONE: 0,
        BITMAP: 1,
        CHAR: 2
      });
      var h = cc.Class({
        name: "cc.Label",
        extends: f,
        mixins: [i],
        ctor: function () {
          this._actualFontSize = 0;
          this._assemblerData = null;
          this._frame = null;
          this._ttfTexture = null;
          this._letterTexture = null;
          if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
            this._updateMaterial = this._updateMaterialCanvas;
          } else {
            this._updateMaterial = this._updateMaterialWebgl;
          }
          this._customOffsetX = 0;
          this._customOffsetY = 0;
          this._actualLineHeight = undefined;
        },
        editor: false,
        properties: {
          _string: {
            default: "",
            formerlySerializedAs: "_N$string"
          },
          string: {
            get: function () {
              return this._string;
            },
            set: function (a) {
              var b = this._string;
              this._string = "" + a;
              if (this.string !== b) {
                this.setVertsDirty();
              }
              this._checkStringEmpty();
            },
            multiline: true,
            tooltip: false
          },
          horizontalAlign: {
            default: a.LEFT,
            type: a,
            tooltip: false,
            notify: function (a) {
              if (this.horizontalAlign !== a) {
                this.setVertsDirty();
              }
            },
            animatable: false
          },
          verticalAlign: {
            default: k.TOP,
            type: k,
            tooltip: false,
            notify: function (a) {
              if (this.verticalAlign !== a) {
                this.setVertsDirty();
              }
            },
            animatable: false
          },
          actualFontSize: {
            displayName: "Actual Font Size",
            animatable: false,
            readonly: true,
            get: function () {
              return this._actualFontSize;
            },
            tooltip: false
          },
          _fontSize: 40,
          fontSize: {
            get: function () {
              return this._fontSize;
            },
            set: function (a) {
              if (this._fontSize !== a) {
                this._fontSize = a;
                this.setVertsDirty();
              }
            },
            range: [0, 512],
            tooltip: false
          },
          fontFamily: {
            default: "Arial",
            tooltip: false,
            notify: function (a) {
              if (this.fontFamily !== a) {
                this.setVertsDirty();
              }
            },
            animatable: false
          },
          _lineHeight: 40,
          lineHeight: {
            get: function () {
              return this._lineHeight;
            },
            set: function (a) {
              if (this._lineHeight !== a) {
                this._lineHeight = a;
                this.setVertsDirty();
              }
            },
            tooltip: false
          },
          overflow: {
            default: c.NONE,
            type: c,
            tooltip: false,
            notify: function (a) {
              if (this.overflow !== a) {
                this.setVertsDirty();
              }
            },
            animatable: false
          },
          _enableWrapText: true,
          enableWrapText: {
            get: function () {
              return this._enableWrapText;
            },
            set: function (a) {
              if (this._enableWrapText !== a) {
                this._enableWrapText = a;
                this.setVertsDirty();
              }
            },
            animatable: false,
            tooltip: false
          },
          _N$file: null,
          font: {
            get: function () {
              return this._N$file;
            },
            set: function (a) {
              if (this.font !== a) {
                if (!a) {
                  this._isSystemFontUsed = true;
                }
                this._N$file = a;
                if (a && this._isSystemFontUsed) {
                  this._isSystemFontUsed = false;
                }
                if (this.enabledInHierarchy) {
                  this._forceUpdateRenderData();
                }
              }
            },
            type: cc.Font,
            tooltip: false,
            animatable: false
          },
          _isSystemFontUsed: true,
          useSystemFont: {
            get: function () {
              return this._isSystemFontUsed;
            },
            set: function (a) {
              if (this._isSystemFontUsed !== a) {
                this._isSystemFontUsed = !!a;
                if (a) {
                  this.font = null;
                  if (!this.enabledInHierarchy) {
                    return;
                  }
                  this._forceUpdateRenderData();
                }
                this.markForValidate();
              }
            },
            animatable: false,
            tooltip: false
          },
          _bmFontOriginalSize: {
            displayName: "BMFont Original Size",
            get: function () {
              if (this._N$file instanceof cc.BitmapFont) {
                return this._N$file.fontSize;
              } else {
                return -1;
              }
            },
            visible: true,
            animatable: false
          },
          _spacingX: 0,
          spacingX: {
            get: function () {
              return this._spacingX;
            },
            set: function (a) {
              this._spacingX = a;
              this.setVertsDirty();
            },
            tooltip: false
          },
          _batchAsBitmap: false,
          cacheMode: {
            default: l.NONE,
            type: l,
            tooltip: false,
            notify: function (a) {
              if (this.cacheMode !== a) {
                if (!(a !== l.BITMAP || this.font instanceof cc.BitmapFont)) {
                  if (this._frame) {
                    this._frame._resetDynamicAtlasFrame();
                  }
                }
                if (a === l.CHAR) {
                  this._ttfTexture = null;
                }
                if (this.enabledInHierarchy) {
                  this._forceUpdateRenderData();
                }
              }
            },
            animatable: false
          },
          _styleFlags: 0,
          enableBold: {
            get: function () {
              return !!(this._styleFlags & 1);
            },
            set: function (a) {
              if (a) {
                this._styleFlags |= 1;
              } else {
                this._styleFlags &= -2;
              }
              this.setVertsDirty();
            },
            animatable: false,
            tooltip: false
          },
          enableItalic: {
            get: function () {
              return !!(this._styleFlags & 2);
            },
            set: function (a) {
              if (a) {
                this._styleFlags |= 2;
              } else {
                this._styleFlags &= -3;
              }
              this.setVertsDirty();
            },
            animatable: false,
            tooltip: false
          },
          enableUnderline: {
            get: function () {
              return !!(this._styleFlags & 4);
            },
            set: function (a) {
              if (a) {
                this._styleFlags |= 4;
              } else {
                this._styleFlags &= -5;
              }
              this.setVertsDirty();
            },
            animatable: false,
            tooltip: false
          },
          _underlineHeight: 0,
          underlineHeight: {
            get: function () {
              return this._underlineHeight;
            },
            set: function (a) {
              if (this._underlineHeight !== a) {
                this._underlineHeight = a;
                this.setVertsDirty();
              }
            },
            tooltip: false
          },
          customOffsetX: {
            get: function () {
              return this._customOffsetX;
            },
            set: function (a) {
              if (this._customOffsetX !== a) {
                this._customOffsetX = a;
                this.setVertsDirty();
              }
            }
          },
          customOffsetY: {
            get: function () {
              return this._customOffsetY;
            },
            set: function (a) {
              if (this._customOffsetY !== a) {
                this._customOffsetY = a;
                this.setVertsDirty();
              }
            }
          },
          actualLineHeight: {
            get: function () {
              return this._actualLineHeight || this._lineHeight;
            },
            set: function (a) {
              if (this._actualLineHeight !== a) {
                this._actualLineHeight = a;
                this.setVertsDirty();
              }
            }
          }
        },
        statics: {
          HorizontalAlign: a,
          VerticalAlign: k,
          Overflow: c,
          CacheMode: l,
          _shareAtlas: null,
          clearCharCache: function () {
            if (h._shareAtlas) {
              h._shareAtlas.clearAllCache();
            }
          }
        },
        onLoad: function () {
          if (this._batchAsBitmap && this.cacheMode === l.NONE) {
            this.cacheMode = l.BITMAP;
            this._batchAsBitmap = false;
          }
          if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
            this.cacheMode = l.NONE;
          }
        },
        onEnable: function () {
          this._super();
          this.node.on(cc.Node.EventType.SIZE_CHANGED, this._nodeSizeChanged, this);
          this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this.setVertsDirty, this);
          this.node.on(cc.Node.EventType.COLOR_CHANGED, this._nodeColorChanged, this);
          this._forceUpdateRenderData();
        },
        onDisable: function () {
          this._super();
          this.node.off(cc.Node.EventType.SIZE_CHANGED, this._nodeSizeChanged, this);
          this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this.setVertsDirty, this);
          this.node.off(cc.Node.EventType.COLOR_CHANGED, this._nodeColorChanged, this);
        },
        onDestroy: function () {
          if (this._assembler && this._assembler._resetAssemblerData) {
            this._assembler._resetAssemblerData(this._assemblerData);
          }
          this._assemblerData = null;
          this._letterTexture = null;
          if (this._ttfTexture) {
            this._ttfTexture.destroy();
            this._ttfTexture = null;
          }
          this._super();
        },
        onRestore: false,
        _nodeSizeChanged: function () {
          if (this.overflow !== c.NONE) {
            this.setVertsDirty();
          }
        },
        _nodeColorChanged: function () {
          if (!(this.font instanceof cc.BitmapFont)) {
            this.setVertsDirty();
          }
        },
        setVertsDirty: function () {
          this._super();
        },
        _updateColor: function () {
          if (!(this.font instanceof cc.BitmapFont || this._srcBlendFactor === cc.macro.BlendFactor.SRC_ALPHA && this.node._renderFlag & cc.RenderFlow.FLAG_OPACITY)) {
            this.setVertsDirty();
          }
          f.prototype._updateColor.call(this);
        },
        _validateRender: function () {
          if (this.string) {
            if (this._materials[0]) {
              var a = this.font;
              if (!(a instanceof cc.BitmapFont)) {
                return;
              }
              var b = a.spriteFrame;
              if (b && b.textureLoaded() && a._fntConfig) {
                return;
              }
            }
            this.disableRender();
          } else {
            this.disableRender();
          }
        },
        _resetAssembler: function () {
          this._resetFrame();
          f.prototype._resetAssembler.call(this);
        },
        _resetFrame: function () {
          if (!(!this._frame || this.font instanceof cc.BitmapFont)) {
            j(this, this._frame);
            this._frame = null;
          }
        },
        _checkStringEmpty: function () {
          this.markForRender(!!this.string);
        },
        _on3DNodeChanged: function () {
          this._resetAssembler();
          this._applyFontTexture();
        },
        _onBMFontTextureLoaded: function () {
          this._frame._texture = this.font.spriteFrame._texture;
          this.markForRender(true);
          this._updateMaterial();
          if (this._assembler) {
            this._assembler.updateRenderData(this);
          }
        },
        _onBlendChanged: function () {
          if (this.useSystemFont && this.enabledInHierarchy) {
            this._forceUpdateRenderData();
          }
        },
        _applyFontTexture: function () {
          var a = this.font;
          if (a instanceof cc.BitmapFont) {
            var b = a.spriteFrame;
            this._frame = b;
            if (b) {
              b.onTextureLoaded(this._onBMFontTextureLoaded, this);
            }
          } else {
            if (!this._nativeTTF()) {
              if (!this._frame) {
                this._frame = new g();
              }
              if (this.cacheMode === l.CHAR) {
                this._letterTexture = this._assembler._getAssemblerData();
                this._frame._refreshTexture(this._letterTexture);
              } else if (!this._ttfTexture) {
                this._ttfTexture = new cc.Texture2D();
                this._assemblerData = this._assembler._getAssemblerData();
                this._ttfTexture.initWithElement(this._assemblerData.canvas);
              }
              if (this.cacheMode !== l.CHAR) {
                this._frame._resetDynamicAtlasFrame();
                this._frame._refreshTexture(this._ttfTexture);
                if (this._srcBlendFactor === cc.macro.BlendFactor.ONE) {
                  this._ttfTexture.setPremultiplyAlpha(true);
                }
              }
              this._updateMaterial();
            }
            if (this._assembler) {
              this._assembler.updateRenderData(this);
            }
          }
          this.markForValidate();
        },
        _updateMaterialCanvas: function () {
          if (this._frame) {
            this._frame._texture._nativeUrl = this.uuid + "_texture";
          }
        },
        _updateMaterialWebgl: function () {
          var a = this.getMaterial(0);
          if (this._nativeTTF()) {
            if (a) {
              this._assembler._updateTTFMaterial(this);
            }
          } else if (this._frame) {
            if (a) {
              a.setProperty("texture", this._frame._texture);
            }
            i.prototype._updateMaterial.call(this);
          }
        },
        _forceUseCanvas: false,
        _useNativeTTF: function () {
          return cc.macro.ENABLE_NATIVE_TTF_RENDERER && !this._forceUseCanvas;
        },
        _nativeTTF: function () {
          return this._useNativeTTF() && !!this._assembler && !!this._assembler._updateTTFMaterial;
        },
        _forceUpdateRenderData: function () {
          this.setVertsDirty();
          this._resetAssembler();
          this._applyFontTexture();
        },
        _enableBold: function (a) {
          this.enableBold = !!a;
        },
        _enableItalics: function (a) {
          this.enableItalic = !!a;
        },
        _enableUnderline: function (a) {
          this.enableUnderline = !!a;
        }
      });
      cc.Label = d.exports = h;
    }, {
      "../assets/material/CCMaterial": 76,
      "../platform/CCMacro": 167,
      "../renderer/utils/label/label-frame": 198,
      "../renderer/utils/utils": 201,
      "../utils/blend-func": 230,
      "./CCRenderComponent": 109
    }],
    103: [function (a, b) {
      "use strict";
  
      var c = cc.Class({
        name: "cc.LabelOutline",
        extends: a("./CCComponent"),
        editor: false,
        properties: {
          _color: cc.Color.WHITE,
          _width: 1,
          color: {
            tooltip: false,
            get: function () {
              return this._color.clone();
            },
            set: function (a) {
              if (!this._color.equals(a)) {
                this._color.set(a);
              }
              this._updateRenderData();
            }
          },
          width: {
            tooltip: false,
            get: function () {
              return this._width;
            },
            set: function (a) {
              if (this._width !== a) {
                this._width = a;
                this._updateRenderData();
              }
            },
            range: [0, 512]
          }
        },
        onEnable: function () {
          this._updateRenderData();
        },
        onDisable: function () {
          this._updateRenderData();
        },
        _updateRenderData: function () {
          var a = this.node.getComponent(cc.Label);
          if (a) {
            a.setVertsDirty();
          }
        }
      });
      cc.LabelOutline = b.exports = c;
    }, {
      "./CCComponent": 100
    }],
    104: [function (a, b) {
      "use strict";
  
      var c = cc.Class({
        name: "cc.LabelShadow",
        extends: a("./CCComponent"),
        editor: false,
        properties: {
          _color: cc.Color.WHITE,
          _offset: cc.v2(2, 2),
          _blur: 2,
          color: {
            tooltip: false,
            get: function () {
              return this._color.clone();
            },
            set: function (a) {
              if (!this._color.equals(a)) {
                this._color.set(a);
              }
              this._updateRenderData();
            }
          },
          offset: {
            tooltip: false,
            get: function () {
              return this._offset;
            },
            set: function (a) {
              this._offset = a;
              this._updateRenderData();
            }
          },
          blur: {
            tooltip: false,
            get: function () {
              return this._blur;
            },
            set: function (a) {
              this._blur = a;
              this._updateRenderData();
            },
            range: [0, 1024]
          }
        },
        onEnable: function () {
          this._updateRenderData();
        },
        onDisable: function () {
          this._updateRenderData();
        },
        _updateRenderData: function () {
          var a = this.node.getComponent(cc.Label);
          if (a) {
            a.setVertsDirty();
          }
        }
      });
      cc.LabelShadow = b.exports = c;
    }, {
      "./CCComponent": 100
    }],
    105: [function (b, d) {
      "use strict";
  
      var f = b("../CCNode").EventType;
      var j = cc.Enum({
        NONE: 0,
        HORIZONTAL: 1,
        VERTICAL: 2,
        GRID: 3
      });
      var k = cc.Enum({
        NONE: 0,
        CONTAINER: 1,
        CHILDREN: 2
      });
      var g = cc.Enum({
        HORIZONTAL: 0,
        VERTICAL: 1
      });
      var q = cc.Enum({
        BOTTOM_TO_TOP: 0,
        TOP_TO_BOTTOM: 1
      });
      var r = cc.Enum({
        LEFT_TO_RIGHT: 0,
        RIGHT_TO_LEFT: 1
      });
      var a = cc.Class({
        name: "cc.Layout",
        extends: b("./CCComponent"),
        editor: false,
        properties: {
          _layoutSize: cc.size(300, 200),
          _layoutDirty: {
            default: true,
            serializable: false
          },
          _resize: k.NONE,
          _N$layoutType: j.NONE,
          type: {
            type: j,
            get: function () {
              return this._N$layoutType;
            },
            set: function (a) {
              this._N$layoutType = a;
              this._doLayoutDirty();
            },
            tooltip: false,
            animatable: false
          },
          resizeMode: {
            type: k,
            tooltip: false,
            animatable: false,
            get: function () {
              return this._resize;
            },
            set: function (a) {
              if (!(this.type === j.NONE && a === k.CHILDREN)) {
                this._resize = a;
                this._doLayoutDirty();
              }
            }
          },
          cellSize: {
            default: cc.size(40, 40),
            tooltip: false,
            type: cc.Size,
            notify: function () {
              this._doLayoutDirty();
            }
          },
          startAxis: {
            default: g.HORIZONTAL,
            tooltip: false,
            type: g,
            notify: function () {
              this._doLayoutDirty();
            },
            animatable: false
          },
          paddingLeft: {
            default: 0,
            tooltip: false,
            notify: function () {
              this._doLayoutDirty();
            }
          },
          paddingRight: {
            default: 0,
            tooltip: false,
            notify: function () {
              this._doLayoutDirty();
            }
          },
          paddingTop: {
            default: 0,
            tooltip: false,
            notify: function () {
              this._doLayoutDirty();
            }
          },
          paddingBottom: {
            default: 0,
            tooltip: false,
            notify: function () {
              this._doLayoutDirty();
            }
          },
          spacingX: {
            default: 0,
            notify: function () {
              this._doLayoutDirty();
            },
            tooltip: false
          },
          spacingY: {
            default: 0,
            notify: function () {
              this._doLayoutDirty();
            },
            tooltip: false
          },
          verticalDirection: {
            default: q.TOP_TO_BOTTOM,
            type: q,
            notify: function () {
              this._doLayoutDirty();
            },
            tooltip: false,
            animatable: false
          },
          horizontalDirection: {
            default: r.LEFT_TO_RIGHT,
            type: r,
            notify: function () {
              this._doLayoutDirty();
            },
            tooltip: false,
            animatable: false
          },
          affectedByScale: {
            default: false,
            notify: function () {
              this._doLayoutDirty();
            },
            animatable: false,
            tooltip: false
          }
        },
        statics: {
          Type: j,
          VerticalDirection: q,
          HorizontalDirection: r,
          ResizeMode: k,
          AxisDirection: g
        },
        onEnable: function () {
          this._addEventListeners();
          if (this.node.getContentSize().equals(cc.size(0, 0))) {
            this.node.setContentSize(this._layoutSize);
          }
          this._doLayoutDirty();
        },
        onDisable: function () {
          this._removeEventListeners();
        },
        _doLayoutDirty: function () {
          this._layoutDirty = true;
        },
        _doScaleDirty: function () {
          this._layoutDirty = this._layoutDirty || this.affectedByScale;
        },
        _addEventListeners: function () {
          cc.director.on(cc.Director.EVENT_AFTER_UPDATE, this.updateLayout, this);
          this.node.on(f.SIZE_CHANGED, this._resized, this);
          this.node.on(f.ANCHOR_CHANGED, this._doLayoutDirty, this);
          this.node.on(f.CHILD_ADDED, this._childAdded, this);
          this.node.on(f.CHILD_REMOVED, this._childRemoved, this);
          this.node.on(f.CHILD_REORDER, this._doLayoutDirty, this);
          this._addChildrenEventListeners();
        },
        _removeEventListeners: function () {
          cc.director.off(cc.Director.EVENT_AFTER_UPDATE, this.updateLayout, this);
          this.node.off(f.SIZE_CHANGED, this._resized, this);
          this.node.off(f.ANCHOR_CHANGED, this._doLayoutDirty, this);
          this.node.off(f.CHILD_ADDED, this._childAdded, this);
          this.node.off(f.CHILD_REMOVED, this._childRemoved, this);
          this.node.off(f.CHILD_REORDER, this._doLayoutDirty, this);
          this._removeChildrenEventListeners();
        },
        _addChildrenEventListeners: function () {
          for (var a = this.node.children, b = 0; b < a.length; ++b) {
            var c = a[b];
            c.on(f.SCALE_CHANGED, this._doScaleDirty, this);
            c.on(f.SIZE_CHANGED, this._doLayoutDirty, this);
            c.on(f.POSITION_CHANGED, this._doLayoutDirty, this);
            c.on(f.ANCHOR_CHANGED, this._doLayoutDirty, this);
            c.on("active-in-hierarchy-changed", this._doLayoutDirty, this);
          }
        },
        _removeChildrenEventListeners: function () {
          for (var a = this.node.children, b = 0; b < a.length; ++b) {
            var c = a[b];
            c.off(f.SCALE_CHANGED, this._doScaleDirty, this);
            c.off(f.SIZE_CHANGED, this._doLayoutDirty, this);
            c.off(f.POSITION_CHANGED, this._doLayoutDirty, this);
            c.off(f.ANCHOR_CHANGED, this._doLayoutDirty, this);
            c.off("active-in-hierarchy-changed", this._doLayoutDirty, this);
          }
        },
        _childAdded: function (a) {
          a.on(f.SCALE_CHANGED, this._doScaleDirty, this);
          a.on(f.SIZE_CHANGED, this._doLayoutDirty, this);
          a.on(f.POSITION_CHANGED, this._doLayoutDirty, this);
          a.on(f.ANCHOR_CHANGED, this._doLayoutDirty, this);
          a.on("active-in-hierarchy-changed", this._doLayoutDirty, this);
          this._doLayoutDirty();
        },
        _childRemoved: function (a) {
          a.off(f.SCALE_CHANGED, this._doScaleDirty, this);
          a.off(f.SIZE_CHANGED, this._doLayoutDirty, this);
          a.off(f.POSITION_CHANGED, this._doLayoutDirty, this);
          a.off(f.ANCHOR_CHANGED, this._doLayoutDirty, this);
          a.off("active-in-hierarchy-changed", this._doLayoutDirty, this);
          this._doLayoutDirty();
        },
        _resized: function () {
          this._layoutSize = this.node.getContentSize();
          this._doLayoutDirty();
        },
        _doLayoutHorizontally: function (a, n, e, i) {
          var o = this.node.getAnchorPoint();
          var c = this.node.children;
          var l = 1;
          var s = this.paddingLeft;
          var t = -o.x * a;
          if (this.horizontalDirection === r.RIGHT_TO_LEFT) {
            l = -1;
            t = (1 - o.x) * a;
            s = this.paddingRight;
          }
          for (var z = t + l * s - l * this.spacingX, B = 0, G = 0, H = 0, J = 0, K = 0, Q = 0, U = 0, V = 0; V < c.length; ++V) {
            if ((X = c[V]).activeInHierarchy) {
              U++;
            }
          }
          var W = this.cellSize.width;
          if (this.type !== j.GRID && this.resizeMode === k.CHILDREN) {
            W = (a - (this.paddingLeft + this.paddingRight) - (U - 1) * this.spacingX) / U;
          }
          V = 0;
          for (; V < c.length; ++V) {
            var X = c[V];
            var Y = this._getUsedScaleValue(X.scaleX);
            var Z = this._getUsedScaleValue(X.scaleY);
            if (X.activeInHierarchy) {
              if (this._resize === k.CHILDREN) {
                X.width = W / Y;
                if (this.type === j.GRID) {
                  X.height = this.cellSize.height / Z;
                }
              }
              var $ = X.anchorX;
              var aa = X.width * Y;
              var ba = X.height * Z;
              if (H > G) {
                G = H;
              }
              if (ba >= G) {
                H = G;
                G = ba;
                Q = X.getAnchorPoint().y;
              }
              if (this.horizontalDirection === r.RIGHT_TO_LEFT) {
                $ = 1 - X.anchorX;
              }
              z = z + l * $ * aa + l * this.spacingX;
              var ca = l * (1 - $) * aa;
              if (n) {
                var da = z + ca + l * (l > 0 ? this.paddingRight : this.paddingLeft);
                var ea = this.horizontalDirection === r.LEFT_TO_RIGHT && da > (1 - o.x) * a;
                var fa = this.horizontalDirection === r.RIGHT_TO_LEFT && da < -o.x * a;
                if (ea || fa) {
                  if (ba >= G) {
                    if (H === 0) {
                      H = G;
                    }
                    B += H;
                    H = G;
                  } else {
                    B += G;
                    H = ba;
                    G = 0;
                  }
                  z = t + l * (s + $ * aa);
                  J++;
                }
              }
              var ga = e(X, B, J);
              if (a >= aa + this.paddingLeft + this.paddingRight && i) {
                X.setPosition(cc.v2(z, ga));
              }
              var ha;
              var ia = 1;
              var ja = G === 0 ? ba : G;
              if (this.verticalDirection === q.TOP_TO_BOTTOM) {
                K = K || this.node._contentSize.height;
                if ((ha = ga + (ia = -1) * (ja * Q + this.paddingBottom)) < K) {
                  K = ha;
                }
              } else {
                K = K || -this.node._contentSize.height;
                if ((ha = ga + ia * (ja * Q + this.paddingTop)) > K) {
                  K = ha;
                }
              }
              z += ca;
            }
          }
          return K;
        },
        _getVerticalBaseHeight: function (a) {
          var b = 0;
          var c = 0;
          if (this.resizeMode === k.CONTAINER) {
            for (var d = 0; d < a.length; ++d) {
              var f = a[d];
              if (f.activeInHierarchy) {
                c++;
                b += f.height * this._getUsedScaleValue(f.scaleY);
              }
            }
            b += (c - 1) * this.spacingY + this.paddingBottom + this.paddingTop;
          } else {
            b = this.node.getContentSize().height;
          }
          return b;
        },
        _doLayoutVertically: function (a, n, e, i) {
          var o = this.node.getAnchorPoint();
          var c = this.node.children;
          var l = 1;
          var s = this.paddingBottom;
          var t = -o.y * a;
          if (this.verticalDirection === q.TOP_TO_BOTTOM) {
            l = -1;
            t = (1 - o.y) * a;
            s = this.paddingTop;
          }
          for (var z = t + l * s - l * this.spacingY, B = 0, G = 0, H = 0, J = 0, K = 0, Q = 0, U = 0, V = 0; V < c.length; ++V) {
            if ((X = c[V]).activeInHierarchy) {
              U++;
            }
          }
          var W = this.cellSize.height;
          if (this.type !== j.GRID && this.resizeMode === k.CHILDREN) {
            W = (a - (this.paddingTop + this.paddingBottom) - (U - 1) * this.spacingY) / U;
          }
          V = 0;
          for (; V < c.length; ++V) {
            var X = c[V];
            var Y = this._getUsedScaleValue(X.scaleX);
            var Z = this._getUsedScaleValue(X.scaleY);
            if (X.activeInHierarchy) {
              if (this.resizeMode === k.CHILDREN) {
                X.height = W / Z;
                if (this.type === j.GRID) {
                  X.width = this.cellSize.width / Y;
                }
              }
              var $ = X.anchorY;
              var aa = X.width * Y;
              var ba = X.height * Z;
              if (H > G) {
                G = H;
              }
              if (aa >= G) {
                H = G;
                G = aa;
                Q = X.getAnchorPoint().x;
              }
              if (this.verticalDirection === q.TOP_TO_BOTTOM) {
                $ = 1 - X.anchorY;
              }
              z = z + l * $ * ba + l * this.spacingY;
              var ca = l * (1 - $) * ba;
              if (n) {
                var da = z + ca + l * (l > 0 ? this.paddingTop : this.paddingBottom);
                var ea = this.verticalDirection === q.BOTTOM_TO_TOP && da > (1 - o.y) * a;
                var fa = this.verticalDirection === q.TOP_TO_BOTTOM && da < -o.y * a;
                if (ea || fa) {
                  if (aa >= G) {
                    if (H === 0) {
                      H = G;
                    }
                    B += H;
                    H = G;
                  } else {
                    B += G;
                    H = aa;
                    G = 0;
                  }
                  z = t + l * (s + $ * ba);
                  J++;
                }
              }
              var ga = e(X, B, J);
              if (a >= ba + (this.paddingTop + this.paddingBottom) && i) {
                X.setPosition(cc.v2(ga, z));
              }
              var ha;
              var ia = 1;
              var ja = G === 0 ? aa : G;
              if (this.horizontalDirection === r.RIGHT_TO_LEFT) {
                ia = -1;
                K = K || this.node._contentSize.width;
                if ((ha = ga + ia * (ja * Q + this.paddingLeft)) < K) {
                  K = ha;
                }
              } else {
                K = K || -this.node._contentSize.width;
                if ((ha = ga + ia * (ja * Q + this.paddingRight)) > K) {
                  K = ha;
                }
              }
              z += ca;
            }
          }
          return K;
        },
        _doLayoutBasic: function () {
          for (var b = this.node.children, d = null, f = 0; f < b.length; ++f) {
            var g = b[f];
            if (g.activeInHierarchy) {
              if (d) {
                d.union(d, g.getBoundingBoxToWorld());
              } else {
                d = g.getBoundingBoxToWorld();
              }
            }
          }
          if (d) {
            var h = this.node.convertToNodeSpaceAR(cc.v2(d.x, d.y));
            h = cc.v2(h.x - this.paddingLeft, h.y - this.paddingBottom);
            var j = this.node.convertToNodeSpaceAR(cc.v2(d.xMax, d.yMax));
            var k = (j = cc.v2(j.x + this.paddingRight, j.y + this.paddingTop)).sub(h);
            if ((k = cc.size(parseFloat(k.x.toFixed(2)), parseFloat(k.y.toFixed(2)))).width !== 0) {
              var l = -h.x / k.width;
              this.node.anchorX = parseFloat(l.toFixed(2));
            }
            if (k.height !== 0) {
              var m = -h.y / k.height;
              this.node.anchorY = parseFloat(m.toFixed(2));
            }
            this.node.setContentSize(k);
          }
        },
        _doLayoutGridAxisHorizontal: function (a, b) {
          var d = b.width;
          var f = 1;
          var g = -a.y * b.height;
          var j = this.paddingBottom;
          if (this.verticalDirection === q.TOP_TO_BOTTOM) {
            f = -1;
            g = (1 - a.y) * b.height;
            j = this.paddingTop;
          }
          var e = function (a, b, c) {
            return g + f * (b + a.anchorY * a.height * this._getUsedScaleValue(a.scaleY) + j + c * this.spacingY);
          }.bind(this);
          var c = 0;
          if (this.resizeMode === k.CONTAINER) {
            var i = this._doLayoutHorizontally(d, true, e, false);
            if ((c = g - i) < 0) {
              c *= -1;
            }
            g = -a.y * c;
            if (this.verticalDirection === q.TOP_TO_BOTTOM) {
              f = -1;
              g = (1 - a.y) * c;
            }
          }
          this._doLayoutHorizontally(d, true, e, true);
          if (this.resizeMode === k.CONTAINER) {
            this.node.setContentSize(d, c);
          }
        },
        _doLayoutGridAxisVertical: function (b, d) {
          var e = d.height;
          var f = 1;
          var g = -b.x * d.width;
          var j = this.paddingLeft;
          if (this.horizontalDirection === r.RIGHT_TO_LEFT) {
            f = -1;
            g = (1 - b.x) * d.width;
            j = this.paddingRight;
          }
          var i = function (a, b, c) {
            return g + f * (b + a.anchorX * a.width * this._getUsedScaleValue(a.scaleX) + j + c * this.spacingX);
          }.bind(this);
          var c = 0;
          if (this.resizeMode === k.CONTAINER) {
            var m = this._doLayoutVertically(e, true, i, false);
            if ((c = g - m) < 0) {
              c *= -1;
            }
            g = -b.x * c;
            if (this.horizontalDirection === r.RIGHT_TO_LEFT) {
              f = -1;
              g = (1 - b.x) * c;
            }
          }
          this._doLayoutVertically(e, true, i, true);
          if (this.resizeMode === k.CONTAINER) {
            this.node.setContentSize(c, e);
          }
        },
        _doLayoutGrid: function () {
          var a = this.node.getAnchorPoint();
          var b = this.node.getContentSize();
          if (this.startAxis === g.HORIZONTAL) {
            this._doLayoutGridAxisHorizontal(a, b);
          } else if (this.startAxis === g.VERTICAL) {
            this._doLayoutGridAxisVertical(a, b);
          }
        },
        _getHorizontalBaseWidth: function (a) {
          var b = 0;
          var c = 0;
          if (this.resizeMode === k.CONTAINER) {
            for (var d = 0; d < a.length; ++d) {
              var f = a[d];
              if (f.activeInHierarchy) {
                c++;
                b += f.width * this._getUsedScaleValue(f.scaleX);
              }
            }
            b += (c - 1) * this.spacingX + this.paddingLeft + this.paddingRight;
          } else {
            b = this.node.getContentSize().width;
          }
          return b;
        },
        _doLayout: function () {
          if (this.type === j.HORIZONTAL) {
            var a = this._getHorizontalBaseWidth(this.node.children);
            this._doLayoutHorizontally(a, false, function (a) {
              return a.y;
            }, true);
            this.node.width = a;
          } else if (this.type === j.VERTICAL) {
            var b = this._getVerticalBaseHeight(this.node.children);
            this._doLayoutVertically(b, false, function (a) {
              return a.x;
            }, true);
            this.node.height = b;
          } else if (this.type === j.NONE) {
            if (this.resizeMode === k.CONTAINER) {
              this._doLayoutBasic();
            }
          } else if (this.type === j.GRID) {
            this._doLayoutGrid();
          }
        },
        _getUsedScaleValue: function (a) {
          if (this.affectedByScale) {
            return Math.abs(a);
          } else {
            return 1;
          }
        },
        updateLayout: function () {
          if (this._layoutDirty && this.node.children.length > 0 && this.node.children.find(function (a) {
            return a.activeInHierarchy;
          })) {
            this._doLayout();
            this._layoutDirty = false;
          }
        }
      });
      cc.Layout = d.exports = a;
    }, {
      "../CCNode": 26,
      "./CCComponent": 100
    }],
    106: [function (b, g) {
      "use strict";
  
      var e = m(b("../../renderer/gfx"));
      var j = m(b("../value-types/mat4"));
      var k = m(b("../value-types/vec2"));
      var i = m(b("../assets/material/material-variant"));
      function m(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      var a = b("../utils/misc");
      var n = b("./CCRenderComponent");
      var c = b("../renderer/render-flow");
      var l = b("../graphics/graphics");
      var q = new k.default();
      var r = new j.default();
      var f = [];
      function d(a, b, c) {
        f.length = 0;
        for (var d = Math.PI * 2 / c, e = 0; e < c; ++e) {
          f.push(cc.v2(b.x * Math.cos(d * e) + a.x, b.y * Math.sin(d * e) + a.y));
        }
        return f;
      }
      var u = cc.Enum({
        RECT: 0,
        ELLIPSE: 1,
        IMAGE_STENCIL: 2
      });
      var h = cc.Class({
        name: "cc.Mask",
        extends: n,
        editor: false,
        ctor: function () {
          this._graphics = null;
          this._enableMaterial = null;
          this._exitMaterial = null;
          this._clearMaterial = null;
        },
        properties: {
          _spriteFrame: {
            default: null,
            type: cc.SpriteFrame
          },
          _type: u.RECT,
          type: {
            get: function () {
              return this._type;
            },
            set: function (a) {
              if (this._type !== a) {
                this._resetAssembler();
              }
              this._type = a;
              if (this._type !== u.IMAGE_STENCIL) {
                this.spriteFrame = null;
                this.alphaThreshold = 0;
                this._updateGraphics();
              }
              this._activateMaterial();
            },
            type: u,
            tooltip: false
          },
          spriteFrame: {
            type: cc.SpriteFrame,
            tooltip: false,
            get: function () {
              return this._spriteFrame;
            },
            set: function (a) {
              var b = this._spriteFrame;
              if (b !== a) {
                if (b) {
                  b.off("load", this.setVertsDirty, this);
                }
                this._spriteFrame = a;
                this.setVertsDirty();
                this._updateMaterial();
              }
            }
          },
          alphaThreshold: {
            default: 0.1,
            type: cc.Float,
            range: [0, 1, 0.1],
            slide: true,
            tooltip: false,
            notify: function () {
              if (cc.game.renderType !== cc.game.RENDER_TYPE_CANVAS) {
                this._updateMaterial();
              }
            }
          },
          inverted: {
            default: false,
            type: cc.Boolean,
            tooltip: false,
            notify: function () {
              cc.game.renderType;
              cc.game.RENDER_TYPE_CANVAS;
            }
          },
          _segments: 64,
          segements: {
            get: function () {
              return this._segments;
            },
            set: function (b) {
              this._segments = a.clampf(b, 3, 10000);
              this._updateGraphics();
            },
            type: cc.Integer,
            tooltip: false
          },
          _resizeToTarget: {
            animatable: false,
            set: function (a) {
              if (a) {
                this._resizeNodeToTargetNode();
              }
            }
          }
        },
        statics: {
          Type: u
        },
        onRestore: function () {
          this._activateMaterial();
        },
        onEnable: function () {
          this._super();
          if (this._type !== u.IMAGE_STENCIL) {
            this._updateGraphics();
          } else if (this._spriteFrame) {
            this._spriteFrame.once("load", this.setVertsDirty, this);
          }
          this.node.on(cc.Node.EventType.POSITION_CHANGED, this._updateGraphics, this);
          this.node.on(cc.Node.EventType.ROTATION_CHANGED, this._updateGraphics, this);
          this.node.on(cc.Node.EventType.SCALE_CHANGED, this._updateGraphics, this);
          this.node.on(cc.Node.EventType.SIZE_CHANGED, this._updateGraphics, this);
          this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this._updateGraphics, this);
        },
        onDisable: function () {
          this._super();
          this.node.off(cc.Node.EventType.POSITION_CHANGED, this._updateGraphics, this);
          this.node.off(cc.Node.EventType.ROTATION_CHANGED, this._updateGraphics, this);
          this.node.off(cc.Node.EventType.SCALE_CHANGED, this._updateGraphics, this);
          this.node.off(cc.Node.EventType.SIZE_CHANGED, this._updateGraphics, this);
          this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this._updateGraphics, this);
          this.node._renderFlag &= ~c.FLAG_POST_RENDER;
        },
        onDestroy: function () {
          this._super();
          this._removeGraphics();
          if (this._spriteFrame) {
            this._spriteFrame.off("load", this.setVertsDirty, this);
          }
        },
        _resizeNodeToTargetNode: false,
        _validateRender: function () {
          if (this._type === u.IMAGE_STENCIL) {
            var a = this._spriteFrame;
            if (!(a && a.textureLoaded())) {
              this.disableRender();
            }
          }
        },
        _activateMaterial: function () {
          this._createGraphics();
          var a = this._materials[0];
          (a = a ? i.default.create(a, this) : i.default.createWithBuiltin("2d-sprite", this)).define("USE_ALPHA_TEST", true);
          if (this._type === u.IMAGE_STENCIL) {
            a.define("CC_USE_MODEL", false);
            a.define("USE_TEXTURE", true);
          } else {
            a.define("CC_USE_MODEL", true);
            a.define("USE_TEXTURE", false);
          }
          if (!this._enableMaterial) {
            this._enableMaterial = i.default.createWithBuiltin("2d-sprite", this);
          }
          if (!this._exitMaterial) {
            this._exitMaterial = i.default.createWithBuiltin("2d-sprite", this);
            this._exitMaterial.setStencilEnabled(e.default.STENCIL_DISABLE);
          }
          if (!this._clearMaterial) {
            this._clearMaterial = i.default.createWithBuiltin("clear-stencil", this);
          }
          this.setMaterial(0, a);
          this._graphics._materials[0] = a;
          this._updateMaterial();
        },
        _updateMaterial: function () {
          var a = this._materials[0];
          if (a) {
            if (this._type === u.IMAGE_STENCIL && this.spriteFrame) {
              var b = this.spriteFrame.getTexture();
              a.setProperty("texture", b);
            }
            a.setProperty("alphaThreshold", this.alphaThreshold);
          }
        },
        _createGraphics: function () {
          if (!this._graphics) {
            this._graphics = new l();
            cc.Assembler.init(this._graphics);
            this._graphics.node = this.node;
            this._graphics.lineWidth = 0;
            this._graphics.strokeColor = cc.color(0, 0, 0, 0);
          }
        },
        _updateGraphics: function () {
          if (this.enabledInHierarchy) {
            var b = this.node;
            var f = this._graphics;
            f.clear(false);
            var e = b._contentSize.width;
            var g = b._contentSize.height;
            var h = -e * b._anchorPoint.x;
            var i = -g * b._anchorPoint.y;
            if (this._type === u.RECT) {
              f.rect(h, i, e, g);
            } else if (this._type === u.ELLIPSE) {
              for (var j = d(cc.v2(h + e / 2, i + g / 2), {
                  x: e / 2,
                  y: g / 2
                }, this._segments), a = 0; a < j.length; ++a) {
                var k = j[a];
                if (a === 0) {
                  f.moveTo(k.x, k.y);
                } else {
                  f.lineTo(k.x, k.y);
                }
              }
              f.close();
            }
            if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
              f.stroke();
            } else {
              f.fill();
            }
            this.setVertsDirty();
          }
        },
        _removeGraphics: function () {
          if (this._graphics) {
            this._graphics.destroy();
            this._graphics._destroyImmediate();
            this._graphics = null;
          }
        },
        _hitTest: function (b) {
          var f = this.node;
          var e = f.getContentSize();
          var g = e.width;
          var i = e.height;
          var a = q;
          f._updateWorldMatrix();
          if (!j.default.invert(r, f._worldMatrix)) {
            return false;
          }
          k.default.transformMat4(a, b, r);
          a.x += f._anchorPoint.x * g;
          a.y += f._anchorPoint.y * i;
          var m = false;
          if (this.type === u.RECT || this.type === u.IMAGE_STENCIL) {
            m = a.x >= 0 && a.y >= 0 && a.x <= g && a.y <= i;
          } else if (this.type === u.ELLIPSE) {
            var n = g / 2;
            var l = i / 2;
            var h = a.x - g * 0.5;
            var d = a.y - i * 0.5;
            m = h * h / (n * n) + d * d / (l * l) < 1;
          }
          if (this.inverted) {
            m = !m;
          }
          return m;
        },
        markForRender: function (a) {
          var b = c.FLAG_RENDER | c.FLAG_UPDATE_RENDER_DATA | c.FLAG_POST_RENDER;
          if (a) {
            this.node._renderFlag |= b;
            this.markForValidate();
          } else if (!a) {
            this.node._renderFlag &= ~b;
          }
        },
        disableRender: function () {
          this.node._renderFlag &= ~(c.FLAG_RENDER | c.FLAG_UPDATE_RENDER_DATA | c.FLAG_POST_RENDER);
        }
      });
      cc.Mask = g.exports = h;
    }, {
      "../../renderer/gfx": 282,
      "../assets/material/material-variant": 83,
      "../graphics/graphics": 151,
      "../renderer/render-flow": 194,
      "../utils/misc": 236,
      "../value-types/mat4": 253,
      "../value-types/vec2": 260,
      "./CCRenderComponent": 109
    }],
    107: [function (a, b) {
      "use strict";
  
      var g = a("../utils/misc");
      var c = a("./CCComponent");
      var j = cc.Enum({
        HORIZONTAL: 0,
        VERTICAL: 1,
        FILLED: 2
      });
      var d = cc.Class({
        name: "cc.ProgressBar",
        extends: c,
        editor: false,
        _initBarSprite: function () {
          if (this.barSprite) {
            var b = this.barSprite.node;
            if (!b) {
              return;
            }
            var c = this.node.getContentSize();
            var d = this.node.getAnchorPoint();
            var e = b.getContentSize();
            if (b.parent === this.node) {
              this.node.setContentSize(e);
            }
            if (this.barSprite.fillType === cc.Sprite.FillType.RADIAL) {
              this.mode = j.FILLED;
            }
            var f = b.getContentSize();
            if (this.mode === j.HORIZONTAL) {
              this.totalLength = f.width;
            } else if (this.mode === j.VERTICAL) {
              this.totalLength = f.height;
            } else {
              this.totalLength = this.barSprite.fillRange;
            }
            if (b.parent === this.node) {
              var g = -c.width * d.x;
              b.setPosition(cc.v2(g, 0));
            }
          }
        },
        _updateBarStatus: function () {
          if (this.barSprite) {
            var b = this.barSprite.node;
            if (!b) {
              return;
            }
            var i;
            var k;
            var m;
            var p = b.getAnchorPoint();
            var a = b.getContentSize();
            var o = b.getPosition();
            var c = cc.v2(0, 0.5);
            var q = g.clamp01(this.progress);
            var h = this.totalLength * q;
            switch (this.mode) {
              case j.HORIZONTAL:
                if (this.reverse) {
                  c = cc.v2(1, 0.5);
                }
                i = cc.size(h, a.height);
                k = this.totalLength;
                m = a.height;
                break;
              case j.VERTICAL:
                c = this.reverse ? cc.v2(0.5, 1) : cc.v2(0.5, 0);
                i = cc.size(a.width, h);
                k = a.width;
                m = this.totalLength;
            }
            if (this.mode === j.FILLED) {
              if (!(this.barSprite.type !== cc.Sprite.Type.FILLED)) {
                if (this.reverse) {
                  h *= -1;
                }
                this.barSprite.fillRange = h;
              }
            } else if (this.barSprite.type !== cc.Sprite.Type.FILLED) {
              var r = c.x - p.x;
              var f = c.y - p.y;
              var d = cc.v2(k * r, m * f);
              b.setPosition(o.x + d.x, o.y + d.y);
              b.setAnchorPoint(c);
              b.setContentSize(i);
            }
          }
        },
        properties: {
          barSprite: {
            default: null,
            type: cc.Sprite,
            tooltip: false,
            notify: function () {
              this._initBarSprite();
            },
            animatable: false
          },
          mode: {
            default: j.HORIZONTAL,
            type: j,
            tooltip: false,
            notify: function () {
              if (this.barSprite) {
                var a = this.barSprite.node;
                if (!a) {
                  return;
                }
                var b = a.getContentSize();
                if (this.mode === j.HORIZONTAL) {
                  this.totalLength = b.width;
                } else if (this.mode === j.VERTICAL) {
                  this.totalLength = b.height;
                } else if (this.mode === j.FILLED) {
                  this.totalLength = this.barSprite.fillRange;
                }
              }
            },
            animatable: false
          },
          _N$totalLength: 1,
          totalLength: {
            range: [0, Number.MAX_VALUE],
            tooltip: false,
            get: function () {
              return this._N$totalLength;
            },
            set: function (a) {
              if (this.mode === j.FILLED) {
                a = g.clamp01(a);
              }
              this._N$totalLength = a;
              this._updateBarStatus();
            }
          },
          progress: {
            default: 1,
            type: cc.Float,
            range: [0, 1, 0.1],
            slide: true,
            tooltip: false,
            notify: function () {
              this._updateBarStatus();
            }
          },
          reverse: {
            default: false,
            tooltip: false,
            notify: function () {
              if (this.barSprite) {
                this.barSprite.fillStart = 1 - this.barSprite.fillStart;
              }
              this._updateBarStatus();
            },
            animatable: false
          }
        },
        statics: {
          Mode: j
        }
      });
      cc.ProgressBar = b.exports = d;
    }, {
      "../utils/misc": 236,
      "./CCComponent": 100
    }],
    108: [function (a, b) {
      "use strict";
  
      var c = cc.Class({
        name: "cc.PropagateTouchEvents",
        extends: a("./CCComponent"),
        editor: {
          menu: "i18n:MAIN_MENU.component.ui/Propagate Touch Events",
          inspector: "unpack://engine/inspectors/comps/propagate-touch-events.js"
        },
        onEnable: function () {
          this._swallowTouches = this.node.swallowTouches;
          this.node.swallowTouches = false;
        },
        onDisable: function () {
          this.node.swallowTouches = this._swallowTouches;
        }
      });
      cc.PropagateTouchEvents = b.exports = c;
    }, {
      "./CCComponent": 100
    }],
    109: [function (b, d) {
      "use strict";
  
      var e = i(b("../renderer/assembler"));
      var f = i(b("../assets/material/material-variant"));
      var g = b("../value-types");
      function i(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      var j = b("./CCComponent");
      var a = b("../renderer/render-flow");
      var k = b("../assets/material/CCMaterial");
      var c = new g.Color();
      var l = cc.Class({
        name: "RenderComponent",
        extends: j,
        editor: false,
        properties: {
          _materials: {
            default: [],
            type: k
          },
          materials: {
            get: function () {
              return this._materials;
            },
            set: function (a) {
              this._materials = a;
              this._activateMaterial();
            },
            type: [k],
            displayName: "Materials",
            animatable: false
          }
        },
        ctor: function () {
          this._vertsDirty = true;
          this._assembler = null;
        },
        _resetAssembler: function () {
          e.default.init(this);
          this._updateColor();
          this.setVertsDirty();
        },
        __preload: function () {
          this._resetAssembler();
          this._activateMaterial();
        },
        onEnable: function () {
          if (this.node._renderComponent) {
            this.node._renderComponent.enabled = false;
          }
          this.node._renderComponent = this;
          this.node._renderFlag |= a.FLAG_OPACITY_COLOR;
          this.setVertsDirty();
        },
        onDisable: function () {
          this.node._renderComponent = null;
          this.disableRender();
        },
        onDestroy: function () {
          for (var a = this._materials, b = 0; b < a.length; b++) {
            cc.pool.material.put(a[b]);
          }
          a.length = 0;
          cc.pool.assembler.put(this._assembler);
          this.disableRender();
        },
        setVertsDirty: function () {
          this._vertsDirty = true;
          this.markForRender(true);
        },
        _on3DNodeChanged: function () {
          this._resetAssembler();
        },
        _validateRender: function () {},
        markForValidate: function () {
          cc.RenderFlow.registerValidate(this);
        },
        markForRender: function (b) {
          var c = a.FLAG_RENDER | a.FLAG_UPDATE_RENDER_DATA;
          if (b) {
            this.node._renderFlag |= c;
            this.markForValidate();
          } else {
            this.node._renderFlag &= ~c;
          }
        },
        disableRender: function () {
          this.node._renderFlag &= ~(a.FLAG_RENDER | a.FLAG_UPDATE_RENDER_DATA);
        },
        getMaterial: function (a) {
          if (a < 0 || a >= this._materials.length) {
            return null;
          }
          var b = this._materials[a];
          if (!b) {
            return null;
          }
          var c = f.default.create(b, this);
          if (c !== b) {
            this.setMaterial(a, c);
          }
          return c;
        },
        getMaterials: function () {
          for (var a = this._materials, b = 0; b < a.length; b++) {
            a[b] = f.default.create(a[b], this);
          }
          return a;
        },
        setMaterial: function (a, b) {
          if (b !== this._materials[a]) {
            b = f.default.create(b, this);
            this._materials[a] = b;
          }
          this._updateMaterial();
          this.markForRender(true);
          return b;
        },
        _getDefaultMaterial: function () {
          return k.getBuiltinMaterial("2d-sprite");
        },
        _activateMaterial: function () {
          var a = this._materials;
          if (!a[0]) {
            var b = this._getDefaultMaterial();
            a[0] = b;
          }
          for (var c = 0; c < a.length; c++) {
            a[c] = f.default.create(a[c], this);
          }
          this._updateMaterial();
        },
        _updateMaterial: function () {},
        _updateColor: function () {
          if (this._assembler.updateColor) {
            var a = this.srcBlendFactor === cc.macro.BlendFactor.ONE;
            if (a) {
              g.Color.premultiplyAlpha(c, this.node._color);
            }
            var b = a ? c._val : null;
            this._assembler.updateColor(this, b);
          }
        },
        _checkBacth: function (a, b) {
          var c = this._materials[0];
          if (c && c.getHash() !== a.material.getHash() || a.cullingMask !== b) {
            a._flush();
            a.node = c.getDefine("CC_USE_MODEL") ? this.node : a._dummyNode;
            a.material = c;
            a.cullingMask = b;
          }
        }
      });
      cc.RenderComponent = d.exports = l;
    }, {
      "../assets/material/CCMaterial": 76,
      "../assets/material/material-variant": 83,
      "../renderer/assembler": 190,
      "../renderer/render-flow": 194,
      "../value-types": 251,
      "./CCComponent": 100
    }],
    110: [function (b, d) {
      "use strict";
  
      var e = b("../platform/js");
      var f = b("../platform/CCMacro");
      var g = b("../utils/text-utils");
      var j = new (b("../utils/html-text-parser"))();
      var k = f.TextAlignment;
      var a = f.VerticalTextAlignment;
      var q = cc.Label.CacheMode;
      var c = new e.Pool(function (a) {
        if (!cc.isValid(a)) {
          return false;
        }
        var b = a.getComponent(cc.LabelOutline);
        if (b) {
          b.width = 0;
        }
        return true;
      }, 20);
      c.get = function (b, c) {
        var d = this._get();
        if (!d) {
          (d = new cc.PrivateNode("RICHTEXT_CHILD"))._objFlags |= cc.Object.Flags.DontSave;
        }
        d.setPosition(0, 0);
        d.setAnchorPoint(0.5, 0.5);
        d.skewX = 0;
        var e = d.getComponent(cc.Label);
        if (!e) {
          e = d.addComponent(cc.Label);
        }
        e.string = "";
        e.horizontalAlign = k.LEFT;
        e.verticalAlign = a.CENTER;
        e._forceUseCanvas = true;
        e.customOffsetX = c.customOffsetX;
        e.customOffsetY = c.customOffsetY;
        e.actualLineHeight = c.actualLineHeight;
        return d;
      };
      var i = cc.Class({
        name: "cc.RichText",
        extends: cc.Component,
        ctor: function () {
          this._textArray = null;
          this._labelSegments = [];
          this._labelSegmentsCache = [];
          this._linesWidth = [];
          this._customOffsetX = 0;
          this._customOffsetY = 0;
          this._actualLineHeight = undefined;
          this._updateRichTextStatus = this._updateRichText;
        },
        editor: false,
        properties: {
          string: {
            default: "<color=#00ff00>Rich</c><color=#0fffff>Text</color>",
            multiline: true,
            tooltip: false,
            notify: function () {
              this._updateRichTextStatus();
            }
          },
          horizontalAlign: {
            default: k.LEFT,
            type: k,
            tooltip: false,
            animatable: false,
            notify: function (a) {
              if (this.horizontalAlign !== a) {
                this._layoutDirty = true;
                this._updateRichTextStatus();
              }
            }
          },
          fontSize: {
            default: 40,
            tooltip: false,
            notify: function (a) {
              if (this.fontSize !== a) {
                this._layoutDirty = true;
                this._updateRichTextStatus();
              }
            }
          },
          _fontFamily: "Arial",
          fontFamily: {
            tooltip: false,
            get: function () {
              return this._fontFamily;
            },
            set: function (a) {
              if (this._fontFamily !== a) {
                this._fontFamily = a;
                this._layoutDirty = true;
                this._updateRichTextStatus();
              }
            },
            animatable: false
          },
          font: {
            default: null,
            type: cc.TTFFont,
            tooltip: false,
            notify: function (a) {
              if (this.font !== a) {
                this._layoutDirty = true;
                if (this.font) {
                  this.useSystemFont = false;
                  this._onTTFLoaded();
                } else {
                  this.useSystemFont = true;
                }
                this._updateRichTextStatus();
              }
            }
          },
          _isSystemFontUsed: true,
          useSystemFont: {
            get: function () {
              return this._isSystemFontUsed;
            },
            set: function (a) {
              if (this._isSystemFontUsed !== a) {
                this._isSystemFontUsed = a;
                this._layoutDirty = true;
                this._updateRichTextStatus();
              }
            },
            animatable: false,
            tooltip: false
          },
          cacheMode: {
            default: q.NONE,
            type: q,
            tooltip: false,
            notify: function (a) {
              if (this.cacheMode !== a) {
                this._updateRichTextStatus();
              }
            },
            animatable: false
          },
          maxWidth: {
            default: 0,
            tooltip: false,
            notify: function (a) {
              if (this.maxWidth !== a) {
                this._layoutDirty = true;
                this._updateRichTextStatus();
              }
            }
          },
          lineHeight: {
            default: 40,
            tooltip: false,
            notify: function (a) {
              if (this.lineHeight !== a) {
                this._layoutDirty = true;
                this._updateRichTextStatus();
              }
            }
          },
          imageAtlas: {
            default: null,
            type: cc.SpriteAtlas,
            tooltip: false,
            notify: function (a) {
              if (this.imageAtlas !== a) {
                this._layoutDirty = true;
                this._updateRichTextStatus();
              }
            }
          },
          handleTouchEvent: {
            default: true,
            tooltip: false,
            notify: function (a) {
              if (this.handleTouchEvent !== a && this.enabledInHierarchy) {
                if (this.handleTouchEvent) {
                  this._addEventListeners();
                } else {
                  this._removeEventListeners();
                }
              }
            }
          },
          customOffsetX: {
            get: function () {
              return this._customOffsetX;
            },
            set: function (a) {
              if (this._customOffsetX !== a) {
                this._customOffsetX = a;
                this._layoutDirty = true;
                this._updateRichTextStatus();
              }
            }
          },
          customOffsetY: {
            get: function () {
              return this._customOffsetY;
            },
            set: function (a) {
              if (this._customOffsetY !== a) {
                this._customOffsetY = a;
                this._layoutDirty = true;
                this._updateRichTextStatus();
              }
            }
          },
          actualLineHeight: {
            get: function () {
              return this._actualLineHeight || this.lineHeight;
            },
            set: function (a) {
              if (this._actualLineHeight !== a) {
                this._actualLineHeight = a;
                this._updateRichTextStatus();
              }
            }
          }
        },
        statics: {
          HorizontalAlign: k,
          VerticalAlign: a
        },
        onEnable: function () {
          if (this.handleTouchEvent) {
            this._addEventListeners();
          }
          this._onTTFLoaded();
          this._activateChildren(true);
        },
        onDisable: function () {
          if (this.handleTouchEvent) {
            this._removeEventListeners();
          }
          this._activateChildren(false);
        },
        _onColorChanged: function (a) {
          this.node.children.forEach(function (b) {
            b.color = a;
          });
        },
        _addEventListeners: function () {
          this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
          this.node.on(cc.Node.EventType.COLOR_CHANGED, this._onColorChanged, this);
        },
        _removeEventListeners: function () {
          this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
          this.node.off(cc.Node.EventType.COLOR_CHANGED, this._onColorChanged, this);
        },
        _updateLabelSegmentTextAttributes: function () {
          this._labelSegments.forEach(function (a) {
            this._applyTextAttribute(a, null, true);
          }.bind(this));
        },
        _createFontLabel: function (a) {
          return c.get(a, this);
        },
        _onTTFLoaded: function () {
          if (this.font instanceof cc.TTFFont) {
            if (this.font._nativeAsset) {
              this._layoutDirty = true;
              this._updateRichTextStatus();
            } else {
              var a = this;
              cc.assetManager.postLoadNative(this.font, function () {
                a._layoutDirty = true;
                a._updateRichTextStatus();
              });
            }
          } else {
            this._layoutDirty = true;
            this._updateRichTextStatus();
          }
        },
        _measureText: function (a, b) {
          var c = this;
          function d(b) {
            var d;
            if (c._labelSegmentsCache.length === 0) {
              d = c._createFontLabel(b);
              c._labelSegmentsCache.push(d);
            } else {
              d = c._labelSegmentsCache[0];
            }
            d._styleIndex = a;
            c._applyTextAttribute(d, b, true);
            return d.getContentSize().width;
          }
          if (b) {
            return d(b);
          } else {
            return d;
          }
        },
        _onTouchEnded: function (b) {
          for (var c = this, d = this.node.getComponents(cc.Component), a = function (e) {
              var f = c._labelSegments[e];
              var g = f._clickHandler;
              var h = f._clickParam;
              if (g && c._containsTouchLocation(f, b.touch.getLocation())) {
                d.forEach(function (a) {
                  if (a.enabledInHierarchy && a[g]) {
                    a[g](b, h);
                  }
                });
                b.stopPropagation();
              }
            }, e = 0; e < this._labelSegments.length; ++e) {
            a(e);
          }
        },
        _containsTouchLocation: function (a, b) {
          return a._hitTest(b);
        },
        _resetState: function () {
          for (var a = this.node.children, b = a.length - 1; b >= 0; b--) {
            var d = a[b];
            if (!(d.name !== "RICHTEXT_CHILD" && d.name !== "RICHTEXT_Image_CHILD")) {
              if (d.parent === this.node) {
                d.parent = null;
              } else {
                a.splice(b, 1);
              }
              if (d.name === "RICHTEXT_CHILD") {
                c.put(d);
              }
            }
          }
          this._labelSegments.length = 0;
          this._labelSegmentsCache.length = 0;
          this._linesWidth.length = 0;
          this._lineOffsetX = 0;
          this._lineCount = 1;
          this._labelWidth = 0;
          this._labelHeight = 0;
          this._layoutDirty = true;
        },
        onRestore: false,
        _activateChildren: function (a) {
          for (var b = this.node.children.length - 1; b >= 0; b--) {
            var c = this.node.children[b];
            if (!(c.name !== "RICHTEXT_CHILD" && c.name !== "RICHTEXT_Image_CHILD")) {
              c.active = a;
            }
          }
        },
        _addLabelSegment: function (a, b) {
          var c;
          (c = this._labelSegmentsCache.length === 0 ? this._createFontLabel(a) : this._labelSegmentsCache.pop())._styleIndex = b;
          c._lineCount = this._lineCount;
          c.active = this.node.active;
          c.setAnchorPoint(0, 0);
          this._applyTextAttribute(c, a, false);
          this.node.addChild(c);
          this._labelSegments.push(c);
          return c;
        },
        _updateRichTextWithMaxWidth: function (b, j, e) {
          var i = j;
          if (this._lineOffsetX > 0 && i + this._lineOffsetX > this.maxWidth) {
            for (var k = 0; this._lineOffsetX <= this.maxWidth;) {
              var m = this._getFirstWordLen(b, k, b.length);
              var p = b.substr(k, m);
              var q = this._measureText(e, p);
              if (!(this._lineOffsetX + q <= this.maxWidth)) {
                if (k > 0) {
                  var r = b.substr(0, k);
                  this._addLabelSegment(r, e);
                  b = b.substr(k, b.length);
                  i = this._measureText(e, b);
                }
                this._updateLineInfo();
                break;
              }
              this._lineOffsetX += q;
              k += m;
            }
          }
          if (i > this.maxWidth) {
            for (var v = g.fragmentText(b, i, this.maxWidth, this._measureText(e)), h = 0; h < v.length; ++h) {
              var w = v[h];
              var x = this._addLabelSegment(w, e).getContentSize();
              this._lineOffsetX += x.width;
              if (v.length > 1 && h < v.length - 1) {
                this._updateLineInfo();
              }
            }
          } else {
            this._lineOffsetX += i;
            this._addLabelSegment(b, e);
          }
        },
        _isLastComponentCR: function (a) {
          return a.length - 1 === a.lastIndexOf("\n");
        },
        _updateLineInfo: function () {
          this._linesWidth.push(this._lineOffsetX);
          this._lineOffsetX = 0;
          this._lineCount++;
        },
        _needsUpdateTextLayout: function (a) {
          if (this._layoutDirty || !this._textArray || !a) {
            return true;
          }
          if (this._textArray.length !== a.length) {
            return true;
          }
          for (var b = 0; b < this._textArray.length; ++b) {
            var c = this._textArray[b];
            var d = a[b];
            if (c.text !== d.text) {
              return true;
            }
            var f = c.style;
            var g = d.style;
            if (f) {
              if (g) {
                if (!f.outline != !g.outline) {
                  return true;
                }
                if (f.size !== g.size || !f.italic != !g.italic || f.isImage !== g.isImage) {
                  return true;
                }
                if (f.src !== g.src || f.imageAlign !== g.imageAlign || f.imageHeight !== g.imageHeight || f.imageWidth !== g.imageWidth || f.imageOffset !== g.imageOffset) {
                  return true;
                }
              } else if (f.size || f.italic || f.isImage || f.outline) {
                return true;
              }
            } else if (g && (g.size || g.italic || g.isImage || g.outline)) {
              return true;
            }
          }
          return false;
        },
        _addRichTextImageElement: function (b) {
          var d = b.style.src;
          var e = this.imageAtlas.getSpriteFrame(d);
          if (e) {
            var f = new cc.PrivateNode("RICHTEXT_Image_CHILD");
            f._objFlags |= cc.Object.Flags.DontSave;
            var g = f.addComponent(cc.Sprite);
            switch (b.style.imageAlign) {
              case "top":
                f.setAnchorPoint(0, 1);
                break;
              case "center":
                f.setAnchorPoint(0, 0.5);
                break;
              default:
                f.setAnchorPoint(0, 0);
            }
            if (b.style.imageOffset) {
              f._imageOffset = b.style.imageOffset;
            }
            g.type = cc.Sprite.Type.SLICED;
            g.sizeMode = cc.Sprite.SizeMode.CUSTOM;
            this.node.addChild(f);
            this._labelSegments.push(f);
            var i = e.getRect();
            var j = 1;
            var k = i.width;
            var m = i.height;
            var n = b.style.imageWidth;
            var l = b.style.imageHeight;
            if (l > 0) {
              k *= j = l / m;
              m *= j;
            } else {
              k *= j = this.lineHeight / m;
              m *= j;
            }
            if (n > 0) {
              k = n;
            }
            if (this.maxWidth > 0) {
              if (this._lineOffsetX + k > this.maxWidth) {
                this._updateLineInfo();
              }
              this._lineOffsetX += k;
            } else {
              this._lineOffsetX += k;
              if (this._lineOffsetX > this._labelWidth) {
                this._labelWidth = this._lineOffsetX;
              }
            }
            g.spriteFrame = e;
            f.setContentSize(k, m);
            f._lineCount = this._lineCount;
            if (b.style.event) {
              if (b.style.event.click) {
                f._clickHandler = b.style.event.click;
              }
              if (b.style.event.param) {
                f._clickParam = b.style.event.param;
              } else {
                f._clickParam = "";
              }
            } else {
              f._clickHandler = null;
            }
          }
        },
        _updateRichText: function () {
          if (this.enabledInHierarchy) {
            var b = j.parse(this.string);
            if (!this._needsUpdateTextLayout(b)) {
              this._textArray = b;
              this._updateLabelSegmentTextAttributes();
              this._updateRichTextPosition();
              return;
            }
            this._textArray = b;
            this._resetState();
            for (var d, f = false, k = 0; k < this._textArray.length; ++k) {
              var m = this._textArray[k];
              var p = m.text;
              if (p === "") {
                if (m.style && m.style.newline) {
                  this._updateLineInfo();
                  continue;
                }
                if (m.style && m.style.isImage && this.imageAtlas) {
                  this._addRichTextImageElement(m);
                  continue;
                }
              }
              for (var q = p.split("\n"), r = 0; r < q.length; ++r) {
                var s = q[r];
                if (s !== "") {
                  f = false;
                  if (this.maxWidth > 0) {
                    var t = this._measureText(k, s);
                    this._updateRichTextWithMaxWidth(s, t, k);
                    if (q.length > 1 && r < q.length - 1) {
                      this._updateLineInfo();
                    }
                  } else {
                    d = this._addLabelSegment(s, k).getContentSize();
                    this._lineOffsetX += d.width;
                    if (this._lineOffsetX > this._labelWidth) {
                      this._labelWidth = this._lineOffsetX;
                    }
                    if (q.length > 1 && r < q.length - 1) {
                      this._updateLineInfo();
                    }
                  }
                } else {
                  if (this._isLastComponentCR(p) && r === q.length - 1) {
                    continue;
                  }
                  this._updateLineInfo();
                  f = true;
                }
              }
            }
            if (!f) {
              this._linesWidth.push(this._lineOffsetX);
            }
            if (this.maxWidth > 0) {
              this._labelWidth = this.maxWidth;
            }
            this._labelHeight = (this._lineCount + g.BASELINE_RATIO) * this.lineHeight;
            this.node.setContentSize(this._labelWidth, this._labelHeight);
            this._updateRichTextPosition();
            this._layoutDirty = false;
          }
        },
        _getFirstWordLen: function (b, c, d) {
          var e = b.charAt(c);
          if (g.isUnicodeCJK(e) || g.isUnicodeSpace(e)) {
            return 1;
          }
          for (var f = 1, h = c + 1; h < d && (e = b.charAt(h), !g.isUnicodeSpace(e) && !g.isUnicodeCJK(e)); ++h) {
            f++;
          }
          return f;
        },
        _updateRichTextPosition: function () {
          for (var a = 0, b = 1, c = this._lineCount, i = 0; i < this._labelSegments.length; ++i) {
            var j = this._labelSegments[i];
            var r = j._lineCount;
            if (r > b) {
              a = 0;
              b = r;
            }
            var w = 0;
            switch (this.horizontalAlign) {
              case k.LEFT:
                w = -this._labelWidth / 2;
                break;
              case k.CENTER:
                w = -this._linesWidth[r - 1] / 2;
                break;
              case k.RIGHT:
                w = this._labelWidth / 2 - this._linesWidth[r - 1];
            }
            j.x = a + w;
            var x = j.getContentSize();
            j.y = this.lineHeight * (c - r) - this._labelHeight / 2;
            if (r === b) {
              a += x.width;
            }
            if (j.getComponent(cc.Sprite)) {
              var y = this.lineHeight;
              var z = this.lineHeight * (1 + g.BASELINE_RATIO);
              switch (j.anchorY) {
                case 1:
                  j.y += y + (z - y) / 2;
                  break;
                case 0.5:
                  j.y += z / 2;
                  break;
                default:
                  j.y += (z - y) / 2;
              }
              if (j._imageOffset) {
                var A = j._imageOffset.split(",");
                if (A.length === 1 && A[0]) {
                  var B = parseFloat(A[0]);
                  if (Number.isInteger(B)) {
                    j.y += B;
                  }
                } else if (A.length === 2) {
                  var C = parseFloat(A[0]);
                  var D = parseFloat(A[1]);
                  if (Number.isInteger(C)) {
                    j.x += C;
                  }
                  if (Number.isInteger(D)) {
                    j.y += D;
                  }
                }
              }
            } else {
              j.anchorY = 0;
            }
            var E = j.getComponent(cc.LabelOutline);
            if (E && E.width) {
              j.y = j.y - E.width;
            }
            if (j.getComponent(cc.Label) && this.cacheMode === q.CHAR) {
              var F = E ? E.width : 0;
              j.y = ((c - 1) / 2 - (r - 1)) * (this.lineHeight + F / 2);
              j.anchorY = 0.5;
            }
          }
        },
        _convertLiteralColorValue: function (a) {
          var b = a.toUpperCase();
          if (cc.Color[b]) {
            return cc.Color[b];
          } else {
            return cc.color().fromHEX(a);
          }
        },
        _applyTextAttribute: function (b, c, d) {
          var f = b.getComponent(cc.Label);
          if (f) {
            var g = b._styleIndex;
            var h = null;
            if (this._textArray[g]) {
              h = this._textArray[g].style;
            }
            if (h && h.color) {
              b.color = this._convertLiteralColorValue(h.color);
            } else {
              b.color = this.node.color;
            }
            f.cacheMode = this.cacheMode;
            if (this.font instanceof cc.Font && !this._isSystemFontUsed) {
              f.font = this.font;
            } else {
              f.fontFamily = this.fontFamily;
            }
            f.useSystemFont = this._isSystemFontUsed;
            f.lineHeight = this.lineHeight;
            f.enableBold = h && h.bold;
            f.enableItalics = h && h.italic;
            if (h && h.italic) {
              b.skewX = 12;
            }
            f.enableUnderline = h && h.underline;
            if (h && h.outline) {
              var i = b.getComponent(cc.LabelOutline);
              if (!i) {
                i = b.addComponent(cc.LabelOutline);
              }
              i.color = this._convertLiteralColorValue(h.outline.color);
              i.width = h.outline.width;
            }
            if (h && h.size) {
              f.fontSize = h.size;
            } else {
              f.fontSize = this.fontSize;
            }
            if (c !== null) {
              if (typeof c != "string") {
                c = "" + c;
              }
              f.string = c;
            }
            if (d) {
              f._forceUpdateRenderData();
            }
            if (h && h.event) {
              if (h.event.click) {
                b._clickHandler = h.event.click;
              }
              if (h.event.param) {
                b._clickParam = h.event.param;
              } else {
                b._clickParam = "";
              }
            } else {
              b._clickHandler = null;
            }
          }
        },
        onDestroy: function () {
          for (var a = 0; a < this._labelSegments.length; ++a) {
            this._labelSegments[a].removeFromParent();
            c.put(this._labelSegments[a]);
          }
        }
      });
      cc.RichText = d.exports = i;
    }, {
      "../platform/CCMacro": 167,
      "../platform/js": 183,
      "../utils/html-text-parser": 234,
      "../utils/text-utils": 243
    }],
    111: [function (a, b) {
      "use strict";
  
      var d = a("./CCWidget");
      var f = a("../base-ui/CCWidgetManager");
      var c = cc.Class({
        name: "cc.SafeArea",
        extends: a("./CCComponent"),
        editor: false,
        onEnable: function () {
          this.updateArea();
          cc.view.on("canvas-resize", this.updateArea, this);
        },
        onDisable: function () {
          cc.view.off("canvas-resize", this.updateArea, this);
        },
        updateArea: function () {
          var b = this.node.getComponent(d);
          if (b) {
            b.updateAlignment();
            var g = this.node.position;
            var e = this.node.getAnchorPoint();
            b.isAlignTop = b.isAlignBottom = b.isAlignLeft = b.isAlignRight = true;
            var i = cc.winSize.width;
            var j = cc.winSize.height;
            var a = cc.sys.getSafeAreaRect();
            b.top = j - a.y - a.height;
            b.bottom = a.y;
            b.left = a.x;
            b.right = i - a.x - a.width;
            b.updateAlignment();
            var k = this.node.position;
            var c = e.x - (k.x - g.x) / this.node.width;
            var l = e.y - (k.y - g.y) / this.node.height;
            this.node.setAnchorPoint(c, l);
            f.add(b);
          }
        }
      });
      cc.SafeArea = b.exports = c;
    }, {
      "../base-ui/CCWidgetManager": 85,
      "./CCComponent": 100,
      "./CCWidget": 120
    }],
    112: [function (a, b) {
      "use strict";
  
      var d = a("../utils/misc");
      a("./CCComponent");
      var g = cc.Enum({
        HORIZONTAL: 0,
        VERTICAL: 1
      });
      var c = cc.Class({
        name: "cc.Scrollbar",
        extends: a("./CCComponent"),
        editor: false,
        properties: {
          _scrollView: null,
          _touching: false,
          _autoHideRemainingTime: {
            default: 0,
            serializable: false
          },
          _opacity: 255,
          handle: {
            default: null,
            type: cc.Sprite,
            tooltip: false,
            notify: function () {
              this._onScroll(cc.v2(0, 0));
            },
            animatable: false
          },
          direction: {
            default: g.HORIZONTAL,
            type: g,
            tooltip: false,
            notify: function () {
              this._onScroll(cc.v2(0, 0));
            },
            animatable: false
          },
          enableAutoHide: {
            default: true,
            animatable: false,
            tooltip: false
          },
          autoHideTime: {
            default: 1,
            animatable: false,
            tooltip: false
          }
        },
        statics: {
          Direction: g
        },
        setTargetScrollView: function (a) {
          this._scrollView = a;
        },
        _convertToScrollViewSpace: function (a) {
          var b = this._scrollView.node;
          var c = a.convertToWorldSpaceAR(cc.v2(-a.anchorX * a.width, -a.anchorY * a.height));
          var d = b.convertToNodeSpaceAR(c);
          d.x += b.anchorX * b.width;
          d.y += b.anchorY * b.height;
          return d;
        },
        _setOpacity: function (a) {
          if (this.handle) {
            this.node.opacity = a;
            this.handle.node.opacity = a;
          }
        },
        _onScroll: function (b) {
          if (this._scrollView) {
            var d = this._scrollView.content;
            if (d) {
              var e = d.getContentSize();
              var i = this._scrollView.node.getContentSize();
              var j = this.node.getContentSize();
              if (this._conditionalDisableScrollBar(e, i)) {
                return;
              }
              if (this.enableAutoHide) {
                this._autoHideRemainingTime = this.autoHideTime;
                this._setOpacity(this._opacity);
              }
              var k = 0;
              var m = 0;
              var n = 0;
              var p = 0;
              var q = 0;
              if (this.direction === g.HORIZONTAL) {
                k = e.width;
                m = i.width;
                q = j.width;
                n = b.x;
                p = -this._convertToScrollViewSpace(d).x;
              } else if (this.direction === g.VERTICAL) {
                k = e.height;
                m = i.height;
                q = j.height;
                n = b.y;
                p = -this._convertToScrollViewSpace(d).y;
              }
              var r = this._calculateLength(k, m, q, n);
              var s = this._calculatePosition(k, m, q, p, n, r);
              this._updateLength(r);
              this._updateHanlderPosition(s);
            }
          }
        },
        _updateHanlderPosition: function (a) {
          if (this.handle) {
            var b = this._fixupHandlerPosition();
            this.handle.node.setPosition(a.x + b.x, a.y + b.y);
          }
        },
        _fixupHandlerPosition: function () {
          var b = this.node.getContentSize();
          var c = this.node.getAnchorPoint();
          var d = this.handle.node.getContentSize();
          var e = this.handle.node.parent;
          var f = this.node.convertToWorldSpaceAR(cc.v2(-b.width * c.x, -b.height * c.y));
          var h = e.convertToNodeSpaceAR(f);
          if (this.direction === g.HORIZONTAL) {
            h = cc.v2(h.x, h.y + (b.height - d.height) / 2);
          } else if (this.direction === g.VERTICAL) {
            h = cc.v2(h.x + (b.width - d.width) / 2, h.y);
          }
          this.handle.node.setPosition(h);
          return h;
        },
        _onTouchBegan: function () {
          if (this.enableAutoHide) {
            this._touching = true;
          }
        },
        _conditionalDisableScrollBar: function (a, b) {
          return a.width <= b.width && this.direction === g.HORIZONTAL || a.height <= b.height && this.direction === g.VERTICAL;
        },
        _onTouchEnded: function () {
          if (this.enableAutoHide && (this._touching = false, !(this.autoHideTime <= 0))) {
            if (this._scrollView) {
              var a = this._scrollView.content;
              if (a) {
                var b = a.getContentSize();
                var c = this._scrollView.node.getContentSize();
                if (this._conditionalDisableScrollBar(b, c)) {
                  return;
                }
              }
            }
            this._autoHideRemainingTime = this.autoHideTime;
          }
        },
        _calculateLength: function (a, b, c, d) {
          var e = a;
          if (d) {
            e += (d > 0 ? d : -d) * 20;
          }
          return c * (b / e);
        },
        _calculatePosition: function (b, f, e, i, j, a) {
          var k = b - f;
          if (j) {
            k += Math.abs(j);
          }
          var m = 0;
          if (k) {
            m = i / k;
            m = d.clamp01(m);
          }
          var n = (e - a) * m;
          if (this.direction === g.VERTICAL) {
            return cc.v2(0, n);
          } else {
            return cc.v2(n, 0);
          }
        },
        _updateLength: function (a) {
          if (this.handle) {
            var b = this.handle.node;
            var c = b.getContentSize();
            b.setAnchorPoint(cc.v2(0, 0));
            if (this.direction === g.HORIZONTAL) {
              b.setContentSize(a, c.height);
            } else {
              b.setContentSize(c.width, a);
            }
          }
        },
        _processAutoHide: function (a) {
          if (this.enableAutoHide && !(this._autoHideRemainingTime <= 0) && !this._touching && (this._autoHideRemainingTime -= a, this._autoHideRemainingTime <= this.autoHideTime)) {
            this._autoHideRemainingTime = Math.max(0, this._autoHideRemainingTime);
            var b = this._opacity * (this._autoHideRemainingTime / this.autoHideTime);
            this._setOpacity(b);
          }
        },
        start: function () {
          if (this.enableAutoHide) {
            this._setOpacity(0);
          }
        },
        hide: function () {
          this._autoHideRemainingTime = 0;
          this._setOpacity(0);
        },
        show: function () {
          this._autoHideRemainingTime = this.autoHideTime;
          this._setOpacity(this._opacity);
        },
        update: function (a) {
          this._processAutoHide(a);
        }
      });
      cc.Scrollbar = b.exports = c;
    }, {
      "../utils/misc": 236,
      "./CCComponent": 100
    }],
    113: [function (b, d) {
      "use strict";
  
      var e = b("../CCNode").EventType;
      var f = cc.v2();
      var g = cc.v2();
      function h() {
        return new Date().getMilliseconds();
      }
      var i = cc.Enum({
        SCROLL_TO_TOP: 0,
        SCROLL_TO_BOTTOM: 1,
        SCROLL_TO_LEFT: 2,
        SCROLL_TO_RIGHT: 3,
        SCROLLING: 4,
        BOUNCE_TOP: 5,
        BOUNCE_BOTTOM: 6,
        BOUNCE_LEFT: 7,
        BOUNCE_RIGHT: 8,
        SCROLL_ENDED: 9,
        TOUCH_UP: 10,
        AUTOSCROLL_ENDED_WITH_THRESHOLD: 11,
        SCROLL_BEGAN: 12
      });
      var a = {
        "scroll-to-top": i.SCROLL_TO_TOP,
        "scroll-to-bottom": i.SCROLL_TO_BOTTOM,
        "scroll-to-left": i.SCROLL_TO_LEFT,
        "scroll-to-right": i.SCROLL_TO_RIGHT,
        scrolling: i.SCROLLING,
        "bounce-bottom": i.BOUNCE_BOTTOM,
        "bounce-left": i.BOUNCE_LEFT,
        "bounce-right": i.BOUNCE_RIGHT,
        "bounce-top": i.BOUNCE_TOP,
        "scroll-ended": i.SCROLL_ENDED,
        "touch-up": i.TOUCH_UP,
        "scroll-ended-with-threshold": i.AUTOSCROLL_ENDED_WITH_THRESHOLD,
        "scroll-began": i.SCROLL_BEGAN
      };
      var j = cc.Class({
        name: "cc.ScrollView",
        extends: b("./CCViewGroup"),
        editor: false,
        ctor: function () {
          this._topBoundary = 0;
          this._bottomBoundary = 0;
          this._leftBoundary = 0;
          this._rightBoundary = 0;
          this._touchMoveDisplacements = [];
          this._touchMoveTimeDeltas = [];
          this._touchMovePreviousTimestamp = 0;
          this._touchMoved = false;
          this._autoScrolling = false;
          this._autoScrollAttenuate = false;
          this._autoScrollStartPosition = cc.v2(0, 0);
          this._autoScrollTargetDelta = cc.v2(0, 0);
          this._autoScrollTotalTime = 0;
          this._autoScrollAccumulatedTime = 0;
          this._autoScrollCurrentlyOutOfBoundary = false;
          this._autoScrollBraking = false;
          this._autoScrollBrakingStartPosition = cc.v2(0, 0);
          this._outOfBoundaryAmount = cc.v2(0, 0);
          this._outOfBoundaryAmountDirty = true;
          this._stopMouseWheel = false;
          this._mouseWheelEventElapsedTime = 0;
          this._isScrollEndedWithThresholdEventFired = false;
          this._scrollEventEmitMask = 0;
          this._isBouncing = false;
          this._scrolling = false;
        },
        properties: {
          content: {
            default: undefined,
            type: cc.Node,
            tooltip: false,
            formerlySerializedAs: "content",
            notify: function () {
              this._calculateBoundary();
            }
          },
          horizontal: {
            default: true,
            animatable: false,
            tooltip: false
          },
          vertical: {
            default: true,
            animatable: false,
            tooltip: false
          },
          inertia: {
            default: true,
            tooltip: false
          },
          brake: {
            default: 0.5,
            type: cc.Float,
            range: [0, 1, 0.1],
            tooltip: false
          },
          elastic: {
            default: true,
            animatable: false,
            tooltip: false
          },
          bounceDuration: {
            default: 1,
            range: [0, 10],
            tooltip: false
          },
          horizontalScrollBar: {
            default: undefined,
            type: cc.Scrollbar,
            tooltip: false,
            notify: function () {
              if (this.horizontalScrollBar) {
                this.horizontalScrollBar.setTargetScrollView(this);
                this._updateScrollBar(0);
              }
            },
            animatable: false
          },
          verticalScrollBar: {
            default: undefined,
            type: cc.Scrollbar,
            tooltip: false,
            notify: function () {
              if (this.verticalScrollBar) {
                this.verticalScrollBar.setTargetScrollView(this);
                this._updateScrollBar(0);
              }
            },
            animatable: false
          },
          scrollEvents: {
            default: [],
            type: cc.Component.EventHandler,
            tooltip: false
          },
          cancelInnerEvents: {
            default: true,
            animatable: false,
            tooltip: false
          },
          _view: {
            get: function () {
              if (this.content) {
                return this.content.parent;
              }
            }
          }
        },
        statics: {
          EventType: i
        },
        scrollToBottom: function (a, b) {
          var c = this._calculateMovePercentDelta({
            anchor: cc.v2(0, 0),
            applyToHorizontal: false,
            applyToVertical: true
          });
          if (a) {
            this._startAutoScroll(c, a, b !== false);
          } else {
            this._moveContent(c, true);
          }
        },
        scrollToTop: function (a, b) {
          var c = this._calculateMovePercentDelta({
            anchor: cc.v2(0, 1),
            applyToHorizontal: false,
            applyToVertical: true
          });
          if (a) {
            this._startAutoScroll(c, a, b !== false);
          } else {
            this._moveContent(c);
          }
        },
        scrollToLeft: function (a, b) {
          var c = this._calculateMovePercentDelta({
            anchor: cc.v2(0, 0),
            applyToHorizontal: true,
            applyToVertical: false
          });
          if (a) {
            this._startAutoScroll(c, a, b !== false);
          } else {
            this._moveContent(c);
          }
        },
        scrollToRight: function (a, b) {
          var c = this._calculateMovePercentDelta({
            anchor: cc.v2(1, 0),
            applyToHorizontal: true,
            applyToVertical: false
          });
          if (a) {
            this._startAutoScroll(c, a, b !== false);
          } else {
            this._moveContent(c);
          }
        },
        scrollToTopLeft: function (a, b) {
          var c = this._calculateMovePercentDelta({
            anchor: cc.v2(0, 1),
            applyToHorizontal: true,
            applyToVertical: true
          });
          if (a) {
            this._startAutoScroll(c, a, b !== false);
          } else {
            this._moveContent(c);
          }
        },
        scrollToTopRight: function (a, b) {
          var c = this._calculateMovePercentDelta({
            anchor: cc.v2(1, 1),
            applyToHorizontal: true,
            applyToVertical: true
          });
          if (a) {
            this._startAutoScroll(c, a, b !== false);
          } else {
            this._moveContent(c);
          }
        },
        scrollToBottomLeft: function (a, b) {
          var c = this._calculateMovePercentDelta({
            anchor: cc.v2(0, 0),
            applyToHorizontal: true,
            applyToVertical: true
          });
          if (a) {
            this._startAutoScroll(c, a, b !== false);
          } else {
            this._moveContent(c);
          }
        },
        scrollToBottomRight: function (a, b) {
          var c = this._calculateMovePercentDelta({
            anchor: cc.v2(1, 0),
            applyToHorizontal: true,
            applyToVertical: true
          });
          if (a) {
            this._startAutoScroll(c, a, b !== false);
          } else {
            this._moveContent(c);
          }
        },
        scrollToOffset: function (a, b, c) {
          var d = this.getMaxScrollOffset();
          var e = cc.v2(0, 0);
          if (d.x === 0) {
            e.x = 0;
          } else {
            e.x = a.x / d.x;
          }
          if (d.y === 0) {
            e.y = 1;
          } else {
            e.y = (d.y - a.y) / d.y;
          }
          this.scrollTo(e, b, c);
        },
        getScrollOffset: function () {
          var a = this._getContentTopBoundary() - this._topBoundary;
          var b = this._getContentLeftBoundary() - this._leftBoundary;
          return cc.v2(b, a);
        },
        getMaxScrollOffset: function () {
          var a = this._view.getContentSize();
          var b = this.content.getContentSize();
          var c = b.width - a.width;
          var d = b.height - a.height;
          c = c >= 0 ? c : 0;
          d = d >= 0 ? d : 0;
          return cc.v2(c, d);
        },
        scrollToPercentHorizontal: function (a, b, c) {
          var d = this._calculateMovePercentDelta({
            anchor: cc.v2(a, 0),
            applyToHorizontal: true,
            applyToVertical: false
          });
          if (b) {
            this._startAutoScroll(d, b, c !== false);
          } else {
            this._moveContent(d);
          }
        },
        scrollTo: function (a, b, c) {
          var d = this._calculateMovePercentDelta({
            anchor: cc.v2(a),
            applyToHorizontal: true,
            applyToVertical: true
          });
          if (b) {
            this._startAutoScroll(d, b, c !== false);
          } else {
            this._moveContent(d);
          }
        },
        scrollToPercentVertical: function (a, b, c) {
          var d = this._calculateMovePercentDelta({
            anchor: cc.v2(0, a),
            applyToHorizontal: false,
            applyToVertical: true
          });
          if (b) {
            this._startAutoScroll(d, b, c !== false);
          } else {
            this._moveContent(d);
          }
        },
        stopAutoScroll: function () {
          this._autoScrolling = false;
          this._autoScrollAccumulatedTime = this._autoScrollTotalTime;
        },
        setContentPosition: function (a) {
          if (!a.fuzzyEquals(this.getContentPosition(), 0.0001)) {
            this.content.setPosition(a);
            this._outOfBoundaryAmountDirty = true;
          }
        },
        getContentPosition: function () {
          return this.content.getPosition();
        },
        isScrolling: function () {
          return this._scrolling;
        },
        isAutoScrolling: function () {
          return this._autoScrolling;
        },
        _registerEvent: function () {
          this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this, true);
          this.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this, true);
          this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this, true);
          this.node.on(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this, true);
          this.node.on(cc.Node.EventType.MOUSE_WHEEL, this._onMouseWheel, this, true);
        },
        _unregisterEvent: function () {
          this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this, true);
          this.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this, true);
          this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this, true);
          this.node.off(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this, true);
          this.node.off(cc.Node.EventType.MOUSE_WHEEL, this._onMouseWheel, this, true);
        },
        _onMouseWheel: function (a, b) {
          if (this.enabledInHierarchy && !this.hasNestedViewGroup(a, b)) {
            var c = cc.v2(0, 0);
            var d = -cc.view._scaleY;
            if (this.vertical) {
              c = cc.v2(0, a.getScrollY() * d);
            } else if (this.horizontal) {
              c = cc.v2(a.getScrollY() * d, 0);
            }
            this._mouseWheelEventElapsedTime = 0;
            this._processDeltaMove(c);
            if (!this._stopMouseWheel) {
              this._handlePressLogic();
              this.schedule(this._checkMouseWheel, 1 / 60);
              this._stopMouseWheel = true;
            }
            this._stopPropagationIfTargetIsMe(a);
          }
        },
        _checkMouseWheel: function (a) {
          if (!this._getHowMuchOutOfBoundary().fuzzyEquals(cc.v2(0, 0), 0.0001)) {
            this._processInertiaScroll();
            this.unschedule(this._checkMouseWheel);
            this._dispatchEvent("scroll-ended");
            this._stopMouseWheel = false;
            return;
          }
          this._mouseWheelEventElapsedTime += a;
          if (this._mouseWheelEventElapsedTime > 0.1) {
            this._onScrollBarTouchEnded();
            this.unschedule(this._checkMouseWheel);
            this._dispatchEvent("scroll-ended");
            this._stopMouseWheel = false;
          }
        },
        _calculateMovePercentDelta: function (b) {
          var d = b.anchor;
          var f = b.applyToHorizontal;
          var g = b.applyToVertical;
          this._calculateBoundary();
          d = d.clampf(cc.v2(0, 0), cc.v2(1, 1));
          var h = this._view.getContentSize();
          var i = this.content.getContentSize();
          var j = this._getContentBottomBoundary() - this._bottomBoundary;
          j = -j;
          var k = this._getContentLeftBoundary() - this._leftBoundary;
          k = -k;
          var m = cc.v2(0, 0);
          var c = 0;
          if (f) {
            c = i.width - h.width;
            m.x = k - c * d.x;
          }
          if (g) {
            c = i.height - h.height;
            m.y = j - c * d.y;
          }
          return m;
        },
        _moveContentToTopLeft: function (a) {
          var b = this.content.getContentSize();
          var c = this._getContentBottomBoundary() - this._bottomBoundary;
          c = -c;
          var d = cc.v2(0, 0);
          var e = 0;
          var f = this._getContentLeftBoundary() - this._leftBoundary;
          f = -f;
          if (b.height < a.height) {
            e = b.height - a.height;
            d.y = c - e;
          }
          if (b.width < a.width) {
            e = b.width - a.width;
            d.x = f;
          }
          this._updateScrollBarState();
          this._moveContent(d);
          this._adjustContentOutOfBoundary();
        },
        _calculateBoundary: function () {
          if (this.content) {
            var a = this.content.getComponent(cc.Layout);
            if (a && a.enabledInHierarchy) {
              a.updateLayout();
            }
            var b = this._view.getContentSize();
            var c = b.width * this._view.anchorX;
            var d = b.height * this._view.anchorY;
            this._leftBoundary = -c;
            this._bottomBoundary = -d;
            this._rightBoundary = this._leftBoundary + b.width;
            this._topBoundary = this._bottomBoundary + b.height;
            this._moveContentToTopLeft(b);
          }
        },
        hasNestedViewGroup: function (a, b) {
          if (a.eventPhase === cc.Event.CAPTURING_PHASE) {
            if (b) {
              for (var c = 0; c < b.length; ++c) {
                var d = b[c];
                if (this.node === d) {
                  return !!a.target.getComponent(cc.ViewGroup);
                }
                if (d.getComponent(cc.ViewGroup)) {
                  return true;
                }
              }
            }
            return false;
          }
        },
        _stopPropagationIfTargetIsMe: function (a) {
          if (a.eventPhase === cc.Event.AT_TARGET && a.target === this.node) {
            a.stopPropagation();
          }
        },
        _onTouchBegan: function (a, b) {
          if (this.enabledInHierarchy && !this.hasNestedViewGroup(a, b)) {
            var c = a.touch;
            if (this.content) {
              this._handlePressLogic(c);
            }
            this._touchMoved = false;
            this._stopPropagationIfTargetIsMe(a);
          }
        },
        _onTouchMoved: function (a, b) {
          if (this.enabledInHierarchy && !this.hasNestedViewGroup(a, b)) {
            var c = a.touch;
            if (this.content) {
              this._handleMoveLogic(c);
            }
            if (this.cancelInnerEvents) {
              if (c.getLocation().sub(c.getStartLocation()).mag() > 7 && !this._touchMoved && a.target !== this.node) {
                var d = new cc.Event.EventTouch(a.getTouches(), a.bubbles);
                d.type = cc.Node.EventType.TOUCH_CANCEL;
                d.touch = a.touch;
                d.simulate = true;
                a.target.dispatchEvent(d);
                this._touchMoved = true;
              }
              this._stopPropagationIfTargetIsMe(a);
            }
          }
        },
        _onTouchEnded: function (a, b) {
          if (this.enabledInHierarchy && !this.hasNestedViewGroup(a, b)) {
            this._dispatchEvent("touch-up");
            var c = a.touch;
            if (this.content) {
              this._handleReleaseLogic(c);
            }
            if (this._touchMoved) {
              a.stopPropagation();
            } else {
              this._stopPropagationIfTargetIsMe(a);
            }
          }
        },
        _onTouchCancelled: function (a, b) {
          if (this.enabledInHierarchy && !this.hasNestedViewGroup(a, b)) {
            if (!a.simulate) {
              var c = a.touch;
              if (this.content) {
                this._handleReleaseLogic(c);
              }
            }
            this._stopPropagationIfTargetIsMe(a);
          }
        },
        _processDeltaMove: function (a) {
          this._scrollChildren(a);
          this._gatherTouchMove(a);
        },
        _getLocalAxisAlignDelta: function (a) {
          this.node.convertToNodeSpaceAR(a.getLocation(), f);
          this.node.convertToNodeSpaceAR(a.getPreviousLocation(), g);
          return f.sub(g);
        },
        _handleMoveLogic: function (a) {
          var b = this._getLocalAxisAlignDelta(a);
          this._processDeltaMove(b);
        },
        _scrollChildren: function (a) {
          var b;
          var c = a = this._clampDelta(a);
          if (this.elastic) {
            b = this._getHowMuchOutOfBoundary();
            c.x *= b.x === 0 ? 1 : 0.5;
            c.y *= b.y === 0 ? 1 : 0.5;
          }
          if (!this.elastic) {
            b = this._getHowMuchOutOfBoundary(c);
            c = c.add(b);
          }
          var d = "";
          var f = "";
          if (this.vertical) {
            if (c.y > 0) {
              if (this.content.y - this.content.anchorY * this.content.height + c.y >= this._bottomBoundary) {
                d = "scroll-to-bottom";
              }
            } else if (c.y < 0 && this.content.y - this.content.anchorY * this.content.height + this.content.height + c.y <= this._topBoundary) {
              d = "scroll-to-top";
            }
          }
          if (this.horizontal) {
            if (c.x < 0) {
              if (this.content.x - this.content.anchorX * this.content.width + this.content.width + c.x <= this._rightBoundary) {
                f = "scroll-to-right";
              }
            } else if (c.x > 0 && this.content.x - this.content.anchorX * this.content.width + c.x >= this._leftBoundary) {
              f = "scroll-to-left";
            }
          }
          this._moveContent(c, false);
          if (this.horizontal && c.x !== 0 || this.vertical && c.y !== 0) {
            if (!this._scrolling) {
              this._scrolling = true;
              this._dispatchEvent("scroll-began");
            }
            this._dispatchEvent("scrolling");
          }
          if (d !== "") {
            this._dispatchEvent(d);
          }
          if (f !== "") {
            this._dispatchEvent(f);
          }
        },
        _handlePressLogic: function () {
          if (this._autoScrolling) {
            this._dispatchEvent("scroll-ended");
          }
          this._autoScrolling = false;
          this._isBouncing = false;
          this._touchMovePreviousTimestamp = h();
          this._touchMoveDisplacements.length = 0;
          this._touchMoveTimeDeltas.length = 0;
          this._onScrollBarTouchBegan();
        },
        _clampDelta: function (a) {
          var b = this.content.getContentSize();
          var c = this._view.getContentSize();
          if (b.width < c.width) {
            a.x = 0;
          }
          if (b.height < c.height) {
            a.y = 0;
          }
          return a;
        },
        _gatherTouchMove: function (a) {
          for (a = this._clampDelta(a); this._touchMoveDisplacements.length >= 5;) {
            this._touchMoveDisplacements.shift();
            this._touchMoveTimeDeltas.shift();
          }
          this._touchMoveDisplacements.push(a);
          var b = h();
          this._touchMoveTimeDeltas.push((b - this._touchMovePreviousTimestamp) / 1000);
          this._touchMovePreviousTimestamp = b;
        },
        _startBounceBackIfNeeded: function () {
          if (!this.elastic) {
            return false;
          }
          var a = this._getHowMuchOutOfBoundary();
          if ((a = this._clampDelta(a)).fuzzyEquals(cc.v2(0, 0), 0.0001)) {
            return false;
          }
          var b = Math.max(this.bounceDuration, 0);
          this._startAutoScroll(a, b, true);
          if (!this._isBouncing) {
            if (a.y > 0) {
              this._dispatchEvent("bounce-top");
            }
            if (a.y < 0) {
              this._dispatchEvent("bounce-bottom");
            }
            if (a.x > 0) {
              this._dispatchEvent("bounce-right");
            }
            if (a.x < 0) {
              this._dispatchEvent("bounce-left");
            }
            this._isBouncing = true;
          }
          return true;
        },
        _processInertiaScroll: function () {
          if (!this._startBounceBackIfNeeded() && this.inertia) {
            var a = this._calculateTouchMoveVelocity();
            if (!a.fuzzyEquals(cc.v2(0, 0), 0.0001) && this.brake < 1) {
              this._startInertiaScroll(a);
            }
          }
          this._onScrollBarTouchEnded();
        },
        _handleReleaseLogic: function (a) {
          var b = this._getLocalAxisAlignDelta(a);
          this._gatherTouchMove(b);
          this._processInertiaScroll();
          if (this._scrolling) {
            this._scrolling = false;
            if (!this._autoScrolling) {
              this._dispatchEvent("scroll-ended");
            }
          }
        },
        _isOutOfBoundary: function () {
          return !this._getHowMuchOutOfBoundary().fuzzyEquals(cc.v2(0, 0), 0.0001);
        },
        _isNecessaryAutoScrollBrake: function () {
          if (this._autoScrollBraking) {
            return true;
          }
          if (this._isOutOfBoundary()) {
            if (!this._autoScrollCurrentlyOutOfBoundary) {
              this._autoScrollCurrentlyOutOfBoundary = true;
              this._autoScrollBraking = true;
              this._autoScrollBrakingStartPosition = this.getContentPosition();
              return true;
            }
          } else {
            this._autoScrollCurrentlyOutOfBoundary = false;
          }
          return false;
        },
        getScrollEndedEventTiming: function () {
          return 0.0001;
        },
        _processAutoScrolling: function (b) {
          var d = this._isNecessaryAutoScrollBrake();
          var e = d ? 0.05 : 1;
          this._autoScrollAccumulatedTime += b * (1 / e);
          var f;
          var g = Math.min(1, this._autoScrollAccumulatedTime / this._autoScrollTotalTime);
          if (this._autoScrollAttenuate) {
            f = g;
            g = (f -= 1) * f * f * f * f + 1;
          }
          var i = this._autoScrollStartPosition.add(this._autoScrollTargetDelta.mul(g));
          var j = Math.abs(g - 1) <= 0.0001;
          if (Math.abs(g - 1) <= this.getScrollEndedEventTiming() && !this._isScrollEndedWithThresholdEventFired) {
            this._dispatchEvent("scroll-ended-with-threshold");
            this._isScrollEndedWithThresholdEventFired = true;
          }
          if (this.elastic) {
            var k = i.sub(this._autoScrollBrakingStartPosition);
            if (d) {
              k = k.mul(e);
            }
            i = this._autoScrollBrakingStartPosition.add(k);
          } else {
            var m = i.sub(this.getContentPosition());
            var c = this._getHowMuchOutOfBoundary(m);
            if (!c.fuzzyEquals(cc.v2(0, 0), 0.0001)) {
              i = i.add(c);
              j = true;
            }
          }
          if (j) {
            this._autoScrolling = false;
          }
          var l = i.sub(this.getContentPosition());
          this._moveContent(this._clampDelta(l), j);
          this._dispatchEvent("scrolling");
          if (!this._autoScrolling) {
            this._isBouncing = false;
            this._scrolling = false;
            this._dispatchEvent("scroll-ended");
          }
        },
        _startInertiaScroll: function (a) {
          var b = a.mul(0.7);
          this._startAttenuatingAutoScroll(b, a);
        },
        _calculateAttenuatedFactor: function (a) {
          if (this.brake <= 0) {
            return 1 - this.brake;
          } else {
            return (1 - this.brake) * (1 / (1 + a * 0.000014 + a * a * 8e-9));
          }
        },
        _startAttenuatingAutoScroll: function (b, d) {
          var e = this._calculateAutoScrollTimeByInitalSpeed(d.mag());
          var f = b.normalize();
          var g = this.content.getContentSize();
          var j = this._view.getContentSize();
          var k = g.width - j.width;
          var a = g.height - j.height;
          var m = this._calculateAttenuatedFactor(k);
          var c = this._calculateAttenuatedFactor(a);
          f = cc.v2(f.x * k * (1 - this.brake) * m, f.y * a * c * (1 - this.brake));
          var l = b.mag();
          var h = f.mag() / l;
          f = f.add(b);
          if (this.brake > 0 && h > 7) {
            h = Math.sqrt(h);
            f = b.mul(h).add(b);
          }
          if (this.brake > 0 && h > 3) {
            e *= h = 3;
          }
          if (this.brake === 0 && h > 1) {
            e *= h;
          }
          this._startAutoScroll(f, e, true);
        },
        _calculateAutoScrollTimeByInitalSpeed: function (a) {
          return Math.sqrt(Math.sqrt(a / 5));
        },
        _startAutoScroll: function (a, b, c) {
          var d = this._flattenVectorByDirection(a);
          this._autoScrolling = true;
          this._autoScrollTargetDelta = d;
          this._autoScrollAttenuate = c;
          this._autoScrollStartPosition = this.getContentPosition();
          this._autoScrollTotalTime = b;
          this._autoScrollAccumulatedTime = 0;
          this._autoScrollBraking = false;
          this._isScrollEndedWithThresholdEventFired = false;
          this._autoScrollBrakingStartPosition = cc.v2(0, 0);
          if (!this._getHowMuchOutOfBoundary().fuzzyEquals(cc.v2(0, 0), 0.0001)) {
            this._autoScrollCurrentlyOutOfBoundary = true;
          }
        },
        _calculateTouchMoveVelocity: function () {
          var a = 0;
          if ((a = this._touchMoveTimeDeltas.reduce(function (a, b) {
            return a + b;
          }, a)) <= 0 || a >= 0.5) {
            return cc.v2(0, 0);
          }
          var b = cc.v2(0, 0);
          b = this._touchMoveDisplacements.reduce(function (a, b) {
            return a.add(b);
          }, b);
          return cc.v2(b.x * (1 - this.brake) / a, b.y * (1 - this.brake) / a);
        },
        _flattenVectorByDirection: function (a) {
          var b = a;
          b.x = this.horizontal ? b.x : 0;
          b.y = this.vertical ? b.y : 0;
          return b;
        },
        _moveContent: function (a, b) {
          var c = this._flattenVectorByDirection(a);
          var d = this.getContentPosition().add(c);
          this.setContentPosition(d);
          var e = this._getHowMuchOutOfBoundary();
          this._updateScrollBar(e);
          if (this.elastic && b) {
            this._startBounceBackIfNeeded();
          }
        },
        _getContentLeftBoundary: function () {
          return this.getContentPosition().x - this.content.getAnchorPoint().x * this.content.getContentSize().width;
        },
        _getContentRightBoundary: function () {
          var a = this.content.getContentSize();
          return this._getContentLeftBoundary() + a.width;
        },
        _getContentTopBoundary: function () {
          var a = this.content.getContentSize();
          return this._getContentBottomBoundary() + a.height;
        },
        _getContentBottomBoundary: function () {
          return this.getContentPosition().y - this.content.getAnchorPoint().y * this.content.getContentSize().height;
        },
        _getHowMuchOutOfBoundary: function (a) {
          if ((a = a || cc.v2(0, 0)).fuzzyEquals(cc.v2(0, 0), 0.0001) && !this._outOfBoundaryAmountDirty) {
            return this._outOfBoundaryAmount;
          }
          var b = cc.v2(0, 0);
          if (this._getContentLeftBoundary() + a.x > this._leftBoundary) {
            b.x = this._leftBoundary - (this._getContentLeftBoundary() + a.x);
          } else if (this._getContentRightBoundary() + a.x < this._rightBoundary) {
            b.x = this._rightBoundary - (this._getContentRightBoundary() + a.x);
          }
          if (this._getContentTopBoundary() + a.y < this._topBoundary) {
            b.y = this._topBoundary - (this._getContentTopBoundary() + a.y);
          } else if (this._getContentBottomBoundary() + a.y > this._bottomBoundary) {
            b.y = this._bottomBoundary - (this._getContentBottomBoundary() + a.y);
          }
          if (a.fuzzyEquals(cc.v2(0, 0), 0.0001)) {
            this._outOfBoundaryAmount = b;
            this._outOfBoundaryAmountDirty = false;
          }
          return this._clampDelta(b);
        },
        _updateScrollBarState: function () {
          if (this.content) {
            var a = this.content.getContentSize();
            var b = this._view.getContentSize();
            if (this.verticalScrollBar) {
              if (a.height < b.height) {
                this.verticalScrollBar.hide();
              } else {
                this.verticalScrollBar.show();
              }
            }
            if (this.horizontalScrollBar) {
              if (a.width < b.width) {
                this.horizontalScrollBar.hide();
              } else {
                this.horizontalScrollBar.show();
              }
            }
          }
        },
        _updateScrollBar: function (a) {
          if (this.horizontalScrollBar) {
            this.horizontalScrollBar._onScroll(a);
          }
          if (this.verticalScrollBar) {
            this.verticalScrollBar._onScroll(a);
          }
        },
        _onScrollBarTouchBegan: function () {
          if (this.horizontalScrollBar) {
            this.horizontalScrollBar._onTouchBegan();
          }
          if (this.verticalScrollBar) {
            this.verticalScrollBar._onTouchBegan();
          }
        },
        _onScrollBarTouchEnded: function () {
          if (this.horizontalScrollBar) {
            this.horizontalScrollBar._onTouchEnded();
          }
          if (this.verticalScrollBar) {
            this.verticalScrollBar._onTouchEnded();
          }
        },
        _dispatchEvent: function (b) {
          if (b === "scroll-ended") {
            this._scrollEventEmitMask = 0;
          } else if (b === "scroll-to-top" || b === "scroll-to-bottom" || b === "scroll-to-left" || b === "scroll-to-right") {
            var c = 1 << a[b];
            if (this._scrollEventEmitMask & c) {
              return;
            }
            this._scrollEventEmitMask |= c;
          }
          cc.Component.EventHandler.emitEvents(this.scrollEvents, this, a[b]);
          this.node.emit(b, this);
        },
        _adjustContentOutOfBoundary: function () {
          this._outOfBoundaryAmountDirty = true;
          if (this._isOutOfBoundary()) {
            var a = this._getHowMuchOutOfBoundary(cc.v2(0, 0));
            var b = this.getContentPosition().add(a);
            if (this.content) {
              this.content.setPosition(b);
              this._updateScrollBar(0);
            }
          }
        },
        start: function () {
          this._calculateBoundary();
          if (this.content) {
            cc.director.once(cc.Director.EVENT_BEFORE_DRAW, this._adjustContentOutOfBoundary, this);
          }
        },
        _hideScrollbar: function () {
          if (this.horizontalScrollBar) {
            this.horizontalScrollBar.hide();
          }
          if (this.verticalScrollBar) {
            this.verticalScrollBar.hide();
          }
        },
        onDisable: function () {
          this._unregisterEvent();
          if (this.content) {
            this.content.off(e.SIZE_CHANGED, this._calculateBoundary, this);
            this.content.off(e.SCALE_CHANGED, this._calculateBoundary, this);
            if (this._view) {
              this._view.off(e.POSITION_CHANGED, this._calculateBoundary, this);
              this._view.off(e.SCALE_CHANGED, this._calculateBoundary, this);
              this._view.off(e.SIZE_CHANGED, this._calculateBoundary, this);
            }
          }
          this._hideScrollbar();
          this.stopAutoScroll();
        },
        onEnable: function () {
          this._registerEvent();
          if (this.content) {
            this.content.on(e.SIZE_CHANGED, this._calculateBoundary, this);
            this.content.on(e.SCALE_CHANGED, this._calculateBoundary, this);
            if (this._view) {
              this._view.on(e.POSITION_CHANGED, this._calculateBoundary, this);
              this._view.on(e.SCALE_CHANGED, this._calculateBoundary, this);
              this._view.on(e.SIZE_CHANGED, this._calculateBoundary, this);
            }
          }
          this._updateScrollBarState();
        },
        update: function (a) {
          if (this._autoScrolling) {
            this._processAutoScrolling(a);
          }
        }
      });
      cc.ScrollView = d.exports = j;
    }, {
      "../CCNode": 26,
      "./CCViewGroup": 119
    }],
    114: [function (a, b) {
      "use strict";
  
      var c = a("../utils/misc");
      var d = a("./CCComponent");
      var f = cc.Enum({
        Horizontal: 0,
        Vertical: 1
      });
      var e = cc.Class({
        name: "cc.Slider",
        extends: d,
        editor: false,
        ctor: function () {
          this._offset = cc.v2();
          this._touchHandle = false;
          this._dragging = false;
        },
        properties: {
          handle: {
            default: null,
            type: cc.Button,
            tooltip: false,
            notify: function () {}
          },
          direction: {
            default: f.Horizontal,
            type: f,
            tooltip: false
          },
          progress: {
            default: 0.5,
            type: cc.Float,
            range: [0, 1, 0.1],
            slide: true,
            tooltip: false,
            notify: function () {
              this._updateHandlePosition();
            }
          },
          slideEvents: {
            default: [],
            type: cc.Component.EventHandler,
            tooltip: false
          }
        },
        statics: {
          Direction: f
        },
        __preload: function () {
          this._updateHandlePosition();
        },
        onEnable: function () {
          this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
          this.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
          this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
          this.node.on(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this);
          if (this.handle && this.handle.isValid) {
            this.handle.node.on(cc.Node.EventType.TOUCH_START, this._onHandleDragStart, this);
            this.handle.node.on(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
            this.handle.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
          }
        },
        onDisable: function () {
          this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
          this.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
          this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
          this.node.off(cc.Node.EventType.TOUCH_CANCEL, this._onTouchCancelled, this);
          if (this.handle && this.handle.isValid) {
            this.handle.node.off(cc.Node.EventType.TOUCH_START, this._onHandleDragStart, this);
            this.handle.node.off(cc.Node.EventType.TOUCH_MOVE, this._onTouchMoved, this);
            this.handle.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
          }
        },
        _onHandleDragStart: function (a) {
          this._dragging = true;
          this._touchHandle = true;
          this._offset = this.handle.node.convertToNodeSpaceAR(a.touch.getLocation());
          a.stopPropagation();
        },
        _onTouchBegan: function (a) {
          if (this.handle) {
            this._dragging = true;
            if (!this._touchHandle) {
              this._handleSliderLogic(a.touch);
            }
            a.stopPropagation();
          }
        },
        _onTouchMoved: function (a) {
          if (this._dragging) {
            this._handleSliderLogic(a.touch);
            a.stopPropagation();
          }
        },
        _onTouchEnded: function (a) {
          this._dragging = false;
          this._touchHandle = false;
          this._offset = cc.v2();
          a.stopPropagation();
        },
        _onTouchCancelled: function (a) {
          this._dragging = false;
          a.stopPropagation();
        },
        _handleSliderLogic: function (a) {
          this._updateProgress(a);
          this._emitSlideEvent();
        },
        _emitSlideEvent: function () {
          cc.Component.EventHandler.emitEvents(this.slideEvents, this);
          this.node.emit("slide", this);
        },
        _updateProgress: function (a) {
          if (this.handle) {
            var b = this.node;
            var d = b.convertToNodeSpaceAR(a.getLocation());
            if (this.direction === f.Horizontal) {
              this.progress = c.clamp01((d.x - this._offset.x + b.anchorX * b.width) / b.width);
            } else {
              this.progress = c.clamp01((d.y - this._offset.y + b.anchorY * b.height) / b.height);
            }
          }
        },
        _updateHandlePosition: function () {
          if (this.handle) {
            var a;
            a = this.direction === f.Horizontal ? cc.v2(-this.node.width * this.node.anchorX + this.progress * this.node.width, 0) : cc.v2(0, -this.node.height * this.node.anchorY + this.progress * this.node.height);
            var b = this.node.convertToWorldSpaceAR(a);
            this.handle.node.position = this.handle.node.parent.convertToNodeSpaceAR(b);
          }
        }
      });
      cc.Slider = b.exports = e;
    }, {
      "../utils/misc": 236,
      "./CCComponent": 100
    }],
    115: [function (b, d) {
      "use strict";
  
      var e = b("../utils/misc");
      b("../CCNode").EventType;
      var f = b("./CCRenderComponent");
      var g = b("../utils/blend-func");
      var h = cc.Enum({
        SIMPLE: 0,
        SLICED: 1,
        TILED: 2,
        FILLED: 3,
        MESH: 4
      });
      var i = cc.Enum({
        HORIZONTAL: 0,
        VERTICAL: 1,
        RADIAL: 2
      });
      var a = cc.Enum({
        CUSTOM: 0,
        TRIMMED: 1,
        RAW: 2
      });
      var j = cc.Enum({
        NORMAL: 0,
        GRAY: 1
      });
      var c = cc.Class({
        name: "cc.Sprite",
        extends: f,
        mixins: [g],
        editor: false,
        properties: {
          _spriteFrame: {
            default: null,
            type: cc.SpriteFrame
          },
          _type: h.SIMPLE,
          _sizeMode: a.TRIMMED,
          _fillType: 0,
          _fillCenter: cc.v2(0, 0),
          _fillStart: 0,
          _fillRange: 0,
          _isTrimmedMode: true,
          _atlas: {
            default: null,
            type: cc.SpriteAtlas,
            tooltip: false,
            editorOnly: true,
            visible: true,
            animatable: false
          },
          spriteFrame: {
            get: function () {
              return this._spriteFrame;
            },
            set: function (a) {
              var b = this._spriteFrame;
              if (b !== a) {
                this._spriteFrame = a;
                this._applySpriteFrame(b);
              }
            },
            type: cc.SpriteFrame
          },
          type: {
            get: function () {
              return this._type;
            },
            set: function (a) {
              if (this._type !== a) {
                this._type = a;
                this.setVertsDirty();
                this._resetAssembler();
              }
            },
            type: h,
            animatable: false,
            tooltip: false
          },
          fillType: {
            get: function () {
              return this._fillType;
            },
            set: function (a) {
              if (a !== this._fillType) {
                this._fillType = a;
                this.setVertsDirty();
                this._resetAssembler();
              }
            },
            type: i,
            tooltip: false
          },
          fillCenter: {
            get: function () {
              return this._fillCenter;
            },
            set: function (a) {
              this._fillCenter.x = a.x;
              this._fillCenter.y = a.y;
              if (this._type === h.FILLED) {
                this.setVertsDirty();
              }
            },
            tooltip: false
          },
          fillStart: {
            get: function () {
              return this._fillStart;
            },
            set: function (a) {
              this._fillStart = e.clampf(a, -1, 1);
              if (this._type === h.FILLED) {
                this.setVertsDirty();
              }
            },
            tooltip: false
          },
          fillRange: {
            get: function () {
              return this._fillRange;
            },
            set: function (a) {
              this._fillRange = e.clampf(a, -1, 1);
              if (this._type === h.FILLED) {
                this.setVertsDirty();
              }
            },
            tooltip: false
          },
          trim: {
            get: function () {
              return this._isTrimmedMode;
            },
            set: function (a) {
              if (this._isTrimmedMode !== a) {
                this._isTrimmedMode = a;
                if (!(this._type !== h.SIMPLE && this._type !== h.MESH)) {
                  this.setVertsDirty();
                }
              }
            },
            animatable: false,
            tooltip: false
          },
          sizeMode: {
            get: function () {
              return this._sizeMode;
            },
            set: function (b) {
              this._sizeMode = b;
              if (b !== a.CUSTOM) {
                this._applySpriteSize();
              }
            },
            animatable: false,
            type: a,
            tooltip: false
          }
        },
        statics: {
          FillType: i,
          Type: h,
          SizeMode: a,
          State: j
        },
        setVisible: function (a) {
          this.enabled = a;
        },
        setState: function () {},
        getState: function () {},
        __preload: function () {
          this._super();
          this._applySpriteFrame();
        },
        onEnable: function () {
          this._super();
          this._validateRender();
          if (this._spriteFrame && this._spriteFrame.isValid) {
            this._spriteFrame.ensureLoadTexture();
          }
          this.node.on(cc.Node.EventType.SIZE_CHANGED, this.setVertsDirty, this);
          this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this.setVertsDirty, this);
        },
        onDisable: function () {
          this._super();
          this.node.off(cc.Node.EventType.SIZE_CHANGED, this.setVertsDirty, this);
          this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this.setVertsDirty, this);
        },
        onRestore: false,
        _updateMaterial: function () {
          var a = null;
          if (this._spriteFrame) {
            a = this._spriteFrame.getTexture();
          }
          var b = this.getMaterial(0);
          if (b) {
            var c = b.getDefine("USE_TEXTURE");
            if (!(c === undefined || c)) {
              b.define("USE_TEXTURE", true);
            }
            var d = a && a.getImpl();
            if (b.getProperty("texture") !== d) {
              b.setProperty("texture", a);
            }
          }
          g.prototype._updateMaterial.call(this);
        },
        _applyAtlas: false,
        _validateRender: function () {
          var a = this._spriteFrame;
          if (!(this._materials[0] && a && a.textureLoaded())) {
            this.disableRender();
          }
        },
        _applySpriteSize: function () {
          if (this.isValid && this._spriteFrame && this._spriteFrame.isValid) {
            if (a.RAW === this._sizeMode) {
              var b = this._spriteFrame._originalSize;
              this.node.setContentSize(b);
            } else if (a.TRIMMED === this._sizeMode) {
              var c = this._spriteFrame._rect;
              this.node.setContentSize(c.width, c.height);
            }
            this.setVertsDirty();
          }
        },
        _applySpriteFrame: function (a) {
          if (this.isValid) {
            var b = a && a.isValid && a.getTexture();
            if (b && !b.loaded) {
              a.off("load", this._applySpriteSize, this);
            }
            var c = this._spriteFrame;
            var d = c && c.isValid;
            var e = d && c.getTexture();
            if (b !== e) {
              this._updateMaterial();
            }
            if (e && e.loaded) {
              this._applySpriteSize();
            } else {
              this.disableRender();
              if (d) {
                c.once("load", this._applySpriteSize, this);
              }
            }
          }
        }
      });
      cc.Sprite = d.exports = c;
    }, {
      "../CCNode": 26,
      "../utils/blend-func": 230,
      "../utils/misc": 236,
      "./CCRenderComponent": 109
    }],
    116: [function (a, b) {
      "use strict";
  
      var c = a("../utils/gray-sprite-state");
      var d = cc.Class({
        name: "cc.Toggle",
        extends: a("./CCButton"),
        mixins: [c],
        editor: false,
        properties: {
          _N$isChecked: true,
          isChecked: {
            get: function () {
              return this._N$isChecked;
            },
            set: function (a) {
              if (a !== this._N$isChecked) {
                var b = this.toggleGroup || this._toggleContainer;
                if (!(b && b.enabled && this._N$isChecked && !b.allowSwitchOff)) {
                  this._N$isChecked = a;
                  this._updateCheckMark();
                  if (b && b.enabled) {
                    b.updateToggles(this);
                  }
                  if (cc.Toggle._triggerEventInScript_isChecked) {
                    this._emitToggleEvents();
                  }
                }
              }
            },
            tooltip: false
          },
          toggleGroup: {
            default: null,
            tooltip: false,
            type: a("./CCToggleGroup")
          },
          checkMark: {
            default: null,
            type: cc.Sprite,
            tooltip: false
          },
          checkEvents: {
            default: [],
            type: cc.Component.EventHandler
          },
          _resizeToTarget: {
            animatable: false,
            set: function (a) {
              if (a) {
                this._resizeNodeToTargetNode();
              }
            }
          }
        },
        statics: {
          _triggerEventInScript_check: false,
          _triggerEventInScript_isChecked: false
        },
        onEnable: function () {
          this._super();
          this._registerToggleEvent();
          if (this.toggleGroup && this.toggleGroup.enabledInHierarchy) {
            this.toggleGroup.addToggle(this);
          }
        },
        onDisable: function () {
          this._super();
          this._unregisterToggleEvent();
          if (this.toggleGroup && this.toggleGroup.enabledInHierarchy) {
            this.toggleGroup.removeToggle(this);
          }
        },
        _hideCheckMark: function () {
          this._N$isChecked = false;
          this._updateCheckMark();
        },
        toggle: function (a) {
          this.isChecked = !this.isChecked;
          if (!(cc.Toggle._triggerEventInScript_isChecked || !cc.Toggle._triggerEventInScript_check && !a)) {
            this._emitToggleEvents();
          }
        },
        check: function () {
          this.isChecked = true;
          if (!cc.Toggle._triggerEventInScript_isChecked && cc.Toggle._triggerEventInScript_check) {
            this._emitToggleEvents();
          }
        },
        uncheck: function () {
          this.isChecked = false;
          if (!cc.Toggle._triggerEventInScript_isChecked && cc.Toggle._triggerEventInScript_check) {
            this._emitToggleEvents();
          }
        },
        _updateCheckMark: function () {
          if (this.checkMark) {
            this.checkMark.node.active = !!this.isChecked;
          }
        },
        _updateDisabledState: function () {
          this._super();
          if (this.enableAutoGrayEffect && this.checkMark) {
            var a = !this.interactable;
            this._switchGrayMaterial(a, this.checkMark);
          }
        },
        _registerToggleEvent: function () {
          this.node.on("click", this.toggle, this);
        },
        _unregisterToggleEvent: function () {
          this.node.off("click", this.toggle, this);
        },
        _emitToggleEvents: function () {
          this.node.emit("toggle", this);
          if (this.checkEvents) {
            cc.Component.EventHandler.emitEvents(this.checkEvents, this);
          }
        }
      });
      cc.Toggle = b.exports = d;
      a("../platform/js").get(d.prototype, "_toggleContainer", function () {
        var a = this.node.parent;
        if (cc.Node.isNode(a)) {
          return a.getComponent(cc.ToggleContainer);
        } else {
          return null;
        }
      });
    }, {
      "../platform/js": 183,
      "../utils/gray-sprite-state": 233,
      "./CCButton": 98,
      "./CCToggleGroup": 118
    }],
    117: [function (a, b) {
      "use strict";
  
      var c = cc.Class({
        name: "cc.ToggleContainer",
        extends: cc.Component,
        editor: false,
        properties: {
          allowSwitchOff: {
            tooltip: false,
            default: false
          },
          checkEvents: {
            default: [],
            type: cc.Component.EventHandler
          }
        },
        updateToggles: function (a) {
          if (this.enabledInHierarchy && a.isChecked) {
            this.toggleItems.forEach(function (b) {
              if (b !== a && b.isChecked && b.enabled) {
                b._hideCheckMark();
              }
            });
            if (this.checkEvents) {
              cc.Component.EventHandler.emitEvents(this.checkEvents, a);
            }
          }
        },
        _allowOnlyOneToggleChecked: function () {
          var a = false;
          this.toggleItems.forEach(function (b) {
            if (a) {
              b._hideCheckMark();
            } else if (b.isChecked) {
              a = true;
            }
          });
          return a;
        },
        _makeAtLeastOneToggleChecked: function () {
          if (!this._allowOnlyOneToggleChecked() && !this.allowSwitchOff) {
            var a = this.toggleItems;
            if (a.length > 0) {
              a[0].check();
            }
          }
        },
        onEnable: function () {
          this._makeAtLeastOneToggleChecked();
          this.node.on("child-added", this._allowOnlyOneToggleChecked, this);
          this.node.on("child-removed", this._makeAtLeastOneToggleChecked, this);
        },
        onDisable: function () {
          this.node.off("child-added", this._allowOnlyOneToggleChecked, this);
          this.node.off("child-removed", this._makeAtLeastOneToggleChecked, this);
        }
      });
      a("../platform/js").get(c.prototype, "toggleItems", function () {
        return this.node._children.map(function (a) {
          return a.getComponent(cc.Toggle);
        }).filter(Boolean);
      });
      cc.ToggleContainer = b.exports = c;
    }, {
      "../platform/js": 183
    }],
    118: [function (a, b) {
      "use strict";
  
      var c = cc.Class({
        name: "cc.ToggleGroup",
        extends: cc.Component,
        ctor: function () {
          this._toggleItems = [];
        },
        editor: false,
        properties: {
          allowSwitchOff: {
            tooltip: false,
            default: false
          },
          toggleItems: {
            get: function () {
              return this._toggleItems;
            }
          }
        },
        updateToggles: function (a) {
          if (this.enabledInHierarchy) {
            this._toggleItems.forEach(function (b) {
              if (a.isChecked && b !== a && b.isChecked && b.enabled) {
                b._hideCheckMark();
              }
            });
          }
        },
        addToggle: function (a) {
          if (this._toggleItems.indexOf(a) === -1) {
            this._toggleItems.push(a);
          }
          this._allowOnlyOneToggleChecked();
        },
        removeToggle: function (a) {
          var b = this._toggleItems.indexOf(a);
          if (b > -1) {
            this._toggleItems.splice(b, 1);
          }
          this._makeAtLeastOneToggleChecked();
        },
        _allowOnlyOneToggleChecked: function () {
          var a = false;
          this._toggleItems.forEach(function (b) {
            if (a && b.enabled) {
              b._hideCheckMark();
            }
            if (b.isChecked && b.enabled) {
              a = true;
            }
          });
          return a;
        },
        _makeAtLeastOneToggleChecked: function () {
          if (!(this._allowOnlyOneToggleChecked() || this.allowSwitchOff)) {
            if (this._toggleItems.length > 0) {
              this._toggleItems[0].isChecked = true;
            }
          }
        },
        start: function () {
          this._makeAtLeastOneToggleChecked();
        }
      });
      var d = a("../platform/js");
      var e = false;
      d.get(cc, "ToggleGroup", function () {
        if (!e) {
          e = true;
        }
        return c;
      });
      b.exports = c;
    }, {
      "../platform/js": 183
    }],
    119: [function (a, b) {
      "use strict";
  
      var c = cc.Class({
        name: "cc.ViewGroup",
        extends: a("./CCComponent")
      });
      cc.ViewGroup = b.exports = c;
    }, {
      "./CCComponent": 100
    }],
    120: [function (b, g) {
      "use strict";
  
      var e = b("../base-ui/CCWidgetManager");
      var i = e.AlignMode;
      var j = e._AlignFlags;
      var k = j.TOP;
      var m = j.MID;
      var a = j.BOT;
      var n = j.LEFT;
      var c = j.CENTER;
      var l = j.RIGHT;
      var h = k | a;
      var o = n | l;
      var f = cc.Class({
        name: "cc.Widget",
        extends: b("./CCComponent"),
        editor: false,
        properties: {
          target: {
            get: function () {
              return this._target;
            },
            set: function (a) {
              this._target = a;
            },
            type: cc.Node,
            tooltip: false
          },
          isAlignTop: {
            get: function () {
              return (this._alignFlags & k) > 0;
            },
            set: function (a) {
              this._setAlign(k, a);
            },
            animatable: false,
            tooltip: false
          },
          isAlignVerticalCenter: {
            get: function () {
              return (this._alignFlags & m) > 0;
            },
            set: function (a) {
              if (a) {
                this.isAlignTop = false;
                this.isAlignBottom = false;
                this._alignFlags |= m;
              } else {
                this._alignFlags &= ~m;
              }
            },
            animatable: false,
            tooltip: false
          },
          isAlignBottom: {
            get: function () {
              return (this._alignFlags & a) > 0;
            },
            set: function (b) {
              this._setAlign(a, b);
            },
            animatable: false,
            tooltip: false
          },
          isAlignLeft: {
            get: function () {
              return (this._alignFlags & n) > 0;
            },
            set: function (a) {
              this._setAlign(n, a);
            },
            animatable: false,
            tooltip: false
          },
          isAlignHorizontalCenter: {
            get: function () {
              return (this._alignFlags & c) > 0;
            },
            set: function (a) {
              if (a) {
                this.isAlignLeft = false;
                this.isAlignRight = false;
                this._alignFlags |= c;
              } else {
                this._alignFlags &= ~c;
              }
            },
            animatable: false,
            tooltip: false
          },
          isAlignRight: {
            get: function () {
              return (this._alignFlags & l) > 0;
            },
            set: function (a) {
              this._setAlign(l, a);
            },
            animatable: false,
            tooltip: false
          },
          isStretchWidth: {
            get: function () {
              return (this._alignFlags & o) === o;
            },
            visible: false
          },
          isStretchHeight: {
            get: function () {
              return (this._alignFlags & h) === h;
            },
            visible: false
          },
          top: {
            get: function () {
              return this._top;
            },
            set: function (a) {
              this._top = a;
            },
            tooltip: false
          },
          bottom: {
            get: function () {
              return this._bottom;
            },
            set: function (a) {
              this._bottom = a;
            },
            tooltip: false
          },
          left: {
            get: function () {
              return this._left;
            },
            set: function (a) {
              this._left = a;
            },
            tooltip: false
          },
          right: {
            get: function () {
              return this._right;
            },
            set: function (a) {
              this._right = a;
            },
            tooltip: false
          },
          horizontalCenter: {
            get: function () {
              return this._horizontalCenter;
            },
            set: function (a) {
              this._horizontalCenter = a;
            },
            tooltip: false
          },
          verticalCenter: {
            get: function () {
              return this._verticalCenter;
            },
            set: function (a) {
              this._verticalCenter = a;
            },
            tooltip: false
          },
          isAbsoluteHorizontalCenter: {
            get: function () {
              return this._isAbsHorizontalCenter;
            },
            set: function (a) {
              this._isAbsHorizontalCenter = a;
            },
            animatable: false
          },
          isAbsoluteVerticalCenter: {
            get: function () {
              return this._isAbsVerticalCenter;
            },
            set: function (a) {
              this._isAbsVerticalCenter = a;
            },
            animatable: false
          },
          isAbsoluteTop: {
            get: function () {
              return this._isAbsTop;
            },
            set: function (a) {
              this._isAbsTop = a;
            },
            animatable: false
          },
          isAbsoluteBottom: {
            get: function () {
              return this._isAbsBottom;
            },
            set: function (a) {
              this._isAbsBottom = a;
            },
            animatable: false
          },
          isAbsoluteLeft: {
            get: function () {
              return this._isAbsLeft;
            },
            set: function (a) {
              this._isAbsLeft = a;
            },
            animatable: false
          },
          isAbsoluteRight: {
            get: function () {
              return this._isAbsRight;
            },
            set: function (a) {
              this._isAbsRight = a;
            },
            animatable: false
          },
          alignMode: {
            default: i.ON_WINDOW_RESIZE,
            type: i,
            tooltip: false
          },
          _wasAlignOnce: {
            default: undefined,
            formerlySerializedAs: "isAlignOnce"
          },
          _target: null,
          _alignFlags: 0,
          _left: 0,
          _right: 0,
          _top: 0,
          _bottom: 0,
          _verticalCenter: 0,
          _horizontalCenter: 0,
          _isAbsLeft: true,
          _isAbsRight: true,
          _isAbsTop: true,
          _isAbsBottom: true,
          _isAbsHorizontalCenter: true,
          _isAbsVerticalCenter: true,
          _originalWidth: 0,
          _originalHeight: 0
        },
        statics: {
          AlignMode: i
        },
        onLoad: function () {
          if (this._wasAlignOnce !== undefined) {
            this.alignMode = this._wasAlignOnce ? i.ONCE : i.ALWAYS;
            this._wasAlignOnce = undefined;
          }
        },
        onEnable: function () {
          e.add(this);
        },
        onDisable: function () {
          e.remove(this);
        },
        _validateTargetInDEV: false,
        _setAlign: function (a, b) {
          if (b !== (this._alignFlags & a) > 0) {
            var c = (a & o) > 0;
            if (b) {
              this._alignFlags |= a;
              if (c) {
                this.isAlignHorizontalCenter = false;
                if (this.isStretchWidth) {
                  this._originalWidth = this.node.width;
                }
              } else {
                this.isAlignVerticalCenter = false;
                if (this.isStretchHeight) {
                  this._originalHeight = this.node.height;
                }
              }
            } else {
              if (c) {
                if (this.isStretchWidth) {
                  this.node.width = this._originalWidth;
                }
              } else if (this.isStretchHeight) {
                this.node.height = this._originalHeight;
              }
              this._alignFlags &= ~a;
            }
          }
        },
        updateAlignment: function () {
          e.updateAlignment(this.node);
        }
      });
      Object.defineProperty(f.prototype, "isAlignOnce", {
        get: function () {
          return this.alignMode === i.ONCE;
        },
        set: function (a) {
          this.alignMode = a ? i.ONCE : i.ALWAYS;
        }
      });
      cc.Widget = g.exports = f;
    }, {
      "../base-ui/CCWidgetManager": 85,
      "./CCComponent": 100
    }],
    121: [function (a, b) {
      "use strict";
  
      var c = a("./CCComponent");
      var d = cc.Class({
        name: "cc.SubContextView",
        extends: c,
        editor: false,
        properties: {
          _firstlyEnabled: true,
          _fps: 60,
          fps: {
            get: function () {
              return this._fps;
            },
            set: function (a) {
              if (this._fps !== a) {
                this._fps = a;
                this._updateInterval = 1 / a;
                this._updateSubContextFrameRate();
              }
            },
            tooltip: false
          }
        },
        ctor: function () {
          this._sprite = null;
          this._tex = new cc.Texture2D();
          this._tex._packable = false;
          this._context = null;
          this._updatedTime = performance.now();
          this._updateInterval = 0;
        },
        onLoad: function () {
          if (window.__globalAdapter && __globalAdapter.getOpenDataContext) {
            this._updateInterval = 1000 / this._fps;
            this._context = __globalAdapter.getOpenDataContext();
            this.reset();
            var a = this._context.canvas;
            this._tex.setPremultiplyAlpha(true);
            this._tex.initWithElement(a);
            this._tex._packable = false;
            this._sprite = this.node.getComponent(cc.Sprite);
            if (!this._sprite) {
              this._sprite = this.node.addComponent(cc.Sprite);
              this._sprite.srcBlendFactor = cc.macro.BlendFactor.ONE;
            }
            this._sprite.spriteFrame = new cc.SpriteFrame(this._tex);
          } else {
            this.enabled = false;
          }
        },
        reset: function () {
          if (this._context) {
            this.updateSubContextViewport();
            var a = this._context.canvas;
            if (a) {
              a.width = this.node.width;
              a.height = this.node.height;
            }
          }
        },
        onEnable: function () {
          if (this._firstlyEnabled && this._context) {
            this._context.postMessage({
              fromEngine: true,
              event: "boot"
            });
            this._firstlyEnabled = false;
          } else {
            this._runSubContextMainLoop();
          }
          this._registerNodeEvent();
          this._updateSubContextFrameRate();
          this.updateSubContextViewport();
        },
        onDisable: function () {
          this._unregisterNodeEvent();
          this._stopSubContextMainLoop();
        },
        update: function (a) {
          if (a === undefined) {
            if (this._context) {
              this._context.postMessage({
                fromEngine: true,
                event: "step"
              });
            }
            this._updateSubContextTexture();
            return;
          }
          if (performance.now() - this._updatedTime >= this._updateInterval) {
            this._updatedTime += this._updateInterval;
            this._updateSubContextTexture();
          }
        },
        _updateSubContextTexture: function () {
          if (this._tex && this._context) {
            this._tex.initWithElement(this._context.canvas);
            this._tex._packable = false;
            this._sprite._activateMaterial();
          }
        },
        updateSubContextViewport: function () {
          if (this._context) {
            var a = this.node.getBoundingBoxToWorld();
            var b = cc.view._scaleX;
            var c = cc.view._scaleY;
            this._context.postMessage({
              fromEngine: true,
              event: "viewport",
              x: a.x * b + cc.view._viewportRect.x,
              y: a.y * c + cc.view._viewportRect.y,
              width: a.width * b,
              height: a.height * c
            });
          }
        },
        _registerNodeEvent: function () {
          this.node.on("position-changed", this.updateSubContextViewport, this);
          this.node.on("scale-changed", this.updateSubContextViewport, this);
          this.node.on("size-changed", this.updateSubContextViewport, this);
        },
        _unregisterNodeEvent: function () {
          this.node.off("position-changed", this.updateSubContextViewport, this);
          this.node.off("scale-changed", this.updateSubContextViewport, this);
          this.node.off("size-changed", this.updateSubContextViewport, this);
        },
        _runSubContextMainLoop: function () {
          if (this._context) {
            this._context.postMessage({
              fromEngine: true,
              event: "mainLoop",
              value: true
            });
          }
        },
        _stopSubContextMainLoop: function () {
          if (this._context) {
            this._context.postMessage({
              fromEngine: true,
              event: "mainLoop",
              value: false
            });
          }
        },
        _updateSubContextFrameRate: function () {
          if (this._context) {
            this._context.postMessage({
              fromEngine: true,
              event: "frameRate",
              value: this._fps
            });
          }
        }
      });
      cc.SubContextView = b.exports = d;
      cc.WXSubContextView = d;
      cc.SwanSubContextView = d;
    }, {
      "./CCComponent": 100
    }],
    122: [function (b, d) {
      "use strict";
  
      var e = b("../../platform/CCMacro");
      var f = b("../editbox/EditBoxImplBase");
      var g = b("../CCLabel");
      var i = b("./types");
      var j = i.InputMode;
      var a = i.InputFlag;
      var k = i.KeyboardReturnType;
      function c(a) {
        return a.charAt(0).toUpperCase() + a.slice(1);
      }
      var l = cc.Class({
        name: "cc.EditBox",
        extends: cc.Component,
        editor: false,
        properties: {
          _string: "",
          string: {
            tooltip: false,
            get: function () {
              return this._string;
            },
            set: function (a) {
              a = "" + a;
              if (this.maxLength >= 0 && a.length >= this.maxLength) {
                a = a.slice(0, this.maxLength);
              }
              this._string = a;
              this._updateString(a);
            }
          },
          textLabel: {
            tooltip: false,
            default: null,
            type: g,
            notify: function (a) {
              if (this.textLabel && this.textLabel !== a) {
                this._updateTextLabel();
                this._updateLabels();
              }
            }
          },
          placeholderLabel: {
            tooltip: false,
            default: null,
            type: g,
            notify: function (a) {
              if (this.placeholderLabel && this.placeholderLabel !== a) {
                this._updatePlaceholderLabel();
                this._updateLabels();
              }
            }
          },
          background: {
            tooltip: false,
            default: null,
            type: cc.Sprite,
            notify: function (a) {
              if (this.background && this.background !== a) {
                this._updateBackgroundSprite();
              }
            }
          },
          _N$backgroundImage: {
            default: undefined,
            type: cc.SpriteFrame
          },
          backgroundImage: {
            get: function () {
              if (this.background) {
                return this.background.spriteFrame;
              } else {
                return null;
              }
            },
            set: function (a) {
              if (this.background) {
                this.background.spriteFrame = a;
              }
            }
          },
          returnType: {
            default: k.DEFAULT,
            tooltip: false,
            displayName: "KeyboardReturnType",
            type: k
          },
          _N$returnType: {
            default: undefined,
            type: cc.Float
          },
          inputFlag: {
            tooltip: false,
            default: a.DEFAULT,
            type: a,
            notify: function () {
              this._updateString(this._string);
            }
          },
          inputMode: {
            tooltip: false,
            default: j.ANY,
            type: j,
            notify: function (a) {
              if (this.inputMode !== a) {
                this._updateTextLabel();
                this._updatePlaceholderLabel();
              }
            }
          },
          fontSize: {
            get: function () {
              if (this.textLabel) {
                return this.textLabel.fontSize;
              } else {
                return 0;
              }
            },
            set: function (a) {
              if (this.textLabel) {
                this.textLabel.fontSize = a;
              }
            }
          },
          _N$fontSize: {
            default: undefined,
            type: cc.Float
          },
          lineHeight: {
            get: function () {
              if (this.textLabel) {
                return this.textLabel.lineHeight;
              } else {
                return 0;
              }
            },
            set: function (a) {
              if (this.textLabel) {
                this.textLabel.lineHeight = a;
              }
            }
          },
          _N$lineHeight: {
            default: undefined,
            type: cc.Float
          },
          fontColor: {
            get: function () {
              if (this.textLabel) {
                return this.textLabel.node.color;
              } else {
                return cc.Color.BLACK;
              }
            },
            set: function (a) {
              if (this.textLabel) {
                this.textLabel.node.color = a;
                this.textLabel.node.opacity = a.a;
              }
            }
          },
          _N$fontColor: undefined,
          placeholder: {
            tooltip: false,
            get: function () {
              if (this.placeholderLabel) {
                return this.placeholderLabel.string;
              } else {
                return "";
              }
            },
            set: function (a) {
              if (this.placeholderLabel) {
                this.placeholderLabel.string = a;
              }
            }
          },
          _N$placeholder: {
            default: undefined,
            type: cc.String
          },
          placeholderFontSize: {
            get: function () {
              if (this.placeholderLabel) {
                return this.placeholderLabel.fontSize;
              } else {
                return 0;
              }
            },
            set: function (a) {
              if (this.placeholderLabel) {
                this.placeholderLabel.fontSize = a;
              }
            }
          },
          _N$placeholderFontSize: {
            default: undefined,
            type: cc.Float
          },
          placeholderFontColor: {
            get: function () {
              if (this.placeholderLabel) {
                return this.placeholderLabel.node.color;
              } else {
                return cc.Color.BLACK;
              }
            },
            set: function (a) {
              if (this.placeholderLabel) {
                this.placeholderLabel.node.color = a;
                this.placeholderLabel.node.opacity = a.a;
              }
            }
          },
          _N$placeholderFontColor: undefined,
          maxLength: {
            tooltip: false,
            default: 20
          },
          _N$maxLength: {
            default: undefined,
            type: cc.Float
          },
          stayOnTop: {
            default: false,
            notify: function () {}
          },
          _tabIndex: 0,
          tabIndex: {
            tooltip: false,
            get: function () {
              return this._tabIndex;
            },
            set: function (a) {
              if (this._tabIndex !== a) {
                this._tabIndex = a;
                if (this._impl) {
                  this._impl.setTabIndex(a);
                }
              }
            }
          },
          editingDidBegan: {
            default: [],
            type: cc.Component.EventHandler
          },
          textChanged: {
            default: [],
            type: cc.Component.EventHandler
          },
          editingDidEnded: {
            default: [],
            type: cc.Component.EventHandler
          },
          editingReturn: {
            default: [],
            type: cc.Component.EventHandler
          }
        },
        statics: {
          _ImplClass: f,
          KeyboardReturnType: k,
          InputFlag: a,
          InputMode: j
        },
        _init: function () {
          this._upgradeComp();
          this._isLabelVisible = true;
          this.node.on(cc.Node.EventType.SIZE_CHANGED, this._syncSize, this);
          (this._impl = new l._ImplClass()).init(this);
          this._updateString(this._string);
          this._syncSize();
        },
        _updateBackgroundSprite: function () {
          var a = this.background;
          if (!a) {
            var b = this.node.getChildByName("BACKGROUND_SPRITE");
            if (!b) {
              b = new cc.Node("BACKGROUND_SPRITE");
            }
            if (!(a = b.getComponent(cc.Sprite))) {
              a = b.addComponent(cc.Sprite);
            }
            b.parent = this.node;
            this.background = a;
          }
          a.type = cc.Sprite.Type.SLICED;
          if (this._N$backgroundImage !== undefined) {
            a.spriteFrame = this._N$backgroundImage;
            this._N$backgroundImage = undefined;
          }
        },
        _updateTextLabel: function () {
          var a = this.textLabel;
          if (!a) {
            var b = this.node.getChildByName("TEXT_LABEL");
            if (!b) {
              b = new cc.Node("TEXT_LABEL");
            }
            if (!(a = b.getComponent(g))) {
              a = b.addComponent(g);
            }
            b.parent = this.node;
            this.textLabel = a;
          }
          a.node.setAnchorPoint(0, 1);
          a.overflow = g.Overflow.CLAMP;
          if (this.inputMode === j.ANY) {
            a.verticalAlign = e.VerticalTextAlignment.TOP;
            a.enableWrapText = true;
          } else {
            a.verticalAlign = e.VerticalTextAlignment.CENTER;
            a.enableWrapText = false;
          }
          a.string = this._updateLabelStringStyle(this._string);
          if (this._N$fontColor !== undefined) {
            a.node.color = this._N$fontColor;
            a.node.opacity = this._N$fontColor.a;
            this._N$fontColor = undefined;
          }
          if (this._N$fontSize !== undefined) {
            a.fontSize = this._N$fontSize;
            this._N$fontSize = undefined;
          }
          if (this._N$lineHeight !== undefined) {
            a.lineHeight = this._N$lineHeight;
            this._N$lineHeight = undefined;
          }
        },
        _updatePlaceholderLabel: function () {
          var a = this.placeholderLabel;
          if (!a) {
            var b = this.node.getChildByName("PLACEHOLDER_LABEL");
            if (!b) {
              b = new cc.Node("PLACEHOLDER_LABEL");
            }
            if (!(a = b.getComponent(g))) {
              a = b.addComponent(g);
            }
            b.parent = this.node;
            this.placeholderLabel = a;
          }
          a.node.setAnchorPoint(0, 1);
          a.overflow = g.Overflow.CLAMP;
          if (this.inputMode === j.ANY) {
            a.verticalAlign = e.VerticalTextAlignment.TOP;
            a.enableWrapText = true;
          } else {
            a.verticalAlign = e.VerticalTextAlignment.CENTER;
            a.enableWrapText = false;
          }
          a.string = this.placeholder;
          if (this._N$placeholderFontColor !== undefined) {
            a.node.color = this._N$placeholderFontColor;
            a.node.opacity = this._N$placeholderFontColor.a;
            this._N$placeholderFontColor = undefined;
          }
          if (this._N$placeholderFontSize !== undefined) {
            a.fontSize = this._N$placeholderFontSize;
            this._N$placeholderFontSize = undefined;
          }
        },
        _upgradeComp: function () {
          if (this._N$returnType !== undefined) {
            this.returnType = this._N$returnType;
            this._N$returnType = undefined;
          }
          if (this._N$maxLength !== undefined) {
            this.maxLength = this._N$maxLength;
            this._N$maxLength = undefined;
          }
          if (this._N$backgroundImage !== undefined) {
            this._updateBackgroundSprite();
          }
          if (!(this._N$fontColor === undefined && this._N$fontSize === undefined && this._N$lineHeight === undefined)) {
            this._updateTextLabel();
          }
          if (!(this._N$placeholderFontColor === undefined && this._N$placeholderFontSize === undefined)) {
            this._updatePlaceholderLabel();
          }
          if (this._N$placeholder !== undefined) {
            this.placeholder = this._N$placeholder;
            this._N$placeholder = undefined;
          }
        },
        _syncSize: function () {
          if (this._impl) {
            var a = this.node.getContentSize();
            this._impl.setSize(a.width, a.height);
          }
        },
        _showLabels: function () {
          this._isLabelVisible = true;
          this._updateLabels();
        },
        _hideLabels: function () {
          this._isLabelVisible = false;
          if (this.textLabel) {
            this.textLabel.node.active = false;
          }
          if (this.placeholderLabel) {
            this.placeholderLabel.node.active = false;
          }
        },
        _updateLabels: function () {
          if (this._isLabelVisible) {
            var a = this._string;
            if (this.textLabel) {
              this.textLabel.node.active = a !== "";
            }
            if (this.placeholderLabel) {
              this.placeholderLabel.node.active = a === "";
            }
          }
        },
        _updateString: function (a) {
          var b = this.textLabel;
          if (b) {
            var c = a;
            if (c) {
              c = this._updateLabelStringStyle(c);
            }
            b.string = c;
            this._updateLabels();
          }
        },
        _updateLabelStringStyle: function (b, d) {
          var e = this.inputFlag;
          if (d || e !== a.PASSWORD) {
            if (e === a.INITIAL_CAPS_ALL_CHARACTERS) {
              b = b.toUpperCase();
            } else if (e === a.INITIAL_CAPS_WORD) {
              b = b.replace(/(?:^|\s)\S/g, function (a) {
                return a.toUpperCase();
              });
            } else if (e === a.INITIAL_CAPS_SENTENCE) {
              b = c(b);
            }
          } else {
            for (var f = "", g = b.length, h = 0; h < g; ++h) {
              f += "●";
            }
            b = f;
          }
          return b;
        },
        editBoxEditingDidBegan: function () {
          cc.Component.EventHandler.emitEvents(this.editingDidBegan, this);
          this.node.emit("editing-did-began", this);
        },
        editBoxEditingDidEnded: function () {
          cc.Component.EventHandler.emitEvents(this.editingDidEnded, this);
          this.node.emit("editing-did-ended", this);
        },
        editBoxTextChanged: function (a) {
          a = this._updateLabelStringStyle(a, true);
          this.string = a;
          cc.Component.EventHandler.emitEvents(this.textChanged, a, this);
          this.node.emit("text-changed", this);
        },
        editBoxEditingReturn: function () {
          cc.Component.EventHandler.emitEvents(this.editingReturn, this);
          this.node.emit("editing-return", this);
        },
        onEnable: function () {
          this._registerEvent();
          if (this._impl) {
            this._impl.enable();
          }
        },
        onDisable: function () {
          this._unregisterEvent();
          if (this._impl) {
            this._impl.disable();
          }
        },
        onDestroy: function () {
          if (this._impl) {
            this._impl.clear();
          }
        },
        __preload: function () {
          this._init();
        },
        _registerEvent: function () {
          this.node.on(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
          this.node.on(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
        },
        _unregisterEvent: function () {
          this.node.off(cc.Node.EventType.TOUCH_START, this._onTouchBegan, this);
          this.node.off(cc.Node.EventType.TOUCH_END, this._onTouchEnded, this);
        },
        _onTouchBegan: function (a) {
          a.stopPropagation();
        },
        _onTouchCancel: function (a) {
          a.stopPropagation();
        },
        _onTouchEnded: function (a) {
          if (this._impl) {
            this._impl.beginEditing();
          }
          a.stopPropagation();
        },
        setFocus: function () {
          if (this._impl) {
            this._impl.setFocus(true);
          }
        },
        focus: function () {
          if (this._impl) {
            this._impl.setFocus(true);
          }
        },
        blur: function () {
          if (this._impl) {
            this._impl.setFocus(false);
          }
        },
        isFocused: function () {
          return !!this._impl && this._impl.isFocused();
        },
        update: function () {
          if (this._impl) {
            this._impl.update();
          }
        }
      });
      cc.EditBox = d.exports = l;
      if (cc.sys.isBrowser) {
        b("./WebEditBoxImpl");
      }
    }, {
      "../../platform/CCMacro": 167,
      "../CCLabel": 102,
      "../editbox/EditBoxImplBase": 123,
      "./WebEditBoxImpl": 124,
      "./types": 126
    }],
    123: [function (a, b) {
      "use strict";
  
      var c = cc.Class({
        ctor: function () {
          this._delegate = null;
          this._editing = false;
        },
        init: function () {},
        enable: function () {},
        disable: function () {
          if (this._editing) {
            this.endEditing();
          }
        },
        clear: function () {},
        update: function () {},
        setTabIndex: function () {},
        setSize: function () {},
        setFocus: function (a) {
          if (a) {
            this.beginEditing();
          } else {
            this.endEditing();
          }
        },
        isFocused: function () {
          return this._editing;
        },
        beginEditing: function () {},
        endEditing: function () {}
      });
      b.exports = c;
    }, {}],
    124: [function (b) {
      "use strict";
  
      var j;
      var k = (j = b("../../value-types/mat4")) && j.__esModule ? j : {
        default: j
      };
      var i = b("../../platform/utils");
      var n = b("../../platform/CCMacro");
      var q = b("./types");
      var r = b("../CCLabel");
      var a = b("./tabIndexUtil");
      var o = cc.EditBox;
      var c = cc.js;
      var l = q.InputMode;
      var h = q.InputFlag;
      var s = q.KeyboardReturnType;
      var w = {
        zoomInvalid: false
      };
      if (!(cc.sys.OS_ANDROID !== cc.sys.os || cc.sys.browserType !== cc.sys.BROWSER_TYPE_SOUGOU && cc.sys.browserType !== cc.sys.BROWSER_TYPE_360)) {
        w.zoomInvalid = true;
      }
      var d = 0;
      var f = cc.v3();
      var p = null;
      var u = false;
      var x = false;
      var t = o._ImplClass;
      function y() {
        t.call(this);
        this._domId = "EditBoxId_" + ++d;
        this._placeholderStyleSheet = null;
        this._elem = null;
        this._isTextArea = false;
        this._worldMat = new k.default();
        this._cameraMat = new k.default();
        this._m00 = 0;
        this._m01 = 0;
        this._m04 = 0;
        this._m05 = 0;
        this._m12 = 0;
        this._m13 = 0;
        this._w = 0;
        this._h = 0;
        this._cacheViewportRect = cc.rect(0, 0, 0, 0);
        this._inputMode = null;
        this._inputFlag = null;
        this._returnType = null;
        this._eventListeners = {};
        this._textLabelFont = null;
        this._textLabelFontSize = null;
        this._textLabelFontColor = null;
        this._textLabelAlign = null;
        this._placeholderLabelFont = null;
        this._placeholderLabelFontSize = null;
        this._placeholderLabelFontColor = null;
        this._placeholderLabelAlign = null;
        this._placeholderLineHeight = null;
      }
      c.extend(y, t);
      o._ImplClass = y;
      Object.assign(y.prototype, {
        init: function (b) {
          if (b) {
            this._delegate = b;
            if (b.inputMode === l.ANY) {
              this._createTextArea();
            } else {
              this._createInput();
            }
            a.add(this);
            this.setTabIndex(b.tabIndex);
            this._initStyleSheet();
            this._registerEventListeners();
            this._addDomToGameContainer();
            u = cc.view.isAutoFullScreenEnabled();
            x = cc.view._resizeWithBrowserSize;
          }
        },
        clear: function () {
          this._removeEventListeners();
          this._removeDomFromGameContainer();
          a.remove(this);
          if (p === this) {
            p = null;
          }
        },
        update: function () {
          this._updateMatrix();
        },
        setTabIndex: function (b) {
          this._elem.tabIndex = b;
          a.resort();
        },
        setSize: function (a, b) {
          var c = this._elem;
          c.style.width = a + "px";
          c.style.height = b + "px";
        },
        beginEditing: function () {
          if (p && p !== this) {
            p.setFocus(false);
          }
          this._editing = true;
          p = this;
          this._delegate.editBoxEditingDidBegan();
          this._showDom();
          this._elem.focus();
        },
        endEditing: function () {
          if (this._elem) {
            this._elem.blur();
          }
        },
        _createInput: function () {
          this._isTextArea = false;
          this._elem = document.createElement("input");
        },
        _createTextArea: function () {
          this._isTextArea = true;
          this._elem = document.createElement("textarea");
        },
        _addDomToGameContainer: function () {
          cc.game.container.appendChild(this._elem);
          document.head.appendChild(this._placeholderStyleSheet);
        },
        _removeDomFromGameContainer: function () {
          if (i.contains(cc.game.container, this._elem)) {
            cc.game.container.removeChild(this._elem);
          }
          if (i.contains(document.head, this._placeholderStyleSheet)) {
            document.head.removeChild(this._placeholderStyleSheet);
          }
          delete this._elem;
          delete this._placeholderStyleSheet;
        },
        _showDom: function () {
          this._updateMaxLength();
          this._updateInputType();
          this._updateStyleSheet();
          this._elem.style.display = "";
          this._delegate._hideLabels();
          if (cc.sys.isMobile) {
            this._showDomOnMobile();
          }
        },
        _hideDom: function () {
          this._elem.style.display = "none";
          this._delegate._showLabels();
          if (cc.sys.isMobile) {
            this._hideDomOnMobile();
          }
        },
        _showDomOnMobile: function () {
          if (cc.sys.os === cc.sys.OS_ANDROID) {
            if (u) {
              cc.view.enableAutoFullScreen(false);
              cc.screen.exitFullScreen();
            }
            if (x) {
              cc.view.resizeWithBrowserSize(false);
            }
            this._adjustWindowScroll();
          }
        },
        _hideDomOnMobile: function () {
          if (cc.sys.os === cc.sys.OS_ANDROID) {
            if (x) {
              cc.view.resizeWithBrowserSize(true);
            }
            // TOLOOK
            setTimeout(function () {
              if (!p) {
                if (u) {
                  cc.view.enableAutoFullScreen(true);
                }
              }
            }, 800);
          }
        },
        _adjustWindowScroll: function () {
          var a = this;
          // TOLOOK
          setTimeout(function () {
            if (window.scrollY < 100) {
              a._elem.scrollIntoView({
                block: "start",
                inline: "nearest",
                behavior: "smooth"
              });
            }
          }, 800);
        },
        _scrollBackWindow: function () {
          // TOLOOK
          setTimeout(function () {
            var a = cc.sys;
            if (a.browserType !== a.BROWSER_TYPE_WECHAT || a.os !== a.OS_IOS) {
              window.scrollTo(0, 0);
            } else if (window.top) {
              window.top.scrollTo(0, 0);
            }
          }, 800);
        },
        _updateCameraMatrix: function () {
          var a = this._delegate.node;
          a.getWorldMatrix(this._worldMat);
          var b = this._worldMat;
          var c = a._contentSize;
          var d = a._anchorPoint;
          f.x = -d.x * c.width;
          f.y = -d.y * c.height;
          k.default.transform(b, b, f);
          var e = cc.Camera.findCamera(a);
          return !!e && (e.getWorldToScreenMatrix2D(this._cameraMat), k.default.mul(this._cameraMat, this._cameraMat, b), true);
        },
        _updateMatrix: function () {
          if (this._updateCameraMatrix()) {
            var b = this._cameraMat.m;
            var d = this._delegate.node;
            var e = cc.view;
            if (this._m00 !== b[0] || this._m01 !== b[1] || this._m04 !== b[4] || this._m05 !== b[5] || this._m12 !== b[12] || this._m13 !== b[13] || this._w !== d._contentSize.width || this._h !== d._contentSize.height || !this._cacheViewportRect.equals(e._viewportRect)) {
              this._m00 = b[0];
              this._m01 = b[1];
              this._m04 = b[4];
              this._m05 = b[5];
              this._m12 = b[12];
              this._m13 = b[13];
              this._w = d._contentSize.width;
              this._h = d._contentSize.height;
              this._cacheViewportRect.set(e._viewportRect);
              var i = e._scaleX;
              var j = e._scaleY;
              var k = e._viewportRect;
              var q = e._devicePixelRatio;
              i /= q;
              j /= q;
              var a = cc.game.container;
              var o = b[0] * i;
              var s = b[1];
              var l = b[4];
              var h = b[5] * j;
              var t = a && a.style.paddingLeft && parseInt(a.style.paddingLeft);
              t += k.x / q;
              var x = a && a.style.paddingBottom && parseInt(a.style.paddingBottom);
              x += k.y / q;
              var y = b[12] * i + t;
              var p = b[13] * j + x;
              if (w.zoomInvalid) {
                this.setSize(d.width * o, d.height * h);
                o = 1;
                h = 1;
              }
              var v = this._elem;
              var g = "matrix(" + o + "," + -s + "," + -l + "," + h + "," + y + "," + -p + ")";
              v.style.transform = g;
              v.style["-webkit-transform"] = g;
              v.style["transform-origin"] = "0px 100% 0px";
              v.style["-webkit-transform-origin"] = "0px 100% 0px";
            }
          }
        },
        _updateInputType: function () {
          var b = this._delegate;
          var c = b.inputMode;
          var d = b.inputFlag;
          var e = b.returnType;
          var f = this._elem;
          if (this._inputMode !== c || this._inputFlag !== d || this._returnType !== e) {
            this._inputMode = c;
            this._inputFlag = d;
            this._returnType = e;
            if (this._isTextArea) {
              var g = "none";
              if (d === h.INITIAL_CAPS_ALL_CHARACTERS) {
                g = "uppercase";
              } else if (d === h.INITIAL_CAPS_WORD) {
                g = "capitalize";
              }
              f.style.textTransform = g;
              return;
            }
            if (d === h.PASSWORD) {
              f.type = "password";
              f.style.textTransform = "none";
              return;
            }
            var i = f.type;
            if (c === l.EMAIL_ADDR) {
              i = "email";
            } else if (c === l.NUMERIC) {
              i = "number";
            } else if (c === l.DECIMAL) {
              i = "digit";
            } else if (c === l.PHONE_NUMBER) {
              i = "tel";
              f.onmousewheel = function () {
                return false;
              };
            } else if (c === l.URL) {
              i = "url";
            } else {
              i = "text";
              if (e === s.SEARCH) {
                i = "search";
              }
            }
            f.type = i;
            var j = "none";
            if (d === h.INITIAL_CAPS_ALL_CHARACTERS) {
              j = "uppercase";
            } else if (d === h.INITIAL_CAPS_WORD) {
              j = "capitalize";
            }
            f.style.textTransform = j;
          }
        },
        _updateMaxLength: function () {
          var a = this._delegate.maxLength;
          if (a < 0) {
            a = 65535;
          }
          this._elem.maxLength = a;
        },
        _initStyleSheet: function () {
          var a = this._elem;
          a.style.display = "none";
          a.style.border = 0;
          a.style.background = "transparent";
          a.style.width = "100%";
          a.style.height = "100%";
          a.style.active = 0;
          a.style.outline = "medium";
          a.style.padding = "0";
          a.style.textTransform = "none";
          a.style.position = "absolute";
          a.style.bottom = "0px";
          a.style.left = "2px";
          a.className = "cocosEditBox";
          a.id = this._domId;
          if (this._isTextArea) {
            a.style.resize = "none";
            a.style.overflow_y = "scroll";
          } else {
            a.type = "text";
            a.style["-moz-appearance"] = "textfield";
          }
          this._placeholderStyleSheet = document.createElement("style");
        },
        _updateStyleSheet: function () {
          var a = this._delegate;
          var b = this._elem;
          b.value = a.string;
          b.placeholder = a.placeholder;
          this._updateTextLabel(a.textLabel);
          this._updatePlaceholderLabel(a.placeholderLabel);
        },
        _updateTextLabel: function (a) {
          if (a) {
            var b = a.font;
            b = !b || b instanceof cc.BitmapFont ? a.fontFamily : b._fontFamily;
            var c = a.fontSize * a.node.scaleY;
            if (this._textLabelFont !== b || this._textLabelFontSize !== c || this._textLabelFontColor !== a.fontColor || this._textLabelAlign !== a.horizontalAlign) {
              this._textLabelFont = b;
              this._textLabelFontSize = c;
              this._textLabelFontColor = a.fontColor;
              this._textLabelAlign = a.horizontalAlign;
              var d = this._elem;
              d.style.fontSize = c + "px";
              d.style.color = a.node.color.toCSS();
              d.style.fontFamily = b;
              switch (a.horizontalAlign) {
                case r.HorizontalAlign.LEFT:
                  d.style.textAlign = "left";
                  break;
                case r.HorizontalAlign.CENTER:
                  d.style.textAlign = "center";
                  break;
                case r.HorizontalAlign.RIGHT:
                  d.style.textAlign = "right";
              }
            }
          }
        },
        _updatePlaceholderLabel: function (a) {
          if (a) {
            var b = a.font;
            b = !b || b instanceof cc.BitmapFont ? a.fontFamily : a.font._fontFamily;
            var c = a.fontSize * a.node.scaleY;
            if (this._placeholderLabelFont !== b || this._placeholderLabelFontSize !== c || this._placeholderLabelFontColor !== a.fontColor || this._placeholderLabelAlign !== a.horizontalAlign || this._placeholderLineHeight !== a.fontSize) {
              this._placeholderLabelFont = b;
              this._placeholderLabelFontSize = c;
              this._placeholderLabelFontColor = a.fontColor;
              this._placeholderLabelAlign = a.horizontalAlign;
              this._placeholderLineHeight = a.fontSize;
              var d;
              var f = this._placeholderStyleSheet;
              var g = a.node.color.toCSS();
              var h = a.fontSize;
              switch (a.horizontalAlign) {
                case r.HorizontalAlign.LEFT:
                  d = "left";
                  break;
                case r.HorizontalAlign.CENTER:
                  d = "center";
                  break;
                case r.HorizontalAlign.RIGHT:
                  d = "right";
              }
              f.innerHTML = "#" + this._domId + "::-webkit-input-placeholder,#" + this._domId + "::-moz-placeholder,#" + this._domId + ":-ms-input-placeholder{text-transform: initial; font-family: " + b + "; font-size: " + c + "px; color: " + g + "; line-height: " + h + "px; text-align: " + d + ";}";
              if (cc.sys.browserType === cc.sys.BROWSER_TYPE_EDGE) {
                f.innerHTML += "#" + this._domId + "::-ms-clear{display: none;}";
              }
            }
          }
        },
        _registerEventListeners: function () {
          var b = this;
          var c = this._elem;
          var d = false;
          var e = this._eventListeners;
          e.compositionStart = function () {
            d = true;
          };
          e.compositionEnd = function () {
            d = false;
            b._delegate.editBoxTextChanged(c.value);
          };
          e.onInput = function () {
            if (!d) {
              var a = b._delegate.maxLength;
              if (a >= 0) {
                c.value = c.value.slice(0, a);
              }
              b._delegate.editBoxTextChanged(c.value);
            }
          };
          e.onClick = function () {
            if (b._editing && cc.sys.isMobile) {
              b._adjustWindowScroll();
            }
          };
          e.onKeydown = function (d) {
            if (d.keyCode === n.KEY.enter) {
              d.stopPropagation();
              b._delegate.editBoxEditingReturn();
              if (!b._isTextArea) {
                c.blur();
              }
            } else if (d.keyCode === n.KEY.tab) {
              d.stopPropagation();
              d.preventDefault();
              a.next(b);
            }
          };
          e.onBlur = function () {
            if (cc.sys.isMobile && d) {
              e.compositionEnd();
            }
            b._editing = false;
            p = null;
            b._hideDom();
            b._delegate.editBoxEditingDidEnded();
          };
          c.addEventListener("compositionstart", e.compositionStart);
          c.addEventListener("compositionend", e.compositionEnd);
          c.addEventListener("input", e.onInput);
          c.addEventListener("keydown", e.onKeydown);
          c.addEventListener("blur", e.onBlur);
          c.addEventListener("touchstart", e.onClick);
        },
        _removeEventListeners: function () {
          var a = this._elem;
          var b = this._eventListeners;
          a.removeEventListener("compositionstart", b.compositionStart);
          a.removeEventListener("compositionend", b.compositionEnd);
          a.removeEventListener("input", b.onInput);
          a.removeEventListener("keydown", b.onKeydown);
          a.removeEventListener("blur", b.onBlur);
          a.removeEventListener("touchstart", b.onClick);
          b.compositionStart = null;
          b.compositionEnd = null;
          b.onInput = null;
          b.onKeydown = null;
          b.onBlur = null;
          b.onClick = null;
        }
      });
    }, {
      "../../platform/CCMacro": 167,
      "../../platform/utils": 186,
      "../../value-types/mat4": 253,
      "../CCLabel": 102,
      "./tabIndexUtil": 125,
      "./types": 126
    }],
    125: [function (a, b) {
      "use strict";
  
      b.exports = {
        _tabIndexList: [],
        add: function (a) {
          var b = this._tabIndexList;
          if (b.indexOf(a) === -1) {
            b.push(a);
          }
        },
        remove: function (a) {
          var b = this._tabIndexList;
          var c = b.indexOf(a);
          if (c !== -1) {
            b.splice(c, 1);
          }
        },
        resort: function () {
          this._tabIndexList.sort(function (a, b) {
            return a._delegate._tabIndex - b._delegate._tabIndex;
          });
        },
        next: function (a) {
          var b = this._tabIndexList;
          var c = b.indexOf(a);
          a.setFocus(false);
          if (c !== -1) {
            var d = b[c + 1];
            if (d && d._delegate._tabIndex >= 0) {
              d.setFocus(true);
            }
          }
        }
      };
    }, {}],
    126: [function (a, b) {
      "use strict";
  
      var c = cc.Enum({
        DEFAULT: 0,
        DONE: 1,
        SEND: 2,
        SEARCH: 3,
        GO: 4,
        NEXT: 5
      });
      var d = cc.Enum({
        ANY: 0,
        EMAIL_ADDR: 1,
        NUMERIC: 2,
        PHONE_NUMBER: 3,
        URL: 4,
        DECIMAL: 5,
        SINGLE_LINE: 6
      });
      var e = cc.Enum({
        PASSWORD: 0,
        SENSITIVE: 1,
        INITIAL_CAPS_WORD: 2,
        INITIAL_CAPS_SENTENCE: 3,
        INITIAL_CAPS_ALL_CHARACTERS: 4,
        DEFAULT: 5
      });
      b.exports = {
        KeyboardReturnType: c,
        InputMode: d,
        InputFlag: e
      };
    }, {}],
    127: [function (a, b) {
      "use strict";
  
      a("./CCComponent");
      a("./CCComponentEventHandler");
      a("./missing-script");
      var c = a("./SubContextView");
      if (!c) {
        c = cc.Class({
          name: "cc.SubContextView",
          extends: cc.Component
        });
        cc.SubContextView = cc.WXSubContextView = cc.SwanSubContextView = c;
      }
      var d = [a("./CCSprite"), a("./CCWidget"), a("./CCCanvas"), a("./CCAudioSource"), a("./CCAnimation"), a("./CCButton"), a("./CCLabel"), a("./CCProgressBar"), a("./CCMask"), a("./CCScrollBar"), a("./CCScrollView"), a("./CCPageViewIndicator"), a("./CCPageView"), a("./CCSlider"), a("./CCLayout"), a("./editbox/CCEditBox"), a("./CCLabelOutline"), a("./CCLabelShadow"), a("./CCRichText"), a("./CCToggleContainer"), a("./CCToggleGroup"), a("./CCToggle"), a("./CCBlockInputEvents"), a("./CCPropagateTouchEvents"), a("./CCMotionStreak"), a("./CCSafeArea"), c];
      b.exports = d;
    }, {
      "./CCAnimation": 96,
      "./CCAudioSource": undefined,
      "./CCBlockInputEvents": 97,
      "./CCButton": 98,
      "./CCCanvas": 99,
      "./CCComponent": 100,
      "./CCComponentEventHandler": 101,
      "./CCLabel": 102,
      "./CCLabelOutline": 103,
      "./CCLabelShadow": 104,
      "./CCLayout": 105,
      "./CCMask": 106,
      "./CCMotionStreak": undefined,
      "./CCPageView": undefined,
      "./CCPageViewIndicator": undefined,
      "./CCProgressBar": 107,
      "./CCPropagateTouchEvents": 108,
      "./CCRichText": 110,
      "./CCSafeArea": 111,
      "./CCScrollBar": 112,
      "./CCScrollView": 113,
      "./CCSlider": 114,
      "./CCSprite": 115,
      "./CCToggle": 116,
      "./CCToggleContainer": 117,
      "./CCToggleGroup": 118,
      "./CCWidget": 120,
      "./SubContextView": 121,
      "./editbox/CCEditBox": 122,
      "./missing-script": 128
    }],
    128: [function (a, b) {
      "use strict";
  
      var c = cc.js;
      var d = cc.Class({
        name: "cc.MissingScript",
        extends: cc.Component,
        editor: {
          inspector: "packages://inspector/inspectors/comps/missing-script.js"
        },
        properties: {
          compiled: {
            default: false,
            serializable: false
          },
          _$erialized: {
            default: null,
            visible: false,
            editorOnly: true
          }
        },
        ctor: false,
        statics: {
          safeFindClass: function (a) {
            return c._getClassById(a) || (cc.deserialize.reportMissingClass(a), d);
          }
        },
        onLoad: function () {}
      });
      cc._MissingScript = b.exports = d;
    }, {}],
    129: [function (b, c) {
      "use strict";
  
      var d = cc.js;
      b("../event/event");
      function e(a, b) {
        cc.Event.call(this, cc.Event.MOUSE, b);
        this._eventType = a;
        this._button = 0;
        this._x = 0;
        this._y = 0;
        this._prevX = 0;
        this._prevY = 0;
        this._scrollX = 0;
        this._scrollY = 0;
      }
      d.extend(e, cc.Event);
      var f = e.prototype;
      f.setScrollData = function (a, b) {
        this._scrollX = a;
        this._scrollY = b;
      };
      f.getScrollX = function () {
        return this._scrollX;
      };
      f.getScrollY = function () {
        return this._scrollY;
      };
      f.setLocation = function (a, b) {
        this._x = a;
        this._y = b;
      };
      f.getLocation = function () {
        return cc.v2(this._x, this._y);
      };
      f.getLocationInView = function () {
        return cc.v2(this._x, cc.view._designResolutionSize.height - this._y);
      };
      f._setPrevCursor = function (a, b) {
        this._prevX = a;
        this._prevY = b;
      };
      f.getPreviousLocation = function () {
        return cc.v2(this._prevX, this._prevY);
      };
      f.getDelta = function () {
        return cc.v2(this._x - this._prevX, this._y - this._prevY);
      };
      f.getDeltaX = function () {
        return this._x - this._prevX;
      };
      f.getDeltaY = function () {
        return this._y - this._prevY;
      };
      f.setButton = function (a) {
        this._button = a;
      };
      f.getButton = function () {
        return this._button;
      };
      f.getLocationX = function () {
        return this._x;
      };
      f.getLocationY = function () {
        return this._y;
      };
      e.NONE = 0;
      e.DOWN = 1;
      e.UP = 2;
      e.MOVE = 3;
      e.SCROLL = 4;
      e.BUTTON_LEFT = 0;
      e.BUTTON_RIGHT = 2;
      e.BUTTON_MIDDLE = 1;
      e.BUTTON_4 = 3;
      e.BUTTON_5 = 4;
      e.BUTTON_6 = 5;
      e.BUTTON_7 = 6;
      e.BUTTON_8 = 7;
      function g(a, b) {
        cc.Event.call(this, cc.Event.TOUCH, b);
        this._eventCode = 0;
        this._touches = a || [];
        this.touch = null;
        this.currentTouch = null;
      }
      d.extend(g, cc.Event);
      (f = g.prototype).getEventCode = function () {
        return this._eventCode;
      };
      f.getTouches = function () {
        return this._touches;
      };
      f._setEventCode = function (a) {
        this._eventCode = a;
      };
      f._setTouches = function (a) {
        this._touches = a;
      };
      f.setLocation = function (a, b) {
        if (this.touch) {
          this.touch.setTouchInfo(this.touch.getID(), a, b);
        }
      };
      f.getLocation = function () {
        if (this.touch) {
          return this.touch.getLocation();
        } else {
          return cc.v2();
        }
      };
      f.getLocationInView = function () {
        if (this.touch) {
          return this.touch.getLocationInView();
        } else {
          return cc.v2();
        }
      };
      f.getPreviousLocation = function () {
        if (this.touch) {
          return this.touch.getPreviousLocation();
        } else {
          return cc.v2();
        }
      };
      f.getStartLocation = function () {
        if (this.touch) {
          return this.touch.getStartLocation();
        } else {
          return cc.v2();
        }
      };
      f.getID = function () {
        if (this.touch) {
          return this.touch.getID();
        } else {
          return null;
        }
      };
      f.getDelta = function () {
        if (this.touch) {
          return this.touch.getDelta();
        } else {
          return cc.v2();
        }
      };
      f.getDeltaX = function () {
        if (this.touch) {
          return this.touch.getDelta().x;
        } else {
          return 0;
        }
      };
      f.getDeltaY = function () {
        if (this.touch) {
          return this.touch.getDelta().y;
        } else {
          return 0;
        }
      };
      f.getLocationX = function () {
        if (this.touch) {
          return this.touch.getLocationX();
        } else {
          return 0;
        }
      };
      f.getLocationY = function () {
        if (this.touch) {
          return this.touch.getLocationY();
        } else {
          return 0;
        }
      };
      g.MAX_TOUCHES = 5;
      g.BEGAN = 0;
      g.MOVED = 1;
      g.ENDED = 2;
      g.CANCELED = 3;
      function h(a, b) {
        cc.Event.call(this, cc.Event.ACCELERATION, b);
        this.acc = a;
      }
      d.extend(h, cc.Event);
      function a(a, b, c) {
        cc.Event.call(this, cc.Event.KEYBOARD, c);
        this.keyCode = a;
        this.isPressed = b;
      }
      d.extend(a, cc.Event);
      cc.Event.EventMouse = e;
      cc.Event.EventTouch = g;
      cc.Event.EventAcceleration = h;
      cc.Event.EventKeyboard = a;
      c.exports = cc.Event;
    }, {
      "../event/event": 135
    }],
    130: [function (b, d) {
      "use strict";
  
      var e = b("../platform/js");
      cc.EventListener = function (a, b, c) {
        this._onEvent = c;
        this._type = a || 0;
        this._listenerID = b || "";
        this._registered = false;
        this._fixedPriority = 0;
        this._node = null;
        this._target = null;
        this._paused = true;
        this._isEnabled = true;
      };
      cc.EventListener.prototype = {
        constructor: cc.EventListener,
        _setPaused: function (a) {
          this._paused = a;
        },
        _isPaused: function () {
          return this._paused;
        },
        _setRegistered: function (a) {
          this._registered = a;
        },
        _isRegistered: function () {
          return this._registered;
        },
        _getType: function () {
          return this._type;
        },
        _getListenerID: function () {
          return this._listenerID;
        },
        _setFixedPriority: function (a) {
          this._fixedPriority = a;
        },
        _getFixedPriority: function () {
          return this._fixedPriority;
        },
        _setSceneGraphPriority: function (a) {
          this._target = a;
          this._node = a;
        },
        _getSceneGraphPriority: function () {
          return this._node;
        },
        checkAvailable: function () {
          return this._onEvent !== null;
        },
        clone: function () {
          return null;
        },
        setEnabled: function (a) {
          this._isEnabled = a;
        },
        isEnabled: function () {
          return this._isEnabled;
        },
        retain: function () {},
        release: function () {}
      };
      cc.EventListener.UNKNOWN = 0;
      cc.EventListener.TOUCH_ONE_BY_ONE = 1;
      cc.EventListener.TOUCH_ALL_AT_ONCE = 2;
      cc.EventListener.KEYBOARD = 3;
      cc.EventListener.MOUSE = 4;
      cc.EventListener.ACCELERATION = 6;
      cc.EventListener.CUSTOM = 8;
      var f = cc.EventListener.ListenerID = {
        MOUSE: "__cc_mouse",
        TOUCH_ONE_BY_ONE: "__cc_touch_one_by_one",
        TOUCH_ALL_AT_ONCE: "__cc_touch_all_at_once",
        KEYBOARD: "__cc_keyboard",
        ACCELERATION: "__cc_acceleration"
      };
      function g(a, b) {
        this._onCustomEvent = b;
        cc.EventListener.call(this, cc.EventListener.CUSTOM, a, this._callback);
      }
      e.extend(g, cc.EventListener);
      e.mixin(g.prototype, {
        _onCustomEvent: null,
        _callback: function (a) {
          if (this._onCustomEvent !== null) {
            this._onCustomEvent(a);
          }
        },
        checkAvailable: function () {
          return cc.EventListener.prototype.checkAvailable.call(this) && this._onCustomEvent !== null;
        },
        clone: function () {
          return new g(this._listenerID, this._onCustomEvent);
        }
      });
      function h() {
        cc.EventListener.call(this, cc.EventListener.MOUSE, f.MOUSE, this._callback);
      }
      e.extend(h, cc.EventListener);
      e.mixin(h.prototype, {
        onMouseDown: null,
        onMouseUp: null,
        onMouseMove: null,
        onMouseScroll: null,
        _callback: function (a) {
          var b = cc.Event.EventMouse;
          switch (a._eventType) {
            case b.DOWN:
              if (this.onMouseDown) {
                this.onMouseDown(a);
              }
              break;
            case b.UP:
              if (this.onMouseUp) {
                this.onMouseUp(a);
              }
              break;
            case b.MOVE:
              if (this.onMouseMove) {
                this.onMouseMove(a);
              }
              break;
            case b.SCROLL:
              if (this.onMouseScroll) {
                this.onMouseScroll(a);
              }
          }
        },
        clone: function () {
          var a = new h();
          a.onMouseDown = this.onMouseDown;
          a.onMouseUp = this.onMouseUp;
          a.onMouseMove = this.onMouseMove;
          a.onMouseScroll = this.onMouseScroll;
          return a;
        },
        checkAvailable: function () {
          return true;
        }
      });
      function i() {
        cc.EventListener.call(this, cc.EventListener.TOUCH_ONE_BY_ONE, f.TOUCH_ONE_BY_ONE, null);
        this._claimedTouches = [];
      }
      e.extend(i, cc.EventListener);
      e.mixin(i.prototype, {
        constructor: i,
        _claimedTouches: null,
        swallowTouches: false,
        onTouchBegan: null,
        onTouchMoved: null,
        onTouchEnded: null,
        onTouchCancelled: null,
        setSwallowTouches: function (a) {
          this.swallowTouches = a;
        },
        isSwallowTouches: function () {
          return this.swallowTouches;
        },
        clone: function () {
          var a = new i();
          a.onTouchBegan = this.onTouchBegan;
          a.onTouchMoved = this.onTouchMoved;
          a.onTouchEnded = this.onTouchEnded;
          a.onTouchCancelled = this.onTouchCancelled;
          a.swallowTouches = this.swallowTouches;
          return a;
        },
        checkAvailable: function () {
          return !!this.onTouchBegan;
        }
      });
      function a() {
        cc.EventListener.call(this, cc.EventListener.TOUCH_ALL_AT_ONCE, f.TOUCH_ALL_AT_ONCE, null);
      }
      e.extend(a, cc.EventListener);
      e.mixin(a.prototype, {
        constructor: a,
        onTouchesBegan: null,
        onTouchesMoved: null,
        onTouchesEnded: null,
        onTouchesCancelled: null,
        clone: function () {
          var b = new a();
          b.onTouchesBegan = this.onTouchesBegan;
          b.onTouchesMoved = this.onTouchesMoved;
          b.onTouchesEnded = this.onTouchesEnded;
          b.onTouchesCancelled = this.onTouchesCancelled;
          return b;
        },
        checkAvailable: function () {
          return this.onTouchesBegan !== null || this.onTouchesMoved !== null || this.onTouchesEnded !== null || this.onTouchesCancelled !== null;
        }
      });
      function j(a) {
        this._onAccelerationEvent = a;
        cc.EventListener.call(this, cc.EventListener.ACCELERATION, f.ACCELERATION, this._callback);
      }
      e.extend(j, cc.EventListener);
      e.mixin(j.prototype, {
        constructor: j,
        _onAccelerationEvent: null,
        _callback: function (a) {
          this._onAccelerationEvent(a.acc, a);
        },
        checkAvailable: function () {
          return true;
        },
        clone: function () {
          return new j(this._onAccelerationEvent);
        }
      });
      function c() {
        cc.EventListener.call(this, cc.EventListener.KEYBOARD, f.KEYBOARD, this._callback);
      }
      e.extend(c, cc.EventListener);
      e.mixin(c.prototype, {
        constructor: c,
        onKeyPressed: null,
        onKeyReleased: null,
        _callback: function (a) {
          if (a.isPressed) {
            if (this.onKeyPressed) {
              this.onKeyPressed(a.keyCode, a);
            }
          } else if (this.onKeyReleased) {
            this.onKeyReleased(a.keyCode, a);
          }
        },
        clone: function () {
          var a = new c();
          a.onKeyPressed = this.onKeyPressed;
          a.onKeyReleased = this.onKeyReleased;
          return a;
        },
        checkAvailable: function () {
          return this.onKeyPressed !== null || this.onKeyReleased !== null;
        }
      });
      cc.EventListener.create = function (b) {
        var d = b.event;
        delete b.event;
        var e = null;
        if (d === cc.EventListener.TOUCH_ONE_BY_ONE) {
          e = new i();
        } else if (d === cc.EventListener.TOUCH_ALL_AT_ONCE) {
          e = new a();
        } else if (d === cc.EventListener.MOUSE) {
          e = new h();
        } else if (d === cc.EventListener.CUSTOM) {
          e = new g(b.eventName, b.callback);
          delete b.eventName;
          delete b.callback;
        } else if (d === cc.EventListener.KEYBOARD) {
          e = new c();
        } else if (d === cc.EventListener.ACCELERATION) {
          e = new j(b.callback);
          delete b.callback;
        }
        for (var f in b) {
          e[f] = b[f];
        }
        return e;
      };
      d.exports = cc.EventListener;
    }, {
      "../platform/js": 183
    }],
    131: [function (b, c) {
      "use strict";
  
      var d = b("../platform/js");
      b("./CCEventListener");
      var f = cc.EventListener.ListenerID;
      function g() {
        this._fixedListeners = [];
        this._sceneGraphListeners = [];
        this.gt0Index = 0;
      }
      g.prototype = {
        constructor: g,
        size: function () {
          return this._fixedListeners.length + this._sceneGraphListeners.length;
        },
        empty: function () {
          return this._fixedListeners.length === 0 && this._sceneGraphListeners.length === 0;
        },
        push: function (a) {
          if (a._getFixedPriority() === 0) {
            this._sceneGraphListeners.push(a);
          } else {
            this._fixedListeners.push(a);
          }
        },
        clearSceneGraphListeners: function () {
          this._sceneGraphListeners.length = 0;
        },
        clearFixedListeners: function () {
          this._fixedListeners.length = 0;
        },
        clear: function () {
          this._sceneGraphListeners.length = 0;
          this._fixedListeners.length = 0;
        },
        getFixedPriorityListeners: function () {
          return this._fixedListeners;
        },
        getSceneGraphPriorityListeners: function () {
          return this._sceneGraphListeners;
        }
      };
      function h(a) {
        var b = cc.Event;
        var c = a.type;
        if (c === b.ACCELERATION) {
          return f.ACCELERATION;
        } else if (c === b.KEYBOARD) {
          return f.KEYBOARD;
        } else if (c.startsWith(b.MOUSE)) {
          return f.MOUSE;
        } else {
          c.startsWith(b.TOUCH);
          return "";
        }
      }
      var j = {
        DIRTY_NONE: 0,
        DIRTY_FIXED_PRIORITY: 1,
        DIRTY_SCENE_GRAPH_PRIORITY: 2,
        DIRTY_ALL: 3,
        _listenersMap: {},
        _priorityDirtyFlagMap: {},
        _nodeListenersMap: {},
        _toAddedListeners: [],
        _toRemovedListeners: [],
        _dirtyListeners: {},
        _inDispatch: 0,
        _isEnabled: false,
        _currentTouch: null,
        _currentTouchListener: null,
        _internalCustomListenerIDs: [],
        _setDirtyForNode: function (b) {
          var c = this._nodeListenersMap[b._id];
          if (c) {
            for (var d = 0, e = c.length; d < e; d++) {
              var f = c[d]._getListenerID();
              if (this._dirtyListeners[f] == null) {
                this._dirtyListeners[f] = true;
              }
            }
          }
          if (b.childrenCount > 0) {
            for (var g = b._children, h = 0, j = g.length; h < j; h++) {
              this._setDirtyForNode(g[h]);
            }
          }
        },
        pauseTarget: function (b, c) {
          if (b instanceof cc._BaseNode) {
            var d;
            var e;
            var f = this._nodeListenersMap[b._id];
            if (f) {
              d = 0;
              e = f.length;
              d = 0;
              e = f.length;
              for (; d < e; d++) {
                var g = f[d];
                g._setPaused(true);
                if (g._claimedTouches && g._claimedTouches.includes(this._currentTouch)) {
                  this._clearCurTouch();
                }
              }
            }
            if (c === true) {
              var h = b._children;
              d = 0;
              e = h ? h.length : 0;
              for (; d < e; d++) {
                this.pauseTarget(h[d], true);
              }
            }
          }
        },
        resumeTarget: function (a, b) {
          if (a instanceof cc._BaseNode) {
            var c;
            var d;
            var e = this._nodeListenersMap[a._id];
            if (e) {
              c = 0;
              d = e.length;
              c = 0;
              d = e.length;
              for (; c < d; c++) {
                e[c]._setPaused(false);
              }
            }
            this._setDirtyForNode(a);
            if (b === true) {
              var f = a._children;
              c = 0;
              d = f ? f.length : 0;
              for (; c < d; c++) {
                this.resumeTarget(f[c], true);
              }
            }
          }
        },
        _addListener: function (a) {
          if (this._inDispatch === 0) {
            this._forceAddEventListener(a);
          } else {
            this._toAddedListeners.push(a);
          }
        },
        _forceAddEventListener: function (a) {
          var b = a._getListenerID();
          var c = this._listenersMap[b];
          if (!c) {
            c = new g();
            this._listenersMap[b] = c;
          }
          c.push(a);
          if (a._getFixedPriority() === 0) {
            this._setDirty(b, this.DIRTY_SCENE_GRAPH_PRIORITY);
            var d = a._getSceneGraphPriority();
            this._associateNodeAndEventListener(d, a);
            if (d.activeInHierarchy) {
              this.resumeTarget(d);
            }
          } else {
            this._setDirty(b, this.DIRTY_FIXED_PRIORITY);
          }
        },
        _getListeners: function (a) {
          return this._listenersMap[a];
        },
        _updateDirtyFlagForSceneGraph: function () {
          var a = this._dirtyListeners;
          for (var b in a) {
            this._setDirty(b, this.DIRTY_SCENE_GRAPH_PRIORITY);
          }
          this._dirtyListeners = {};
        },
        _removeAllListenersInVector: function (a) {
          if (a) {
            for (var b, c = a.length - 1; c >= 0; c--) {
              (b = a[c])._setRegistered(false);
              if (b._getSceneGraphPriority() != null) {
                this._dissociateNodeAndEventListener(b._getSceneGraphPriority(), b);
                b._setSceneGraphPriority(null);
              }
              if (this._inDispatch === 0) {
                cc.js.array.removeAt(a, c);
              }
            }
          }
        },
        _removeListenersForListenerID: function (b) {
          var c;
          var d = this._listenersMap[b];
          if (d) {
            var f = d.getFixedPriorityListeners();
            var g = d.getSceneGraphPriorityListeners();
            this._removeAllListenersInVector(g);
            this._removeAllListenersInVector(f);
            delete this._priorityDirtyFlagMap[b];
            if (!this._inDispatch) {
              d.clear();
              delete this._listenersMap[b];
            }
          }
          var h;
          var i = this._toAddedListeners;
          for (c = i.length - 1; c >= 0; c--) {
            if ((h = i[c]) && h._getListenerID() === b) {
              cc.js.array.removeAt(i, c);
            }
          }
        },
        _sortEventListeners: function (a) {
          var b = this.DIRTY_NONE;
          var c = this._priorityDirtyFlagMap;
          if (c[a]) {
            b = c[a];
          }
          if (b !== this.DIRTY_NONE) {
            c[a] = this.DIRTY_NONE;
            if (b & this.DIRTY_FIXED_PRIORITY) {
              this._sortListenersOfFixedPriority(a);
            }
            if (b & this.DIRTY_SCENE_GRAPH_PRIORITY && cc.director.getScene()) {
              this._sortListenersOfSceneGraphPriority(a);
            }
          }
        },
        _sortListenersOfSceneGraphPriority: function (a) {
          var b = this._getListeners(a);
          if (b) {
            var c = b.getSceneGraphPriorityListeners();
            if (c && c.length !== 0) {
              b.getSceneGraphPriorityListeners().sort(this._sortEventListenersOfSceneGraphPriorityDes);
            }
          }
        },
        _sortEventListenersOfSceneGraphPriorityDes: function (b, c) {
          var d = b._getSceneGraphPriority();
          var e = c._getSceneGraphPriority();
          if (!e || !e._activeInHierarchy || e._parent === null) {
            return -1;
          }
          if (!d || !d._activeInHierarchy || d._parent === null) {
            return 1;
          }
          for (var f = d, g = e, h = false; f._parent._id !== g._parent._id;) {
            f = f._parent._parent === null ? (h = true) && e : f._parent;
            g = g._parent._parent === null ? (h = true) && d : g._parent;
          }
          if (f._id === g._id) {
            if (f._id === e._id) {
              return -1;
            }
            if (f._id === d._id) {
              return 1;
            }
          }
          if (h) {
            return f._localZOrder - g._localZOrder;
          } else {
            return g._localZOrder - f._localZOrder;
          }
        },
        _sortListenersOfFixedPriority: function (a) {
          var b = this._listenersMap[a];
          if (b) {
            var c = b.getFixedPriorityListeners();
            if (c && c.length !== 0) {
              c.sort(this._sortListenersOfFixedPriorityAsc);
              for (var d = 0, e = c.length; d < e && !(c[d]._getFixedPriority() >= 0);) {
                ++d;
              }
              b.gt0Index = d;
            }
          }
        },
        _sortListenersOfFixedPriorityAsc: function (a, b) {
          return a._getFixedPriority() - b._getFixedPriority();
        },
        _onUpdateListeners: function (b) {
          var c;
          var d;
          var f;
          var g = b.getFixedPriorityListeners();
          var h = b.getSceneGraphPriorityListeners();
          var j = this._toRemovedListeners;
          if (h) {
            for (c = h.length - 1; c >= 0; c--) {
              if (!(d = h[c])._isRegistered()) {
                cc.js.array.removeAt(h, c);
                if ((f = j.indexOf(d)) !== -1) {
                  j.splice(f, 1);
                }
              }
            }
          }
          if (g) {
            for (c = g.length - 1; c >= 0; c--) {
              if (!(d = g[c])._isRegistered()) {
                cc.js.array.removeAt(g, c);
                if ((f = j.indexOf(d)) !== -1) {
                  j.splice(f, 1);
                }
              }
            }
          }
          if (h && h.length === 0) {
            b.clearSceneGraphListeners();
          }
          if (g && g.length === 0) {
            b.clearFixedListeners();
          }
        },
        frameUpdateListeners: function () {
          var a = this._listenersMap;
          var b = this._priorityDirtyFlagMap;
          for (var c in a) {
            if (a[c].empty()) {
              delete b[c];
              delete a[c];
            }
          }
          var d = this._toAddedListeners;
          if (d.length !== 0) {
            for (var e = 0, f = d.length; e < f; e++) {
              this._forceAddEventListener(d[e]);
            }
            d.length = 0;
          }
          if (this._toRemovedListeners.length !== 0) {
            this._cleanToRemovedListeners();
          }
        },
        _updateTouchListeners: function () {
          if (!(this._inDispatch > 1)) {
            var a;
            if (a = this._listenersMap[f.TOUCH_ONE_BY_ONE]) {
              this._onUpdateListeners(a);
            }
            if (a = this._listenersMap[f.TOUCH_ALL_AT_ONCE]) {
              this._onUpdateListeners(a);
            }
            var b = this._toAddedListeners;
            if (b.length !== 0) {
              for (var c = 0, d = b.length; c < d; c++) {
                this._forceAddEventListener(b[c]);
              }
              this._toAddedListeners.length = 0;
            }
            if (this._toRemovedListeners.length !== 0) {
              this._cleanToRemovedListeners();
            }
          }
        },
        _cleanToRemovedListeners: function () {
          for (var b = this._toRemovedListeners, c = 0; c < b.length; c++) {
            var d = b[c];
            var f = this._listenersMap[d._getListenerID()];
            if (f) {
              var g;
              var h = f.getFixedPriorityListeners();
              var j = f.getSceneGraphPriorityListeners();
              if (j && (g = j.indexOf(d)) !== -1) {
                j.splice(g, 1);
              }
              if (h && (g = h.indexOf(d)) !== -1) {
                h.splice(g, 1);
              }
            }
          }
          b.length = 0;
        },
        _onTouchEventCallback: function (a, b) {
          if (!a._isRegistered()) {
            return false;
          }
          var d = b.event;
          var e = d.currentTouch;
          d.currentTarget = a._node;
          var f;
          var g = false;
          var h = d.getEventCode();
          var i = cc.Event.EventTouch;
          if (h === i.BEGAN) {
            if (!cc.macro.ENABLE_MULTI_TOUCH && j._currentTouch) {
              var c = j._currentTouchListener._node;
              if (c && c.activeInHierarchy) {
                return false;
              }
            }
            if (a.onTouchBegan && (g = a.onTouchBegan(e, d)) && a._registered) {
              a._claimedTouches.push(e);
              j._currentTouchListener = a;
              j._currentTouch = e;
            }
          } else if (a._claimedTouches.length > 0 && (f = a._claimedTouches.indexOf(e)) !== -1) {
            g = true;
            if (!cc.macro.ENABLE_MULTI_TOUCH && j._currentTouch && j._currentTouch !== e) {
              return false;
            }
            if (h === i.MOVED && a.onTouchMoved) {
              a.onTouchMoved(e, d);
            } else if (h === i.ENDED) {
              if (a.onTouchEnded) {
                a.onTouchEnded(e, d);
              }
              if (a._registered) {
                a._claimedTouches.splice(f, 1);
              }
              j._clearCurTouch();
            } else if (h === i.CANCELED) {
              if (a.onTouchCancelled) {
                a.onTouchCancelled(e, d);
              }
              if (a._registered) {
                a._claimedTouches.splice(f, 1);
              }
              j._clearCurTouch();
            }
          }
          if (d.isStopped()) {
            j._updateTouchListeners(d);
            return true;
          } else {
            return !(!g || !a.swallowTouches || (b.needsMutableSet && b.touches.splice(e, 1), 0));
          }
        },
        _dispatchTouchEvent: function (b) {
          this._sortEventListeners(f.TOUCH_ONE_BY_ONE);
          this._sortEventListeners(f.TOUCH_ALL_AT_ONCE);
          var c = this._getListeners(f.TOUCH_ONE_BY_ONE);
          var d = this._getListeners(f.TOUCH_ALL_AT_ONCE);
          if (c !== null || d !== null) {
            var e = b.getTouches();
            var g = cc.js.array.copy(e);
            var h = {
              event: b,
              needsMutableSet: c && d,
              touches: g,
              selTouch: null
            };
            if (c) {
              for (var a = 0; a < e.length; a++) {
                b.currentTouch = e[a];
                b._propagationStopped = b._propagationImmediateStopped = false;
                this._dispatchEventToListeners(c, this._onTouchEventCallback, h);
              }
            }
            if (!(d && g.length > 0 && (this._dispatchEventToListeners(d, this._onTouchesEventCallback, {
              event: b,
              touches: g
            }), b.isStopped()))) {
              this._updateTouchListeners(b);
            }
          }
        },
        _onTouchesEventCallback: function (a, b) {
          if (!a._registered) {
            return false;
          }
          var c = cc.Event.EventTouch;
          var d = b.event;
          var e = b.touches;
          var f = d.getEventCode();
          d.currentTarget = a._node;
          if (f === c.BEGAN && a.onTouchesBegan) {
            a.onTouchesBegan(e, d);
          } else if (f === c.MOVED && a.onTouchesMoved) {
            a.onTouchesMoved(e, d);
          } else if (f === c.ENDED && a.onTouchesEnded) {
            a.onTouchesEnded(e, d);
          } else if (f === c.CANCELED && a.onTouchesCancelled) {
            a.onTouchesCancelled(e, d);
          }
          return !!d.isStopped() && (j._updateTouchListeners(d), true);
        },
        _associateNodeAndEventListener: function (a, b) {
          var c = this._nodeListenersMap[a._id];
          if (!c) {
            c = [];
            this._nodeListenersMap[a._id] = c;
          }
          c.push(b);
        },
        _dissociateNodeAndEventListener: function (a, b) {
          var c = this._nodeListenersMap[a._id];
          if (c) {
            cc.js.array.remove(c, b);
            if (c.length === 0) {
              delete this._nodeListenersMap[a._id];
            }
          }
        },
        _dispatchEventToListeners: function (b, d, e) {
          var f;
          var g;
          var h = false;
          var i = b.getFixedPriorityListeners();
          var a = b.getSceneGraphPriorityListeners();
          var j = 0;
          if (i && i.length !== 0) {
            for (; j < b.gt0Index; ++j) {
              if ((g = i[j]).isEnabled() && !g._isPaused() && g._isRegistered() && d(g, e)) {
                h = true;
                break;
              }
            }
          }
          if (a && !h) {
            for (f = 0; f < a.length; f++) {
              if ((g = a[f]).isEnabled() && !g._isPaused() && g._isRegistered() && d(g, e)) {
                h = true;
                break;
              }
            }
          }
          if (i && !h) {
            for (; j < i.length; ++j) {
              if ((g = i[j]).isEnabled() && !g._isPaused() && g._isRegistered() && d(g, e)) {
                h = true;
                break;
              }
            }
          }
        },
        _setDirty: function (a, b) {
          var c = this._priorityDirtyFlagMap;
          if (c[a] == null) {
            c[a] = b;
          } else {
            c[a] = b | c[a];
          }
        },
        _sortNumberAsc: function (a, b) {
          return a - b;
        },
        hasEventListener: function (a) {
          return !!this._getListeners(a);
        },
        addListener: function (a, b) {
          if (cc.js.isNumber(b) || b instanceof cc._BaseNode) {
            if (a instanceof cc.EventListener) {
              if (a._isRegistered()) {
                return;
              }
            } else {
              a = cc.EventListener.create(a);
            }
            if (a.checkAvailable()) {
              if (cc.js.isNumber(b)) {
                if (b === 0) {
                  return;
                }
                a._setSceneGraphPriority(null);
                a._setFixedPriority(b);
                a._setRegistered(true);
                a._setPaused(false);
                this._addListener(a);
              } else {
                a._setSceneGraphPriority(b);
                a._setFixedPriority(0);
                a._setRegistered(true);
                this._addListener(a);
              }
              return a;
            }
          }
        },
        addCustomListener: function (a, b) {
          var c = new cc.EventListener.create({
            event: cc.EventListener.CUSTOM,
            eventName: a,
            callback: b
          });
          this.addListener(c, 1);
          return c;
        },
        removeListener: function (b) {
          if (b != null) {
            var d;
            var f = this._listenersMap;
            for (var g in f) {
              var h = f[g];
              var i = h.getFixedPriorityListeners();
              var j = h.getSceneGraphPriorityListeners();
              if (d = this._removeListenerInVector(j, b)) {
                this._setDirty(b._getListenerID(), this.DIRTY_SCENE_GRAPH_PRIORITY);
              } else if (d = this._removeListenerInVector(i, b)) {
                this._setDirty(b._getListenerID(), this.DIRTY_FIXED_PRIORITY);
              }
              if (h.empty()) {
                delete this._priorityDirtyFlagMap[b._getListenerID()];
                delete f[g];
              }
              if (d) {
                break;
              }
            }
            if (!d) {
              for (var k = this._toAddedListeners, m = k.length - 1; m >= 0; m--) {
                var o = k[m];
                if (o === b) {
                  cc.js.array.removeAt(k, m);
                  o._setRegistered(false);
                  break;
                }
              }
            }
            if (this._currentTouchListener === b) {
              this._clearCurTouch();
            }
          }
        },
        _clearCurTouch: function () {
          this._currentTouchListener = null;
          this._currentTouch = null;
        },
        _removeListenerInCallback: function (a, b) {
          if (a == null) {
            return false;
          }
          for (var c = a.length - 1; c >= 0; c--) {
            var d = a[c];
            if (d._onCustomEvent === b || d._onEvent === b) {
              d._setRegistered(false);
              if (d._getSceneGraphPriority() != null) {
                this._dissociateNodeAndEventListener(d._getSceneGraphPriority(), d);
                d._setSceneGraphPriority(null);
              }
              if (this._inDispatch === 0) {
                cc.js.array.removeAt(a, c);
              } else {
                this._toRemovedListeners.push(d);
              }
              return true;
            }
          }
          return false;
        },
        _removeListenerInVector: function (a, b) {
          if (a == null) {
            return false;
          }
          for (var c = a.length - 1; c >= 0; c--) {
            var d = a[c];
            if (d === b) {
              d._setRegistered(false);
              if (d._getSceneGraphPriority() != null) {
                this._dissociateNodeAndEventListener(d._getSceneGraphPriority(), d);
                d._setSceneGraphPriority(null);
              }
              if (this._inDispatch === 0) {
                cc.js.array.removeAt(a, c);
              } else {
                this._toRemovedListeners.push(d);
              }
              return true;
            }
          }
          return false;
        },
        removeListeners: function (b, d) {
          var e = this;
          if (cc.js.isNumber(b) || b instanceof cc._BaseNode) {
            if (b._id !== undefined) {
              var g;
              var i = e._nodeListenersMap[b._id];
              if (i) {
                var j = cc.js.array.copy(i);
                for (g = 0; g < j.length; g++) {
                  e.removeListener(j[g]);
                }
                delete e._nodeListenersMap[b._id];
              }
              var a = e._toAddedListeners;
              for (g = 0; g < a.length;) {
                var k = a[g];
                if (k._getSceneGraphPriority() === b) {
                  k._setSceneGraphPriority(null);
                  k._setRegistered(false);
                  a.splice(g, 1);
                } else {
                  ++g;
                }
              }
              if (d === true) {
                var m;
                var n = b.children;
                g = 0;
                m = n.length;
                for (; g < m; g++) {
                  e.removeListeners(n[g], true);
                }
              }
            } else if (b === cc.EventListener.TOUCH_ONE_BY_ONE) {
              e._removeListenersForListenerID(f.TOUCH_ONE_BY_ONE);
            } else if (b === cc.EventListener.TOUCH_ALL_AT_ONCE) {
              e._removeListenersForListenerID(f.TOUCH_ALL_AT_ONCE);
            } else if (b === cc.EventListener.MOUSE) {
              e._removeListenersForListenerID(f.MOUSE);
            } else if (b === cc.EventListener.ACCELERATION) {
              e._removeListenersForListenerID(f.ACCELERATION);
            } else if (b === cc.EventListener.KEYBOARD) {
              e._removeListenersForListenerID(f.KEYBOARD);
            }
          }
        },
        removeCustomListeners: function (a) {
          this._removeListenersForListenerID(a);
        },
        removeAllListeners: function () {
          var a = this._listenersMap;
          var b = this._internalCustomListenerIDs;
          for (var c in a) {
            if (b.indexOf(c) === -1) {
              this._removeListenersForListenerID(c);
            }
          }
        },
        setPriority: function (a, b) {
          if (a != null) {
            var c = this._listenersMap;
            for (var d in c) {
              var e = c[d].getFixedPriorityListeners();
              if (e && e.indexOf(a) !== -1) {
                a._getSceneGraphPriority();
                if (a._getFixedPriority() !== b) {
                  a._setFixedPriority(b);
                  this._setDirty(a._getListenerID(), this.DIRTY_FIXED_PRIORITY);
                }
                return;
              }
            }
          }
        },
        setEnabled: function (a) {
          this._isEnabled = a;
        },
        isEnabled: function () {
          return this._isEnabled;
        },
        dispatchEvent: function (a) {
          if (this._isEnabled && (this._updateDirtyFlagForSceneGraph(), this._inDispatch++, a && a.getType)) {
            if (a.getType().startsWith(cc.Event.TOUCH)) {
              this._dispatchTouchEvent(a);
              this._inDispatch--;
              return;
            }
            var b = h(a);
            this._sortEventListeners(b);
            var c = this._listenersMap[b];
            if (c != null) {
              this._dispatchEventToListeners(c, this._onListenerCallback, a);
              this._onUpdateListeners(c);
            }
            this._inDispatch--;
          }
        },
        _onListenerCallback: function (a, b) {
          b.currentTarget = a._target;
          a._onEvent(b);
          return b.isStopped();
        },
        dispatchCustomEvent: function (a, b) {
          var c = new cc.Event.EventCustom(a);
          c.setUserData(b);
          this.dispatchEvent(c);
        }
      };
      d.get(cc, "eventManager", function () {
        return j;
      });
      c.exports = cc.internal.eventManager = j;
    }, {
      "../platform/js": 183,
      "./CCEventListener": 130
    }],
    132: [function () {
      "use strict";
  
      cc.Touch = function (a, b, c) {
        this._lastModified = 0;
        this.setTouchInfo(c, a, b);
      };
      cc.Touch.prototype = {
        constructor: cc.Touch,
        getLocation: function () {
          return cc.v2(this._point.x, this._point.y);
        },
        getLocationX: function () {
          return this._point.x;
        },
        getLocationY: function () {
          return this._point.y;
        },
        getPreviousLocation: function () {
          return cc.v2(this._prevPoint.x, this._prevPoint.y);
        },
        getStartLocation: function () {
          return cc.v2(this._startPoint.x, this._startPoint.y);
        },
        getDelta: function () {
          return this._point.sub(this._prevPoint);
        },
        getLocationInView: function () {
          return cc.v2(this._point.x, cc.view._designResolutionSize.height - this._point.y);
        },
        getPreviousLocationInView: function () {
          return cc.v2(this._prevPoint.x, cc.view._designResolutionSize.height - this._prevPoint.y);
        },
        getStartLocationInView: function () {
          return cc.v2(this._startPoint.x, cc.view._designResolutionSize.height - this._startPoint.y);
        },
        getID: function () {
          return this._id;
        },
        setTouchInfo: function (a, b, c) {
          this._prevPoint = this._point;
          this._point = cc.v2(b || 0, c || 0);
          this._id = a;
          if (!this._startPointCaptured) {
            this._startPoint = cc.v2(this._point);
            cc.view._convertPointWithScale(this._startPoint);
            this._startPointCaptured = true;
          }
        },
        _setPoint: function (a, b) {
          if (b === undefined) {
            this._point.x = a.x;
            this._point.y = a.y;
          } else {
            this._point.x = a;
            this._point.y = b;
          }
        },
        _setPrevPoint: function (a, b) {
          this._prevPoint = b === undefined ? cc.v2(a.x, a.y) : cc.v2(a || 0, b || 0);
        }
      };
    }, {}],
    133: [function (a, b) {
      "use strict";
  
      a("./CCEvent");
      a("./CCTouch");
      a("./CCEventListener");
      var c = a("./CCEventManager");
      b.exports = c;
    }, {
      "./CCEvent": 129,
      "./CCEventListener": 130,
      "./CCEventManager": 131,
      "./CCTouch": 132
    }],
    134: [function (b, d) {
      "use strict";
  
      var e = b("../platform/js");
      var f = b("../platform/callbacks-invoker");
      var g = e.array;
      var h = g.fastRemove;
      var i = g.fastRemoveAll;
      function a() {
        f.call(this);
      }
      e.extend(a, f);
      var j = a.prototype;
      j.__on = j.on;
      j.on = function (a, b, c, d) {
        if (b) {
          if (!this.hasEventListener(a, b, c)) {
            this.__on(a, b, c, d);
            if (c && c.__eventTargets) {
              c.__eventTargets.push(this);
            }
          }
          return b;
        }
      };
      j.__off = j.off;
      j.off = function (b, d, e) {
        if (d) {
          var f = this.__off(b, d, e);
          if (f && e && e.__eventTargets) {
            h(e.__eventTargets, this);
          }
          return f;
        }
        var g = this._callbackTable[b];
        if (!g) {
          return false;
        }
        for (var i = g.callbackInfos, a = i.length, j = 0; j < a; ++j) {
          var k = i[j] && i[j].target;
          if (k && k.__eventTargets) {
            h(k.__eventTargets, this);
          }
        }
        this.removeAll(b);
        return i.length < a;
      };
      j.targetOff = function (a) {
        this.removeAll(a);
        if (a && a.__eventTargets) {
          i(a.__eventTargets, this);
        }
      };
      j.once = function (a, b, c) {
        this.on(a, b, c, true);
      };
      j.dispatchEvent = function (a) {
        this.emit(a.type, a);
      };
      j.clear = function () {
        for (var a in this._callbackTable) {
          this.off(a);
        }
      };
      cc.EventTarget = d.exports = a;
    }, {
      "../platform/callbacks-invoker": 175,
      "../platform/js": 183
    }],
    135: [function (a, b) {
      "use strict";
  
      var c = a("../platform/js");
      cc.Event = function (a, b) {
        this.type = a;
        this.bubbles = !!b;
        this.target = null;
        this.currentTarget = null;
        this.eventPhase = 0;
        this._propagationStopped = false;
        this._propagationImmediateStopped = false;
      };
      cc.Event.prototype = {
        constructor: cc.Event,
        unuse: function () {
          this.type = cc.Event.NO_TYPE;
          this.target = null;
          this.currentTarget = null;
          this.eventPhase = cc.Event.NONE;
          this._propagationStopped = false;
          this._propagationImmediateStopped = false;
        },
        reuse: function (a, b) {
          this.type = a;
          this.bubbles = b || false;
        },
        stopPropagation: function () {
          this._propagationStopped = true;
        },
        stopPropagationImmediate: function () {
          this._propagationImmediateStopped = true;
        },
        isStopped: function () {
          return this._propagationStopped || this._propagationImmediateStopped;
        },
        getCurrentTarget: function () {
          return this.currentTarget;
        },
        getType: function () {
          return this.type;
        }
      };
      cc.Event.NO_TYPE = "no_type";
      cc.Event.TOUCH = "touch";
      cc.Event.MOUSE = "mouse";
      cc.Event.KEYBOARD = "keyboard";
      cc.Event.ACCELERATION = "acceleration";
      cc.Event.NONE = 0;
      cc.Event.CAPTURING_PHASE = 1;
      cc.Event.AT_TARGET = 2;
      cc.Event.BUBBLING_PHASE = 3;
      function d(a, b) {
        cc.Event.call(this, a, b);
        this.detail = null;
      }
      c.extend(d, cc.Event);
      d.prototype.reset = d;
      d.prototype.setUserData = function (a) {
        this.detail = a;
      };
      d.prototype.getUserData = function () {
        return this.detail;
      };
      d.prototype.getEventName = cc.Event.prototype.getType;
      var f = new c.Pool(10);
      d.put = function (a) {
        f.put(a);
      };
      d.get = function (a, b) {
        var c = f._get();
        if (c) {
          c.reset(a, b);
        } else {
          c = new d(a, b);
        }
        return c;
      };
      cc.Event.EventCustom = d;
      b.exports = cc.Event;
    }, {
      "../platform/js": 183
    }],
    136: [function (a) {
      "use strict";
  
      a("./event");
      a("./event-target");
      a("./system-event");
    }, {
      "./event": 135,
      "./event-target": 134,
      "./system-event": 137
    }],
    137: [function (b, d) {
      "use strict";
  
      var e = b("../event/event-target");
      var f = b("../event-manager");
      var g = b("../platform/CCInputManager");
      var h = cc.Enum({
        KEY_DOWN: "keydown",
        KEY_UP: "keyup",
        DEVICEMOTION: "devicemotion"
      });
      var j = null;
      var k = null;
      var i = cc.Class({
        name: "SystemEvent",
        extends: e,
        statics: {
          EventType: h
        },
        setAccelerometerEnabled: function (a) {
          if (a && window.DeviceMotionEvent && typeof DeviceMotionEvent.requestPermission == "function") {
            DeviceMotionEvent.requestPermission().then(function (a) {
              g.setAccelerometerEnabled(a === "granted");
            });
          } else {
            g.setAccelerometerEnabled(a);
          }
        },
        setAccelerometerInterval: function (a) {
          g.setAccelerometerInterval(a);
        },
        on: function (a, b, c, d) {
          this._super(a, b, c, d);
          if (!(a !== h.KEY_DOWN && a !== h.KEY_UP)) {
            if (!j) {
              j = cc.EventListener.create({
                event: cc.EventListener.KEYBOARD,
                onKeyPressed: function (a, b) {
                  b.type = h.KEY_DOWN;
                  cc.systemEvent.dispatchEvent(b);
                },
                onKeyReleased: function (a, b) {
                  b.type = h.KEY_UP;
                  cc.systemEvent.dispatchEvent(b);
                }
              });
            }
            if (!f.hasEventListener(cc.EventListener.ListenerID.KEYBOARD)) {
              f.addListener(j, 1);
            }
          }
          if (a === h.DEVICEMOTION) {
            if (!k) {
              k = cc.EventListener.create({
                event: cc.EventListener.ACCELERATION,
                callback: function (a, b) {
                  b.type = h.DEVICEMOTION;
                  cc.systemEvent.dispatchEvent(b);
                }
              });
            }
            if (!f.hasEventListener(cc.EventListener.ListenerID.ACCELERATION)) {
              f.addListener(k, 1);
            }
          }
        },
        off: function (a, b, d) {
          this._super(a, b, d);
          if (j && (a === h.KEY_DOWN || a === h.KEY_UP)) {
            var e = this.hasEventListener(h.KEY_DOWN);
            var g = this.hasEventListener(h.KEY_UP);
            if (!(e || g)) {
              f.removeListener(j);
            }
          }
          if (k && a === h.DEVICEMOTION) {
            if (!this.hasEventListener(h.DEVICEMOTION)) {
              f.removeListener(k);
            }
          }
        }
      });
      cc.SystemEvent = d.exports = i;
      cc.systemEvent = new cc.SystemEvent();
    }, {
      "../event-manager": 133,
      "../event/event-target": 134,
      "../platform/CCInputManager": 166
    }],
    138: [function (b, d, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var f = i(b("../value-types/vec3"));
      var g = i(b("../value-types/mat3"));
      var j = i(b("./enums"));
      function i(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      var a = new f.default();
      var k = new f.default();
      var c = new g.default();
      function l(a, b, d) {
        var e = c.m;
        var g = d.m;
        e[0] = Math.abs(g[0]);
        e[1] = Math.abs(g[1]);
        e[2] = Math.abs(g[2]);
        e[3] = Math.abs(g[4]);
        e[4] = Math.abs(g[5]);
        e[5] = Math.abs(g[6]);
        e[6] = Math.abs(g[8]);
        e[7] = Math.abs(g[9]);
        e[8] = Math.abs(g[10]);
        f.default.transformMat3(a, b, c);
      }
      var h = function () {
        function b(b, c, d, e, g, a) {
          this.center = undefined;
          this.halfExtents = undefined;
          this._type = undefined;
          this._type = j.default.SHAPE_AABB;
          this.center = new f.default(b, c, d);
          this.halfExtents = new f.default(e, g, a);
        }
        b.create = function (c, d, e, f, g, h) {
          return new b(c, d, e, f, g, h);
        };
        b.clone = function (a) {
          return new b(a.center.x, a.center.y, a.center.z, a.halfExtents.x, a.halfExtents.y, a.halfExtents.z);
        };
        b.copy = function (a, b) {
          f.default.copy(a.center, b.center);
          f.default.copy(a.halfExtents, b.halfExtents);
          return a;
        };
        b.fromPoints = function (b, c, d) {
          f.default.scale(b.center, f.default.add(a, c, d), 0.5);
          f.default.scale(b.halfExtents, f.default.sub(k, d, c), 0.5);
          return b;
        };
        b.set = function (b, c, d, e, g, h, a) {
          f.default.set(b.center, c, d, e);
          f.default.set(b.halfExtents, g, h, a);
          return b;
        };
        var c = b.prototype;
        c.getBoundary = function (a, b) {
          f.default.sub(a, this.center, this.halfExtents);
          f.default.add(b, this.center, this.halfExtents);
        };
        c.transform = function (a, b, c, d, e) {
          if (!e) {
            e = this;
          }
          f.default.transformMat4(e.center, this.center, a);
          l(e.halfExtents, this.halfExtents, a);
        };
        return b;
      }();
      e.default = h;
      d.exports = e.default;
    }, {
      "../value-types/mat3": 252,
      "../value-types/vec3": 261,
      "./enums": 140
    }],
    139: [function (b, d, e) {
      "use strict";
  
      e.__esModule = true;
      e.point_plane = l;
      e.pt_point_aabb = function (a, b, d) {
        g.Vec3.copy(a, b);
        g.Vec3.subtract(n, d.center, d.halfExtents);
        g.Vec3.add(c, d.center, d.halfExtents);
        a.x = a.x < n.x ? n.x : a.x;
        a.y = a.y < n.x ? n.y : a.y;
        a.z = a.z < n.x ? n.z : a.z;
        a.x = a.x > c.x ? c.x : a.x;
        a.y = a.y > c.x ? c.y : a.y;
        a.z = a.z > c.x ? c.z : a.z;
        return a;
      };
      e.pt_point_obb = function (b, d, e) {
        var i = e.orientation.m;
        g.Vec3.set(j, i[0], i[1], i[2]);
        g.Vec3.set(k, i[3], i[4], i[5]);
        g.Vec3.set(m, i[6], i[7], i[8]);
        o[0] = j;
        o[1] = k;
        o[2] = m;
        h[0] = e.halfExtents.x;
        h[1] = e.halfExtents.y;
        h[2] = e.halfExtents.z;
        g.Vec3.subtract(a, d, e.center);
        g.Vec3.set(b, e.center.x, e.center.y, e.center.z);
        for (var c = 0; c < 3; c++) {
          var n = g.Vec3.dot(a, o[c]);
          if (n > h[c]) {
            n = h[c];
          }
          if (n < -h[c]) {
            n = -h[c];
          }
          b.x += n * o[c].x;
          b.y += n * o[c].y;
          b.z += n * o[c].z;
        }
        return b;
      };
      e.pt_point_plane = function (a, b, c) {
        var d = l(b, c);
        return g.Vec3.subtract(a, b, g.Vec3.multiplyScalar(a, c.n, d));
      };
      var g = b("../value-types");
      var j = new g.Vec3();
      var k = new g.Vec3();
      var m = new g.Vec3();
      var a = new g.Vec3();
      var n = new g.Vec3();
      var c = new g.Vec3();
      var o = [,,,];
      var h = [,,,];
      function l(a, b) {
        return g.Vec3.dot(b.n, a) - b.d;
      }
    }, {
      "../value-types": 251
    }],
    140: [function (a, b, c) {
      "use strict";
  
      c.__esModule = true;
      c.default = undefined;
      c.default = {
        SHAPE_RAY: 1,
        SHAPE_LINE: 2,
        SHAPE_SPHERE: 4,
        SHAPE_AABB: 8,
        SHAPE_OBB: 16,
        SHAPE_PLANE: 32,
        SHAPE_TRIANGLE: 64,
        SHAPE_FRUSTUM: 128,
        SHAPE_FRUSTUM_ACCURATE: 256
      };
      b.exports = c.default;
    }, {}],
    141: [function (b, d, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var f = b("../value-types");
      var g = i(b("./enums"));
      var j = i(b("./plane"));
      function i(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      function a(a, b) {
        for (var c = 0; c < b.length; c++) {
          var d = b[c];
          d.enumerable = d.enumerable || false;
          d.configurable = true;
          if ("value" in d) {
            d.writable = true;
          }
          Object.defineProperty(a, d.key, d);
        }
      }
      var k = [,,,,,,,,];
      k[0] = new f.Vec3(1, 1, 1);
      k[1] = new f.Vec3(-1, 1, 1);
      k[2] = new f.Vec3(-1, -1, 1);
      k[3] = new f.Vec3(1, -1, 1);
      k[4] = new f.Vec3(1, 1, -1);
      k[5] = new f.Vec3(-1, 1, -1);
      k[6] = new f.Vec3(-1, -1, -1);
      k[7] = new f.Vec3(1, -1, -1);
      var m;
      var c = function () {
        function b() {
          this.planes = undefined;
          this.vertices = undefined;
          this._type = undefined;
          this._type = g.default.SHAPE_FRUSTUM;
          this.planes = [,,,,,,];
          for (var a = 0; a < 6; ++a) {
            this.planes[a] = j.default.create(0, 0, 0, 0);
          }
          this.vertices = [,,,,,,,,];
          for (var b = 0; b < 8; ++b) {
            this.vertices[b] = new f.Vec3();
          }
        }
        b.create = function () {
          return new b();
        };
        b.clone = function (a) {
          return b.copy(new b(), a);
        };
        b.copy = function (a, b) {
          a._type = b._type;
          for (var c = 0; c < 6; ++c) {
            j.default.copy(a.planes[c], b.planes[c]);
          }
          for (var d = 0; d < 8; ++d) {
            f.Vec3.copy(a.vertices[d], b.vertices[d]);
          }
          return a;
        };
        var c;
        var d;
        var h = b.prototype;
        h.update = function (b, c) {
          var d = b.m;
          f.Vec3.set(this.planes[0].n, d[3] + d[0], d[7] + d[4], d[11] + d[8]);
          this.planes[0].d = -(d[15] + d[12]);
          f.Vec3.set(this.planes[1].n, d[3] - d[0], d[7] - d[4], d[11] - d[8]);
          this.planes[1].d = -(d[15] - d[12]);
          f.Vec3.set(this.planes[2].n, d[3] + d[1], d[7] + d[5], d[11] + d[9]);
          this.planes[2].d = -(d[15] + d[13]);
          f.Vec3.set(this.planes[3].n, d[3] - d[1], d[7] - d[5], d[11] - d[9]);
          this.planes[3].d = -(d[15] - d[13]);
          f.Vec3.set(this.planes[4].n, d[3] + d[2], d[7] + d[6], d[11] + d[10]);
          this.planes[4].d = -(d[15] + d[14]);
          f.Vec3.set(this.planes[5].n, d[3] - d[2], d[7] - d[6], d[11] - d[10]);
          this.planes[5].d = -(d[15] - d[14]);
          if (this._type === g.default.SHAPE_FRUSTUM_ACCURATE) {
            for (var e = 0; e < 6; e++) {
              var h = this.planes[e];
              var i = 1 / h.n.length();
              f.Vec3.multiplyScalar(h.n, h.n, i);
              h.d *= i;
            }
            for (var j = 0; j < 8; j++) {
              f.Vec3.transformMat4(this.vertices[j], k[j], c);
            }
          }
        };
        h.transform = function (a) {
          if (this._type === g.default.SHAPE_FRUSTUM_ACCURATE) {
            for (var b = 0; b < 8; b++) {
              f.Vec3.transformMat4(this.vertices[b], this.vertices[b], a);
            }
            j.default.fromPoints(this.planes[0], this.vertices[1], this.vertices[5], this.vertices[6]);
            j.default.fromPoints(this.planes[1], this.vertices[3], this.vertices[7], this.vertices[4]);
            j.default.fromPoints(this.planes[2], this.vertices[6], this.vertices[7], this.vertices[3]);
            j.default.fromPoints(this.planes[3], this.vertices[0], this.vertices[4], this.vertices[5]);
            j.default.fromPoints(this.planes[4], this.vertices[2], this.vertices[3], this.vertices[0]);
            j.default.fromPoints(this.planes[0], this.vertices[7], this.vertices[6], this.vertices[5]);
          }
        };
        c = b;
        if (d = [{
          key: "accurate",
          set: function (a) {
            this._type = a ? g.default.SHAPE_FRUSTUM_ACCURATE : g.default.SHAPE_FRUSTUM;
          }
        }]) {
          a(c.prototype, d);
        }
        Object.defineProperty(c, "prototype", {
          writable: false
        });
        return b;
      }();
      e.default = c;
      m = new f.Vec3();
      c.createOrtho = function (b, d, e, g, i, a) {
        var k = d / 2;
        var c = e / 2;
        f.Vec3.set(m, k, c, g);
        f.Vec3.transformMat4(b.vertices[0], m, a);
        f.Vec3.set(m, -k, c, g);
        f.Vec3.transformMat4(b.vertices[1], m, a);
        f.Vec3.set(m, -k, -c, g);
        f.Vec3.transformMat4(b.vertices[2], m, a);
        f.Vec3.set(m, k, -c, g);
        f.Vec3.transformMat4(b.vertices[3], m, a);
        f.Vec3.set(m, k, c, i);
        f.Vec3.transformMat4(b.vertices[4], m, a);
        f.Vec3.set(m, -k, c, i);
        f.Vec3.transformMat4(b.vertices[5], m, a);
        f.Vec3.set(m, -k, -c, i);
        f.Vec3.transformMat4(b.vertices[6], m, a);
        f.Vec3.set(m, k, -c, i);
        f.Vec3.transformMat4(b.vertices[7], m, a);
        j.default.fromPoints(b.planes[0], b.vertices[1], b.vertices[6], b.vertices[5]);
        j.default.fromPoints(b.planes[1], b.vertices[3], b.vertices[4], b.vertices[7]);
        j.default.fromPoints(b.planes[2], b.vertices[6], b.vertices[3], b.vertices[7]);
        j.default.fromPoints(b.planes[3], b.vertices[0], b.vertices[5], b.vertices[4]);
        j.default.fromPoints(b.planes[4], b.vertices[2], b.vertices[0], b.vertices[3]);
        j.default.fromPoints(b.planes[0], b.vertices[7], b.vertices[5], b.vertices[6]);
      };
      d.exports = e.default;
    }, {
      "../value-types": 251,
      "./enums": 140,
      "./plane": 146
    }],
    142: [function (b, g, e) {
      "use strict";
  
      e.__esModule = true;
      var i = {
        enums: true,
        Triangle: true,
        Aabb: true,
        Ray: true,
        intersect: true,
        Sphere: true,
        Obb: true,
        Frustum: true,
        Line: true,
        Plane: true
      };
      e.intersect = e.enums = e.Triangle = e.Sphere = e.Ray = e.Plane = e.Obb = e.Line = e.Frustum = e.Aabb = undefined;
      var j = q(b("./enums"));
      e.enums = j.default;
      var k = q(b("./triangle"));
      e.Triangle = k.default;
      var m = q(b("./aabb"));
      e.Aabb = m.default;
      var a = q(b("./ray"));
      e.Ray = a.default;
      var n = q(b("./intersect"));
      e.intersect = n.default;
      var c = q(b("./sphere"));
      e.Sphere = c.default;
      var l = q(b("./obb"));
      e.Obb = l.default;
      var h = q(b("./frustum"));
      e.Frustum = h.default;
      var o = q(b("./line"));
      e.Line = o.default;
      var f = q(b("./plane"));
      e.Plane = f.default;
      var d = b("./distance");
      function q(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      Object.keys(d).forEach(function (a) {
        if (a !== "default" && a !== "__esModule") {
          if (!(Object.prototype.hasOwnProperty.call(i, a) || a in e && e[a] === d[a])) {
            e[a] = d[a];
          }
        }
      });
      cc.geomUtils = g.exports;
    }, {
      "./aabb": 138,
      "./distance": 139,
      "./enums": 140,
      "./frustum": 141,
      "./intersect": 143,
      "./line": 144,
      "./obb": 145,
      "./plane": 146,
      "./ray": 147,
      "./sphere": 148,
      "./triangle": 149
    }],
    143: [function (aa, t, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var ba = l(aa("../../renderer/gfx"));
      var ca = l(aa("../../renderer/memop/recycle-pool"));
      var da = aa("../value-types");
      var r = l(aa("./aabb"));
      var a = function (a) {
        if (a && a.__esModule) {
          return a;
        }
        if (a === null || typeof a != "object" && typeof a != "function") {
          return {
            default: a
          };
        }
        var b = h(undefined);
        if (b && b.has(a)) {
          return b.get(a);
        }
        var c = {};
        var d = Object.defineProperty && Object.getOwnPropertyDescriptor;
        for (var e in a) {
          if (e !== "default" && Object.prototype.hasOwnProperty.call(a, e)) {
            var f = d ? Object.getOwnPropertyDescriptor(a, e) : null;
            if (f && (f.get || f.set)) {
              Object.defineProperty(c, e, f);
            } else {
              c[e] = a[e];
            }
          }
        }
        c.default = a;
        if (b) {
          b.set(a, c);
        }
        return c;
      }(aa("./distance"));
      var i = l(aa("./enums"));
      var s = l(aa("./ray"));
      var c = l(aa("./triangle"));
      function h(a) {
        if (typeof WeakMap != "function") {
          return null;
        }
        var b = new WeakMap();
        var c = new WeakMap();
        return (h = function (a) {
          if (a) {
            return c;
          } else {
            return b;
          }
        })(a);
      }
      function l(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      var f;
      var n;
      var ea;
      var fa;
      var ga;
      var ha;
      var ia;
      var ja;
      var ka;
      var la;
      var ma;
      var o;
      var na;
      var oa;
      var pa;
      var qa = function () {
        var a = c.default.create();
        var b = Infinity;
        function g(a, b, c, d) {
          da.Vec3.set(a, b[c * d], b[c * d + 1], b[c * d + 2]);
        }
        return function (e, i) {
          b = Infinity;
          for (var j = i._subMeshes, k = 0; k < j.length; k++) {
            if (j[k]._primitiveType === ba.default.PT_TRIANGLES) {
              for (var m = i._subDatas[k] || i._subDatas[0], n = i._getAttrMeshData(k, ba.default.ATTR_POSITION), p = m.getIData(Uint16Array), q = m.vfm.element(ba.default.ATTR_POSITION).num, r = 0; r < p.length; r += 3) {
                g(a.a, n, p[r], q);
                g(a.b, n, p[r + 1], q);
                g(a.c, n, p[r + 2], q);
                var s = O(e, a);
                if (s > 0 && s < b) {
                  b = s;
                }
              }
            }
          }
          return b;
        };
      }();
      var M = function () {
        function a(b, c) {
          for (var d = b.children, e = d.length - 1; e >= 0; e--) {
            a(d[e], c);
          }
          c(b);
        }
        function b(a, b) {
          return a.distance - b.distance;
        }
        function j(b, c, d) {
          var e = d.m;
          var f = c.x;
          var g = c.y;
          var h = c.z;
          var a = e[3] * f + e[7] * g + e[11] * h;
          a = a ? 1 / a : 1;
          b.x = (e[0] * f + e[4] * g + e[8] * h) * a;
          b.y = (e[1] * f + e[5] * g + e[9] * h) * a;
          b.z = (e[2] * f + e[6] * g + e[10] * h) * a;
          return b;
        }
        var i = new ca.default(function () {
          return {
            distance: 0,
            node: null
          };
        }, 1);
        var k = [];
        var e = r.default.create();
        var c = new da.Vec3();
        var g = new da.Vec3();
        var h = new s.default();
        var f = cc.mat4();
        var d = cc.mat4();
        var l = new da.Vec3();
        function m(a) {
          return a > 0 && a < Infinity;
        }
        return function (n, o, p, q) {
          i.reset();
          k.length = 0;
          a(n = n || cc.director.getScene(), function (a) {
            if (!q || q(a)) {
              da.Mat4.invert(d, a.getWorldMatrix(f));
              da.Vec3.transformMat4(h.o, o.o, d);
              da.Vec3.normalize(h.d, j(h.d, o.d, d));
              var b = Infinity;
              var n = a._renderComponent;
              if (n instanceof cc.MeshRenderer) {
                b = F(h, n._boundingBox);
              } else if (a.width && a.height) {
                da.Vec3.set(c, -a.width * a.anchorX, -a.height * a.anchorY, a.z);
                da.Vec3.set(g, a.width * (1 - a.anchorX), a.height * (1 - a.anchorY), a.z);
                r.default.fromPoints(e, c, g);
                b = F(h, e);
              }
              if (m(b) && (p && (b = p(h, a, b)), m(b))) {
                da.Vec3.scale(l, h.d, b);
                j(l, l, f);
                var s = i.add();
                s.node = a;
                s.distance = da.Vec3.mag(l);
                k.push(s);
              }
            }
          });
          k.sort(b);
          return k;
        };
      }();
      f = new da.Vec3(0, 0, 0);
      function w(a, b) {
        var c = da.Vec3.dot(a.d, b.n);
        if (Math.abs(c) < Number.EPSILON) {
          return 0;
        }
        da.Vec3.multiplyScalar(f, b.n, b.d);
        var d = da.Vec3.dot(da.Vec3.subtract(f, f, a.o), b.n) / c;
        if (d < 0) {
          return 0;
        } else {
          return d;
        }
      }
      n = new da.Vec3(0, 0, 0);
      function I(a, b) {
        da.Vec3.subtract(n, a.e, a.s);
        var c = (b.d - da.Vec3.dot(a.s, b.n)) / da.Vec3.dot(n, b.n);
        if (c < 0 || c > 1) {
          return 0;
        } else {
          return c;
        }
      }
      var O = function () {
        var b = new da.Vec3(0, 0, 0);
        var g = new da.Vec3(0, 0, 0);
        var e = new da.Vec3(0, 0, 0);
        var i = new da.Vec3(0, 0, 0);
        var j = new da.Vec3(0, 0, 0);
        return function (k, a, m) {
          da.Vec3.subtract(b, a.b, a.a);
          da.Vec3.subtract(g, a.c, a.a);
          da.Vec3.cross(e, k.d, g);
          var c = da.Vec3.dot(b, e);
          if (c < Number.EPSILON && (!m || c > -Number.EPSILON)) {
            return 0;
          }
          var l = 1 / c;
          da.Vec3.subtract(i, k.o, a.a);
          var h = da.Vec3.dot(i, e) * l;
          if (h < 0 || h > 1) {
            return 0;
          }
          da.Vec3.cross(j, i, b);
          var n = da.Vec3.dot(k.d, j) * l;
          if (n < 0 || h + n > 1) {
            return 0;
          }
          var f = da.Vec3.dot(g, j) * l;
          if (f < 0) {
            return 0;
          } else {
            return f;
          }
        };
      }();
      var L = O;
      var P = function () {
        var b = new da.Vec3(0, 0, 0);
        var g = new da.Vec3(0, 0, 0);
        var e = new da.Vec3(0, 0, 0);
        var i = new da.Vec3(0, 0, 0);
        var j = new da.Vec3(0, 0, 0);
        var k = new da.Vec3(0, 0, 0);
        return function (a, m, c) {
          da.Vec3.subtract(b, m.b, m.a);
          da.Vec3.subtract(g, m.c, m.a);
          da.Vec3.subtract(e, a.s, a.e);
          da.Vec3.cross(j, b, g);
          var l = da.Vec3.dot(e, j);
          if (l <= 0) {
            return 0;
          }
          da.Vec3.subtract(i, a.s, m.a);
          var h = da.Vec3.dot(i, j);
          if (h < 0 || h > l) {
            return 0;
          }
          da.Vec3.cross(k, e, i);
          var n = da.Vec3.dot(g, k);
          if (n < 0 || n > l) {
            return 0;
          }
          var o = -da.Vec3.dot(b, k);
          if (o < 0 || n + o > l) {
            return 0;
          }
          if (c) {
            var q = 1 / l;
            var r = 1 - (n *= q) - (o *= q);
            da.Vec3.set(c, m.a.x * r + m.b.x * n + m.c.x * o, m.a.y * r + m.b.y * n + m.c.y * o, m.a.z * r + m.b.z * n + m.c.z * o);
          }
          return 1;
        };
      }();
      ea = new da.Vec3(0, 0, 0);
      fa = new da.Vec3(0, 0, 0);
      ga = new da.Vec3(0, 0, 0);
      ha = new da.Vec3(0, 0, 0);
      ia = new da.Vec3(0, 0, 0);
      ja = new da.Vec3(0, 0, 0);
      ka = new da.Vec3(0, 0, 0);
      function D(b, g, e, i, j, k, a) {
        da.Vec3.subtract(ea, g, b);
        da.Vec3.subtract(fa, e, b);
        da.Vec3.subtract(ga, i, b);
        da.Vec3.subtract(ha, j, b);
        da.Vec3.cross(ja, ha, ea);
        var m = da.Vec3.dot(fa, ja);
        if (m >= 0) {
          var n = -da.Vec3.dot(ga, ja);
          if (n < 0) {
            return 0;
          }
          var o = da.Vec3.dot(da.Vec3.cross(ka, ea, ga), fa);
          if (o < 0) {
            return 0;
          }
          if (a) {
            var p = 1 / (n + m + o);
            n *= p;
            m *= p;
            o *= p;
            da.Vec3.set(a, e.x * n + i.x * m + j.x * o, e.y * n + i.y * m + j.y * o, e.z * n + i.z * m + j.z * o);
          }
        } else {
          da.Vec3.subtract(ia, k, b);
          var q = da.Vec3.dot(ia, ja);
          if (q < 0) {
            return 0;
          }
          var r = da.Vec3.dot(da.Vec3.cross(ka, ea, fa), ia);
          if (r < 0) {
            return 0;
          }
          if (a) {
            var s = 1 / (q + (m = -m) + r);
            q *= s;
            m *= s;
            r *= s;
            da.Vec3.set(a, e.x * q + k.x * m + j.x * r, e.y * q + k.y * m + j.y * r, e.z * q + k.z * m + j.z * r);
          }
        }
        return 1;
      }
      var N = function () {
        var b = new da.Vec3(0, 0, 0);
        return function (g, e) {
          var i = e.radius;
          var j = e.center;
          var k = g.o;
          var a = g.d;
          var m = i * i;
          da.Vec3.subtract(b, j, k);
          var c = b.lengthSqr();
          var l = da.Vec3.dot(b, a);
          var h = m - (c - l * l);
          if (h < 0) {
            return 0;
          }
          var n = Math.sqrt(h);
          var f = c < m ? l + n : l - n;
          if (f < 0) {
            return 0;
          } else {
            return f;
          }
        };
      }();
      la = new da.Vec3();
      ma = new da.Vec3();
      function F(b, g) {
        var e = b.o;
        var i = b.d;
        var j = 1 / i.x;
        var k = 1 / i.y;
        var a = 1 / i.z;
        da.Vec3.subtract(la, g.center, g.halfExtents);
        da.Vec3.add(ma, g.center, g.halfExtents);
        var m = (la.x - e.x) * j;
        var c = (ma.x - e.x) * j;
        var l = (la.y - e.y) * k;
        var h = (ma.y - e.y) * k;
        var n = (la.z - e.z) * a;
        var f = (ma.z - e.z) * a;
        var d = Math.max(Math.max(Math.min(m, c), Math.min(l, h)), Math.min(n, f));
        var o = Math.min(Math.min(Math.max(m, c), Math.max(l, h)), Math.max(n, f));
        if (o < 0 || d > o) {
          return 0;
        } else {
          return d;
        }
      }
      var B = F;
      var V = function () {
        var b = new da.Vec3();
        var j = new da.Vec3();
        var k = new da.Vec3();
        var m = new da.Vec3();
        var n = new da.Vec3();
        var q = new da.Vec3();
        var a = new da.Vec3();
        var o = [,,,];
        var c = [,,,];
        var l = [,,,];
        var h = [,,,,,,];
        return function (e, f) {
          o[0] = f.halfExtents.x;
          o[1] = f.halfExtents.y;
          o[2] = f.halfExtents.z;
          b = f.center;
          j = e.o;
          k = e.d;
          var d = f.orientation.m;
          da.Vec3.set(m, d[0], d[1], d[2]);
          da.Vec3.set(n, d[3], d[4], d[5]);
          da.Vec3.set(q, d[6], d[7], d[8]);
          da.Vec3.subtract(a, b, j);
          c[0] = da.Vec3.dot(m, k);
          c[1] = da.Vec3.dot(n, k);
          c[2] = da.Vec3.dot(q, k);
          l[0] = da.Vec3.dot(m, a);
          l[1] = da.Vec3.dot(n, a);
          l[2] = da.Vec3.dot(q, a);
          for (var i = 0; i < 3; ++i) {
            if (c[i] === 0) {
              if (-l[i] - o[i] > 0 || -l[i] + o[i] < 0) {
                return 0;
              }
              c[i] = 1e-7;
            }
            h[i * 2 + 0] = (l[i] + o[i]) / c[i];
            h[i * 2 + 1] = (l[i] - o[i]) / c[i];
          }
          var r = Math.max(Math.max(Math.min(h[0], h[1]), Math.min(h[2], h[3])), Math.min(h[4], h[5]));
          var s = Math.min(Math.min(Math.max(h[0], h[1]), Math.max(h[2], h[3])), Math.max(h[4], h[5]));
          if (s < 0 || r > s || r < 0) {
            return 0;
          } else {
            return r;
          }
        };
      }();
      o = new da.Vec3();
      na = new da.Vec3();
      oa = new da.Vec3();
      pa = new da.Vec3();
      function k(a, b) {
        da.Vec3.subtract(o, a.center, a.halfExtents);
        da.Vec3.add(na, a.center, a.halfExtents);
        da.Vec3.subtract(oa, b.center, b.halfExtents);
        da.Vec3.add(pa, b.center, b.halfExtents);
        return o.x <= pa.x && na.x >= oa.x && o.y <= pa.y && na.y >= oa.y && o.z <= pa.z && na.z >= oa.z;
      }
      function U(a, b, c) {
        da.Vec3.set(c[0], a.x, b.y, b.z);
        da.Vec3.set(c[1], a.x, b.y, a.z);
        da.Vec3.set(c[2], a.x, a.y, b.z);
        da.Vec3.set(c[3], a.x, a.y, a.z);
        da.Vec3.set(c[4], b.x, b.y, b.z);
        da.Vec3.set(c[5], b.x, b.y, a.z);
        da.Vec3.set(c[6], b.x, a.y, b.z);
        da.Vec3.set(c[7], b.x, a.y, a.z);
      }
      function z(b, c, d, e, f, g) {
        da.Vec3.set(g[0], b.x + d.x * c.x + e.x * c.y + f.x * c.z, b.y + d.y * c.x + e.y * c.y + f.y * c.z, b.z + d.z * c.x + e.z * c.y + f.z * c.z);
        da.Vec3.set(g[1], b.x - d.x * c.x + e.x * c.y + f.x * c.z, b.y - d.y * c.x + e.y * c.y + f.y * c.z, b.z - d.z * c.x + e.z * c.y + f.z * c.z);
        da.Vec3.set(g[2], b.x + d.x * c.x - e.x * c.y + f.x * c.z, b.y + d.y * c.x - e.y * c.y + f.y * c.z, b.z + d.z * c.x - e.z * c.y + f.z * c.z);
        da.Vec3.set(g[3], b.x + d.x * c.x + e.x * c.y - f.x * c.z, b.y + d.y * c.x + e.y * c.y - f.y * c.z, b.z + d.z * c.x + e.z * c.y - f.z * c.z);
        da.Vec3.set(g[4], b.x - d.x * c.x - e.x * c.y - f.x * c.z, b.y - d.y * c.x - e.y * c.y - f.y * c.z, b.z - d.z * c.x - e.z * c.y - f.z * c.z);
        da.Vec3.set(g[5], b.x + d.x * c.x - e.x * c.y - f.x * c.z, b.y + d.y * c.x - e.y * c.y - f.y * c.z, b.z + d.z * c.x - e.z * c.y - f.z * c.z);
        da.Vec3.set(g[6], b.x - d.x * c.x + e.x * c.y - f.x * c.z, b.y - d.y * c.x + e.y * c.y - f.y * c.z, b.z - d.z * c.x + e.z * c.y - f.z * c.z);
        da.Vec3.set(g[7], b.x - d.x * c.x - e.x * c.y + f.x * c.z, b.y - d.y * c.x - e.y * c.y + f.y * c.z, b.z - d.z * c.x - e.z * c.y + f.z * c.z);
      }
      function G(b, c) {
        for (var d = da.Vec3.dot(c, b[0]), e = d, f = 1; f < 8; ++f) {
          var g = da.Vec3.dot(c, b[f]);
          d = g < d ? g : d;
          e = g > e ? g : e;
        }
        return [d, e];
      }
      var H;
      var ra = function () {
        for (var b = Array(15), c = 0; c < 15; c++) {
          b[c] = new da.Vec3(0, 0, 0);
        }
        for (var d = [,,,,,,,,], g = [,,,,,,,,], f = 0; f < 8; f++) {
          d[f] = new da.Vec3(0, 0, 0);
          g[f] = new da.Vec3(0, 0, 0);
        }
        var i = new da.Vec3();
        var a = new da.Vec3();
        return function (j, e) {
          var k = e.orientation.m;
          da.Vec3.set(b[0], 1, 0, 0);
          da.Vec3.set(b[1], 0, 1, 0);
          da.Vec3.set(b[2], 0, 0, 1);
          da.Vec3.set(b[3], k[0], k[1], k[2]);
          da.Vec3.set(b[4], k[3], k[4], k[5]);
          da.Vec3.set(b[5], k[6], k[7], k[8]);
          for (var c = 0; c < 3; ++c) {
            da.Vec3.cross(b[6 + c * 3], b[c], b[0]);
            da.Vec3.cross(b[7 + c * 3], b[c], b[1]);
            da.Vec3.cross(b[7 + c * 3], b[c], b[2]);
          }
          da.Vec3.subtract(i, j.center, j.halfExtents);
          da.Vec3.add(a, j.center, j.halfExtents);
          U(i, a, d);
          z(e.center, e.halfExtents, b[3], b[4], b[5], g);
          for (var m = 0; m < 15; ++m) {
            var n = G(d, b[m]);
            var o = G(g, b[m]);
            if (o[0] > n[1] || n[0] > o[1]) {
              return 0;
            }
          }
          return 1;
        };
      }();
      function X(a, b) {
        var c = a.halfExtents.x * Math.abs(b.n.x) + a.halfExtents.y * Math.abs(b.n.y) + a.halfExtents.z * Math.abs(b.n.z);
        var d = da.Vec3.dot(b.n, a.center);
        if (d + c < b.d) {
          return -1;
        } else if (d - c > b.d) {
          return 0;
        } else {
          return 1;
        }
      }
      function Y(a, b) {
        for (var c = 0; c < b.planes.length; c++) {
          if (X(a, b.planes[c]) === -1) {
            return 0;
          }
        }
        return 1;
      }
      var j = function () {
        for (var a = [,,,,,,,,], b = 0, d = 0, c = 0; c < a.length; c++) {
          a[c] = new da.Vec3(0, 0, 0);
        }
        return function (e, g) {
          for (var i = 0, j = false, k = 0; k < g.planes.length; k++) {
            if ((i = X(e, g.planes[k])) === -1) {
              return 0;
            }
            if (i === 1) {
              j = true;
            }
          }
          if (!j) {
            return 1;
          }
          for (var m = 0; m < g.vertices.length; m++) {
            da.Vec3.subtract(a[m], g.vertices[m], e.center);
          }
          b = 0;
          d = 0;
          for (var n = 0; n < g.vertices.length; n++) {
            if (a[n].x > e.halfExtents.x) {
              b++;
            } else if (a[n].x < -e.halfExtents.x) {
              d++;
            }
          }
          if (b === g.vertices.length || d === g.vertices.length) {
            return 0;
          }
          b = 0;
          d = 0;
          for (var p = 0; p < g.vertices.length; p++) {
            if (a[p].y > e.halfExtents.y) {
              b++;
            } else if (a[p].y < -e.halfExtents.y) {
              d++;
            }
          }
          if (b === g.vertices.length || d === g.vertices.length) {
            return 0;
          }
          b = 0;
          d = 0;
          for (var q = 0; q < g.vertices.length; q++) {
            if (a[q].z > e.halfExtents.z) {
              b++;
            } else if (a[q].z < -e.halfExtents.z) {
              d++;
            }
          }
          if (b === g.vertices.length || d === g.vertices.length) {
            return 0;
          } else {
            return 1;
          }
        };
      }();
      var q = function () {
        var b = new da.Vec3(0, 0, 0);
        var c = new da.Mat3();
        return function (d, e) {
          da.Vec3.subtract(b, e, d.center);
          da.Vec3.transformMat3(b, b, da.Mat3.transpose(c, d.orientation));
          f = b;
          g = d.halfExtents;
          return Math.abs(f.x) < g.x && Math.abs(f.y) < g.y && Math.abs(f.z) < g.z;
          var f;
          var g;
        };
      }();
      H = function (a, b, c, d) {
        return Math.abs(a.x * b + a.y * c + a.z * d);
      };
      function Z(a, b) {
        var c = a.orientation.m;
        var d = a.halfExtents.x * H(b.n, c[0], c[1], c[2]) + a.halfExtents.y * H(b.n, c[3], c[4], c[5]) + a.halfExtents.z * H(b.n, c[6], c[7], c[8]);
        var e = da.Vec3.dot(b.n, a.center);
        if (e + d < b.d) {
          return -1;
        } else if (e - d > b.d) {
          return 0;
        } else {
          return 1;
        }
      }
      function K(a, b) {
        for (var c = 0; c < b.planes.length; c++) {
          if (Z(a, b.planes[c]) === -1) {
            return 0;
          }
        }
        return 1;
      }
      var Q = function () {
        for (var b = [,,,,,,,,], c = 0, g = 0, j = 0, d = 0; d < b.length; d++) {
          b[d] = new da.Vec3(0, 0, 0);
        }
        function h(a, b, c, d) {
          return a.x * b + a.y * c + a.z * d;
        }
        return function (a, e) {
          for (var i = 0, k = false, m = 0; m < e.planes.length; m++) {
            if ((i = Z(a, e.planes[m])) === -1) {
              return 0;
            }
            if (i === 1) {
              k = true;
            }
          }
          if (!k) {
            return 1;
          }
          for (var n = 0; n < e.vertices.length; n++) {
            da.Vec3.subtract(b[n], e.vertices[n], a.center);
          }
          g = 0;
          j = 0;
          for (var o = a.orientation.m, f = 0; f < e.vertices.length; f++) {
            if ((c = h(b[f], o[0], o[1], o[2])) > a.halfExtents.x) {
              g++;
            } else if (c < -a.halfExtents.x) {
              j++;
            }
          }
          if (g === e.vertices.length || j === e.vertices.length) {
            return 0;
          }
          g = 0;
          j = 0;
          for (var q = 0; q < e.vertices.length; q++) {
            if ((c = h(b[q], o[3], o[4], o[5])) > a.halfExtents.y) {
              g++;
            } else if (c < -a.halfExtents.y) {
              j++;
            }
          }
          if (g === e.vertices.length || j === e.vertices.length) {
            return 0;
          }
          g = 0;
          j = 0;
          for (var r = 0; r < e.vertices.length; r++) {
            if ((c = h(b[r], o[6], o[7], o[8])) > a.halfExtents.z) {
              g++;
            } else if (c < -a.halfExtents.z) {
              j++;
            }
          }
          if (g === e.vertices.length || j === e.vertices.length) {
            return 0;
          } else {
            return 1;
          }
        };
      }();
      var J = function () {
        for (var b = Array(15), a = 0; a < 15; a++) {
          b[a] = new da.Vec3(0, 0, 0);
        }
        for (var d = [,,,,,,,,], f = [,,,,,,,,], c = 0; c < 8; c++) {
          d[c] = new da.Vec3(0, 0, 0);
          f[c] = new da.Vec3(0, 0, 0);
        }
        return function (g, e) {
          var i = g.orientation.m;
          var a = e.orientation.m;
          da.Vec3.set(b[0], i[0], i[1], i[2]);
          da.Vec3.set(b[1], i[3], i[4], i[5]);
          da.Vec3.set(b[2], i[6], i[7], i[8]);
          da.Vec3.set(b[3], a[0], a[1], a[2]);
          da.Vec3.set(b[4], a[3], a[4], a[5]);
          da.Vec3.set(b[5], a[6], a[7], a[8]);
          for (var j = 0; j < 3; ++j) {
            da.Vec3.cross(b[6 + j * 3], b[j], b[0]);
            da.Vec3.cross(b[7 + j * 3], b[j], b[1]);
            da.Vec3.cross(b[7 + j * 3], b[j], b[2]);
          }
          z(g.center, g.halfExtents, b[0], b[1], b[2], d);
          z(e.center, e.halfExtents, b[3], b[4], b[5], f);
          for (var k = 0; k < 15; ++k) {
            var m = G(d, b[k]);
            var n = G(f, b[k]);
            if (n[0] > m[1] || m[0] > n[1]) {
              return 0;
            }
          }
          return 1;
        };
      }();
      function $(a, b) {
        var c = da.Vec3.dot(b.n, a.center);
        var d = a.radius * b.n.length();
        if (c + d < b.d) {
          return -1;
        } else if (c - d > b.d) {
          return 0;
        } else {
          return 1;
        }
      }
      function sa(a, b) {
        for (var c = 0; c < b.planes.length; c++) {
          if ($(a, b.planes[c]) === -1) {
            return 0;
          }
        }
        return 1;
      }
      var ta = function () {
        var a = new da.Vec3(0, 0, 0);
        var b = [1, -1, 1, -1, 1, -1];
        return function (e, g) {
          for (var i = 0; i < 6; i++) {
            var j = g.planes[i];
            var k = e.radius;
            var m = e.center;
            var n = j.n;
            var p = j.d;
            var q = da.Vec3.dot(n, m);
            if (q + k < p) {
              return 0;
            }
            if (!(q - k > p)) {
              da.Vec3.add(a, m, da.Vec3.multiplyScalar(a, n, k));
              for (var s = 0; s < 6; s++) {
                if (s !== i && s !== i + b[i]) {
                  var t = g.planes[s];
                  if (da.Vec3.dot(t.n, a) < t.d) {
                    return 0;
                  }
                }
              }
            }
          }
          return 1;
        };
      }();
      function ua(a, b) {
        var c = a.radius + b.radius;
        return da.Vec3.squaredDistance(a.center, b.center) < c * c;
      }
      var va = function () {
        var b = new da.Vec3();
        return function (c, d) {
          a.pt_point_aabb(b, c.center, d);
          return da.Vec3.squaredDistance(c.center, b) < c.radius * c.radius;
        };
      }();
      var wa = function () {
        var b = new da.Vec3();
        return function (c, d) {
          a.pt_point_obb(b, c.center, d);
          return da.Vec3.squaredDistance(c.center, b) < c.radius * c.radius;
        };
      }();
      var xa = {
        rayAabb: B,
        rayMesh: qa,
        raycast: M,
        rayTriangle: L,
        ray_sphere: N,
        ray_aabb: F,
        ray_obb: V,
        ray_plane: w,
        ray_triangle: O,
        line_plane: I,
        line_triangle: P,
        line_quad: D,
        sphere_sphere: ua,
        sphere_aabb: va,
        sphere_obb: wa,
        sphere_plane: $,
        sphere_frustum: sa,
        sphere_frustum_accurate: ta,
        aabb_aabb: k,
        aabb_obb: ra,
        aabb_plane: X,
        aabb_frustum: Y,
        aabb_frustum_accurate: j,
        obb_obb: J,
        obb_plane: Z,
        obb_frustum: K,
        obb_frustum_accurate: Q,
        obb_point: q,
        resolve: function (a, b, c) {
          if (c === undefined) {
            c = null;
          }
          var d = a._type;
          var e = b._type;
          var f = this[d | e];
          if (d < e) {
            return f(a, b, c);
          } else {
            return f(b, a, c);
          }
        }
      };
      xa[i.default.SHAPE_RAY | i.default.SHAPE_SPHERE] = N;
      xa[i.default.SHAPE_RAY | i.default.SHAPE_AABB] = F;
      xa[i.default.SHAPE_RAY | i.default.SHAPE_OBB] = V;
      xa[i.default.SHAPE_RAY | i.default.SHAPE_PLANE] = w;
      xa[i.default.SHAPE_RAY | i.default.SHAPE_TRIANGLE] = O;
      xa[i.default.SHAPE_LINE | i.default.SHAPE_PLANE] = I;
      xa[i.default.SHAPE_LINE | i.default.SHAPE_TRIANGLE] = P;
      xa[i.default.SHAPE_SPHERE] = ua;
      xa[i.default.SHAPE_SPHERE | i.default.SHAPE_AABB] = va;
      xa[i.default.SHAPE_SPHERE | i.default.SHAPE_OBB] = wa;
      xa[i.default.SHAPE_SPHERE | i.default.SHAPE_PLANE] = $;
      xa[i.default.SHAPE_SPHERE | i.default.SHAPE_FRUSTUM] = sa;
      xa[i.default.SHAPE_SPHERE | i.default.SHAPE_FRUSTUM_ACCURATE] = ta;
      xa[i.default.SHAPE_AABB] = k;
      xa[i.default.SHAPE_AABB | i.default.SHAPE_OBB] = ra;
      xa[i.default.SHAPE_AABB | i.default.SHAPE_PLANE] = X;
      xa[i.default.SHAPE_AABB | i.default.SHAPE_FRUSTUM] = Y;
      xa[i.default.SHAPE_AABB | i.default.SHAPE_FRUSTUM_ACCURATE] = j;
      xa[i.default.SHAPE_OBB] = J;
      xa[i.default.SHAPE_OBB | i.default.SHAPE_PLANE] = Z;
      xa[i.default.SHAPE_OBB | i.default.SHAPE_FRUSTUM] = K;
      xa[i.default.SHAPE_OBB | i.default.SHAPE_FRUSTUM_ACCURATE] = Q;
      var ya = xa;
      e.default = ya;
      t.exports = e.default;
    }, {
      "../../renderer/gfx": 282,
      "../../renderer/memop/recycle-pool": 297,
      "../value-types": 251,
      "./aabb": 138,
      "./distance": 139,
      "./enums": 140,
      "./ray": 147,
      "./triangle": 149
    }],
    144: [function (b, c, d) {
      "use strict";
  
      d.__esModule = true;
      d.default = undefined;
      var e;
      var f = b("../value-types");
      var g = (e = b("./enums")) && e.__esModule ? e : {
        default: e
      };
      var h = function () {
        function b(b, c, d, h, j, k) {
          if (b === undefined) {
            b = 0;
          }
          if (c === undefined) {
            c = 0;
          }
          if (d === undefined) {
            d = 0;
          }
          if (h === undefined) {
            h = 0;
          }
          if (j === undefined) {
            j = 0;
          }
          if (k === undefined) {
            k = -1;
          }
          this.s = undefined;
          this.e = undefined;
          this._type = undefined;
          this._type = g.default.SHAPE_LINE;
          this.s = new f.Vec3(b, c, d);
          this.e = new f.Vec3(h, j, k);
        }
        b.create = function (c, d, e, f, g, h) {
          return new b(c, d, e, f, g, h);
        };
        b.clone = function (a) {
          return new b(a.s.x, a.s.y, a.s.z, a.e.x, a.e.y, a.e.z);
        };
        b.copy = function (a, b) {
          f.Vec3.copy(a.s, b.s);
          f.Vec3.copy(a.e, b.e);
          return a;
        };
        b.fromPoints = function (a, b, c) {
          f.Vec3.copy(a.s, b);
          f.Vec3.copy(a.e, c);
          return a;
        };
        b.set = function (b, c, d, e, f, g, h) {
          b.s.x = c;
          b.s.y = d;
          b.s.z = e;
          b.e.x = f;
          b.e.y = g;
          b.e.z = h;
          return b;
        };
        b.len = function (a) {
          return f.Vec3.distance(a.s, a.e);
        };
        b.prototype.length = function () {
          return f.Vec3.distance(this.s, this.e);
        };
        return b;
      }();
      d.default = h;
      c.exports = d.default;
    }, {
      "../value-types": 251,
      "./enums": 140
    }],
    145: [function (b, d, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var f;
      var g = b("../value-types");
      var j = (f = b("./enums")) && f.__esModule ? f : {
        default: f
      };
      function k(a, b) {
        for (var c = 0; c < b.length; c++) {
          var d = b[c];
          d.enumerable = d.enumerable || false;
          d.configurable = true;
          if ("value" in d) {
            d.writable = true;
          }
          Object.defineProperty(a, d.key, d);
        }
      }
      var m = new g.Vec3();
      var a = new g.Vec3();
      var o = new g.Mat3();
      var c = function () {
        function b(b, k, m, q, r, s, w, x, y, z, A, B, C, D, E) {
          if (b === undefined) {
            b = 0;
          }
          if (k === undefined) {
            k = 0;
          }
          if (m === undefined) {
            m = 0;
          }
          if (q === undefined) {
            q = 1;
          }
          if (r === undefined) {
            r = 1;
          }
          if (s === undefined) {
            s = 1;
          }
          if (w === undefined) {
            w = 1;
          }
          if (x === undefined) {
            x = 0;
          }
          if (y === undefined) {
            y = 0;
          }
          if (z === undefined) {
            z = 0;
          }
          if (A === undefined) {
            A = 1;
          }
          if (B === undefined) {
            B = 0;
          }
          if (C === undefined) {
            C = 0;
          }
          if (D === undefined) {
            D = 0;
          }
          if (E === undefined) {
            E = 1;
          }
          this.center = undefined;
          this.halfExtents = undefined;
          this.orientation = undefined;
          this._type = undefined;
          this._type = j.default.SHAPE_OBB;
          this.center = new g.Vec3(b, k, m);
          this.halfExtents = new g.Vec3(q, r, s);
          this.orientation = new g.Mat3(w, x, y, z, A, B, C, D, E);
        }
        b.create = function (g, e, i, j, k, m, a, n, c, l, h, o, f, d, q) {
          return new b(g, e, i, j, k, m, a, n, c, l, h, o, f, d, q);
        };
        b.clone = function (a) {
          var c = a.orientation.m;
          return new b(a.center.x, a.center.y, a.center.z, a.halfExtents.x, a.halfExtents.y, a.halfExtents.z, c[0], c[1], c[2], c[3], c[4], c[5], c[6], c[7], c[8]);
        };
        b.copy = function (a, b) {
          g.Vec3.copy(a.center, b.center);
          g.Vec3.copy(a.halfExtents, b.halfExtents);
          g.Mat3.copy(a.orientation, b.orientation);
          return a;
        };
        b.fromPoints = function (b, c, d) {
          g.Vec3.multiplyScalar(b.center, g.Vec3.add(m, c, d), 0.5);
          g.Vec3.multiplyScalar(b.halfExtents, g.Vec3.subtract(a, d, c), 0.5);
          g.Mat3.identity(b.orientation);
          return b;
        };
        b.set = function (b, j, e, i, k, m, a, n, c, l, h, o, f, d, q, p) {
          g.Vec3.set(b.center, j, e, i);
          g.Vec3.set(b.halfExtents, k, m, a);
          g.Mat3.set(b.orientation, n, c, l, h, o, f, d, q, p);
          return b;
        };
        var c;
        var d;
        var f = b.prototype;
        f.getBoundary = function (b, d) {
          var e;
          var f;
          var h;
          var j;
          var k;
          e = m;
          f = this.halfExtents;
          h = this.orientation;
          j = o.m;
          k = h.m;
          j[0] = Math.abs(k[0]);
          j[1] = Math.abs(k[1]);
          j[2] = Math.abs(k[2]);
          j[3] = Math.abs(k[3]);
          j[4] = Math.abs(k[4]);
          j[5] = Math.abs(k[5]);
          j[6] = Math.abs(k[6]);
          j[7] = Math.abs(k[7]);
          j[8] = Math.abs(k[8]);
          g.Vec3.transformMat3(e, f, o);
          g.Vec3.subtract(b, this.center, m);
          g.Vec3.add(d, this.center, m);
        };
        f.transform = function (a, b, c, d, e) {
          g.Vec3.transformMat4(e.center, this.center, a);
          g.Mat3.fromQuat(e.orientation, c);
          g.Vec3.multiply(e.halfExtents, this.halfExtents, d);
        };
        f.translateAndRotate = function (a, b, c) {
          g.Vec3.transformMat4(c.center, this.center, a);
          g.Mat3.fromQuat(c.orientation, b);
        };
        f.setScale = function (a, b) {
          g.Vec3.multiply(b.halfExtents, this.halfExtents, a);
        };
        c = b;
        if (d = [{
          key: "type",
          get: function () {
            return this._type;
          }
        }]) {
          k(c.prototype, d);
        }
        Object.defineProperty(c, "prototype", {
          writable: false
        });
        return b;
      }();
      e.default = c;
      d.exports = e.default;
    }, {
      "../value-types": 251,
      "./enums": 140
    }],
    146: [function (b, d, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var f;
      var g = b("../value-types");
      var j = (f = b("./enums")) && f.__esModule ? f : {
        default: f
      };
      var k = new g.Vec3(0, 0, 0);
      var a = new g.Vec3(0, 0, 0);
      var i = cc.mat4();
      var c = cc.v4();
      var l = function () {
        function b(a, b, c, d) {
          if (a === undefined) {
            a = 0;
          }
          if (b === undefined) {
            b = 1;
          }
          if (c === undefined) {
            c = 0;
          }
          if (d === undefined) {
            d = 0;
          }
          this.n = undefined;
          this.d = undefined;
          this._type = undefined;
          this._type = j.default.SHAPE_PLANE;
          this.n = new g.Vec3(a, b, c);
          this.d = d;
        }
        b.create = function (a, c, d, e) {
          return new b(a, c, d, e);
        };
        b.clone = function (a) {
          return new b(a.n.x, a.n.y, a.n.z, a.d);
        };
        b.copy = function (a, b) {
          g.Vec3.copy(a.n, b.n);
          a.d = b.d;
          return a;
        };
        b.fromPoints = function (b, c, d, e) {
          g.Vec3.subtract(k, d, c);
          g.Vec3.subtract(a, e, c);
          g.Vec3.normalize(b.n, g.Vec3.cross(b.n, k, a));
          b.d = g.Vec3.dot(b.n, c);
          return b;
        };
        b.set = function (a, b, c, d, e) {
          a.n.x = b;
          a.n.y = c;
          a.n.z = d;
          a.d = e;
          return a;
        };
        b.fromNormalAndPoint = function (a, b, c) {
          g.Vec3.copy(a.n, b);
          a.d = g.Vec3.dot(b, c);
          return a;
        };
        b.normalize = function (a, b) {
          var c = b.n.len();
          g.Vec3.normalize(a.n, b.n);
          if (c > 0) {
            a.d = b.d / c;
          }
          return a;
        };
        b.prototype.transform = function (a) {
          g.Mat4.invert(i, a);
          g.Mat4.transpose(i, i);
          g.Vec4.set(c, this.n.x, this.n.y, this.n.z, this.d);
          g.Vec4.transformMat4(c, c, i);
          g.Vec3.set(this.n, c.x, c.y, c.z);
          this.d = c.w;
        };
        return b;
      }();
      e.default = l;
      d.exports = e.default;
    }, {
      "../value-types": 251,
      "./enums": 140
    }],
    147: [function (b, c, d) {
      "use strict";
  
      d.__esModule = true;
      d.default = undefined;
      var e;
      var f = b("../value-types");
      var g = (e = b("./enums")) && e.__esModule ? e : {
        default: e
      };
      var h = function () {
        function b(b, c, d, h, j, k) {
          if (b === undefined) {
            b = 0;
          }
          if (c === undefined) {
            c = 0;
          }
          if (d === undefined) {
            d = 0;
          }
          if (h === undefined) {
            h = 0;
          }
          if (j === undefined) {
            j = 0;
          }
          if (k === undefined) {
            k = -1;
          }
          this.o = undefined;
          this.d = undefined;
          this._type = undefined;
          this._type = g.default.SHAPE_RAY;
          this.o = new f.Vec3(b, c, d);
          this.d = new f.Vec3(h, j, k);
        }
        b.create = function (c, d, f, g, h, j) {
          if (c === undefined) {
            c = 0;
          }
          if (d === undefined) {
            d = 0;
          }
          if (f === undefined) {
            f = 0;
          }
          if (g === undefined) {
            g = 0;
          }
          if (h === undefined) {
            h = 0;
          }
          if (j === undefined) {
            j = 1;
          }
          return new b(c, d, f, g, h, j);
        };
        b.clone = function (a) {
          return new b(a.o.x, a.o.y, a.o.z, a.d.x, a.d.y, a.d.z);
        };
        b.copy = function (a, b) {
          f.Vec3.copy(a.o, b.o);
          f.Vec3.copy(a.d, b.d);
          return a;
        };
        b.fromPoints = function (a, b, c) {
          f.Vec3.copy(a.o, b);
          f.Vec3.normalize(a.d, f.Vec3.subtract(a.d, c, b));
          return a;
        };
        b.set = function (b, c, d, e, f, g, h) {
          b.o.x = c;
          b.o.y = d;
          b.o.z = e;
          b.d.x = f;
          b.d.y = g;
          b.d.z = h;
          return b;
        };
        b.prototype.computeHit = function (a, b) {
          f.Vec3.normalize(a, this.d);
          f.Vec3.scaleAndAdd(a, this.o, a, b);
        };
        return b;
      }();
      d.default = h;
      c.exports = d.default;
    }, {
      "../value-types": 251,
      "./enums": 140
    }],
    148: [function (b, c, d) {
      "use strict";
  
      d.__esModule = true;
      d.default = undefined;
      var e;
      var f = b("../value-types");
      var g = (e = b("./enums")) && e.__esModule ? e : {
        default: e
      };
      var h = new f.Vec3();
      var a = function () {
        function a(a, b, c, d) {
          if (a === undefined) {
            a = 0;
          }
          if (b === undefined) {
            b = 0;
          }
          if (c === undefined) {
            c = 0;
          }
          if (d === undefined) {
            d = 1;
          }
          this.center = undefined;
          this.radius = undefined;
          this._type = undefined;
          this._type = g.default.SHAPE_SPHERE;
          this.center = new f.Vec3(a, b, c);
          this.radius = d;
        }
        a.create = function (b, c, d, e) {
          return new a(b, c, d, e);
        };
        a.clone = function (b) {
          return new a(b.center.x, b.center.y, b.center.z, b.radius);
        };
        a.copy = function (a, b) {
          f.Vec3.copy(a.center, b.center);
          a.radius = b.radius;
          return a;
        };
        a.fromPoints = function (a, b, c) {
          f.Vec3.multiplyScalar(a.center, f.Vec3.add(h, b, c), 0.5);
          a.radius = f.Vec3.subtract(h, c, b).len() * 0.5;
          return a;
        };
        a.set = function (a, b, c, d, e) {
          a.center.x = b;
          a.center.y = c;
          a.center.z = d;
          a.radius = e;
          return a;
        };
        var b = a.prototype;
        b.clone = function () {
          return a.clone(this);
        };
        b.copy = function (b) {
          return a.copy(this, b);
        };
        b.getBoundary = function (a, b) {
          f.Vec3.set(a, this.center.x - this.radius, this.center.y - this.radius, this.center.z - this.radius);
          f.Vec3.set(b, this.center.x + this.radius, this.center.y + this.radius, this.center.z + this.radius);
        };
        b.transform = function (a, b, c, d, e) {
          f.Vec3.transformMat4(e.center, this.center, a);
          e.radius = this.radius * d.maxAxis();
        };
        b.translateAndRotate = function (a, b, c) {
          f.Vec3.transformMat4(c.center, this.center, a);
        };
        b.setScale = function (a, b) {
          b.radius = this.radius * a.maxAxis();
        };
        return a;
      }();
      d.default = a;
      c.exports = d.default;
    }, {
      "../value-types": 251,
      "./enums": 140
    }],
    149: [function (b, c, d) {
      "use strict";
  
      d.__esModule = true;
      d.default = undefined;
      var f = e(b("../value-types/vec3"));
      var g = e(b("./enums"));
      function e(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      var h = function () {
        function b(b, d, e, i, j, a, k, c, l) {
          this.a = undefined;
          this.b = undefined;
          this.c = undefined;
          this._type = undefined;
          this.a = new f.default(b, d, e);
          this.b = new f.default(i, j, a);
          this.c = new f.default(k, c, l);
          this._type = g.default.SHAPE_TRIANGLE;
        }
        b.create = function (d, e, f, g, h, i, a, j, c) {
          return new b(d, e, f, g, h, i, a, j, c);
        };
        b.clone = function (a) {
          return new b(a.a.x, a.a.y, a.a.z, a.b.x, a.b.y, a.b.z, a.c.x, a.c.y, a.c.z);
        };
        b.copy = function (a, b) {
          f.default.copy(a.a, b.a);
          f.default.copy(a.b, b.b);
          f.default.copy(a.c, b.c);
          return a;
        };
        b.fromPoints = function (a, b, c, d) {
          f.default.copy(a.a, b);
          f.default.copy(a.b, c);
          f.default.copy(a.c, d);
          return a;
        };
        b.set = function (b, d, e, f, g, h, i, a, j, c) {
          b.a.x = d;
          b.a.y = e;
          b.a.z = f;
          b.b.x = g;
          b.b.y = h;
          b.b.z = i;
          b.c.x = a;
          b.c.y = j;
          b.c.z = c;
          return b;
        };
        return b;
      }();
      d.default = h;
      c.exports = d.default;
    }, {
      "../value-types/vec3": 261,
      "./enums": 140
    }],
    150: [function (a, b) {
      "use strict";
  
      var c = cc.Class({
        name: "cc.GraphicsPoint",
        extends: cc.Vec2,
        ctor: function () {
          this.reset();
        },
        reset: function () {
          this.dx = 0;
          this.dy = 0;
          this.dmx = 0;
          this.dmy = 0;
          this.flags = 0;
          this.len = 0;
        }
      });
      cc.GraphicsPoint = b.exports = c;
    }, {}],
    151: [function (b, d) {
      "use strict";
  
      var e = b("../components/CCRenderComponent");
      var f = b("../assets/material/CCMaterial");
      var g = b("./types");
      var h = g.PointFlags;
      var i = g.LineCap;
      var a = g.LineJoin;
      var j = cc.Class({
        name: "cc.Graphics",
        extends: e,
        editor: false,
        ctor: function () {
          this._impl = new j._Impl(this);
        },
        properties: {
          _lineWidth: 2,
          _strokeColor: cc.Color.BLACK,
          _lineJoin: a.MITER,
          _lineCap: i.BUTT,
          _fillColor: cc.Color.WHITE,
          _miterLimit: 10,
          lineWidth: {
            get: function () {
              return this._lineWidth;
            },
            set: function (a) {
              this._lineWidth = a;
              this._impl.lineWidth = a;
            }
          },
          lineJoin: {
            get: function () {
              return this._lineJoin;
            },
            set: function (a) {
              this._lineJoin = a;
              this._impl.lineJoin = a;
            },
            type: a
          },
          lineCap: {
            get: function () {
              return this._lineCap;
            },
            set: function (a) {
              this._lineCap = a;
              this._impl.lineCap = a;
            },
            type: i
          },
          strokeColor: {
            get: function () {
              return this._strokeColor;
            },
            set: function (a) {
              this._impl.strokeColor = this._strokeColor = cc.color(a);
            }
          },
          fillColor: {
            get: function () {
              return this._fillColor;
            },
            set: function (a) {
              this._impl.fillColor = this._fillColor = cc.color(a);
            }
          },
          miterLimit: {
            get: function () {
              return this._miterLimit;
            },
            set: function (a) {
              this._miterLimit = a;
              this._impl.miterLimit = a;
            }
          }
        },
        statics: {
          LineJoin: a,
          LineCap: i,
          PointFlags: h
        },
        onRestore: function () {
          if (!this._impl) {
            this._impl = new j._Impl(this);
          }
        },
        onDestroy: function () {
          this.clear(true);
          this._super();
          this._impl = null;
        },
        _getDefaultMaterial: function () {
          return f.getBuiltinMaterial("2d-graphics");
        },
        _updateMaterial: function () {
          var a = this._materials[0];
          if (a) {
            if (a.getDefine("CC_USE_MODEL") !== undefined) {
              a.define("CC_USE_MODEL", true);
            }
            if (a.getDefine("CC_SUPPORT_standard_derivatives") !== undefined && cc.sys.glExtension("OES_standard_derivatives")) {
              a.define("CC_SUPPORT_standard_derivatives", true);
            }
          }
        },
        moveTo: function (a, b) {
          this._impl.moveTo(a, b);
        },
        lineTo: function (a, b) {
          this._impl.lineTo(a, b);
        },
        bezierCurveTo: function (a, b, c, d, e, f) {
          this._impl.bezierCurveTo(a, b, c, d, e, f);
        },
        quadraticCurveTo: function (a, b, c, d) {
          this._impl.quadraticCurveTo(a, b, c, d);
        },
        arc: function (a, b, c, d, e, f) {
          this._impl.arc(a, b, c, d, e, f);
        },
        ellipse: function (a, b, c, d) {
          this._impl.ellipse(a, b, c, d);
        },
        circle: function (a, b, c) {
          this._impl.circle(a, b, c);
        },
        rect: function (a, b, c, d) {
          this._impl.rect(a, b, c, d);
        },
        roundRect: function (a, b, c, d, e) {
          this._impl.roundRect(a, b, c, d, e);
        },
        fillRect: function (a, b, c, d) {
          this.rect(a, b, c, d);
          this.fill();
        },
        clear: function (a) {
          this._impl.clear(a);
          if (this._assembler) {
            this._assembler.clear(a);
          }
        },
        close: function () {
          this._impl.close();
        },
        stroke: function () {
          if (!this._assembler) {
            this._resetAssembler();
          }
          this._assembler.stroke(this);
        },
        fill: function () {
          if (!this._assembler) {
            this._resetAssembler();
          }
          this._assembler.fill(this);
        }
      });
      cc.Graphics = d.exports = j;
      cc.Graphics.Types = g;
      cc.Graphics.Helper = b("./helper");
    }, {
      "../assets/material/CCMaterial": 76,
      "../components/CCRenderComponent": 109,
      "./helper": 152,
      "./types": 154
    }],
    152: [function (b, d) {
      "use strict";
  
      var f = b("./types").PointFlags;
      var j = Math.PI;
      var k = Math.min;
      var n = Math.max;
      var q = Math.cos;
      var a = Math.sin;
      var z = Math.abs;
      var c = Math.sign;
      var g = 0.5522847493;
      cc.GraphicsHelper = d.exports = {
        arc: function (c, o, e, i, l, h, r) {
          var s;
          var t;
          var u;
          var w = 0;
          var B = 0;
          var D = 0;
          var F = 0;
          var G = 0;
          var H = 0;
          var I = 0;
          var J = 0;
          var K = 0;
          var L = 0;
          var N = 0;
          var O = 0;
          var P = 0;
          B = h - l;
          if (r = r || false) {
            if (z(B) >= j * 2) {
              B = j * 2;
            } else {
              for (; B < 0;) {
                B += j * 2;
              }
            }
          } else if (z(B) >= j * 2) {
            B = -j * 2;
          } else {
            for (; B > 0;) {
              B -= j * 2;
            }
          }
          u = n(1, k(z(B) / (j * 0.5) + 0.5, 5)) | 0;
          D = z(4 / 3 * (1 - q(s = B / u / 2)) / a(s));
          if (!r) {
            D = -D;
          }
          t = 0;
          for (; t <= u; t++) {
            H = o + (F = q(w = l + B * (t / u))) * i;
            I = e + (G = a(w)) * i;
            J = -G * i * D;
            K = F * i * D;
            if (t === 0) {
              c.moveTo(H, I);
            } else {
              c.bezierCurveTo(L + O, N + P, H - J, I - K, H, I);
            }
            L = H;
            N = I;
            O = J;
            P = K;
          }
        },
        ellipse: function (a, b, c, d, e) {
          a.moveTo(b - d, c);
          a.bezierCurveTo(b - d, c + e * g, b - d * g, c + e, b, c + e);
          a.bezierCurveTo(b + d * g, c + e, b + d, c + e * g, b + d, c);
          a.bezierCurveTo(b + d, c - e * g, b + d * g, c - e, b, c - e);
          a.bezierCurveTo(b - d * g, c - e, b - d, c - e * g, b - d, c);
          a.close();
        },
        roundRect: function (b, d, e, f, h, i) {
          if (i < 0.1) {
            b.rect(d, e, f, h);
          } else {
            var a = k(i, z(f) * 0.5) * c(f);
            var j = k(i, z(h) * 0.5) * c(h);
            b.moveTo(d, e + j);
            b.lineTo(d, e + h - j);
            b.bezierCurveTo(d, e + h - j * (1 - g), d + a * (1 - g), e + h, d + a, e + h);
            b.lineTo(d + f - a, e + h);
            b.bezierCurveTo(d + f - a * (1 - g), e + h, d + f, e + h - j * (1 - g), d + f, e + h - j);
            b.lineTo(d + f, e + j);
            b.bezierCurveTo(d + f, e + j * (1 - g), d + f - a * (1 - g), e, d + f - a, e);
            b.lineTo(d + a, e);
            b.bezierCurveTo(d + a * (1 - g), e, d, e + j * (1 - g), d, e + j);
            b.close();
          }
        },
        tesselateBezier: function d(c, e, i, j, k, a, n, l, h, o, q) {
          var r;
          var s;
          var t;
          var u;
          var B;
          var D;
          var F;
          var G;
          var H;
          var I;
          var J;
          var K;
          var L;
          var N;
          var O;
          var P;
          if (!(o > 10)) {
            B = (a + l) * 0.5;
            D = (n + h) * 0.5;
            F = ((r = (e + j) * 0.5) + (t = (j + a) * 0.5)) * 0.5;
            G = ((s = (i + k) * 0.5) + (u = (k + n) * 0.5)) * 0.5;
            if (((O = z((j - l) * (N = h - i) - (k - h) * (L = l - e))) + (P = z((a - l) * N - (n - h) * L))) * (O + P) < c._tessTol * (L * L + N * N)) {
              c._addPoint(l, h, q === 0 ? q | f.PT_BEVEL : q);
            } else {
              d(c, e, i, r, s, F, G, J = (F + (H = (t + B) * 0.5)) * 0.5, K = (G + (I = (u + D) * 0.5)) * 0.5, o + 1, 0);
              d(c, J, K, H, I, B, D, l, h, o + 1, q);
            }
          }
        }
      };
    }, {
      "./types": 154
    }],
    153: [function (a) {
      "use strict";
  
      a("./graphics");
      a("./graphics-point");
      a("./helper");
    }, {
      "./graphics": 151,
      "./graphics-point": 150,
      "./helper": 152
    }],
    154: [function (a, b) {
      "use strict";
  
      var c = cc.Enum({
        BUTT: 0,
        ROUND: 1,
        SQUARE: 2
      });
      var d = cc.Enum({
        BEVEL: 0,
        ROUND: 1,
        MITER: 2
      });
      var e = cc.Enum({
        PT_CORNER: 1,
        PT_LEFT: 2,
        PT_BEVEL: 4,
        PT_INNERBEVEL: 8
      });
      b.exports = {
        LineCap: c,
        LineJoin: d,
        PointFlags: e
      };
    }, {}],
    155: [function (a) {
      "use strict";
  
      a("./platform");
      a("./assets");
      a("./CCNode");
      a("./CCPrivateNode");
      a("./CCScene");
      a("./components");
      a("./graphics");
      a("./collider");
      a("./collider/CCIntersection");
      a("./physics");
      a("./camera/CCCamera");
      a("./geom-utils");
      a("./mesh");
      a("./3d");
      a("./base-ui/CCWidgetManager");
    }, {
      "./3d": undefined,
      "./CCNode": 26,
      "./CCPrivateNode": 27,
      "./CCScene": 28,
      "./assets": 74,
      "./base-ui/CCWidgetManager": 85,
      "./camera/CCCamera": 86,
      "./collider": 94,
      "./collider/CCIntersection": 92,
      "./components": 127,
      "./geom-utils": 142,
      "./graphics": 153,
      "./mesh": 158,
      "./physics": undefined,
      "./platform": 180
    }],
    156: [function (b, g) {
      "use strict";
  
      var j = e(b("../../renderer/core/input-assembler"));
      var k = e(b("../../renderer/gfx"));
      var i = b("./mesh-data");
      function e(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      var m = b("../renderer");
      var a = b("../event/event-target");
      function n(a, b, c) {
        a[b] = c._val;
      }
      function c(a, b, c) {
        a[b] = c.x;
        a[b + 1] = c.y;
      }
      function l(a, b, c) {
        a[b] = c.x;
        a[b + 1] = c.y;
        a[b + 2] = c.z;
      }
      var h;
      var q = {
        5120: "getInt8",
        5121: "getUint8",
        5122: "getInt16",
        5123: "getUint16",
        5124: "getInt32",
        5125: "getUint32",
        5126: "getFloat32"
      };
      var w = {
        5120: "setInt8",
        5121: "setUint8",
        5122: "setInt16",
        5123: "setUint16",
        5124: "setInt32",
        5125: "setUint32",
        5126: "setFloat32"
      };
      h = new ArrayBuffer(2);
      new DataView(h).setInt16(0, 256, true);
      var o = new Int16Array(h)[0] === 256;
      var d = cc.Class({
        name: "cc.Mesh",
        extends: cc.Asset,
        mixins: [a],
        properties: {
          _nativeAsset: {
            override: true,
            get: function () {
              return this._buffer;
            },
            set: function (a) {
              this._buffer = ArrayBuffer.isView(a) ? a.buffer : a;
              this.initWithBuffer();
            }
          },
          _vertexBundles: {
            default: null,
            type: i.VertexBundle
          },
          _primitives: {
            default: null,
            Primitive: i.Primitive
          },
          _minPos: cc.v3(),
          _maxPos: cc.v3(),
          subMeshes: {
            get: function () {
              return this._subMeshes;
            },
            set: function (a) {
              this._subMeshes = a;
            }
          },
          subDatas: {
            get: function () {
              return this._subDatas;
            }
          }
        },
        ctor: function () {
          this._subMeshes = [];
          this._subDatas = [];
          this.loaded = false;
        },
        initWithBuffer: function () {
          this._subMeshes.length = 0;
          for (var a = this._primitives, b = 0; b < a.length; b++) {
            var g = a[b];
            var n = g.data;
            var q = new Uint8Array(this._buffer, n.offset, n.length);
            var r = this._vertexBundles[g.vertexBundleIndices[0]];
            var t = r.data;
            var w = new k.default.VertexFormat(r.formats);
            var x = new Uint8Array(this._buffer, t.offset, t.length);
            var y = this._canVertexFormatBatch(w);
            var z = new i.MeshData();
            z.vData = x;
            z.iData = q;
            z.vfm = w;
            z.offset = t.offset;
            z.canBatch = y;
            this._subDatas.push(z);
            var A = new k.default.VertexBuffer(m.device, w, k.default.USAGE_STATIC, x);
            var B = new k.default.IndexBuffer(m.device, g.indexUnit, k.default.USAGE_STATIC, q);
            this._subMeshes.push(new j.default(A, B));
          }
          this.loaded = true;
          this.emit("load");
        },
        _canVertexFormatBatch: function (a) {
          var b = a._attr2el[k.default.ATTR_POSITION];
          return !b || b.type === k.default.ATTR_TYPE_FLOAT32 && a._bytes % 4 == 0;
        },
        init: function (a, b, d, e) {
          if (d === undefined) {
            d = false;
          }
          if (e === undefined) {
            e = 0;
          }
          var f = new Uint8Array(a._bytes * b);
          var c = new i.MeshData();
          c.vData = f;
          c.vfm = a;
          c.vDirty = true;
          c.canBatch = this._canVertexFormatBatch(a);
          var g = new k.default.VertexBuffer(m.device, a, d ? k.default.USAGE_DYNAMIC : k.default.USAGE_STATIC, f);
          c.vb = g;
          this._subMeshes[e] = new j.default(c.vb);
          var h = this._subDatas[e];
          if (h) {
            if (h.vb) {
              h.vb.destroy();
            }
            if (h.ib) {
              h.ib.destroy();
            }
          }
          this._subDatas[e] = c;
          this.loaded = true;
          this.emit("load");
          this.emit("init-format");
        },
        setVertices: function (b, h, e) {
          e = e || 0;
          var j = this._subDatas[e];
          var q = j.vfm.element(b);
          if (q) {
            var r;
            var s = typeof h[0] == "number";
            var o = q.num;
            var t = s ? h.length / o | 0 : h.length;
            if (j.vData.byteLength < t * q.stride) {
              j.setVData(new Uint8Array(t * j.vfm._bytes));
            }
            var f = 4;
            if (b === k.default.ATTR_COLOR) {
              if (s) {
                r = j.getVData();
                f = 1;
              } else {
                r = j.getVData(Uint32Array);
              }
            } else {
              r = j.getVData(Float32Array);
            }
            var u = q.stride / f;
            var w = q.offset / f;
            if (s) {
              for (var p = 0, z = h.length / o; p < z; p++) {
                for (var g = p * o, B = p * u + w, C = 0; C < o; C++) {
                  r[B + C] = h[g + C];
                }
              }
            } else {
              var D;
              D = b === k.default.ATTR_COLOR ? n : o === 2 ? c : l;
              for (var F = 0, G = h.length; F < G; F++) {
                D(r, F * u + w, h[F]);
              }
            }
            j.vDirty = true;
          }
        },
        setIndices: function (a, b, d) {
          b = b || 0;
          var f = a;
          if (a instanceof Uint16Array) {
            f = new Uint8Array(a.buffer, a.byteOffset, a.byteLength);
          } else if (Array.isArray(a)) {
            f = new Uint16Array(a);
            f = new Uint8Array(f.buffer, f.byteOffset, f.byteLength);
          }
          var g = d ? k.default.USAGE_DYNAMIC : k.default.USAGE_STATIC;
          var h = this._subDatas[b];
          if (h.ib) {
            h.iData = f;
            h.iDirty = true;
          } else {
            h.iData = f;
            var i = new k.default.IndexBuffer(m.device, k.default.INDEX_FMT_UINT16, g, f, f.byteLength / k.default.IndexBuffer.BYTES_PER_INDEX[k.default.INDEX_FMT_UINT16]);
            h.ib = i;
            this._subMeshes[b]._indexBuffer = h.ib;
          }
        },
        setPrimitiveType: function (a, b) {
          b = b || 0;
          if (this._subMeshes[b]) {
            this._subMeshes[b]._primitiveType = a;
          }
        },
        clear: function () {
          this._subMeshes.length = 0;
          for (var a = this._subDatas, b = 0, c = a.length; b < c; b++) {
            var d = a[b].vb;
            if (d) {
              d.destroy();
            }
            var f = a[b].ib;
            if (f) {
              f.destroy();
            }
          }
          a.length = 0;
        },
        setBoundingBox: function (a, b) {
          this._minPos = a;
          this._maxPos = b;
        },
        destroy: function () {
          this.clear();
        },
        _uploadData: function () {
          for (var b = this._subDatas, c = 0, d = b.length; c < d; c++) {
            var f = b[c];
            if (f.vDirty) {
              var g = f.vb;
              var h = f.vData;
              g.update(0, h);
              f.vDirty = false;
            }
            if (f.iDirty) {
              var i = f.ib;
              var j = f.iData;
              i.update(0, j);
              f.iDirty = false;
            }
          }
        },
        _getAttrMeshData: function (b, f) {
          var e = this._subDatas[b];
          if (!e) {
            return [];
          }
          var i = e.vfm;
          var j = i.element(f);
          if (!j) {
            return [];
          }
          if (!e.attrDatas) {
            e.attrDatas = {};
          }
          var k = e.attrDatas;
          var n = k[f];
          if (n) {
            return n;
          }
          n = k[f] = [];
          for (var r = e.vData, s = new DataView(r.buffer, r.byteOffset, r.byteLength), c = j.stride, l = j.offset, h = j.num, t = j.bytes / h, d = q[j.type], p = r.byteLength / i._bytes, u = 0; u < p; u++) {
            for (var v = u * c + l, w = 0; w < h; w++) {
              var x = s[d](v + w * t, o);
              n.push(x);
            }
          }
          return n;
        },
        copyAttribute: function (b, d, e, i, j) {
          var k = false;
          var n = this._subDatas[b];
          if (!n) {
            return k;
          }
          var a = n.vfm;
          var q = a.element(d);
          if (!q) {
            return k;
          }
          var c = w[q.type];
          if (!c) {
            return k;
          }
          var l = this._getAttrMeshData(b, d);
          var h = n.vData.byteLength / a._bytes;
          var r = q.bytes / q.num;
          if (l.length > 0) {
            for (var f = new DataView(e, j), p = i, t = q.num, g = 0; g < h; ++g) {
              for (var u = g * t, v = 0; v < t; ++v) {
                var x = u + v;
                var z = p * g + r * v;
                f[c](z, l[x], o);
              }
            }
            k = true;
          }
          return k;
        },
        copyIndices: function (b, d) {
          var e = this._subDatas[b];
          if (!e) {
            return false;
          }
          for (var f = e.iData, g = f.length / 2, h = new DataView(f.buffer, f.byteOffset, f.byteLength), a = q[k.default.INDEX_FMT_UINT8], i = 0; i < g; ++i) {
            d[i] = h[a](i * 2);
          }
          return true;
        }
      });
      cc.Mesh = g.exports = d;
    }, {
      "../../renderer/core/input-assembler": 272,
      "../../renderer/gfx": 282,
      "../event/event-target": 134,
      "../renderer": 193,
      "./mesh-data": 159
    }],
    157: [function (b, d) {
      "use strict";
  
      var f = i(b("../../renderer/gfx"));
      i(b("../../renderer/core/input-assembler"));
      var e = i(b("../geom-utils/aabb"));
      i(b("../value-types/vec3"));
      i(b("../value-types/mat4"));
      var g = i(b("../assets/material/material-variant"));
      function i(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      var j = b("../components/CCRenderComponent");
      var a = b("./CCMesh");
      var k = b("../renderer/render-flow");
      b("../renderer");
      var c = b("../assets/material/CCMaterial");
      var l = cc.Enum({
        OFF: 0,
        ON: 1
      });
      var h = cc.Class({
        name: "cc.MeshRenderer",
        extends: j,
        editor: false,
        properties: {
          _mesh: {
            default: null,
            type: a
          },
          _receiveShadows: false,
          _shadowCastingMode: l.OFF,
          _enableAutoBatch: false,
          mesh: {
            get: function () {
              return this._mesh;
            },
            set: function (a) {
              if (this._mesh !== a) {
                this._setMesh(a);
                if (a) {
                  this.markForRender(true);
                  this.node._renderFlag |= k.FLAG_TRANSFORM;
                } else {
                  this.disableRender();
                }
              }
            },
            type: a,
            animatable: false
          },
          textures: {
            default: [],
            type: cc.Texture2D,
            visible: false
          },
          receiveShadows: {
            get: function () {
              return this._receiveShadows;
            },
            set: function (a) {
              this._receiveShadows = a;
              this._updateReceiveShadow();
            },
            animatable: false
          },
          shadowCastingMode: {
            get: function () {
              return this._shadowCastingMode;
            },
            set: function (a) {
              this._shadowCastingMode = a;
              this._updateCastShadow();
            },
            type: l,
            animatable: false
          },
          enableAutoBatch: {
            get: function () {
              return this._enableAutoBatch;
            },
            set: function (a) {
              this._enableAutoBatch = a;
            }
          }
        },
        statics: {
          ShadowCastingMode: l
        },
        ctor: function () {
          this._boundingBox = cc.geomUtils && new e.default();
        },
        onEnable: function () {
          var a = this;
          this._super();
          if (this._mesh && !this._mesh.loaded) {
            this.disableRender();
            this._mesh.once("load", function () {
              if (a.isValid) {
                a._setMesh(a._mesh);
                a.markForRender(true);
              }
            });
            cc.assetManager.postLoadNative(this._mesh);
          } else {
            this._setMesh(this._mesh);
          }
          this._updateRenderNode();
          this._updateMaterial();
        },
        onDestroy: function () {
          this._setMesh(null);
          cc.pool.assembler.put(this._assembler);
        },
        _updateRenderNode: function () {
          this._assembler.setRenderNode(this.node);
        },
        _setMesh: function (a) {
          if (cc.geomUtils && a) {
            e.default.fromPoints(this._boundingBox, a._minPos, a._maxPos);
          }
          if (this._mesh) {
            this._mesh.off("init-format", this._updateMeshAttribute, this);
          }
          if (a) {
            a.on("init-format", this._updateMeshAttribute, this);
          }
          this._mesh = a;
          if (this._assembler) {
            this._assembler._worldDatas = {};
          }
          this._updateMeshAttribute();
        },
        _getDefaultMaterial: function () {
          return c.getBuiltinMaterial("unlit");
        },
        _validateRender: function () {
          var a = this._mesh;
          if (!(a && a._subDatas.length > 0)) {
            this.disableRender();
          }
        },
        _updateMaterial: function () {
          var a = this.textures;
          if (a && a.length > 0) {
            for (var b = this._getDefaultMaterial(), c = 0; c < a.length; c++) {
              var d = this._materials[c];
              if (!(d && d._uuid !== b._uuid)) {
                if (!d) {
                  d = g.default.create(b, this);
                  this.setMaterial(c, d);
                }
                d.setProperty("diffuseTexture", a[c]);
              }
            }
          }
          this._updateReceiveShadow();
          this._updateCastShadow();
          this._updateMeshAttribute();
        },
        _updateReceiveShadow: function () {
          for (var a = this.getMaterials(), b = 0; b < a.length; b++) {
            a[b].define("CC_USE_SHADOW_MAP", this._receiveShadows, undefined, true);
          }
        },
        _updateCastShadow: function () {
          for (var a = this.getMaterials(), b = 0; b < a.length; b++) {
            a[b].define("CC_CASTING_SHADOW", this._shadowCastingMode === l.ON, undefined, true);
          }
        },
        _updateMeshAttribute: function () {
          var a = this._mesh && this._mesh.subDatas;
          if (a) {
            for (var b = this.getMaterials(), c = 0; c < b.length && a[c]; c++) {
              var d = a[c].vfm;
              var e = b[c];
              e.define("CC_USE_ATTRIBUTE_COLOR", !!d.element(f.default.ATTR_COLOR), undefined, true);
              e.define("CC_USE_ATTRIBUTE_UV0", !!d.element(f.default.ATTR_UV0), undefined, true);
              e.define("CC_USE_ATTRIBUTE_NORMAL", !!d.element(f.default.ATTR_NORMAL), undefined, true);
              e.define("CC_USE_ATTRIBUTE_TANGENT", !!d.element(f.default.ATTR_TANGENT), undefined, true);
            }
          }
        },
        _checkBacth: function () {}
      });
      cc.MeshRenderer = d.exports = h;
    }, {
      "../../renderer/core/input-assembler": 272,
      "../../renderer/gfx": 282,
      "../assets/material/CCMaterial": 76,
      "../assets/material/material-variant": 83,
      "../components/CCRenderComponent": 109,
      "../geom-utils/aabb": 138,
      "../renderer": 193,
      "../renderer/render-flow": 194,
      "../value-types/mat4": 253,
      "../value-types/vec3": 261,
      "./CCMesh": 156
    }],
    158: [function (a) {
      "use strict";
  
      a("./CCMesh");
      a("./CCMeshRenderer");
      a("./mesh-renderer");
    }, {
      "./CCMesh": 156,
      "./CCMeshRenderer": 157,
      "./mesh-renderer": 160
    }],
    159: [function (b, d, e) {
      "use strict";
  
      e.__esModule = true;
      e.BufferRange = undefined;
      e.MeshData = c;
      e.VertexFormat = e.VertexBundle = e.Primitive = undefined;
      var f;
      var g = (f = b("../../renderer/gfx")) && f.__esModule ? f : {
        default: f
      };
      var h = cc.Class({
        name: "cc.BufferRange",
        properties: {
          offset: 0,
          length: 0
        }
      });
      e.BufferRange = h;
      var i = cc.Class({
        name: "cc.mesh.VertexFormat",
        properties: {
          name: "",
          type: -1,
          num: -1,
          normalize: false
        }
      });
      e.VertexFormat = i;
      var a = cc.Class({
        name: "cc.mesh.VertexBundle",
        properties: {
          data: {
            default: null,
            type: h
          },
          formats: {
            default: [],
            type: i
          },
          verticesCount: 0
        }
      });
      e.VertexBundle = a;
      var j = cc.Class({
        name: "cc.mesh.Primitive",
        properties: {
          vertexBundleIndices: {
            default: [],
            type: cc.Float
          },
          data: {
            default: null,
            type: h
          },
          indexUnit: g.default.INDEX_FMT_UINT16,
          topology: g.default.PT_TRIANGLES
        }
      });
      function c() {
        this.vData = null;
        this.float32VData = null;
        this.uint32VData = null;
        this.iData = null;
        this.uint16IData = null;
        this.vfm = null;
        this.offset = 0;
        this.vb = null;
        this.ib = null;
        this.vDirty = false;
        this.iDirty = false;
        this.enable = true;
      }
      e.Primitive = j;
      c.prototype.setVData = function (a) {
        this.vData = a;
        this.float32VData = null;
        this.uint32VData = null;
      };
      c.prototype.getVData = function (a) {
        if (a === Float32Array) {
          if (!this.float32VData) {
            this.float32VData = new Float32Array(this.vData.buffer, this.vData.byteOffset, this.vData.byteLength / 4);
          }
          return this.float32VData;
        } else if (a === Uint32Array) {
          if (!this.uint32VData) {
            this.uint32VData = new Uint32Array(this.vData.buffer, this.vData.byteOffset, this.vData.byteLength / 4);
          }
          return this.uint32VData;
        } else {
          return this.vData;
        }
      };
      c.prototype.getIData = function (a) {
        if (a === Uint16Array) {
          if (!this.uint16IData) {
            this.uint16IData = new Uint16Array(this.iData.buffer, this.iData.byteOffset, this.iData.byteLength / 2);
          }
          return this.uint16IData;
        } else {
          return this.iData;
        }
      };
    }, {
      "../../renderer/gfx": 282
    }],
    160: [function (b, d, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var f = g(b("../renderer/assembler"));
      var j = g(b("../../renderer/gfx"));
      var k = g(b("../value-types/vec3"));
      function g(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      function m(a, b) {
        return (m = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      var a = b("./CCMeshRenderer");
      var n = new k.default();
      var c = function (b) {
        var c;
        var d;
        function f() {
          return b.apply(this, arguments) || this;
        }
        d = b;
        (c = f).prototype = Object.create(d.prototype);
        c.prototype.constructor = c;
        m(c, d);
        var g = f.prototype;
        g.init = function (a) {
          b.prototype.init.call(this, a);
          this._worldDatas = {};
          this._renderNode = null;
        };
        g.setRenderNode = function (a) {
          this._renderNode = a;
        };
        g.fillBuffers = function (b, d) {
          if (b.mesh) {
            b.mesh._uploadData();
            for (var e = d.cullingMask === b.node._cullingMask, f = b.enableAutoBatch, g = b._materials, i = b.mesh._subMeshes, a = b.mesh.subDatas, k = 0; k < i.length; k++) {
              var m = i[k];
              var n = a[k];
              var o = g[k] || g[0];
              if (f && n.canBatch && m._primitiveType === j.default.PT_TRIANGLES) {
                if (!(e && o.getHash() === d.material.getHash())) {
                  d._flush();
                }
                d.material = o;
                d.cullingMask = b.node._cullingMask;
                d.node = d._dummyNode;
                this._fillBuffer(b, n, d, k);
              } else {
                d._flush();
                d.material = o;
                d.cullingMask = b.node._cullingMask;
                d.node = this._renderNode;
                d._flushIA(m);
              }
            }
          }
        };
        g._fillBuffer = function (b, g, e, i) {
          var j = g.getVData(Float32Array);
          var k = g.vfm;
          var m = j.byteLength / k._bytes | 0;
          var a = g.getIData(Uint16Array);
          var n = a.length;
          var c = e.getBuffer("mesh", k);
          var l = c.request(m, n);
          var h = l.indiceOffset;
          var o = l.byteOffset >> 2;
          var f = l.vertexOffset;
          var d = c._vData;
          var q = c._iData;
          if (!(!e.worldMatDirty && this._worldDatas[i])) {
            this._updateWorldVertices(i, m, j, k, b.node._worldMatrix);
          }
          d.set(this._worldDatas[i], o);
          for (var p = 0; p < n; p++) {
            q[h + p] = f + a[p];
          }
        };
        g._updateWorldVertices = function (b, l, e, i, m) {
          var a = this._worldDatas[b];
          if (!a) {
            (a = this._worldDatas[b] = new Float32Array(e.length)).set(e);
          }
          for (var q = i._bytes / 4, c = i._elements, h = 0, r = c.length; h < r; h++) {
            var f = c[h];
            var s = f.offset / 4;
            if (f.name === j.default.ATTR_POSITION || f.name === j.default.ATTR_NORMAL) {
              for (var t = f.name === j.default.ATTR_NORMAL ? k.default.transformMat4Normal : k.default.transformMat4, w = 0; w < l; w++) {
                var x = w * q + s;
                n.x = e[x];
                n.y = e[x + 1];
                n.z = e[x + 2];
                t(n, n, m);
                a[x] = n.x;
                a[x + 1] = n.y;
                a[x + 2] = n.z;
              }
            }
          }
        };
        g._drawDebugDatas = function (b, c, d) {
          var e = b._debugDatas[d];
          if (e) {
            for (var f = 0; f < e.length; f++) {
              var g = e[f];
              if (g) {
                var h = g.material;
                c.material = h;
                c._flushIA(g.ia);
              }
            }
          }
        };
        return f;
      }(f.default);
      e.default = c;
      f.default.register(a, c);
      d.exports = e.default;
    }, {
      "../../renderer/gfx": 282,
      "../renderer/assembler": 190,
      "../value-types/vec3": 261,
      "./CCMeshRenderer": 157
    }],
    161: [function (b, g) {
      "use strict";
  
      var j = b("./component-scheduler");
      var e = b("./platform/CCObject").Flags;
      var k = b("./platform/js");
      var m = e.IsPreloadStarted;
      var q = e.IsOnLoadStarted;
      var a = e.IsOnLoadCalled;
      var v = e.Deactivating;
      var c = cc.Class({
        extends: j.LifeCycleInvoker,
        add: function (a) {
          this._zero.array.push(a);
        },
        remove: function (a) {
          this._zero.fastRemove(a);
        },
        cancelInactive: function (a) {
          j.LifeCycleInvoker.stableRemoveInactive(this._zero, a);
        },
        invoke: function () {
          this._invoke(this._zero);
          this._zero.array.length = 0;
        }
      });
      var i = j.createInvokeImpl("c.__preload();");
      var h = j.createInvokeImpl("c.onLoad();c._objFlags|=" + a, false, a);
      var l = new k.Pool(4);
      function f(a, b, c) {
        if (b) {
          a._removeComponent(b);
        } else {
          k.array.removeAt(a._components, c);
        }
      }
      function d() {
        this._activatingStack = [];
      }
      l.get = function () {
        var a = this._get() || {
          preload: new c(i),
          onLoad: new j.OneOffInvoker(h),
          onEnable: new j.OneOffInvoker(j.invokeOnEnable)
        };
        a.preload._zero.i = -1;
        var b = a.onLoad;
        b._zero.i = -1;
        b._neg.i = -1;
        b._pos.i = -1;
        (b = a.onEnable)._zero.i = -1;
        b._neg.i = -1;
        b._pos.i = -1;
        return a;
      };
      var n = cc.Class({
        ctor: d,
        reset: d,
        _activateNodeRecursively: function (b, c, d, e) {
          if (!(b._objFlags & v)) {
            b._activeInHierarchy = true;
            for (var g = b._components.length, i = 0; i < g; ++i) {
              var j = b._components[i];
              if (j instanceof cc.Component) {
                this.activateComp(j, c, d, e);
              } else {
                f(b, j, i);
                --i;
                --g;
              }
            }
            b._childArrivalOrder = b._children.length;
            for (var k = 0, m = b._children.length; k < m; ++k) {
              var l = b._children[k];
              l._localZOrder = l._localZOrder & 4294901760 | k + 1;
              if (l._active) {
                this._activateNodeRecursively(l, c, d, e);
              }
            }
            b._onPostActivated(true);
          }
        },
        _deactivateNodeRecursively: function (b) {
          b._objFlags |= v;
          b._activeInHierarchy = false;
          for (var c = b._components.length, d = 0; d < c; ++d) {
            var e = b._components[d];
            if (e._enabled && (cc.director._compScheduler.disableComp(e), b._activeInHierarchy)) {
              b._objFlags &= ~v;
              return;
            }
          }
          for (var f = 0, g = b._children.length; f < g; ++f) {
            var h = b._children[f];
            if (h._activeInHierarchy && (this._deactivateNodeRecursively(h), b._activeInHierarchy)) {
              b._objFlags &= ~v;
              return;
            }
          }
          b._onPostActivated(false);
          b._objFlags &= ~v;
        },
        activateNode: function (a, b) {
          if (b) {
            var c = l.get();
            this._activatingStack.push(c);
            this._activateNodeRecursively(a, c.preload, c.onLoad, c.onEnable);
            c.preload.invoke();
            c.onLoad.invoke();
            c.onEnable.invoke();
            this._activatingStack.pop();
            l.put(c);
          } else {
            this._deactivateNodeRecursively(a);
            for (var d = this._activatingStack, e = 0; e < d.length; e++) {
              var f = d[e];
              f.preload.cancelInactive(m);
              f.onLoad.cancelInactive(q);
              f.onEnable.cancelInactive();
            }
          }
          a.emit("active-in-hierarchy-changed", a);
        },
        activateComp: function (b, c, d, e) {
          if (cc.isValid(b, true) && (b._objFlags & m || (b._objFlags |= m, b.__preload && (c ? c.add(b) : b.__preload())), b._objFlags & q || (b._objFlags |= q, b.onLoad ? d ? d.add(b) : (b.onLoad(), b._objFlags |= a) : b._objFlags |= a), b._enabled)) {
            if (!b.node._activeInHierarchy) {
              return;
            }
            cc.director._compScheduler.enableComp(b, e);
          }
        },
        destroyComp: function (b) {
          cc.director._compScheduler.disableComp(b);
          if (b.onDestroy && b._objFlags & a) {
            b.onDestroy();
          }
        },
        resetComp: false
      });
      g.exports = n;
    }, {
      "./component-scheduler": 95,
      "./platform/CCObject": 168,
      "./platform/js": 183,
      "./utils/misc": 236
    }],
    162: [function (j, k) {
      "use strict";
  
      var q = j("./js");
      var e = j("./CCEnum");
      var i = j("./utils");
      i.isPlainEmptyObj_DEV;
      i.cloneable_DEV;
      var z = j("./attribute");
      var B = z.DELIMETER;
      var a = j("./preprocess-class");
      j("./requiring-frame");
      var D = ["name", "extends", "mixins", "ctor", "__ctor__", "properties", "statics", "editor", "__ES6__"];
      function n(a, b) {
        if (a.indexOf(b) < 0) {
          a.push(b);
        }
      }
      var c = {
        datas: null,
        push: function (a) {
          if (this.datas) {
            this.datas.push(a);
          } else {
            this.datas = [a];
            var b = this;
            // TOLOOK
            setTimeout(function () {
              b.init();
            }, 0);
          }
        },
        init: function () {
          var b = this.datas;
          if (b) {
            for (var c = 0; c < b.length; ++c) {
              var d = b[c];
              var f = d.cls;
              var g = d.props;
              if (typeof g == "function") {
                g = g();
              }
              var h = q.getClassName(f);
              if (g) {
                A(f, h, g, f.$super, d.mixins);
              }
            }
            this.datas = null;
          }
        }
      };
      function h(a, b) {
        n(a.__props__, b);
      }
      function l(a, b, c, d) {
        var e = d.default;
        z.setClassAttr(a, c, "default", e);
        h(a, c);
        w(a, d, 0, c);
      }
      function f(b, d, e, f, g) {
        var a = f.get;
        var i = f.set;
        var c = b.prototype;
        var j = !Object.getOwnPropertyDescriptor(c, e);
        if (a) {
          w(b, f, 0, e);
          z.setClassAttr(b, e, "serializable", false);
          if (!g) {
            q.get(c, e, a, j, j);
          }
        }
        if (i) {
          if (!g) {
            q.set(c, e, i, j, j);
          }
        }
      }
      function d(a) {
        if (typeof a == "function") {
          return a();
        } else {
          return a;
        }
      }
      function r(a, b, c) {
        for (var d in b) {
          if (!(a.hasOwnProperty(d) || c && !c(d))) {
            Object.defineProperty(a, d, q.getPropertyDescriptor(b, d));
          }
        }
      }
      function p(b, g, e, i) {
        var j;
        var k;
        var m = i.__ctor__;
        var c = i.ctor;
        var l = i.__ES6__;
        if (l) {
          j = [c];
          k = c;
        } else {
          j = m ? [m] : x(g, e, i);
          k = u(j, g, b, i);
          q.value(k, "extend", function (a) {
            a.extends = this;
            return C(a);
          }, true);
        }
        q.value(k, "__ctors__", j.length > 0 ? j : null, true);
        var h = k.prototype;
        if (g) {
          if (!l) {
            q.extend(k, g);
            h = k.prototype;
          }
          k.$super = g;
        }
        if (e) {
          for (var n = e.length - 1; n >= 0; n--) {
            var p = e[n];
            r(h, p.prototype);
            r(k, p, function (a) {
              return p.hasOwnProperty(a) && true;
            });
            if (C._isCCClass(p)) {
              r(z.getClassAttrs(k), z.getClassAttrs(p));
            }
          }
          h.constructor = k;
        }
        if (!l) {
          h.__initProps__ = t;
        }
        q.setClassName(b, k);
        return k;
      }
      function o(b, d, e, f) {
        var g = cc.Component;
        var h = cc._RF.peek();
        if (h && q.isChildClassOf(d, g)) {
          if (q.isChildClassOf(h.cls, g)) {
            return null;
          }
          b = b || h.script;
        }
        var a = p(b, d, e, f);
        if (h) {
          if (q.isChildClassOf(d, g)) {
            var i = h.uuid;
            if (i) {
              q._setClassId(i, a);
            }
            h.cls = a;
          } else if (!q.isChildClassOf(h.cls, g)) {
            h.cls = a;
          }
        }
        return a;
      }
      function g(a) {
        for (var b = q.getClassName(a), c = a.constructor, d = "new " + b + "(", e = 0; e < c.__props__.length; e++) {
          d += a[c.__props__[e]];
          if (e < c.__props__.length - 1) {
            d += ",";
          }
        }
        return d + ")";
      }
      function m(a) {
        return JSON.stringify(a).replace(/\u2028/g, "\\u2028").replace(/\u2029/g, "\\u2029");
      }
      function s(a, b) {
        for (var d = [], e = "", f = 0; f < b.length; f++) {
          var i = b[f];
          var j = i + B + "default";
          if (j in a) {
            var k;
            var p;
            k = v.test(i) ? "this." + i + "=" : "this[" + m(i) + "]=";
            var q = a[j];
            if (typeof q == "object" && q) {
              p = q instanceof cc.ValueType ? g(q) : Array.isArray(q) ? "[]" : "{}";
            } else if (typeof q == "function") {
              var t = d.length;
              d.push(q);
              p = "F[" + t + "]()";
            } else {
              p = typeof q == "string" ? m(q) : q;
            }
            e += k = k + p + ";";
          }
        }
        if (d.length === 0) {
          return Function(e);
        } else {
          return Function("F", "return (function(){" + e + "})")(d);
        }
      }
      var v = /^[A-Za-z_$][0-9A-Za-z_$]*$/;
      function t(a) {
        var b = z.getClassAttrs(a);
        var d = a.__props__;
        if (d === null) {
          c.init();
          d = a.__props__;
        }
        var e = s(b, d);
        a.prototype.__initProps__ = e;
        e.call(this);
      }
      function u(c, d, e, f) {
        var g = "return function CCClass(){";
        if (d && b(d, f)) {
          g += "this._super=null;";
        }
        g += "this.__initProps__(CCClass);";
        var h = c.length;
        if (h > 0) {
          var i = "].apply(this,arguments);";
          if (h === 1) {
            g += "CCClass.__ctors__[0" + i;
          } else {
            g += "var cs=CCClass.__ctors__;";
            for (var a = 0; a < h; a++) {
              g += "cs[" + a + i;
            }
          }
        }
        return Function(g += "}")();
      }
      function x(b, d, e) {
        for (var f, g = [], i = [b].concat(d), j = 0; j < i.length; j++) {
          var k = i[j];
          if (k) {
            for (var l = (f = k, C._isCCClass(f) ? f.__ctors__ || [] : [f]), m = 0; m < l.length; m++) {
              n(g, l[m]);
            }
          }
        }
        var p = e.ctor;
        if (p) {
          g.push(p);
        }
        return g;
      }
      var y = /\b\._super\b/;
      function b(b, c) {
        var d = false;
        for (var e in c) {
          if (!(D.indexOf(e) >= 0)) {
            var f = c[e];
            if (typeof f == "function") {
              var g = q.getPropertyDescriptor(b.prototype, e);
              if (g) {
                var h = g.value;
                if (typeof h == "function") {
                  if (y.test(f)) {
                    d = true;
                    c[e] = function (a, b) {
                      return function () {
                        var c = this._super;
                        this._super = a;
                        var d = b.apply(this, arguments);
                        this._super = c;
                        return d;
                      };
                    }(h, f);
                  }
                  continue;
                }
              }
            }
          }
        }
        return d;
      }
      function A(b, d, e, g, i, j) {
        b.__props__ = [];
        if (g && g.__props__) {
          b.__props__ = g.__props__.slice();
        }
        if (i) {
          for (var c = 0; c < i.length; ++c) {
            var k = i[c];
            if (k.__props__) {
              b.__props__ = b.__props__.concat(k.__props__.filter(function (a) {
                return b.__props__.indexOf(a) < 0;
              }));
            }
          }
        }
        if (e) {
          a.preprocessAttrs(e, d, b, j);
          for (var m in e) {
            var n = e[m];
            if ("default" in n) {
              l(b, 0, m, n);
            } else {
              f(b, 0, m, n, j);
            }
          }
        }
        var o = z.getClassAttrs(b);
        b.__values__ = b.__props__.filter(function (a) {
          return o[a + B + "serializable"] !== false;
        });
      }
      function C(b) {
        var g = (b = b || {}).name;
        var h = b.extends;
        var i = b.mixins;
        var j = o(g, h, i, b);
        if (!g) {
          g = cc.js.getClassName(j);
        }
        j._sealed = true;
        if (h) {
          h._sealed = false;
        }
        var k = b.properties;
        if (typeof k == "function" || h && h.__props__ === null || i && i.some(function (a) {
          return a.__props__ === null;
        })) {
          c.push({
            cls: j,
            props: k,
            mixins: i
          });
          j.__props__ = j.__values__ = null;
        } else {
          A(j, g, k, h, b.mixins, b.__ES6__);
        }
        var m;
        var n = b.statics;
        if (n) {
          for (m in n) {
            j[m] = n[m];
          }
        }
        for (var p in b) {
          if (!(D.indexOf(p) >= 0)) {
            var r = b[p];
            if (a.validateMethodWithProps(r, p, g, j, h)) {
              q.value(j.prototype, p, r, true, true);
            }
          }
        }
        var s = b.editor;
        if (s) {
          cc.Component._registerEditorProps(j, s);
        }
        return j;
      }
      C._isCCClass = function (a) {
        return a && a.hasOwnProperty("__ctors__");
      };
      C._fastDefine = function (a, b, d) {
        q.setClassName(a, b);
        for (var e = b.__props__ = b.__values__ = Object.keys(d), f = z.getClassAttrs(b), g = 0; g < e.length; g++) {
          var h = e[g];
          f[h + B + "visible"] = false;
          f[h + B + "default"] = d[h];
        }
      };
      C.Attr = z;
      C.attr = z.attr;
      C.getInheritanceChain = function (a) {
        for (var b = []; a = q.getSuper(a);) {
          if (a !== Object) {
            b.push(a);
          }
        }
        return b;
      };
      var E = {
        Integer: "Number",
        Float: "Number",
        Boolean: "Boolean",
        String: "String"
      };
      function w(a, b, d, g) {
        var i = null;
        var j = "";
        function k() {
          j = g + B;
          return i = z.getClassAttrs(a);
        }
        var l = b.type;
        if (l) {
          if (E[l]) {
            (i || k())[j + "type"] = l;
          } else if (!(l === "Object")) {
            if (l === z.ScriptUuid) {
              (i || k())[j + "type"] = "Script";
              i[j + "ctor"] = cc.ScriptAsset;
            } else if (typeof l == "object") {
              if (e.isEnum(l)) {
                (i || k())[j + "type"] = "Enum";
                i[j + "enumList"] = e.getList(l);
              }
            } else if (typeof l == "function") {
              (i || k())[j + "type"] = "Object";
              i[j + "ctor"] = l;
            }
          }
        }
        function h(a, c) {
          if (a in b) {
            var d = b[a];
            if (typeof d === c) {
              (i || k())[j + a] = d;
            }
          }
        }
        if (b.editorOnly) {
          (i || k())[j + "editorOnly"] = true;
        }
        if (b.serializable === false) {
          (i || k())[j + "serializable"] = false;
        }
        h("formerlySerializedAs", "string");
        var m = b.range;
        if (m && Array.isArray(m) && m.length >= 2) {
          (i || k())[j + "min"] = m[0];
          i[j + "max"] = m[1];
          if (m.length > 2) {
            i[j + "step"] = m[2];
          }
        }
        h("min", "number");
        h("max", "number");
        h("step", "number");
        h("userData", "object");
      }
      cc.Class = C;
      k.exports = {
        isArray: function (a) {
          a = d(a);
          return Array.isArray(a);
        },
        fastDefine: C._fastDefine,
        getNewValueTypeCode: g,
        IDENTIFIER_RE: v,
        escapeForJS: m,
        getDefault: d
      };
    }, {
      "./CCEnum": 164,
      "./attribute": 174,
      "./js": 183,
      "./preprocess-class": 184,
      "./requiring-frame": 185,
      "./utils": 186
    }],
    163: [function (j, k) {
      "use strict";
  
      j("./CCClass");
      var e = j("./preprocess-class");
      var q = j("./js");
      var n = "__ccclassCache__";
      function i(a) {
        return a;
      }
      function w(a, b) {
        return a[b] || (a[b] = {});
      }
      function a(a) {
        return function (b) {
          if (typeof b == "function") {
            return a(b);
          } else {
            return function (c) {
              return a(c, b);
            };
          }
        };
      }
      function o(a, b) {
        return function (a) {
          return function (c) {
            return b(c, a);
          };
        };
      }
      var c = o.bind(null, false);
      function l() {
        return o.bind(null, false);
      }
      var h = l();
      var r = l();
      function f(a) {
        return w(a, n);
      }
      function d(a) {
        var b;
        try {
          b = a();
        } catch (b) {
          return a;
        }
        if (typeof b != "object" || b === null) {
          return b;
        } else {
          return a;
        }
      }
      function s(a) {
        var b;
        try {
          b = new a();
        } catch (a) {
          return {};
        }
        return b;
      }
      function p(b, g, i, j, k, a) {
        var m;
        var n = k && (k.get || k.set);
        if (j) {
          m = e.getFullFormOfProperty(j, n);
        }
        var l = g[i];
        var h = q.mixin(l || {}, m || j || {});
        if (n) {
          if (k.get) {
            h.get = k.get;
          }
          if (k.set) {
            h.set = k.set;
          }
        } else {
          var o = undefined;
          if (k) {
            if (k.initializer) {
              o = d(k.initializer);
            }
          } else {
            var p = a.default || (a.default = s(b));
            if (p.hasOwnProperty(i)) {
              o = p[i];
            }
          }
          h.default = o;
        }
        g[i] = h;
      }
      var t = a(function (b, c) {
        var d = q.getSuper(b);
        if (d === Object) {
          d = null;
        }
        var e = {
          name: c,
          extends: d,
          ctor: b,
          __ES6__: true
        };
        var f = b[n];
        if (f) {
          var a = f.proto;
          if (a) {
            q.mixin(e, a);
          }
          b[n] = undefined;
        }
        return cc.Class(e);
      });
      function g(a, b, c) {
        return a(function (a, d) {
          var e = f(a);
          if (e) {
            var g = c !== undefined ? c : d;
            var h = w(e, "proto");
            w(h, "editor")[b] = g;
          }
        }, b);
      }
      function m(a) {
        return a(i);
      }
      var u = m(a);
      var v = g(c, "requireComponent");
      var y = m(h);
      var z = g(r, "executionOrder");
      var x = m(a);
      var A = m(a);
      var b = m(h);
      var B = m(h);
      var C = m(h);
      cc._decorator = k.exports = {
        ccclass: t,
        property: function (a, b, c) {
          var d = null;
          function e(a, b, c) {
            var e = f(a.constructor);
            if (e) {
              var g = w(e, "proto");
              var h = w(g, "properties");
              p(a.constructor, h, b, d, c, e);
            }
          }
          if (b === undefined) {
            d = a;
            return e;
          }
          e(a, b, c);
        },
        executeInEditMode: u,
        requireComponent: v,
        menu: y,
        executionOrder: z,
        disallowMultiple: x,
        playOnFocus: A,
        inspector: b,
        icon: B,
        help: C,
        mixins: function () {
          for (var a = [], b = 0; b < arguments.length; b++) {
            a[b] = arguments[b];
          }
          return function (b) {
            var c = f(b);
            if (c) {
              w(c, "proto").mixins = a;
            }
          };
        }
      };
    }, {
      "./CCClass": 162,
      "./js": 183,
      "./preprocess-class": 184,
      "./utils": 186
    }],
    164: [function (a, b) {
      "use strict";
  
      var c = a("./js");
      function d(b) {
        if ("__enums__" in b) {
          return b;
        }
        c.value(b, "__enums__", null, true);
        for (var d = -1, f = Object.keys(b), g = 0; g < f.length; g++) {
          var h = f[g];
          var i = b[h];
          if (i === -1) {
            i = ++d;
            b[h] = i;
          } else if (typeof i == "number") {
            d = i;
          } else if (typeof i == "string" && Number.isInteger(parseFloat(h))) {
            continue;
          }
          var j = "" + i;
          if (h !== j) {
            c.value(b, j, h);
          }
        }
        return b;
      }
      d.isEnum = function (a) {
        return a && a.hasOwnProperty("__enums__");
      };
      d.getList = function (a) {
        if (a.__enums__) {
          return a.__enums__;
        }
        var b = a.__enums__ = [];
        for (var c in a) {
          var d = a[c];
          if (Number.isInteger(d)) {
            b.push({
              name: c,
              value: d
            });
          }
        }
        b.sort(function (a, b) {
          return a.value - b.value;
        });
        return b;
      };
      b.exports = cc.Enum = d;
    }, {
      "./js": 183
    }],
    165: [function (a) {
      "use strict";
  
      var b;
      var c = a("../event-manager");
      var d = a("./CCInputManager");
      cc.Acceleration = function (a, b, c, d) {
        this.x = a || 0;
        this.y = b || 0;
        this.z = c || 0;
        this.timestamp = d || 0;
      };
      d.setAccelerometerEnabled = function (a) {
        var b = this;
        if (b._accelEnabled !== a) {
          b._accelEnabled = a;
          var c = cc.director.getScheduler();
          c.enableForTarget(b);
          if (b._accelEnabled) {
            b._registerAccelerometerEvent();
            b._accelCurTime = 0;
            c.scheduleUpdate(b);
          } else {
            b._unregisterAccelerometerEvent();
            b._accelCurTime = 0;
            c.unscheduleUpdate(b);
          }
        }
      };
      d.setAccelerometerInterval = function (a) {
        if (this._accelInterval !== a) {
          this._accelInterval = a;
        }
      };
      d._registerKeyboardEvent = function () {
        cc.game.canvas.addEventListener("keydown", function (a) {
          c.dispatchEvent(new cc.Event.EventKeyboard(a.keyCode, true));
          a.stopPropagation();
          a.preventDefault();
        }, false);
        cc.game.canvas.addEventListener("keyup", function (a) {
          c.dispatchEvent(new cc.Event.EventKeyboard(a.keyCode, false));
          a.stopPropagation();
          a.preventDefault();
        }, false);
      };
      d._registerAccelerometerEvent = function () {
        var a = window;
        var c = this;
        c._acceleration = new cc.Acceleration();
        c._accelDeviceEvent = a.DeviceMotionEvent || a.DeviceOrientationEvent;
        if (cc.sys.browserType === cc.sys.BROWSER_TYPE_MOBILE_QQ) {
          c._accelDeviceEvent = window.DeviceOrientationEvent;
        }
        var d = c._accelDeviceEvent === a.DeviceMotionEvent ? "devicemotion" : "deviceorientation";
        var e = navigator.userAgent;
        if (/Android/.test(e) || /Adr/.test(e) && cc.sys.browserType === cc.BROWSER_TYPE_UC) {
          c._minus = -1;
        }
        b = c.didAccelerate.bind(c);
        a.addEventListener(d, b, false);
      };
      d._unregisterAccelerometerEvent = function () {
        var a = window;
        var c = this._accelDeviceEvent === a.DeviceMotionEvent ? "devicemotion" : "deviceorientation";
        if (b) {
          a.removeEventListener(c, b, false);
        }
      };
      d.didAccelerate = function (b) {
        var d = this;
        var e = window;
        if (d._accelEnabled) {
          var f;
          var g;
          var h;
          var i = d._acceleration;
          if (d._accelDeviceEvent === window.DeviceMotionEvent) {
            var a = b.accelerationIncludingGravity;
            f = d._accelMinus * a.x * 0.1;
            g = d._accelMinus * a.y * 0.1;
            h = a.z * 0.1;
          } else {
            f = b.gamma / 90 * 0.981;
            g = -b.beta / 90 * 0.981;
            h = b.alpha / 90 * 0.981;
          }
          if (cc.view._isRotated) {
            var j = f;
            f = -g;
            g = j;
          }
          i.x = f;
          i.y = g;
          i.z = h;
          i.timestamp = b.timeStamp || Date.now();
          var c = i.x;
          if (e.orientation === 90) {
            i.x = -i.y;
            i.y = c;
          } else if (e.orientation === -90) {
            i.x = i.y;
            i.y = -c;
          } else if (e.orientation === 180) {
            i.x = -i.x;
            i.y = -i.y;
          }
          if (!(cc.sys.os !== cc.sys.OS_ANDROID && cc.sys.os !== cc.sys.OS_OPENHARMONY || cc.sys.browserType === cc.sys.BROWSER_TYPE_MOBILE_QQ)) {
            i.x = -i.x;
            i.y = -i.y;
          }
        }
      };
    }, {
      "../event-manager": 133,
      "./CCInputManager": 166
    }],
    166: [function (b, c) {
      "use strict";
  
      var d = b("./CCMacro");
      var g = b("./CCSys");
      var h = b("../event-manager");
      var j = cc.v2();
      var e = {
        _mousePressed: false,
        _isRegisterEvent: false,
        _preTouchPoint: cc.v2(0, 0),
        _prevMousePoint: cc.v2(0, 0),
        _preTouchPool: [],
        _preTouchPoolPointer: 0,
        _touches: [],
        _maxTouches: 10,
        _touchesIntegerDict: {},
        _touchPropagationAllowed: false,
        _indexBitsUsed: 0,
        _touchesCache: {},
        _touchCount: 0,
        _accelEnabled: false,
        _accelInterval: 0.2,
        _accelMinus: 1,
        _accelCurTime: 0,
        _acceleration: null,
        _accelDeviceEvent: null,
        _canvasBoundingRect: {
          left: 0,
          top: 0,
          adjustedLeft: 0,
          adjustedTop: 0,
          width: 0,
          height: 0
        },
        _getUnUsedIndex: function () {
          for (var b = cc.sys.now(), f = d.TOUCH_TIMEOUT, e = this._indexBitsUsed, g = -1, i = this._touches, j = this._touchesIntegerDict, a = this._touchesCache, k = 0; k < this._maxTouches; k++) {
            if (e & 1) {
              var m = i[k];
              if (m && b - m._lastModified > f) {
                var o = m.getID();
                delete j[o];
                delete a[o];
                this._touchCount--;
                if (g === -1) {
                  g = k;
                  this._indexBitsUsed |= 1 << k;
                } else {
                  this._indexBitsUsed &= ~(1 << k);
                }
              }
            } else if (g === -1) {
              g = k;
              this._indexBitsUsed |= 1 << k;
            }
            e >>= 1;
          }
          return g;
        },
        _glView: null,
        _updateCanvasBoundingRect: function () {
          var a = cc.game.canvas;
          var b = this._canvasBoundingRect;
          var c = document.documentElement;
          var d = window.pageXOffset - c.clientLeft;
          var e = window.pageYOffset - c.clientTop;
          if (a.getBoundingClientRect) {
            var f = a.getBoundingClientRect();
            b.left = f.left + d;
            b.top = f.top + e;
            b.width = f.width;
            b.height = f.height;
          } else if (a instanceof HTMLCanvasElement) {
            b.left = d;
            b.top = e;
            b.width = a.width;
            b.height = a.height;
          } else {
            b.left = d;
            b.top = e;
            b.width = parseInt(a.style.width);
            b.height = parseInt(a.style.height);
          }
        },
        handleTouchesBegin: function (b) {
          for (var j, k, m = g.now(), n = [], a = this._touches, o = this._touchesIntegerDict, c = this._touchesCache, l = 0, p = b.length; l < p; l++) {
            if (o[k = (j = b[l]).getID()] === undefined) {
              var q = this._getUnUsedIndex();
              if (q === -1) {
                continue;
              }
              var r = new cc.Touch(j._point.x, j._point.y, k);
              r._setPrevPoint(j._prevPoint);
              r._lastModified = m;
              a[q] = r;
              o[k] = q;
              c[k] = r;
              this._touchCount++;
              n.push(r);
            }
          }
          if (n.length > 0) {
            this._glView._convertTouchesWithScale(n);
            var s = new cc.Event.EventTouch(n);
            s._eventCode = cc.Event.EventTouch.BEGAN;
            h.dispatchEvent(s);
          }
        },
        handleTouchesMove: function (b) {
          for (var d, j, k = g.now(), m = [], a = this._touches, n = this._touchesIntegerDict, c = 0, o = b.length; c < o; c++) {
            if ((j = n[(d = b[c]).getID()]) !== undefined) {
              var p = a[j];
              if (p) {
                p._setPoint(d._point);
                p._setPrevPoint(d._prevPoint);
                p._lastModified = k;
                m.push(p);
              }
            }
          }
          if (m.length > 0) {
            this._glView._convertTouchesWithScale(m);
            var q = new cc.Event.EventTouch(m);
            q._eventCode = cc.Event.EventTouch.MOVED;
            h.dispatchEvent(q);
          }
        },
        handleTouchesEnd: function (a) {
          var b = this.getSetOfTouchesEndOrCancel(a);
          if (b.length > 0) {
            this._glView._convertTouchesWithScale(b);
            var c = new cc.Event.EventTouch(b);
            c._eventCode = cc.Event.EventTouch.ENDED;
            h.dispatchEvent(c);
          }
          this._preTouchPool.length = 0;
        },
        handleTouchesCancel: function (a) {
          var b = this.getSetOfTouchesEndOrCancel(a);
          if (b.length > 0) {
            this._glView._convertTouchesWithScale(b);
            var c = new cc.Event.EventTouch(b);
            c._eventCode = cc.Event.EventTouch.CANCELED;
            h.dispatchEvent(c);
          }
          this._preTouchPool.length = 0;
        },
        getSetOfTouchesEndOrCancel: function (b) {
          for (var d, f, g, j = [], k = this._touches, m = this._touchesIntegerDict, a = this._touchesCache, o = 0, p = b.length; o < p; o++) {
            if ((f = m[g = (d = b[o]).getID()]) !== undefined) {
              var l = k[f];
              if (l) {
                l._setPoint(d._point);
                l._setPrevPoint(d._prevPoint);
                j.push(l);
                delete m[g];
                delete a[g];
                this._touchCount--;
                this._indexBitsUsed &= ~(1 << f);
              }
            }
          }
          return j;
        },
        getGlobalTouchCount: function () {
          return this._touchCount;
        },
        getGlobalTouches: function () {
          return this._touchesCache;
        },
        getPreTouch: function (a) {
          for (var b = null, c = this._preTouchPool, d = a.getID(), f = c.length - 1; f >= 0; f--) {
            if (c[f].getID() === d) {
              b = c[f];
              break;
            }
          }
          if (!b) {
            b = a;
          }
          return b;
        },
        setPreTouch: function (a) {
          for (var b = false, c = this._preTouchPool, d = a.getID(), f = c.length - 1; f >= 0; f--) {
            if (c[f].getID() === d) {
              c[f] = a;
              b = true;
              break;
            }
          }
          if (!b) {
            if (c.length <= 50) {
              c.push(a);
            } else {
              c[this._preTouchPoolPointer] = a;
              this._preTouchPoolPointer = (this._preTouchPoolPointer + 1) % 50;
            }
          }
        },
        getTouchByXY: function (a, b, c) {
          var d = this._preTouchPoint;
          var e = this._glView.convertToLocationInView(a, b, c);
          var f = new cc.Touch(e.x, e.y, 0);
          f._setPrevPoint(d.x, d.y);
          d.x = e.x;
          d.y = e.y;
          return f;
        },
        getMouseEvent: function (a, b, c) {
          var d = this._prevMousePoint;
          var e = new cc.Event.EventMouse(c);
          e._setPrevCursor(d.x, d.y);
          d.x = a.x;
          d.y = a.y;
          this._glView._convertMouseToLocationInView(d, b);
          e.setLocation(d.x, d.y);
          return e;
        },
        getPointByEvent: function (a, b) {
          if (!(cc.sys.browserType !== cc.sys.BROWSER_TYPE_QQ && cc.sys.browserType !== cc.sys.BROWSER_TYPE_UC && cc.sys.browserType !== cc.sys.BROWSER_TYPE_SAFARI)) {
            this._updateCanvasBoundingRect();
          }
          if (a.pageX != null) {
            return {
              x: a.pageX,
              y: a.pageY
            };
          } else {
            b.left -= document.body.scrollLeft;
            b.top -= document.body.scrollTop;
            return {
              x: a.clientX,
              y: a.clientY
            };
          }
        },
        getTouchesByEvent: function (b, d) {
          for (var e, k, m, n = [], o = this._glView, c = this._preTouchPoint, l = b.changedTouches.length, h = 0; h < l; h++) {
            if (e = b.changedTouches[h]) {
              var p;
              p = g.BROWSER_TYPE_FIREFOX === g.browserType ? o.convertToLocationInView(e.pageX, e.pageY, d, j) : o.convertToLocationInView(e.clientX, e.clientY, d, j);
              if (e.identifier != null) {
                k = new cc.Touch(p.x, p.y, e.identifier);
                m = this.getPreTouch(k).getLocation();
                k._setPrevPoint(m.x, m.y);
                this.setPreTouch(k);
              } else {
                (k = new cc.Touch(p.x, p.y))._setPrevPoint(c.x, c.y);
              }
              c.x = p.x;
              c.y = p.y;
              n.push(k);
            }
          }
          return n;
        },
        allowTouchPropagation: function (a) {
          this._touchPropagationAllowed = a;
        },
        registerSystemEvent: function (b) {
          if (!this._isRegisterEvent) {
            this._glView = cc.view;
            var f = this;
            var e = this._canvasBoundingRect;
            window.addEventListener("resize", this._updateCanvasBoundingRect.bind(this));
            var i = g.isMobile;
            var j = ("mouse" in g.capabilities);
            var a = ("touches" in g.capabilities);
            if (j) {
              (function () {
                if (!i) {
                  window.addEventListener("mousedown", function () {
                    f._mousePressed = true;
                  }, false);
                  window.addEventListener("mouseup", function (a) {
                    if (f._mousePressed) {
                      f._mousePressed = false;
                      var b = f.getPointByEvent(a, e);
                      if (!cc.rect(e.left, e.top, e.width, e.height).contains(b)) {
                        f.handleTouchesEnd([f.getTouchByXY(b.x, b.y, e)]);
                        var c = f.getMouseEvent(b, e, cc.Event.EventMouse.UP);
                        c.setButton(a.button);
                        h.dispatchEvent(c);
                      }
                    }
                  }, false);
                }
                for (var d = cc.Event.EventMouse, g = [!i && ["mousedown", d.DOWN, function (a, c, d, e) {
                    f._mousePressed = true;
                    f.handleTouchesBegin([f.getTouchByXY(d.x, d.y, e)]);
                    b.focus();
                  }], !i && ["mouseup", d.UP, function (a, b, c, d) {
                    f._mousePressed = false;
                    f.handleTouchesEnd([f.getTouchByXY(c.x, c.y, d)]);
                  }], !i && ["mousemove", d.MOVE, function (a, b, c, d) {
                    f.handleTouchesMove([f.getTouchByXY(c.x, c.y, d)]);
                    if (!f._mousePressed) {
                      b.setButton(null);
                    }
                  }], ["mousewheel", d.SCROLL, function (a, b) {
                    b.setScrollData(0, a.wheelDelta);
                  }], ["DOMMouseScroll", d.SCROLL, function (a, b) {
                    b.setScrollData(0, a.detail * -120);
                  }]], a = 0; a < g.length; ++a) {
                  var j = g[a];
                  if (j) {
                    (function () {
                      var c = j[0];
                      var g = j[1];
                      var a = j[2];
                      b.addEventListener(c, function (b) {
                        var i = f.getPointByEvent(b, e);
                        var j = f.getMouseEvent(i, e, g);
                        var c = b.button;
                        if (g === d.MOVE) {
                          if (b.buttons & 1) {
                            c = d.BUTTON_LEFT;
                          } else if (b.buttons & 2) {
                            c = d.BUTTON_RIGHT;
                          } else if (b.buttons & 4) {
                            c = d.BUTTON_MIDDLE;
                          }
                        }
                        j.setButton(c);
                        a(b, j, i, e);
                        h.dispatchEvent(j);
                        b.stopPropagation();
                        b.preventDefault();
                      }, false);
                    })();
                  }
                }
              })();
            }
            if (window.navigator.msPointerEnabled) {
              var k = {
                MSPointerDown: f.handleTouchesBegin,
                MSPointerMove: f.handleTouchesMove,
                MSPointerUp: f.handleTouchesEnd,
                MSPointerCancel: f.handleTouchesCancel
              };
              function a(a) {
                var c = k[a];
                b.addEventListener(a, function (a) {
                  var b = document.documentElement;
                  e.adjustedLeft = e.left - b.scrollLeft;
                  e.adjustedTop = e.top - b.scrollTop;
                  c.call(f, [f.getTouchByXY(a.clientX, a.clientY, e)]);
                  a.stopPropagation();
                }, false);
              }
              for (var c in k) {
                a(c);
              }
            }
            if (a) {
              var l = {
                touchstart: function (a) {
                  f.handleTouchesBegin(a);
                  b.focus();
                },
                touchmove: function (a) {
                  f.handleTouchesMove(a);
                },
                touchend: function (a) {
                  f.handleTouchesEnd(a);
                },
                touchcancel: function (a) {
                  f.handleTouchesCancel(a);
                }
              };
              function a(a) {
                var c = l[a];
                b.addEventListener(a, function (a) {
                  if (a.changedTouches) {
                    var b = document.body;
                    e.adjustedLeft = e.left - (b.scrollLeft || window.scrollX || 0);
                    e.adjustedTop = e.top - (b.scrollTop || window.scrollY || 0);
                    c(f.getTouchesByEvent(a, e));
                    if (!f._touchPropagationAllowed) {
                      a.stopPropagation();
                      a.preventDefault();
                    }
                  }
                }, false);
              }
              for (var m in l) {
                a(m);
              }
            }
            this._registerKeyboardEvent();
            this._isRegisterEvent = true;
          }
        },
        _registerKeyboardEvent: function () {},
        _registerAccelerometerEvent: function () {},
        update: function (a) {
          if (this._accelCurTime > this._accelInterval) {
            this._accelCurTime -= this._accelInterval;
            h.dispatchEvent(new cc.Event.EventAcceleration(this._acceleration));
          }
          this._accelCurTime += a;
        }
      };
      c.exports = cc.internal.inputManager = e;
    }, {
      "../event-manager": 133,
      "./CCMacro": 167,
      "./CCSys": 171
    }],
    167: [function (a, b) {
      "use strict";
  
      cc.macro = {
        RAD: Math.PI / 180,
        DEG: 180 / Math.PI,
        REPEAT_FOREVER: Number.MAX_VALUE - 1,
        FLT_EPSILON: 1.192092896e-7,
        MIN_ZINDEX: -32768,
        MAX_ZINDEX: 32767,
        ONE: 1,
        ZERO: 0,
        SRC_ALPHA: 770,
        SRC_ALPHA_SATURATE: 776,
        SRC_COLOR: 768,
        DST_ALPHA: 772,
        DST_COLOR: 774,
        ONE_MINUS_SRC_ALPHA: 771,
        ONE_MINUS_SRC_COLOR: 769,
        ONE_MINUS_DST_ALPHA: 773,
        ONE_MINUS_DST_COLOR: 775,
        ONE_MINUS_CONSTANT_ALPHA: 32772,
        ONE_MINUS_CONSTANT_COLOR: 32770,
        ORIENTATION_PORTRAIT: 1,
        ORIENTATION_LANDSCAPE: 2,
        ORIENTATION_AUTO: 3,
        DENSITYDPI_DEVICE: "device-dpi",
        DENSITYDPI_HIGH: "high-dpi",
        DENSITYDPI_MEDIUM: "medium-dpi",
        DENSITYDPI_LOW: "low-dpi",
        FIX_ARTIFACTS_BY_STRECHING_TEXEL_TMX: true,
        DIRECTOR_STATS_POSITION: cc.v2(0, 0),
        ENABLE_STACKABLE_ACTIONS: true,
        TOUCH_TIMEOUT: 5000,
        BATCH_VERTEX_COUNT: 20000,
        ENABLE_TILEDMAP_CULLING: true,
        ENABLE_TRANSPARENT_CANVAS: false,
        ENABLE_WEBGL_ANTIALIAS: false,
        ENABLE_CULLING: false,
        CLEANUP_IMAGE_CACHE: false,
        SHOW_MESH_WIREFRAME: false,
        SHOW_MESH_NORMAL: false,
        ENABLE_MULTI_TOUCH: true,
        ALLOW_IMAGE_BITMAP: !cc.sys.isMobile,
        ENABLE_NATIVE_TTF_RENDERER: true
      };
      Object.defineProperty(cc.macro, "ROTATE_ACTION_CCW", {
        set: function (a) {
          if (cc.RotateTo && cc.RotateBy) {
            cc.RotateTo._reverse = cc.RotateBy._reverse = a;
          }
        }
      });
      cc.macro.SUPPORT_TEXTURE_FORMATS = [".astc", ".pkm", ".pvr", ".webp", ".jpg", ".jpeg", ".bmp", ".png"];
      cc.macro.KEY = {
        none: 0,
        back: 6,
        menu: 18,
        backspace: 8,
        tab: 9,
        enter: 13,
        shift: 16,
        ctrl: 17,
        alt: 18,
        pause: 19,
        capslock: 20,
        escape: 27,
        space: 32,
        pageup: 33,
        pagedown: 34,
        end: 35,
        home: 36,
        left: 37,
        up: 38,
        right: 39,
        down: 40,
        select: 41,
        insert: 45,
        Delete: 46,
        0: 48,
        1: 49,
        2: 50,
        3: 51,
        4: 52,
        5: 53,
        6: 54,
        7: 55,
        8: 56,
        9: 57,
        a: 65,
        b: 66,
        c: 67,
        d: 68,
        e: 69,
        f: 70,
        g: 71,
        h: 72,
        i: 73,
        j: 74,
        k: 75,
        l: 76,
        m: 77,
        n: 78,
        o: 79,
        p: 80,
        q: 81,
        r: 82,
        s: 83,
        t: 84,
        u: 85,
        v: 86,
        w: 87,
        x: 88,
        y: 89,
        z: 90,
        num0: 96,
        num1: 97,
        num2: 98,
        num3: 99,
        num4: 100,
        num5: 101,
        num6: 102,
        num7: 103,
        num8: 104,
        num9: 105,
        "*": 106,
        "+": 107,
        "-": 109,
        numdel: 110,
        "/": 111,
        f1: 112,
        f2: 113,
        f3: 114,
        f4: 115,
        f5: 116,
        f6: 117,
        f7: 118,
        f8: 119,
        f9: 120,
        f10: 121,
        f11: 122,
        f12: 123,
        numlock: 144,
        scrolllock: 145,
        ";": 186,
        semicolon: 186,
        equal: 187,
        "=": 187,
        ",": 188,
        comma: 188,
        dash: 189,
        ".": 190,
        period: 190,
        forwardslash: 191,
        grave: 192,
        "[": 219,
        openbracket: 219,
        backslash: 220,
        "]": 221,
        closebracket: 221,
        quote: 222,
        dpadLeft: 1000,
        dpadRight: 1001,
        dpadUp: 1003,
        dpadDown: 1004,
        dpadCenter: 1005
      };
      cc.macro.ImageFormat = cc.Enum({
        JPG: 0,
        PNG: 1,
        TIFF: 2,
        WEBP: 3,
        PVR: 4,
        ETC: 5,
        S3TC: 6,
        ATITC: 7,
        TGA: 8,
        RAWDATA: 9,
        UNKNOWN: 10
      });
      cc.macro.BlendFactor = cc.Enum({
        ONE: 1,
        ZERO: 0,
        SRC_ALPHA: 770,
        SRC_COLOR: 768,
        DST_ALPHA: 772,
        DST_COLOR: 774,
        ONE_MINUS_SRC_ALPHA: 771,
        ONE_MINUS_SRC_COLOR: 769,
        ONE_MINUS_DST_ALPHA: 773,
        ONE_MINUS_DST_COLOR: 775
      });
      cc.macro.TextAlignment = cc.Enum({
        LEFT: 0,
        CENTER: 1,
        RIGHT: 2
      });
      cc.macro.VerticalTextAlignment = cc.Enum({
        TOP: 0,
        CENTER: 1,
        BOTTOM: 2
      });
      b.exports = cc.macro;
    }, {}],
    168: [function (b, d) {
      "use strict";
  
      var f = b("./js");
      var e = b("./CCClass");
      var g = 1;
      function h() {
        this._name = "";
        this._objFlags = 0;
      }
      e.fastDefine("cc.Object", h, {
        _name: "",
        _objFlags: 0
      });
      f.value(h, "Flags", {
        Destroyed: g,
        DontSave: 8,
        EditorOnly: 16,
        Dirty: 32,
        DontDestroy: 64,
        PersistentMask: -4192741,
        Destroying: 128,
        Deactivating: 256,
        LockedInEditor: 512,
        HideInHierarchy: 1024,
        IsPreloadStarted: 8192,
        IsOnLoadStarted: 32768,
        IsOnLoadCalled: 16384,
        IsOnEnableCalled: 2048,
        IsStartCalled: 65536,
        IsEditorOnEnableCalled: 4096,
        IsPositionLocked: 1 << 21,
        IsRotationLocked: 1 << 17,
        IsScaleLocked: 1 << 18,
        IsAnchorLocked: 1 << 19,
        IsSizeLocked: 1 << 20
      });
      var j = [];
      f.value(h, "_deferredDestroy", function () {
        for (var a = j.length, b = 0; b < a; ++b) {
          var c = j[b];
          if (!(c._objFlags & g)) {
            c._destroyImmediate();
          }
        }
        if (a === j.length) {
          j.length = 0;
        } else {
          j.splice(0, a);
        }
      });
      var a = h.prototype;
      function i(b, g) {
        var j;
        var k = b instanceof cc._BaseNode || b instanceof cc.Component;
        var m = k ? "_id" : null;
        var n = {};
        for (j in b) {
          if (b.hasOwnProperty(j)) {
            if (j === m) {
              continue;
            }
            switch (typeof b[j]) {
              case "string":
                n[j] = "";
                break;
              case "object":
              case "function":
                n[j] = null;
            }
          }
        }
        if (cc.Class._isCCClass(g)) {
          for (var a = cc.Class.Attr.getClassAttrs(g), o = g.__props__, c = 0; c < o.length; c++) {
            var p = (j = o[c]) + cc.Class.Attr.DELIMETER + "default";
            if (p in a) {
              if (k && j === "_id") {
                continue;
              }
              switch (typeof a[p]) {
                case "string":
                  n[j] = "";
                  break;
                case "object":
                case "function":
                  n[j] = null;
                  break;
                case "undefined":
                  n[j] = undefined;
              }
            }
          }
        }
        var q = "";
        for (j in n) {
          var r;
          r = e.IDENTIFIER_RE.test(j) ? "o." + j + "=" : "o[" + e.escapeForJS(j) + "]=";
          var s = n[j];
          if (s === "") {
            s = "\"\"";
          }
          q += r + s + ";";
        }
        return Function("o", q);
      }
      f.getset(a, "name", function () {
        return this._name;
      }, function (a) {
        this._name = a;
      }, true);
      f.get(a, "isValid", function () {
        return !(this._objFlags & g);
      }, true);
      a.destroy = function () {
        return !(this._objFlags & g || this._objFlags & 4 || (this._objFlags |= 4, j.push(this), 0));
      };
      a._destruct = function () {
        var a = this.constructor;
        var b = a.__destruct__;
        if (!b) {
          b = i(this, a);
          f.value(a, "__destruct__", b, true);
        }
        b(this);
      };
      a._onPreDestroy = null;
      a._destroyImmediate = function () {
        if (!(this._objFlags & g)) {
          if (this._onPreDestroy) {
            this._objFlags |= 128;
            this._onPreDestroy();
          }
          this._destruct();
          this._objFlags |= g;
        }
      };
      a._deserialize = null;
      cc.isValid = function (a, b) {
        if (typeof a == "object") {
          return !(!a || a._objFlags & (b ? g | 4 : g));
        } else {
          return a !== undefined;
        }
      };
      cc.Object = d.exports = h;
    }, {
      "./CCClass": 162,
      "./js": 183
    }],
    169: [function (a, b) {
      "use strict";
  
      var c = a("../platform/js");
      cc.SAXParser = function () {
        if (window.DOMParser) {
          this._isSupportDOMParser = true;
          this._parser = new DOMParser();
        } else {
          this._isSupportDOMParser = false;
          this._parser = null;
        }
      };
      cc.SAXParser.prototype = {
        constructor: cc.SAXParser,
        parse: function (a) {
          return this._parseXML(a);
        },
        _parseXML: function (a) {
          var b;
          if (this._isSupportDOMParser) {
            b = this._parser.parseFromString(a, "text/xml");
          } else {
            (b = new ActiveXObject("Microsoft.XMLDOM")).async = "false";
            b.loadXML(a);
          }
          return b;
        }
      };
      cc.PlistParser = function () {
        cc.SAXParser.call(this);
      };
      c.extend(cc.PlistParser, cc.SAXParser);
      c.mixin(cc.PlistParser.prototype, {
        parse: function (a) {
          var b = this._parseXML(a);
          var c = b.documentElement;
          if (c.tagName !== "plist") {
            return {};
          }
          for (var d = null, f = 0, g = c.childNodes.length; f < g && (d = c.childNodes[f]).nodeType !== 1; f++);
          b = null;
          return this._parseNode(d);
        },
        _parseNode: function (a) {
          var b = null;
          var c = a.tagName;
          if (c === "dict") {
            b = this._parseDict(a);
          } else if (c === "array") {
            b = this._parseArray(a);
          } else if (c === "string") {
            if (a.childNodes.length === 1) {
              b = a.firstChild.nodeValue;
            } else {
              b = "";
              for (var d = 0; d < a.childNodes.length; d++) {
                b += a.childNodes[d].nodeValue;
              }
            }
          } else if (c === "false") {
            b = false;
          } else if (c === "true") {
            b = true;
          } else if (c === "real") {
            b = parseFloat(a.firstChild.nodeValue);
          } else if (c === "integer") {
            b = parseInt(a.firstChild.nodeValue, 10);
          }
          return b;
        },
        _parseArray: function (a) {
          for (var b = [], c = 0, d = a.childNodes.length; c < d; c++) {
            var e = a.childNodes[c];
            if (e.nodeType === 1) {
              b.push(this._parseNode(e));
            }
          }
          return b;
        },
        _parseDict: function (a) {
          for (var b = {}, c = null, d = 0, e = a.childNodes.length; d < e; d++) {
            var f = a.childNodes[d];
            if (f.nodeType === 1) {
              if (f.tagName === "key") {
                c = f.firstChild.nodeValue;
              } else {
                b[c] = this._parseNode(f);
              }
            }
          }
          return b;
        }
      });
      cc.saxParser = new cc.SAXParser();
      cc.plistParser = new cc.PlistParser();
      b.exports = {
        saxParser: cc.saxParser,
        plistParser: cc.plistParser
      };
    }, {
      "../platform/js": 183
    }],
    170: [function () {
      "use strict";
  
      cc.screen = {
        _supportsFullScreen: false,
        _onfullscreenchange: null,
        _onfullscreenerror: null,
        _preOnFullScreenChange: null,
        _preOnFullScreenError: null,
        _preOnTouch: null,
        _touchEvent: "",
        _fn: null,
        _fnMap: [["requestFullscreen", "exitFullscreen", "fullscreenchange", "fullscreenEnabled", "fullscreenElement", "fullscreenerror"], ["requestFullScreen", "exitFullScreen", "fullScreenchange", "fullScreenEnabled", "fullScreenElement", "fullscreenerror"], ["webkitRequestFullScreen", "webkitCancelFullScreen", "webkitfullscreenchange", "webkitIsFullScreen", "webkitCurrentFullScreenElement", "webkitfullscreenerror"], ["mozRequestFullScreen", "mozCancelFullScreen", "mozfullscreenchange", "mozFullScreen", "mozFullScreenElement", "mozfullscreenerror"], ["msRequestFullscreen", "msExitFullscreen", "MSFullscreenChange", "msFullscreenEnabled", "msFullscreenElement", "msfullscreenerror"]],
        init: function () {
          this._fn = {};
          var a;
          var b;
          var c;
          var d;
          var f = this._fnMap;
          a = 0;
          b = f.length;
          for (; a < b; a++) {
            if ((c = f[a]) && document[c[1]] !== undefined) {
              a = 0;
              d = c.length;
              for (; a < d; a++) {
                this._fn[f[0][a]] = c[a];
              }
              break;
            }
          }
          this._supportsFullScreen = this._fn.requestFullscreen !== undefined;
          this._touchEvent = "ontouchend" in window ? "touchend" : "mousedown";
        },
        fullScreen: function () {
          return !!this._supportsFullScreen && !!(document[this._fn.fullscreenElement] || document[this._fn.webkitFullscreenElement] || document[this._fn.mozFullScreenElement]);
        },
        requestFullScreen: function (a, b, c) {
          if (a && a.tagName.toLowerCase() === "video") {
            if (cc.sys.os === cc.sys.OS_IOS && cc.sys.isBrowser && a.readyState > 0) {
              if (a.webkitEnterFullscreen) {
                a.webkitEnterFullscreen();
              }
              return;
            }
            a.setAttribute("x5-video-player-fullscreen", "true");
          }
          if (this._supportsFullScreen) {
            a = a || document.documentElement;
            if (b) {
              var d = this._fn.fullscreenchange;
              if (this._onfullscreenchange) {
                document.removeEventListener(d, this._onfullscreenchange);
              }
              this._onfullscreenchange = b;
              document.addEventListener(d, b, false);
            }
            if (c) {
              var e = this._fn.fullscreenerror;
              if (this._onfullscreenerror) {
                document.removeEventListener(e, this._onfullscreenerror);
              }
              this._onfullscreenerror = c;
              document.addEventListener(e, c, {
                once: true
              });
            }
            var f = a[this._fn.requestFullscreen]();
            if (document[this._fn.fullscreenerror] === undefined && window.Promise && f instanceof Promise) {
              f.catch(function () {});
            }
          }
        },
        exitFullScreen: function (a) {
          if (a && a.tagName.toLowerCase() === "video") {
            if (cc.sys.os === cc.sys.OS_IOS && cc.sys.isBrowser) {
              if (a.webkitExitFullscreen) {
                a.webkitExitFullscreen();
              }
              return;
            }
            a.setAttribute("x5-video-player-fullscreen", "false");
          }
          return !this._supportsFullScreen || document[this._fn.exitFullscreen]();
        },
        autoFullScreen: function (a, b) {
          a = a || document.body;
          this._ensureFullScreen(a, b);
          this.requestFullScreen(a, b);
        },
        disableAutoFullScreen: function (a) {
          var b = cc.game.canvas || a;
          var c = this._touchEvent;
          if (this._preOnTouch) {
            b.removeEventListener(c, this._preOnTouch);
            this._preOnTouch = null;
          }
        },
        _ensureFullScreen: function (b, c) {
          var d = this;
          var e = cc.game.canvas || b;
          var f = this._fn.fullscreenerror;
          var g = this._touchEvent;
          function h() {
            d._preOnFullScreenError = null;
            if (d._preOnTouch) {
              e.removeEventListener(g, d._preOnTouch);
            }
            d._preOnTouch = function () {
              d._preOnTouch = null;
              d.requestFullScreen(b, c);
            };
            e.addEventListener(g, d._preOnTouch, {
              once: true
            });
          }
          if (this._preOnFullScreenError) {
            b.removeEventListener(f, this._preOnFullScreenError);
          }
          this._preOnFullScreenError = h;
          b.addEventListener(f, h, {
            once: true
          });
        }
      };
      cc.screen.init();
    }, {}],
    171: [function (a, b) {
      "use strict";
  
      a("../CCDebug");
      var c;
      var d;
      var j = typeof window == "undefined" ? global : window;
      var e = cc && cc.sys ? cc.sys : function () {
        cc.sys = {};
        var i;
        var k = cc.sys;
        k.LANGUAGE_ENGLISH = "en";
        k.LANGUAGE_CHINESE = "zh";
        k.LANGUAGE_FRENCH = "fr";
        k.LANGUAGE_ITALIAN = "it";
        k.LANGUAGE_GERMAN = "de";
        k.LANGUAGE_SPANISH = "es";
        k.LANGUAGE_DUTCH = "du";
        k.LANGUAGE_RUSSIAN = "ru";
        k.LANGUAGE_KOREAN = "ko";
        k.LANGUAGE_JAPANESE = "ja";
        k.LANGUAGE_HUNGARIAN = "hu";
        k.LANGUAGE_PORTUGUESE = "pt";
        k.LANGUAGE_ARABIC = "ar";
        k.LANGUAGE_NORWEGIAN = "no";
        k.LANGUAGE_POLISH = "pl";
        k.LANGUAGE_TURKISH = "tr";
        k.LANGUAGE_UKRAINIAN = "uk";
        k.LANGUAGE_ROMANIAN = "ro";
        k.LANGUAGE_BULGARIAN = "bg";
        k.LANGUAGE_UNKNOWN = "unknown";
        k.OS_OPENHARMONY = "OpenHarmony";
        k.OS_IOS = "iOS";
        k.OS_ANDROID = "Android";
        k.OS_WINDOWS = "Windows";
        k.OS_LINUX = "Linux";
        k.OS_OSX = "OS X";
        k.OS_WINRT = "WINRT";
        k.OS_UNKNOWN = "Unknown";
        k.UNKNOWN = -1;
        k.WIN32 = 0;
        k.LINUX = 1;
        k.MACOS = 2;
        k.ANDROID = 3;
        k.IPHONE = 4;
        k.IPAD = 5;
        k.BLACKBERRY = 6;
        k.NACL = 7;
        k.EMSCRIPTEN = 8;
        k.TIZEN = 9;
        k.WINRT = 10;
        k.WP8 = 11;
        k.OPENHARMONY = 12;
        k.MOBILE_BROWSER = 100;
        k.DESKTOP_BROWSER = 101;
        k.EDITOR_PAGE = 102;
        k.EDITOR_CORE = 103;
        k.WECHAT_GAME = 104;
        k.QQ_PLAY = 105;
        k.FB_PLAYABLE_ADS = 106;
        k.BAIDU_GAME = 107;
        k.VIVO_GAME = 108;
        k.OPPO_GAME = 109;
        k.HUAWEI_GAME = 110;
        k.XIAOMI_GAME = 111;
        k.JKW_GAME = 112;
        k.ALIPAY_GAME = 113;
        k.WECHAT_GAME_SUB = 114;
        k.BAIDU_GAME_SUB = 115;
        k.QTT_GAME = 116;
        k.BYTEDANCE_GAME = 117;
        k.BYTEDANCE_GAME_SUB = 118;
        k.LINKSURE = 119;
        k.TAOBAO = 120;
        k.TAOBAO_MINIGAME = 121;
        k.BROWSER_TYPE_WECHAT = "wechat";
        k.BROWSER_TYPE_ANDROID = "androidbrowser";
        k.BROWSER_TYPE_IE = "ie";
        k.BROWSER_TYPE_EDGE = "edge";
        k.BROWSER_TYPE_QQ = "qqbrowser";
        k.BROWSER_TYPE_MOBILE_QQ = "mqqbrowser";
        k.BROWSER_TYPE_UC = "ucbrowser";
        k.BROWSER_TYPE_UCBS = "ucbs";
        k.BROWSER_TYPE_360 = "360browser";
        k.BROWSER_TYPE_BAIDU_APP = "baiduboxapp";
        k.BROWSER_TYPE_BAIDU = "baidubrowser";
        k.BROWSER_TYPE_MAXTHON = "maxthon";
        k.BROWSER_TYPE_OPERA = "opera";
        k.BROWSER_TYPE_OUPENG = "oupeng";
        k.BROWSER_TYPE_MIUI = "miuibrowser";
        k.BROWSER_TYPE_FIREFOX = "firefox";
        k.BROWSER_TYPE_SAFARI = "safari";
        k.BROWSER_TYPE_CHROME = "chrome";
        k.BROWSER_TYPE_LIEBAO = "liebao";
        k.BROWSER_TYPE_QZONE = "qzone";
        k.BROWSER_TYPE_SOUGOU = "sogou";
        k.BROWSER_TYPE_HUAWEI = "huawei";
        k.BROWSER_TYPE_UNKNOWN = "unknown";
        k.isNative = false;
        k.isBrowser = typeof window == "object" && typeof document == "object" && true;
        k.glExtension = function (a) {
          return !!cc.renderer.device.ext(a);
        };
        k.getMaxJointMatrixSize = function () {
          if (!k._maxJointMatrixSize) {
            var a = cc.game._renderContext;
            var b = Math.floor(a.getParameter(a.MAX_VERTEX_UNIFORM_VECTORS) / 4) - 10;
            k._maxJointMatrixSize = b < 50 ? 0 : 50;
          }
          return k._maxJointMatrixSize;
        };
        k.getSafeAreaRect = function () {
          var a = cc.view.getVisibleSize();
          return cc.rect(0, 0, a.width, a.height);
        };
        if (j.__globalAdapter && j.__globalAdapter.adaptSys) {
          j.__globalAdapter.adaptSys(k);
        } else {
          var e = window;
          var n = e.navigator;
          var a = document;
          var o = a.documentElement;
          var q = n.userAgent.toLowerCase();
          var l = n.language || n.browserLanguage;
          if (l) {
            l = l.toLowerCase();
            k.languageCode = l;
            k.language = l.split("-")[0];
          } else {
            k.languageCode = undefined;
            k.language = k.LANGUAGE_ENGLISH;
          }
          var r = false;
          var s = false;
          var z = "";
          var B = 0;
          var C = /\([^)]*android +(\d+(?:\.\d+){0,2})/.exec(q) || /android +(\d+(?:\.\d+){0,2})/.exec(n.platform);
          if (C) {
            r = true;
            z = C[1] || "";
            B = parseInt(z) || 0;
          }
          if (C = /\((ipad|iphone|ipod)[^)]+os (\d+(?:_\d+){0,2})/.exec(q)) {
            s = true;
            z = C[2] || "";
            B = parseInt(z) || 0;
          } else if (/(iPhone|iPad|iPod)/.exec(n.platform) || /iphone|ipad|ipod/.test(q) || (n.platform === "MacIntel" || /mac os/.test(q)) && n.maxTouchPoints && n.maxTouchPoints > 2) {
            s = true;
            z = "";
            B = 0;
          }
          var D = k.OS_UNKNOWN;
          if (s) {
            D = k.OS_IOS;
          } else if (r) {
            D = k.OS_ANDROID;
          } else if (q.indexOf("Win") !== -1) {
            D = k.OS_WINDOWS;
          } else if (q.indexOf("Mac") !== -1) {
            D = k.OS_OSX;
          } else if (q.indexOf("Linux") !== -1) {
            D = k.OS_LINUX;
          }
          k.os = D;
          k.osVersion = z;
          k.osMainVersion = B;
          var F = false;
          if (D === k.OS_IOS && typeof BigInt == "function") {
            F = true;
          } else if (D === k.OS_OSX) {
            F = (C = /Version\/(\d+)/.exec(q)) && parseInt(C[1]) >= 14;
          }
          k.isSafari14 = F;
          k.isMobile = s || /mobile|android|iphone|ipad/.test(q);
          if (typeof FbPlayableAd != "undefined") {
            k.platform = k.FB_PLAYABLE_ADS;
          } else {
            k.platform = k.isMobile ? k.MOBILE_BROWSER : k.DESKTOP_BROWSER;
          }
          k.browserType = k.BROWSER_TYPE_UNKNOWN;
          (function () {
            var a = /mqqbrowser|micromessenger|qqbrowser|sogou|qzone|liebao|maxthon|ucbs|360 aphone|360browser|baiduboxapp|baidubrowser|maxthon|mxbrowser|miuibrowser/i.exec(q) || /qq|ucbrowser|ubrowser|edge|HuaweiBrowser/i.exec(q) || /chrome|safari|firefox|trident|opera|opr\/|oupeng/i.exec(q);
            var b = a ? a[0].toLowerCase() : k.BROWSER_TYPE_UNKNOWN;
            if (b === "safari" && r) {
              b = k.BROWSER_TYPE_ANDROID;
            } else if (b === "qq" && q.match(/android.*applewebkit/i)) {
              b = k.BROWSER_TYPE_ANDROID;
            }
            var c = {
              micromessenger: k.BROWSER_TYPE_WECHAT,
              trident: k.BROWSER_TYPE_IE,
              edge: k.BROWSER_TYPE_EDGE,
              "360 aphone": k.BROWSER_TYPE_360,
              mxbrowser: k.BROWSER_TYPE_MAXTHON,
              "opr/": k.BROWSER_TYPE_OPERA,
              ubrowser: k.BROWSER_TYPE_UC,
              huaweibrowser: k.BROWSER_TYPE_HUAWEI
            };
            if (!(b !== "qqbrowser" && b !== "mqqbrowser")) {
              if (q.match(/wechat|micromessenger/i)) {
                b = k.BROWSER_TYPE_WECHAT;
              }
            }
            k.browserType = c[b] || b;
          })();
          k.browserVersion = "";
          if (!(i = q.match(/(mqqbrowser|micromessenger|qqbrowser|sogou|qzone|liebao|maxthon|uc|ucbs|360 aphone|360|baiduboxapp|baidu|maxthon|mxbrowser|miui(?:.hybrid)?)(mobile)?(browser)?\/?([\d.]+)/i))) {
            i = q.match(/(qq|chrome|safari|firefox|trident|opera|opr\/|oupeng)(mobile)?(browser)?\/?([\d.]+)/i);
          }
          k.browserVersion = i ? i[4] : "";
          var G = window.innerWidth || document.documentElement.clientWidth;
          var m = window.innerHeight || document.documentElement.clientHeight;
          var y = window.devicePixelRatio || 1;
          k.windowPixelResolution = {
            width: y * G,
            height: y * m
          };
          k._checkWebGLRenderMode = function () {
            if (cc.game.renderType !== cc.game.RENDER_TYPE_WEBGL) {
              throw Error(cc.debug.getError(5202));
            }
          };
          var H;
          var I = document.createElement("canvas");
          try {
            var A = k.localStorage = e.localStorage;
            A.setItem("storage", "");
            A.removeItem("storage");
            A = null;
          } catch (a) {
            function b() {}
            k.localStorage = {
              getItem: b,
              setItem: b,
              removeItem: b,
              clear: b
            };
          }
          H = !(!j.Editor || !j.Editor.isBuilder) || !!(j.shell && j.shell.environment && j.shell.environment.webpSupported);
          var J = !!I.getContext("2d");
          var b = false;
          if (e.WebGLRenderingContext) {
            b = true;
          }
          var K;
          var L = k.capabilities = {
            canvas: J,
            opengl: b,
            webp: H,
            imageBitmap: false
          };
          if (typeof createImageBitmap != "undefined" && typeof Blob != "undefined") {
            I.width = I.height = 2;
            createImageBitmap(I, {}).then(function (a) {
              L.imageBitmap = true;
              if (a.close) {
                a.close();
              }
            }).catch(function () {});
          }
          if (o.ontouchstart !== undefined || a.ontouchstart !== undefined || n.msPointerEnabled || typeof __wxjs_environment == "string" && __wxjs_environment === "miniprogram") {
            L.touches = true;
          }
          if (o.onmouseup !== undefined) {
            L.mouse = true;
          }
          if (o.onkeyup !== undefined) {
            L.keyboard = true;
          }
          if (e.DeviceMotionEvent || e.DeviceOrientationEvent) {
            L.accelerometer = true;
          }
          k.browserVersion;
          K = {
            ONLY_ONE: false,
            get WEB_AUDIO() {
              if (d !== undefined) {
                return d;
              } else {
                if ((d = j.shell && j.shell.environment && j.shell.environment.audioSupported) === undefined) {
                  d = !!(window.AudioContext || window.webkitAudioContext || window.mozAudioContext);
                }
                return d;
              }
            },
            DELAY_CREATE_CTX: false,
            get context() {
              if (d !== undefined && d !== false) {
                if (c !== undefined) {
                  return c;
                }
                try {
                  c = j.shell && j.shell.environment && j.shell.environment.audioContext ? j.shell.environment.audioContext : new (window.AudioContext || window.webkitAudioContext || window.mozAudioContext)();
                } catch (a) {
                  d = false;
                }
                return c;
              }
            }
          };
          if (k.os === k.OS_IOS) {
            K.USE_LOADER_EVENT = "loadedmetadata";
          }
          if (k.browserType === k.BROWSER_TYPE_FIREFOX) {
            K.USE_LOADER_EVENT = "canplay";
          }
          if (k.os === k.OS_ANDROID && k.browserType === k.BROWSER_TYPE_UC) {
            K.ONE_SOURCE = true;
          }
          var M = [];
          (function () {
            var a = document.createElement("audio");
            if (a.canPlayType) {
              if (a.canPlayType("audio/ogg; codecs=\"vorbis\"")) {
                M.push(".ogg");
              }
              var b = a.canPlayType("audio/mpeg");
              if (b) {
                M.push(".mpeg");
              }
              if (b || a.canPlayType("audio/mp3")) {
                M.push(".mp3");
              }
              if (a.canPlayType("audio/wav; codecs=\"1\"")) {
                M.push(".wav");
              }
              if (a.canPlayType("audio/mp4")) {
                M.push(".mp4");
              }
              if (a.canPlayType("audio/x-m4a")) {
                M.push(".m4a");
              }
            }
          })();
          K.format = M;
          k.__audioSupport = K;
        }
        k.NetworkType = {
          NONE: 0,
          LAN: 1,
          WWAN: 2
        };
        k.getNetworkType = function () {
          return k.NetworkType.LAN;
        };
        k.getBatteryLevel = function () {
          return 1;
        };
        k.garbageCollect = function () {};
        k.restartVM = function () {};
        k.isObjectValid = function (a) {
          return !!a;
        };
        k.dump = function () {
          this.isMobile;
          this.language;
          this.browserType;
          this.browserVersion;
          JSON.stringify(this.capabilities);
          this.os;
          this.osVersion;
          this.platform;
          cc.game.renderType;
          cc.game.RENDER_TYPE_WEBGL;
        };
        k.openURL = function (a) {
          window.open(a);
        };
        k.now = function () {
          if (Date.now) {
            return Date.now();
          } else {
            return +new Date();
          }
        };
        return k;
      }();
      b.exports = e;
    }, {
      "../CCDebug": 23
    }],
    172: [function (b, c) {
      "use strict";
  
      var d = b("../event/event-target");
      var e = b("../platform/js");
      var f = b("../renderer");
      b("../platform/CCClass");
      var g = {
        init: function () {
          this.html = document.getElementsByTagName("html")[0];
        },
        availWidth: function (a) {
          if (a && a !== this.html) {
            return a.clientWidth;
          } else {
            return window.innerWidth;
          }
        },
        availHeight: function (a) {
          if (a && a !== this.html) {
            return a.clientHeight;
          } else {
            return window.innerHeight;
          }
        },
        meta: {
          width: "device-width"
        },
        adaptationType: cc.sys.browserType
      };
      if (cc.sys.os === cc.sys.OS_IOS) {
        g.adaptationType = cc.sys.BROWSER_TYPE_SAFARI;
      }
      switch (g.adaptationType) {
        case cc.sys.BROWSER_TYPE_SAFARI:
        case cc.sys.BROWSER_TYPE_SOUGOU:
        case cc.sys.BROWSER_TYPE_UC:
          g.meta["minimal-ui"] = "true";
          g.availWidth = function (a) {
            return a.clientWidth;
          };
          g.availHeight = function (a) {
            return a.clientHeight;
          };
      }
      var j = null;
      function h() {
        d.call(this);
        var a = this;
        var b = cc.ContainerStrategy;
        var c = cc.ContentStrategy;
        g.init(this);
        a._frameSize = cc.size(0, 0);
        a._designResolutionSize = cc.size(0, 0);
        a._originalDesignResolutionSize = cc.size(0, 0);
        a._scaleX = 1;
        a._scaleY = 1;
        a._viewportRect = cc.rect(0, 0, 0, 0);
        a._visibleRect = cc.rect(0, 0, 0, 0);
        a._autoFullScreen = false;
        a._devicePixelRatio = 1;
        a._maxPixelRatio = 2;
        a._retinaEnabled = false;
        a._resizeCallback = null;
        a._resizing = false;
        a._resizeWithBrowserSize = false;
        a._orientationChanging = true;
        a._isRotated = false;
        a._orientation = cc.macro.ORIENTATION_AUTO;
        a._isAdjustViewport = true;
        a._antiAliasEnabled = false;
        a._resolutionPolicy = null;
        a._rpExactFit = new cc.ResolutionPolicy(b.EQUAL_TO_FRAME, c.EXACT_FIT);
        a._rpShowAll = new cc.ResolutionPolicy(b.PROPORTION_TO_FRAME, c.NO_BORDER);
        a._rpNoBorder = new cc.ResolutionPolicy(b.EQUAL_TO_FRAME, c.NO_BORDER);
        a._rpFixedHeight = new cc.ResolutionPolicy(b.EQUAL_TO_FRAME, c.FIXED_HEIGHT);
        a._rpFixedWidth = new cc.ResolutionPolicy(b.EQUAL_TO_FRAME, c.FIXED_WIDTH);
        cc.game.once(cc.game.EVENT_ENGINE_INITED, this.init, this);
      }
      cc.js.extend(h, d);
      cc.js.mixin(h.prototype, {
        init: function () {
          this._initFrameSize();
          var a = cc.game.canvas.width;
          var b = cc.game.canvas.height;
          this._designResolutionSize.width = a;
          this._designResolutionSize.height = b;
          this._originalDesignResolutionSize.width = a;
          this._originalDesignResolutionSize.height = b;
          this._viewportRect.width = a;
          this._viewportRect.height = b;
          this._visibleRect.width = a;
          this._visibleRect.height = b;
          cc.winSize.width = this._visibleRect.width;
          cc.winSize.height = this._visibleRect.height;
          if (cc.visibleRect) {
            cc.visibleRect.init(this._visibleRect);
          }
        },
        _resizeEvent: function (b) {
          var d;
          d = this.setDesignResolutionSize ? this : cc.view;
          var f = cc.sys;
          if (f.browserType !== f.BROWSER_TYPE_UC || f.os !== f.OS_IOS) {
            var g = d._frameSize.width;
            var h = d._frameSize.height;
            var i = d._isRotated;
            if (cc.sys.isMobile) {
              var j = cc.game.container.style;
              var a = j.margin;
              j.margin = "0";
              j.display = "none";
              d._initFrameSize();
              j.margin = a;
              j.display = "block";
            } else {
              d._initFrameSize();
            }
            if (b === true || d._isRotated !== i || d._frameSize.width !== g || d._frameSize.height !== h) {
              var k = d._originalDesignResolutionSize.width;
              var c = d._originalDesignResolutionSize.height;
              d._resizing = true;
              if (k > 0) {
                d.setDesignResolutionSize(k, c, d._resolutionPolicy);
              }
              d._resizing = false;
              d.emit("canvas-resize");
              if (d._resizeCallback) {
                d._resizeCallback.call();
              }
            }
          } else {
            // TOLOOK
            setTimeout(function () {
              d._resizeEvent(b);
            }, 0);
          }
        },
        _orientationChange: function () {
          cc.view._orientationChanging = true;
          cc.view._resizeEvent(true);
          if (cc.sys.browserType === cc.sys.BROWSER_TYPE_SAFARI && cc.sys.isMobile) {
            // TOLOOK
            setTimeout(function () {
              if (window.innerHeight > window.innerWidth) {
                window.scrollTo(0, 1);
              }
            }, 500);
          }
        },
        _resize: function () {
          cc.view._resizeEvent(false);
        },
        resizeWithBrowserSize: function (a) {
          if (a) {
            if (!this._resizeWithBrowserSize) {
              this._resizeWithBrowserSize = true;
              window.addEventListener("resize", this._resize);
              window.addEventListener("orientationchange", this._orientationChange);
            }
          } else if (this._resizeWithBrowserSize) {
            this._resizeWithBrowserSize = false;
            window.removeEventListener("resize", this._resize);
            window.removeEventListener("orientationchange", this._orientationChange);
          }
        },
        setResizeCallback: function (a) {
          if (!(typeof a != "function" && a != null)) {
            this._resizeCallback = a;
          }
        },
        setOrientation: function (a) {
          if ((a &= cc.macro.ORIENTATION_AUTO) && this._orientation !== a) {
            this._orientation = a;
            var b = this._originalDesignResolutionSize.width;
            var c = this._originalDesignResolutionSize.height;
            this.setDesignResolutionSize(b, c, this._resolutionPolicy);
          }
        },
        _initFrameSize: function () {
          var a = this._frameSize;
          var b = g.availWidth(cc.game.frame);
          var c = g.availHeight(cc.game.frame);
          var d = b >= c;
          if (!cc.sys.isMobile || d && this._orientation & cc.macro.ORIENTATION_LANDSCAPE || !d && this._orientation & cc.macro.ORIENTATION_PORTRAIT) {
            a.width = b;
            a.height = c;
            cc.game.container.style["-webkit-transform"] = "rotate(0deg)";
            cc.game.container.style.transform = "rotate(0deg)";
            this._isRotated = false;
          } else {
            a.width = c;
            a.height = b;
            cc.game.container.style["-webkit-transform"] = "rotate(90deg)";
            cc.game.container.style.transform = "rotate(90deg)";
            cc.game.container.style["-webkit-transform-origin"] = "0px 0px 0px";
            cc.game.container.style.transformOrigin = "0px 0px 0px";
            this._isRotated = true;
          }
          if (this._orientationChanging) {
            // TOLOOK
            setTimeout(function () {
              cc.view._orientationChanging = false;
            }, 1000);
          }
        },
        _setViewportMeta: function (b, c) {
          var d = document.getElementById("cocosMetaElement");
          if (d && c) {
            document.head.removeChild(d);
          }
          var e;
          var f;
          var g;
          var h = document.getElementsByName("viewport");
          var a = h ? h[0] : null;
          e = a ? a.content : "";
          (d = d || document.createElement("meta")).id = "cocosMetaElement";
          d.name = "viewport";
          d.content = "";
          for (f in b) {
            if (e.indexOf(f) == -1) {
              e += "," + f + "=" + b[f];
            } else if (c) {
              g = RegExp(f + "s*=s*[^,]+");
              e = e.replace(g, f + "=" + b[f]);
            }
          }
          if (/^,/.test(e)) {
            e = e.substr(1);
          }
          d.content = e;
          if (a) {
            a.content = e;
          }
          document.head.appendChild(d);
        },
        _adjustViewportMeta: function () {
          if (this._isAdjustViewport) {
            this._setViewportMeta(g.meta, false);
            this._isAdjustViewport = false;
          }
        },
        adjustViewportMeta: function (a) {
          this._isAdjustViewport = a;
        },
        enableRetina: function (a) {
          this._retinaEnabled = !!a;
        },
        isRetinaEnabled: function () {
          return this._retinaEnabled;
        },
        enableAntiAlias: function (a) {
          if (this._antiAliasEnabled !== a) {
            this._antiAliasEnabled = a;
            if (cc.game.renderType === cc.game.RENDER_TYPE_WEBGL) {
              cc.assetManager.assets.forEach(function (b) {
                if (b instanceof cc.Texture2D) {
                  var c = cc.Texture2D.Filter;
                  if (a) {
                    b.setFilters(c.LINEAR, c.LINEAR);
                  } else {
                    b.setFilters(c.NEAREST, c.NEAREST);
                  }
                }
              });
            } else if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
              var b = cc.game.canvas.getContext("2d");
              b.imageSmoothingEnabled = a;
              b.mozImageSmoothingEnabled = a;
            }
          }
        },
        isAntiAliasEnabled: function () {
          return this._antiAliasEnabled;
        },
        enableAutoFullScreen: function (a) {
          if (a && a !== this._autoFullScreen && cc.sys.isMobile) {
            this._autoFullScreen = true;
            cc.screen.autoFullScreen(cc.game.frame);
          } else {
            this._autoFullScreen = false;
            cc.screen.disableAutoFullScreen(cc.game.frame);
          }
        },
        isAutoFullScreenEnabled: function () {
          return this._autoFullScreen;
        },
        setCanvasSize: function (a, b) {
          var c = cc.game.canvas;
          var d = cc.game.container;
          c.width = a * this._devicePixelRatio;
          c.height = b * this._devicePixelRatio;
          c.style.width = a + "px";
          c.style.height = b + "px";
          d.style.width = a + "px";
          d.style.height = b + "px";
          this._resizeEvent();
        },
        getCanvasSize: function () {
          return cc.size(cc.game.canvas.width, cc.game.canvas.height);
        },
        getFrameSize: function () {
          return cc.size(this._frameSize.width, this._frameSize.height);
        },
        setFrameSize: function (a, b) {
          this._frameSize.width = a;
          this._frameSize.height = b;
          cc.game.frame.style.width = a + "px";
          cc.game.frame.style.height = b + "px";
          this._resizeEvent(true);
        },
        getVisibleSize: function () {
          return cc.size(this._visibleRect.width, this._visibleRect.height);
        },
        getVisibleSizeInPixel: function () {
          return cc.size(this._visibleRect.width * this._scaleX, this._visibleRect.height * this._scaleY);
        },
        getVisibleOrigin: function () {
          return cc.v2(this._visibleRect.x, this._visibleRect.y);
        },
        getVisibleOriginInPixel: function () {
          return cc.v2(this._visibleRect.x * this._scaleX, this._visibleRect.y * this._scaleY);
        },
        getResolutionPolicy: function () {
          return this._resolutionPolicy;
        },
        setResolutionPolicy: function (a) {
          var b = this;
          if (a instanceof cc.ResolutionPolicy) {
            b._resolutionPolicy = a;
          } else {
            var c = cc.ResolutionPolicy;
            if (a === c.EXACT_FIT) {
              b._resolutionPolicy = b._rpExactFit;
            }
            if (a === c.SHOW_ALL) {
              b._resolutionPolicy = b._rpShowAll;
            }
            if (a === c.NO_BORDER) {
              b._resolutionPolicy = b._rpNoBorder;
            }
            if (a === c.FIXED_HEIGHT) {
              b._resolutionPolicy = b._rpFixedHeight;
            }
            if (a === c.FIXED_WIDTH) {
              b._resolutionPolicy = b._rpFixedWidth;
            }
          }
        },
        setDesignResolutionSize: function (b, d, e) {
          if (b > 0 && d > 0) {
            this.setResolutionPolicy(e);
            var g = this._resolutionPolicy;
            if (g) {
              g.preApply(this);
            }
            if (cc.sys.isMobile) {
              this._adjustViewportMeta();
            }
            this._orientationChanging = true;
            if (!this._resizing) {
              this._initFrameSize();
            }
            if (g) {
              this._originalDesignResolutionSize.width = this._designResolutionSize.width = b;
              this._originalDesignResolutionSize.height = this._designResolutionSize.height = d;
              var h = g.apply(this, this._designResolutionSize);
              if (h.scale && h.scale.length === 2) {
                this._scaleX = h.scale[0];
                this._scaleY = h.scale[1];
              }
              if (h.viewport) {
                var i = this._viewportRect;
                var a = this._visibleRect;
                var j = h.viewport;
                i.x = j.x;
                i.y = j.y;
                i.width = j.width;
                i.height = j.height;
                a.x = 0;
                a.y = 0;
                a.width = j.width / this._scaleX;
                a.height = j.height / this._scaleY;
              }
              g.postApply(this);
              cc.winSize.width = this._visibleRect.width;
              cc.winSize.height = this._visibleRect.height;
              if (cc.visibleRect) {
                cc.visibleRect.init(this._visibleRect);
              }
              f.updateCameraViewport();
              cc.internal.inputManager._updateCanvasBoundingRect();
              this.emit("design-resolution-changed");
            }
          }
        },
        getDesignResolutionSize: function () {
          return cc.size(this._designResolutionSize.width, this._designResolutionSize.height);
        },
        setRealPixelResolution: function (a, b, c) {
          this._setViewportMeta({
            width: a
          }, true);
          document.documentElement.style.width = a + "px";
          document.body.style.width = a + "px";
          document.body.style.left = "0px";
          document.body.style.top = "0px";
          this.setDesignResolutionSize(a, b, c);
        },
        setViewportInPoints: function (a, b, c, d) {
          var e = this._scaleX;
          var f = this._scaleY;
          cc.game._renderContext.viewport(a * e + this._viewportRect.x, b * f + this._viewportRect.y, c * e, d * f);
        },
        setScissorInPoints: function (a, b, d, e) {
          var g = this._scaleX;
          var i = this._scaleY;
          var k = Math.ceil(a * g + this._viewportRect.x);
          var m = Math.ceil(b * i + this._viewportRect.y);
          var c = Math.ceil(d * g);
          var l = Math.ceil(e * i);
          var h = cc.game._renderContext;
          if (!j) {
            var n = h.getParameter(h.SCISSOR_BOX);
            j = cc.rect(n[0], n[1], n[2], n[3]);
          }
          if (!(j.x === k && j.y === m && j.width === c && j.height === l)) {
            j.x = k;
            j.y = m;
            j.width = c;
            j.height = l;
            h.scissor(k, m, c, l);
          }
        },
        isScissorEnabled: function () {
          return cc.game._renderContext.isEnabled(gl.SCISSOR_TEST);
        },
        getScissorRect: function () {
          if (!j) {
            var a = gl.getParameter(gl.SCISSOR_BOX);
            j = cc.rect(a[0], a[1], a[2], a[3]);
          }
          var b = 1 / this._scaleX;
          var c = 1 / this._scaleY;
          return cc.rect((j.x - this._viewportRect.x) * b, (j.y - this._viewportRect.y) * c, j.width * b, j.height * c);
        },
        getViewportRect: function () {
          return this._viewportRect;
        },
        getScaleX: function () {
          return this._scaleX;
        },
        getScaleY: function () {
          return this._scaleY;
        },
        getDevicePixelRatio: function () {
          return this._devicePixelRatio;
        },
        convertToLocationInView: function (b, d, e, f) {
          var g = f || cc.v2();
          var h = e.adjustedLeft ? e.adjustedLeft : e.left;
          var i = e.adjustedTop ? e.adjustedTop : e.top;
          var a = this._devicePixelRatio * (b - h);
          var j = this._devicePixelRatio * (i + e.height - d);
          if (this._isRotated) {
            g.x = cc.game.canvas.width - j;
            g.y = a;
          } else {
            g.x = a;
            g.y = j;
          }
          return g;
        },
        _convertMouseToLocationInView: function (a, b) {
          var c = this._viewportRect;
          a.x = (this._devicePixelRatio * (a.x - b.left) - c.x) / this._scaleX;
          a.y = (this._devicePixelRatio * (b.top + b.height - a.y) - c.y) / this._scaleY;
        },
        _convertPointWithScale: function (a) {
          var b = this._viewportRect;
          a.x = (a.x - b.x) / this._scaleX;
          a.y = (a.y - b.y) / this._scaleY;
        },
        _convertTouchesWithScale: function (b) {
          for (var c, d, f, g = this._viewportRect, h = this._scaleX, j = this._scaleY, a = 0; a < b.length; a++) {
            d = (c = b[a])._point;
            f = c._prevPoint;
            d.x = (d.x - g.x) / h;
            d.y = (d.y - g.y) / j;
            f.x = (f.x - g.x) / h;
            f.y = (f.y - g.y) / j;
          }
        }
      });
      cc.ContainerStrategy = cc.Class({
        name: "ContainerStrategy",
        preApply: function () {},
        apply: function () {},
        postApply: function () {},
        _setupContainer: function (a, b, c) {
          var d = cc.game.canvas;
          this._setupStyle(a, b, c);
          var e = a._devicePixelRatio = 1;
          if (a.isRetinaEnabled()) {
            e = a._devicePixelRatio = Math.min(a._maxPixelRatio, window.devicePixelRatio || 1);
          }
          d.width = b * e;
          d.height = c * e;
        },
        _setupStyle: function (a, b, c) {
          var d = cc.game.canvas;
          var e = cc.game.container;
          e.style.width = d.style.width = b + "px";
          e.style.height = d.style.height = c + "px";
        },
        _fixContainer: function () {
          document.body.insertBefore(cc.game.container, document.body.firstChild);
          var a = document.body.style;
          a.width = window.innerWidth + "px";
          a.height = window.innerHeight + "px";
          a.overflow = "hidden";
          var b = cc.game.container.style;
          b.position = "fixed";
          b.left = b.top = "0px";
          document.body.scrollTop = 0;
        }
      });
      cc.ContentStrategy = cc.Class({
        name: "ContentStrategy",
        ctor: function () {
          this._result = {
            scale: [1, 1],
            viewport: null
          };
        },
        _buildResult: function (b, c, d, e, f, g) {
          if (Math.abs(b - d) < 2) {
            d = b;
          }
          if (Math.abs(c - e) < 2) {
            e = c;
          }
          var h = cc.rect((b - d) / 2, (c - e) / 2, d, e);
          cc.game.renderType;
          cc.game.RENDER_TYPE_CANVAS;
          this._result.scale = [f, g];
          this._result.viewport = h;
          return this._result;
        },
        preApply: function () {},
        apply: function () {
          return {
            scale: [1, 1]
          };
        },
        postApply: function () {}
      });
      (function () {
        var b = cc.Class({
          name: "EqualToFrame",
          extends: cc.ContainerStrategy,
          apply: function (a) {
            var b = a._frameSize.height;
            var c = cc.game.container.style;
            this._setupContainer(a, a._frameSize.width, a._frameSize.height);
            if (a._isRotated) {
              c.margin = "0 0 0 " + b + "px";
            } else {
              c.margin = "0px";
            }
            c.padding = "0px";
          }
        });
        var d = cc.Class({
          name: "ProportionalToFrame",
          extends: cc.ContainerStrategy,
          apply: function (b, d) {
            var e;
            var g;
            var j = b._frameSize.width;
            var k = b._frameSize.height;
            var m = cc.game.container.style;
            var a = d.width;
            var o = d.height;
            var c = j / a;
            var l = k / o;
            if (c < l) {
              e = j;
              g = o * c;
            } else {
              e = a * l;
              g = k;
            }
            var h = Math.round((j - e) / 2);
            var p = Math.round((k - g) / 2);
            e = j - h * 2;
            g = k - p * 2;
            this._setupContainer(b, e, g);
            if (b._isRotated) {
              m.margin = "0 0 0 " + k + "px";
            } else {
              m.margin = "0px";
            }
            m.paddingLeft = h + "px";
            m.paddingRight = h + "px";
            m.paddingTop = p + "px";
            m.paddingBottom = p + "px";
          }
        });
        cc.Class({
          name: "EqualToWindow",
          extends: b,
          preApply: function (a) {
            this._super(a);
            cc.game.frame = document.documentElement;
          },
          apply: function (a) {
            this._super(a);
            this._fixContainer();
          }
        });
        cc.Class({
          name: "ProportionalToWindow",
          extends: d,
          preApply: function (a) {
            this._super(a);
            cc.game.frame = document.documentElement;
          },
          apply: function (a, b) {
            this._super(a, b);
            this._fixContainer();
          }
        });
        var e = cc.Class({
          name: "OriginalContainer",
          extends: cc.ContainerStrategy,
          apply: function (a) {
            this._setupContainer(a, cc.game.canvas.width, cc.game.canvas.height);
          }
        });
        var f = (typeof window == "undefined" ? global : window).__globalAdapter;
        if (f) {
          if (f.adaptContainerStrategy) {
            f.adaptContainerStrategy(cc.ContainerStrategy.prototype);
          }
          if (f.adaptView) {
            f.adaptView(h.prototype);
          }
        }
        cc.ContainerStrategy.EQUAL_TO_FRAME = new b();
        cc.ContainerStrategy.PROPORTION_TO_FRAME = new d();
        cc.ContainerStrategy.ORIGINAL_CONTAINER = new e();
        var g = cc.Class({
          name: "ExactFit",
          extends: cc.ContentStrategy,
          apply: function (a, b) {
            var c = cc.game.canvas.width;
            var d = cc.game.canvas.height;
            var e = c / b.width;
            var f = d / b.height;
            return this._buildResult(c, d, c, d, e, f);
          }
        });
        var i = cc.Class({
          name: "ShowAll",
          extends: cc.ContentStrategy,
          apply: function (b, d) {
            var e;
            var f;
            var g = cc.game.canvas.width;
            var j = cc.game.canvas.height;
            var k = d.width;
            var a = d.height;
            var m = g / k;
            var c = j / a;
            var l = 0;
            if (m < c) {
              e = g;
              f = a * (l = m);
            } else {
              e = k * (l = c);
              f = j;
            }
            return this._buildResult(g, j, e, f, l, l);
          }
        });
        var j = cc.Class({
          name: "NoBorder",
          extends: cc.ContentStrategy,
          apply: function (b, d) {
            var e;
            var f;
            var g;
            var j = cc.game.canvas.width;
            var k = cc.game.canvas.height;
            var a = d.width;
            var m = d.height;
            var c = j / a;
            var l = k / m;
            if (c < l) {
              f = a * (e = l);
              g = k;
            } else {
              f = j;
              g = m * (e = c);
            }
            return this._buildResult(j, k, f, g, e, e);
          }
        });
        var a = cc.Class({
          name: "FixedHeight",
          extends: cc.ContentStrategy,
          apply: function (b, c) {
            var d = cc.game.canvas.width;
            var e = cc.game.canvas.height;
            var f = e / c.height;
            var g = d;
            var h = e;
            return this._buildResult(d, e, g, h, f, f);
          }
        });
        var c = cc.Class({
          name: "FixedWidth",
          extends: cc.ContentStrategy,
          apply: function (b, c) {
            var d = cc.game.canvas.width;
            var e = cc.game.canvas.height;
            var f = d / c.width;
            var g = d;
            var h = e;
            return this._buildResult(d, e, g, h, f, f);
          }
        });
        cc.ContentStrategy.EXACT_FIT = new g();
        cc.ContentStrategy.SHOW_ALL = new i();
        cc.ContentStrategy.NO_BORDER = new j();
        cc.ContentStrategy.FIXED_HEIGHT = new a();
        cc.ContentStrategy.FIXED_WIDTH = new c();
      })();
      cc.ResolutionPolicy = cc.Class({
        name: "cc.ResolutionPolicy",
        ctor: function (a, b) {
          this._containerStrategy = null;
          this._contentStrategy = null;
          this.setContainerStrategy(a);
          this.setContentStrategy(b);
        },
        preApply: function (a) {
          this._containerStrategy.preApply(a);
          this._contentStrategy.preApply(a);
        },
        apply: function (a, b) {
          this._containerStrategy.apply(a, b);
          return this._contentStrategy.apply(a, b);
        },
        postApply: function (a) {
          this._containerStrategy.postApply(a);
          this._contentStrategy.postApply(a);
        },
        setContainerStrategy: function (a) {
          if (a instanceof cc.ContainerStrategy) {
            this._containerStrategy = a;
          }
        },
        setContentStrategy: function (a) {
          if (a instanceof cc.ContentStrategy) {
            this._contentStrategy = a;
          }
        }
      });
      e.get(cc.ResolutionPolicy.prototype, "canvasSize", function () {
        return cc.v2(cc.game.canvas.width, cc.game.canvas.height);
      });
      cc.ResolutionPolicy.EXACT_FIT = 0;
      cc.ResolutionPolicy.NO_BORDER = 1;
      cc.ResolutionPolicy.SHOW_ALL = 2;
      cc.ResolutionPolicy.FIXED_HEIGHT = 3;
      cc.ResolutionPolicy.FIXED_WIDTH = 4;
      cc.ResolutionPolicy.UNKNOWN = 5;
      cc.view = new h();
      cc.winSize = cc.size();
      c.exports = cc.view;
    }, {
      "../event/event-target": 134,
      "../platform/CCClass": 162,
      "../platform/js": 183,
      "../renderer": 193
    }],
    173: [function () {
      "use strict";
  
      cc.visibleRect = {
        topLeft: cc.v2(0, 0),
        topRight: cc.v2(0, 0),
        top: cc.v2(0, 0),
        bottomLeft: cc.v2(0, 0),
        bottomRight: cc.v2(0, 0),
        bottom: cc.v2(0, 0),
        center: cc.v2(0, 0),
        left: cc.v2(0, 0),
        right: cc.v2(0, 0),
        width: 0,
        height: 0,
        init: function (b) {
          var c = this.width = b.width;
          var d = this.height = b.height;
          var e = b.x;
          var f = b.y;
          var g = f + d;
          var h = e + c;
          this.topLeft.x = e;
          this.topLeft.y = g;
          this.topRight.x = h;
          this.topRight.y = g;
          this.top.x = e + c / 2;
          this.top.y = g;
          this.bottomLeft.x = e;
          this.bottomLeft.y = f;
          this.bottomRight.x = h;
          this.bottomRight.y = f;
          this.bottom.x = e + c / 2;
          this.bottom.y = f;
          this.center.x = e + c / 2;
          this.center.y = f + d / 2;
          this.left.x = e;
          this.left.y = f + d / 2;
          this.right.x = h;
          this.right.y = f + d / 2;
        }
      };
    }, {}],
    174: [function (b, c) {
      "use strict";
  
      var d = b("./js");
      b("./utils").isPlainEmptyObj_DEV;
      var f = "$_$";
      function g(a, b) {
        var c = b ? Object.create(b) : {};
        d.value(a, "__attrs__", c);
        return c;
      }
      function e(a) {
        if (typeof a != "function") {
          return g(a, h(a.constructor));
        }
        for (var b, c = cc.Class.getInheritanceChain(a), d = c.length - 1; d >= 0; d--) {
          var f = c[d];
          if (!(f.hasOwnProperty("__attrs__") && f.__attrs__)) {
            g(f, (b = c[d + 1]) && b.__attrs__);
          }
        }
        g(a, (b = c[0]) && b.__attrs__);
        return a.__attrs__;
      }
      function h(a) {
        return a.hasOwnProperty("__attrs__") && a.__attrs__ || e(a);
      }
      function a(a, b) {
        this.name = a;
        this.default = b;
      }
      a.prototype.toString = function () {
        return this.name;
      };
      cc.Integer = new a("Integer", 0);
      cc.Float = new a("Float", 0);
      cc.Boolean = new a("Boolean", false);
      cc.String = new a("String", "");
      c.exports = {
        PrimitiveType: a,
        attr: function (a, b) {
          var c = h(a);
          var d = b + f;
          var e = {};
          for (var g in c) {
            if (g.startsWith(d)) {
              e[g.slice(d.length)] = c[g];
            }
          }
          return e;
        },
        getClassAttrs: h,
        setClassAttr: function (a, b, c, d) {
          h(a)[b + f + c] = d;
        },
        DELIMETER: f,
        getTypeChecker_ET: false,
        getObjTypeChecker_ET: false,
        ScriptUuid: {}
      };
    }, {
      "./CCClass": 162,
      "./js": 183,
      "./utils": 186
    }],
    175: [function (b, d) {
      "use strict";
  
      var e = b("./js");
      var f = e.array.fastRemoveAt;
      function g() {}
      function i() {
        this.callback = g;
        this.target = undefined;
        this.once = false;
      }
      i.prototype.set = function (a, b, c) {
        this.callback = a;
        this.target = b;
        this.once = !!c;
      };
      var j = new e.Pool(function (a) {
        a.callback = g;
        a.target = undefined;
        a.once = false;
        return true;
      }, 32);
      function a() {
        this.callbackInfos = [];
        this.isInvoking = false;
        this.containCanceled = false;
      }
      j.get = function () {
        return this._get() || new i();
      };
      var k = a.prototype;
      k.removeByCallback = function (a) {
        for (var b = 0; b < this.callbackInfos.length; ++b) {
          var c = this.callbackInfos[b];
          if (c && c.callback === a) {
            j.put(c);
            f(this.callbackInfos, b);
            --b;
          }
        }
      };
      k.removeByTarget = function (a) {
        for (var b = 0; b < this.callbackInfos.length; ++b) {
          var c = this.callbackInfos[b];
          if (c && c.target === a) {
            j.put(c);
            f(this.callbackInfos, b);
            --b;
          }
        }
      };
      k.cancel = function (a) {
        var b = this.callbackInfos[a];
        if (b) {
          j.put(b);
          this.callbackInfos[a] = null;
        }
        this.containCanceled = true;
      };
      k.cancelAll = function () {
        for (var a = 0; a < this.callbackInfos.length; a++) {
          var b = this.callbackInfos[a];
          if (b) {
            j.put(b);
            this.callbackInfos[a] = null;
          }
        }
        this.containCanceled = true;
      };
      k.purgeCanceled = function () {
        for (var a = this.callbackInfos.length - 1; a >= 0; --a) {
          if (!this.callbackInfos[a]) {
            f(this.callbackInfos, a);
          }
        }
        this.containCanceled = false;
      };
      k.clear = function () {
        this.cancelAll();
        this.callbackInfos.length = 0;
        this.isInvoking = false;
        this.containCanceled = false;
      };
      var m = new e.Pool(function (a) {
        a.callbackInfos.length = 0;
        a.isInvoking = false;
        a.containCanceled = false;
        return true;
      }, 16);
      function l() {
        this._callbackTable = e.createMap(true);
      }
      m.get = function () {
        return this._get() || new a();
      };
      (k = l.prototype).on = function (a, b, c, d) {
        var e = this._callbackTable[a];
        if (!e) {
          e = this._callbackTable[a] = m.get();
        }
        var f = j.get();
        f.set(b, c, d);
        e.callbackInfos.push(f);
      };
      k.add = k.on;
      k.hasEventListener = function (b, c, d) {
        var e = this._callbackTable[b];
        if (!e) {
          return false;
        }
        var f = e.callbackInfos;
        if (!c) {
          if (e.isInvoking) {
            for (var g = 0; g < f.length; ++g) {
              if (f[g]) {
                return true;
              }
            }
            return false;
          }
          return f.length > 0;
        }
        for (var h = 0; h < f.length; ++h) {
          var i = f[h];
          if (i && i.callback === c && i.target === d) {
            return true;
          }
        }
        return false;
      };
      k.removeAll = function (b) {
        if (typeof b == "string") {
          var c = this._callbackTable[b];
          if (c) {
            if (c.isInvoking) {
              c.cancelAll();
            } else {
              c.clear();
              m.put(c);
              delete this._callbackTable[b];
            }
          }
        } else if (b) {
          for (var d in this._callbackTable) {
            var e = this._callbackTable[d];
            if (e.isInvoking) {
              for (var f = e.callbackInfos, g = 0; g < f.length; ++g) {
                var h = f[g];
                if (h && h.target === b) {
                  e.cancel(g);
                }
              }
            } else {
              e.removeByTarget(b);
            }
          }
        }
      };
      k.off = function (a, b, d) {
        var e = this._callbackTable[a];
        if (e) {
          for (var g = e.callbackInfos, h = 0; h < g.length; ++h) {
            var i = g[h];
            if (i && i.callback === b && i.target === d) {
              if (e.isInvoking) {
                e.cancel(h);
              } else {
                f(g, h);
                j.put(i);
              }
              return true;
            }
          }
        }
        return false;
      };
      k.remove = k.off;
      k.emit = function (b, g, e, i, j, k) {
        var m = this._callbackTable[b];
        if (m) {
          var a = !m.isInvoking;
          m.isInvoking = true;
          for (var n = m.callbackInfos, c = 0, o = n.length; c < o; ++c) {
            var h = n[c];
            if (h) {
              var p = h.target;
              var q = h.callback;
              if (h.once) {
                this.off(b, q, p);
              }
              if (p) {
                q.call(p, g, e, i, j, k);
              } else {
                q(g, e, i, j, k);
              }
            }
          }
          if (a) {
            m.isInvoking = false;
            if (m.containCanceled) {
              m.purgeCanceled();
            }
          }
        }
      };
      k.invoke = k.emit;
      d.exports = l;
    }, {
      "./js": 183
    }],
    176: [function (a, b) {
      "use strict";
  
      function c(a, b) {
        for (var d = 0; d < b.length; d++) {
          var e = b[d];
          if (Array.isArray(e)) {
            c(a, e);
          } else {
            a.push(e);
          }
        }
      }
      b.exports = {
        flattenCodeArray: function (a) {
          var b = [];
          c(b, a);
          return b.join("");
        }
      };
    }, {}],
    177: [function (j, k, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = J;
      e.getDependUuidList = function (a) {
        var b = a[1];
        return a[10].map(function (a) {
          return b[a];
        });
      };
      e.hasNativeDep = function (a) {
        var b = a[5];
        var c = b[b.length - 1];
        return typeof c == "number" && c < 0;
      };
      e.packCustomObjData = function (a, b, c) {
        return [1, f, f, [a], f, c ? [b, -1] : [b], [0], f, [], [], []];
      };
      e.unpackJSONs = function (b, d) {
        if (b[0] < 1) {
          throw Error(cc.debug.getError(5304, b[0]));
        }
        G(b, true, d);
        H(b);
        for (var e = new D(b[0]), f = b[1], h = b[2], i = b[3], j = b[4], a = b[g], k = 0; k < a.length; ++k) {
          a[k].unshift(e, f, h, i, j);
        }
        return a;
      };
      var q = s(j("./js"));
      var i = s(j("../value-types/vec2"));
      var n = s(j("../value-types/vec3"));
      var r = s(j("../value-types/vec4"));
      var a = s(j("../value-types/color"));
      var o = s(j("../value-types/size"));
      var c = s(j("../value-types/rect"));
      var l = s(j("../value-types/quat"));
      var h = s(j("../value-types/mat4"));
      function s(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      var f = 0;
      var d = [i.default, n.default, r.default, l.default, a.default, o.default, c.default, h.default];
      function t(a, b) {
        a.x = b[1];
        a.y = b[2];
        a.z = b[3];
        a.w = b[4];
      }
      var p = [function (a, b) {
        a.x = b[1];
        a.y = b[2];
      }, function (a, b) {
        a.x = b[1];
        a.y = b[2];
        a.z = b[3];
      }, t, t, function (a, b) {
        a._val = b[1];
      }, function (a, b) {
        a.width = b[1];
        a.height = b[2];
      }, function (a, b) {
        a.x = b[1];
        a.y = b[2];
        a.width = b[3];
        a.height = b[4];
      }, function (a, b) {
        h.default.fromArray(a, b, 1);
      }];
      var u = 0;
      var g = 5;
      var m = function () {
        function a() {
          this.uuidObjList = null;
          this.uuidPropList = null;
          this.uuidList = null;
        }
        var b = a.prototype;
        b.init = function (a) {
          this.uuidObjList = a[8];
          this.uuidPropList = a[9];
          this.uuidList = a[10];
        };
        b.reset = function () {
          this.uuidList = null;
          this.uuidObjList = null;
          this.uuidPropList = null;
        };
        b.push = function (a, b, c) {
          this.uuidObjList.push(a);
          this.uuidPropList.push(b);
          this.uuidList.push(c);
        };
        return a;
      }();
      function v(b, d, e) {
        for (var f = b.length - 1, g = 0, i = b[f] * 3; g < i; g += 3) {
          var j = b[g];
          var k = d[b[g + 2]];
          var m = b[g + 1];
          if (m >= 0) {
            j[e[m]] = k;
          } else {
            j[~m] = k;
          }
        }
        for (; g < f; g += 3) {
          var n = d[b[g]];
          var p = d[b[g + 2]];
          var q = b[g + 1];
          if (q >= 0) {
            n[e[q]] = p;
          } else {
            n[~q] = p;
          }
        }
      }
      function y(b, d) {
        for (var e = b[4][d[0]], f = e[0], g = new (0, f[0])(), i = f[1], j = f[2], a = e[e.length - 1], k = 1; k < a; ++k) {
          g[i[e[k]]] = d[k];
        }
        for (; k < d.length; ++k) {
          var m = i[e[k]];
          var n = f[e[k] + j];
          (0, C[n])(b, g, m, d[k]);
        }
        return g;
      }
      function z(a, b, c) {
        var d = new b();
        if (d._deserialize) {
          d._deserialize(c, a[0]);
        }
        return d;
      }
      function A(a, b, c, d) {
        if (d >= 0) {
          b[c] = a[5][d];
        } else {
          a[7][~d * 3] = b;
        }
      }
      function x(a) {
        return function (b, c, d, e) {
          c[d] = e;
          for (var f = 0; f < e.length; ++f) {
            a(b, e, f, e[f]);
          }
        };
      }
      function B(a, b, c, d) {
        b[c] = null;
        a[8][d] = b;
      }
      function b(a, b, c, d) {
        b[c] = y(a, d);
      }
      m.pool = new q.default.Pool(function (a) {
        a.reset();
      }, 5);
      m.pool.get = function () {
        return this._get() || new m();
      };
      var C = Array(13);
      function E(b) {
        var d = b[5];
        var e = b[6];
        var f = e === 0 ? 0 : e.length;
        var g = d[d.length - 1];
        var i = d.length - f;
        if (typeof g != "number") {
          g = 0;
        } else {
          if (g < 0) {
            g = ~g;
          }
          --i;
        }
        for (var j = 0; j < i; ++j) {
          d[j] = y(b, d[j]);
        }
        for (var k = b[3], m = 0; m < f; ++m, ++j) {
          var n = e[m];
          var o = d[j];
          if (n >= 0) {
            var p = k[n];
            d[j] = z(b, p, o);
          } else {
            (0, C[n = ~n])(b, d, j, o);
          }
        }
        return g;
      }
      function F(a, b) {
        if (!a) {
          J.reportMissingClass(b);
        }
        return Object;
      }
      function w(b, c, d, e, f, g) {
        var h = b(c);
        if (!h) {
          if (f) {
            d[e] = function (a, c, d) {
              return function () {
                var e = b(d) || F(g, d);
                a[c] = e;
                return new e();
              };
            }(d, e, c);
            return;
          }
          h = F(g, c);
        }
        d[e] = h;
      }
      function G(b, c, d) {
        for (var e = d || q.default._getClassById, f = b[3], g = 0; g < f.length; ++g) {
          var h = f[g];
          if (typeof h != "string") {
            w(e, h[0], h, u, c, d);
          } else {
            w(e, h, f, g, c, d);
          }
        }
      }
      function H(a) {
        var b = a[4];
        if (b) {
          for (var c = a[3], d = 0; d < b.length; ++d) {
            var e = b[d];
            e[0] = c[e[0]];
          }
        }
      }
      function I(b) {
        for (var d = b[5], e = b[2], f = b[1], g = b[8], i = b[9], j = b[10], a = 0; a < g.length; ++a) {
          var k = g[a];
          if (typeof k == "number") {
            g[a] = d[k];
          }
          var m = i[a];
          if (typeof m == "number") {
            m = m >= 0 ? e[m] : ~m;
            i[a] = m;
          }
          var n = j[a];
          if (typeof n == "number") {
            j[a] = f[n];
          }
        }
      }
      function J(b, c, d) {
        if (typeof b == "string") {
          b = JSON.parse(b);
        }
        var f = !c;
        (c = c || m.pool.get()).init(b);
        d = d || {};
        var g = b[0];
        var h = false;
        if (typeof g == "object") {
          h = g.preprocessed;
          g = g.version;
        }
        if (g < 1) {
          throw Error(cc.debug.getError(5304, g));
        }
        d._version = g;
        d.result = c;
        b[0] = d;
        if (!h) {
          G(b, false, d.classFinder);
          H(b);
        }
        cc.game._isCloning = true;
        var j = b[5];
        var a = E(b);
        cc.game._isCloning = false;
        if (b[7]) {
          v(b[7], j, b[2]);
        }
        I(b);
        if (f) {
          m.pool.put(c);
        }
        return j[a];
      }
      C[0] = function (a, b, c, d) {
        b[c] = d;
      };
      C[1] = A;
      C[2] = x(A);
      C[3] = x(B);
      C[4] = b;
      C[5] = function (a, b, c, d) {
        p[d[0]](b[c], d);
      };
      C[6] = B;
      C[7] = function (a, b, c, d) {
        b[c].set(d);
      };
      C[8] = function (a, b, c, e) {
        var f = new d[e[0]]();
        p[e[0]](f, e);
        b[c] = f;
      };
      C[9] = x(b);
      C[10] = function (a, b, c, d) {
        var e = a[3][d[0]];
        b[c] = z(a, e, d[1]);
      };
      C[11] = function (b, d, e, f) {
        var g = f[0];
        d[e] = g;
        for (var h = 1; h < f.length; h += 3) {
          var i = f[h];
          var j = f[h + 1];
          var k = f[h + 2];
          (0, C[j])(b, g, i, k);
        }
      };
      C[12] = function (b, c, d, e) {
        var f = e[0];
        c[d] = f;
        for (var g = 0; g < f.length; ++g) {
          var h = f[g];
          var i = e[g + 1];
          if (i !== 0) {
            (0, C[i])(b, f, g, h);
          }
        }
      };
      J.Details = m;
      function D(a) {
        this.preprocessed = true;
        this.version = a;
      }
    }, {
      "../value-types/color": 250,
      "../value-types/mat4": 253,
      "../value-types/quat": 254,
      "../value-types/rect": 255,
      "../value-types/size": 256,
      "../value-types/vec2": 260,
      "../value-types/vec3": 261,
      "../value-types/vec4": 262,
      "./js": 183
    }],
    178: [function (a) {
      "use strict";
  
      var b;
      var c = (b = a("./deserialize-compiled")) && b.__esModule ? b : {
        default: b
      };
      c.default.reportMissingClass = function () {};
      cc.deserialize = c.default;
    }, {
      "./deserialize-compiled": 177,
      "./deserialize-editor": undefined
    }],
    179: [function (a, b) {
      "use strict";
  
      var c = ".";
      function d(a) {
        this.id = Math.random() * 998 | 0;
        this.prefix = a ? a + c : "";
      }
      d.prototype.getNewId = function () {
        return this.prefix + ++this.id;
      };
      d.global = new d("global");
      b.exports = d;
    }, {}],
    180: [function (a) {
      "use strict";
  
      a("./js");
      a("./CCClass");
      a("./CCClassDecorator");
      a("./CCEnum");
      a("./CCObject");
      a("./callbacks-invoker");
      a("./deserialize");
      a("./instantiate");
      a("./instantiate-jit");
      a("./requiring-frame");
      a("./CCSys");
      a("./CCMacro");
      a("./CCVisibleRect");
    }, {
      "./CCClass": 162,
      "./CCClassDecorator": 163,
      "./CCEnum": 164,
      "./CCMacro": 167,
      "./CCObject": 168,
      "./CCSys": 171,
      "./CCVisibleRect": 173,
      "./callbacks-invoker": 175,
      "./deserialize": 178,
      "./instantiate": 182,
      "./instantiate-jit": 181,
      "./js": 183,
      "./requiring-frame": 185
    }],
    181: [function (b, j) {
      "use strict";
  
      var k = b("./CCObject");
      var q = k.Flags.Destroyed;
      var e = k.Flags.PersistentMask;
      var w = b("./attribute");
      var z = b("./js");
      var a = b("./CCClass");
      var o = b("./compiler");
      var i = w.DELIMETER + "default";
      var c = a.IDENTIFIER_RE;
      var h = a.escapeForJS;
      var l = "var ";
      var B = "o";
      var d = "t";
      var f = {
        "cc.Node": "cc.Node",
        "cc.Sprite": "cc.Sprite",
        "cc.Label": "cc.Label",
        "cc.Button": "cc.Button",
        "cc.Widget": "cc.Widget",
        "cc.Animation": "cc.Animation",
        "cc.ClickEvent": false,
        "cc.PrefabInfo": false
      };
      try {
        if (!Float32Array.name) {
          Float32Array.name = "Float32Array";
        }
        if (!Float64Array.name) {
          Float64Array.name = "Float64Array";
        }
        if (!Int8Array.name) {
          Int8Array.name = "Int8Array";
        }
        if (!Int16Array.name) {
          Int16Array.name = "Int16Array";
        }
        if (!Int32Array.name) {
          Int32Array.name = "Int32Array";
        }
        if (!Uint8Array.name) {
          Uint8Array.name = "Uint8Array";
        }
        if (!Uint16Array.name) {
          Uint16Array.name = "Uint16Array";
        }
        if (!Uint32Array.name) {
          Uint32Array.name = "Uint32Array";
        }
        if (!Uint8ClampedArray.name) {
          Uint8ClampedArray.name = "Uint8ClampedArray";
        }
      } catch (a) {}
      function p(a) {
        if (a === Float32Array) {
          return "Float32Array";
        }
        if (a === Float64Array) {
          return "Float64Array";
        }
        if (a === Int8Array) {
          return "Int8Array";
        }
        if (a === Int16Array) {
          return "Int16Array";
        }
        if (a === Int32Array) {
          return "Int32Array";
        }
        if (a === Uint8Array) {
          return "Uint8Array";
        }
        if (a === Uint16Array) {
          return "Uint16Array";
        }
        if (a === Uint32Array) {
          return "Uint32Array";
        }
        if (a === Uint8ClampedArray) {
          return "Uint8ClampedArray";
        }
        throw Error("Unknown TypedArray to instantiate: " + a);
      }
      function s(a, b) {
        this.varName = a;
        this.expression = b;
      }
      function g(a, b) {
        if (b instanceof s) {
          return new s(b.varName, a + b.expression);
        } else {
          return a + b;
        }
      }
      function m(a, b, c) {
        if (Array.isArray(c)) {
          c[0] = g(b, c[0]);
          a.push(c);
        } else {
          a.push(g(b, c) + ";");
        }
      }
      function u(a) {
        this._exps = [];
        this._targetExp = a;
      }
      function v(a, b) {
        if (typeof a == "function") {
          try {
            a = a();
          } catch (a) {
            return false;
          }
        }
        if (a === b) {
          return true;
        }
        if (a && b && typeof a == "object" && typeof b == "object" && a.constructor === b.constructor) {
          if (a instanceof cc.ValueType) {
            if (a.equals(b)) {
              return true;
            }
          } else {
            if (Array.isArray(a)) {
              return a.length === 0 && b.length === 0;
            }
            if (a.constructor === Object) {
              return z.isEmptyObject(a) && z.isEmptyObject(b);
            }
          }
        }
        return false;
      }
      function r(a) {
        if (c.test(a)) {
          return "." + a;
        } else {
          return "[" + h(a) + "]";
        }
      }
      function n(a, b) {
        var c;
        this.parent = b;
        this.objsToClear_iN$t = [];
        this.codeArray = [];
        this.objs = [];
        this.funcs = [];
        this.funcModuleCache = z.createMap();
        z.mixin(this.funcModuleCache, f);
        this.globalVariables = [];
        this.globalVariableId = 0;
        this.localVariableId = 0;
        this.codeArray.push(l + B + "," + d + ";", "if(R){", B + "=R;", "}else{", B + "=R=new " + this.getFuncModule(a.constructor, true) + "();", "}");
        z.value(a, "_iN$t", {
          globalVar: "R"
        }, true);
        this.objsToClear_iN$t.push(a);
        this.enumerateObject(this.codeArray, a);
        if (this.globalVariables.length > 0) {
          c = l + this.globalVariables.join(",") + ";";
        }
        var e = o.flattenCodeArray(["return (function(R){", c || [], this.codeArray, "return o;", "})"]);
        this.result = Function("O", "F", e)(this.objs, this.funcs);
        for (var g = 0, h = this.objsToClear_iN$t.length; g < h; ++g) {
          this.objsToClear_iN$t[g]._iN$t = null;
        }
        this.objsToClear_iN$t.length = 0;
      }
      s.prototype.toString = function () {
        return l + this.varName + "=" + this.expression + ";";
      };
      u.prototype.append = function (a, b) {
        this._exps.push([a, b]);
      };
      u.prototype.writeCode = function (a) {
        var b;
        if (this._exps.length > 1) {
          a.push(d + "=" + this._targetExp + ";");
          b = d;
        } else {
          if (this._exps.length !== 1) {
            return;
          }
          b = this._targetExp;
        }
        for (var c = 0; c < this._exps.length; c++) {
          var f = this._exps[c];
          m(a, b + r(f[0]) + "=", f[1]);
        }
      };
      u.pool = new z.Pool(function (a) {
        a._exps.length = 0;
        a._targetExp = null;
      }, 1);
      u.pool.get = function (a) {
        var b = this._get() || new u();
        b._targetExp = a;
        return b;
      };
      var t = n.prototype;
      t.getFuncModule = function (a, b) {
        var c = z.getClassName(a);
        if (c) {
          var d = this.funcModuleCache[c];
          if (d) {
            return d;
          }
          if (d === undefined) {
            var e = c.indexOf(".") !== -1;
            if (e) {
              try {
                if (e = a === Function("return " + c)()) {
                  this.funcModuleCache[c] = c;
                  return c;
                }
              } catch (a) {}
            }
          }
        }
        var f = this.funcs.indexOf(a);
        if (f < 0) {
          f = this.funcs.length;
          this.funcs.push(a);
        }
        var g = "F[" + f + "]";
        if (b) {
          g = "(" + g + ")";
        }
        this.funcModuleCache[c] = g;
        return g;
      };
      t.getObjRef = function (a) {
        var b = this.objs.indexOf(a);
        if (b < 0) {
          b = this.objs.length;
          this.objs.push(a);
        }
        return "O[" + b + "]";
      };
      t.setValueType = function (b, d, e, f) {
        var g = u.pool.get(f);
        var h = d.constructor.__props__;
        if (!h) {
          h = Object.keys(d);
        }
        for (var i = 0; i < h.length; i++) {
          var j = h[i];
          var k = e[j];
          if (d[j] !== k) {
            var m = this.enumerateField(e, j, k);
            g.append(j, m);
          }
        }
        g.writeCode(b);
        u.pool.put(g);
      };
      t.enumerateCCClass = function (b, d, e) {
        for (var g = e.__values__, j = w.getClassAttrs(e), k = 0; k < g.length; k++) {
          var l = g[k];
          var m = d[l];
          var n = j[l + i];
          if (!v(n, m)) {
            if (typeof m == "object" && m instanceof cc.ValueType && (n = a.getDefault(n)) && n.constructor === m.constructor) {
              var o = B + r(l);
              this.setValueType(b, n, m, o);
            } else {
              this.setObjProp(b, d, l, m);
            }
          }
        }
      };
      t.instantiateArray = function (a) {
        if (a.length === 0) {
          return "[]";
        }
        var b = "a" + ++this.localVariableId;
        var c = [new s(b, "new Array(" + a.length + ")")];
        z.value(a, "_iN$t", {
          globalVar: "",
          source: c
        }, true);
        this.objsToClear_iN$t.push(a);
        for (var d = 0; d < a.length; ++d) {
          m(c, b + "[" + d + "]=", this.enumerateField(a, d, a[d]));
        }
        return c;
      };
      t.instantiateTypedArray = function (a) {
        var b = a.constructor.name || p(a.constructor);
        if (a.length === 0) {
          return "new " + b;
        }
        var c = "a" + ++this.localVariableId;
        var d = [new s(c, "new " + b + "(" + a.length + ")")];
        a._iN$t = {
          globalVar: "",
          source: d
        };
        this.objsToClear_iN$t.push(a);
        for (var e = 0; e < a.length; ++e) {
          if (a[e] !== 0) {
            m(d, c + "[" + e + "]=", a[e]);
          }
        }
        return d;
      };
      t.enumerateField = function (b, c, d) {
        if (typeof d == "object" && d) {
          var f = d._iN$t;
          if (f) {
            var i = f.globalVar;
            if (!i) {
              i = f.globalVar = "v" + ++this.globalVariableId;
              this.globalVariables.push(i);
              var j = f.source[0];
              f.source[0] = g(i + "=", j);
            }
            return i;
          }
          if (ArrayBuffer.isView(d)) {
            return this.instantiateTypedArray(d);
          } else if (Array.isArray(d)) {
            return this.instantiateArray(d);
          } else {
            return this.instantiateObj(d);
          }
        }
        if (typeof d == "function") {
          return this.getFuncModule(d);
        } else if (typeof d == "string") {
          return h(d);
        } else {
          if (c === "_objFlags" && b instanceof k) {
            d &= e;
          }
          return d;
        }
      };
      t.setObjProp = function (a, b, c, d) {
        m(a, B + r(c) + "=", this.enumerateField(b, c, d));
      };
      t.enumerateObject = function (a, b) {
        var c = b.constructor;
        if (cc.Class._isCCClass(c)) {
          this.enumerateCCClass(a, b, c);
        } else {
          for (var d in b) {
            if (b.hasOwnProperty(d) && (d.charCodeAt(0) !== 95 || d.charCodeAt(1) !== 95 || d === "__type__")) {
              var e = b[d];
              if (!(typeof e == "object" && e && e === b._iN$t)) {
                this.setObjProp(a, b, d, e);
              }
            }
          }
        }
      };
      t.instantiateObj = function (b) {
        if (b instanceof cc.ValueType) {
          return a.getNewValueTypeCode(b);
        }
        if (b instanceof cc.Asset) {
          return this.getObjRef(b);
        }
        if (b._objFlags & q) {
          return null;
        }
        var c;
        var d = b.constructor;
        if (cc.Class._isCCClass(d)) {
          if (this.parent) {
            if (this.parent instanceof cc.Component) {
              if (b instanceof cc._BaseNode || b instanceof cc.Component) {
                return this.getObjRef(b);
              }
            } else if (this.parent instanceof cc._BaseNode) {
              if (b instanceof cc._BaseNode) {
                if (!b.isChildOf(this.parent)) {
                  return this.getObjRef(b);
                }
              } else if (b instanceof cc.Component) {
                var f;
                if ((f = b.node) == null || !f.isChildOf(this.parent)) {
                  return this.getObjRef(b);
                }
              }
            }
          }
          c = new s(B, "new " + this.getFuncModule(d, true) + "()");
        } else if (d === Object) {
          c = new s(B, "{}");
        } else {
          if (d) {
            return this.getObjRef(b);
          }
          c = new s(B, "Object.create(null)");
        }
        var g = [c];
        z.value(b, "_iN$t", {
          globalVar: "",
          source: g
        }, true);
        this.objsToClear_iN$t.push(b);
        this.enumerateObject(g, b);
        return ["(function(){", g, "return o;})();"];
      };
      j.exports = {
        compile: function (a) {
          return new n(a, a instanceof cc._BaseNode && a).result;
        },
        equalsToDefault: v
      };
    }, {
      "./CCClass": 162,
      "./CCObject": 168,
      "./attribute": 174,
      "./compiler": 176,
      "./js": 183
    }],
    182: [function (b, g) {
      "use strict";
  
      var j = b("./CCObject");
      var k = b("../value-types/value-type");
      var m = j.Flags.Destroyed;
      var i = j.Flags.PersistentMask;
      var p = b("./utils").isDomNode;
      var q = b("./js");
      function a(a, b) {
        if (!b) {
          if (typeof a != "object" || Array.isArray(a)) {
            return null;
          }
          if (!a) {
            return null;
          }
          if (!cc.isValid(a)) {
            return null;
          }
        }
        var d;
        if (a instanceof j) {
          if (a._instantiate) {
            cc.game._isCloning = true;
            d = a._instantiate(null, true);
            cc.game._isCloning = false;
            return d;
          }
          if (a instanceof cc.Asset) {
            return null;
          }
        }
        cc.game._isCloning = true;
        d = c(a);
        cc.game._isCloning = false;
        return d;
      }
      var o = [];
      function c(a, b) {
        if (Array.isArray(a)) {
          return null;
        }
        if (p && p(a)) {
          return null;
        }
        var c;
        l(a, c = a._iN$t ? a._iN$t : a.constructor ? new (0, a.constructor)() : Object.create(null), b);
        for (var d = 0, e = o.length; d < e; ++d) {
          o[d]._iN$t = null;
        }
        o.length = 0;
        return c;
      }
      function h(b, d, e, g) {
        for (var h = b.__values__, i = 0; i < h.length; i++) {
          var j = h[i];
          var m = d[j];
          if (typeof m == "object" && m) {
            var n = e[j];
            if (n instanceof k && n.constructor === m.constructor) {
              n.set(m);
            } else {
              e[j] = m._iN$t || f(m, g);
            }
          } else {
            e[j] = m;
          }
        }
      }
      function l(b, d, e) {
        q.value(b, "_iN$t", d, true);
        o.push(b);
        var g = b.constructor;
        if (cc.Class._isCCClass(g)) {
          h(g, b, d, e);
        } else {
          for (var k in b) {
            if (b.hasOwnProperty(k) && (k.charCodeAt(0) !== 95 || k.charCodeAt(1) !== 95 || k === "__type__")) {
              var l = b[k];
              if (typeof l == "object" && l) {
                if (l === d) {
                  continue;
                }
                d[k] = l._iN$t || f(l, e);
              } else {
                d[k] = l;
              }
            }
          }
        }
        if (b instanceof j) {
          d._objFlags &= i;
        }
      }
      function f(b, d) {
        if (b instanceof k) {
          return b.clone();
        }
        if (b instanceof cc.Asset) {
          return b;
        }
        var e;
        if (ArrayBuffer.isView(b)) {
          var g = b.length;
          e = new b.constructor(g);
          b._iN$t = e;
          o.push(b);
          for (var j = 0; j < g; ++j) {
            e[j] = b[j];
          }
          return e;
        }
        if (Array.isArray(b)) {
          var n = b.length;
          e = Array(n);
          q.value(b, "_iN$t", e, true);
          o.push(b);
          for (var c = 0; c < n; ++c) {
            var r = b[c];
            e[c] = typeof r == "object" && r ? r._iN$t || f(r, d) : r;
          }
          return e;
        }
        if (b._objFlags & m) {
          return null;
        }
        var s = b.constructor;
        if (cc.Class._isCCClass(s)) {
          if (d) {
            if (d instanceof cc.Component) {
              if (b instanceof cc._BaseNode || b instanceof cc.Component) {
                return b;
              }
            } else if (d instanceof cc._BaseNode) {
              if (b instanceof cc._BaseNode) {
                if (!b.isChildOf(d)) {
                  return b;
                }
              } else if (b instanceof cc.Component) {
                var t;
                if ((t = b.node) == null || !t.isChildOf(d)) {
                  return b;
                }
              }
            }
          }
          e = new s();
        } else if (s === Object) {
          e = {};
        } else {
          if (s) {
            return b;
          }
          e = Object.create(null);
        }
        l(b, e, d);
        return e;
      }
      a._clone = c;
      cc.instantiate = a;
      g.exports = a;
    }, {
      "../value-types/value-type": 259,
      "./CCObject": 168,
      "./js": 183,
      "./utils": 186
    }],
    183: [function (b, g) {
      "use strict";
  
      var j = new (b("./id-generater"))("TmpCId.");
      function k(a, b) {
        for (; a;) {
          var c = Object.getOwnPropertyDescriptor(a, b);
          if (c) {
            return c;
          }
          a = Object.getPrototypeOf(a);
        }
        return null;
      }
      function e(a, b, c) {
        var d = k(b, a);
        Object.defineProperty(c, a, d);
      }
      var m = {
        isNumber: function (a) {
          return typeof a == "number" || a instanceof Number;
        },
        isString: function (a) {
          return typeof a == "string" || a instanceof String;
        },
        addon: function (a) {
          a = a || {};
          for (var b = 1, c = arguments.length; b < c; b++) {
            var d = arguments[b];
            if (d) {
              if (typeof d != "object") {
                continue;
              }
              for (var f in d) {
                if (!(f in a)) {
                  e(f, d, a);
                }
              }
            }
          }
          return a;
        },
        mixin: function (a) {
          a = a || {};
          for (var b = 1, c = arguments.length; b < c; b++) {
            var d = arguments[b];
            if (d) {
              if (typeof d != "object") {
                continue;
              }
              for (var f in d) {
                e(f, d, a);
              }
            }
          }
          return a;
        },
        extend: function (a, b) {
          for (var c in b) {
            if (b.hasOwnProperty(c)) {
              a[c] = b[c];
            }
          }
          a.prototype = Object.create(b.prototype, {
            constructor: {
              value: a,
              writable: true,
              configurable: true
            }
          });
          return a;
        },
        getSuper: function (a) {
          var b = a.prototype;
          var c = b && Object.getPrototypeOf(b);
          return c && c.constructor;
        },
        isChildClassOf: function (a, b) {
          if (a && b) {
            if (typeof a != "function") {
              return false;
            }
            if (typeof b != "function") {
              return false;
            }
            if (a === b) {
              return true;
            }
            for (;;) {
              if (!(a = m.getSuper(a))) {
                return false;
              }
              if (a === b) {
                return true;
              }
            }
          }
          return false;
        },
        clear: function (a) {
          for (var b = Object.keys(a), c = 0; c < b.length; c++) {
            delete a[b[c]];
          }
        },
        isEmptyObject: function (a) {
          for (var b in a) {
            return false;
          }
          return true;
        },
        getPropertyDescriptor: k
      };
      var p = {
        value: undefined,
        enumerable: false,
        writable: false,
        configurable: true
      };
      m.value = function (a, b, c, d, e) {
        p.value = c;
        p.writable = d;
        p.enumerable = e;
        Object.defineProperty(a, b, p);
        p.value = undefined;
      };
      var a = {
        get: null,
        set: null,
        enumerable: false
      };
      m.getset = function (b, c, d, e, f, g) {
        if (typeof e != "function") {
          f = e;
          e = undefined;
        }
        a.get = d;
        a.set = e;
        a.enumerable = f;
        a.configurable = g;
        Object.defineProperty(b, c, a);
        a.get = null;
        a.set = null;
      };
      var o = {
        get: null,
        enumerable: false,
        configurable: false
      };
      m.get = function (a, b, c, d, e) {
        o.get = c;
        o.enumerable = d;
        o.configurable = e;
        Object.defineProperty(a, b, o);
        o.get = null;
      };
      var c = {
        set: null,
        enumerable: false,
        configurable: false
      };
      m.set = function (a, b, d, e, f) {
        c.set = d;
        c.enumerable = e;
        c.configurable = f;
        Object.defineProperty(a, b, c);
        c.set = null;
      };
      m.getClassName = function (a) {
        if (typeof a == "function") {
          var b = a.prototype;
          if (b && b.hasOwnProperty("__classname__") && b.__classname__) {
            return b.__classname__;
          }
          var c = "";
          if (a.name) {
            c = a.name;
          }
          if (a.toString) {
            var d;
            var e = a.toString();
            if ((d = e.charAt(0) === "[" ? e.match(/\[\w+\s*(\w+)\]/) : e.match(/function\s*(\w+)/)) && d.length === 2) {
              c = d[1];
            }
          }
          if (c !== "Object") {
            return c;
          } else {
            return "";
          }
        }
        if (a && a.constructor) {
          return m.getClassName(a.constructor);
        } else {
          return "";
        }
      };
      (function () {
        var a = {};
        var b = {};
        function c(a, b, c) {
          m.getset(m, b, function () {
            return Object.assign({}, c);
          }, function (a) {
            m.clear(c);
            Object.assign(c, a);
          });
          return function (b, d) {
            if (d.prototype.hasOwnProperty(a)) {
              delete c[d.prototype[a]];
            }
            m.value(d.prototype, a, b);
            if (b) {
              var e = c[b];
              if (!(e && e !== d)) {
                c[b] = d;
              }
            }
          };
        }
        m._setClassId = c("__cid__", "_registeredClassIds", a);
        var d = c("__classname__", "_registeredClassNames", b);
        m.setClassName = function (a, b) {
          d(a, b);
          if (!b.prototype.hasOwnProperty("__cid__")) {
            var c = a || j.getNewId();
            if (c) {
              m._setClassId(c, b);
            }
          }
        };
        m.unregisterClass = function () {
          for (var c = 0; c < arguments.length; c++) {
            var d = arguments[c].prototype;
            var e = d.__cid__;
            if (e) {
              delete a[e];
            }
            var f = d.__classname__;
            if (f) {
              delete b[f];
            }
          }
        };
        m._getClassById = function (b) {
          return a[b];
        };
        m.getClassByName = function (a) {
          return b[a];
        };
        m._getClassId = function (a, b) {
          b = b === undefined || b;
          if (typeof a == "function" && a.prototype.hasOwnProperty("__cid__")) {
            return a.prototype.__cid__;
          }
          if (a && a.constructor) {
            var c = a.constructor.prototype;
            if (c && c.hasOwnProperty("__cid__")) {
              return a.__cid__;
            }
          }
          return "";
        };
      })();
      m.obsolete = function (b, d, e, f) {
        var g = /([^.]+)$/;
        var h = g.exec(d)[0];
        var a = g.exec(e)[0];
        function i() {
          return this[a];
        }
        if (f) {
          m.getset(b, h, i, function (b) {
            this[a] = b;
          });
        } else {
          m.get(b, h, i);
        }
      };
      m.obsoletes = function (b, c, d, e) {
        for (var f in d) {
          var g = d[f];
          m.obsolete(b, c + "." + f, g, e);
        }
      };
      var l = /(%d)|(%s)/;
      var h = /%s/;
      function n(a, b) {
        a.splice(b, 1);
      }
      function f(a, b) {
        var c = a.indexOf(b);
        return c >= 0 && (n(a, c), true);
      }
      function d(a, b) {
        if (b === undefined) {
          b = a;
          a = null;
        }
        this.get = null;
        this.count = 0;
        this._pool = Array(b);
        this._cleanup = a;
      }
      m.formatStr = function () {
        var b = arguments.length;
        if (b === 0) {
          return "";
        }
        var c = arguments[0];
        if (b === 1) {
          return "" + c;
        }
        var d = typeof c == "string" && l.test(c);
        if (d) {
          for (var f = 1; f < b; ++f) {
            var g = arguments[f];
            var i = typeof g == "number" ? l : h;
            if (i.test(c)) {
              var j = "" + g;
              c = c.replace(i, j);
            } else {
              c += " " + g;
            }
          }
        } else {
          for (var k = 1; k < b; ++k) {
            c += " " + arguments[k];
          }
        }
        return c;
      };
      m.shiftArguments = function () {
        for (var a = arguments.length - 1, b = Array(a), c = 0; c < a; ++c) {
          b[c] = arguments[c + 1];
        }
        return b;
      };
      m.createMap = function (a) {
        var b = Object.create(null);
        if (a) {
          b["."] = true;
          b["/"] = true;
          delete b["."];
          delete b["/"];
        }
        return b;
      };
      m.array = {
        remove: f,
        fastRemove: function (a, b) {
          var c = a.indexOf(b);
          if (c >= 0) {
            a[c] = a[a.length - 1];
            --a.length;
          }
        },
        removeAt: n,
        fastRemoveAt: function (a, b) {
          var c = a.length;
          if (!(b < 0 || b >= c)) {
            a[b] = a[c - 1];
            a.length = c - 1;
          }
        },
        fastRemoveAll: function (a, b) {
          for (var c; (c = a.indexOf(b, c)) !== -1;) {
            a[c] = a[a.length - 1];
            --a.length;
          }
        },
        contains: function (a, b) {
          return a.indexOf(b) >= 0;
        },
        verifyType: function (a, b) {
          if (a && a.length > 0) {
            for (var c = 0; c < a.length; c++) {
              if (!(a[c] instanceof b)) {
                return false;
              }
            }
          }
          return true;
        },
        removeArray: function (a, b) {
          for (var c = 0, d = b.length; c < d; c++) {
            f(a, b[c]);
          }
        },
        appendObjectsAt: function (a, b, c) {
          a.splice.apply(a, [c, 0].concat(b));
          return a;
        },
        copy: function (a) {
          var b;
          var c = a.length;
          var d = Array(c);
          for (b = 0; b < c; b += 1) {
            d[b] = a[b];
          }
          return d;
        },
        MutableForwardIterator: b("../utils/mutable-forward-iterator")
      };
      d.prototype._get = function () {
        if (this.count > 0) {
          --this.count;
          var a = this._pool[this.count];
          this._pool[this.count] = null;
          return a;
        }
        return null;
      };
      d.prototype.put = function (a) {
        var b = this._pool;
        if (this.count < b.length) {
          if (this._cleanup && this._cleanup(a) === false) {
            return;
          }
          b[this.count] = a;
          ++this.count;
        }
      };
      d.prototype.resize = function (a) {
        if (a >= 0) {
          this._pool.length = a;
          if (this.count > a) {
            this.count = a;
          }
        }
      };
      m.Pool = d;
      cc.js = m;
      g.exports = m;
    }, {
      "../utils/mutable-forward-iterator": 237,
      "./id-generater": 179
    }],
    184: [function (b, d, f) {
      "use strict";
  
      var g = b("./js");
      var h = b("./attribute");
      var e = {
        default: {},
        serializable: {},
        editorOnly: {},
        formerlySerializedAs: {}
      };
      function i(b, d, f, g) {
        if (!b.get && !b.set && b.hasOwnProperty("default")) {
          var h = "_N$" + d;
          b.get = function () {
            return this[h];
          };
          b.set = function (a) {
            var b = this[h];
            this[h] = a;
            f.call(this, b);
          };
          var i = {};
          g[h] = i;
          for (var a in e) {
            var j = e[a];
            if (b.hasOwnProperty(a)) {
              i[a] = b[a];
              if (!j.canUsedInGet) {
                delete b[a];
              }
            }
          }
        }
      }
      function a(a, b) {
        if (Array.isArray(b)) {
          if (!(b.length > 0)) {
            return;
          }
          a.type = b = b[0];
        }
        if (typeof b == "function") {
          if (b === String) {
            a.type = cc.String;
          } else if (b === Boolean) {
            a.type = cc.Boolean;
          } else if (b === Number) {
            a.type = cc.Float;
          }
        }
      }
      function j(a, b, c) {
        var d = a ? {
          _short: true
        } : {
          _short: true,
          default: b
        };
        if (c) {
          d.type = c;
        }
        return d;
      }
      f.getFullFormOfProperty = function (a, b) {
        if (a && a.constructor === Object) {
          return null;
        } else if (Array.isArray(a) && a.length > 0) {
          return j(b, [], a);
        } else if (typeof a == "function") {
          return j(b, g.isChildClassOf(a, cc.ValueType) ? new a() : null, a);
        } else if (a instanceof h.PrimitiveType) {
          return j(b, a.default);
        } else {
          return j(b, a);
        }
      };
      f.preprocessAttrs = function (b) {
        for (var c in b) {
          var d = b[c];
          var g = f.getFullFormOfProperty(d, false);
          if (g) {
            d = b[c] = g;
          }
          if (d) {
            var h = d.notify;
            if (h) {
              i(d, c, h, b);
            }
            if ("type" in d) {
              a(d, d.type);
            }
          }
        }
      };
      f.validateMethodWithProps = function (a) {
        return typeof a == "function" || a === null;
      };
    }, {
      "./CCClass": 162,
      "./attribute": 174,
      "./js": 183
    }],
    185: [function () {
      "use strict";
  
      var a = [];
      var b = Object.create(null);
      cc._RF = {
        push: function (c, d, e) {
          if (e === undefined) {
            e = d;
            d = "";
          }
          if (d) {
            var f = b[d];
            if (f) {
              c.exports = f.exports;
              return true;
            }
          }
          a.push({
            uuid: d,
            script: e,
            module: c,
            exports: c.exports,
            cls: null
          });
        },
        pop: function () {
          var c = a.pop();
          var d = c.module;
          var e = d.exports;
          if (c.uuid) {
            b[c.uuid] = d;
          }
          if (e === c.exports) {
            for (var f in e) {
              return;
            }
            d.exports = e = c.cls;
          }
        },
        peek: function () {
          return a[a.length - 1];
        }
      };
    }, {}],
    186: [function (a, b) {
      "use strict";
  
      a("./js");
      b.exports = {
        contains: function (a, b) {
          if (typeof a.contains == "function") {
            return a.contains(b);
          }
          if (typeof a.compareDocumentPosition == "function") {
            return !!(a.compareDocumentPosition(b) & 16);
          }
          var c = b.parentNode;
          if (c) {
            do {
              if (c === a) {
                return true;
              }
              c = c.parentNode;
            } while (c !== null);
          }
          return false;
        },
        isDomNode: typeof window == "object" && (typeof Node == "function" ? function (a) {
          return a instanceof Node;
        } : function (a) {
          return a && typeof a == "object" && typeof a.nodeType == "number" && typeof a.nodeName == "string";
        }),
        callInNextTick: function (a, b, c) {
          if (a) {
            // TOLOOK
            setTimeout(function () {
              a(b, c);
            }, 0);
          }
        }
      };
    }, {
      "./js": 183
    }],
    187: [function (a) {
      "use strict";
  
      a("./platform/js");
      a("./value-types");
      a("./utils");
      a("./platform/CCInputManager");
      a("./platform/CCInputExtension");
      a("./event");
      a("./platform/CCSys");
      a("./platform/CCMacro");
      a("./CCDirector");
      a("./asset-manager");
      a("./renderer");
      a("./platform/CCView");
      a("./platform/CCScreen");
      a("./CCScheduler");
      a("./event-manager");
    }, {
      "./CCDirector": 24,
      "./CCScheduler": 29,
      "./asset-manager": 45,
      "./event": 136,
      "./event-manager": 133,
      "./platform/CCInputExtension": 165,
      "./platform/CCInputManager": 166,
      "./platform/CCMacro": 167,
      "./platform/CCScreen": 170,
      "./platform/CCSys": 171,
      "./platform/CCView": 172,
      "./platform/js": 183,
      "./renderer": 193,
      "./utils": 235,
      "./value-types": 251
    }],
    188: [function (b, d, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var f = j(b("./assembler"));
      var g = j(b("./utils/dynamic-atlas/manager"));
      var i = j(b("./webgl/render-data"));
      function j(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      function k(a, b) {
        for (var c = 0; c < b.length; c++) {
          var d = b[c];
          d.enumerable = d.enumerable || false;
          d.configurable = true;
          if ("value" in d) {
            d.writable = true;
          }
          Object.defineProperty(a, d.key, d);
        }
      }
      function a(a) {
        if (a === undefined) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return a;
      }
      function c(a, b) {
        return (c = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      var m = function (b) {
        var d;
        var f;
        function j() {
          var c;
          (c = b.call(this) || this)._renderData = new i.default();
          c._renderData.init(a(c));
          c.initData();
          c.initLocal();
          return c;
        }
        f = b;
        (d = j).prototype = Object.create(f.prototype);
        d.prototype.constructor = d;
        c(d, f);
        var l;
        var m;
        var n = j.prototype;
        n.initData = function () {
          this._renderData.createQuadData(0, this.verticesFloats, this.indicesCount);
        };
        n.initLocal = function () {
          this._local = [];
          this._local.length = 4;
        };
        n.updateColor = function (a, b) {
          var c = this._renderData.uintVDatas[0];
          if (c) {
            b = b != null ? b : a.node.color._val;
            for (var d = this.floatsPerVert, f = this.colorOffset, g = c.length; f < g; f += d) {
              c[f] = b;
            }
          }
        };
        n.getBuffer = function () {
          return cc.renderer._handle._meshBuffer;
        };
        n.updateWorldVerts = function (b) {
          var j = this._local;
          var e = this._renderData.vDatas[0];
          var i = b.node._worldMatrix.m;
          var k = i[0];
          var n = i[1];
          var q = i[4];
          var a = i[5];
          var o = i[12];
          var c = i[13];
          var l = j[0];
          var h = j[2];
          var r = j[1];
          var f = j[3];
          var d = this.floatsPerVert;
          var s = 0;
          if (k === 1 && n === 0 && q === 0 && a === 1) {
            e[s] = l + o;
            e[s + 1] = r + c;
            e[s += d] = h + o;
            e[s + 1] = r + c;
            e[s += d] = l + o;
            e[s + 1] = f + c;
            e[s += d] = h + o;
            e[s + 1] = f + c;
          } else {
            var t = k * l;
            var u = k * h;
            var g = n * l;
            var m = n * h;
            var v = q * r;
            var w = q * f;
            var y = a * r;
            var z = a * f;
            e[s] = t + v + o;
            e[s + 1] = g + y + c;
            e[s += d] = u + v + o;
            e[s + 1] = m + y + c;
            e[s += d] = t + w + o;
            e[s + 1] = g + z + c;
            e[s += d] = u + w + o;
            e[s + 1] = m + z + c;
          }
        };
        n.fillBuffers = function (b, g) {
          if (g.worldMatDirty) {
            this.updateWorldVerts(b);
          }
          var e = this._renderData;
          var i = e.vDatas[0];
          var j = e.iDatas[0];
          var k = this.getBuffer(g);
          var m = k.request(this.verticesCount, this.indicesCount);
          var a = m.byteOffset >> 2;
          var n = k._vData;
          if (i.length + a > n.length) {
            n.set(i.subarray(0, n.length - a), a);
          } else {
            n.set(i, a);
          }
          for (var c = k._iData, l = m.indiceOffset, o = m.vertexOffset, p = 0, q = j.length; p < q; p++) {
            c[l++] = o + j[p];
          }
        };
        n.packToDynamicAtlas = function (a, b) {
          if (!b._original && g.default && b._texture.packable && b._texture.loaded) {
            var c = g.default.insertSpriteFrame(b);
            if (c) {
              b._setDynamicAtlasFrame(c);
            }
          }
          var d = a._materials[0];
          if (d && d.getProperty("texture") !== b._texture._texture) {
            a._vertsDirty = true;
            a._updateMaterial();
          }
        };
        l = j;
        if (m = [{
          key: "verticesFloats",
          get: function () {
            return this.verticesCount * this.floatsPerVert;
          }
        }]) {
          k(l.prototype, m);
        }
        Object.defineProperty(l, "prototype", {
          writable: false
        });
        return j;
      }(f.default);
      e.default = m;
      cc.js.addon(m.prototype, {
        floatsPerVert: 5,
        verticesCount: 4,
        indicesCount: 6,
        uvOffset: 2,
        colorOffset: 4
      });
      cc.Assembler2D = m;
      d.exports = e.default;
    }, {
      "./assembler": 190,
      "./utils/dynamic-atlas/manager": 196,
      "./webgl/render-data": 223
    }],
    189: [function (b, d, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var f;
      var g = (f = b("../utils/pool")) && f.__esModule ? f : {
        default: f
      };
      function h(a, b) {
        return (h = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      var i = 0;
      function j(a) {
        if (!Object.getOwnPropertyDescriptor(a, "__assemblerId__")) {
          a.__assemblerId__ = ++i;
        }
        return a.__assemblerId__;
      }
      var k = new (function (a) {
        var b;
        var c;
        function d() {
          for (var b, c = arguments.length, d = Array(c), f = 0; f < c; f++) {
            d[f] = arguments[f];
          }
          (b = a.call.apply(a, [this].concat(d)) || this)._pool = {};
          return b;
        }
        c = a;
        (b = d).prototype = Object.create(c.prototype);
        b.prototype.constructor = b;
        h(b, c);
        var f = d.prototype;
        f.put = function (a) {
          if (a && this.enabled) {
            var b = j(a.constructor);
            var c = this._pool;
            if (!c[b]) {
              c[b] = [];
            }
            if (!(this.count > this.maxSize)) {
              this._clean(a);
              c[b].push(a);
              this.count++;
            }
          }
        };
        f.get = function (a) {
          var b;
          if (this.enabled) {
            var c = this._pool;
            var d = j(a);
            b = c[d] && c[d].pop();
          }
          if (b) {
            this.count--;
          } else {
            b = new a();
          }
          return b;
        };
        f.clear = function () {
          this._pool = {};
          this.count = 0;
        };
        f._clean = function (a) {
          a._renderComp = null;
        };
        return d;
      }(g.default))();
      g.default.register("assembler", k);
      var c = k;
      e.default = c;
      d.exports = e.default;
    }, {
      "../utils/pool": 238
    }],
    190: [function (b, c, d) {
      "use strict";
  
      d.__esModule = true;
      d.default = undefined;
      var e;
      var f = b("./webgl/vertex-format");
      var g = (e = b("./assembler-pool")) && e.__esModule ? e : {
        default: e
      };
      var h = function () {
        function a() {
          if (this._extendNative) {
            this._extendNative();
          }
        }
        var b = a.prototype;
        b.init = function (a) {
          this._renderComp = a;
        };
        b.updateRenderData = function () {};
        b.fillBuffers = function () {};
        b.getVfmt = function () {
          return f.vfmtPosUvColor;
        };
        return a;
      }();
      d.default = h;
      h.register = function (a, b) {
        a.__assembler__ = b;
      };
      h.init = function (a) {
        for (var b = a.constructor, c = b.__assembler__; !c;) {
          if (!(b = b.$super)) {
            return;
          }
          c = b.__assembler__;
        }
        if (c.getConstructor) {
          c = c.getConstructor(a);
        }
        if (!a._assembler || a._assembler.constructor !== c) {
          var d = g.default.get(c);
          d.init(a);
          a._assembler = d;
        }
      };
      cc.Assembler = h;
      c.exports = d.default;
    }, {
      "./assembler-pool": 189,
      "./webgl/vertex-format": 225
    }],
    191: [function (a, b) {
      "use strict";
  
      function c(a) {
        var b;
        try {
          b = a.getContext("2d");
        } catch (a) {
          return;
        }
        this._canvas = a;
        this._ctx = b;
        this._caps = {};
        this._stats = {
          drawcalls: 0
        };
        this._vx = this._vy = this._vw = this._vh = 0;
        this._sx = this._sy = this._sw = this._sh = 0;
      }
      c.prototype._restoreTexture = function () {};
      c.prototype.setViewport = function (a, b, c, d) {
        if (!(this._vx === a && this._vy === b && this._vw === c && this._vh === d)) {
          this._vx = a;
          this._vy = b;
          this._vw = c;
          this._vh = d;
        }
      };
      c.prototype.setScissor = function (a, b, c, d) {
        if (!(this._sx === a && this._sy === b && this._sw === c && this._sh === d)) {
          this._sx = a;
          this._sy = b;
          this._sw = c;
          this._sh = d;
        }
      };
      c.prototype.clear = function (a) {
        var b = this._ctx;
        b.clearRect(this._vx, this._vy, this._vw, this._vh);
        if (!(!a || a[0] === 0 && a[1] === 0 && a[2] === 0)) {
          b.fillStyle = "rgb(" + a[0] + "," + a[1] + "," + a[2] + ")";
          b.globalAlpha = a[3];
          b.fillRect(this._vx, this._vy, this._vw, this._vh);
        }
      };
      c.prototype.resetDrawCalls = function () {
        this._stats.drawcalls = 0;
      };
      c.prototype.getDrawCalls = function () {
        return this._stats.drawcalls;
      };
      b.exports = c;
    }, {}],
    192: [function (a, b) {
      "use strict";
  
      function c(a, b) {
        this._device = a;
        this._width = 4;
        this._height = 4;
        this._image = null;
        if (b) {
          if (b.width !== undefined) {
            this._width = b.width;
          }
          if (b.height !== undefined) {
            this._height = b.height;
          }
          this.updateImage(b);
        }
      }
      c.prototype.update = function (a) {
        this.updateImage(a);
      };
      c.prototype.updateImage = function (a) {
        if (a.images && a.images[0]) {
          var b = a.images[0];
          if (b && b !== this._image) {
            this._image = b;
          }
        }
      };
      c.prototype.destroy = function () {
        this._image = null;
      };
      b.exports = c;
    }, {}],
    193: [function (b, c, d) {
      "use strict";
  
      d.__esModule = true;
      d.default = undefined;
      var f = h(b("../../renderer/gfx"));
      var e = h(b("../../renderer/core/input-assembler"));
      var g = h(b("../../renderer/core/pass"));
      function h(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      var a = cc.renderer = {
        Texture2D: null,
        InputAssembler: e.default,
        Pass: g.default,
        renderEngine: null,
        canvas: null,
        device: null,
        scene: null,
        drawCalls: 0,
        _handle: null,
        _cameraNode: null,
        _camera: null,
        _forward: null,
        _flow: null,
        initWebGL: function (d, e) {
          b("./webgl/assemblers");
          var g = b("./webgl/model-batcher");
          this.Texture2D = f.default.Texture2D;
          this.canvas = d;
          this._flow = cc.RenderFlow;
          var h = b("../../renderer/scene/scene");
          var i = b("../../renderer/renderers/forward-renderer");
          this.device = new f.default.Device(d, e);
          this.scene = new h();
          var a;
          a = this.device;
          var j = {
            defaultTexture: new f.default.Texture2D(a, {
              images: [],
              width: 128,
              height: 128,
              wrapS: f.default.WRAP_REPEAT,
              wrapT: f.default.WRAP_REPEAT,
              format: f.default.TEXTURE_FMT_RGB8,
              genMipmaps: false
            }),
            programTemplates: [],
            programChunks: {}
          };
          this._forward = new i(this.device, j);
          this._handle = new g(this.device, this.scene);
          this._flow.init(this._handle, this._forward);
        },
        initCanvas: function () {
          throw Error(cc.debug.getError(2400, "not support"));
        },
        updateCameraViewport: function () {
          if (cc.director) {
            var a = cc.director.getScene();
            if (a) {
              a.setScale(1, 1, 1);
            }
          }
          if (cc.game.renderType === cc.game.RENDER_TYPE_CANVAS) {
            var b = cc.view.getViewportRect();
            this.device.setViewport(b.x, b.y, b.width, b.height);
            this._camera.a = cc.view.getScaleX();
            this._camera.d = cc.view.getScaleY();
            this._camera.tx = b.x;
            this._camera.ty = b.y + b.height;
          }
        },
        render: function (a, b) {
          this.device.resetDrawCalls();
          if (a) {
            this._flow.render(a, b);
            this.drawCalls = this.device.getDrawCalls();
          }
        },
        clear: function () {
          this._handle.reset();
          this._forward.clear();
        }
      };
      d.default = a;
      c.exports = d.default;
    }, {
      "../../renderer/core/input-assembler": 272,
      "../../renderer/core/pass": 273,
      "../../renderer/gfx": 282,
      "../../renderer/renderers/forward-renderer": 301,
      "../../renderer/scene/scene": 304,
      "./canvas": undefined,
      "./canvas/Device": 191,
      "./canvas/Texture2D": 192,
      "./webgl/assemblers": 205,
      "./webgl/model-batcher": 221
    }],
    194: [function (j, k) {
      "use strict";
  
      var q;
      var w;
      var e = 0;
      var z = 1 << e++;
      var s = 1 << e++;
      var a = 1 << e++;
      var B = 1 << e++;
      var c = a | B;
      var l = 1 << e++;
      var h = 1 << e++;
      var o = 1 << e++;
      var D = h | o;
      var d = 1 << e++;
      var f = 1 << e++;
      var p = 1 << e++;
      var u = 1 << e++;
      var g = 0;
      function v() {
        this._func = C;
        this._next = null;
      }
      var t = v.prototype;
      t._doNothing = function () {};
      t._localTransform = function (b) {
        b._updateLocalMatrix();
        b._renderFlag &= ~a;
        this._next._func(b);
      };
      t._worldTransform = function (a) {
        q.worldMatDirty++;
        var b = a._matrix;
        var c = a._trs;
        var d = b.m;
        d[12] = c[0];
        d[13] = c[1];
        d[14] = c[2];
        a._mulMat(a._worldMatrix, a._parent._worldMatrix, b);
        a._renderFlag &= ~B;
        this._next._func(a);
        q.worldMatDirty--;
      };
      t._updateRenderData = function (a) {
        var b = a._renderComponent;
        b._assembler.updateRenderData(b);
        a._renderFlag &= ~l;
        this._next._func(a);
      };
      t._opacity = function (a) {
        q.parentOpacityDirty++;
        this._next._func(a);
        a._renderFlag &= ~h;
        q.parentOpacityDirty--;
      };
      t._color = function (a) {
        var b = a._renderComponent;
        if (b) {
          b._updateColor();
        }
        a._renderFlag &= ~o;
        this._next._func(a);
      };
      t._render = function (a) {
        var b = a._renderComponent;
        b._checkBacth(q, a._cullingMask);
        b._assembler.fillBuffers(b, q);
        this._next._func(a);
      };
      t._children = function (b) {
        for (var c = g, d = q, e = d.parentOpacity, i = d.parentOpacity *= b._opacity / 255, j = (d.worldMatDirty ? B : 0) | (d.parentOpacityDirty ? D : 0), a = b._children, k = 0, m = a.length; k < m; k++) {
          var h = a[k];
          h._renderFlag |= j;
          if (h._activeInHierarchy && h._opacity !== 0) {
            g = h._cullingMask = h.groupIndex === 0 ? c : 1 << h.groupIndex;
            var n = h._color._val;
            h._color._fastSetA(h._opacity * i);
            E[h._renderFlag]._func(h);
            h._color._val = n;
          }
        }
        d.parentOpacity = e;
        this._next._func(b);
      };
      t._postRender = function (a) {
        var b = a._renderComponent;
        b._checkBacth(q, a._cullingMask);
        b._assembler.postFillBuffers(b, q);
        this._next._func(a);
      };
      var y = new v();
      y._func = y._doNothing;
      y._next = y;
      var E = {};
      function A(b, c) {
        if (b === z || b === s) {
          return y;
        }
        var e = new v();
        e._next = c || y;
        switch (b) {
          case a:
            e._func = e._localTransform;
            break;
          case B:
            e._func = e._worldTransform;
            break;
          case l:
            e._func = e._updateRenderData;
            break;
          case h:
            e._func = e._opacity;
            break;
          case o:
            e._func = e._color;
            break;
          case d:
            e._func = e._render;
            break;
          case f:
            e._func = e._children;
            break;
          case p:
            e._func = e._postRender;
        }
        return e;
      }
      function x(a) {
        for (var b = null, c = u; c > 0;) {
          if (c & a) {
            b = A(c, b);
          }
          c >>= 1;
        }
        return b;
      }
      function C(a) {
        var b = a._renderFlag;
        (E[b] = x(b))._func(a);
      }
      v.flows = E;
      v.createFlow = A;
      var b = [];
      v.registerValidate = function (a) {
        if (!a._inValidateList) {
          b.push(a);
          a._inValidateList = true;
        }
      };
      v.validateRenderers = function () {
        for (var a = 0, c = b.length; a < c; a++) {
          var d = b[a];
          if (d.isValid) {
            if (d.enabledInHierarchy) {
              d._validateRender();
            } else {
              d.disableRender();
            }
            d._inValidateList = false;
          }
        }
        b.length = 0;
      };
      v.visitRootNode = function (a) {
        v.validateRenderers();
        var b = g;
        g = a._cullingMask;
        if (a._renderFlag & B) {
          q.worldMatDirty++;
          a._calculWorldMatrix();
          a._renderFlag &= ~B;
          E[a._renderFlag]._func(a);
          q.worldMatDirty--;
        } else {
          E[a._renderFlag]._func(a);
        }
        g = b;
      };
      v.render = function (a, b) {
        q.reset();
        q.walking = true;
        v.visitRootNode(a);
        q.terminate();
        q.walking = false;
        w.render(q._renderScene, b);
      };
      v.renderCamera = function (a, b) {
        q.reset();
        q.walking = true;
        v.visitRootNode(b);
        q.terminate();
        q.walking = false;
        w.renderCamera(a, q._renderScene);
      };
      v.init = function (a, b) {
        q = a;
        w = b;
        E[0] = y;
        for (var c = 1; c < u; c++) {
          E[c] = new v();
        }
      };
      v.getBachther = function () {
        return q;
      };
      v.FLAG_DONOTHING = z;
      v.FLAG_BREAK_FLOW = s;
      v.FLAG_LOCAL_TRANSFORM = a;
      v.FLAG_WORLD_TRANSFORM = B;
      v.FLAG_TRANSFORM = c;
      v.FLAG_UPDATE_RENDER_DATA = l;
      v.FLAG_OPACITY = h;
      v.FLAG_COLOR = o;
      v.FLAG_OPACITY_COLOR = D;
      v.FLAG_RENDER = d;
      v.FLAG_CHILDREN = f;
      v.FLAG_POST_RENDER = p;
      v.FLAG_FINAL = u;
      k.exports = cc.RenderFlow = v;
    }, {}],
    195: [function (a, b) {
      "use strict";
  
      var c = a("../../../assets/CCRenderTexture");
      var d = 2;
      function e(a, b) {
        var e = new c();
        e.initWithSize(a, b);
        e.update();
        this._texture = e;
        this._x = d;
        this._y = d;
        this._nexty = d;
        this._width = a;
        this._height = b;
        this._innerTextureInfos = {};
        this._innerSpriteFrames = [];
        this._count = 0;
      }
      e.DEFAULT_HASH = new c()._getHash();
      cc.js.mixin(e.prototype, {
        insertSpriteFrame: function (b) {
          var f = b._rect;
          var e = b._texture;
          var g = this._innerTextureInfos[e._id];
          var h = f.x;
          var i = f.y;
          if (g) {
            h += g.x;
            i += g.y;
          } else {
            var j = e.width;
            var k = e.height;
            if (this._x + j + d > this._width) {
              this._x = d;
              this._y = this._nexty;
            }
            if (this._y + k + d > this._nexty) {
              this._nexty = this._y + k + d;
            }
            if (this._nexty > this._height) {
              return null;
            }
            if (cc.dynamicAtlasManager.textureBleeding) {
              if (j <= 8 || k <= 8) {
                this._texture.drawTextureAt(e, this._x - 1, this._y - 1);
                this._texture.drawTextureAt(e, this._x - 1, this._y + 1);
                this._texture.drawTextureAt(e, this._x + 1, this._y - 1);
                this._texture.drawTextureAt(e, this._x + 1, this._y + 1);
              }
              this._texture.drawTextureAt(e, this._x - 1, this._y);
              this._texture.drawTextureAt(e, this._x + 1, this._y);
              this._texture.drawTextureAt(e, this._x, this._y - 1);
              this._texture.drawTextureAt(e, this._x, this._y + 1);
            }
            this._texture.drawTextureAt(e, this._x, this._y);
            this._innerTextureInfos[e._id] = {
              x: this._x,
              y: this._y,
              texture: e
            };
            this._count++;
            h += this._x;
            i += this._y;
            this._x += j + d;
            this._dirty = true;
          }
          var c = {
            x: h,
            y: i,
            texture: this._texture
          };
          this._innerSpriteFrames.push(b);
          return c;
        },
        update: function () {
          if (this._dirty) {
            this._texture.update();
            this._dirty = false;
          }
        },
        deleteInnerTexture: function (a) {
          if (a && this._innerTextureInfos[a._id]) {
            delete this._innerTextureInfos[a._id];
            this._count--;
          }
        },
        isEmpty: function () {
          return this._count <= 0;
        },
        reset: function () {
          this._x = d;
          this._y = d;
          this._nexty = d;
          for (var a = this._innerSpriteFrames, b = 0, c = a.length; b < c; b++) {
            var f = a[b];
            if (f.isValid) {
              f._resetDynamicAtlasFrame();
            }
          }
          this._innerSpriteFrames.length = 0;
          this._innerTextureInfos = {};
        },
        destroy: function () {
          this.reset();
          this._texture.destroy();
        }
      });
      b.exports = e;
    }, {
      "../../../assets/CCRenderTexture": 65
    }],
    196: [function (b, g) {
      "use strict";
  
      var e = b("./atlas");
      var j = [];
      var k = -1;
      var m = 5;
      var n = 2048;
      var i = 512;
      var p = true;
      var q = null;
      function v() {
        var a = j[++k];
        if (!a) {
          a = new e(n, n);
          j.push(a);
        }
        return a;
      }
      function h() {
        t.reset();
      }
      var u = false;
      var t = {
        Atlas: e,
        get enabled() {
          return u;
        },
        set enabled(a) {
          if (u !== a) {
            if (a) {
              this.reset();
              cc.director.on(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, h);
            } else {
              cc.director.off(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, h);
            }
            u = a;
          }
        },
        get maxAtlasCount() {
          return m;
        },
        set maxAtlasCount(a) {
          m = a;
        },
        get atlasCount() {
          return j.length;
        },
        get textureBleeding() {
          return p;
        },
        set textureBleeding(a) {
          p = a;
        },
        get textureSize() {
          return n;
        },
        set textureSize(a) {
          n = a;
        },
        get maxFrameSize() {
          return i;
        },
        set maxFrameSize(a) {
          i = a;
        },
        insertSpriteFrame: function (a) {
          if (!u || k === m || !a || a._original) {
            return null;
          }
          if (!a._texture.packable) {
            return null;
          }
          var b = j[k];
          if (!b) {
            b = v();
          }
          var c = b.insertSpriteFrame(a);
          if (c || k === m) {
            return c;
          } else {
            return (b = v()).insertSpriteFrame(a);
          }
        },
        reset: function () {
          for (var a = 0, b = j.length; a < b; a++) {
            j[a].destroy();
          }
          j.length = 0;
          k = -1;
        },
        deleteAtlasSpriteFrame: function (a) {
          if (a._original) {
            var b = a._original._texture;
            this.deleteAtlasTexture(b);
          }
        },
        deleteAtlasTexture: function (a) {
          if (a) {
            for (var b = j.length - 1; b >= 0; b--) {
              j[b].deleteInnerTexture(a);
              if (j[b].isEmpty()) {
                j[b].destroy();
                j.splice(b, 1);
                k--;
              }
            }
          }
        },
        showDebug: function (a) {
          if (a) {
            if (!q || !q.isValid) {
              var b = cc.visibleRect.width;
              var d = cc.visibleRect.height;
              (q = new cc.Node("DYNAMIC_ATLAS_DEBUG_NODE")).width = b;
              q.height = d;
              q.x = b / 2;
              q.y = d / 2;
              q.zIndex = cc.macro.MAX_ZINDEX;
              q.parent = cc.director.getScene();
              q.groupIndex = cc.Node.BuiltinGroupIndex.DEBUG;
              cc.Camera._setupDebugCamera();
              var e = q.addComponent(cc.ScrollView);
              var g = new cc.Node("CONTENT");
              var i = g.addComponent(cc.Layout);
              i.type = cc.Layout.Type.VERTICAL;
              i.resizeMode = cc.Layout.ResizeMode.CONTAINER;
              g.parent = q;
              g.width = n;
              g.anchorY = 1;
              g.x = n;
              e.content = g;
              for (var c = 0; c <= k; c++) {
                var l = new cc.Node("ATLAS");
                j[c]._texture;
                var m = new cc.SpriteFrame();
                m.setTexture(j[c]._texture);
                l.addComponent(cc.Sprite).spriteFrame = m;
                l.parent = g;
              }
            }
            return q;
          }
          if (q) {
            q.parent = null;
            q = null;
          }
        },
        update: function () {
          if (this.enabled) {
            for (var a = 0; a <= k; a++) {
              j[a].update();
            }
          }
        }
      };
      g.exports = cc.dynamicAtlasManager = t;
    }, {
      "./atlas": 195
    }],
    197: [function (j, q, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var i;
      var t = (i = j("../../assembler-2d")) && i.__esModule ? i : {
        default: i
      };
      function G(a, b) {
        return (G = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      var H = j("../../../utils/text-utils");
      var a = j("../../../platform/CCMacro");
      var J = j("../../../components/CCLabel").Overflow;
      var K = j("../utils").shareLabelInfo;
      function c() {
        this.char = "";
        this.valid = true;
        this.x = 0;
        this.y = 0;
        this.line = 0;
        this.hash = "";
      }
      var l = cc.rect();
      var u = null;
      var h = [];
      var o = [];
      var d = [];
      var Q = [];
      var p = null;
      var W = 0;
      var X = 0;
      var v = 0;
      var Y = 0;
      var Z = 0;
      var $ = 1;
      var _ = null;
      var aa = cc.size();
      var b = "";
      var ba = 0;
      var ca = 0;
      var da = 0;
      var ea = 0;
      var fa = 0;
      var ga = 0;
      var ha = 0;
      var ia = false;
      var ja = 0;
      var ka = 0;
      var la = 0;
      var ma = 0;
      var na = 0;
      var r = 0;
      var oa = function (f) {
        var g;
        var j;
        function k() {
          return f.apply(this, arguments) || this;
        }
        j = f;
        (g = k).prototype = Object.create(j.prototype);
        g.prototype.constructor = g;
        G(g, j);
        var m = k.prototype;
        m.updateRenderData = function (a) {
          if (a._vertsDirty && u !== a) {
            u = a;
            this._reserveQuads(a, a.string.toString().length);
            this._updateFontFamily(a);
            this._updateProperties(a);
            this._updateLabelInfo(a);
            this._updateContent();
            this.updateWorldVerts(a);
            u._actualFontSize = ba;
            u.node.setContentSize(aa);
            u._vertsDirty = false;
            u = null;
            this._resetProperties();
          }
        };
        m._updateFontScale = function () {
          $ = ba / ca;
        };
        m._updateFontFamily = function (a) {
          var b = a.font;
          _ = b.spriteFrame;
          p = b._fntConfig;
          K.fontAtlas = b._fontDefDictionary;
          this.packToDynamicAtlas(a, _);
        };
        m._updateLabelInfo = function () {
          K.hash = "";
          K.margin = 0;
        };
        m._updateProperties = function (a) {
          b = a.string.toString();
          ba = a.fontSize;
          ca = p ? p.fontSize : a.fontSize;
          da = a.horizontalAlign;
          ea = a.verticalAlign;
          fa = a.spacingX;
          ha = a.overflow;
          ga = a._lineHeight;
          aa.width = a.node.width;
          aa.height = a.node.height;
          ma = u._customOffsetX;
          na = u._customOffsetY;
          r = u.actualLineHeight;
          if (ha === J.NONE) {
            ia = false;
            aa.width += K.margin * 2;
            aa.height += K.margin * 2;
          } else if (ha === J.RESIZE_HEIGHT) {
            ia = true;
            aa.height += K.margin * 2;
          } else {
            ia = a.enableWrapText;
          }
          K.lineHeight = ga;
          K.fontSize = ba;
          K.actualLineHeight = r;
          this._setupBMFontOverflowMetrics();
        };
        m._resetProperties = function () {
          p = null;
          _ = null;
          K.hash = "";
          K.margin = 0;
        };
        m._updateContent = function () {
          this._updateFontScale();
          this._computeHorizontalKerningForText();
          this._alignText();
        };
        m._computeHorizontalKerningForText = function () {
          var c;
          var d = b;
          var e = d.length;
          var f = h;
          if (p) {
            c = p.kerningDict;
          }
          if (c && !cc.js.isEmptyObject(c)) {
            for (var g = -1, i = 0; i < e; ++i) {
              var j = d.charCodeAt(i);
              var k = c[g << 16 | j & 65535] || 0;
              f[i] = i < e - 1 ? k : 0;
              g = j;
            }
          } else {
            f.length = 0;
          }
        };
        m._multilineTextWrap = function (a) {
          for (var c = b.length, e = 0, g = 0, j = 0, l = 0, m = 0, q = 0, t = 0, x = null, y = cc.v2(0, 0), A = 0; A < c;) {
            var B = b.charAt(A);
            if (B !== "\n") {
              for (var D = a(b, A, c), E = q, F = t, G = m, L = g, N = false, O = 0; O < D; ++O) {
                var P = A + O;
                if ((B = b.charAt(P)) !== "\r") {
                  if (x = K.fontAtlas.getLetterDefinitionForChar(B, K)) {
                    var Q = L + x.offsetX * $ - K.margin;
                    if (ia && la > 0 && g > 0 && Q + x.w * $ > la && !H.isUnicodeSpace(B)) {
                      d.push(m);
                      m = 0;
                      e++;
                      g = 0;
                      j -= ga * this._getFontScale() + 0;
                      N = true;
                      break;
                    }
                    y.x = Q;
                    y.y = j - x.offsetY * $ + K.margin;
                    this._recordLetterInfo(y, B, P, e);
                    if (P + 1 < h.length && P < c - 1) {
                      L += h[P + 1];
                    }
                    L += x.xAdvance * $ + fa - K.margin * 2;
                    G = y.x + x.w * $ - K.margin;
                    if (E < y.y) {
                      E = y.y;
                    }
                    if (F > y.y - x.h * $) {
                      F = y.y - x.h * $;
                    }
                  } else {
                    this._recordPlaceholderInfo(P, B);
                    if (p) {
                      p.atlasName;
                    }
                  }
                } else {
                  this._recordPlaceholderInfo(P, B);
                }
              }
              if (!N) {
                g = L;
                if (q < E) {
                  q = E;
                }
                if (t > F) {
                  t = F;
                }
                if (l < (m = G)) {
                  l = m;
                }
                A += D;
              }
            } else {
              d.push(m);
              m = 0;
              e++;
              g = 0;
              j -= ga * this._getFontScale() + 0;
              this._recordPlaceholderInfo(A, B);
              A++;
            }
          }
          d.push(m);
          X = (W = e + 1) * ga * this._getFontScale();
          if (W > 1) {
            X += (W - 1) * 0;
          }
          aa.width = ja;
          aa.height = ka;
          if (ja <= 0) {
            aa.width = parseFloat(l.toFixed(2)) + K.margin * 2;
          }
          if (ka <= 0) {
            aa.height = parseFloat(X.toFixed(2)) + K.margin * 2;
          }
          Y = aa.height;
          Z = 0;
          if (ha !== J.CLAMP) {
            if (q > 0) {
              Y = aa.height + q;
            }
            if (t < -X) {
              Z = X + t;
            }
          }
          return true;
        };
        m._getFirstCharLen = function () {
          return 1;
        };
        m._getFontScale = function () {
          if (ha === J.SHRINK) {
            return $;
          } else {
            return 1;
          }
        };
        m._getFirstWordLen = function (a, b, d) {
          var e = a.charAt(b);
          if (H.isUnicodeCJK(e) || e === "\n" || H.isUnicodeSpace(e)) {
            return 1;
          }
          var f = 1;
          var g = K.fontAtlas.getLetterDefinitionForChar(e, K);
          if (!g) {
            return f;
          }
          for (var h = g.xAdvance * $ + fa, i = b + 1; i < d && (e = a.charAt(i), g = K.fontAtlas.getLetterDefinitionForChar(e, K)); ++i) {
            if (h + g.offsetX * $ + g.w * $ > la && !H.isUnicodeSpace(e) && la > 0) {
              return f;
            }
            h += g.xAdvance * $ + fa;
            if (e === "\n" || H.isUnicodeSpace(e) || H.isUnicodeCJK(e)) {
              break;
            }
            f++;
          }
          return f;
        };
        m._multilineTextWrapByWord = function () {
          return this._multilineTextWrap(this._getFirstWordLen);
        };
        m._multilineTextWrapByChar = function () {
          return this._multilineTextWrap(this._getFirstCharLen);
        };
        m._recordPlaceholderInfo = function (a, b) {
          if (a >= o.length) {
            var d = new c();
            o.push(d);
          }
          o[a].char = b;
          o[a].hash = b.charCodeAt(0) + K.hash;
          o[a].valid = false;
        };
        m._recordLetterInfo = function (a, b, d, e) {
          if (d >= o.length) {
            var f = new c();
            o.push(f);
          }
          var g = b.charCodeAt(0) + K.hash;
          o[d].line = e;
          o[d].char = b;
          o[d].hash = g;
          o[d].valid = K.fontAtlas.getLetter(g).valid;
          o[d].x = a.x;
          o[d].y = a.y;
        };
        m._alignText = function () {
          X = 0;
          d.length = 0;
          this._multilineTextWrapByWord();
          this._computeAlignmentOffset();
          if (ha === J.SHRINK && ba > 0 && this._isVerticalClamp()) {
            this._shrinkLabelToContentSize(this._isVerticalClamp);
          }
          if (!this._updateQuads()) {
            if (ha === J.SHRINK) {
              this._shrinkLabelToContentSize(this._isHorizontalClamp);
            }
          }
        };
        m._scaleFontSizeDown = function (a) {
          var b = true;
          if (!a) {
            a = 0.1;
            b = false;
          }
          ba = a;
          if (b) {
            this._updateContent();
          }
        };
        m._shrinkLabelToContentSize = function (a) {
          for (var b = 0, c = ba | 0, d = 0; b < c;) {
            var f = d = b + c + 1 >> 1;
            if (f <= 0) {
              break;
            }
            $ = f / ca;
            this._multilineTextWrapByWord();
            this._computeAlignmentOffset();
            if (a()) {
              c = d - 1;
            } else {
              b = d;
            }
          }
          var g = b;
          if (g >= 0) {
            this._scaleFontSizeDown(g);
          }
        };
        m._isVerticalClamp = function () {
          return X > aa.height;
        };
        m._isHorizontalClamp = function () {
          for (var c = false, f = 0, g = b.length; f < g; ++f) {
            var h = o[f];
            if (h.valid) {
              var i = K.fontAtlas.getLetter(h.hash);
              var j = h.x + i.w * $;
              var k = h.line;
              if (ja > 0) {
                if (ia) {
                  if (d[k] > aa.width && (j > aa.width || j < 0)) {
                    c = true;
                    break;
                  }
                } else if (j > aa.width) {
                  c = true;
                  break;
                }
              }
            }
          }
          return c;
        };
        m._isHorizontalClamped = function (a, b) {
          var c = d[b];
          var e = a > aa.width || a < 0;
          if (ia) {
            return c > aa.width && e;
          } else {
            return e;
          }
        };
        m._updateQuads = function () {
          var c = _ ? _._texture : K.fontAtlas.getTexture();
          var f = u.node;
          this.verticesCount = this.indicesCount = 0;
          if (this._renderData) {
            this._renderData.dataLength = 0;
          }
          for (var e = aa, i = f._anchorPoint.x * e.width, j = f._anchorPoint.y * e.height, k = true, n = 0, q = b.length; n < q; ++n) {
            var r = o[n];
            if (r.valid) {
              var t = K.fontAtlas.getLetter(r.hash);
              l.height = t.h;
              l.width = t.w;
              l.x = t.u;
              l.y = t.v;
              var w = r.y + v;
              if (ka > 0) {
                if (w > Y) {
                  var x = w - Y;
                  l.y += x;
                  l.height -= x;
                  w -= x;
                }
                if (w - t.h * $ < Z && ha === J.CLAMP) {
                  l.height = w < Z ? 0 : (w - Z) / $;
                }
              }
              var z = r.line;
              var A = r.x + t.w / 2 * $ + Q[z];
              if (ja > 0 && this._isHorizontalClamped(A, z)) {
                if (ha === J.CLAMP) {
                  l.width = 0;
                } else if (ha === J.SHRINK) {
                  if (aa.width > t.w) {
                    k = false;
                    break;
                  }
                  l.width = 0;
                }
              }
              if (l.height > 0 && l.width > 0) {
                var B = this._determineRect(l);
                var C = r.x + Q[r.line] + ma;
                this.appendQuad(u, c, l, B, C - i, w - j + na, $);
              }
            }
          }
          this._quadsUpdated(u);
          return k;
        };
        m._determineRect = function (b) {
          var c = _.isRotated();
          var d = _._originalSize;
          var e = _._rect;
          var f = _._offset;
          var g = f.x + (d.width - e.width) / 2;
          var h = f.y - (d.height - e.height) / 2;
          if (c) {
            var a = b.x;
            b.x = e.x + e.height - b.y - b.height - h;
            b.y = a + e.y - g;
            if (b.y < 0) {
              b.height = b.height + h;
            }
          } else {
            b.x += e.x - g;
            b.y += e.y + h;
          }
          return c;
        };
        m._computeAlignmentOffset = function () {
          Q.length = 0;
          switch (da) {
            case a.TextAlignment.LEFT:
              for (var b = 0; b < W; ++b) {
                Q.push(0);
              }
              break;
            case a.TextAlignment.CENTER:
              for (var c = 0, f = d.length; c < f; c++) {
                Q.push((aa.width - d[c]) / 2);
              }
              break;
            case a.TextAlignment.RIGHT:
              for (var g = 0, h = d.length; g < h; g++) {
                Q.push(aa.width - d[g]);
              }
          }
          v = aa.height;
          if (ea !== a.VerticalTextAlignment.TOP) {
            var i = aa.height - X + ga * this._getFontScale() - ca * $;
            if (ea === a.VerticalTextAlignment.BOTTOM) {
              v -= i;
            } else {
              v -= i / 2;
            }
          }
        };
        m._setupBMFontOverflowMetrics = function () {
          var a = aa.width;
          var b = aa.height;
          if (ha === J.RESIZE_HEIGHT) {
            b = 0;
          }
          if (ha === J.NONE) {
            a = 0;
            b = 0;
          }
          ja = a;
          ka = b;
          la = a;
        };
        m.updateWorldVerts = function () {};
        m.appendQuad = function () {};
        m._quadsUpdated = function () {};
        m._reserveQuads = function () {};
        return k;
      }(t.default);
      e.default = oa;
      q.exports = e.default;
    }, {
      "../../../components/CCLabel": 102,
      "../../../platform/CCMacro": 167,
      "../../../utils/text-utils": 243,
      "../../assembler-2d": 188,
      "../utils": 201
    }],
    198: [function (a, b) {
      "use strict";
  
      function c() {
        this._rect = null;
        this.uv = [];
        this._texture = null;
        this._original = null;
      }
      c.prototype = {
        constructor: c,
        getRect: function () {
          return cc.rect(this._rect);
        },
        setRect: function (a) {
          this._rect = a;
          if (this._texture) {
            this._calculateUV();
          }
        },
        _setDynamicAtlasFrame: function (a) {
          if (a) {
            this._original = {
              _texture: this._texture,
              _x: this._rect.x,
              _y: this._rect.y
            };
            this._texture = a.texture;
            this._rect.x = a.x;
            this._rect.y = a.y;
            this._calculateUV();
          }
        },
        _resetDynamicAtlasFrame: function () {
          if (this._original) {
            this._rect.x = this._original._x;
            this._rect.y = this._original._y;
            this._texture = this._original._texture;
            this._original = null;
            this._calculateUV();
          }
        },
        _refreshTexture: function (a) {
          this._texture = a;
          this._rect = cc.rect(0, 0, a.width, a.height);
          this._calculateUV();
        },
        _calculateUV: function () {
          var b = this._rect;
          var d = this._texture;
          var e = this.uv;
          var f = d.width;
          var g = d.height;
          var h = f === 0 ? 0 : b.x / f;
          var i = f === 0 ? 0 : (b.x + b.width) / f;
          var a = g === 0 ? 0 : (b.y + b.height) / g;
          var j = g === 0 ? 0 : b.y / g;
          e[0] = h;
          e[1] = a;
          e[2] = i;
          e[3] = a;
          e[4] = h;
          e[5] = j;
          e[6] = i;
          e[7] = j;
        }
      };
      b.exports = c;
    }, {}],
    199: [function (b, j, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var i;
      var k = (i = b("../../webgl/assemblers/label/2d/bmfont")) && i.__esModule ? i : {
        default: i
      };
      function q(a, b) {
        return (q = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      var r = b("../../../components/CCLabel");
      var a = b("../../../components/CCLabelOutline");
      var w = b("../../../utils/text-utils");
      var c = b("../../../components/CCComponent");
      var l = b("../../../assets/CCRenderTexture");
      var h = cc.js.isChildClassOf(a, c);
      var o = b("../utils").getFontFamily;
      var f = b("../utils").shareLabelInfo;
      var d = cc.BitmapFont.FontLetterDefinition;
      var u = cc.BitmapFont.FontAtlas;
      var p = cc.Color.WHITE;
      var v = 0;
      function g(a, b) {
        this._texture = null;
        this._labelInfo = b;
        this._char = a;
        this._hash = null;
        this._data = null;
        this._canvas = null;
        this._context = null;
        this._width = 0;
        this._height = 0;
        this._offsetY = 0;
        this._hash = a.charCodeAt(0) + b.hash;
      }
      function m(a, b) {
        var c = new l();
        c.initWithSize(a, b);
        c.update();
        this._fontDefDictionary = new u(c);
        this._x = v;
        this._y = v;
        this._nexty = v;
        this._width = a;
        this._height = b;
        cc.director.on(cc.Director.EVENT_BEFORE_SCENE_LAUNCH, this.beforeSceneLoad, this);
      }
      g.prototype = {
        constructor: g,
        updateRenderData: function () {
          this._updateProperties();
          this._updateTexture();
        },
        _updateProperties: function () {
          this._texture = new cc.Texture2D();
          this._data = r._canvasPool.get();
          this._canvas = this._data.canvas;
          this._context = this._data.context;
          this._context.font = this._labelInfo.fontDesc;
          var a = w.safeMeasureText(this._context, this._char, this._labelInfo.fontDesc);
          var b = this._labelInfo.margin * 2 + 2;
          this._width = parseFloat(a.toFixed(2)) + b;
          this._height = (1 + w.BASELINE_RATIO) * this._labelInfo.fontSize + b;
          this._offsetY = -this._labelInfo.fontSize * w.BASELINE_RATIO / 2;
          if (this._canvas.width !== this._width) {
            this._canvas.width = this._width;
          }
          if (this._canvas.height !== this._height) {
            this._canvas.height = this._height;
          }
          this._texture.initWithElement(this._canvas);
        },
        _updateTexture: function () {
          var b = this._context;
          var c = this._labelInfo;
          var d = this._canvas.width;
          var e = this._canvas.height;
          var f = this._labelInfo.fontSize;
          var g = d / 2;
          var h = e / 2 + f * w.MIDDLE_RATIO + f * w.BASELINE_OFFSET;
          var a = c.color;
          b.lineJoin = "round";
          b.textAlign = "center";
          b.clearRect(0, 0, d, e);
          b.fillStyle = "rgba(" + a.r + ", " + a.g + ", " + a.b + ", 0.004)";
          b.fillRect(0, 0, d, e);
          b.font = c.fontDesc;
          b.fillStyle = "rgba(" + a.r + ", " + a.g + ", " + a.b + ", 1)";
          if (c.isOutlined && c.margin > 0) {
            var i = c.out || p;
            b.strokeStyle = "rgba(" + i.r + ", " + i.g + ", " + i.b + ", " + i.a / 255 + ")";
            b.lineWidth = c.margin * 2;
            b.strokeText(this._char, g, h);
          }
          b.fillText(this._char, g, h);
          this._texture.handleLoadedTexture();
        },
        destroy: function () {
          this._texture.destroy();
          this._texture = null;
          r._canvasPool.put(this._data);
        }
      };
      cc.js.mixin(m.prototype, {
        insertLetterTexture: function (a) {
          var b = a._texture;
          var c = b.width;
          var e = b.height;
          if (this._x + c + v > this._width) {
            this._x = v;
            this._y = this._nexty;
          }
          if (this._y + e > this._nexty) {
            this._nexty = this._y + e + v;
          }
          if (this._nexty > this._height) {
            return null;
          }
          this._fontDefDictionary._texture.drawTextureAt(b, this._x, this._y);
          this._dirty = true;
          var f = new d();
          f.u = this._x + 1;
          f.v = this._y + 1;
          f.texture = this._fontDefDictionary._texture;
          f.valid = true;
          f.w = a._width - 2;
          f.h = a._height - 2;
          f.xAdvance = f.w;
          f.offsetY = a._offsetY;
          this._x += c + v;
          this._fontDefDictionary.addLetterDefinitions(a._hash, f);
          return f;
        },
        update: function () {
          if (this._dirty) {
            this._fontDefDictionary._texture.update();
            this._dirty = false;
          }
        },
        reset: function () {
          this._x = v;
          this._y = v;
          this._nexty = v;
          for (var a = this._fontDefDictionary._letterDefinitions, b = 0, c = a.length; b < c; b++) {
            var d = a[b];
            if (d.isValid) {
              d.destroy();
            }
          }
          this._fontDefDictionary.clear();
        },
        destroy: function () {
          this.reset();
          this._fontDefDictionary._texture.destroy();
          this._fontDefDictionary._texture = null;
        },
        beforeSceneLoad: function () {
          this.clearAllCache();
        },
        clearAllCache: function () {
          this.destroy();
          var a = new l();
          a.initWithSize(this._width, this._height);
          a.update();
          this._fontDefDictionary._texture = a;
        },
        getLetter: function (a) {
          return this._fontDefDictionary._letterDefinitions[a];
        },
        getTexture: function () {
          return this._fontDefDictionary.getTexture();
        },
        getLetterDefinitionForChar: function (a, b) {
          var c = a.charCodeAt(0) + b.hash;
          var d = this._fontDefDictionary._letterDefinitions[c];
          if (!d) {
            var e = new g(a, b);
            e.updateRenderData();
            d = this.insertLetterTexture(e);
            e.destroy();
          }
          return d;
        }
      });
      var x = null;
      var t = function (b) {
        var c;
        var d;
        function g() {
          return b.apply(this, arguments) || this;
        }
        d = b;
        (c = g).prototype = Object.create(d.prototype);
        c.prototype.constructor = c;
        q(c, d);
        var j = g.prototype;
        j._getAssemblerData = function () {
          if (!x) {
            x = new m(2048, 2048);
            cc.Label._shareAtlas = x;
          }
          return x.getTexture();
        };
        j._updateFontFamily = function (b) {
          f.fontAtlas = x;
          f.fontFamily = o(b);
          var c = h && b.getComponent(a);
          if (c && c.enabled) {
            f.isOutlined = true;
            f.margin = c.width;
            f.out = c.color.clone();
            f.out.a = c.color.a * b.node.color.a / 255;
          } else {
            f.isOutlined = false;
            f.margin = 0;
          }
        };
        j._updateLabelInfo = function (a) {
          var b;
          var c;
          var d;
          f.fontDesc = this._getFontDesc();
          f.color = a.node.color;
          c = (b = f).color.toHEX();
          d = "";
          if (b.isOutlined && b.margin > 0) {
            d = d + b.margin + b.out.toHEX();
          }
          f.hash = "" + b.fontSize + b.fontFamily + c + d + b.actualLineHeight;
        };
        j._getFontDesc = function () {
          return f.fontSize.toString() + "px " + f.fontFamily;
        };
        j._computeHorizontalKerningForText = function () {};
        j._determineRect = function () {
          return false;
        };
        return g;
      }(k.default);
      e.default = t;
      j.exports = e.default;
    }, {
      "../../../assets/CCRenderTexture": 65,
      "../../../components/CCComponent": 100,
      "../../../components/CCLabel": 102,
      "../../../components/CCLabelOutline": 103,
      "../../../utils/text-utils": 243,
      "../../webgl/assemblers/label/2d/bmfont": 206,
      "../utils": 201
    }],
    200: [function (J, t, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var i;
      var K = (i = J("../../assembler-2d")) && i.__esModule ? i : {
        default: i
      };
      function Q(a, b) {
        return (Q = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      var r;
      var Z = J("../../../utils/text-utils");
      var o = J("../../../platform/CCMacro");
      var c = J("../../../components/CCLabel");
      var l = J("../../../components/CCLabelOutline");
      var h = J("../../../components/CCLabelShadow");
      var u = c.Overflow;
      var f = J("../utils").deleteFromDynamicAtlas;
      var d = J("../utils").getFontFamily;
      var $ = null;
      var _ = null;
      var aa = null;
      var ba = "";
      var ca = "";
      var da = 0;
      var ea = 0;
      var fa = [];
      var ga = cc.Size.ZERO;
      var x = 0;
      var ha = 0;
      var ia = 0;
      var ja = null;
      var ka = "";
      var la = u.NONE;
      var ma = false;
      var na = false;
      var oa = 0;
      var pa = 0;
      var qa = null;
      var ra = cc.Color.WHITE;
      var N = null;
      var sa = cc.Color.BLACK;
      var B = cc.rect();
      var V = cc.Size.ZERO;
      var k = cc.Size.ZERO;
      var ta = false;
      var ua = false;
      var va = false;
      var wa = 0;
      var xa = cc.Vec2.ZERO;
      var X = 0;
      var ya = ["left", "center", "right"];
      var j = function (a) {
        var b;
        var g;
        function j() {
          return a.apply(this, arguments) || this;
        }
        g = a;
        (b = j).prototype = Object.create(g.prototype);
        b.prototype.constructor = b;
        Q(b, g);
        var m = j.prototype;
        m._getAssemblerData = function () {
          (r = c._canvasPool.get()).canvas.width = r.canvas.height = 1;
          return r;
        };
        m._resetAssemblerData = function (a) {
          if (a) {
            c._canvasPool.put(a);
          }
        };
        m.updateRenderData = function (b) {
          a.prototype.updateRenderData.call(this, b);
          if (b._vertsDirty) {
            this._updateProperties(b);
            this._calculateLabelFont();
            this._updateLabelDimensions();
            this._updateTexture(b);
            this._calDynamicAtlas(b);
            b._actualFontSize = da;
            b.node.setContentSize(k);
            this.updateVerts(b);
            b._vertsDirty = false;
            $ = null;
            _ = null;
            aa = null;
          }
        };
        m.updateVerts = function () {};
        m._updatePaddingRect = function () {
          var b = 0;
          var c = 0;
          var d = 0;
          var f = 0;
          var g = 0;
          V.width = V.height = 0;
          if (qa) {
            b = c = d = f = g = qa.width;
            V.width = V.height = g * 2;
          }
          if (N) {
            var h = N.blur + g;
            d = Math.max(d, -N._offset.x + h);
            f = Math.max(f, N._offset.x + h);
            b = Math.max(b, N._offset.y + h);
            c = Math.max(c, -N._offset.y + h);
          }
          if (ua) {
            var j = ea * 0.21255656141989004;
            f += j;
            V.width += j;
          }
          B.x = d;
          B.y = b;
          B.width = d + f;
          B.height = b + c;
        };
        m._updateProperties = function (a) {
          var b = a._assemblerData;
          $ = b.context;
          _ = b.canvas;
          aa = a._frame._original ? a._frame._original._texture : a._frame._texture;
          ca = a.string.toString();
          da = a._fontSize;
          ea = da;
          wa = a.underlineHeight || ea / 8;
          la = a.overflow;
          ga.width = a.node.width;
          ga.height = a.node.height;
          k = a.node.getContentSize();
          x = a._lineHeight;
          ha = a.horizontalAlign;
          ia = a.verticalAlign;
          ja = a.node.color;
          ta = a.enableBold;
          ua = a.enableItalic;
          va = a.enableUnderline;
          ka = d(a);
          na = a.srcBlendFactor === cc.macro.BlendFactor.ONE;
          oa = a._customOffsetX;
          pa = a._customOffsetY;
          ma = la !== u.NONE && (la === u.RESIZE_HEIGHT || a.enableWrapText);
          if (qa = (qa = l && a.getComponent(l)) && qa.enabled && qa.width > 0 ? qa : null) {
            ra.set(qa.color);
          }
          if (N = (N = h && a.getComponent(h)) && N.enabled ? N : null) {
            sa.set(N.color);
            sa.a = sa.a * a.node.color.a / 255;
          }
          this._updatePaddingRect();
        };
        m._calculateFillTextStartPosition = function () {
          var a = 0;
          if (ha === o.TextAlignment.RIGHT) {
            a = ga.width - B.width;
          } else if (ha === o.TextAlignment.CENTER) {
            a = (ga.width - B.width) / 2;
          }
          var b = this._getLineHeight();
          fa.length;
          var c = b * (fa.length - 1);
          var d = da * (1 - Z.BASELINE_RATIO / 2);
          if (ia !== o.VerticalTextAlignment.TOP) {
            var e = c + B.height + da - ga.height;
            if (ia === o.VerticalTextAlignment.BOTTOM) {
              d -= e += Z.BASELINE_RATIO / 2 * da;
            } else {
              d -= e / 2;
            }
          }
          d += Z.BASELINE_OFFSET * da;
          return cc.v2(a + B.x + oa, d + B.y + pa);
        };
        m._setupOutline = function () {
          $.strokeStyle = "rgba(" + ra.r + ", " + ra.g + ", " + ra.b + ", " + ra.a / 255 + ")";
          $.lineWidth = qa.width * 2;
        };
        m._setupShadow = function () {
          $.shadowColor = "rgba(" + sa.r + ", " + sa.g + ", " + sa.b + ", " + sa.a / 255 + ")";
          $.shadowBlur = N.blur;
          $.shadowOffsetX = N.offset.x;
          $.shadowOffsetY = -N.offset.y;
        };
        m._drawTextEffect = function (b, c) {
          if (N || qa || va) {
            var d = fa.length > 1 && N;
            var e = this._measureText($, ba);
            var f = 0;
            var g = 0;
            if (N) {
              this._setupShadow();
            }
            if (qa) {
              this._setupOutline();
            }
            for (var h = 0; h < fa.length; ++h) {
              f = b.x;
              g = b.y + h * c;
              if (d) {
                if (qa) {
                  $.strokeText(fa[h], f, g);
                }
                $.fillText(fa[h], f, g);
              }
              if (va) {
                X = e(fa[h]);
                if (ha === o.TextAlignment.RIGHT) {
                  xa.x = b.x - X;
                } else if (ha === o.TextAlignment.CENTER) {
                  xa.x = b.x - X / 2;
                } else {
                  xa.x = b.x;
                }
                xa.y = g + ea / 8;
                $.fillRect(xa.x, xa.y, X, wa);
              }
            }
            if (d) {
              $.shadowColor = "transparent";
            }
          }
        };
        m._updateTexture = function () {
          $.clearRect(0, 0, _.width, _.height);
          $.lineJoin = "round";
          if (na) {
            $.fillStyle = "rgba(" + ja.r + ", " + ja.g + ", " + ja.b + ", " + ja.a / 255 + ")";
          } else {
            var a = qa ? ra : ja;
            $.fillStyle = "rgba(" + a.r + ", " + a.g + ", " + a.b + ", 0.004)";
            $.fillRect(0, 0, _.width, _.height);
            $.fillStyle = "rgba(" + ja.r + ", " + ja.g + ", " + ja.b + ", 1)";
          }
          var b = this._calculateFillTextStartPosition();
          var c = this._getLineHeight();
          var d = b.x;
          var e = 0;
          this._drawTextEffect(b, c);
          for (var f = 0; f < fa.length; ++f) {
            e = b.y + f * c;
            if (qa) {
              $.strokeText(fa[f], d, e);
            }
            $.fillText(fa[f], d, e);
          }
          if (N) {
            $.shadowColor = "transparent";
          }
          aa.handleLoadedTexture();
        };
        m._calDynamicAtlas = function (a) {
          if (a.cacheMode === c.CacheMode.BITMAP) {
            var b = a._frame;
            f(a, b);
            if (!b._original) {
              b.setRect(cc.rect(0, 0, _.width, _.height));
            }
            this.packToDynamicAtlas(a, b);
          }
        };
        m._updateLabelDimensions = function () {
          var a = cc.renderer.device.caps ? cc.renderer.device.caps.maxTextureSize : 2048;
          if (!(ga.width > a)) {
            ga.height;
          }
          ga.width = Math.min(ga.width, a);
          ga.height = Math.min(ga.height, a);
          var b = false;
          if (_.width !== ga.width) {
            _.width = ga.width;
            b = true;
          }
          if (_.height !== ga.height) {
            _.height = ga.height;
            b = true;
          }
          if (b) {
            $.font = ba;
          }
          $.textAlign = ya[ha];
          if (Z.isUnicodeRTL(ca)) {
            $.direction = "rtl";
          }
        };
        m._getFontDesc = function () {
          var a = da.toString() + "px ";
          a += ka;
          if (ta) {
            a = "bold " + a;
          }
          if (ua) {
            a = "italic " + a;
          }
          return a;
        };
        m._getLineHeight = function () {
          return (x === 0 ? da : x * da / ea) | 0;
        };
        m._calculateParagraphLength = function (a, b) {
          for (var c = [], d = 0; d < a.length; ++d) {
            var e = Z.safeMeasureText(b, a[d], ba);
            c.push(e);
          }
          return c;
        };
        m._measureText = function (a, b) {
          return function (c) {
            return Z.safeMeasureText(a, c, b);
          };
        };
        m._calculateShrinkFont = function (b) {
          var g = this._calculateParagraphLength(b, $);
          var e = 0;
          var j = 0;
          var m = 0;
          if (ma) {
            var o = k.width;
            var p = k.height;
            if (o < 0 || p < 0) {
              return;
            }
            j = p + 1;
            for (var a = 0, q = da + 1 | 0, s = 0; a < q && !((s = a + q + 1 >> 1) <= 0);) {
              da = s;
              ba = this._getFontDesc();
              $.font = ba;
              var t = this._getLineHeight();
              j = 0;
              e = 0;
              for (; e < b.length; ++e) {
                var v = Z.safeMeasureText($, b[e], ba);
                j += Z.fragmentText(b[e], v, o, this._measureText($, ba)).length * t;
              }
              if (j > p) {
                q = s - 1;
              } else {
                a = s;
              }
            }
            if (!(a === 0)) {
              da = a;
              ba = this._getFontDesc();
              $.font = ba;
            }
          } else {
            j = b.length * this._getLineHeight();
            e = 0;
            for (; e < b.length; ++e) {
              if (m < g[e]) {
                m = g[e];
              }
            }
            var w = (ga.width - B.width) / m;
            var d = ga.height / j;
            da = ea * Math.min(1, w, d) | 0;
            ba = this._getFontDesc();
            $.font = ba;
          }
        };
        m._calculateWrapText = function (a) {
          if (ma) {
            fa = [];
            for (var b = k.width, c = 0; c < a.length; ++c) {
              var d = Z.safeMeasureText($, a[c], ba);
              var e = Z.fragmentText(a[c], d, b, this._measureText($, ba));
              fa = fa.concat(e);
            }
          }
        };
        m._calculateLabelFont = function () {
          var b = ca.split("\n");
          fa = b;
          ba = this._getFontDesc();
          $.font = ba;
          switch (la) {
            case u.NONE:
              for (var d = 0, f = 0, g = 0; g < b.length; ++g) {
                var h = Z.safeMeasureText($, b[g], ba);
                d = d > h ? d : h;
              }
              f = (fa.length + Z.BASELINE_RATIO) * this._getLineHeight();
              var j = parseFloat(d.toFixed(2));
              var l = parseFloat(f.toFixed(2));
              ga.width = j + B.width;
              ga.height = l + B.height;
              k.width = j + V.width;
              k.height = l + V.height;
              break;
            case u.SHRINK:
              this._calculateShrinkFont(b);
              this._calculateWrapText(b);
              break;
            case u.CLAMP:
              this._calculateWrapText(b);
              break;
            case u.RESIZE_HEIGHT:
              this._calculateWrapText(b);
              var a = (fa.length + Z.BASELINE_RATIO) * this._getLineHeight();
              ga.height = a + B.height;
              k.height = a + V.height;
          }
        };
        m._calculateSplitedStrings = function (a) {
          if (!ma) {
            fa = [];
            for (var b = k.width, c = 0; c < a.length; ++c) {
              var d = a[c];
              var e = Z.safeMeasureText($, a[c], ba);
              if (e > b) {
                d = (d = d.substring(0, d.length * (b / e) | 0)).slice(0, -2) + "…";
              }
              fa = fa.concat(d);
            }
          }
        };
        return j;
      }(K.default);
      e.default = j;
      t.exports = e.default;
    }, {
      "../../../components/CCLabel": 102,
      "../../../components/CCLabelOutline": 103,
      "../../../components/CCLabelShadow": 104,
      "../../../platform/CCMacro": 167,
      "../../../utils/text-utils": 243,
      "../../assembler-2d": 188,
      "../utils": 201
    }],
    201: [function (a, b) {
      "use strict";
  
      var c = a("./dynamic-atlas/manager");
      var d = cc.Color.WHITE;
      var e = {
        fontAtlas: null,
        fontSize: 0,
        lineHeight: 0,
        hAlign: 0,
        vAlign: 0,
        actualLineHeight: 0,
        hash: "",
        fontFamily: "",
        fontDesc: "Arial",
        color: d,
        isOutlined: false,
        out: d,
        margin: 0
      };
      b.exports = {
        deleteFromDynamicAtlas: function (a, b) {
          if (b && b._original && c) {
            c.deleteAtlasSpriteFrame(b);
            b._resetDynamicAtlasFrame();
          }
        },
        getFontFamily: function (a) {
          if (a.useSystemFont) {
            return a.fontFamily || "Arial";
          } else if (a.font) {
            if (a.font._nativeAsset) {
              return a.font._nativeAsset;
            } else {
              cc.assetManager.postLoadNative(a.font, function () {
                if (a.isValid) {
                  a.setVertsDirty();
                }
              });
              return "Arial";
            }
          } else {
            return "Arial";
          }
        },
        shareLabelInfo: e
      };
    }, {
      "./dynamic-atlas/manager": 196
    }],
    202: [function (j, k) {
      "use strict";
  
      function e(b, h, e) {
        e = e || 2;
        var j;
        var k;
        var m;
        var n;
        var s;
        var t;
        var w;
        var x = h && h.length;
        var d = x ? h[0] * e : b.length;
        var y = q(b, 0, d, e, true);
        var z = [];
        if (!y) {
          return z;
        }
        if (x) {
          y = l(b, h, y, e);
        }
        if (b.length > e * 80) {
          j = m = b[0];
          k = n = b[1];
          for (var v = e; v < d; v += e) {
            if ((s = b[v]) < j) {
              j = s;
            }
            if ((t = b[v + 1]) < k) {
              k = t;
            }
            if (s > m) {
              m = s;
            }
            if (t > n) {
              n = t;
            }
          }
          w = Math.max(m - j, n - k);
        }
        B(y, z, e, j, k, w);
        return z;
      }
      function q(b, c, d, e, f) {
        var g;
        var h;
        if (f === w(b, c, d, e) > 0) {
          for (g = c; g < d; g += e) {
            h = D(g, b[g], b[g + 1], h);
          }
        } else {
          for (g = d - e; g >= c; g -= e) {
            h = D(g, b[g], b[g + 1], h);
          }
        }
        if (h && u(h, h.next)) {
          E(h);
          h = h.next;
        }
        return h;
      }
      function z(a, b) {
        if (!a) {
          return a;
        }
        if (!b) {
          b = a;
        }
        var c;
        var d = a;
        do {
          c = false;
          if (d.steiner || !u(d, d.next) && v(d.prev, d, d.next) !== 0) {
            d = d.next;
          } else {
            E(d);
            if ((d = b = d.prev) === d.next) {
              return null;
            }
            c = true;
          }
        } while (c || d !== b);
        return b;
      }
      function B(b, g, e, i, j, h, k) {
        if (b) {
          if (!k && h) {
            d(b, i, j, h);
          }
          for (var f, l, m = b; b.prev !== b.next;) {
            f = b.prev;
            l = b.next;
            if (h ? a(b, i, j, h) : r(b)) {
              g.push(f.i / e);
              g.push(b.i / e);
              g.push(l.i / e);
              E(b);
              b = l.next;
              m = l.next;
            } else if ((b = l) === m) {
              if (k) {
                if (k === 1) {
                  B(b = o(b, g, e), g, e, i, j, h, 2);
                } else if (k === 2) {
                  c(b, g, e, i, j, h);
                }
              } else {
                B(z(b), g, e, i, j, h, 1);
              }
              break;
            }
          }
        }
      }
      function r(a) {
        var b = a.prev;
        var c = a;
        var d = a.next;
        if (v(b, c, d) >= 0) {
          return false;
        }
        for (var e = a.next.next; e !== a.prev;) {
          if (g(b.x, b.y, c.x, c.y, d.x, d.y, e.x, e.y) && v(e.prev, e, e.next) >= 0) {
            return false;
          }
          e = e.next;
        }
        return true;
      }
      function a(b, j, e, i) {
        var k = b.prev;
        var m = b;
        var n = b.next;
        if (v(k, m, n) >= 0) {
          return false;
        }
        for (var a = k.x < m.x ? k.x < n.x ? k.x : n.x : m.x < n.x ? m.x : n.x, o = k.y < m.y ? k.y < n.y ? k.y : n.y : m.y < n.y ? m.y : n.y, c = k.x > m.x ? k.x > n.x ? k.x : n.x : m.x > n.x ? m.x : n.x, l = k.y > m.y ? k.y > n.y ? k.y : n.y : m.y > n.y ? m.y : n.y, h = p(a, o, j, e, i), q = p(c, l, j, e, i), f = b.nextZ; f && f.z <= q;) {
          if (f !== b.prev && f !== b.next && g(k.x, k.y, m.x, m.y, n.x, n.y, f.x, f.y) && v(f.prev, f, f.next) >= 0) {
            return false;
          }
          f = f.nextZ;
        }
        for (f = b.prevZ; f && f.z >= h;) {
          if (f !== b.prev && f !== b.next && g(k.x, k.y, m.x, m.y, n.x, n.y, f.x, f.y) && v(f.prev, f, f.next) >= 0) {
            return false;
          }
          f = f.prevZ;
        }
        return true;
      }
      function o(a, b, c) {
        var d = a;
        do {
          var e = d.prev;
          var f = d.next.next;
          if (!u(e, f) && y(e, d, d.next, f) && x(e, f) && x(f, e)) {
            b.push(e.i / c);
            b.push(d.i / c);
            b.push(f.i / c);
            E(d);
            E(d.next);
            d = a = f;
          }
          d = d.next;
        } while (d !== a);
        return d;
      }
      function c(d, f, e, g, i, a) {
        var j = d;
        do {
          for (var k = j.next.next; k !== j.prev;) {
            if (j.i !== k.i && m(j, k)) {
              var n = b(j, k);
              j = z(j, j.next);
              n = z(n, n.next);
              B(j, f, e, g, i, a);
              B(n, f, e, g, i, a);
              return;
            }
            k = k.next;
          }
          j = j.next;
        } while (j !== d);
      }
      function l(b, d, e, f) {
        var g;
        var j;
        var k;
        var m = [];
        g = 0;
        j = d.length;
        for (; g < j; g++) {
          if ((k = q(b, d[g] * f, g < j - 1 ? d[g + 1] * f : b.length, f, false)) === k.next) {
            k.steiner = true;
          }
          m.push(i(k));
        }
        m.sort(h);
        g = 0;
        for (; g < m.length; g++) {
          n(m[g], e);
          e = z(e, e.next);
        }
        return e;
      }
      function h(a, b) {
        return a.x - b.x;
      }
      function n(a, c) {
        if (c = f(a, c)) {
          var d = b(c, a);
          z(d, d.next);
        }
      }
      function f(b, d) {
        var e;
        var j = d;
        var k = b.x;
        var m = b.y;
        var p = -Infinity;
        do {
          if (m <= j.y && m >= j.next.y) {
            var q = j.x + (m - j.y) * (j.next.x - j.x) / (j.next.y - j.y);
            if (q <= k && q > p) {
              p = q;
              if (q === k) {
                if (m === j.y) {
                  return j;
                }
                if (m === j.next.y) {
                  return j.next;
                }
              }
              e = j.x < j.next.x ? j : j.next;
            }
          }
          j = j.next;
        } while (j !== d);
        if (!e) {
          return null;
        }
        if (k === p) {
          return e.prev;
        }
        var r;
        var s = e;
        var l = e.x;
        var h = e.y;
        var t = Infinity;
        for (j = e.next; j !== s;) {
          if (k >= j.x && j.x >= l && g(m < h ? k : p, m, l, h, m < h ? p : k, m, j.x, j.y) && ((r = Math.abs(m - j.y) / (k - j.x)) < t || r === t && j.x > e.x) && x(j, b)) {
            e = j;
            t = r;
          }
          j = j.next;
        }
        return e;
      }
      function d(a, b, c, d) {
        var e = a;
        do {
          if (e.z === null) {
            e.z = p(e.x, e.y, b, c, d);
          }
          e.prevZ = e.prev;
          e.nextZ = e.next;
          e = e.next;
        } while (e !== a);
        e.prevZ.nextZ = null;
        e.prevZ = null;
        s(e);
      }
      function s(b) {
        var d;
        var f;
        var g;
        var h;
        var j;
        var k;
        var m;
        var p;
        var q = 1;
        do {
          f = b;
          b = null;
          j = null;
          k = 0;
          for (; f;) {
            k++;
            g = f;
            m = 0;
            d = 0;
            for (; d < q && (m++, g = g.nextZ); d++);
            for (p = q; m > 0 || p > 0 && g;) {
              if (m === 0) {
                h = g;
                g = g.nextZ;
                p--;
              } else if (p !== 0 && g) {
                if (f.z <= g.z) {
                  h = f;
                  f = f.nextZ;
                  m--;
                } else {
                  h = g;
                  g = g.nextZ;
                  p--;
                }
              } else {
                h = f;
                f = f.nextZ;
                m--;
              }
              if (j) {
                j.nextZ = h;
              } else {
                b = h;
              }
              h.prevZ = j;
              j = h;
            }
            f = g;
          }
          j.nextZ = null;
          q *= 2;
        } while (k > 1);
        return b;
      }
      function p(a, b, c, d, f) {
        return (a = ((a = ((a = ((a = ((a = (a - c) * 32767 / f) | a << 8) & 16711935) | a << 4) & 252645135) | a << 2) & 858993459) | a << 1) & 1431655765) | (b = ((b = ((b = ((b = ((b = (b - d) * 32767 / f) | b << 8) & 16711935) | b << 4) & 252645135) | b << 2) & 858993459) | b << 1) & 1431655765) << 1;
      }
      function i(a) {
        var b = a;
        var c = a;
        do {
          if (b.x < c.x) {
            c = b;
          }
          b = b.next;
        } while (b !== a);
        return c;
      }
      function g(b, c, d, e, f, g, h, a) {
        return (f - h) * (c - a) - (b - h) * (g - a) >= 0 && (b - h) * (e - a) - (d - h) * (c - a) >= 0 && (d - h) * (g - a) - (f - h) * (e - a) >= 0;
      }
      function m(a, b) {
        return a.next.i !== b.i && a.prev.i !== b.i && !A(a, b) && x(a, b) && x(b, a) && C(a, b);
      }
      function v(a, b, c) {
        return (b.y - a.y) * (c.x - b.x) - (b.x - a.x) * (c.y - b.y);
      }
      function u(a, b) {
        return a.x === b.x && a.y === b.y;
      }
      function y(a, b, c, d) {
        return !!(u(a, b) && u(c, d) || u(a, d) && u(c, b)) || v(a, b, c) > 0 != v(a, b, d) > 0 && v(c, d, a) > 0 != v(c, d, b) > 0;
      }
      function A(a, b) {
        var c = a;
        do {
          if (c.i !== a.i && c.next.i !== a.i && c.i !== b.i && c.next.i !== b.i && y(c, c.next, a, b)) {
            return true;
          }
          c = c.next;
        } while (c !== a);
        return false;
      }
      function x(a, b) {
        if (v(a.prev, a, a.next) < 0) {
          return v(a, b, a.next) >= 0 && v(a, a.prev, b) >= 0;
        } else {
          return v(a, b, a.prev) < 0 || v(a, a.next, b) < 0;
        }
      }
      function C(a, b) {
        var c = a;
        var d = false;
        var e = (a.x + b.x) / 2;
        var f = (a.y + b.y) / 2;
        do {
          if (c.y > f != c.next.y > f && e < (c.next.x - c.x) * (f - c.y) / (c.next.y - c.y) + c.x) {
            d = !d;
          }
          c = c.next;
        } while (c !== a);
        return d;
      }
      function b(a, b) {
        var c = new F(a.i, a.x, a.y);
        var d = new F(b.i, b.x, b.y);
        var e = a.next;
        var f = b.prev;
        a.next = b;
        b.prev = a;
        c.next = e;
        e.prev = c;
        d.next = c;
        c.prev = d;
        f.next = d;
        d.prev = f;
        return d;
      }
      function D(a, b, c, d) {
        var e = new F(a, b, c);
        if (d) {
          e.next = d.next;
          e.prev = d;
          d.next.prev = e;
          d.next = e;
        } else {
          e.prev = e;
          e.next = e;
        }
        return e;
      }
      function E(a) {
        a.next.prev = a.prev;
        a.prev.next = a.next;
        if (a.prevZ) {
          a.prevZ.nextZ = a.nextZ;
        }
        if (a.nextZ) {
          a.nextZ.prevZ = a.prevZ;
        }
      }
      function F(a, b, c) {
        this.i = a;
        this.x = b;
        this.y = c;
        this.prev = null;
        this.next = null;
        this.z = null;
        this.prevZ = null;
        this.nextZ = null;
        this.steiner = false;
      }
      function w(b, c, d, e) {
        for (var f = 0, g = c, h = d - e; g < d; g += e) {
          f += (b[h] - b[g]) * (b[g + 1] + b[h + 1]);
          h = g;
        }
        return f;
      }
      cc.Graphics.earcut = k.exports = e;
      e.deviation = function (b, g, e, i) {
        var j = g && g.length;
        var k = j ? g[0] * e : b.length;
        var m = Math.abs(w(b, 0, k, e));
        if (j) {
          for (var n = 0, p = g.length; n < p; n++) {
            var c = g[n] * e;
            var q = n < p - 1 ? g[n + 1] * e : b.length;
            m -= Math.abs(w(b, c, q, e));
          }
        }
        var r = 0;
        for (n = 0; n < i.length; n += 3) {
          var s = i[n] * e;
          var t = i[n + 1] * e;
          var v = i[n + 2] * e;
          r += Math.abs((b[s] - b[v]) * (b[t + 1] - b[s + 1]) - (b[s] - b[t]) * (b[v + 1] - b[s + 1]));
        }
        if (m === 0 && r === 0) {
          return 0;
        } else {
          return Math.abs((r - m) / m);
        }
      };
      e.flatten = function (b) {
        for (var c = b[0][0].length, d = {
            vertices: [],
            holes: [],
            dimensions: c
          }, e = 0, f = 0; f < b.length; f++) {
          for (var g = 0; g < b[f].length; g++) {
            for (var h = 0; h < c; h++) {
              d.vertices.push(b[f][g][h]);
            }
          }
          if (f > 0) {
            e += b[f - 1].length;
            d.holes.push(e);
          }
        }
        return d;
      };
    }, {}],
    203: [function (b, c) {
      "use strict";
  
      var d = b("../../../../graphics/graphics-point");
      var f = b("../../../../graphics/helper");
      var g = b("../../../../graphics/types").PointFlags;
      function h() {
        this.reset();
      }
      function e() {
        this._tessTol = 0.25;
        this._distTol = 0.01;
        this._updatePathOffset = false;
        this._paths = null;
        this._pathLength = 0;
        this._pathOffset = 0;
        this._points = null;
        this._pointsOffset = 0;
        this._commandx = 0;
        this._commandy = 0;
        this._paths = [];
        this._points = [];
      }
      cc.js.mixin(h.prototype, {
        reset: function () {
          this.closed = false;
          this.nbevel = 0;
          this.complex = true;
          if (this.points) {
            this.points.length = 0;
          } else {
            this.points = [];
          }
        }
      });
      cc.js.mixin(e.prototype, {
        moveTo: function (a, b) {
          if (this._updatePathOffset) {
            this._pathOffset = this._pathLength;
            this._updatePathOffset = false;
          }
          this._addPath();
          this._addPoint(a, b, g.PT_CORNER);
          this._commandx = a;
          this._commandy = b;
        },
        lineTo: function (a, b) {
          this._addPoint(a, b, g.PT_CORNER);
          this._commandx = a;
          this._commandy = b;
        },
        bezierCurveTo: function (b, d, e, h, i, a) {
          var j = this._curPath;
          var c = j.points[j.points.length - 1];
          if (c.x !== b || c.y !== d || e !== i || h !== a) {
            f.tesselateBezier(this, c.x, c.y, b, d, e, h, i, a, 0, g.PT_CORNER);
            this._commandx = i;
            this._commandy = a;
          } else {
            this.lineTo(i, a);
          }
        },
        quadraticCurveTo: function (a, b, c, d) {
          var e = this._commandx;
          var f = this._commandy;
          this.bezierCurveTo(e + 2 / 3 * (a - e), f + 2 / 3 * (b - f), c + 2 / 3 * (a - c), d + 2 / 3 * (b - d), c, d);
        },
        arc: function (b, c, d, e, g, h) {
          f.arc(this, b, c, d, e, g, h);
        },
        ellipse: function (a, b, c, d) {
          f.ellipse(this, a, b, c, d);
          this._curPath.complex = false;
        },
        circle: function (a, b, c) {
          f.ellipse(this, a, b, c, c);
          this._curPath.complex = false;
        },
        rect: function (a, b, c, d) {
          this.moveTo(a, b);
          this.lineTo(a, b + d);
          this.lineTo(a + c, b + d);
          this.lineTo(a + c, b);
          this.close();
          this._curPath.complex = false;
        },
        roundRect: function (a, b, c, d, e) {
          f.roundRect(this, a, b, c, d, e);
          this._curPath.complex = false;
        },
        clear: function (a) {
          this._pathLength = 0;
          this._pathOffset = 0;
          this._pointsOffset = 0;
          this._curPath = null;
          if (a) {
            this._paths.length = 0;
            this._points.length = 0;
          }
        },
        close: function () {
          this._curPath.closed = true;
        },
        _addPath: function () {
          var a = this._pathLength;
          var b = this._paths[a];
          if (b) {
            b.reset();
          } else {
            b = new h();
            this._paths.push(b);
          }
          this._pathLength++;
          this._curPath = b;
          return b;
        },
        _addPoint: function (b, c, e) {
          var f = this._curPath;
          if (f) {
            var g;
            var h = this._points;
            var a = f.points;
            if (g = h[this._pointsOffset++]) {
              g.x = b;
              g.y = c;
            } else {
              g = new d(b, c);
              h.push(g);
            }
            g.flags = e;
            a.push(g);
          }
        }
      });
      cc.Graphics._Impl = e;
      c.exports = e;
    }, {
      "../../../../graphics/graphics-point": 150,
      "../../../../graphics/helper": 152,
      "../../../../graphics/types": 154
    }],
    204: [function (j, k, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var i = q(j("../../../assembler"));
      var n = q(j("../../../../../renderer/core/input-assembler"));
      function q(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      function r(a, b) {
        return (r = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      var s = j("../../mesh-buffer");
      var o = j("../../../index");
      var c = j("../../../../graphics/graphics");
      var G = j("../../../../graphics/types").PointFlags;
      var h = c.LineJoin;
      var t = c.LineCap;
      var f = j("./earcut");
      j("./impl");
      var J = Math.PI;
      var d = Math.min;
      var u = Math.max;
      var v = Math.ceil;
      var g = Math.acos;
      var m = Math.cos;
      var p = Math.sin;
      var y = Math.atan2;
      function D(a, b, c) {
        if (a < b) {
          return b;
        } else if (a > c) {
          return c;
        } else {
          return a;
        }
      }
      var l = cc.gfx;
      var w = new l.VertexFormat([{
        name: l.ATTR_POSITION,
        type: l.ATTR_TYPE_FLOAT32,
        num: 2
      }, {
        name: l.ATTR_COLOR,
        type: l.ATTR_TYPE_UINT8,
        num: 4,
        normalize: true
      }, {
        name: "a_dist",
        type: l.ATTR_TYPE_FLOAT32,
        num: 1
      }]);
      w.name = "vfmtPosColorSdf";
      var x = function (a) {
        var b;
        var c;
        function j(b) {
          var c;
          (c = a.call(this, b) || this)._buffer = null;
          c._buffers = [];
          c._bufferOffset = 0;
          return c;
        }
        c = a;
        (b = j).prototype = Object.create(c.prototype);
        b.prototype.constructor = b;
        r(b, c);
        var k = j.prototype;
        k.getVfmt = function () {
          return w;
        };
        k.getVfmtFloatCount = function () {
          return 4;
        };
        k.requestBuffer = function () {
          var a = {
            indiceStart: 0,
            vertexStart: 0
          };
          var b = new s(o._handle, this.getVfmt());
          a.meshbuffer = b;
          var c = new n.default(b._vb, b._ib);
          a.ia = c;
          this._buffers.push(a);
          return a;
        };
        k.getBuffers = function () {
          if (this._buffers.length === 0) {
            this.requestBuffer();
          }
          return this._buffers;
        };
        k.clear = function (b) {
          this._bufferOffset = 0;
          var c = this._buffers;
          if (b) {
            for (var d = 0, e = c.length; d < e; d++) {
              var f = c[d];
              f.meshbuffer.destroy();
              f.meshbuffer = null;
            }
            c.length = 0;
          } else {
            for (var g = 0, h = c.length; g < h; g++) {
              var a = c[g];
              a.indiceStart = 0;
              a.vertexStart = 0;
              a.meshbuffer.reset();
            }
          }
        };
        k.fillBuffers = function (b, c) {
          c._flush();
          c.node = b.node;
          c.material = b._materials[0];
          for (var d = this.getBuffers(), e = 0, f = d.length; e < f; e++) {
            var g = d[e];
            var h = g.meshbuffer;
            g.ia._count = g.indiceStart;
            c._flushIA(g.ia);
            h.uploadData();
          }
        };
        k.genBuffer = function (a, b) {
          var c = this.getBuffers();
          var d = c[this._bufferOffset];
          var e = d.meshbuffer;
          var f = d.vertexStart + b;
          if (f > 65535 || f * 3 > 131070) {
            ++this._bufferOffset;
            f = b;
            if (this._bufferOffset < c.length) {
              d = c[this._bufferOffset];
            } else {
              d = this.requestBuffer(a);
              c[this._bufferOffset] = d;
            }
            e = d.meshbuffer;
          }
          if (f > e.vertexOffset) {
            e.requestStatic(b, b * 3);
          }
          this._buffer = d;
          return d;
        };
        k.stroke = function (a) {
          this._curColor = a._strokeColor._val;
          this._flattenPaths(a._impl);
          this._expandStroke(a);
          a._impl._updatePathOffset = true;
        };
        k.fill = function (a) {
          this._curColor = a._fillColor._val;
          this._expandFill(a);
          a._impl._updatePathOffset = true;
        };
        k._expandStroke = function (f) {
          var m;
          var K;
          var Q;
          var $ = f.lineWidth * 0.5;
          var r = f.lineCap;
          var s = f.lineJoin;
          var a = f.miterLimit;
          var o = f._impl;
          m = $;
          J;
          K = o._tessTol;
          Q = g(m / (m + K)) * 2;
          var c = u(2, v(3.141592653589793 / Q));
          this._calculateJoins(o, $, s, a);
          for (var l = o._paths, d = 0, _ = o._pathOffset, aa = o._pathLength; _ < aa; _++) {
            var T = l[_];
            var ba = T.points.length;
            if (s === h.ROUND) {
              d += (ba + T.nbevel * (c + 2) + 1) * 2;
            } else {
              d += (ba + T.nbevel * 5 + 1) * 2;
            }
            if (!T.closed) {
              if (r === t.ROUND) {
                d += (c * 2 + 2) * 2;
              } else {
                d += 12;
              }
            }
          }
          for (var ca = this.genBuffer(f, d), x = ca.meshbuffer, C = x._vData, b = x._iData, S = o._pathOffset, da = o._pathLength; S < da; S++) {
            var M;
            var ea = l[S];
            var fa = ea.points;
            var ga = fa.length;
            var ha = ca.vertexStart;
            var ia = undefined;
            var ja = undefined;
            var ka = undefined;
            var la = undefined;
            if (M = ea.closed) {
              ia = fa[ga - 1];
              ja = fa[0];
              ka = 0;
              la = ga;
            } else {
              ia = fa[0];
              ja = fa[1];
              ka = 1;
              la = ga - 1;
            }
            ja = ja || ia;
            if (!M) {
              var ma = ja.sub(ia);
              ma.normalizeSelf();
              var na = ma.x;
              var oa = ma.y;
              if (r === t.BUTT) {
                this._buttCapStart(ia, na, oa, $, 0);
              } else if (r === t.SQUARE) {
                this._buttCapStart(ia, na, oa, $, $);
              } else if (r === t.ROUND) {
                this._roundCapStart(ia, na, oa, $, c);
              }
            }
            for (var pa = ka; pa < la; ++pa) {
              if (s === h.ROUND) {
                this._roundJoin(ia, ja, $, $, c);
              } else if ((ja.flags & (G.PT_BEVEL | G.PT_INNERBEVEL)) != 0) {
                this._bevelJoin(ia, ja, $, $);
              } else {
                this._vset(ja.x + ja.dmx * $, ja.y + ja.dmy * $, 1);
                this._vset(ja.x - ja.dmx * $, ja.y - ja.dmy * $, -1);
              }
              ia = ja;
              ja = fa[pa + 1];
            }
            if (M) {
              var qa = this.getVfmtFloatCount();
              var ra = ha * qa;
              this._vset(C[ra], C[ra + 1], 1);
              this._vset(C[ra + qa], C[ra + qa + 1], -1);
            } else {
              var sa = ja.sub(ia);
              sa.normalizeSelf();
              var ta = sa.x;
              var ua = sa.y;
              if (r === t.BUTT) {
                this._buttCapEnd(ja, ta, ua, $, 0);
              } else if (r === t.SQUARE) {
                this._buttCapEnd(ja, ta, ua, $, $);
              } else if (r === t.ROUND) {
                this._roundCapEnd(ja, ta, ua, $, c);
              }
            }
            for (var va = ca.indiceStart, wa = ha + 2, xa = ca.vertexStart; wa < xa; wa++) {
              b[va++] = wa - 2;
              b[va++] = wa - 1;
              b[va++] = wa;
            }
            ca.indiceStart = va;
          }
        };
        k._expandFill = function (d) {
          for (var j = d._impl, e = j._paths, i = 0, k = j._pathOffset, q = j._pathLength; k < q; k++) {
            i += e[k].points.length;
          }
          for (var s = this.genBuffer(d, i), a = s.meshbuffer, o = a._vData, c = a._iData, l = j._pathOffset, t = j._pathLength; l < t; l++) {
            var u = e[l];
            var z = u.points;
            var B = z.length;
            if (B !== 0) {
              for (var D = s.vertexStart, F = 0; F < B; ++F) {
                this._vset(z[F].x, z[F].y);
              }
              var G = s.indiceStart;
              if (u.complex) {
                for (var H = [], I = this.getVfmtFloatCount(), J = D, K = s.vertexStart; J < K; J++) {
                  var L = J * I;
                  H.push(o[L]);
                  H.push(o[L + 1]);
                }
                var N = f(H, null, 2);
                if (!N || N.length === 0) {
                  continue;
                }
                for (var O = 0, P = N.length; O < P; O++) {
                  c[G++] = N[O] + D;
                }
              } else {
                for (var Q = D, U = D + 2, V = s.vertexStart; U < V; U++) {
                  c[G++] = Q;
                  c[G++] = U - 1;
                  c[G++] = U;
                }
              }
              s.indiceStart = G;
            }
          }
        };
        k._calculateJoins = function (j, k, e, i) {
          var n = 0;
          var p = k * k;
          if (k > 0) {
            n = 1 / k;
          }
          for (var q = j._paths, a = j._pathOffset, s = j._pathLength; a < s; a++) {
            var c = q[a];
            var t = c.points;
            var v = t.length;
            var w = t[v - 1];
            var z = t[0];
            c.nbevel = 0;
            for (var B = 0; B < v; B++) {
              var D;
              var F;
              var H = w.dy;
              var I = -w.dx;
              var J = z.dy;
              var K = -z.dx;
              z.dmx = (H + J) * 0.5;
              z.dmy = (I + K) * 0.5;
              if ((D = z.dmx * z.dmx + z.dmy * z.dmy) > 0.000001) {
                var L = 1 / D;
                if (L > 600) {
                  L = 600;
                }
                z.dmx *= L;
                z.dmy *= L;
              }
              if (z.dx * w.dy - w.dx * z.dy > 0) {
                z.flags |= G.PT_LEFT;
              }
              if (D * (F = u(11, d(w.len, z.len) * n)) * F < 1) {
                z.flags |= G.PT_INNERBEVEL;
              }
              var N = z.dmx * k;
              var O = z.dmy * k;
              var P = N * N + O * O;
              if (P > z.len * z.len + p && P > w.len * w.len + p) {
                z.flags |= G.PT_INNERBEVEL;
              }
              if (z.flags & G.PT_CORNER && (D * i * i < 1 || e === h.BEVEL || e === h.ROUND)) {
                z.flags |= G.PT_BEVEL;
              }
              if ((z.flags & (G.PT_BEVEL | G.PT_INNERBEVEL)) != 0) {
                c.nbevel++;
              }
              w = z;
              z = t[B + 1];
            }
          }
        };
        k._flattenPaths = function (b) {
          for (var d = b._paths, e = b._pathOffset, f = b._pathLength; e < f; e++) {
            var g = d[e];
            var j = g.points;
            var k = j[j.length - 1];
            var m = j[0];
            if (j.length > 2 && k.equals(m)) {
              g.closed = true;
              j.pop();
              k = j[j.length - 1];
            }
            for (var n = 0, p = j.length; n < p; n++) {
              var q = m.sub(k);
              k.len = q.mag();
              if (q.x || q.y) {
                q.normalizeSelf();
              }
              k.dx = q.x;
              k.dy = q.y;
              k = m;
              m = j[n + 1];
            }
          }
        };
        k._chooseBevel = function (b, d, e, f) {
          var g;
          var h;
          var i;
          var j;
          var k = e.x;
          var c = e.y;
          if (b !== 0) {
            g = k + d.dy * f;
            h = c - d.dx * f;
            i = k + e.dy * f;
            j = c - e.dx * f;
          } else {
            g = i = k + e.dmx * f;
            h = j = c + e.dmy * f;
          }
          return [g, h, i, j];
        };
        k._buttCapStart = function (b, d, e, f, g) {
          var h = b.x - d * g;
          var i = b.y - e * g;
          var a = e;
          var j = -d;
          this._vset(h + a * f, i + j * f, 1);
          this._vset(h - a * f, i - j * f, -1);
        };
        k._buttCapEnd = function (b, d, e, f, g) {
          var h = b.x + d * g;
          var i = b.y + e * g;
          var a = e;
          var j = -d;
          this._vset(h + a * f, i + j * f, 1);
          this._vset(h - a * f, i - j * f, -1);
        };
        k._roundCapStart = function (b, d, e, g, i) {
          for (var j = b.x, k = b.y, a = e, n = -d, c = 0; c < i; c++) {
            var o = c / (i - 1) * J;
            var q = m(o) * g;
            var r = p(o) * g;
            this._vset(j - a * q - d * r, k - n * q - e * r, 1);
            this._vset(j, k, 0);
          }
          this._vset(j + a * g, k + n * g, 1);
          this._vset(j - a * g, k - n * g, -1);
        };
        k._roundCapEnd = function (b, d, e, g, i) {
          var j = b.x;
          var k = b.y;
          var a = e;
          var n = -d;
          this._vset(j + a * g, k + n * g, 1);
          this._vset(j - a * g, k - n * g, -1);
          for (var c = 0; c < i; c++) {
            var o = c / (i - 1) * J;
            var q = m(o) * g;
            var r = p(o) * g;
            this._vset(j, k, 0);
            this._vset(j - a * q + d * r, k - n * q + e * r, 1);
          }
        };
        k._roundJoin = function (g, h, e, i, j) {
          var n = g.dy;
          var q = -g.dx;
          var a = h.dy;
          var o = -h.dx;
          var c = h.x;
          var l = h.y;
          if ((h.flags & G.PT_LEFT) != 0) {
            var r = this._chooseBevel(h.flags & G.PT_INNERBEVEL, g, h, e);
            var f = r[0];
            var d = r[1];
            var s = r[2];
            var t = r[3];
            var u = y(-q, -n);
            var x = y(-o, -a);
            if (x > u) {
              x -= J * 2;
            }
            this._vset(f, d, 1);
            this._vset(c - n * i, h.y - q * i, -1);
            for (var A = D(v((u - x) / J) * j, 2, j), b = 0; b < A; b++) {
              var E = u + b / (A - 1) * (x - u);
              var H = c + m(E) * i;
              var K = l + p(E) * i;
              this._vset(c, l, 0);
              this._vset(H, K, -1);
            }
            this._vset(s, t, 1);
            this._vset(c - a * i, l - o * i, -1);
          } else {
            var Q = this._chooseBevel(h.flags & G.PT_INNERBEVEL, g, h, -i);
            var I = Q[0];
            var O = Q[1];
            var L = Q[2];
            var P = Q[3];
            var T = y(q, n);
            var N = y(o, a);
            if (N < T) {
              N += J * 2;
            }
            this._vset(c + n * i, l + q * i, 1);
            this._vset(I, O, -1);
            for (var W = D(v((N - T) / J) * j, 2, j), B = 0; B < W; B++) {
              var X = T + B / (W - 1) * (N - T);
              var Y = c + m(X) * e;
              var Z = l + p(X) * e;
              this._vset(Y, Z, 1);
              this._vset(c, l, 0);
            }
            this._vset(c + a * i, l + o * i, 1);
            this._vset(L, P, -1);
          }
        };
        k._bevelJoin = function (b, h, e, i) {
          var j;
          var k;
          var n;
          var q;
          var t;
          var w;
          var x;
          var y;
          var z = b.dy;
          var d = -b.dx;
          var A = h.dy;
          var p = -h.dx;
          if (h.flags & G.PT_LEFT) {
            var v = this._chooseBevel(h.flags & G.PT_INNERBEVEL, b, h, e);
            t = v[0];
            w = v[1];
            x = v[2];
            y = v[3];
            this._vset(t, w, 1);
            this._vset(h.x - z * i, h.y - d * i, -1);
            this._vset(x, y, 1);
            this._vset(h.x - A * i, h.y - p * i, -1);
          } else {
            var g = this._chooseBevel(h.flags & G.PT_INNERBEVEL, b, h, -i);
            j = g[0];
            k = g[1];
            n = g[2];
            q = g[3];
            this._vset(h.x + z * e, h.y + d * e, 1);
            this._vset(j, k, -1);
            this._vset(h.x + A * e, h.y + p * e, 1);
            this._vset(n, q, -1);
          }
        };
        k._vset = function (b, c, d) {
          if (d === undefined) {
            d = 0;
          }
          var e = this._buffer;
          var f = e.meshbuffer;
          var g = e.vertexStart * this.getVfmtFloatCount();
          var h = f._vData;
          var a = f._uintVData;
          h[g] = b;
          h[g + 1] = c;
          a[g + 2] = this._curColor;
          h[g + 3] = d;
          e.vertexStart++;
          f._dirty = true;
        };
        return j;
      }(i.default);
      e.default = x;
      i.default.register(cc.Graphics, x);
      k.exports = e.default;
    }, {
      "../../../../../renderer/core/input-assembler": 272,
      "../../../../graphics/graphics": 151,
      "../../../../graphics/types": 154,
      "../../../assembler": 190,
      "../../../index": 193,
      "../../mesh-buffer": 220,
      "./earcut": 202,
      "./impl": 203
    }],
    205: [function (a) {
      "use strict";
  
      cc.assemblers = {};
      a("./sprite");
      a("./mask-assembler");
      a("./graphics");
      a("./label");
      a("./motion-streak");
    }, {
      "./graphics": 204,
      "./label": 210,
      "./mask-assembler": 211,
      "./motion-streak": undefined,
      "./sprite": 218
    }],
    206: [function (b, c, d) {
      "use strict";
  
      d.__esModule = true;
      d.default = undefined;
      var e;
      var f = (e = b("../../../../utils/label/bmfont")) && e.__esModule ? e : {
        default: e
      };
      function g(a, b) {
        return (g = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      var j = 0;
      var h = function (a) {
        var b;
        var c;
        function d() {
          return a.apply(this, arguments) || this;
        }
        c = a;
        (b = d).prototype = Object.create(c.prototype);
        b.prototype.constructor = b;
        g(b, c);
        var f = d.prototype;
        f.initData = function () {
          this._renderData.createFlexData(0, 4, 6, this.getVfmt());
        };
        f._reserveQuads = function (a, b) {
          var d = b * 4;
          var e = b * 6;
          var f = this._renderData._flexBuffer;
          f.reserve(d, e);
          f.used(d, e);
          for (var g = this._renderData.iDatas[0], h = 0, i = 0, k = e; h < k; h += 6, i += 4) {
            g[h] = i;
            g[h + 1] = i + 1;
            g[h + 2] = i + 2;
            g[h + 3] = i + 1;
            g[h + 4] = i + 3;
            g[h + 5] = i + 2;
          }
          j = 0;
        };
        f._quadsUpdated = function () {
          j = 0;
          this._renderData._flexBuffer.used(this.verticesCount, this.indicesCount);
        };
        f._getColor = function (a) {
          return a.node._color._val;
        };
        f.appendQuad = function (a, b, e, i, k, n, q) {
          var o = this._renderData;
          var c = o.vDatas[0];
          var l = o.uintVDatas[0];
          this.verticesCount += 4;
          this.indicesCount = this.verticesCount / 2 * 3;
          var h;
          var r;
          var s;
          var t;
          var w = b.width;
          var p = b.height;
          var v = e.width;
          var g = e.height;
          var m = this._getColor(a);
          var y = this.floatsPerVert;
          var z = j + this.uvOffset;
          if (i) {
            h = e.x / w;
            s = (e.x + g) / w;
            r = (e.y + v) / p;
            t = e.y / p;
            c[z] = h;
            c[z + 1] = t;
            c[z += y] = h;
            c[z + 1] = r;
            c[z += y] = s;
            c[z + 1] = t;
            c[z += y] = s;
            c[z + 1] = r;
          } else {
            h = e.x / w;
            s = (e.x + v) / w;
            r = (e.y + g) / p;
            t = e.y / p;
            c[z] = h;
            c[z + 1] = r;
            c[z += y] = s;
            c[z + 1] = r;
            c[z += y] = h;
            c[z + 1] = t;
            c[z += y] = s;
            c[z + 1] = t;
          }
          h = k;
          s = k + v * q;
          r = n - g * q;
          t = n;
          this.appendVerts(a, j, h, s, r, t);
          for (var B = j + this.colorOffset, C = 0; C < 4; C++) {
            l[B] = m;
            B += y;
          }
          j += this.floatsPerVert * 4;
        };
        f.appendVerts = function (b, c, d, f, g, h) {
          var i = this._local;
          var a = this.floatsPerVert;
          i[c] = d;
          i[c + 1] = g;
          i[c += a] = f;
          i[c + 1] = g;
          i[c += a] = d;
          i[c + 1] = h;
          i[c += a] = f;
          i[c + 1] = h;
        };
        f.updateWorldVerts = function (b) {
          for (var g = b.node._worldMatrix.m, e = g[0], i = g[1], j = g[4], k = g[5], m = g[12], a = g[13], n = this._local, c = this._renderData.vDatas[0], l = this.floatsPerVert, h = 0; h < n.length; h += l) {
            var o = n[h];
            var p = n[h + 1];
            c[h] = o * e + p * j + m;
            c[h + 1] = o * i + p * k + a;
          }
        };
        return d;
      }(f.default);
      d.default = h;
      c.exports = d.default;
    }, {
      "../../../../utils/label/bmfont": 197
    }],
    207: [function (b, c, d) {
      "use strict";
  
      function f(a, b) {
        return (f = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      d.__esModule = true;
      d.default = undefined;
      b("../../../../../platform/js");
      b("./bmfont");
      var e = b("../../../../utils/label/letter-font");
      var g = cc.color(255, 255, 255, 255);
      var h = function (b) {
        var c;
        var d;
        function h() {
          return b.apply(this, arguments) || this;
        }
        d = b;
        (c = h).prototype = Object.create(d.prototype);
        c.prototype.constructor = c;
        f(c, d);
        var j = h.prototype;
        j.createData = function (a) {
          return a.requestRenderData();
        };
        j._getColor = function (a) {
          g._fastSetA(a.node._color.a);
          return g._val;
        };
        j.updateColor = function (a) {
          var c = this._getColor(a);
          b.prototype.updateColor.call(this, a, c);
        };
        return h;
      }(e);
      d.default = h;
      c.exports = d.default;
    }, {
      "../../../../../platform/js": 183,
      "../../../../utils/label/letter-font": 199,
      "./bmfont": 206
    }],
    208: [function (a, b, c) {
      "use strict";
  
      c.__esModule = true;
      c.default = undefined;
      var d;
      var f = (d = a("../../../../../assets/material/material-variant")) && d.__esModule ? d : {
        default: d
      };
      a("../../../../../components/CCLabel");
      a("../../../../../components/CCLabelShadow");
      a("../../../../../components/CCLabelOutline");
      a("../../../../../assets/material/CCMaterial");
      var e = function () {
        function a() {}
        var b = a.prototype;
        b.init = function (a) {
          this.labelMaterial = null;
          this._label = this._renderComp = a;
          renderer.CustomAssembler.prototype.ctor.call(this);
          a.node._proxy.setAssembler(this);
          this._layout = new jsb.LabelRenderer();
          this._layout.init(a);
          this._cfg = new DataView(this._layout._cfg);
          this._layoutInfo = new DataView(this._layout._layout);
          this._cfgFields = typeof jsb.LabelRenderer._cfgFields == "string" ? JSON.parse(jsb.LabelRenderer._cfgFields) : jsb.LabelRenderer._cfgFields;
          this._layoutFields = typeof jsb.LabelRenderer._layoutFields == "string" ? JSON.parse(jsb.LabelRenderer._layoutFields) : jsb.LabelRenderer._layoutFields;
          this._layout.bindNodeProxy(a.node._proxy);
          this._bindMaterial(a);
        };
        b._setBufferFlag = function (b, c, d, e, f) {
          if (e == "int8" && d == 1) {
            var g = b.getInt8(c);
            b.setInt8(c, f | g);
          } else if (e == "int32" && d == 4) {
            var h = b.getInt32(c, jsb.__isLittleEndian__);
            b.setInt32(c, f | h, jsb.__isLittleEndian__);
          }
        };
        b._updateCfgFlag = function (a) {
          var b = this._cfgFields.updateFlags;
          this._setBufferFlag(this._cfg, b.offset, b.size, b.type, a);
        };
        b._setBufferValue = function (a, b, c, d, e) {
          if (d == "float" && c == 4) {
            a.setFloat32(b, e, jsb.__isLittleEndian__);
          } else if (d == "int32" && c == 4) {
            a.setInt32(b, e, jsb.__isLittleEndian__);
          } else if (d == "bool" && c == 1) {
            a.setInt8(b, e ? 1 : 0, jsb.__isLittleEndian__);
          } else if (d == "Color4B" && c == 4) {
            a.setUint8(b, e.r);
            a.setUint8(b + 1, e.g);
            a.setUint8(b + 2, e.b);
            a.setUint8(b + 3, e.a);
          } else if (d == "int8" && c == 1) {
            a.setUint8(b, e);
          }
        };
        b._setFieldValue = function (a, b, c, d) {
          var e = b[c];
          this._setBufferValue(a, e.offset, e.size, e.type, d);
        };
        b._getBufferValue = function (a, b, c, d) {
          if (d == "float" && c == 4) {
            return a.getFloat32(b, jsb.__isLittleEndian__);
          } else if (d == "int32" && c == 4) {
            return a.getInt32(b, jsb.__isLittleEndian__);
          } else if (d == "bool" && c == 1) {
            return a.getInt8(b, jsb.__isLittleEndian__) != 0;
          } else if (d == "Color4B" && c == 4) {
            return {
              r: a.getUint8(b),
              g: a.getUint8(b + 1),
              b: a.getUint8(b + 2),
              a: a.getUint8(b + 3)
            };
          } else if (d == "int8" && c == 1) {
            return a.getUint8(b);
          } else {
            return undefined;
          }
        };
        b._getFieldValue = function (a, b, c) {
          var d = b[c];
          return this._getBufferValue(a, d.offset, d.size, d.type);
        };
        b._getLayoutValue = function (a) {
          return this._getFieldValue(this._layoutInfo, this._layoutFields, a);
        };
        b._setLayoutValue = function (a, b) {
          return this._setFieldValue(this._layoutInfo, this._layoutFields, a, b);
        };
        b._updateCfgFlag_Content = function () {
          this._updateCfgFlag(1);
        };
        b._updateCfgFlag_Font = function () {
          this._updateCfgFlag(2);
        };
        b._colorEqual = function (a, b) {
          return a.r == b.r && a.g == b.g && a.b == b.b && a.a == b.a;
        };
        b._colorToObj = function (a, b, c, d) {
          return {
            r: a,
            g: b,
            b: c,
            a: d
          };
        };
        b.setString = function (a) {
          if (a != this._layout.string) {
            this._layout.string = a;
            this._updateCfgFlag_Content();
          }
        };
        b.setFontPath = function (a) {
          if (a != this._layout.fontPath) {
            this._layout.fontPath = a;
            this._updateCfgFlag_Font();
          }
        };
        b.setFontSize = function (a, b) {
          if (this._getFieldValue(this._cfg, this._cfgFields, "fontSize") != a) {
            this._setFieldValue(this._cfg, this._cfgFields, "fontSize", a);
            this._setFieldValue(this._cfg, this._cfgFields, "fontSizeRetina", b);
            this._updateCfgFlag_Font();
          }
        };
        b.setOutline = function (a) {
          var b = this._getLayoutValue("outlineSize");
          if (b > 0 != a > 0) {
            this._updateCfgFlag_Font();
          }
          if (b != a) {
            this._updateCfgFlag_Content();
            this._setLayoutValue("outlineSize", a);
          }
        };
        b.setOutlineColor = function (a) {
          var b = this._getLayoutValue("outlineColor");
          if (!this._colorEqual(b, a)) {
            this._setLayoutValue("outlineColor", a);
            this._updateCfgFlag_Content();
          }
        };
        b.setLineHeight = function (a) {
          if (this._getLayoutValue("lineHeight") != a) {
            this._setLayoutValue("lineHeight", a);
            this._updateCfgFlag_Content();
          }
        };
        b.setOverFlow = function (a) {
          if (this._getLayoutValue("overflow") != a) {
            this._setLayoutValue("overflow", a);
            this._updateCfgFlag_Content();
          }
        };
        b.setEnableWrap = function (a) {
          if (this._getLayoutValue("wrap") != a) {
            this._setLayoutValue("wrap", a);
            this._updateCfgFlag_Content();
          }
        };
        b.setVerticalAlign = function (a) {
          if (this._getLayoutValue("valign") != a) {
            this._setLayoutValue("valign", a);
            this._updateCfgFlag_Content();
          }
        };
        b.setHorizontalAlign = function (a) {
          if (this._getLayoutValue("halign") != a) {
            this._setLayoutValue("halign", a);
            this._updateCfgFlag_Content();
          }
        };
        b.setContentSize = function (a, b) {
          var c = this._getLayoutValue("width");
          var d = this._getLayoutValue("height");
          if (!(c == a && d == b)) {
            this._setLayoutValue("height", b);
            this._setLayoutValue("width", a);
            this._updateCfgFlag_Content();
          }
        };
        b.setAnchorPoint = function (a, b) {
          var c = this._getLayoutValue("anchorX");
          var d = this._getLayoutValue("anchorY");
          if (!(c == a && d == b)) {
            this._setLayoutValue("anchorX", a);
            this._setLayoutValue("anchorY", b);
            this._updateCfgFlag_Content();
          }
        };
        b.setColor = function (a) {
          var b = this._getLayoutValue("color");
          if (!this._colorEqual(b, a)) {
            this._setLayoutValue("color", a);
            this._updateCfgFlag_Content();
          }
        };
        b.setShadow = function (b, c, d) {
          var e = this._getLayoutValue("shadowBlur");
          var f = this._getLayoutValue("shadowX");
          var g = this._getLayoutValue("shadowY");
          if (e > 0 != d > 0) {
            this._updateCfgFlag_Font();
          }
          var h = false;
          if (e != d) {
            this._setLayoutValue("shadowBlur", d);
            h = true;
          }
          if (f != b) {
            this._setLayoutValue("shadowX", b);
            h = true;
          }
          if (g != c) {
            this._setLayoutValue("shadowY", c);
            h = true;
          }
          if (h) {
            this._updateCfgFlag_Content();
          }
        };
        b.setShadowColor = function (a) {
          var b = this._getLayoutValue("shadowColor");
          if (!this._colorEqual(b, a)) {
            this._setLayoutValue("shadowColor", a);
            this._updateCfgFlag_Content();
          }
        };
        b.setItalic = function (a) {
          if (this._getLayoutValue("italic") != a) {
            this._setLayoutValue("italic", a);
            this._updateCfgFlag_Content();
          }
        };
        b.setBold = function (a) {
          if (this._getLayoutValue("bold") != a) {
            this._setLayoutValue("bold", a);
            this._updateCfgFlag_Content();
            this._updateCfgFlag_Font();
          }
        };
        b.setUnderline = function (a) {
          if (this._getLayoutValue("underline") != a) {
            this._setLayoutValue("underline", a);
            this._updateCfgFlag_Content();
          }
        };
        b.setSpacingX = function (a) {
          if (!(this._getLayoutValue("spaceX") == a || typeof a != "number" || isNaN(a))) {
            this._setLayoutValue("spaceX", a);
            this._updateCfgFlag_Content();
          }
        };
        b.updateRenderData = function (b) {
          if (b._vertsDirty) {
            if (b.font && b.font.nativeUrl) {
              this.setFontPath(cc.assetManager.cacheManager.getCache(b.font.nativeUrl) || b.font.nativeUrl);
            }
            var c = this._layout;
            var d = b.node.color;
            var e = b.node;
            var f = b.fontSize;
            this.setString(b.string);
            this.setFontSize(b.fontSize, f / 72 * b.fontSize);
            this.setLineHeight(b.lineHeight);
            this.setEnableWrap(b.enableWrapText);
            this.setItalic(b.enableItalic);
            this.setUnderline(b.enableUnderline);
            this.setBold(b.enableBold);
            this.setOverFlow(b.overflow);
            this.setVerticalAlign(b.verticalAlign);
            this.setHorizontalAlign(b.horizontalAlign);
            this.setSpacingX(b.spacingX);
            this.setContentSize(e.getContentSize().width, e.getContentSize().height);
            this.setAnchorPoint(e.anchorX, e.anchorY);
            this.setColor(this._colorToObj(d.getR(), d.getG(), d.getB(), Math.ceil(d.getA() * e.opacity / 255)));
            var g = e.getComponent(cc.LabelShadow);
            if (g && g.enabled) {
              var h = g.color;
              this.setShadow(g.offset.x, g.offset.y, g.blur);
              this.setShadowColor(this._colorToObj(h.getR(), h.getG(), h.getB(), Math.ceil(h.getA() * e.opacity / 255)));
            } else {
              this.setShadow(0, 0, -1);
            }
            this._updateTTFMaterial(b);
            c.render();
          }
        };
        b._bindMaterial = function (a) {
          var b = this.labelMaterial;
          if (!b) {
            b = f.default.createWithBuiltin("2d-label", a);
            this.labelMaterial = b;
          }
          return b;
        };
        b._updateTTFMaterial = function (b) {
          var c = this._bindMaterial(b);
          var d = this._label.node;
          var e = this._layout;
          var f = d.getComponent(cc.LabelOutline);
          var g = 0;
          if (f && f.enabled && f.width > 0) {
            g = Math.max(Math.min(f.width / 10, 0.4), 0.1);
            var h = f.color;
            this.setOutlineColor(this._colorToObj(h.getR(), h.getG(), h.getB(), Math.ceil(h.getA() * d.opacity / 255)));
          }
          this.setOutline(g);
          c.define("CC_USE_MODEL", true);
          c.define("USE_TEXTURE_ALPHAONLY", true);
          c.define("USE_SDF", g > 0 || b.enableBold);
          c.define("USE_SDF_EXTEND", b.enableBold ? 1 : 0);
          if (c.getDefine("CC_SUPPORT_standard_derivatives") !== undefined && cc.sys.glExtension("OES_standard_derivatives")) {
            c.define("CC_SUPPORT_standard_derivatives", true);
          }
          e.setEffect(c.effect._nativeObj);
        };
        b.fillBuffers = function () {
          this._layout.render();
        };
        b.getVfmt = function () {};
        return a;
      }();
      c.default = e;
      b.exports = c.default;
    }, {
      "../../../../../assets/material/CCMaterial": 76,
      "../../../../../assets/material/material-variant": 83,
      "../../../../../components/CCLabel": 102,
      "../../../../../components/CCLabelOutline": 103,
      "../../../../../components/CCLabelShadow": 104
    }],
    209: [function (b, d, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var f;
      var g = (f = b("../../../../utils/label/ttf")) && f.__esModule ? f : {
        default: f
      };
      function h(a, b) {
        return (h = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      var j = b("../../../../../components/CCLabelShadow");
      var a = cc.color(255, 255, 255, 255);
      var i = function (b) {
        var c;
        var d;
        function f() {
          return b.apply(this, arguments) || this;
        }
        d = b;
        (c = f).prototype = Object.create(d.prototype);
        c.prototype.constructor = c;
        h(c, d);
        var g = f.prototype;
        g.updateUVs = function (b) {
          for (var c = this._renderData.vDatas[0], d = b._frame.uv, e = this.uvOffset, f = this.floatsPerVert, g = 0; g < 4; g++) {
            var h = g * 2;
            var i = f * g + e;
            c[i] = d[h];
            c[i + 1] = d[h + 1];
          }
        };
        g.updateColor = function (c) {
          a._fastSetA(c.node._color.a);
          var d = a._val;
          b.prototype.updateColor.call(this, c, d);
        };
        g.updateVerts = function (a) {
          var b = a.node;
          var d = a._ttfTexture.width;
          var e = a._ttfTexture.height;
          var f = b.anchorX * b.width;
          var g = b.anchorY * b.height;
          var i = j && a.getComponent(j);
          if (i && i._enabled) {
            var k = (d - b.width) / 2;
            var c = (e - b.height) / 2;
            var l = i.offset;
            if (-l.x > k) {
              f += d - b.width;
            } else if (k > l.x) {
              f += k - l.x;
            }
            if (-l.y > c) {
              g += e - b.height;
            } else if (c > l.y) {
              g += c - l.y;
            }
          }
          var h = this._local;
          h[0] = -f;
          h[1] = -g;
          h[2] = d - f;
          h[3] = e - g;
          this.updateUVs(a);
          this.updateWorldVerts(a);
        };
        return f;
      }(g.default);
      e.default = i;
      d.exports = e.default;
    }, {
      "../../../../../components/CCLabelShadow": 104,
      "../../../../utils/label/ttf": 200
    }],
    210: [function (b) {
      "use strict";
  
      var d = c(b("../../../assembler"));
      var f = c(b("../../../../components/CCLabel"));
      var g = c(b("./2d/ttf"));
      var h = c(b("./2d/bmfont"));
      var i = c(b("./2d/letter"));
      var j = c(b("./3d/ttf"));
      var a = c(b("./3d/bmfont"));
      var k = c(b("./3d/letter"));
      function c(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      f.default._canvasPool = {
        pool: [],
        get: function () {
          var a = this.pool.pop();
          if (!a) {
            var b = document.createElement("canvas");
            var c = b.getContext("2d");
            a = {
              canvas: b,
              context: c
            };
            c.textBaseline = "alphabetic";
          }
          return a;
        },
        put: function (a) {
          if (!(this.pool.length >= 32)) {
            this.pool.push(a);
          }
        }
      };
      d.default.register(cc.Label, {
        getConstructor: function (b) {
          var c = b.node.is3DNode;
          var d = c ? j.default : g.default;
          if (b.font instanceof cc.BitmapFont) {
            d = c ? a.default : h.default;
          } else if (b.cacheMode === f.default.CacheMode.CHAR) {
            if (!(cc.sys.platform === cc.sys.WECHAT_GAME_SUB)) {
              d = c ? k.default : i.default;
            }
          }
          return d;
        },
        TTF: g.default,
        Bmfont: h.default,
        Letter: i.default,
        TTF3D: j.default,
        Bmfont3D: a.default,
        Letter3D: k.default,
        NativeTTF: undefined
      });
    }, {
      "../../../../components/CCLabel": 102,
      "../../../assembler": 190,
      "./2d/bmfont": 206,
      "./2d/letter": 207,
      "./2d/nativeTTF": 208,
      "./2d/ttf": 209,
      "./3d/bmfont": undefined,
      "./3d/letter": undefined,
      "./3d/ttf": undefined
    }],
    211: [function (b, j, e) {
      "use strict";
  
      e.__esModule = true;
      e.MaskAssembler = undefined;
      var i;
      var k = (i = b("../../assembler")) && i.__esModule ? i : {
        default: i
      };
      function q(a, b) {
        return (q = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      var w = b("../../../components/CCMask");
      var a = b("../../render-flow");
      var o = b("./sprite/2d/simple");
      var c = b("./graphics");
      var x = b("../../../../renderer/gfx");
      var h = b("../vertex-format").vfmtPos;
      var l = [];
      function u() {
        return 1 << l.length - 1;
      }
      function d() {
        for (var a = 0, b = 0; b < l.length; ++b) {
          a += 1 << b;
        }
        return a;
      }
      function z(b, d, e, f, g, h) {
        var i = b.effect;
        var a = x.STENCIL_OP_KEEP;
        var j = x.STENCIL_OP_KEEP;
        i.setStencil(x.STENCIL_ENABLE, d, f, g, e, a, j, h);
      }
      function f(a) {
        l.length;
        l.push(a);
      }
      function p(a, b) {
        l.length;
        l.pop();
        if (l.length === 0) {
          b._flushMaterial(a._exitMaterial);
        } else {
          r(b);
        }
      }
      function g(b, d) {
        var e = x.DS_FUNC_NEVER;
        var i = u();
        var j = i;
        var k = i;
        var m = b.inverted ? x.STENCIL_OP_REPLACE : x.STENCIL_OP_ZERO;
        z(b._clearMaterial, e, m, i, j, k);
        var a = d.getBuffer("mesh", h);
        var n = a.request(4, 6);
        var c = n.indiceOffset;
        var o = n.byteOffset >> 2;
        var p = n.vertexOffset;
        var q = a._vData;
        var r = a._iData;
        q[o++] = -1;
        q[o++] = -1;
        q[o++] = -1;
        q[o++] = 1;
        q[o++] = 1;
        q[o++] = 1;
        q[o++] = 1;
        q[o++] = -1;
        r[c++] = p;
        r[c++] = p + 3;
        r[c++] = p + 1;
        r[c++] = p + 1;
        r[c++] = p + 3;
        r[c++] = p + 2;
        d.node = d._dummyNode;
        d.material = b._clearMaterial;
        d._flush();
      }
      function m(a, b) {
        var d = x.DS_FUNC_NEVER;
        var e = u();
        var f = e;
        var g = e;
        var h = a.inverted ? x.STENCIL_OP_ZERO : x.STENCIL_OP_REPLACE;
        z(a._materials[0], d, h, e, f, g);
        b.material = a._materials[0];
        if (a._type === w.Type.IMAGE_STENCIL) {
          b.node = b._dummyNode;
          o.prototype.fillBuffers.call(a._assembler, a, b);
          b._flush();
        } else {
          b.node = a.node;
          c.prototype.fillBuffers.call(a._graphics._assembler, a._graphics, b);
        }
      }
      function r(b) {
        var c = x.DS_FUNC_EQUAL;
        var e = x.STENCIL_OP_KEEP;
        var f = d();
        var g = f;
        var h = u();
        var i = l[l.length - 1];
        z(i._enableMaterial, c, e, f, g, h);
        b._flushMaterial(i._enableMaterial);
      }
      var t = function (b) {
        var d;
        var h;
        function j() {
          return b.apply(this, arguments) || this;
        }
        h = b;
        (d = j).prototype = Object.create(h.prototype);
        d.prototype.constructor = d;
        q(d, h);
        var k = j.prototype;
        k.updateRenderData = function (a) {
          if (a._type === w.Type.IMAGE_STENCIL) {
            if (a.spriteFrame) {
              o.prototype.updateRenderData.call(this, a);
            } else {
              a.setMaterial(0, null);
            }
          } else {
            a._graphics.setMaterial(0, a._materials[0]);
            c.prototype.updateRenderData.call(a._graphics._assembler, a._graphics, a._graphics);
          }
        };
        k.fillBuffers = function (b, c) {
          if (b._type !== w.Type.IMAGE_STENCIL || b.spriteFrame) {
            f(b);
            g(b, c);
            m(b, c);
            r(c);
          }
          b.node._renderFlag |= a.FLAG_UPDATE_RENDER_DATA;
        };
        k.postFillBuffers = function (b, c) {
          if (b._type !== w.Type.IMAGE_STENCIL || b.spriteFrame) {
            p(b, c);
          }
          b.node._renderFlag |= a.FLAG_UPDATE_RENDER_DATA;
        };
        return j;
      }(o);
      e.MaskAssembler = t;
      k.default.register(w, t);
    }, {
      "../../../../renderer/gfx": 282,
      "../../../components/CCMask": 106,
      "../../assembler": 190,
      "../../render-flow": 194,
      "../vertex-format": 225,
      "./graphics": 204,
      "./sprite/2d/simple": 215
    }],
    212: [function (b, c, d) {
      "use strict";
  
      d.__esModule = true;
      d.default = undefined;
      var e;
      var f = (e = b("../../../../assembler-2d")) && e.__esModule ? e : {
        default: e
      };
      function g(a, b) {
        return (g = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      var j = b("../../../../../components/CCSprite").FillType;
      var a = function (a) {
        var b;
        var c;
        function d() {
          return a.apply(this, arguments) || this;
        }
        c = a;
        (b = d).prototype = Object.create(c.prototype);
        b.prototype.constructor = b;
        g(b, c);
        var f = d.prototype;
        f.updateRenderData = function (a) {
          var b = a._spriteFrame;
          this.packToDynamicAtlas(a, b);
          if (a._vertsDirty) {
            var c = a._fillStart;
            var d = a._fillRange;
            if (d < 0) {
              c += d;
              d = -d;
            }
            d = (d = (d = c + d) > 1 ? 1 : d) < 0 ? 0 : d;
            var e = (c = (c = c > 1 ? 1 : c) < 0 ? 0 : c) + (d = (d -= c) < 0 ? 0 : d);
            e = e > 1 ? 1 : e;
            this.updateUVs(a, c, e);
            this.updateVerts(a, c, e);
            a._vertsDirty = false;
          }
        };
        f.updateUVs = function (a, b, e) {
          var i;
          var k;
          var q;
          var t;
          var w;
          var x;
          var z;
          var A;
          var B;
          var C;
          var D = a._spriteFrame;
          var E = D._texture.width;
          var p = D._texture.height;
          var v = D._rect;
          if (D._rotated) {
            i = v.x / E;
            k = (v.y + v.width) / p;
            q = w = i;
            z = B = (v.x + v.height) / E;
            x = C = k;
            t = A = v.y / p;
          } else {
            i = v.x / E;
            k = (v.y + v.height) / p;
            q = z = i;
            w = B = (v.x + v.width) / E;
            t = x = k;
            A = C = v.y / p;
          }
          var g = this._renderData.vDatas[0];
          var m = this.uvOffset;
          var y = this.floatsPerVert;
          switch (a._fillType) {
            case j.HORIZONTAL:
              g[m] = q + (w - q) * b;
              g[m + 1] = t + (x - t) * b;
              g[m + y] = q + (w - q) * e;
              g[m + y + 1] = t + (x - t) * e;
              g[m + y * 2] = z + (B - z) * b;
              g[m + y * 2 + 1] = A + (C - A) * b;
              g[m + y * 3] = z + (B - z) * e;
              g[m + y * 3 + 1] = A + (C - A) * e;
              break;
            case j.VERTICAL:
              g[m] = q + (z - q) * b;
              g[m + 1] = t + (A - t) * b;
              g[m + y] = w + (B - w) * b;
              g[m + y + 1] = x + (C - x) * b;
              g[m + y * 2] = q + (z - q) * e;
              g[m + y * 2 + 1] = t + (A - t) * e;
              g[m + y * 3] = w + (B - w) * e;
              g[m + y * 3 + 1] = x + (C - x) * e;
          }
        };
        f.updateVerts = function (a, b, e) {
          var g;
          var i = a.node;
          var k = i.width;
          var m = i.height;
          var o = i.anchorX * k;
          var c = i.anchorY * m;
          var l = -o;
          var p = -c;
          var q = k - o;
          var r = m - c;
          switch (a._fillType) {
            case j.HORIZONTAL:
              g = l + (q - l) * e;
              l += (q - l) * b;
              q = g;
              break;
            case j.VERTICAL:
              g = p + (r - p) * e;
              p += (r - p) * b;
              r = g;
          }
          var s = this._local;
          s[0] = l;
          s[1] = p;
          s[2] = q;
          s[3] = r;
          this.updateWorldVerts(a);
        };
        return d;
      }(f.default);
      d.default = a;
      c.exports = d.default;
    }, {
      "../../../../../components/CCSprite": 115,
      "../../../../assembler-2d": 188
    }],
    213: [function (a, b, c) {
      "use strict";
  
      var d;
      function f(a, b) {
        return (f = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      c.__esModule = true;
      c.default = undefined;
      var e = function (a) {
        var b;
        var c;
        function d() {
          return a.apply(this, arguments) || this;
        }
        c = a;
        (b = d).prototype = Object.create(c.prototype);
        b.prototype.constructor = b;
        f(b, c);
        var g = d.prototype;
        g.initData = function () {
          this._renderData.createFlexData(0, 4, 6, this.getVfmt());
        };
        g.updateRenderData = function (a) {
          this.packToDynamicAtlas(a, a._spriteFrame);
          var b = a.spriteFrame;
          if (b) {
            var c = b.vertices;
            if (c) {
              this.verticesCount = c.x.length;
              this.indicesCount = c.triangles.length;
              var d = this._renderData._flexBuffer;
              if (d.reserve(this.verticesCount, this.indicesCount)) {
                this.updateColor(a);
                a._vertsDirty = true;
              }
              d.used(this.verticesCount, this.indicesCount);
              this.updateIndices(c.triangles);
              if (a._vertsDirty) {
                this.updateUVs(a);
                this.updateVerts(a);
                this.updateWorldVerts(a);
                a._vertsDirty = false;
              }
            }
          }
        };
        g.updateIndices = function (a) {
          this._renderData.iDatas[0].set(a);
        };
        g.updateUVs = function (b) {
          for (var d = b.spriteFrame.vertices, e = d.nu, f = d.nv, g = this.uvOffset, h = this.floatsPerVert, i = this._renderData.vDatas[0], a = 0; a < e.length; a++) {
            var j = h * a + g;
            i[j] = e[a];
            i[j + 1] = f[a];
          }
        };
        g.updateVerts = function (j) {
          var k = j.node;
          var e = Math.abs(k.width);
          var i = Math.abs(k.height);
          var n = k.anchorX * e;
          var q = k.anchorY * i;
          var r = j.spriteFrame;
          var a = r.vertices;
          var o = a.x;
          var c = a.y;
          var l = r._originalSize.width;
          var h = r._originalSize.height;
          var s = r._rect.width;
          var f = r._rect.height;
          var d = r._offset.x + (l - s) / 2;
          var t = r._offset.y + (h - f) / 2;
          var p = e / (j.trim ? s : l);
          var u = i / (j.trim ? f : h);
          var g = this._local;
          if (j.trim) {
            for (var m = 0, v = o.length; m < v; m++) {
              var w = m * 2;
              g[w] = (o[m] - d) * p - n;
              g[w + 1] = (h - c[m] - t) * u - q;
            }
          } else {
            for (var z = 0, B = o.length; z < B; z++) {
              var x = z * 2;
              g[x] = o[z] * p - n;
              g[x + 1] = (h - c[z]) * u - q;
            }
          }
          if (r._flipX) {
            for (var D = 0, F = this.verticesCount; D < F; D++) {
              g[D * 2] = e - g[D * 2] - n * 2;
            }
          }
          if (r._flipY) {
            for (var G = 0, H = this.verticesCount; G < H; G++) {
              g[G * 2 + 1] = i - g[G * 2 + 1] - q * 2;
            }
          }
        };
        g.updateWorldVerts = function (b) {
          for (var g = b.node._worldMatrix.m, e = g[0], i = g[1], j = g[4], k = g[5], m = g[12], a = g[13], n = this._local, c = this._renderData.vDatas[0], l = this.floatsPerVert, h = 0, o = this.verticesCount; h < o; h++) {
            var f = n[h * 2];
            var p = n[h * 2 + 1];
            c[l * h] = f * e + p * j + m;
            c[l * h + 1] = f * i + p * k + a;
          }
        };
        return d;
      }(((d = a("../../../../assembler-2d")) && d.__esModule ? d : {
        default: d
      }).default);
      c.default = e;
      b.exports = c.default;
    }, {
      "../../../../assembler-2d": 188
    }],
    214: [function (b, j, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var i;
      var k = (i = b("../../../../assembler-2d")) && i.__esModule ? i : {
        default: i
      };
      function m(a, b) {
        return (m = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      var q = Math.PI * 2;
      var w = [cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0)];
      var x = [0, 0, 0, 0];
      var c = [0, 0, 0, 0, 0, 0, 0, 0];
      var a = [cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0)];
      var h = [cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0), cc.v2(0, 0)];
      var z = cc.v2(0, 0);
      var f = [];
      function l(b, g, e, i, j, k, m) {
        var a;
        var n;
        var p = Math.sin(k);
        var l = Math.cos(k);
        if (Math.cos(k) !== 0) {
          a = p / l;
          if ((b - j.x) * l > 0) {
            var h = j.y + a * (b - j.x);
            m[0].x = b;
            m[0].y = h;
          }
          if ((g - j.x) * l > 0) {
            var q = j.y + a * (g - j.x);
            m[2].x = g;
            m[2].y = q;
          }
        }
        if (Math.sin(k) !== 0) {
          n = l / p;
          if ((i - j.y) * p > 0) {
            var f = j.x + n * (i - j.y);
            m[3].x = f;
            m[3].y = i;
          }
          if ((e - j.y) * p > 0) {
            var d = j.x + n * (e - j.y);
            m[1].x = d;
            m[1].y = e;
          }
        }
      }
      function t(b) {
        var c = b.node;
        var d = c.width;
        var e = c.height;
        var i = c.anchorX * d;
        var j = c.anchorY * e;
        var k = -i;
        var a = -j;
        var l = d - i;
        var h = e - j;
        var m = x;
        m[0] = k;
        m[1] = a;
        m[2] = l;
        m[3] = h;
        var n = b._fillCenter;
        var o = z.x = Math.min(Math.max(0, n.x), 1) * (l - k) + k;
        var p = z.y = Math.min(Math.max(0, n.y), 1) * (h - a) + a;
        w[0].x = w[3].x = k;
        w[1].x = w[2].x = l;
        w[0].y = w[1].y = a;
        w[2].y = w[3].y = h;
        f.length = 0;
        if (o !== m[0]) {
          f[0] = [3, 0];
        }
        if (o !== m[2]) {
          f[2] = [1, 2];
        }
        if (p !== m[1]) {
          f[1] = [0, 1];
        }
        if (p !== m[3]) {
          f[3] = [2, 3];
        }
      }
      function d(a, b) {
        var c;
        var d;
        c = b.x - a.x;
        d = b.y - a.y;
        if (c !== 0 || d !== 0) {
          if (c === 0) {
            if (d > 0) {
              return Math.PI * 0.5;
            } else {
              return Math.PI * 1.5;
            }
          }
          var e = Math.atan(d / c);
          if (c < 0) {
            e += Math.PI;
          }
          return e;
        }
      }
      var o = function (b) {
        var g;
        var j;
        function k() {
          return b.apply(this, arguments) || this;
        }
        j = b;
        (g = k).prototype = Object.create(j.prototype);
        g.prototype.constructor = g;
        m(g, j);
        var n = k.prototype;
        n.initData = function () {
          this._renderData.createFlexData(0, 4, 6, this.getVfmt());
          this.updateIndices();
        };
        n.updateRenderData = function (f) {
          b.prototype.updateRenderData.call(this, f);
          var e;
          var j;
          var k;
          var p;
          var u;
          var w;
          var A;
          var B;
          var C;
          var D = f.spriteFrame;
          this.packToDynamicAtlas(f, D);
          if (f._vertsDirty) {
            var y = f._fillStart;
            var F = f._fillRange;
            for (F < 0 && (y += F, F = -F); y >= 1;) {
              y -= 1;
            }
            for (; y < 0;) {
              y += 1;
            }
            y *= q;
            F *= q;
            t(f);
            w = (e = D)._texture.width;
            A = e._texture.height;
            B = e._rect;
            C = c;
            if (e._rotated) {
              j = B.x / w;
              k = (B.x + B.height) / w;
              p = B.y / A;
              u = (B.y + B.width) / A;
              C[0] = C[2] = j;
              C[4] = C[6] = k;
              C[3] = C[7] = u;
              C[1] = C[5] = p;
            } else {
              j = B.x / w;
              k = (B.x + B.width) / w;
              p = B.y / A;
              u = (B.y + B.height) / A;
              C[0] = C[4] = j;
              C[2] = C[6] = k;
              C[1] = C[3] = u;
              C[5] = C[7] = p;
            }
            l(x[0], x[2], x[1], x[3], z, y, a);
            l(x[0], x[2], x[1], x[3], z, y + F, h);
            this.updateVerts(f, y, F);
            f._vertsDirty = false;
          }
        };
        n.updateVerts = function (b, j, e) {
          var i = j + e;
          var k = this._local;
          k.length = 0;
          for (var n = 0, o = this.floatsPerVert * 3, c = 0; c < 4; ++c) {
            var r = f[c];
            if (r) {
              if (e >= q) {
                k.length = n + o;
                this._generateTriangle(k, n, z, w[r[0]], w[r[1]]);
                n += o;
              } else {
                var t = d(z, w[r[0]]);
                var u = d(z, w[r[1]]);
                if (u < t) {
                  u += q;
                }
                t -= q;
                u -= q;
                for (var v = 0; v < 3; ++v) {
                  if (!(t >= i)) {
                    if (t >= j) {
                      k.length = n + o;
                      if (u >= i) {
                        this._generateTriangle(k, n, z, w[r[0]], h[c]);
                      } else {
                        this._generateTriangle(k, n, z, w[r[0]], w[r[1]]);
                      }
                      n += o;
                    } else if (!(u <= j)) {
                      if (u <= i) {
                        k.length = n + o;
                        this._generateTriangle(k, n, z, a[c], w[r[1]]);
                        n += o;
                      } else {
                        k.length = n + o;
                        this._generateTriangle(k, n, z, a[c], h[c]);
                        n += o;
                      }
                    }
                  }
                  t += q;
                  u += q;
                }
              }
            }
          }
          this.allocWorldVerts(b);
          this.updateWorldVerts(b);
        };
        n.allocWorldVerts = function (b) {
          var d = b.node._color._val;
          var e = this._renderData;
          var f = this.floatsPerVert;
          var g = this._local;
          var i = g.length / f;
          this.verticesCount = this.indicesCount = i;
          var j = e._flexBuffer;
          if (j.reserve(i, i)) {
            this.updateIndices();
          }
          j.used(this.verticesCount, this.indicesCount);
          for (var a = e.vDatas[0], k = e.uintVDatas[0], c = this.uvOffset, l = 0; l < g.length; l += f) {
            var m = l + c;
            a[m] = g[m];
            a[m + 1] = g[m + 1];
            k[m + 2] = d;
          }
        };
        n.updateIndices = function () {
          for (var a = this._renderData.iDatas[0], b = 0; b < a.length; b++) {
            a[b] = b;
          }
        };
        n.updateWorldVerts = function (b) {
          for (var g = b.node._worldMatrix.m, e = g[0], i = g[1], j = g[4], k = g[5], m = g[12], a = g[13], n = this._local, c = this._renderData.vDatas[0], l = this.floatsPerVert, h = 0; h < n.length; h += l) {
            var o = n[h];
            var p = n[h + 1];
            c[h] = o * e + p * j + m;
            c[h + 1] = o * i + p * k + a;
          }
        };
        n._generateTriangle = function (b, c, e, g, i) {
          var j = x;
          var k = j[0];
          var a = j[1];
          var m = j[2];
          var l = j[3];
          var h = this.floatsPerVert;
          b[c] = e.x;
          b[c + 1] = e.y;
          b[c + h] = g.x;
          b[c + h + 1] = g.y;
          b[c + h * 2] = i.x;
          b[c + h * 2 + 1] = i.y;
          var n;
          var o;
          var p = this.uvOffset;
          n = (e.x - k) / (m - k);
          o = (e.y - a) / (l - a);
          this._generateUV(n, o, b, c + p);
          n = (g.x - k) / (m - k);
          o = (g.y - a) / (l - a);
          this._generateUV(n, o, b, c + h + p);
          n = (i.x - k) / (m - k);
          o = (i.y - a) / (l - a);
          this._generateUV(n, o, b, c + h * 2 + p);
        };
        n._generateUV = function (b, d, e, f) {
          var g = c[0] + (c[2] - c[0]) * b;
          var h = c[4] + (c[6] - c[4]) * b;
          var i = c[1] + (c[3] - c[1]) * b;
          var a = c[5] + (c[7] - c[5]) * b;
          e[f] = g + (h - g) * d;
          e[f + 1] = i + (a - i) * d;
        };
        return k;
      }(k.default);
      e.default = o;
      j.exports = e.default;
    }, {
      "../../../../assembler-2d": 188
    }],
    215: [function (a, b, c) {
      "use strict";
  
      var d;
      function f(a, b) {
        return (f = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      c.__esModule = true;
      c.default = undefined;
      var e = function (a) {
        var b;
        var c;
        function d() {
          return a.apply(this, arguments) || this;
        }
        c = a;
        (b = d).prototype = Object.create(c.prototype);
        b.prototype.constructor = b;
        f(b, c);
        var g = d.prototype;
        g.updateRenderData = function (a) {
          this.packToDynamicAtlas(a, a._spriteFrame);
          if (a._vertsDirty) {
            this.updateUVs(a);
            this.updateVerts(a);
            a._vertsDirty = false;
          }
        };
        g.updateUVs = function (b) {
          for (var c = b._spriteFrame.uv, d = this.uvOffset, e = this.floatsPerVert, f = this._renderData.vDatas[0], g = 0; g < 4; g++) {
            var h = g * 2;
            var i = e * g + d;
            f[i] = c[h];
            f[i + 1] = c[h + 1];
          }
        };
        g.updateVerts = function (b) {
          var j;
          var k;
          var q;
          var t;
          var w = b.node;
          var s = w.width;
          var a = w.height;
          var o = w.anchorX * s;
          var c = w.anchorY * a;
          if (b.trim) {
            j = -o;
            k = -c;
            q = s - o;
            t = a - c;
          } else {
            var l = b.spriteFrame;
            var h = l._originalSize.width;
            var u = l._originalSize.height;
            var f = l._rect.width;
            var d = l._rect.height;
            var x = l._offset;
            var p = s / h;
            var v = a / u;
            var g = x.x + (h - f) / 2;
            var m = x.x - (h - f) / 2;
            j = g * p - o;
            k = (x.y + (u - d) / 2) * v - c;
            q = s + m * p - o;
            t = a + (x.y - (u - d) / 2) * v - c;
          }
          var y = this._local;
          y[0] = j;
          y[1] = k;
          y[2] = q;
          y[3] = t;
          this.updateWorldVerts(b);
        };
        return d;
      }(((d = a("../../../../assembler-2d")) && d.__esModule ? d : {
        default: d
      }).default);
      c.default = e;
      b.exports = c.default;
    }, {
      "../../../../assembler-2d": 188
    }],
    216: [function (a, b, c) {
      "use strict";
  
      var d;
      function f(a, b) {
        return (f = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      c.__esModule = true;
      c.default = undefined;
      var e = function (a) {
        var b;
        var c;
        function d() {
          return a.apply(this, arguments) || this;
        }
        c = a;
        (b = d).prototype = Object.create(c.prototype);
        b.prototype.constructor = b;
        f(b, c);
        var g = d.prototype;
        g.initData = function () {
          if (!(this._renderData.meshCount > 0)) {
            this._renderData.createData(0, this.verticesFloats, this.indicesCount);
            for (var a = this._renderData.iDatas[0], b = 0, c = 0; c < 3; ++c) {
              for (var d = 0; d < 3; ++d) {
                var f = c * 4 + d;
                a[b++] = f;
                a[b++] = f + 1;
                a[b++] = f + 4;
                a[b++] = f + 1;
                a[b++] = f + 5;
                a[b++] = f + 4;
              }
            }
          }
        };
        g.initLocal = function () {
          this._local = [];
          this._local.length = 8;
        };
        g.updateRenderData = function (a) {
          var b = a._spriteFrame;
          this.packToDynamicAtlas(a, b);
          if (a._vertsDirty) {
            this.updateUVs(a);
            this.updateVerts(a);
            a._vertsDirty = false;
          }
        };
        g.updateVerts = function (b) {
          var g = b.node;
          var e = g.width;
          var i = g.height;
          var j = g.anchorX * e;
          var k = g.anchorY * i;
          var m = b.spriteFrame;
          var a = m.insetLeft;
          var n = m.insetRight;
          var c = m.insetTop;
          var l = m.insetBottom;
          var h = e - a - n;
          var o = i - c - l;
          var q = e / (a + n);
          var r = i / (c + l);
          q = isNaN(q) || q > 1 ? 1 : q;
          r = isNaN(r) || r > 1 ? 1 : r;
          h = h < 0 ? 0 : h;
          o = o < 0 ? 0 : o;
          var s = this._local;
          s[0] = -j;
          s[1] = -k;
          s[2] = a * q - j;
          s[3] = l * r - k;
          s[4] = s[2] + h;
          s[5] = s[3] + o;
          s[6] = e - j;
          s[7] = i - k;
          this.updateWorldVerts(b);
        };
        g.updateUVs = function (b) {
          for (var d = this._renderData.vDatas[0], e = b.spriteFrame.uvSliced, f = this.uvOffset, g = this.floatsPerVert, h = 0; h < 4; ++h) {
            for (var i = 0; i < 4; ++i) {
              var j = h * 4 + i;
              var k = e[j];
              var m = j * g;
              d[m + f] = k.u;
              d[m + f + 1] = k.v;
            }
          }
        };
        g.updateWorldVerts = function (b) {
          for (var g = b.node._worldMatrix.m, e = g[0], i = g[1], j = g[4], k = g[5], m = g[12], a = g[13], n = this._local, c = this._renderData.vDatas[0], l = this.floatsPerVert, h = 0; h < 4; ++h) {
            for (var o = n[h * 2 + 1], q = 0; q < 4; ++q) {
              var r = n[q * 2];
              var s = (h * 4 + q) * l;
              c[s] = r * e + o * j + m;
              c[s + 1] = r * i + o * k + a;
            }
          }
        };
        return d;
      }(((d = a("../../../../assembler-2d")) && d.__esModule ? d : {
        default: d
      }).default);
      c.default = e;
      Object.assign(e.prototype, {
        verticesCount: 16,
        indicesCount: 54
      });
      b.exports = c.default;
    }, {
      "../../../../assembler-2d": 188
    }],
    217: [function (a, b, c) {
      "use strict";
  
      var d;
      function f(a, b) {
        return (f = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      c.__esModule = true;
      c.default = undefined;
      var e = function (a) {
        var b;
        var c;
        function d() {
          return a.apply(this, arguments) || this;
        }
        c = a;
        (b = d).prototype = Object.create(c.prototype);
        b.prototype.constructor = b;
        f(b, c);
        var g = d.prototype;
        g.initData = function () {
          this.verticesCount = 0;
          this.contentWidth = 0;
          this.contentHeight = 0;
          this.rectWidth = 0;
          this.rectHeight = 0;
          this.hRepeat = 0;
          this.vRepeat = 0;
          this.row = 0;
          this.col = 0;
          this._renderData.createFlexData(0, 4, 6, this.getVfmt());
          this._updateIndices();
        };
        g.initLocal = function () {
          this._local = {
            x: [],
            y: []
          };
        };
        g._updateIndices = function () {
          for (var a = this._renderData.iDatas[0], b = 0, c = 0, d = a.length; b < d; b += 6, c += 4) {
            a[b] = c;
            a[b + 1] = c + 1;
            a[b + 2] = c + 2;
            a[b + 3] = c + 1;
            a[b + 4] = c + 3;
            a[b + 5] = c + 2;
          }
        };
        g.updateRenderData = function (b) {
          var g = b._spriteFrame;
          this.packToDynamicAtlas(b, g);
          var e = b.node;
          var i = this.contentWidth = Math.abs(e.width);
          var j = this.contentHeight = Math.abs(e.height);
          var k = g._rect;
          var m = g.insetLeft;
          var a = g.insetRight;
          var n = k.width - m - a;
          var c = g.insetTop;
          var l = g.insetBottom;
          var h = k.height - c - l;
          this.sizableWidth = i - m - a;
          this.sizableHeight = j - c - l;
          this.sizableWidth = this.sizableWidth > 0 ? this.sizableWidth : 0;
          this.sizableHeight = this.sizableHeight > 0 ? this.sizableHeight : 0;
          var o = this.hRepeat = n === 0 ? this.sizableWidth : this.sizableWidth / n;
          var f = this.vRepeat = h === 0 ? this.sizableHeight : this.sizableHeight / h;
          var d = (this.row = Math.ceil(f + 2)) * (this.col = Math.ceil(o + 2));
          this.verticesCount = d * 4;
          this.indicesCount = d * 6;
          var q = this._renderData._flexBuffer;
          if (q.reserve(this.verticesCount, this.indicesCount)) {
            this._updateIndices();
            this.updateColor(b);
          }
          q.used(this.verticesCount, this.indicesCount);
          if (b._vertsDirty) {
            this.updateUVs(b);
            this.updateVerts(b);
            b._vertsDirty = false;
          }
        };
        g.updateVerts = function (b) {
          var j = b._spriteFrame;
          var e = j._rect;
          var i = b.node;
          var k = i.anchorX * i.width;
          var n = i.anchorY * i.height;
          var q = this.row;
          var a = this.col;
          var o = this.contentWidth;
          var c = this.contentHeight;
          var l = this._local;
          var h = l.x;
          var r = l.y;
          h.length = r.length = 0;
          var f;
          var s;
          var t = j.insetLeft;
          var p = j.insetRight;
          var u = e.width - t - p;
          var g = j.insetTop;
          var m = j.insetBottom;
          var v = e.height - g - m;
          var w = i.width / (t + p) > 1 ? 1 : i.width / (t + p);
          var y = i.height / (g + m) > 1 ? 1 : i.height / (g + m);
          f = u > 0 ? Math.floor(this.sizableWidth * 1000) / 1000 % u == 0 ? u : this.sizableWidth % u : this.sizableWidth;
          s = v > 0 ? Math.floor(this.sizableHeight * 1000) / 1000 % v == 0 ? v : this.sizableHeight % v : this.sizableHeight;
          for (var z = 0; z <= a; z++) {
            if (z === 0) {
              h[z] = -k;
            } else if (z > 0 && z < a) {
              h[z] = z === 1 ? t * w + Math.min(u, this.sizableWidth) - k : u > 0 ? z === a - 1 ? t + f + u * (z - 2) - k : t + Math.min(u, this.sizableWidth) + u * (z - 2) - k : t + this.sizableWidth - k;
            } else if (z === a) {
              h[z] = Math.min(t + this.sizableWidth + p, o) - k;
            }
          }
          for (var A = 0; A <= q; A++) {
            if (A === 0) {
              r[A] = -n;
            } else if (A > 0 && A < q) {
              r[A] = A === 1 ? m * y + Math.min(v, this.sizableHeight) - n : v > 0 ? A === q - 1 ? m + s + (A - 2) * v - n : m + Math.min(v, this.sizableHeight) + (A - 2) * v - n : m + this.sizableHeight - n;
            } else if (A === q) {
              r[A] = Math.min(m + this.sizableHeight + g, c) - n;
            }
          }
          this.updateWorldVerts(b);
        };
        g.updateWorldVerts = function (b) {
          for (var j, k, q, t, w = this._renderData, s = this._local, a = s.x, o = s.y, c = w.vDatas[0], l = this.row, h = this.col, u = b.node._worldMatrix.m, f = u[0], d = u[1], z = u[4], p = u[5], v = u[12], g = u[13], m = this.floatsPerVert, y = 0, B = 0, D = l; B < D; ++B) {
            q = o[B];
            t = o[B + 1];
            for (var A = 0, F = h; A < F; ++A) {
              j = a[A];
              k = a[A + 1];
              c[y] = j * f + q * z + v;
              c[y + 1] = j * d + q * p + g;
              c[y += m] = k * f + q * z + v;
              c[y + 1] = k * d + q * p + g;
              c[y += m] = j * f + t * z + v;
              c[y + 1] = j * d + t * p + g;
              c[y += m] = k * f + t * z + v;
              c[y + 1] = k * d + t * p + g;
              y += m;
            }
          }
        };
        g.updateUVs = function (j) {
          var k = this._renderData.vDatas[0];
          if (k) {
            for (var e = j._spriteFrame, i = e._rect, n = e.insetLeft, q = e.insetRight, r = i.width - n - q, a = e.insetTop, o = e.insetBottom, c = i.height - a - o, l = this.row, h = this.col, s = this.hRepeat, f = this.vRepeat, d = 0, t = 0, u = j.spriteFrame.uv, v = j.spriteFrame.uvSliced, g = j.spriteFrame._rotated, m = this.floatsPerVert, w = this.uvOffset, y = [], z = [], A = 0, B = l; A < B; ++A) {
              t = this.sizableHeight > c ? this.sizableHeight >= A * c ? 1 : f % 1 : f;
              for (var C = 0, D = h; C < D; ++C) {
                d = this.sizableWidth > r ? this.sizableWidth >= C * r ? 1 : s % 1 : s;
                if (g) {
                  if (A === 0) {
                    y[0] = v[0].u;
                    y[1] = v[0].u;
                    y[2] = v[4].u + (v[8].u - v[4].u) * t;
                  } else if (A < l - 1) {
                    y[0] = v[4].u;
                    y[1] = v[4].u;
                    y[2] = v[4].u + (v[8].u - v[4].u) * t;
                  } else if (A === l - 1) {
                    y[0] = v[8].u;
                    y[1] = v[8].u;
                    y[2] = v[12].u;
                  }
                  if (C === 0) {
                    z[0] = v[0].v;
                    z[1] = v[1].v + (v[2].v - v[1].v) * d;
                    z[2] = v[0].v;
                  } else if (C < h - 1) {
                    z[0] = v[1].v;
                    z[1] = v[1].v + (v[2].v - v[1].v) * d;
                    z[2] = v[1].v;
                  } else if (C === h - 1) {
                    z[0] = v[2].v;
                    z[1] = v[3].v;
                    z[2] = v[2].v;
                  }
                  y[3] = y[2];
                  z[3] = z[1];
                } else {
                  if (C === 0) {
                    y[0] = v[0].u;
                    y[1] = v[1].u + (v[2].u - v[1].u) * d;
                    y[2] = u[0];
                  } else if (C < h - 1) {
                    y[0] = v[1].u;
                    y[1] = v[1].u + (v[2].u - v[1].u) * d;
                    y[2] = v[1].u;
                  } else if (C === h - 1) {
                    y[0] = v[2].u;
                    y[1] = v[3].u;
                    y[2] = v[2].u;
                  }
                  if (A === 0) {
                    z[0] = v[0].v;
                    z[1] = v[0].v;
                    z[2] = v[4].v + (v[8].v - v[4].v) * t;
                  } else if (A < l - 1) {
                    z[0] = v[4].v;
                    z[1] = v[4].v;
                    z[2] = v[4].v + (v[8].v - v[4].v) * t;
                  } else if (A === l - 1) {
                    z[0] = v[8].v;
                    z[1] = v[8].v;
                    z[2] = v[12].v;
                  }
                  y[3] = y[1];
                  z[3] = z[2];
                }
                k[w] = y[0];
                k[w + 1] = z[0];
                k[w += m] = y[1];
                k[w + 1] = z[1];
                k[w += m] = y[2];
                k[w + 1] = z[2];
                k[w += m] = y[3];
                k[w + 1] = z[3];
                w += m;
              }
            }
          }
        };
        return d;
      }(((d = a("../../../../assembler-2d")) && d.__esModule ? d : {
        default: d
      }).default);
      c.default = e;
      b.exports = c.default;
    }, {
      "../../../../assembler-2d": 188
    }],
    218: [function (b) {
      "use strict";
  
      var g = e(b("../../../assembler"));
      var j = b("../../../../components/CCSprite");
      var i = e(b("./2d/simple"));
      var k = e(b("./2d/sliced"));
      var m = e(b("./2d/tiled"));
      var n = e(b("./2d/radial-filled"));
      var a = e(b("./2d/bar-filled"));
      var o = e(b("./2d/mesh"));
      var c = e(b("./3d/simple"));
      var l = e(b("./3d/sliced"));
      var h = e(b("./3d/tiled"));
      var q = e(b("./3d/radial-filled"));
      var f = e(b("./3d/bar-filled"));
      var d = e(b("./3d/mesh"));
      function e(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      var p = {
        getConstructor: function (b) {
          var g = b.node.is3DNode;
          var e = g ? c.default : i.default;
          switch (b.type) {
            case j.Type.SLICED:
              e = g ? l.default : k.default;
              break;
            case j.Type.TILED:
              e = g ? h.default : m.default;
              break;
            case j.Type.FILLED:
              e = b._fillType === j.FillType.RADIAL ? g ? q.default : n.default : g ? f.default : a.default;
              break;
            case j.Type.MESH:
              e = g ? d.default : o.default;
          }
          return e;
        },
        Simple: i.default,
        Sliced: k.default,
        Tiled: m.default,
        RadialFilled: n.default,
        BarFilled: a.default,
        Mesh: o.default,
        Simple3D: c.default,
        Sliced3D: l.default,
        Tiled3D: h.default,
        RadialFilled3D: q.default,
        BarFilled3D: f.default,
        Mesh3D: d.default
      };
      g.default.register(cc.Sprite, p);
    }, {
      "../../../../components/CCSprite": 115,
      "../../../assembler": 190,
      "./2d/bar-filled": 212,
      "./2d/mesh": 213,
      "./2d/radial-filled": 214,
      "./2d/simple": 215,
      "./2d/sliced": 216,
      "./2d/tiled": 217,
      "./3d/bar-filled": undefined,
      "./3d/mesh": undefined,
      "./3d/radial-filled": undefined,
      "./3d/simple": undefined,
      "./3d/sliced": undefined,
      "./3d/tiled": undefined
    }],
    219: [function (a, b, c) {
      "use strict";
  
      c.__esModule = true;
      c.default = undefined;
      var d = function () {
        function a(a, b, c, d, e) {
          this._handler = a;
          this._index = b;
          this._vfmt = e;
          this._verticesBytes = e._bytes;
          this._initVerticesCount = c;
          this._initIndicesCount = d;
          this.reset();
        }
        var b = a.prototype;
        b._reallocVData = function (a, b) {
          this.vData = new Float32Array(a);
          this.uintVData = new Uint32Array(this.vData.buffer);
          if (b) {
            this.vData.set(b);
          }
          this._handler.updateMesh(this._index, this.vData, this.iData);
        };
        b._reallocIData = function (a, b) {
          this.iData = new Uint16Array(a);
          if (b) {
            this.iData.set(b);
          }
          this._handler.updateMesh(this._index, this.vData, this.iData);
        };
        b.reserve = function (a, b) {
          var c = a * this._verticesBytes >> 2;
          var d = this.vData.length;
          var e = false;
          if (c > d) {
            for (; d < c;) {
              d *= 2;
            }
            this._reallocVData(d, this.vData);
            e = true;
          }
          var f = this.iData.length;
          if (b > f) {
            for (; f < b;) {
              f *= 2;
            }
            this._reallocIData(b, this.iData);
            e = true;
          }
          return e;
        };
        b.used = function (a, b) {
          this.usedVertices = a;
          this.usedIndices = b;
          this.usedVerticesFloats = a * this._verticesBytes >> 2;
          this._handler.updateMeshRange(a, b);
        };
        b.reset = function () {
          var a = this._initVerticesCount * this._verticesBytes >> 2;
          this._reallocVData(a);
          this._reallocIData(this._initIndicesCount);
          this.usedVertices = 0;
          this.usedVerticesFloats = 0;
          this.usedIndices = 0;
        };
        return a;
      }();
      c.default = d;
      cc.FlexBuffer = d;
      b.exports = c.default;
    }, {}],
    220: [function (a, b) {
      "use strict";
  
      var c;
      var d = (c = a("../../../renderer/gfx")) && c.__esModule ? c : {
        default: c
      };
      var e = cc.Class({
        name: "cc.MeshBuffer",
        ctor: function (a, b) {
          this.init(a, b);
        },
        init: function (a, b) {
          this.byteOffset = 0;
          this.indiceOffset = 0;
          this.vertexOffset = 0;
          this.indiceStart = 0;
          this._dirty = false;
          this._vertexFormat = b;
          this._vertexBytes = this._vertexFormat._bytes;
          this._arrOffset = 0;
          this._vbArr = [];
          this._vb = new d.default.VertexBuffer(a._device, b, d.default.USAGE_DYNAMIC, new ArrayBuffer(), 0);
          this._vbArr[0] = this._vb;
          this._ibArr = [];
          this._ib = new d.default.IndexBuffer(a._device, d.default.INDEX_FMT_UINT16, d.default.USAGE_STATIC, new ArrayBuffer(), 0);
          this._ibArr[0] = this._ib;
          this._vData = null;
          this._uintVData = null;
          this._iData = null;
          this._batcher = a;
          this._initVDataCount = b._bytes * 256;
          this._initIDataCount = 1536;
          this._offsetInfo = {
            byteOffset: 0,
            vertexOffset: 0,
            indiceOffset: 0
          };
          this._reallocBuffer();
        },
        uploadData: function () {
          if (this.byteOffset !== 0 && this._dirty) {
            var a = new Float32Array(this._vData.buffer, 0, this.byteOffset >> 2);
            var b = new Uint16Array(this._iData.buffer, 0, this.indiceOffset);
            this._vb.update(0, a);
            this._ib.update(0, b);
            this._dirty = false;
          }
        },
        switchBuffer: function () {
          var a = ++this._arrOffset;
          this.byteOffset = 0;
          this.vertexOffset = 0;
          this.indiceOffset = 0;
          this.indiceStart = 0;
          if (a < this._vbArr.length) {
            this._vb = this._vbArr[a];
            this._ib = this._ibArr[a];
          } else {
            this._vb = new d.default.VertexBuffer(this._batcher._device, this._vertexFormat, d.default.USAGE_DYNAMIC, new ArrayBuffer(), 0);
            this._vbArr[a] = this._vb;
            this._ib = new d.default.IndexBuffer(this._batcher._device, d.default.INDEX_FMT_UINT16, d.default.USAGE_STATIC, new ArrayBuffer(), 0);
            this._ibArr[a] = this._ib;
          }
        },
        checkAndSwitchBuffer: function (a) {
          if (this.vertexOffset + a > 65535) {
            this.uploadData();
            this._batcher._flush();
            this.switchBuffer();
          }
        },
        requestStatic: function (a, b) {
          this.checkAndSwitchBuffer(a);
          var c = this.byteOffset + a * this._vertexBytes;
          var d = this.indiceOffset + b;
          var e = this._vData.byteLength;
          var f = this._iData.length;
          if (c > e || d > f) {
            for (; e < c || f < d;) {
              this._initVDataCount *= 2;
              this._initIDataCount *= 2;
              e = this._initVDataCount * 4;
              f = this._initIDataCount;
            }
            this._reallocBuffer();
          }
          this._updateOffset(a, b, c);
        },
        _updateOffset: function (a, b, c) {
          var d = this._offsetInfo;
          d.vertexOffset = this.vertexOffset;
          this.vertexOffset += a;
          d.indiceOffset = this.indiceOffset;
          this.indiceOffset += b;
          d.byteOffset = this.byteOffset;
          this.byteOffset = c;
          this._dirty = true;
        },
        request: function (a, b) {
          if (this._batcher._buffer !== this) {
            this._batcher._flush();
            this._batcher._buffer = this;
          }
          this.requestStatic(a, b);
          return this._offsetInfo;
        },
        _reallocBuffer: function () {
          this._reallocVData(true);
          this._reallocIData(true);
        },
        _reallocVData: function (a) {
          var b;
          if (this._vData) {
            b = new Uint8Array(this._vData.buffer);
          }
          this._vData = new Float32Array(this._initVDataCount);
          this._uintVData = new Uint32Array(this._vData.buffer);
          var c = new Uint8Array(this._uintVData.buffer);
          if (b && a) {
            for (var d = 0, f = b.length; d < f; d++) {
              c[d] = b[d];
            }
          }
        },
        _reallocIData: function (a) {
          var b = this._iData;
          this._iData = new Uint16Array(this._initIDataCount);
          if (b && a) {
            for (var c = this._iData, d = 0, e = b.length; d < e; d++) {
              c[d] = b[d];
            }
          }
        },
        reset: function () {
          this._arrOffset = 0;
          this._vb = this._vbArr[0];
          this._ib = this._ibArr[0];
          this.byteOffset = 0;
          this.indiceOffset = 0;
          this.vertexOffset = 0;
          this.indiceStart = 0;
          this._dirty = false;
        },
        destroy: function () {
          this.reset();
          for (var a = 0; a < this._vbArr.length; a++) {
            this._vbArr[a].destroy();
          }
          this._vbArr = null;
          for (var b = 0; b < this._ibArr.length; b++) {
            this._ibArr[b].destroy();
          }
          this._ibArr = null;
          this._ib = null;
          this._vb = null;
        },
        forwardIndiceStartToOffset: function () {
          this.indiceStart = this.indiceOffset;
        }
      });
      if (cc.sys.isSafari14) {
        e.prototype.checkAndSwitchBuffer = function (a) {
          if (this.vertexOffset + a > 65535) {
            this.uploadData();
            this._batcher._flush();
          }
        };
        e.prototype.forwardIndiceStartToOffset = function () {
          this.uploadData();
          this.switchBuffer();
        };
      }
      cc.MeshBuffer = b.exports = e;
    }, {
      "../../../renderer/gfx": 282
    }],
    221: [function (b, g) {
      "use strict";
  
      var e = k(b("../../../renderer/core/input-assembler"));
      var i = k(b("../../../renderer/memop/recycle-pool"));
      var j = k(b("../../../renderer/scene/model"));
      function k(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      var m = b("./vertex-format");
      var a = m.vfmtPosUvColor;
      var n = m.vfmt3D;
      var c = b("./quad-buffer");
      var l = b("./mesh-buffer");
      var h = b("./spine-buffer");
      var o = b("../../assets/material/CCMaterial");
      new (b("../../platform/id-generater"))("VertextFormat");
      var f = {};
      var d = new o();
      var q = new e.default();
      q._count = 0;
      function p(b, c) {
        this._renderScene = c;
        this._device = b;
        this.walking = false;
        this.material = d;
        this.cullingMask = 1;
        this._iaPool = new i.default(function () {
          return new e.default();
        }, 16);
        this._modelPool = new i.default(function () {
          return new j.default();
        }, 16);
        this._quadBuffer = this.getBuffer("quad", a);
        this._meshBuffer = this.getBuffer("mesh", a);
        this._quadBuffer3D = this.getBuffer("quad", n);
        this._meshBuffer3D = this.getBuffer("mesh", n);
        this._buffer = this._meshBuffer;
        this._batchedModels = [];
        this._dummyNode = new cc.Node();
        this._sortKey = 0;
        this.node = this._dummyNode;
        this.parentOpacity = 1;
        this.parentOpacityDirty = 0;
        this.worldMatDirty = 0;
      }
      p.prototype = {
        constructor: p,
        reset: function () {
          this._iaPool.reset();
          for (var a = this._renderScene, b = this._batchedModels, c = 0; c < b.length; ++c) {
            b[c].setInputAssembler(null);
            b[c].setEffect(null);
            a.removeModel(b[c]);
          }
          this._modelPool.reset();
          b.length = 0;
          this._sortKey = 0;
          for (var e in f) {
            f[e].reset();
          }
          this._buffer = this._meshBuffer;
          this.node = this._dummyNode;
          this.material = d;
          this.cullingMask = 1;
          this.parentOpacity = 1;
          this.parentOpacityDirty = 0;
          this.worldMatDirty = 0;
        },
        _flushMaterial: function (a) {
          if (a) {
            this.material = a;
            var b = a.effect;
            if (b) {
              var c = this._modelPool.add();
              this._batchedModels.push(c);
              c.sortKey = this._sortKey++;
              c._cullingMask = this.cullingMask;
              c.setNode(this.node);
              c.setEffect(b, null);
              c.setInputAssembler(q);
              this._renderScene.addModel(c);
            }
          }
        },
        _flush: function () {
          var a = this.material;
          var b = this._buffer;
          var c = b.indiceOffset - b.indiceStart;
          if (this.walking && a && !(c <= 0)) {
            var d = a.effect;
            if (d) {
              var e = this._iaPool.add();
              e._vertexBuffer = b._vb;
              e._indexBuffer = b._ib;
              e._start = b.indiceStart;
              e._count = c;
              var f = this._modelPool.add();
              this._batchedModels.push(f);
              f.sortKey = this._sortKey++;
              f._cullingMask = this.cullingMask;
              f.setNode(this.node);
              f.setEffect(d);
              f.setInputAssembler(e);
              this._renderScene.addModel(f);
              b.forwardIndiceStartToOffset();
            }
          }
        },
        _flushIA: function (a) {
          if (a) {
            var b = this.material.effect;
            if (b) {
              var c = this._modelPool.add();
              this._batchedModels.push(c);
              c.sortKey = this._sortKey++;
              c._cullingMask = this.cullingMask;
              c.setNode(this.node);
              c.setEffect(b);
              c.setInputAssembler(a);
              this._renderScene.addModel(c);
            }
          }
        },
        terminate: function () {
          if (cc.dynamicAtlasManager && cc.dynamicAtlasManager.enabled) {
            cc.dynamicAtlasManager.update();
          }
          this._flush();
          for (var a in f) {
            f[a].uploadData();
          }
          this.walking = false;
        },
        getBuffer: function (a, b) {
          var d = a + b.getHash();
          var e = f[d];
          if (!e) {
            if (a === "mesh") {
              e = new l(this, b);
            } else if (a === "quad") {
              e = new c(this, b);
            } else {
              if (a !== "spine") {
                return null;
              }
              e = new h(this, b);
            }
            f[d] = e;
          }
          return e;
        }
      };
      g.exports = p;
    }, {
      "../../../renderer/core/input-assembler": 272,
      "../../../renderer/memop/recycle-pool": 297,
      "../../../renderer/scene/model": 303,
      "../../assets/material/CCMaterial": 76,
      "../../platform/id-generater": 179,
      "./mesh-buffer": 220,
      "./quad-buffer": 222,
      "./spine-buffer": 224,
      "./vertex-format": 225
    }],
    222: [function (a, b) {
      "use strict";
  
      var c = a("./mesh-buffer");
      var d = cc.Class({
        name: "cc.QuadBuffer",
        extends: c,
        _fillQuadBuffer: function () {
          for (var a = this._initIDataCount / 6, b = this._iData, c = 0, d = 0; c < a; c++) {
            var e = c * 4;
            b[d++] = e;
            b[d++] = e + 1;
            b[d++] = e + 2;
            b[d++] = e + 1;
            b[d++] = e + 3;
            b[d++] = e + 2;
          }
          var f = new Uint16Array(this._iData.buffer, 0, a * 6);
          this._ib.update(0, f);
        },
        uploadData: function () {
          if (this.byteOffset !== 0 && this._dirty) {
            var a = new Float32Array(this._vData.buffer, 0, this.byteOffset >> 2);
            this._vb.update(0, a);
            this._dirty = false;
          }
        },
        switchBuffer: function () {
          this._super();
          var a = new Uint16Array(this._iData.buffer, 0, this._initIDataCount);
          this._ib.update(0, a);
        },
        _reallocBuffer: function () {
          this._reallocVData(true);
          this._reallocIData();
          this._fillQuadBuffer();
        }
      });
      cc.QuadBuffer = b.exports = d;
    }, {
      "./mesh-buffer": 220
    }],
    223: [function (b, c, d) {
      "use strict";
  
      d.__esModule = true;
      d.default = h;
      var e;
      var f = (e = b("./flex-buffer")) && e.__esModule ? e : {
        default: e
      };
      var g = b("./vertex-format");
      function h() {
        this.vDatas = [];
        this.uintVDatas = [];
        this.iDatas = [];
        this.meshCount = 0;
        this._infos = null;
        this._flexBuffer = null;
      }
      cc.js.mixin(h.prototype, {
        init: function () {},
        clear: function () {
          this.vDatas.length = 0;
          this.iDatas.length = 0;
          this.uintVDatas.length = 0;
          this.meshCount = 0;
          this._infos = null;
          if (this._flexBuffer) {
            this._flexBuffer.reset();
          }
        },
        updateMesh: function (a, b, c) {
          this.vDatas[a] = b;
          this.uintVDatas[a] = new Uint32Array(b.buffer, 0, b.length);
          this.iDatas[a] = c;
          this.meshCount = this.vDatas.length;
        },
        updateMeshRange: function () {},
        createData: function (a, b, c) {
          var d = new Float32Array(b);
          var e = new Uint16Array(c);
          this.updateMesh(a, d, e);
        },
        createQuadData: function (a, b, c) {
          this.createData(a, b, c);
          this.initQuadIndices(this.iDatas[a]);
        },
        createFlexData: function (a, b, c, d) {
          d = d || g.vfmtPosUvColor;
          this._flexBuffer = new f.default(this, a, b, c, d);
        },
        initQuadIndices: function (a) {
          for (var b = a.length / 6, c = 0, d = 0; c < b; c++) {
            var e = c * 4;
            a[d++] = e;
            a[d++] = e + 1;
            a[d++] = e + 2;
            a[d++] = e + 1;
            a[d++] = e + 3;
            a[d++] = e + 2;
          }
        }
      });
      cc.RenderData = h;
      c.exports = d.default;
    }, {
      "./flex-buffer": 219,
      "./vertex-format": 225
    }],
    224: [function (a, b) {
      "use strict";
  
      var c = cc.Class({
        name: "cc.SpineBuffer",
        extends: a("./mesh-buffer"),
        requestStatic: function (b, c) {
          this.checkAndSwitchBuffer(b);
          var d = this.byteOffset + b * this._vertexBytes;
          var e = this.indiceOffset + c;
          var f = this._vData.byteLength;
          var g = this._iData.length;
          if (d > f || e > g) {
            for (; f < d || g < e;) {
              this._initVDataCount *= 2;
              this._initIDataCount *= 2;
              f = this._initVDataCount * 4;
              g = this._initIDataCount;
            }
            this._reallocBuffer();
          }
          var h = this._offsetInfo;
          h.vertexOffset = this.vertexOffset;
          h.indiceOffset = this.indiceOffset;
          h.byteOffset = this.byteOffset;
        },
        adjust: function (a, b) {
          this.vertexOffset += a;
          this.indiceOffset += b;
          this.byteOffset = this.byteOffset + a * this._vertexBytes;
          this._dirty = true;
        }
      });
      cc.SpineBuffer = b.exports = c;
    }, {
      "./mesh-buffer": 220
    }],
    225: [function (b, d) {
      "use strict";
  
      var e;
      var f = (e = b("../../../renderer/gfx")) && e.__esModule ? e : {
        default: e
      };
      var g = new f.default.VertexFormat([{
        name: f.default.ATTR_POSITION,
        type: f.default.ATTR_TYPE_FLOAT32,
        num: 3
      }, {
        name: f.default.ATTR_UV0,
        type: f.default.ATTR_TYPE_FLOAT32,
        num: 2
      }, {
        name: f.default.ATTR_COLOR,
        type: f.default.ATTR_TYPE_UINT8,
        num: 4,
        normalize: true
      }]);
      g.name = "vfmt3D";
      f.default.VertexFormat.XYZ_UV_Color = g;
      var h = new f.default.VertexFormat([{
        name: f.default.ATTR_POSITION,
        type: f.default.ATTR_TYPE_FLOAT32,
        num: 2
      }, {
        name: f.default.ATTR_UV0,
        type: f.default.ATTR_TYPE_FLOAT32,
        num: 2
      }, {
        name: f.default.ATTR_COLOR,
        type: f.default.ATTR_TYPE_UINT8,
        num: 4,
        normalize: true
      }]);
      h.name = "vfmtPosUvColor";
      f.default.VertexFormat.XY_UV_Color = h;
      var j = new f.default.VertexFormat([{
        name: f.default.ATTR_POSITION,
        type: f.default.ATTR_TYPE_FLOAT32,
        num: 2
      }, {
        name: f.default.ATTR_UV0,
        type: f.default.ATTR_TYPE_FLOAT32,
        num: 2
      }, {
        name: f.default.ATTR_COLOR,
        type: f.default.ATTR_TYPE_UINT8,
        num: 4,
        normalize: true
      }, {
        name: f.default.ATTR_COLOR0,
        type: f.default.ATTR_TYPE_UINT8,
        num: 4,
        normalize: true
      }]);
      j.name = "vfmtPosUvTwoColor";
      f.default.VertexFormat.XY_UV_Two_Color = j;
      var a = new f.default.VertexFormat([{
        name: f.default.ATTR_POSITION,
        type: f.default.ATTR_TYPE_FLOAT32,
        num: 2
      }, {
        name: f.default.ATTR_UV0,
        type: f.default.ATTR_TYPE_FLOAT32,
        num: 2
      }]);
      a.name = "vfmtPosUv";
      f.default.VertexFormat.XY_UV = a;
      var k = new f.default.VertexFormat([{
        name: f.default.ATTR_POSITION,
        type: f.default.ATTR_TYPE_FLOAT32,
        num: 2
      }, {
        name: f.default.ATTR_COLOR,
        type: f.default.ATTR_TYPE_UINT8,
        num: 4,
        normalize: true
      }]);
      k.name = "vfmtPosColor";
      f.default.VertexFormat.XY_Color = k;
      var c = new f.default.VertexFormat([{
        name: f.default.ATTR_POSITION,
        type: f.default.ATTR_TYPE_FLOAT32,
        num: 2
      }]);
      c.name = "vfmtPos";
      f.default.VertexFormat.XY = c;
      d.exports = {
        vfmt3D: g,
        vfmtPosUvColor: h,
        vfmtPosUvTwoColor: j,
        vfmtPosUv: a,
        vfmtPosColor: k,
        vfmtPos: c
      };
    }, {
      "../../../renderer/gfx": 282
    }],
    226: [function (a, b) {
      "use strict";
  
      a("../platform/CCSys");
      var c = /(\.[^\.\/\?\\]*)(\?.*)?$/;
      var d = /((.*)(\/|\\|\\\\))?(.*?\..*$)?/;
      var e = /[^\.\/]+\/\.\.\//;
      cc.path = {
        join: function () {
          for (var a = arguments.length, b = "", c = 0; c < a; c++) {
            b = (b + (b === "" ? "" : "/") + arguments[c]).replace(/(\/|\\\\)$/, "");
          }
          return b;
        },
        extname: function (a) {
          var b = c.exec(a);
          if (b) {
            return b[1];
          } else {
            return "";
          }
        },
        mainFileName: function (a) {
          if (a) {
            var b = a.lastIndexOf(".");
            if (b !== -1) {
              return a.substring(0, b);
            }
          }
          return a;
        },
        basename: function (a, b) {
          var c = a.indexOf("?");
          if (c > 0) {
            a = a.substring(0, c);
          }
          var d = /(\/|\\)([^\/\\]+)$/g.exec(a.replace(/(\/|\\)$/, ""));
          if (!d) {
            return a;
          }
          var e = d[2];
          if (b && a.substring(a.length - b.length).toLowerCase() === b.toLowerCase()) {
            return e.substring(0, e.length - b.length);
          } else {
            return e;
          }
        },
        dirname: function (a) {
          var b = d.exec(a);
          if (b) {
            return b[2];
          } else {
            return "";
          }
        },
        changeExtname: function (a, b) {
          b = b || "";
          var c = a.indexOf("?");
          var d = "";
          if (c > 0) {
            d = a.substring(c);
            a = a.substring(0, c);
          }
          if ((c = a.lastIndexOf(".")) < 0) {
            return a + b + d;
          } else {
            return a.substring(0, c) + b + d;
          }
        },
        changeBasename: function (a, b, c) {
          if (b.indexOf(".") === 0) {
            return this.changeExtname(a, b);
          }
          var d = a.indexOf("?");
          var e = "";
          var f = c ? this.extname(a) : "";
          if (d > 0) {
            e = a.substring(d);
            a = a.substring(0, d);
          }
          d = (d = a.lastIndexOf("/")) <= 0 ? 0 : d + 1;
          return a.substring(0, d) + b + f + e;
        },
        _normalize: function (a) {
          var b = a += "";
          do {
            b = a;
            a = a.replace(e, "");
          } while (b.length !== a.length);
          return a;
        },
        sep: cc.sys.os === cc.sys.OS_WINDOWS ? "\\" : "/",
        stripSep: function (a) {
          return a.replace(/[\/\\]$/, "");
        }
      };
      b.exports = cc.path;
    }, {
      "../platform/CCSys": 171
    }],
    227: [function (a, b) {
      "use strict";
  
      function c(a, b, c, d, e, f) {
        this.a = a;
        this.b = b;
        this.c = c;
        this.d = d;
        this.tx = e;
        this.ty = f;
      }
      c.create = function (a, b, c, d, e, f) {
        return {
          a: a,
          b: b,
          c: c,
          d: d,
          tx: e,
          ty: f
        };
      };
      c.identity = function () {
        return {
          a: 1,
          b: 0,
          c: 0,
          d: 1,
          tx: 0,
          ty: 0
        };
      };
      c.clone = function (a) {
        return {
          a: a.a,
          b: a.b,
          c: a.c,
          d: a.d,
          tx: a.tx,
          ty: a.ty
        };
      };
      c.concat = function (b, d, e) {
        var f = d.a;
        var g = d.b;
        var h = d.c;
        var i = d.d;
        var a = d.tx;
        var j = d.ty;
        b.a = f * e.a + g * e.c;
        b.b = f * e.b + g * e.d;
        b.c = h * e.a + i * e.c;
        b.d = h * e.b + i * e.d;
        b.tx = a * e.a + j * e.c + e.tx;
        b.ty = a * e.b + j * e.d + e.ty;
        return b;
      };
      c.invert = function (b, d) {
        var e = d.a;
        var f = d.b;
        var g = d.c;
        var h = d.d;
        var i = 1 / (e * h - f * g);
        var a = d.tx;
        var j = d.ty;
        b.a = i * h;
        b.b = -i * f;
        b.c = -i * g;
        b.d = i * e;
        b.tx = i * (g * j - h * a);
        b.ty = i * (f * a - e * j);
        return b;
      };
      c.fromMat4 = function (a, b) {
        var c = b.m;
        a.a = c[0];
        a.b = c[1];
        a.c = c[4];
        a.d = c[5];
        a.tx = c[12];
        a.ty = c[13];
        return a;
      };
      c.transformVec2 = function (a, b, c, d) {
        var e;
        var f;
        if (d === undefined) {
          d = c;
          e = b.x;
          f = b.y;
        } else {
          e = b;
          f = c;
        }
        a.x = d.a * e + d.c * f + d.tx;
        a.y = d.b * e + d.d * f + d.ty;
        return a;
      };
      c.transformSize = function (a, b, c) {
        a.width = c.a * b.width + c.c * b.height;
        a.height = c.b * b.width + c.d * b.height;
        return a;
      };
      c.transformRect = function (b, j, e) {
        var i = j.x;
        var k = j.y;
        var n = i + j.width;
        var q = k + j.height;
        var a = e.a * i + e.c * k + e.tx;
        var o = e.b * i + e.d * k + e.ty;
        var c = e.a * n + e.c * k + e.tx;
        var l = e.b * n + e.d * k + e.ty;
        var h = e.a * i + e.c * q + e.tx;
        var r = e.b * i + e.d * q + e.ty;
        var f = e.a * n + e.c * q + e.tx;
        var d = e.b * n + e.d * q + e.ty;
        var s = Math.min(a, c, h, f);
        var p = Math.max(a, c, h, f);
        var t = Math.min(o, l, r, d);
        var g = Math.max(o, l, r, d);
        b.x = s;
        b.y = t;
        b.width = p - s;
        b.height = g - t;
        return b;
      };
      c.transformObb = function (b, g, e, i, j, k) {
        var m = j.x;
        var a = j.y;
        var n = j.width;
        var c = j.height;
        var l = k.a * m + k.c * a + k.tx;
        var h = k.b * m + k.d * a + k.ty;
        var o = k.a * n;
        var f = k.b * n;
        var d = k.c * c;
        var q = k.d * c;
        g.x = l;
        g.y = h;
        e.x = o + l;
        e.y = f + h;
        b.x = d + l;
        b.y = q + h;
        i.x = o + d + l;
        i.y = f + q + h;
      };
      cc.AffineTransform = b.exports = c;
    }, {}],
    228: [function (b, j) {
      "use strict";
  
      var e = b("../platform/CCObject").Flags;
      var i = b("./misc");
      var k = b("../platform/js");
      var m = b("../platform/id-generater");
      var n = b("../event-manager");
      var a = b("../renderer/render-flow");
      var q = e.Destroying;
      var c = e.DontDestroy;
      var l = e.Deactivating;
      var h = new m("Node");
      function o(a) {
        if (a) {
          if (typeof a == "string") {
            return k.getClassByName(a);
          } else {
            return a;
          }
        } else {
          return null;
        }
      }
      function f(a, b) {
        if (b._sealed) {
          for (var c = 0; c < a._components.length; ++c) {
            var d = a._components[c];
            if (d.constructor === b) {
              return d;
            }
          }
        } else {
          for (var e = 0; e < a._components.length; ++e) {
            var f = a._components[e];
            if (f instanceof b) {
              return f;
            }
          }
        }
        return null;
      }
      function d(b, c, d) {
        if (c._sealed) {
          for (var e = 0; e < b._components.length; ++e) {
            var f = b._components[e];
            if (f.constructor === c) {
              d.push(f);
            }
          }
        } else {
          for (var g = 0; g < b._components.length; ++g) {
            var h = b._components[g];
            if (h instanceof c) {
              d.push(h);
            }
          }
        }
      }
      function s(a, b) {
        for (var c = 0; c < a.length; ++c) {
          var d = a[c];
          var e = f(d, b);
          if (e) {
            return e;
          }
          if (d._children.length > 0 && (e = s(d._children, b))) {
            return e;
          }
        }
        return null;
      }
      function p(a, b, c) {
        for (var e = 0; e < a.length; ++e) {
          var f = a[e];
          d(f, b, c);
          if (f._children.length > 0) {
            p(f._children, b, c);
          }
        }
      }
      var r = cc.Class({
        name: "cc._BaseNode",
        extends: cc.Object,
        properties: {
          _parent: null,
          _children: [],
          _active: true,
          _components: [],
          _prefab: null,
          _persistNode: {
            get: function () {
              return (this._objFlags & c) > 0;
            },
            set: function (a) {
              if (a) {
                this._objFlags |= c;
              } else {
                this._objFlags &= ~c;
              }
            }
          },
          name: {
            get: function () {
              return this._name;
            },
            set: function (a) {
              this._name = a;
            }
          },
          uuid: {
            get: function () {
              return this._id;
            }
          },
          children: {
            get: function () {
              return this._children;
            }
          },
          childrenCount: {
            get: function () {
              return this._children.length;
            }
          },
          active: {
            get: function () {
              return this._active;
            },
            set: function (a) {
              a = !!a;
              if (this._active !== a) {
                this._active = a;
                var b = this._parent;
                if (b && b._activeInHierarchy) {
                  cc.director._nodeActivator.activateNode(this, a);
                }
              }
            }
          },
          activeInHierarchy: {
            get: function () {
              return this._activeInHierarchy;
            }
          }
        },
        ctor: function (a) {
          this._name = a !== undefined ? a : "New Node";
          this._activeInHierarchy = false;
          this._id = h.getNewId();
          if (cc.director._scheduler) {
            cc.director._scheduler.enableForTarget(this);
          }
          this.__eventTargets = [];
        },
        getParent: function () {
          return this._parent;
        },
        setParent: function (b) {
          if (this._parent !== b) {
            var c = this._parent;
            this._parent = b || null;
            this._onSetParent(b);
            if (b) {
              n._setDirtyForNode(this);
              b._children.push(this);
              if (b.emit) {
                b.emit("child-added", this);
              }
              b._renderFlag |= a.FLAG_CHILDREN;
            }
            if (c) {
              if (!(c._objFlags & q)) {
                var d = c._children.indexOf(this);
                c._children.splice(d, 1);
                if (c.emit) {
                  c.emit("child-removed", this);
                }
                this._onHierarchyChanged(c);
                if (c._children.length === 0) {
                  c._renderFlag &= ~a.FLAG_CHILDREN;
                }
              }
            } else if (b) {
              this._onHierarchyChanged(null);
            }
          }
        },
        attr: function (a) {
          k.mixin(this, a);
        },
        getChildByUuid: function (a) {
          if (!a) {
            return null;
          }
          for (var b = this._children, c = 0, d = b.length; c < d; c++) {
            if (b[c]._id === a) {
              return b[c];
            }
          }
          return null;
        },
        getChildByName: function (a) {
          if (!a) {
            return null;
          }
          for (var b = this._children, c = 0, d = b.length; c < d; c++) {
            if (b[c]._name === a) {
              return b[c];
            }
          }
          return null;
        },
        addChild: function (a) {
          a.setParent(this);
        },
        insertChild: function (a, b) {
          a.parent = this;
          a.setSiblingIndex(b);
        },
        getSiblingIndex: function () {
          if (this._parent) {
            return this._parent._children.indexOf(this);
          } else {
            return 0;
          }
        },
        setSiblingIndex: function (a) {
          if (this._parent && !(this._parent._objFlags & l)) {
            var b = this._parent._children;
            a = a !== -1 ? a : b.length - 1;
            var c = b.indexOf(this);
            if (a !== c) {
              b.splice(c, 1);
              if (a < b.length) {
                b.splice(a, 0, this);
              } else {
                b.push(this);
              }
              if (this._onSiblingIndexChanged) {
                this._onSiblingIndexChanged(a);
              }
            }
          }
        },
        walk: function (b, d) {
          var e;
          var f;
          var g;
          var h;
          var j = cc._BaseNode;
          var a = 1;
          var k = j._stacks[j._stackId];
          if (!k) {
            k = [];
            j._stacks.push(k);
          }
          j._stackId++;
          k.length = 0;
          k[0] = this;
          var m = null;
          for (h = false; a;) {
            if (f = k[--a]) {
              if (!h && b) {
                b(f);
              } else if (h && d) {
                d(f);
              }
              k[a] = null;
              if (h) {
                if (m === this._parent) {
                  break;
                }
                h = false;
                if (e) {
                  if (e[++g]) {
                    k[a] = e[g];
                    a++;
                  } else if (m && (k[a] = m, a++, h = true, m._parent ? (g = (e = m._parent._children).indexOf(m), m = m._parent) : (m = null, e = null), g < 0)) {
                    break;
                  }
                }
              } else if (f._children.length > 0) {
                m = f;
                e = f._children;
                g = 0;
                k[a] = e[g];
                a++;
              } else {
                k[a] = f;
                a++;
                h = true;
              }
            }
          }
          k.length = 0;
          j._stackId--;
        },
        cleanup: function () {},
        removeFromParent: function (a) {
          if (this._parent) {
            if (a === undefined) {
              a = true;
            }
            this._parent.removeChild(this, a);
          }
        },
        removeChild: function (a, b) {
          if (this._children.indexOf(a) > -1) {
            if (b || b === undefined) {
              a.cleanup();
            }
            a.parent = null;
          }
        },
        removeAllChildren: function (a) {
          var b = this._children;
          if (a === undefined) {
            a = true;
          }
          for (var c = b.length - 1; c >= 0; c--) {
            var d = b[c];
            if (d) {
              if (a) {
                d.cleanup();
              }
              d.parent = null;
            }
          }
          this._children.length = 0;
        },
        isChildOf: function (a) {
          var b = this;
          do {
            if (b === a) {
              return true;
            }
            b = b._parent;
          } while (b);
          return false;
        },
        getComponent: function (a) {
          var b = o(a);
          if (b) {
            return f(this, b);
          } else {
            return null;
          }
        },
        getComponents: function (a) {
          var b = o(a);
          var c = [];
          if (b) {
            d(this, b, c);
          }
          return c;
        },
        getComponentInChildren: function (a) {
          var b = o(a);
          if (b) {
            return s(this._children, b);
          } else {
            return null;
          }
        },
        getComponentsInChildren: function (a) {
          var b = o(a);
          var c = [];
          if (b) {
            d(this, b, c);
            p(this._children, b, c);
          }
          return c;
        },
        _checkMultipleComp: false,
        addComponent: function (a) {
          var b;
          if (typeof a == "string") {
            if (!(b = k.getClassByName(a))) {
              cc._RF.peek();
              return null;
            }
          } else {
            if (!a) {
              return null;
            }
            b = a;
          }
          if (typeof b != "function") {
            return null;
          }
          if (!k.isChildClassOf(b, cc.Component)) {
            return null;
          }
          var c = b._requireComponent;
          if (c && !this.getComponent(c) && !this.addComponent(c)) {
            return null;
          }
          var d = new b();
          d.node = this;
          this._components.push(d);
          if (this._activeInHierarchy) {
            cc.director._nodeActivator.activateComp(d);
          }
          return d;
        },
        _addComponentAt: false,
        removeComponent: function (a) {
          if (a) {
            if (!(a instanceof cc.Component)) {
              a = this.getComponent(a);
            }
            if (a) {
              a.destroy();
            }
          }
        },
        _getDependComponent: false,
        _removeComponent: function (a) {
          if (a && !(this._objFlags & q)) {
            var b = this._components.indexOf(a);
            if (b !== -1) {
              this._components.splice(b, 1);
            } else {
              a.node;
            }
          }
        },
        destroy: function () {
          if (cc.Object.prototype.destroy.call(this)) {
            this.active = false;
          }
        },
        destroyAllChildren: function () {
          for (var a = this._children, b = 0; b < a.length; ++b) {
            a[b].destroy();
          }
        },
        _onSetParent: function () {},
        _onPostActivated: function () {},
        _onBatchCreated: function () {},
        _onHierarchyChanged: function () {
          var a = this._parent;
          if (!(!this._persistNode || a instanceof cc.Scene)) {
            cc.game.removePersistRootNode(this);
          }
          var b = this._active && !(!a || !a._activeInHierarchy);
          if (this._activeInHierarchy !== b) {
            cc.director._nodeActivator.activateNode(this, b);
          }
        },
        _instantiate: function (a, b) {
          if (!a) {
            a = cc.instantiate._clone(this, this);
          }
          a._prefab;
          a._parent = null;
          a._onBatchCreated(b);
          return a;
        },
        _registerIfAttached: false,
        _onPreDestroy: function () {
          var b;
          var c;
          var d = this._parent;
          var f = d && d._objFlags & q;
          var g = this._children;
          b = 0;
          c = g.length;
          for (; b < c; ++b) {
            g[b]._destroyImmediate();
          }
          b = 0;
          c = this._components.length;
          for (; b < c; ++b) {
            this._components[b]._destroyImmediate();
          }
          for (var h = this.__eventTargets; h.length;) {
            var i = h.pop();
            if (i) {
              i.targetOff(this);
            }
          }
          if (this._persistNode) {
            cc.game.removePersistRootNode(this);
          }
          if (!f && d) {
            var j = d._children.indexOf(this);
            d._children.splice(j, 1);
            if (d.emit) {
              d.emit("child-removed", this);
            }
          }
          return f;
        },
        onRestore: false
      });
      r.idGenerater = h;
      r._stacks = [[]];
      r._stackId = 0;
      r.prototype._onPreDestroyBase = r.prototype._onPreDestroy;
      r.prototype._onHierarchyChangedBase = r.prototype._onHierarchyChanged;
      i.propertyDefine(r, ["parent", "name", "children", "childrenCount"], {});
      cc._BaseNode = j.exports = r;
    }, {
      "../event-manager": 133,
      "../platform/CCObject": 168,
      "../platform/id-generater": 179,
      "../platform/js": 183,
      "../renderer/render-flow": 194,
      "./misc": 236
    }],
    229: [function (a, b) {
      "use strict";
  
      b.exports = {
        binarySearchEpsilon: function (a, b) {
          for (var c = 0, d = a.length - 1, e = d >>> 1; c <= d; e = c + d >>> 1) {
            var f = a[e];
            if (f > b + 0.000001) {
              d = e - 1;
            } else {
              if (!(f < b - 0.000001)) {
                return e;
              }
              c = e + 1;
            }
          }
          return ~c;
        }
      };
    }, {}],
    230: [function (a, b) {
      "use strict";
  
      var c = a("../components/CCRenderComponent");
      var d = a("../platform/CCMacro").BlendFactor;
      var e = a("../../renderer/gfx");
      var f = cc.Class({
        properties: {
          _srcBlendFactor: d.SRC_ALPHA,
          _dstBlendFactor: d.ONE_MINUS_SRC_ALPHA,
          srcBlendFactor: {
            get: function () {
              return this._srcBlendFactor;
            },
            set: function (a) {
              if (this._srcBlendFactor !== a) {
                this._srcBlendFactor = a;
                this._updateBlendFunc(true);
                if (this._onBlendChanged) {
                  this._onBlendChanged();
                }
              }
            },
            animatable: false,
            type: d,
            tooltip: false,
            visible: true
          },
          dstBlendFactor: {
            get: function () {
              return this._dstBlendFactor;
            },
            set: function (a) {
              if (this._dstBlendFactor !== a) {
                this._dstBlendFactor = a;
                this._updateBlendFunc(true);
              }
            },
            animatable: false,
            type: d,
            tooltip: false,
            visible: true
          }
        },
        setMaterial: function (a, b) {
          var e = c.prototype.setMaterial.call(this, a, b);
          if (!(this._srcBlendFactor === d.SRC_ALPHA && this._dstBlendFactor === d.ONE_MINUS_SRC_ALPHA)) {
            this._updateMaterialBlendFunc(e);
          }
          return e;
        },
        _updateMaterial: function () {
          this._updateBlendFunc();
        },
        _updateBlendFunc: function (a) {
          if (a || this._srcBlendFactor !== d.SRC_ALPHA || this._dstBlendFactor !== d.ONE_MINUS_SRC_ALPHA) {
            for (var b = this.getMaterials(), c = 0; c < b.length; c++) {
              var e = b[c];
              this._updateMaterialBlendFunc(e);
            }
          }
        },
        _updateMaterialBlendFunc: function (a) {
          a.setBlend(true, e.BLEND_FUNC_ADD, this._srcBlendFactor, this._dstBlendFactor, e.BLEND_FUNC_ADD, this._srcBlendFactor, this._dstBlendFactor);
        }
      });
      b.exports = cc.BlendFunc = f;
    }, {
      "../../renderer/gfx": 282,
      "../components/CCRenderComponent": 109,
      "../platform/CCMacro": 167
    }],
    231: [function (b, c) {
      "use strict";
  
      var d = b("./misc").BASE64_VALUES;
      var f = "0123456789abcdef".split("");
      var e = ["", "", "", ""];
      var g = e.concat(e, "-", e, "-", e, "-", e, "-", e, e, e);
      var h = g.map(function (a, b) {
        if (a === "-") {
          return NaN;
        } else {
          return b;
        }
      }).filter(isFinite);
      c.exports = function (a) {
        if (a.length !== 22) {
          return a;
        }
        g[0] = a[0];
        g[1] = a[1];
        for (var b = 2, i = 2; b < 22; b += 2) {
          var j = d[a.charCodeAt(b)];
          var k = d[a.charCodeAt(b + 1)];
          g[h[i++]] = f[j >> 2];
          g[h[i++]] = f[(j & 3) << 2 | k >> 4];
          g[h[i++]] = f[k & 15];
        }
        return g.join("");
      };
    }, {
      "./misc": 236
    }],
    232: [function (a, b) {
      "use strict";
  
      cc.find = b.exports = function (b, d) {
        if (b == null) {
          return null;
        }
        if (d) ;else {
          var f = cc.director.getScene();
          if (!f) {
            return null;
          }
          d = f;
        }
        for (var g = d, i = b[0] !== "/" ? 0 : 1, j = b.split("/"), k = i; k < j.length; k++) {
          var m = j[k];
          var p = g._children;
          g = null;
          for (var q = 0, r = p.length; q < r; ++q) {
            var s = p[q];
            if (s.name === m) {
              g = s;
              break;
            }
          }
          if (!g) {
            return null;
          }
        }
        return g;
      };
    }, {}],
    233: [function (a, b) {
      "use strict";
  
      var c;
      var d = (c = a("../assets/material/material-variant")) && c.__esModule ? c : {
        default: c
      };
      var f = a("../assets/material/CCMaterial");
      var e = cc.Class({
        properties: {
          _normalMaterial: null,
          normalMaterial: {
            get: function () {
              return this._normalMaterial;
            },
            set: function (a) {
              this._normalMaterial = a;
              if (this._updateDisabledState) {
                this._updateDisabledState();
              }
            },
            type: f,
            tooltip: false,
            animatable: false
          },
          _grayMaterial: null,
          grayMaterial: {
            get: function () {
              return this._grayMaterial;
            },
            set: function (a) {
              this._grayMaterial = a;
              if (this._updateDisabledState) {
                this._updateDisabledState();
              }
            },
            type: f,
            tooltip: false,
            animatable: false
          }
        },
        _switchGrayMaterial: function (a, b) {
          var c;
          if (a) {
            if (!(c = this._grayMaterial)) {
              c = f.getBuiltinMaterial("2d-gray-sprite");
            }
            c = this._grayMaterial = d.default.create(c, b);
          } else {
            if (!(c = this._normalMaterial)) {
              c = f.getBuiltinMaterial("2d-sprite", b);
            }
            c = this._normalMaterial = d.default.create(c, b);
          }
          b.setMaterial(0, c);
        }
      });
      b.exports = e;
    }, {
      "../assets/material/CCMaterial": 76,
      "../assets/material/material-variant": 83
    }],
    234: [function (a, b) {
      "use strict";
  
      var d = /^(click)(\s)*=|(param)(\s)*=/;
      var f = /(\s)*src(\s)*=|(\s)*height(\s)*=|(\s)*width(\s)*=|(\s)*align(\s)*=|(\s)*offset(\s)*=|(\s)*click(\s)*=|(\s)*param(\s)*=/;
      function c() {
        this._parsedObject = {};
        this._specialSymbolArray = [];
        this._specialSymbolArray.push([/&lt;/g, "<"]);
        this._specialSymbolArray.push([/&gt;/g, ">"]);
        this._specialSymbolArray.push([/&amp;/g, "&"]);
        this._specialSymbolArray.push([/&quot;/g, "\""]);
        this._specialSymbolArray.push([/&apos;/g, "'"]);
        this._specialSymbolArray.push([/&nbsp;/g, " "]);
      }
      c.prototype = {
        constructor: c,
        parse: function (b) {
          this._resultObjectArray = [];
          if (!b) {
            return this._resultObjectArray;
          }
          this._stack = [];
          for (var c = 0, d = b.length; c < d;) {
            var f = b.indexOf(">", c);
            var g = -1;
            if (f >= 0 && (g = b.lastIndexOf("<", f)) < c - 1) {
              g = b.indexOf("<", f + 1);
              f = b.indexOf(">", g + 1);
            }
            if (g < 0) {
              this._stack.pop();
              this._processResult(b.substring(c));
              c = d;
            } else {
              var h = b.substring(c, g);
              var i = b.substring(g + 1, f);
              if (i === "") {
                h = b.substring(c, f + 1);
              }
              this._processResult(h);
              if (f === -1) {
                f = g;
              } else if (b.charAt(g + 1) === "/") {
                this._stack.pop();
              } else {
                this._addToStack(i);
              }
              c = f + 1;
            }
          }
          return this._resultObjectArray;
        },
        _attributeToObject: function (b) {
          var d;
          var g;
          var j;
          var k;
          var m = {};
          var a = (b = b.trim()).match(/^(color|size)(\s)*=/);
          if (a) {
            d = a[0];
            if ((b = b.substring(d.length).trim()) === "") {
              return m;
            }
            g = b.indexOf(" ");
            switch (d[0]) {
              case "c":
                m.color = g > -1 ? b.substring(0, g).trim() : b;
                break;
              case "s":
                m.size = parseInt(b);
            }
            if (g > -1) {
              k = b.substring(g + 1).trim();
              j = this._processEventHandler(k);
              m.event = j;
            }
            return m;
          }
          if ((a = b.match(/^(br(\s)*\/)/)) && a[0].length > 0 && (d = a[0].trim()).startsWith("br") && d[d.length - 1] === "/") {
            m.isNewLine = true;
            this._resultObjectArray.push({
              text: "",
              style: {
                newline: true
              }
            });
            return m;
          }
          if ((a = b.match(/^(img(\s)*src(\s)*=[^>]+\/)/)) && a[0].length > 0 && (d = a[0].trim()).startsWith("img") && d[d.length - 1] === "/") {
            var n;
            a = b.match(f);
            for (var p = false; a;) {
              d = (b = b.substring(b.indexOf(a[0]))).substr(0, a[0].length);
              h = (g = (n = b.substring(d.length).trim()).indexOf(" ")) > -1 ? n.substr(0, g) : n;
              d = (d = d.replace(/[^a-zA-Z]/g, "").trim()).toLocaleLowerCase();
              b = n.substring(g).trim();
              if (h.endsWith("/")) {
                h = h.slice(0, -1);
              }
              if (d === "src") {
                switch (h.charCodeAt(0)) {
                  case 34:
                  case 39:
                    p = true;
                    h = h.slice(1, -1);
                }
                m.isImage = true;
                m.src = h;
              } else if (d === "height") {
                m.imageHeight = parseInt(h);
              } else if (d === "width") {
                m.imageWidth = parseInt(h);
              } else if (d === "align") {
                switch (h.charCodeAt(0)) {
                  case 34:
                  case 39:
                    h = h.slice(1, -1);
                }
                m.imageAlign = h.toLocaleLowerCase();
              } else if (d === "offset") {
                m.imageOffset = h;
              } else if (d === "click") {
                m.event = this._processEventHandler(d + "=" + h);
              }
              if (m.event && d === "param") {
                m.event.param = h.replace(/^\"|\"$/g, "");
              }
              a = b.match(f);
            }
            if (p && m.isImage) {
              this._resultObjectArray.push({
                text: "",
                style: m
              });
            }
            return {};
          }
          if (a = b.match(/^(outline(\s)*[^>]*)/)) {
            var q = {
              color: "#ffffff",
              width: 1
            };
            if (b = a[0].substring(7).trim()) {
              var h;
              var v = /(\s)*color(\s)*=|(\s)*width(\s)*=|(\s)*click(\s)*=|(\s)*param(\s)*=/;
              for (a = b.match(v); a;) {
                d = (b = b.substring(b.indexOf(a[0]))).substr(0, a[0].length);
                h = (g = (n = b.substring(d.length).trim()).indexOf(" ")) > -1 ? n.substr(0, g) : n;
                d = (d = d.replace(/[^a-zA-Z]/g, "").trim()).toLocaleLowerCase();
                b = n.substring(g).trim();
                if (d === "click") {
                  m.event = this._processEventHandler(d + "=" + h);
                } else if (d === "color") {
                  q.color = h;
                } else if (d === "width") {
                  q.width = parseInt(h);
                }
                if (m.event && d === "param") {
                  m.event.param = h.replace(/^\"|\"$/g, "");
                }
                a = b.match(v);
              }
            }
            m.outline = q;
          }
          if ((a = b.match(/^(on|u|b|i)(\s)*/)) && a[0].length > 0) {
            d = a[0];
            b = b.substring(d.length).trim();
            switch (d[0]) {
              case "u":
                m.underline = true;
                break;
              case "i":
                m.italic = true;
                break;
              case "b":
                m.bold = true;
            }
            if (b === "") {
              return m;
            }
            j = this._processEventHandler(b);
            m.event = j;
          }
          return m;
        },
        _processEventHandler: function (b) {
          for (var f = 0, g = {}, h = b.match(d), i = false; h;) {
            var j = h[0];
            var k = "";
            i = false;
            if ((b = b.substring(j.length).trim()).charAt(0) === "\"") {
              if ((f = b.indexOf("\"", 1)) > -1) {
                k = b.substring(1, f).trim();
                i = true;
              }
              f++;
            } else if (b.charAt(0) === "'") {
              if ((f = b.indexOf("'", 1)) > -1) {
                k = b.substring(1, f).trim();
                i = true;
              }
              f++;
            } else {
              var l = b.match(/(\S)+/);
              f = (k = l ? l[0] : "").length;
            }
            if (i) {
              g[j = j.substring(0, j.length - 1).trim()] = k;
            }
            h = (b = b.substring(f).trim()).match(d);
          }
          return g;
        },
        _addToStack: function (a) {
          var b = this._attributeToObject(a);
          if (this._stack.length === 0) {
            this._stack.push(b);
          } else {
            if (b.isNewLine || b.isImage) {
              return;
            }
            var c = this._stack[this._stack.length - 1];
            for (var d in c) {
              if (!b[d]) {
                b[d] = c[d];
              }
            }
            this._stack.push(b);
          }
        },
        _processResult: function (a) {
          if (a !== "") {
            a = this._escapeSpecialSymbol(a);
            if (this._stack.length > 0) {
              this._resultObjectArray.push({
                text: a,
                style: this._stack[this._stack.length - 1]
              });
            } else {
              this._resultObjectArray.push({
                text: a
              });
            }
          }
        },
        _escapeSpecialSymbol: function (a) {
          for (var b = 0; b < this._specialSymbolArray.length; ++b) {
            var c = this._specialSymbolArray[b][0];
            var d = this._specialSymbolArray[b][1];
            a = a.replace(c, d);
          }
          return a;
        }
      };
      b.exports = c;
    }, {}],
    235: [function (a) {
      "use strict";
  
      a("./CCPath");
      a("./profiler/CCProfiler");
      a("./find");
      a("./mutable-forward-iterator");
    }, {
      "./CCPath": 226,
      "./find": 232,
      "./mutable-forward-iterator": 237,
      "./profiler/CCProfiler": 240
    }],
    236: [function (b, c) {
      "use strict";
  
      for (var d = b("../platform/js"), e = {
          propertyDefine: function (b, f, e) {
            function g(b, c, e, f) {
              var g = Object.getOwnPropertyDescriptor(b, c);
              if (g) {
                if (g.get) {
                  b[e] = g.get;
                }
                if (g.set && f) {
                  b[f] = g.set;
                }
              } else {
                var h = b[e];
                d.getset(b, c, h, b[f]);
              }
            }
            for (var h, i = b.prototype, a = 0; a < f.length; a++) {
              var j = (h = f[a])[0].toUpperCase() + h.slice(1);
              g(i, h, "get" + j, "set" + j);
            }
            for (h in e) {
              var k = e[h];
              g(i, h, k[0], k[1]);
            }
          },
          NextPOT: function (a) {
            a -= 1;
            a |= a >> 1;
            a |= a >> 2;
            a |= a >> 4;
            a |= a >> 8;
            return 1 + (a |= a >> 16);
          },
          BUILTIN_CLASSID_RE: /^(?:cc|dragonBones|sp|ccsg)\..+/
        }, f = Array(123), g = 0; g < 123; ++g) {
        f[g] = 64;
      }
      for (var h = 0; h < 64; ++h) {
        f["ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/=".charCodeAt(h)] = h;
      }
      e.BASE64_VALUES = f;
      e.pushToMap = function (a, b, c, d) {
        var e = a[b];
        if (e) {
          if (Array.isArray(e)) {
            if (d) {
              e.push(e[0]);
              e[0] = c;
            } else {
              e.push(c);
            }
          } else {
            a[b] = d ? [c, e] : [e, c];
          }
        } else {
          a[b] = c;
        }
      };
      e.clampf = function (a, b, c) {
        if (b > c) {
          var d = b;
          b = c;
          c = d;
        }
        if (a < b) {
          return b;
        } else if (a < c) {
          return a;
        } else {
          return c;
        }
      };
      e.clamp01 = function (a) {
        if (a < 0) {
          return 0;
        } else if (a < 1) {
          return a;
        } else {
          return 1;
        }
      };
      e.lerp = function (a, b, c) {
        return a + (b - a) * c;
      };
      e.degreesToRadians = function (a) {
        return a * cc.macro.RAD;
      };
      e.radiansToDegrees = function (a) {
        return a * cc.macro.DEG;
      };
      cc.misc = c.exports = e;
    }, {
      "../platform/js": 183
    }],
    237: [function (a, b) {
      "use strict";
  
      function c(a) {
        this.i = 0;
        this.array = a;
      }
      var d = c.prototype;
      d.remove = function (a) {
        var b = this.array.indexOf(a);
        if (b >= 0) {
          this.removeAt(b);
        }
      };
      d.removeAt = function (a) {
        this.array.splice(a, 1);
        if (a <= this.i) {
          --this.i;
        }
      };
      d.fastRemove = function (a) {
        var b = this.array.indexOf(a);
        if (b >= 0) {
          this.fastRemoveAt(b);
        }
      };
      d.fastRemoveAt = function (a) {
        var b = this.array;
        b[a] = b[b.length - 1];
        --b.length;
        if (a <= this.i) {
          --this.i;
        }
      };
      d.push = function (a) {
        this.array.push(a);
      };
      b.exports = c;
    }, {}],
    238: [function (a, b, c) {
      "use strict";
  
      c.__esModule = true;
      c.default = undefined;
      var d = function () {
        function a() {
          this.enabled = false;
          this.count = 0;
          this.maxSize = 1024;
        }
        var b = a.prototype;
        b.get = function () {};
        b.put = function () {};
        b.clear = function () {};
        return a;
      }();
      c.default = d;
      cc.pool = {};
      d.register = function (a, b) {
        cc.pool[a] = b;
      };
      b.exports = c.default;
    }, {}],
    239: [function (a, b) {
      "use strict";
  
      cc._PrefabInfo = cc.Class({
        name: "cc.PrefabInfo",
        properties: {
          root: null,
          asset: null,
          fileId: "",
          sync: false
        }
      });
      b.exports = {
        syncWithPrefab: function (b) {
          var g = b._prefab;
          if (g.asset) {
            var e = b._objFlags;
            var i = b._parent;
            var j = b._id;
            var k = b._name;
            var m = b._active;
            var a = b._eulerAngles.x;
            var n = b._eulerAngles.y;
            var c = b._eulerAngles.z;
            var l = b._localZOrder;
            var h = b._trs;
            var o = h[0];
            var f = h[1];
            var d = h[2];
            cc.game._isCloning = true;
            g.asset._doInstantiate(b);
            cc.game._isCloning = false;
            b._objFlags = e;
            b._parent = i;
            b._id = j;
            b._prefab = g;
            b._name = k;
            b._active = m;
            b._localZOrder = l;
            (h = b._trs)[0] = o;
            h[1] = f;
            h[2] = d;
            b._eulerAngles.x = a;
            b._eulerAngles.y = n;
            b._eulerAngles.z = c;
          } else {
            b._prefab = null;
          }
        }
      };
    }, {}],
    240: [function (b, g) {
      "use strict";
  
      var j = b("../../platform/CCMacro");
      var i = b("./perf-counter");
      var e = false;
      var k = 15;
      var m = null;
      var p = null;
      var q = null;
      function n() {
        if (!m) {
          m = {
            fps: {
              desc: "Framerate (FPS)",
              below: 30,
              average: 500
            },
            draws: {
              desc: "Draw Call"
            },
            frame: {
              desc: "Frame time (ms)",
              min: 0,
              max: 50,
              average: 500
            },
            logic: {
              desc: "Game Logic (ms)",
              min: 0,
              max: 50,
              average: 500,
              color: "#080"
            },
            render: {
              desc: "Renderer (ms)",
              min: 0,
              max: 50,
              average: 500,
              color: "#f90"
            },
            mode: {
              desc: cc.game.renderType === cc.game.RENDER_TYPE_WEBGL ? "WebGL" : "Canvas",
              min: 1
            }
          };
          var a = performance.now();
          for (var b in m) {
            m[b]._counter = new i(b, m[b], a);
          }
        }
      }
      function l() {
        if (!p || !p.isValid) {
          (p = new cc.Node("PROFILER-NODE")).x = p.y = 10;
          p.groupIndex = cc.Node.BuiltinGroupIndex.DEBUG;
          cc.Camera._setupDebugCamera();
          p.zIndex = j.MAX_ZINDEX;
          cc.game.addPersistRootNode(p);
          var a = new cc.Node("LEFT-PANEL");
          a.anchorX = a.anchorY = 0;
          var b = a.addComponent(cc.Label);
          b.fontSize = k;
          b.lineHeight = k;
          a.parent = p;
          var c = new cc.Node("RIGHT-PANEL");
          c.anchorX = 1;
          c.anchorY = 0;
          c.x = 200;
          var d = c.addComponent(cc.Label);
          d.horizontalAlign = cc.Label.HorizontalAlign.RIGHT;
          d.fontSize = k;
          d.lineHeight = k;
          c.parent = p;
          if (cc.sys.platform !== cc.sys.BAIDU_GAME_SUB && cc.sys.platform !== cc.sys.WECHAT_GAME_SUB) {
            b.cacheMode = cc.Label.CacheMode.CHAR;
            d.cacheMode = cc.Label.CacheMode.CHAR;
          }
          q = {
            left: b,
            right: d
          };
        }
      }
      function h() {
        l();
        var a = cc.director._lastUpdate;
        m.frame._counter.start(a);
        m.logic._counter.start(a);
      }
      function s() {
        var a = performance.now();
        if (cc.director.isPaused()) {
          m.frame._counter.start(a);
        } else {
          m.logic._counter.end(a);
        }
        m.render._counter.start(a);
      }
      function f() {
        var a = performance.now();
        m.render._counter.end(a);
        m.draws._counter.value = cc.renderer.drawCalls;
        m.frame._counter.end(a);
        m.fps._counter.frame(a);
        var b = "";
        var c = "";
        for (var d in m) {
          var f = m[d];
          f._counter.sample(a);
          b += f.desc + "\n";
          c += f._counter.human() + "\n";
        }
        if (q) {
          q.left.string = b;
          q.right.string = c;
        }
      }
      cc.profiler = g.exports = {
        isShowingStats: function () {
          return e;
        },
        hideStats: function () {
          if (e) {
            if (p) {
              p.active = false;
            }
            cc.director.off(cc.Director.EVENT_BEFORE_UPDATE, h);
            cc.director.off(cc.Director.EVENT_AFTER_UPDATE, s);
            cc.director.off(cc.Director.EVENT_AFTER_DRAW, f);
            e = false;
          }
        },
        showStats: function () {
          if (!e) {
            n();
            if (p) {
              p.active = true;
            }
            cc.director.on(cc.Director.EVENT_BEFORE_UPDATE, h);
            cc.director.on(cc.Director.EVENT_AFTER_UPDATE, s);
            cc.director.on(cc.Director.EVENT_AFTER_DRAW, f);
            e = true;
          }
        }
      };
    }, {
      "../../platform/CCMacro": 167,
      "./perf-counter": 242
    }],
    241: [function (a, b) {
      "use strict";
  
      var c = cc.Class({
        name: "cc.Counter",
        ctor: function (a, b, c) {
          this._id = a;
          this._opts = b || {};
          this._value = 0;
          this._total = 0;
          this._averageValue = 0;
          this._accumValue = 0;
          this._accumSamples = 0;
          this._accumStart = c;
        },
        properties: {
          value: {
            get: function () {
              return this._value;
            },
            set: function (a) {
              this._value = a;
            }
          }
        },
        _average: function (a, b) {
          if (this._opts.average) {
            this._accumValue += a;
            ++this._accumSamples;
            var c = b;
            if (c - this._accumStart >= this._opts.average) {
              this._averageValue = this._accumValue / this._accumSamples;
              this._accumValue = 0;
              this._accumStart = c;
              this._accumSamples = 0;
            }
          }
        },
        sample: function (a) {
          this._average(this._value, a);
        },
        human: function () {
          var a = this._opts.average ? this._averageValue : this._value;
          return Math.round(a * 100) / 100;
        },
        alarm: function () {
          return this._opts.below && this._value < this._opts.below || this._opts.over && this._value > this._opts.over;
        }
      });
      b.exports = c;
    }, {}],
    242: [function (a, b) {
      "use strict";
  
      var c = a("./counter");
      var d = cc.Class({
        name: "cc.PerfCounter",
        extends: c,
        ctor: function (a, b, c) {
          this._time = c;
        },
        start: function (a) {
          this._time = a;
        },
        end: function (a) {
          this._value = a - this._time;
          this._average(this._value);
        },
        tick: function () {
          this.end();
          this.start();
        },
        frame: function (a) {
          var b = a;
          var c = b - this._time;
          this._total++;
          if (c > (this._opts.average || 1000)) {
            this._value = this._total * 1000 / c;
            this._total = 0;
            this._time = b;
            this._average(this._value);
          }
        }
      });
      b.exports = d;
    }, {
      "./counter": 241
    }],
    243: [function (b, c) {
      "use strict";
  
      var d;
      var f = new ((d = b("../platform/js")) && d.__esModule ? d : {
        default: d
      }).default.Pool(2);
      function e(a) {
        this.count = 0;
        this.limit = a;
        this.datas = {};
        this.head = null;
        this.tail = null;
      }
      f.get = function () {
        return this._get() || {
          key: null,
          value: null,
          prev: null,
          next: null
        };
      };
      e.prototype.moveToHead = function (a) {
        a.next = this.head;
        a.prev = null;
        if (this.head !== null) {
          this.head.prev = a;
        }
        this.head = a;
        if (this.tail === null) {
          this.tail = a;
        }
        this.count++;
        this.datas[a.key] = a;
      };
      e.prototype.put = function (a, b) {
        var c = f.get();
        c.key = a;
        c.value = b;
        if (this.count >= this.limit) {
          var d = this.tail;
          delete this.datas[d.key];
          this.count--;
          this.tail = d.prev;
          this.tail.next = null;
          d.prev = null;
          d.next = null;
          f.put(d);
        }
        this.moveToHead(c);
      };
      e.prototype.remove = function (a) {
        if (a.prev !== null) {
          a.prev.next = a.next;
        } else {
          this.head = a.next;
        }
        if (a.next !== null) {
          a.next.prev = a.prev;
        } else {
          this.tail = a.prev;
        }
        delete this.datas[a.key];
        this.count--;
      };
      e.prototype.get = function (a) {
        var b = this.datas[a];
        if (b) {
          this.remove(b);
          this.moveToHead(b);
          return b.value;
        } else {
          return null;
        }
      };
      e.prototype.clear = function () {
        this.count = 0;
        this.datas = {};
        this.head = null;
        this.tail = null;
      };
      e.prototype.has = function (a) {
        return !!this.datas[a];
      };
      e.prototype.delete = function (a) {
        var b = this.datas[a];
        this.remove(b);
      };
      var g = new e(100);
      var h = {
        BASELINE_RATIO: 0.26,
        MIDDLE_RATIO: 0.37,
        BASELINE_OFFSET: 0,
        label_wordRex: undefined,
        label_symbolRex: /^[!,.:;'}\]%\?>\u3001\u2018\u201c\u300b\uff1f\u3002\uff0c\uff01]/,
        label_lastWordRex: undefined,
        label_lastEnglish: undefined,
        label_firstEnglish: undefined,
        highSurrogateRex: /[\uD800-\uDBFF]/,
        lowSurrogateRex: /[\uDC00-\uDFFF]/,
        label_wrapinspection: true,
        __CHINESE_REG: /[\u4E00-\u9FFF\u3400-\u4DFF]/,
        __JAPANESE_REG: /[\u3000-\u303F\u3040-\u309F\u30A0-\u30FF\uFF00-\uFFEF\u4E00-\u9FAF\u2605-\u2606\u2190-\u2195\u203B]/,
        __KOREAN_REG: /[\u1100-\u11FF\u3130-\u318F\uA960-\uA97F\uAC00-\uD7AF\uD7B0-\uD7FF]/,
        __RTL_LANGUAGE_REG: /[\u0600-\u06FF\u0750-\u077F\u0870-\u089F\u08A0-\u08FF\uFB50-\uFDFF\uFE70-\uFEFF]/,
        isUnicodeCJK: function (a) {
          return this.__CHINESE_REG.test(a) || this.__JAPANESE_REG.test(a) || this.__KOREAN_REG.test(a);
        },
        isUnicodeSpace: function (a) {
          return (a = a.charCodeAt(0)) >= 9 && a <= 13 || a === 32 || a === 133 || a === 160 || a === 5760 || a >= 8192 && a <= 8202 || a === 8232 || a === 8233 || a === 8239 || a === 8287 || a === 12288;
        },
        isUnicodeRTL: function (a) {
          return this.__RTL_LANGUAGE_REG.test(a);
        },
        updateLabelRegex: function (a) {
          this.label_wordRex = RegExp("([" + a + "]+|S)");
          this.label_lastWordRex = RegExp("([" + a + "]+|S)$");
          this.label_lastEnglish = RegExp("[" + a + "]+$");
          this.label_firstEnglish = RegExp("^[" + a + "]");
        },
        setRegexLang: function (a) {
          var b = "";
          switch (a) {
            case "ar":
            case "fa":
            case "ur":
              b = "؀-ۿݐ-ݿࡰ-࢟ࢠ-ࣿﭐ-﷿ﹰ-﻿";
              break;
            case "az":
              b = "ÇçƏəĞğİıÖöŞşÜü";
              break;
            case "bg":
            case "mn":
            case "ru":
              b = "А-Яа-яЁё";
              break;
            case "bn":
              b = "ঀ-৿";
              break;
            case "cs":
              b = "ÁáČčĎďÉéĚěÍíŇňÓóŘřŠšŤťÚúŮůÝýŽž";
              break;
            case "da":
            case "no":
              b = "ÆæØøÅå";
              break;
            case "de":
              b = "ÄäÖöÜüẞß";
              break;
            case "el":
              b = "Ͱ-Ͽ";
              break;
            case "et":
              b = "ÄäÖöÜüÕõ";
              break;
            case "fi":
              b = "ÄäÖöÅåŠšŽž";
              break;
            case "fr":
              b = "ÀàÂâÄäÇçÉéÈèÊêËëÎîÏïÔôŒœÙùÛûÜüŸÿ";
              break;
            case "hi":
              b = "ऄ-ॿ";
              break;
            case "hu":
              b = "ÁáÉéÍíÓóÖöŐőÚúÜüŰű";
              break;
            case "hy":
              b = "԰-֏ﬓ-ﬗ";
              break;
            case "it":
              b = "ÀàÉéÈèÌìÍíÎîÒòÓóÙùÚú";
              break;
            case "lo":
              b = "຀-໿";
              break;
            case "lt":
              b = "ĄąČčĘęĖėĮįŠšŲųŪūŽž";
              break;
            case "my":
              b = "က-႟ꩠ-ꩿꧠ-꧿";
              break;
            case "nl":
              b = "ÀàÁáÂâÄäÈèÉéÊêËëÌìÍíÎîÏïÒòÓóÔôÖöÙùÚúÛûÜü";
              break;
            case "pl":
              b = "ĄąĆćĘęŁłŃńÓóŚśŹźŻż";
              break;
            case "ro":
              b = "ĂăÂâÎîȘșȚț";
              break;
            case "sh":
              b = "ČčĆćĐđŠšŽž";
              break;
            case "si":
              b = "඀-෿";
              break;
            case "sk":
              b = "ÁáÄäČčĎďÉéÍíĹĺĽľŇňÓóÔôŔŕŠšŤťÚúÝýŽž";
              break;
            case "sq":
              b = "ÇçËë";
              break;
            case "sr":
              b = "А-Яа-яЁёČčĆćĐđŠšŽžA-Za-zĐđŠšĆćČčŽž";
              break;
            case "sv":
              b = "ÄäÖöÅå";
              break;
            case "th":
              b = "฀-๿";
              break;
            case "tr":
              b = "ÇçĞğİıÖöŞşÜü";
              break;
            case "uk":
              b = "А-ЩЬЮЯҐЄIЇІа-щьюяґєії";
              break;
            case "uz":
              b = "ʻ";
              break;
            case "vi":
              b = "ÂâĂăĐđÊêÔôƠơƯư";
              break;
            default:
              b = "ÁáÂâÃãÀàÉéÊêÍíÓóÔôÕõÚúÜüÑñÇç";
          }
          this.updateLabelRegex("a-zA-Z0-9" + b);
        },
        safeMeasureText: function (b, c, d) {
          var e = (d || b.font) + "🎮" + c;
          var f = g.get(e);
          if (f !== null) {
            return f;
          }
          var h = b.measureText(c);
          var a = h && h.width || 0;
          g.put(e, a);
          return a;
        },
        _safeSubstring: function (b, c, d) {
          var e = c;
          var f = d;
          var g = b[c];
          if (this.lowSurrogateRex.test(g)) {
            e--;
          }
          if (d !== undefined) {
            if (d - 1 !== c) {
              var h = b[d - 1];
              if (this.highSurrogateRex.test(h)) {
                f--;
              }
            } else if (this.highSurrogateRex.test(g)) {
              f++;
            }
          }
          return b.substring(e, f);
        },
        fragmentText: function (b, g, j, i) {
          var k = [];
          if (b.length === 0 || j < 0) {
            k.push("");
            return k;
          }
          for (var m = b; g > j && m.length > 1;) {
            for (var n = m.length * (j / g) | 0, p = this._safeSubstring(m, n), q = g - i(p), r = p, t = 0, v = 0; q > j && v++ < 10;) {
              n *= j / q;
              n |= 0;
              q = g - i(p = this._safeSubstring(m, n));
            }
            for (v = 0; q <= j && v++ < 10;) {
              if (p) {
                var w = this.label_wordRex.exec(p);
                t = w ? w[0].length : 1;
                r = p;
              }
              n += t;
              q = g - i(p = this._safeSubstring(m, n));
            }
            if ((n -= t) == 0) {
              n = 1;
              r = this._safeSubstring(m, 1);
            } else if (n === 1 && this.highSurrogateRex.test(m[0])) {
              n = 2;
              r = this._safeSubstring(m, 2);
            }
            var x;
            var y = this._safeSubstring(m, 0, n);
            if (this.label_wrapinspection && this.label_symbolRex.test(r || p)) {
              if ((n -= (x = this.label_lastWordRex.exec(y)) ? x[0].length : 0) == 0) {
                n = 1;
              }
              r = this._safeSubstring(m, n);
              y = this._safeSubstring(m, 0, n);
            }
            if (this.label_firstEnglish.test(r) && (x = this.label_lastEnglish.exec(y)) && y !== x[0]) {
              n -= x[0].length;
              r = this._safeSubstring(m, n);
              y = this._safeSubstring(m, 0, n);
            }
            if (k.length === 0) {
              k.push(y);
            } else if ((y = y.trimLeft()).length > 0) {
              k.push(y);
            }
            g = i(m = r || p);
          }
          if (k.length === 0) {
            k.push(m);
          } else if ((m = m.trimLeft()).length > 0) {
            k.push(m);
          }
          return k;
        }
      };
      h.updateLabelRegex("a-zA-Z0-9ÁáÂâÃãÀàÉéÊêÍíÓóÔôÕõÚúÜüÑñÇç");
      cc.textUtils = c.exports = h;
    }, {
      "../platform/js": 183
    }],
    244: [function (a, b) {
      "use strict";
  
      var c = a("../assets/CCTexture2D");
      var d = {
        loadImage: function (a, b, c) {
          var d = cc.assetManager.assets.get(a);
          if (d) {
            if (d.loaded) {
              if (b) {
                b.call(c, null, d);
              }
              return d;
            } else {
              d.once("load", function () {
                if (b) {
                  b.call(c, null, d);
                }
              }, c);
              return d;
            }
          }
          cc.assetManager.loadRemote(a, function (a, d) {
            if (b) {
              b.call(c, a, d);
            }
          });
        },
        cacheImage: function (a, b) {
          if (a && b) {
            var d = new c();
            d.initWithElement(b);
            cc.assetManager.assets.add(a, d);
            return d;
          }
        },
        postLoadTexture: function (a, b) {
          if (a.loaded) {
            if (b) {
              b();
            }
          } else if (a.nativeUrl) {
            cc.assetManager.postLoadNative(a, b);
          } else if (b) {
            b();
          }
        }
      };
      b.exports = d;
    }, {
      "../assets/CCTexture2D": 72
    }],
    245: [function (a, b) {
      "use strict";
  
      var c = a("./node-unit");
      var d = a("./node-mem-pool");
      b.exports = {
        NodeMemPool: new d(c)
      };
    }, {
      "./node-mem-pool": 247,
      "./node-unit": 248
    }],
    246: [function (a, b) {
      "use strict";
  
      function c(a) {
        this._unitClass = a;
        this._pool = [];
        this._findOrder = [];
      }
      var d = c.prototype;
      d._initNative = function () {
        this._nativeMemPool = new renderer.MemPool();
      };
      d._buildUnit = function (a) {
        return new this._unitClass(a, this);
      };
      d._destroyUnit = function (a) {
        this._pool[a] = null;
        for (var b = 0, c = this._findOrder.length; b < c; b++) {
          var d = this._findOrder[b];
          if (d && d.unitID == a) {
            this._findOrder.splice(b, 1);
            break;
          }
        }
      };
      d._findUnitID = function () {
        for (var a = 0, b = this._pool; b[a];) {
          a++;
        }
        return a;
      };
      d.pop = function () {
        for (var b = null, c = 0, d = this._findOrder, f = this._pool, g = d.length; c < g; c++) {
          var h = d[c];
          if (h && h.hasSpace()) {
            b = h;
            break;
          }
        }
        if (!b) {
          var i = this._findUnitID();
          b = this._buildUnit(i);
          f[i] = b;
          d.push(b);
          c = d.length - 1;
        }
        var a = d[0];
        if (a !== b) {
          d[0] = b;
          d[c] = a;
        }
        return b.pop();
      };
      d.push = function (a) {
        var b = this._pool[a.unitID];
        b.push(a.index);
        if (this._findOrder.length > 1 && b.isAllFree()) {
          this._destroyUnit(a.unitID);
        }
        return b;
      };
      b.exports = c;
    }, {}],
    247: [function (a, b) {
      "use strict";
  
      var c;
      var d = a("./mem-pool");
      function e(a) {
        d.call(this, a);
      }
      (c = function () {}).prototype = d.prototype;
      var f = e.prototype = new c();
      f._initNative = function () {
        this._nativeMemPool = new renderer.NodeMemPool();
      };
      f._destroyUnit = function (a) {
        d.prototype._destroyUnit.call(this, a);
      };
      b.exports = e;
    }, {
      "./mem-pool": 246
    }],
    248: [function (b, d) {
      "use strict";
  
      var e;
      var f = b("../../value-types/utils");
      Uint32Array;
      var g = f.FLOAT_BYTES * 10;
      var h = f.FLOAT_BYTES * 16;
      var j = f.FLOAT_BYTES * 16;
      Uint32Array;
      Uint32Array;
      Int32Array;
      Uint8Array;
      Uint8Array;
      Uint32Array;
      f.FLOAT_BYTES;
      var a = b("./unit-base");
      function k(b, d) {
        a.call(this, b, d);
        var e = this._contentNum;
        this.trsList = new f.FLOAT_ARRAY_TYPE(e * 10);
        this.localMatList = new f.FLOAT_ARRAY_TYPE(e * 16);
        this.worldMatList = new f.FLOAT_ARRAY_TYPE(e * 16);
        for (var i = 0; i < e; i++) {
          var k = this._spacesData[i];
          k.trs = new f.FLOAT_ARRAY_TYPE(this.trsList.buffer, i * g, 10);
          k.localMat = new f.FLOAT_ARRAY_TYPE(this.localMatList.buffer, i * h, 16);
          k.worldMat = new f.FLOAT_ARRAY_TYPE(this.worldMatList.buffer, i * j, 16);
        }
      }
      (e = function () {}).prototype = a.prototype;
      k.prototype = new e();
      d.exports = k;
    }, {
      "../../value-types/utils": 258,
      "./unit-base": 249
    }],
    249: [function (a, b) {
      "use strict";
  
      function c(a, b, c) {
        c = c || 128;
        this.unitID = a;
        this._memPool = b;
        this._data = new Uint16Array(2);
        this._data[0] = 0;
        this._data[1] = 0;
        this._contentNum = c;
        this._signData = new Uint16Array(this._contentNum * 2);
        this._spacesData = [];
        for (var d = 0; d < c; d++) {
          var e = d * 2;
          this._signData[e + 0] = d + 1;
          this._signData[e + 1] = 0;
          this._spacesData[d] = {
            index: d,
            unitID: a
          };
        }
        this._signData[(c - 1) * 2] = 65535;
      }
      var d = c.prototype;
      d.hasSpace = function () {
        return this._data[0] !== 65535;
      };
      d.isAllFree = function () {
        return this._data[1] == 0;
      };
      d.pop = function () {
        var a = this._data[0];
        if (a === 65535) {
          return null;
        }
        var b = a;
        var c = b * 2;
        var d = this._spacesData[b];
        this._signData[c + 1] = 1;
        this._data[0] = this._signData[c + 0];
        this._data[1]++;
        return d;
      };
      d.push = function (a) {
        var b = a * 2;
        this._signData[b + 1] = 0;
        this._signData[b + 0] = this._data[0];
        this._data[0] = a;
        this._data[1]--;
      };
      d.dump = function () {
        for (var a = this._data[0]; a != 65535;) {
          a = this._signData[a * 2 + 0];
        }
        for (var b = this._contentNum, c = 0; c < b; c++) {
          this._signData[c * 2 + 1];
        }
        this._data[1];
        this._contentNum;
      };
      b.exports = c;
    }, {}],
    250: [function (b, d, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var f = i(b("./value-type"));
      var g = i(b("../platform/CCClass"));
      var h = i(b("../utils/misc"));
      function i(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      function j(a, b) {
        for (var c = 0; c < b.length; c++) {
          var d = b[c];
          d.enumerable = d.enumerable || false;
          d.configurable = true;
          if ("value" in d) {
            d.writable = true;
          }
          Object.defineProperty(a, d.key, d);
        }
      }
      function k(a, b) {
        return (k = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      var a = function (b) {
        var c;
        var d;
        function f(a, c, d, f) {
          var g;
          if (a === undefined) {
            a = 0;
          }
          if (c === undefined) {
            c = 0;
          }
          if (d === undefined) {
            d = 0;
          }
          if (f === undefined) {
            f = 255;
          }
          (g = b.call(this) || this)._val = 0;
          if (typeof a == "object") {
            c = a.g;
            d = a.b;
            f = a.a;
            a = a.r;
          }
          g._val = (f << 24 >>> 0) + (d << 16) + (c << 8) + (a | 0);
          return g;
        }
        d = b;
        (c = f).prototype = Object.create(d.prototype);
        c.prototype.constructor = c;
        k(c, d);
        f.copy = function (a, b) {
          a.r = b.r;
          a.g = b.g;
          a.b = b.b;
          a.a = b.a;
          return a;
        };
        f.clone = function (a) {
          return new f(a.r, a.g, a.b, a.a);
        };
        f.set = function (a, b, c, d, f) {
          if (b === undefined) {
            b = 255;
          }
          if (c === undefined) {
            c = 255;
          }
          if (d === undefined) {
            d = 255;
          }
          if (f === undefined) {
            f = 255;
          }
          a.r = b;
          a.g = c;
          a.b = d;
          a.a = f;
          return a;
        };
        f.fromHex = function (a, b) {
          var c = b >> 24 & 255;
          var d = b >> 16 & 255;
          var e = b >> 8 & 255;
          var f = b & 255;
          a.r = c;
          a.g = d;
          a.b = e;
          a.a = f;
          return a;
        };
        f.fromHEX = function (a, b) {
          b = b.indexOf("#") === 0 ? b.substring(1) : b;
          a.r = parseInt(b.substr(0, 2), 16) || 0;
          a.g = parseInt(b.substr(2, 2), 16) || 0;
          a.b = parseInt(b.substr(4, 2), 16) || 0;
          a.a = parseInt(b.substr(6, 2), 16) || 255;
          a._val = (a.a << 24 >>> 0) + (a.b << 16) + (a.g << 8) + a.r;
          return a;
        };
        f.add = function (a, b, c) {
          a.r = b.r + c.r;
          a.g = b.g + c.g;
          a.b = b.b + c.b;
          a.a = b.a + c.a;
          return a;
        };
        f.subtract = function (a, b, c) {
          a.r = b.r - c.r;
          a.g = b.g - c.g;
          a.b = b.b - c.b;
          a.a = b.a - c.a;
          return a;
        };
        f.multiply = function (a, b, c) {
          a.r = b.r * c.r;
          a.g = b.g * c.g;
          a.b = b.b * c.b;
          a.a = b.a * c.a;
          return a;
        };
        f.divide = function (a, b, c) {
          a.r = b.r / c.r;
          a.g = b.g / c.g;
          a.b = b.b / c.b;
          a.a = b.a / c.a;
          return a;
        };
        f.scale = function (a, b, c) {
          a.r = b.r * c;
          a.g = b.g * c;
          a.b = b.b * c;
          a.a = b.a * c;
          return a;
        };
        f.lerp = function (b, c, d, e) {
          var f = c.r;
          var g = c.g;
          var h = c.b;
          var a = c.a;
          b.r = f + e * (d.r - f);
          b.g = g + e * (d.g - g);
          b.b = h + e * (d.b - h);
          b.a = a + e * (d.a - a);
          return b;
        };
        f.toArray = function (a, b, c) {
          if (c === undefined) {
            c = 0;
          }
          var d = b instanceof f || b.a > 1 ? 1 / 255 : 1;
          a[c + 0] = b.r * d;
          a[c + 1] = b.g * d;
          a[c + 2] = b.b * d;
          a[c + 3] = b.a * d;
          return a;
        };
        f.fromArray = function (a, b, c) {
          if (c === undefined) {
            c = 0;
          }
          b.r = a[c + 0] * 255;
          b.g = a[c + 1] * 255;
          b.b = a[c + 2] * 255;
          b.a = a[c + 3] * 255;
          return b;
        };
        f.premultiplyAlpha = function (a, b) {
          var c = b.a / 255;
          a.r = b.r * c;
          a.g = b.g * c;
          a.b = b.b * c;
          a._fastSetA(b.a);
          return a;
        };
        var g;
        var m;
        var n;
        var o = f.prototype;
        o.clone = function () {
          var a = new f();
          a._val = this._val;
          return a;
        };
        o.equals = function (a) {
          return a && this._val === a._val;
        };
        o.lerp = function (b, c, d) {
          d = d || new f();
          var e = this.r;
          var g = this.g;
          var h = this.b;
          var a = this.a;
          d.r = e + (b.r - e) * c;
          d.g = g + (b.g - g) * c;
          d.b = h + (b.b - h) * c;
          d.a = a + (b.a - a) * c;
          return d;
        };
        o.toString = function () {
          return "rgba(" + this.r.toFixed() + ", " + this.g.toFixed() + ", " + this.b.toFixed() + ", " + this.a.toFixed() + ")";
        };
        o.getR = function () {
          return this._val & 255;
        };
        o.setR = function (a) {
          a = ~~h.default.clampf(a, 0, 255);
          this._val = (this._val & 4294967040 | a) >>> 0;
          return this;
        };
        o.getG = function () {
          return (this._val & 65280) >> 8;
        };
        o.setG = function (a) {
          a = ~~h.default.clampf(a, 0, 255);
          this._val = (this._val & 4294902015 | a << 8) >>> 0;
          return this;
        };
        o.getB = function () {
          return (this._val & 16711680) >> 16;
        };
        o.setB = function (a) {
          a = ~~h.default.clampf(a, 0, 255);
          this._val = (this._val & 4278255615 | a << 16) >>> 0;
          return this;
        };
        o.getA = function () {
          return (this._val & 4278190080) >>> 24;
        };
        o.setA = function (a) {
          a = ~~h.default.clampf(a, 0, 255);
          this._val = (this._val & 16777215 | a << 24) >>> 0;
          return this;
        };
        o.toCSS = function (a) {
          if (a && a !== "rgba") {
            if (a === "rgb") {
              return "rgb(" + this.r + "," + this.g + "," + this.b + ")";
            } else {
              return "#" + this.toHEX(a);
            }
          } else {
            return "rgba(" + this.r + "," + this.g + "," + this.b + "," + (this.a / 255).toFixed(2) + ")";
          }
        };
        o.fromHEX = function (a) {
          a = a.indexOf("#") === 0 ? a.substring(1) : a;
          var b = parseInt(a.substr(0, 2), 16) || 0;
          var c = parseInt(a.substr(2, 2), 16) || 0;
          var d = parseInt(a.substr(4, 2), 16) || 0;
          var e = parseInt(a.substr(6, 2), 16) || 255;
          this._val = (e << 24 >>> 0) + (d << 16) + (c << 8) + b;
          return this;
        };
        o.toHEX = function (a) {
          var b = [(this.r < 16 ? "0" : "") + this.r.toString(16), (this.g < 16 ? "0" : "") + this.g.toString(16), (this.b < 16 ? "0" : "") + this.b.toString(16)];
          if (a === "#rgb") {
            b[0] = b[0][0];
            b[1] = b[1][0];
            b[2] = b[2][0];
          } else if (a === "#rrggbbaa") {
            b.push((this.a < 16 ? "0" : "") + this.a.toString(16));
          }
          return b.join("");
        };
        o.toRGBValue = function () {
          return this._val & 16777215;
        };
        o.fromHSV = function (b, d, e) {
          var f;
          var g;
          var i;
          if (d === 0) {
            f = g = i = e;
          } else if (e === 0) {
            f = g = i = 0;
          } else {
            if (b === 1) {
              b = 0;
            }
            var j = Math.floor(b *= 6);
            var a = b - j;
            var k = e * (1 - d);
            var c = e * (1 - d * a);
            var l = e * (1 - d * (1 - a));
            switch (j) {
              case 0:
                f = e;
                g = l;
                i = k;
                break;
              case 1:
                f = c;
                g = e;
                i = k;
                break;
              case 2:
                f = k;
                g = e;
                i = l;
                break;
              case 3:
                f = k;
                g = c;
                i = e;
                break;
              case 4:
                f = l;
                g = k;
                i = e;
                break;
              case 5:
                f = e;
                g = k;
                i = c;
            }
          }
          f *= 255;
          g *= 255;
          i *= 255;
          this._val = (this.a << 24 >>> 0) + (i << 16) + (g << 8) + (f | 0);
          return this;
        };
        o.toHSV = function () {
          var b = this.r / 255;
          var c = this.g / 255;
          var d = this.b / 255;
          var e = {
            h: 0,
            s: 0,
            v: 0
          };
          var f = Math.max(b, c, d);
          var g = Math.min(b, c, d);
          var h = 0;
          e.v = f;
          e.s = f ? (f - g) / f : 0;
          if (e.s) {
            h = f - g;
            e.h = b === f ? (c - d) / h : c === f ? 2 + (d - b) / h : 4 + (b - c) / h;
            e.h /= 6;
            if (e.h < 0) {
              e.h += 1;
            }
          } else {
            e.h = 0;
          }
          return e;
        };
        o.set = function (a) {
          if (a._val) {
            this._val = a._val;
          } else {
            this.r = a.r;
            this.g = a.g;
            this.b = a.b;
            this.a = a.a;
          }
          return this;
        };
        o._fastSetA = function (a) {
          this._val = (this._val & 16777215 | a << 24) >>> 0;
        };
        o.multiply = function (a) {
          var b = (this._val & 255) * a.r >> 8;
          var c = (this._val & 65280) * a.g >> 8;
          var d = (this._val & 16711680) * a.b >> 8;
          var e = ((this._val & 4278190080) >>> 8) * a.a;
          this._val = e & 4278190080 | d & 16711680 | c & 65280 | b & 255;
          return this;
        };
        g = f;
        n = [{
          key: "WHITE",
          get: function () {
            return new f(255, 255, 255, 255);
          }
        }, {
          key: "BLACK",
          get: function () {
            return new f(0, 0, 0, 255);
          }
        }, {
          key: "TRANSPARENT",
          get: function () {
            return new f(0, 0, 0, 0);
          }
        }, {
          key: "GRAY",
          get: function () {
            return new f(127.5, 127.5, 127.5);
          }
        }, {
          key: "RED",
          get: function () {
            return new f(255, 0, 0);
          }
        }, {
          key: "GREEN",
          get: function () {
            return new f(0, 255, 0);
          }
        }, {
          key: "BLUE",
          get: function () {
            return new f(0, 0, 255);
          }
        }, {
          key: "YELLOW",
          get: function () {
            return new f(255, 235, 4);
          }
        }, {
          key: "ORANGE",
          get: function () {
            return new f(255, 127, 0);
          }
        }, {
          key: "CYAN",
          get: function () {
            return new f(0, 255, 255);
          }
        }, {
          key: "MAGENTA",
          get: function () {
            return new f(255, 0, 255);
          }
        }];
        if (m = [{
          key: "r",
          get: function () {
            return this.getR();
          },
          set: function (a) {
            this.setR(a);
          }
        }, {
          key: "g",
          get: function () {
            return this.getG();
          },
          set: function (a) {
            this.setG(a);
          }
        }, {
          key: "b",
          get: function () {
            return this.getB();
          },
          set: function (a) {
            this.setB(a);
          }
        }, {
          key: "a",
          get: function () {
            return this.getA();
          },
          set: function (a) {
            this.setA(a);
          }
        }]) {
          j(g.prototype, m);
        }
        if (n) {
          j(g, n);
        }
        Object.defineProperty(g, "prototype", {
          writable: false
        });
        return f;
      }(f.default);
      e.default = a;
      a.div = a.divide;
      a.sub = a.subtract;
      a.mul = a.multiply;
      a.WHITE_R = a.WHITE;
      a.BLACK_R = a.BLACK;
      a.TRANSPARENT_R = a.TRANSPARENT;
      a.GRAY_R = a.GRAY;
      a.RED_R = a.RED;
      a.GREEN_R = a.GREEN;
      a.BLUE_R = a.BLUE;
      a.YELLOW_R = a.YELLOW;
      a.ORANGE_R = a.ORANGE;
      a.CYAN_R = a.CYAN;
      a.MAGENTA_R = a.MAGENTA;
      g.default.fastDefine("cc.Color", a, {
        r: 0,
        g: 0,
        b: 0,
        a: 255
      });
      cc.Color = a;
      cc.color = function (b, c, d, e) {
        if (typeof b == "string") {
          return new a().fromHEX(b);
        } else if (typeof b == "object") {
          return new a(b.r, b.g, b.b, b.a);
        } else {
          return new a(b, c, d, e);
        }
      };
      d.exports = e.default;
    }, {
      "../platform/CCClass": 162,
      "../utils/misc": 236,
      "./value-type": 259
    }],
    251: [function (b, g, e) {
      "use strict";
  
      e.__esModule = true;
      var i = {
        Vec2: true,
        Vec3: true,
        Vec4: true,
        Mat4: true,
        Mat3: true,
        Rect: true,
        Size: true,
        Color: true,
        Quat: true,
        Trs: true
      };
      e.Vec4 = e.Vec3 = e.Vec2 = e.Trs = e.Size = e.Rect = e.Quat = e.Mat4 = e.Mat3 = e.Color = undefined;
      var j = q(b("./vec2"));
      e.Vec2 = j.default;
      var k = q(b("./vec3"));
      e.Vec3 = k.default;
      var m = q(b("./vec4"));
      e.Vec4 = m.default;
      var a = q(b("./mat4"));
      e.Mat4 = a.default;
      var n = q(b("./mat3"));
      e.Mat3 = n.default;
      var c = q(b("./rect"));
      e.Rect = c.default;
      var l = q(b("./size"));
      e.Size = l.default;
      var h = q(b("./color"));
      e.Color = h.default;
      var o = q(b("./quat"));
      e.Quat = o.default;
      var f = q(b("./trs"));
      e.Trs = f.default;
      var d = b("./utils");
      function q(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      Object.keys(d).forEach(function (a) {
        if (a !== "default" && a !== "__esModule") {
          if (!(Object.prototype.hasOwnProperty.call(i, a) || a in e && e[a] === d[a])) {
            e[a] = d[a];
          }
        }
      });
      cc.math = g.exports;
    }, {
      "./color": 250,
      "./mat3": 252,
      "./mat4": 253,
      "./quat": 254,
      "./rect": 255,
      "./size": 256,
      "./trs": 257,
      "./utils": 258,
      "./vec2": 260,
      "./vec3": 261,
      "./vec4": 262
    }],
    252: [function (b, c, d) {
      "use strict";
  
      d.__esModule = true;
      d.default = undefined;
      var e;
      var j = b("../value-types/utils");
      var f = (e = b("./vec3")) && e.__esModule ? e : {
        default: e
      };
      var g = function () {
        function b(b, d, f, g, k, m, p, q, r) {
          if (b === undefined) {
            b = 1;
          }
          if (d === undefined) {
            d = 0;
          }
          if (f === undefined) {
            f = 0;
          }
          if (g === undefined) {
            g = 0;
          }
          if (k === undefined) {
            k = 1;
          }
          if (m === undefined) {
            m = 0;
          }
          if (p === undefined) {
            p = 0;
          }
          if (q === undefined) {
            q = 0;
          }
          if (r === undefined) {
            r = 1;
          }
          this.m = undefined;
          if (b instanceof j.FLOAT_ARRAY_TYPE) {
            this.m = b;
          } else {
            this.m = new j.FLOAT_ARRAY_TYPE(9);
            var u = this.m;
            u[0] = b;
            u[1] = d;
            u[2] = f;
            u[3] = g;
            u[4] = k;
            u[5] = m;
            u[6] = p;
            u[7] = q;
            u[8] = r;
          }
        }
        b.create = function (d, f, g, h, j, k, m, p, q) {
          if (d === undefined) {
            d = 1;
          }
          if (f === undefined) {
            f = 0;
          }
          if (g === undefined) {
            g = 0;
          }
          if (h === undefined) {
            h = 0;
          }
          if (j === undefined) {
            j = 1;
          }
          if (k === undefined) {
            k = 0;
          }
          if (m === undefined) {
            m = 0;
          }
          if (p === undefined) {
            p = 0;
          }
          if (q === undefined) {
            q = 1;
          }
          return new b(d, f, g, h, j, k, m, p, q);
        };
        b.clone = function (a) {
          var c = a.m;
          return new b(c[0], c[1], c[2], c[3], c[4], c[5], c[6], c[7], c[8]);
        };
        b.copy = function (a, b) {
          a.m.set(b.m);
          return a;
        };
        b.set = function (b, d, e, f, g, i, j, a, k, c) {
          var l = b.m;
          l[0] = d;
          l[1] = e;
          l[2] = f;
          l[3] = g;
          l[4] = i;
          l[5] = j;
          l[6] = a;
          l[7] = k;
          l[8] = c;
          return b;
        };
        b.identity = function (a) {
          var b = a.m;
          b[0] = 1;
          b[1] = 0;
          b[2] = 0;
          b[3] = 0;
          b[4] = 1;
          b[5] = 0;
          b[6] = 0;
          b[7] = 0;
          b[8] = 1;
          return a;
        };
        b.transpose = function (b, c) {
          var d = c.m;
          var e = b.m;
          if (b === c) {
            var f = d[1];
            var g = d[2];
            var h = d[5];
            e[1] = d[3];
            e[2] = d[6];
            e[3] = f;
            e[5] = d[7];
            e[6] = g;
            e[7] = h;
          } else {
            e[0] = d[0];
            e[1] = d[3];
            e[2] = d[6];
            e[3] = d[1];
            e[4] = d[4];
            e[5] = d[7];
            e[6] = d[2];
            e[7] = d[5];
            e[8] = d[8];
          }
          return b;
        };
        b.invert = function (b, g) {
          var e = g.m;
          var i = b.m;
          var j = e[0];
          var k = e[1];
          var m = e[2];
          var a = e[3];
          var n = e[4];
          var c = e[5];
          var l = e[6];
          var h = e[7];
          var o = e[8];
          var f = o * n - c * h;
          var d = -o * a + c * l;
          var q = h * a - n * l;
          var p = j * f + k * d + m * q;
          if (p) {
            p = 1 / p;
            i[0] = f * p;
            i[1] = (-o * k + m * h) * p;
            i[2] = (c * k - m * n) * p;
            i[3] = d * p;
            i[4] = (o * j - m * l) * p;
            i[5] = (-c * j + m * a) * p;
            i[6] = q * p;
            i[7] = (-h * j + k * l) * p;
            i[8] = (n * j - k * a) * p;
            return b;
          } else {
            return b;
          }
        };
        b.adjoint = function (b, d) {
          var e = d.m;
          var g = b.m;
          var i = e[0];
          var j = e[1];
          var k = e[2];
          var a = e[3];
          var m = e[4];
          var c = e[5];
          var l = e[6];
          var h = e[7];
          var n = e[8];
          g[0] = m * n - c * h;
          g[1] = k * h - j * n;
          g[2] = j * c - k * m;
          g[3] = c * l - a * n;
          g[4] = i * n - k * l;
          g[5] = k * a - i * c;
          g[6] = a * h - m * l;
          g[7] = j * l - i * h;
          g[8] = i * m - j * a;
          return b;
        };
        b.determinant = function (b) {
          var d = b.m;
          var e = d[0];
          var f = d[1];
          var g = d[2];
          var i = d[3];
          var j = d[4];
          var a = d[5];
          var k = d[6];
          var c = d[7];
          var l = d[8];
          return e * (l * j - a * c) + f * (-l * i + a * k) + g * (c * i - j * k);
        };
        b.multiply = function (b, j, e) {
          var i = j.m;
          var k = e.m;
          var n = b.m;
          var q = i[0];
          var a = i[1];
          var o = i[2];
          var c = i[3];
          var l = i[4];
          var h = i[5];
          var r = i[6];
          var f = i[7];
          var d = i[8];
          var s = k[0];
          var p = k[1];
          var t = k[2];
          var g = k[3];
          var m = k[4];
          var u = k[5];
          var v = k[6];
          var w = k[7];
          var y = k[8];
          n[0] = s * q + p * c + t * r;
          n[1] = s * a + p * l + t * f;
          n[2] = s * o + p * h + t * d;
          n[3] = g * q + m * c + u * r;
          n[4] = g * a + m * l + u * f;
          n[5] = g * o + m * h + u * d;
          n[6] = v * q + w * c + y * r;
          n[7] = v * a + w * l + y * f;
          n[8] = v * o + w * h + y * d;
          return b;
        };
        b.multiplyMat4 = function (b, j, e) {
          var i = j.m;
          var k = e.m;
          var n = b.m;
          var q = i[0];
          var a = i[1];
          var o = i[2];
          var c = i[3];
          var l = i[4];
          var h = i[5];
          var r = i[6];
          var f = i[7];
          var d = i[8];
          var s = k[0];
          var p = k[1];
          var t = k[2];
          var g = k[4];
          var m = k[5];
          var u = k[6];
          var v = k[8];
          var w = k[9];
          var y = k[10];
          n[0] = s * q + p * c + t * r;
          n[1] = s * a + p * l + t * f;
          n[2] = s * o + p * h + t * d;
          n[3] = g * q + m * c + u * r;
          n[4] = g * a + m * l + u * f;
          n[5] = g * o + m * h + u * d;
          n[6] = v * q + w * c + y * r;
          n[7] = v * a + w * l + y * f;
          n[8] = v * o + w * h + y * d;
          return b;
        };
        b.translate = function (b, g, e) {
          var i = g.m;
          var j = b.m;
          var k = i[0];
          var m = i[1];
          var a = i[2];
          var n = i[3];
          var c = i[4];
          var l = i[5];
          var h = i[6];
          var o = i[7];
          var f = i[8];
          var d = e.x;
          var q = e.y;
          j[0] = k;
          j[1] = m;
          j[2] = a;
          j[3] = n;
          j[4] = c;
          j[5] = l;
          j[6] = d * k + q * n + h;
          j[7] = d * m + q * c + o;
          j[8] = d * a + q * l + f;
          return b;
        };
        b.rotate = function (b, g, e) {
          var i = g.m;
          var j = b.m;
          var k = i[0];
          var m = i[1];
          var a = i[2];
          var n = i[3];
          var c = i[4];
          var l = i[5];
          var h = i[6];
          var o = i[7];
          var f = i[8];
          var d = Math.sin(e);
          var q = Math.cos(e);
          j[0] = q * k + d * n;
          j[1] = q * m + d * c;
          j[2] = q * a + d * l;
          j[3] = q * n - d * k;
          j[4] = q * c - d * m;
          j[5] = q * l - d * a;
          j[6] = h;
          j[7] = o;
          j[8] = f;
          return b;
        };
        b.scale = function (b, c, d) {
          var e = d.x;
          var f = d.y;
          var g = c.m;
          var h = b.m;
          h[0] = e * g[0];
          h[1] = e * g[1];
          h[2] = e * g[2];
          h[3] = f * g[3];
          h[4] = f * g[4];
          h[5] = f * g[5];
          h[6] = g[6];
          h[7] = g[7];
          h[8] = g[8];
          return b;
        };
        b.fromMat4 = function (a, b) {
          var c = b.m;
          var d = a.m;
          d[0] = c[0];
          d[1] = c[1];
          d[2] = c[2];
          d[3] = c[4];
          d[4] = c[5];
          d[5] = c[6];
          d[6] = c[8];
          d[7] = c[9];
          d[8] = c[10];
          return a;
        };
        b.fromTranslation = function (a, b) {
          var c = a.m;
          c[0] = 1;
          c[1] = 0;
          c[2] = 0;
          c[3] = 0;
          c[4] = 1;
          c[5] = 0;
          c[6] = b.x;
          c[7] = b.y;
          c[8] = 1;
          return a;
        };
        b.fromRotation = function (a, b) {
          var c = Math.sin(b);
          var d = Math.cos(b);
          var e = a.m;
          e[0] = d;
          e[1] = c;
          e[2] = 0;
          e[3] = -c;
          e[4] = d;
          e[5] = 0;
          e[6] = 0;
          e[7] = 0;
          e[8] = 1;
          return a;
        };
        b.fromScaling = function (a, b) {
          var c = a.m;
          c[0] = b.x;
          c[1] = 0;
          c[2] = 0;
          c[3] = 0;
          c[4] = b.y;
          c[5] = 0;
          c[6] = 0;
          c[7] = 0;
          c[8] = 1;
          return a;
        };
        b.fromQuat = function (b, j) {
          var e = b.m;
          var i = j.x;
          var k = j.y;
          var n = j.z;
          var q = j.w;
          var a = i + i;
          var o = k + k;
          var c = n + n;
          var l = i * a;
          var h = k * a;
          var r = k * o;
          var f = n * a;
          var d = n * o;
          var s = n * c;
          var p = q * a;
          var t = q * o;
          var g = q * c;
          e[0] = 1 - r - s;
          e[3] = h - g;
          e[6] = f + t;
          e[1] = h + g;
          e[4] = 1 - l - s;
          e[7] = d - p;
          e[2] = f - t;
          e[5] = d + p;
          e[8] = 1 - l - r;
          return b;
        };
        b.fromViewUp = function (d, e, g) {
          var h;
          var k;
          var l;
          return (h = new f.default(0, 1, 0), k = new f.default(), l = new f.default(), function (a, c, d) {
            if (f.default.lengthSqr(c) < j.EPSILON * j.EPSILON) {
              b.identity(a);
              return a;
            } else {
              d = d || h;
              f.default.normalize(k, f.default.cross(k, d, c));
              if (f.default.lengthSqr(k) < j.EPSILON * j.EPSILON) {
                b.identity(a);
                return a;
              } else {
                f.default.cross(l, c, k);
                b.set(a, k.x, k.y, k.z, l.x, l.y, l.z, c.x, c.y, c.z);
                return a;
              }
            }
          })(d, e, g);
        };
        b.normalFromMat4 = function (j, k) {
          var e = k.m;
          var i = j.m;
          var n = e[0];
          var q = e[1];
          var r = e[2];
          var a = e[3];
          var o = e[4];
          var c = e[5];
          var l = e[6];
          var h = e[7];
          var s = e[8];
          var f = e[9];
          var d = e[10];
          var t = e[11];
          var p = e[12];
          var u = e[13];
          var g = e[14];
          var m = e[15];
          var v = n * c - q * o;
          var y = n * l - r * o;
          var z = n * h - a * o;
          var A = q * l - r * c;
          var x = q * h - a * c;
          var B = r * h - a * l;
          var b = s * u - f * p;
          var C = s * g - d * p;
          var D = s * m - t * p;
          var E = f * g - d * u;
          var w = f * m - t * u;
          var F = d * m - t * g;
          var G = v * F - y * w + z * E + A * D - x * C + B * b;
          if (G) {
            G = 1 / G;
            i[0] = (c * F - l * w + h * E) * G;
            i[1] = (l * D - o * F - h * C) * G;
            i[2] = (o * w - c * D + h * b) * G;
            i[3] = (r * w - q * F - a * E) * G;
            i[4] = (n * F - r * D + a * C) * G;
            i[5] = (q * D - n * w - a * b) * G;
            i[6] = (u * B - g * x + m * A) * G;
            i[7] = (g * z - p * B - m * y) * G;
            i[8] = (p * x - u * z + m * v) * G;
            return j;
          } else {
            return j;
          }
        };
        b.frob = function (a) {
          var b = a.m;
          return Math.sqrt(Math.pow(b[0], 2) + Math.pow(b[1], 2) + Math.pow(b[2], 2) + Math.pow(b[3], 2) + Math.pow(b[4], 2) + Math.pow(b[5], 2) + Math.pow(b[6], 2) + Math.pow(b[7], 2) + Math.pow(b[8], 2));
        };
        b.add = function (a, b, c) {
          var d = b.m;
          var e = c.m;
          var f = a.m;
          f[0] = d[0] + e[0];
          f[1] = d[1] + e[1];
          f[2] = d[2] + e[2];
          f[3] = d[3] + e[3];
          f[4] = d[4] + e[4];
          f[5] = d[5] + e[5];
          f[6] = d[6] + e[6];
          f[7] = d[7] + e[7];
          f[8] = d[8] + e[8];
          return a;
        };
        b.subtract = function (a, b, c) {
          var d = b.m;
          var e = c.m;
          var f = a.m;
          f[0] = d[0] - e[0];
          f[1] = d[1] - e[1];
          f[2] = d[2] - e[2];
          f[3] = d[3] - e[3];
          f[4] = d[4] - e[4];
          f[5] = d[5] - e[5];
          f[6] = d[6] - e[6];
          f[7] = d[7] - e[7];
          f[8] = d[8] - e[8];
          return a;
        };
        b.multiplyScalar = function (a, b, c) {
          var d = b.m;
          var e = a.m;
          e[0] = d[0] * c;
          e[1] = d[1] * c;
          e[2] = d[2] * c;
          e[3] = d[3] * c;
          e[4] = d[4] * c;
          e[5] = d[5] * c;
          e[6] = d[6] * c;
          e[7] = d[7] * c;
          e[8] = d[8] * c;
          return a;
        };
        b.multiplyScalarAndAdd = function (b, c, d, e) {
          var f = c.m;
          var g = d.m;
          var h = b.m;
          h[0] = f[0] + g[0] * e;
          h[1] = f[1] + g[1] * e;
          h[2] = f[2] + g[2] * e;
          h[3] = f[3] + g[3] * e;
          h[4] = f[4] + g[4] * e;
          h[5] = f[5] + g[5] * e;
          h[6] = f[6] + g[6] * e;
          h[7] = f[7] + g[7] * e;
          h[8] = f[8] + g[8] * e;
          return b;
        };
        b.exactEquals = function (a, b) {
          var c = a.m;
          var d = b.m;
          return c[0] === d[0] && c[1] === d[1] && c[2] === d[2] && c[3] === d[3] && c[4] === d[4] && c[5] === d[5] && c[6] === d[6] && c[7] === d[7] && c[8] === d[8];
        };
        b.equals = function (b, k) {
          var e = b.m;
          var i = k.m;
          var n = e[0];
          var q = e[1];
          var a = e[2];
          var o = e[3];
          var c = e[4];
          var l = e[5];
          var h = e[6];
          var r = e[7];
          var f = e[8];
          var d = i[0];
          var s = i[1];
          var p = i[2];
          var t = i[3];
          var g = i[4];
          var m = i[5];
          var u = i[6];
          var v = i[7];
          var w = i[8];
          return Math.abs(n - d) <= j.EPSILON * Math.max(1, Math.abs(n), Math.abs(d)) && Math.abs(q - s) <= j.EPSILON * Math.max(1, Math.abs(q), Math.abs(s)) && Math.abs(a - p) <= j.EPSILON * Math.max(1, Math.abs(a), Math.abs(p)) && Math.abs(o - t) <= j.EPSILON * Math.max(1, Math.abs(o), Math.abs(t)) && Math.abs(c - g) <= j.EPSILON * Math.max(1, Math.abs(c), Math.abs(g)) && Math.abs(l - m) <= j.EPSILON * Math.max(1, Math.abs(l), Math.abs(m)) && Math.abs(h - u) <= j.EPSILON * Math.max(1, Math.abs(h), Math.abs(u)) && Math.abs(r - v) <= j.EPSILON * Math.max(1, Math.abs(r), Math.abs(v)) && Math.abs(f - w) <= j.EPSILON * Math.max(1, Math.abs(f), Math.abs(w));
        };
        b.toArray = function (a, b, c) {
          if (c === undefined) {
            c = 0;
          }
          for (var d = b.m, e = 0; e < 9; e++) {
            a[c + e] = d[e];
          }
          return a;
        };
        b.fromArray = function (a, b, c) {
          if (c === undefined) {
            c = 0;
          }
          for (var d = a.m, e = 0; e < 9; e++) {
            d[e] = b[c + e];
          }
          return a;
        };
        b.prototype.toString = function () {
          var a = this.m;
          return "mat3(" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ", " + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ", " + a[8] + ")";
        };
        return b;
      }();
      d.default = g;
      g.sub = g.subtract;
      g.mul = g.multiply;
      g.IDENTITY = Object.freeze(new g());
      cc.Mat3 = g;
      c.exports = d.default;
    }, {
      "../value-types/utils": 258,
      "./vec3": 261
    }],
    253: [function (j, k, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var i = a(j("./value-type"));
      var n = a(j("../platform/CCClass"));
      var q = a(j("./vec3"));
      var s = a(j("./quat"));
      var z = j("./utils");
      var B = a(j("./mat3"));
      function a(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      function c(a, b) {
        return (c = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      var F = 0;
      var G = 0;
      var H = 0;
      var J = 0;
      var K = 0;
      var N = 0;
      var Q = 0;
      var U = 0;
      var V = 0;
      var W = 0;
      var X = 0;
      var Y = 0;
      var D = 0;
      var P = 0;
      var Z = 0;
      var $ = 0;
      var L = function (b) {
        var a;
        var d;
        d = b;
        (a = g).prototype = Object.create(d.prototype);
        a.prototype.constructor = a;
        c(a, d);
        var f = g.prototype;
        function g(j, k, o, q, t, w, x, A, B, C, D, E, F, G, H, I) {
          var J;
          if (j === undefined) {
            j = 1;
          }
          if (k === undefined) {
            k = 0;
          }
          if (o === undefined) {
            o = 0;
          }
          if (q === undefined) {
            q = 0;
          }
          if (t === undefined) {
            t = 0;
          }
          if (w === undefined) {
            w = 1;
          }
          if (x === undefined) {
            x = 0;
          }
          if (A === undefined) {
            A = 0;
          }
          if (B === undefined) {
            B = 0;
          }
          if (C === undefined) {
            C = 0;
          }
          if (D === undefined) {
            D = 1;
          }
          if (E === undefined) {
            E = 0;
          }
          if (F === undefined) {
            F = 0;
          }
          if (G === undefined) {
            G = 0;
          }
          if (H === undefined) {
            H = 0;
          }
          if (I === undefined) {
            I = 1;
          }
          (J = b.call(this) || this).m = undefined;
          if (j instanceof z.FLOAT_ARRAY_TYPE) {
            J.m = j;
          } else {
            J.m = new z.FLOAT_ARRAY_TYPE(16);
            var K = J.m;
            K[0] = j;
            K[1] = k;
            K[2] = o;
            K[3] = q;
            K[4] = t;
            K[5] = w;
            K[6] = x;
            K[7] = A;
            K[8] = B;
            K[9] = C;
            K[10] = D;
            K[11] = E;
            K[12] = F;
            K[13] = G;
            K[14] = H;
            K[15] = I;
          }
          return J;
        }
        f.mul = function (a, b) {
          return g.multiply(b || new g(), this, a);
        };
        f.mulScalar = function (a, b) {
          g.multiplyScalar(b || new g(), this, a);
        };
        f.sub = function (a, b) {
          g.subtract(b || new g(), this, a);
        };
        g.clone = function (a) {
          var b = a.m;
          return new g(b[0], b[1], b[2], b[3], b[4], b[5], b[6], b[7], b[8], b[9], b[10], b[11], b[12], b[13], b[14], b[15]);
        };
        g.copy = function (a, b) {
          var c = a.m;
          var d = b.m;
          c[0] = d[0];
          c[1] = d[1];
          c[2] = d[2];
          c[3] = d[3];
          c[4] = d[4];
          c[5] = d[5];
          c[6] = d[6];
          c[7] = d[7];
          c[8] = d[8];
          c[9] = d[9];
          c[10] = d[10];
          c[11] = d[11];
          c[12] = d[12];
          c[13] = d[13];
          c[14] = d[14];
          c[15] = d[15];
          return a;
        };
        g.set = function (b, j, e, i, k, m, n, a, o, c, l, h, q, f, d, r, p) {
          var s = b.m;
          s[0] = j;
          s[1] = e;
          s[2] = i;
          s[3] = k;
          s[4] = m;
          s[5] = n;
          s[6] = a;
          s[7] = o;
          s[8] = c;
          s[9] = l;
          s[10] = h;
          s[11] = q;
          s[12] = f;
          s[13] = d;
          s[14] = r;
          s[15] = p;
          return b;
        };
        g.identity = function (a) {
          var b = a.m;
          b[0] = 1;
          b[1] = 0;
          b[2] = 0;
          b[3] = 0;
          b[4] = 0;
          b[5] = 1;
          b[6] = 0;
          b[7] = 0;
          b[8] = 0;
          b[9] = 0;
          b[10] = 1;
          b[11] = 0;
          b[12] = 0;
          b[13] = 0;
          b[14] = 0;
          b[15] = 1;
          return a;
        };
        g.transpose = function (b, d) {
          var e = b.m;
          var f = d.m;
          if (b === d) {
            var g = f[1];
            var h = f[2];
            var i = f[3];
            var a = f[6];
            var j = f[7];
            var c = f[11];
            e[1] = f[4];
            e[2] = f[8];
            e[3] = f[12];
            e[4] = g;
            e[6] = f[9];
            e[7] = f[13];
            e[8] = h;
            e[9] = a;
            e[11] = f[14];
            e[12] = i;
            e[13] = j;
            e[14] = c;
          } else {
            e[0] = f[0];
            e[1] = f[4];
            e[2] = f[8];
            e[3] = f[12];
            e[4] = f[1];
            e[5] = f[5];
            e[6] = f[9];
            e[7] = f[13];
            e[8] = f[2];
            e[9] = f[6];
            e[10] = f[10];
            e[11] = f[14];
            e[12] = f[3];
            e[13] = f[7];
            e[14] = f[11];
            e[15] = f[15];
          }
          return b;
        };
        g.invert = function (b, d) {
          var e = d.m;
          F = e[0];
          G = e[1];
          H = e[2];
          J = e[3];
          K = e[4];
          N = e[5];
          Q = e[6];
          U = e[7];
          V = e[8];
          W = e[9];
          X = e[10];
          Y = e[11];
          D = e[12];
          P = e[13];
          Z = e[14];
          $ = e[15];
          var f = F * N - G * K;
          var g = F * Q - H * K;
          var i = F * U - J * K;
          var j = G * Q - H * N;
          var a = G * U - J * N;
          var k = H * U - J * Q;
          var c = V * P - W * D;
          var l = V * Z - X * D;
          var h = V * $ - Y * D;
          var m = W * Z - X * P;
          var n = W * $ - Y * P;
          var o = X * $ - Y * Z;
          var p = f * o - g * n + i * m + j * h - a * l + k * c;
          if (p === 0) {
            return null;
          }
          p = 1 / p;
          var q = b.m;
          q[0] = (N * o - Q * n + U * m) * p;
          q[1] = (H * n - G * o - J * m) * p;
          q[2] = (P * k - Z * a + $ * j) * p;
          q[3] = (X * a - W * k - Y * j) * p;
          q[4] = (Q * h - K * o - U * l) * p;
          q[5] = (F * o - H * h + J * l) * p;
          q[6] = (Z * i - D * k - $ * g) * p;
          q[7] = (V * k - X * i + Y * g) * p;
          q[8] = (K * n - N * h + U * c) * p;
          q[9] = (G * h - F * n - J * c) * p;
          q[10] = (D * a - P * i + $ * f) * p;
          q[11] = (W * i - V * a - Y * f) * p;
          q[12] = (N * l - K * m - Q * c) * p;
          q[13] = (F * m - G * l + H * c) * p;
          q[14] = (P * g - D * j - Z * f) * p;
          q[15] = (V * j - W * g + X * f) * p;
          return b;
        };
        g.determinant = function (a) {
          var b = a.m;
          F = b[0];
          G = b[1];
          H = b[2];
          J = b[3];
          K = b[4];
          N = b[5];
          Q = b[6];
          U = b[7];
          V = b[8];
          W = b[9];
          X = b[10];
          Y = b[11];
          D = b[12];
          P = b[13];
          Z = b[14];
          $ = b[15];
          return (F * N - G * K) * (X * $ - Y * Z) - (F * Q - H * K) * (W * $ - Y * P) + (F * U - J * K) * (W * Z - X * P) + (G * Q - H * N) * (V * $ - Y * D) - (G * U - J * N) * (V * Z - X * D) + (H * U - J * Q) * (V * P - W * D);
        };
        g.multiply = function (b, d, e) {
          var f = b.m;
          var g = d.m;
          var h = e.m;
          F = g[0];
          G = g[1];
          H = g[2];
          J = g[3];
          K = g[4];
          N = g[5];
          Q = g[6];
          U = g[7];
          V = g[8];
          W = g[9];
          X = g[10];
          Y = g[11];
          D = g[12];
          P = g[13];
          Z = g[14];
          $ = g[15];
          var i = h[0];
          var j = h[1];
          var k = h[2];
          var m = h[3];
          f[0] = i * F + j * K + k * V + m * D;
          f[1] = i * G + j * N + k * W + m * P;
          f[2] = i * H + j * Q + k * X + m * Z;
          f[3] = i * J + j * U + k * Y + m * $;
          i = h[4];
          j = h[5];
          k = h[6];
          m = h[7];
          f[4] = i * F + j * K + k * V + m * D;
          f[5] = i * G + j * N + k * W + m * P;
          f[6] = i * H + j * Q + k * X + m * Z;
          f[7] = i * J + j * U + k * Y + m * $;
          i = h[8];
          j = h[9];
          k = h[10];
          m = h[11];
          f[8] = i * F + j * K + k * V + m * D;
          f[9] = i * G + j * N + k * W + m * P;
          f[10] = i * H + j * Q + k * X + m * Z;
          f[11] = i * J + j * U + k * Y + m * $;
          i = h[12];
          j = h[13];
          k = h[14];
          m = h[15];
          f[12] = i * F + j * K + k * V + m * D;
          f[13] = i * G + j * N + k * W + m * P;
          f[14] = i * H + j * Q + k * X + m * Z;
          f[15] = i * J + j * U + k * Y + m * $;
          return b;
        };
        g.transform = function (b, c, d) {
          var e = d.x;
          var f = d.y;
          var g = d.z;
          var h = b.m;
          var a = c.m;
          if (c === b) {
            h[12] = a[0] * e + a[4] * f + a[8] * g + a[12];
            h[13] = a[1] * e + a[5] * f + a[9] * g + a[13];
            h[14] = a[2] * e + a[6] * f + a[10] * g + a[14];
            h[15] = a[3] * e + a[7] * f + a[11] * g + a[15];
          } else {
            F = a[0];
            G = a[1];
            H = a[2];
            J = a[3];
            K = a[4];
            N = a[5];
            Q = a[6];
            U = a[7];
            V = a[8];
            W = a[9];
            X = a[10];
            Y = a[11];
            D = a[12];
            P = a[13];
            Z = a[14];
            $ = a[15];
            h[0] = F;
            h[1] = G;
            h[2] = H;
            h[3] = J;
            h[4] = K;
            h[5] = N;
            h[6] = Q;
            h[7] = U;
            h[8] = V;
            h[9] = W;
            h[10] = X;
            h[11] = Y;
            h[12] = F * e + K * f + V * g + a[12];
            h[13] = G * e + N * f + W * g + a[13];
            h[14] = H * e + Q * f + X * g + a[14];
            h[15] = J * e + U * f + Y * g + a[15];
          }
          return b;
        };
        g.translate = function (a, b, c) {
          var d = a.m;
          var e = b.m;
          if (b === a) {
            d[12] += c.x;
            d[13] += c.y;
            d[14] += c.z;
          } else {
            d[0] = e[0];
            d[1] = e[1];
            d[2] = e[2];
            d[3] = e[3];
            d[4] = e[4];
            d[5] = e[5];
            d[6] = e[6];
            d[7] = e[7];
            d[8] = e[8];
            d[9] = e[9];
            d[10] = e[10];
            d[11] = e[11];
            d[12] += c.x;
            d[13] += c.y;
            d[14] += c.z;
            d[15] = e[15];
          }
          return a;
        };
        g.scale = function (b, c, d) {
          var e = d.x;
          var f = d.y;
          var g = d.z;
          var h = b.m;
          var a = c.m;
          h[0] = a[0] * e;
          h[1] = a[1] * e;
          h[2] = a[2] * e;
          h[3] = a[3] * e;
          h[4] = a[4] * f;
          h[5] = a[5] * f;
          h[6] = a[6] * f;
          h[7] = a[7] * f;
          h[8] = a[8] * g;
          h[9] = a[9] * g;
          h[10] = a[10] * g;
          h[11] = a[11] * g;
          h[12] = a[12];
          h[13] = a[13];
          h[14] = a[14];
          h[15] = a[15];
          return b;
        };
        g.rotate = function (d, f, e, g) {
          var i = g.x;
          var j = g.y;
          var k = g.z;
          var m = Math.sqrt(i * i + j * j + k * k);
          if (Math.abs(m) < z.EPSILON) {
            return null;
          }
          i *= m = 1 / m;
          j *= m;
          k *= m;
          var n = Math.sin(e);
          var l = Math.cos(e);
          var h = 1 - l;
          var o = f.m;
          F = o[0];
          G = o[1];
          H = o[2];
          J = o[3];
          K = o[4];
          N = o[5];
          Q = o[6];
          U = o[7];
          V = o[8];
          W = o[9];
          X = o[10];
          Y = o[11];
          var p = i * i * h + l;
          var b = j * i * h + k * n;
          var q = k * i * h - j * n;
          var t = i * j * h - k * n;
          var u = j * j * h + l;
          var v = k * j * h + i * n;
          var w = i * k * h + j * n;
          var x = j * k * h - i * n;
          var y = k * k * h + l;
          var A = d.m;
          A[0] = F * p + K * b + V * q;
          A[1] = G * p + N * b + W * q;
          A[2] = H * p + Q * b + X * q;
          A[3] = J * p + U * b + Y * q;
          A[4] = F * t + K * u + V * v;
          A[5] = G * t + N * u + W * v;
          A[6] = H * t + Q * u + X * v;
          A[7] = J * t + U * u + Y * v;
          A[8] = F * w + K * x + V * y;
          A[9] = G * w + N * x + W * y;
          A[10] = H * w + Q * x + X * y;
          A[11] = J * w + U * x + Y * y;
          if (f !== d) {
            A[12] = o[12];
            A[13] = o[13];
            A[14] = o[14];
            A[15] = o[15];
          }
          return d;
        };
        g.rotateX = function (b, g, e) {
          var i = b.m;
          var j = g.m;
          var k = Math.sin(e);
          var m = Math.cos(e);
          var a = j[4];
          var n = j[5];
          var c = j[6];
          var l = j[7];
          var h = j[8];
          var o = j[9];
          var f = j[10];
          var d = j[11];
          if (g !== b) {
            i[0] = j[0];
            i[1] = j[1];
            i[2] = j[2];
            i[3] = j[3];
            i[12] = j[12];
            i[13] = j[13];
            i[14] = j[14];
            i[15] = j[15];
          }
          i[4] = a * m + h * k;
          i[5] = n * m + o * k;
          i[6] = c * m + f * k;
          i[7] = l * m + d * k;
          i[8] = h * m - a * k;
          i[9] = o * m - n * k;
          i[10] = f * m - c * k;
          i[11] = d * m - l * k;
          return b;
        };
        g.rotateY = function (b, g, e) {
          var i = b.m;
          var j = g.m;
          var k = Math.sin(e);
          var m = Math.cos(e);
          var a = j[0];
          var n = j[1];
          var c = j[2];
          var l = j[3];
          var h = j[8];
          var o = j[9];
          var f = j[10];
          var d = j[11];
          if (g !== b) {
            i[4] = j[4];
            i[5] = j[5];
            i[6] = j[6];
            i[7] = j[7];
            i[12] = j[12];
            i[13] = j[13];
            i[14] = j[14];
            i[15] = j[15];
          }
          i[0] = a * m - h * k;
          i[1] = n * m - o * k;
          i[2] = c * m - f * k;
          i[3] = l * m - d * k;
          i[8] = a * k + h * m;
          i[9] = n * k + o * m;
          i[10] = c * k + f * m;
          i[11] = l * k + d * m;
          return b;
        };
        g.rotateZ = function (b, g, e) {
          var i = g.m;
          var j = b.m;
          var k = Math.sin(e);
          var m = Math.cos(e);
          var a = g.m[0];
          var n = g.m[1];
          var c = g.m[2];
          var l = g.m[3];
          var h = g.m[4];
          var o = g.m[5];
          var f = g.m[6];
          var d = g.m[7];
          if (g !== b) {
            j[8] = i[8];
            j[9] = i[9];
            j[10] = i[10];
            j[11] = i[11];
            j[12] = i[12];
            j[13] = i[13];
            j[14] = i[14];
            j[15] = i[15];
          }
          j[0] = a * m + h * k;
          j[1] = n * m + o * k;
          j[2] = c * m + f * k;
          j[3] = l * m + d * k;
          j[4] = h * m - a * k;
          j[5] = o * m - n * k;
          j[6] = f * m - c * k;
          j[7] = d * m - l * k;
          return b;
        };
        g.fromTranslation = function (a, b) {
          var c = a.m;
          c[0] = 1;
          c[1] = 0;
          c[2] = 0;
          c[3] = 0;
          c[4] = 0;
          c[5] = 1;
          c[6] = 0;
          c[7] = 0;
          c[8] = 0;
          c[9] = 0;
          c[10] = 1;
          c[11] = 0;
          c[12] = b.x;
          c[13] = b.y;
          c[14] = b.z;
          c[15] = 1;
          return a;
        };
        g.fromScaling = function (a, b) {
          var c = a.m;
          c[0] = b.x;
          c[1] = 0;
          c[2] = 0;
          c[3] = 0;
          c[4] = 0;
          c[5] = b.y;
          c[6] = 0;
          c[7] = 0;
          c[8] = 0;
          c[9] = 0;
          c[10] = b.z;
          c[11] = 0;
          c[12] = 0;
          c[13] = 0;
          c[14] = 0;
          c[15] = 1;
          return a;
        };
        g.fromRotation = function (b, d, e) {
          var f = e.x;
          var g = e.y;
          var i = e.z;
          var j = Math.sqrt(f * f + g * g + i * i);
          if (Math.abs(j) < z.EPSILON) {
            return null;
          }
          f *= j = 1 / j;
          g *= j;
          i *= j;
          var k = Math.sin(d);
          var c = Math.cos(d);
          var l = 1 - c;
          var h = b.m;
          h[0] = f * f * l + c;
          h[1] = g * f * l + i * k;
          h[2] = i * f * l - g * k;
          h[3] = 0;
          h[4] = f * g * l - i * k;
          h[5] = g * g * l + c;
          h[6] = i * g * l + f * k;
          h[7] = 0;
          h[8] = f * i * l + g * k;
          h[9] = g * i * l - f * k;
          h[10] = i * i * l + c;
          h[11] = 0;
          h[12] = 0;
          h[13] = 0;
          h[14] = 0;
          h[15] = 1;
          return b;
        };
        g.fromXRotation = function (a, b) {
          var c = Math.sin(b);
          var d = Math.cos(b);
          var e = a.m;
          e[0] = 1;
          e[1] = 0;
          e[2] = 0;
          e[3] = 0;
          e[4] = 0;
          e[5] = d;
          e[6] = c;
          e[7] = 0;
          e[8] = 0;
          e[9] = -c;
          e[10] = d;
          e[11] = 0;
          e[12] = 0;
          e[13] = 0;
          e[14] = 0;
          e[15] = 1;
          return a;
        };
        g.fromYRotation = function (a, b) {
          var c = Math.sin(b);
          var d = Math.cos(b);
          var e = a.m;
          e[0] = d;
          e[1] = 0;
          e[2] = -c;
          e[3] = 0;
          e[4] = 0;
          e[5] = 1;
          e[6] = 0;
          e[7] = 0;
          e[8] = c;
          e[9] = 0;
          e[10] = d;
          e[11] = 0;
          e[12] = 0;
          e[13] = 0;
          e[14] = 0;
          e[15] = 1;
          return a;
        };
        g.fromZRotation = function (a, b) {
          var c = Math.sin(b);
          var d = Math.cos(b);
          var e = a.m;
          e[0] = d;
          e[1] = c;
          e[2] = 0;
          e[3] = 0;
          e[4] = -c;
          e[5] = d;
          e[6] = 0;
          e[7] = 0;
          e[8] = 0;
          e[9] = 0;
          e[10] = 1;
          e[11] = 0;
          e[12] = 0;
          e[13] = 0;
          e[14] = 0;
          e[15] = 1;
          return a;
        };
        g.fromRT = function (b, j, e) {
          var i = j.x;
          var k = j.y;
          var n = j.z;
          var q = j.w;
          var a = i + i;
          var o = k + k;
          var c = n + n;
          var l = i * a;
          var h = i * o;
          var r = i * c;
          var f = k * o;
          var d = k * c;
          var s = n * c;
          var p = q * a;
          var t = q * o;
          var g = q * c;
          var m = b.m;
          m[0] = 1 - (f + s);
          m[1] = h + g;
          m[2] = r - t;
          m[3] = 0;
          m[4] = h - g;
          m[5] = 1 - (l + s);
          m[6] = d + p;
          m[7] = 0;
          m[8] = r + t;
          m[9] = d - p;
          m[10] = 1 - (l + f);
          m[11] = 0;
          m[12] = e.x;
          m[13] = e.y;
          m[14] = e.z;
          m[15] = 1;
          return b;
        };
        g.getTranslation = function (a, b) {
          var c = b.m;
          a.x = c[12];
          a.y = c[13];
          a.z = c[14];
          return a;
        };
        g.getScaling = function (b, c) {
          var e = c.m;
          var g = M.m;
          var i = g[0] = e[0];
          var j = g[1] = e[1];
          var k = g[2] = e[2];
          var a = g[3] = e[4];
          var m = g[4] = e[5];
          var l = g[5] = e[6];
          var h = g[6] = e[8];
          var n = g[7] = e[9];
          var f = g[8] = e[10];
          b.x = Math.sqrt(i * i + j * j + k * k);
          b.y = Math.sqrt(a * a + m * m + l * l);
          b.z = Math.sqrt(h * h + n * n + f * f);
          if (B.default.determinant(M) < 0) {
            b.x *= -1;
          }
          return b;
        };
        g.getRotation = function (a, b) {
          var c = b.m;
          var d = c[0] + c[5] + c[10];
          var e = 0;
          if (d > 0) {
            e = Math.sqrt(d + 1) * 2;
            a.w = e * 0.25;
            a.x = (c[6] - c[9]) / e;
            a.y = (c[8] - c[2]) / e;
            a.z = (c[1] - c[4]) / e;
          } else if (c[0] > c[5] && c[0] > c[10]) {
            e = Math.sqrt(1 + c[0] - c[5] - c[10]) * 2;
            a.w = (c[6] - c[9]) / e;
            a.x = e * 0.25;
            a.y = (c[1] + c[4]) / e;
            a.z = (c[8] + c[2]) / e;
          } else if (c[5] > c[10]) {
            e = Math.sqrt(1 + c[5] - c[0] - c[10]) * 2;
            a.w = (c[8] - c[2]) / e;
            a.x = (c[1] + c[4]) / e;
            a.y = e * 0.25;
            a.z = (c[6] + c[9]) / e;
          } else {
            e = Math.sqrt(1 + c[10] - c[0] - c[5]) * 2;
            a.w = (c[1] - c[4]) / e;
            a.x = (c[8] + c[2]) / e;
            a.y = (c[6] + c[9]) / e;
            a.z = e * 0.25;
          }
          return a;
        };
        g.toRTS = function (a, b, c, d) {
          var e = a.m;
          var f = M.m;
          d.x = q.default.set(l, e[0], e[1], e[2]).mag();
          f[0] = e[0] / d.x;
          f[1] = e[1] / d.x;
          f[2] = e[2] / d.x;
          d.y = q.default.set(l, e[4], e[5], e[6]).mag();
          f[3] = e[4] / d.y;
          f[4] = e[5] / d.y;
          f[5] = e[6] / d.y;
          d.z = q.default.set(l, e[8], e[9], e[10]).mag();
          f[6] = e[8] / d.z;
          f[7] = e[9] / d.z;
          f[8] = e[10] / d.z;
          if (B.default.determinant(M) < 0) {
            d.x *= -1;
            f[0] *= -1;
            f[1] *= -1;
            f[2] *= -1;
          }
          s.default.fromMat3(b, M);
          q.default.set(c, e[12], e[13], e[14]);
        };
        g.fromRTS = function (b, j, e, i) {
          var k = j.x;
          var n = j.y;
          var q = j.z;
          var a = j.w;
          var o = k + k;
          var c = n + n;
          var l = q + q;
          var h = k * o;
          var r = k * c;
          var f = k * l;
          var d = n * c;
          var s = n * l;
          var p = q * l;
          var t = a * o;
          var g = a * c;
          var m = a * l;
          var u = i.x;
          var v = i.y;
          var w = i.z;
          var y = b.m;
          y[0] = (1 - (d + p)) * u;
          y[1] = (r + m) * u;
          y[2] = (f - g) * u;
          y[3] = 0;
          y[4] = (r - m) * v;
          y[5] = (1 - (h + p)) * v;
          y[6] = (s + t) * v;
          y[7] = 0;
          y[8] = (f + g) * w;
          y[9] = (s - t) * w;
          y[10] = (1 - (h + d)) * w;
          y[11] = 0;
          y[12] = e.x;
          y[13] = e.y;
          y[14] = e.z;
          y[15] = 1;
          return b;
        };
        g.fromRTSOrigin = function (j, k, e, i, n) {
          var q = k.x;
          var r = k.y;
          var a = k.z;
          var o = k.w;
          var c = q + q;
          var l = r + r;
          var h = a + a;
          var s = q * c;
          var f = q * l;
          var d = q * h;
          var t = r * l;
          var p = r * h;
          var u = a * h;
          var g = o * c;
          var m = o * l;
          var v = o * h;
          var w = i.x;
          var y = i.y;
          var z = i.z;
          var x = n.x;
          var A = n.y;
          var b = n.z;
          var B = j.m;
          B[0] = (1 - (t + u)) * w;
          B[1] = (f + v) * w;
          B[2] = (d - m) * w;
          B[3] = 0;
          B[4] = (f - v) * y;
          B[5] = (1 - (s + u)) * y;
          B[6] = (p + g) * y;
          B[7] = 0;
          B[8] = (d + m) * z;
          B[9] = (p - g) * z;
          B[10] = (1 - (s + t)) * z;
          B[11] = 0;
          B[12] = e.x + x - (B[0] * x + B[4] * A + B[8] * b);
          B[13] = e.y + A - (B[1] * x + B[5] * A + B[9] * b);
          B[14] = e.z + b - (B[2] * x + B[6] * A + B[10] * b);
          B[15] = 1;
          return j;
        };
        g.fromQuat = function (b, j) {
          var e = j.x;
          var i = j.y;
          var k = j.z;
          var n = j.w;
          var q = e + e;
          var a = i + i;
          var o = k + k;
          var c = e * q;
          var l = i * q;
          var h = i * a;
          var r = k * q;
          var f = k * a;
          var d = k * o;
          var s = n * q;
          var p = n * a;
          var t = n * o;
          var g = b.m;
          g[0] = 1 - h - d;
          g[1] = l + t;
          g[2] = r - p;
          g[3] = 0;
          g[4] = l - t;
          g[5] = 1 - c - d;
          g[6] = f + s;
          g[7] = 0;
          g[8] = r + p;
          g[9] = f - s;
          g[10] = 1 - c - h;
          g[11] = 0;
          g[12] = 0;
          g[13] = 0;
          g[14] = 0;
          g[15] = 1;
          return b;
        };
        g.frustum = function (b, d, e, f, g, i, j) {
          var a = 1 / (e - d);
          var k = 1 / (g - f);
          var c = 1 / (i - j);
          var l = b.m;
          l[0] = i * 2 * a;
          l[1] = 0;
          l[2] = 0;
          l[3] = 0;
          l[4] = 0;
          l[5] = i * 2 * k;
          l[6] = 0;
          l[7] = 0;
          l[8] = (e + d) * a;
          l[9] = (g + f) * k;
          l[10] = (j + i) * c;
          l[11] = -1;
          l[12] = 0;
          l[13] = 0;
          l[14] = j * i * 2 * c;
          l[15] = 0;
          return b;
        };
        g.perspective = function (b, c, d, e, f) {
          var g = 1 / Math.tan(c / 2);
          var h = 1 / (e - f);
          var a = b.m;
          a[0] = g / d;
          a[1] = 0;
          a[2] = 0;
          a[3] = 0;
          a[4] = 0;
          a[5] = g;
          a[6] = 0;
          a[7] = 0;
          a[8] = 0;
          a[9] = 0;
          a[10] = (f + e) * h;
          a[11] = -1;
          a[12] = 0;
          a[13] = 0;
          a[14] = f * 2 * e * h;
          a[15] = 0;
          return b;
        };
        g.ortho = function (b, d, e, f, g, i, j) {
          var a = 1 / (d - e);
          var k = 1 / (f - g);
          var c = 1 / (i - j);
          var l = b.m;
          l[0] = a * -2;
          l[1] = 0;
          l[2] = 0;
          l[3] = 0;
          l[4] = 0;
          l[5] = k * -2;
          l[6] = 0;
          l[7] = 0;
          l[8] = 0;
          l[9] = 0;
          l[10] = c * 2;
          l[11] = 0;
          l[12] = (d + e) * a;
          l[13] = (g + f) * k;
          l[14] = (j + i) * c;
          l[15] = 1;
          return b;
        };
        g.lookAt = function (b, j, e, i) {
          var k = j.x;
          var n = j.y;
          var q = j.z;
          var a = i.x;
          var o = i.y;
          var c = i.z;
          var l = k - e.x;
          var r = n - e.y;
          var s = q - e.z;
          var t = 1 / Math.sqrt(l * l + r * r + s * s);
          var w = o * (s *= t) - c * (r *= t);
          var x = c * (l *= t) - a * s;
          var z = a * r - o * l;
          var A = r * (z *= t = 1 / Math.sqrt(w * w + x * x + z * z)) - s * (x *= t);
          var g = s * (w *= t) - l * z;
          var m = l * x - r * w;
          var y = b.m;
          y[0] = w;
          y[1] = A;
          y[2] = l;
          y[3] = 0;
          y[4] = x;
          y[5] = g;
          y[6] = r;
          y[7] = 0;
          y[8] = z;
          y[9] = m;
          y[10] = s;
          y[11] = 0;
          y[12] = -(w * k + x * n + z * q);
          y[13] = -(A * k + g * n + m * q);
          y[14] = -(l * k + r * n + s * q);
          y[15] = 1;
          return b;
        };
        g.inverseTranspose = function (b, d) {
          var e = d.m;
          F = e[0];
          G = e[1];
          H = e[2];
          J = e[3];
          K = e[4];
          N = e[5];
          Q = e[6];
          U = e[7];
          V = e[8];
          W = e[9];
          X = e[10];
          Y = e[11];
          D = e[12];
          P = e[13];
          Z = e[14];
          $ = e[15];
          var f = F * N - G * K;
          var g = F * Q - H * K;
          var j = F * U - J * K;
          var k = G * Q - H * N;
          var a = G * U - J * N;
          var m = H * U - J * Q;
          var c = V * P - W * D;
          var l = V * Z - X * D;
          var h = V * $ - Y * D;
          var n = W * Z - X * P;
          var o = W * $ - Y * P;
          var p = X * $ - Y * Z;
          var q = f * p - g * o + j * n + k * h - a * l + m * c;
          if (q) {
            q = 1 / q;
            (e = b.m)[0] = (N * p - Q * o + U * n) * q;
            e[1] = (Q * h - K * p - U * l) * q;
            e[2] = (K * o - N * h + U * c) * q;
            e[3] = 0;
            e[4] = (H * o - G * p - J * n) * q;
            e[5] = (F * p - H * h + J * l) * q;
            e[6] = (G * h - F * o - J * c) * q;
            e[7] = 0;
            e[8] = (P * m - Z * a + $ * k) * q;
            e[9] = (Z * j - D * m - $ * g) * q;
            e[10] = (D * a - P * j + $ * f) * q;
            e[11] = 0;
            e[12] = 0;
            e[13] = 0;
            e[14] = 0;
            e[15] = 1;
            return b;
          } else {
            return null;
          }
        };
        g.add = function (a, b, c) {
          var d = a.m;
          var e = b.m;
          var f = c.m;
          d[0] = e[0] + f[0];
          d[1] = e[1] + f[1];
          d[2] = e[2] + f[2];
          d[3] = e[3] + f[3];
          d[4] = e[4] + f[4];
          d[5] = e[5] + f[5];
          d[6] = e[6] + f[6];
          d[7] = e[7] + f[7];
          d[8] = e[8] + f[8];
          d[9] = e[9] + f[9];
          d[10] = e[10] + f[10];
          d[11] = e[11] + f[11];
          d[12] = e[12] + f[12];
          d[13] = e[13] + f[13];
          d[14] = e[14] + f[14];
          d[15] = e[15] + f[15];
          return a;
        };
        g.subtract = function (a, b, c) {
          var d = a.m;
          var e = b.m;
          var f = c.m;
          d[0] = e[0] - f[0];
          d[1] = e[1] - f[1];
          d[2] = e[2] - f[2];
          d[3] = e[3] - f[3];
          d[4] = e[4] - f[4];
          d[5] = e[5] - f[5];
          d[6] = e[6] - f[6];
          d[7] = e[7] - f[7];
          d[8] = e[8] - f[8];
          d[9] = e[9] - f[9];
          d[10] = e[10] - f[10];
          d[11] = e[11] - f[11];
          d[12] = e[12] - f[12];
          d[13] = e[13] - f[13];
          d[14] = e[14] - f[14];
          d[15] = e[15] - f[15];
          return a;
        };
        g.multiplyScalar = function (a, b, c) {
          var d = a.m;
          var e = b.m;
          d[0] = e[0] * c;
          d[1] = e[1] * c;
          d[2] = e[2] * c;
          d[3] = e[3] * c;
          d[4] = e[4] * c;
          d[5] = e[5] * c;
          d[6] = e[6] * c;
          d[7] = e[7] * c;
          d[8] = e[8] * c;
          d[9] = e[9] * c;
          d[10] = e[10] * c;
          d[11] = e[11] * c;
          d[12] = e[12] * c;
          d[13] = e[13] * c;
          d[14] = e[14] * c;
          d[15] = e[15] * c;
          return a;
        };
        g.multiplyScalarAndAdd = function (b, c, d, e) {
          var f = b.m;
          var g = c.m;
          var h = d.m;
          f[0] = g[0] + h[0] * e;
          f[1] = g[1] + h[1] * e;
          f[2] = g[2] + h[2] * e;
          f[3] = g[3] + h[3] * e;
          f[4] = g[4] + h[4] * e;
          f[5] = g[5] + h[5] * e;
          f[6] = g[6] + h[6] * e;
          f[7] = g[7] + h[7] * e;
          f[8] = g[8] + h[8] * e;
          f[9] = g[9] + h[9] * e;
          f[10] = g[10] + h[10] * e;
          f[11] = g[11] + h[11] * e;
          f[12] = g[12] + h[12] * e;
          f[13] = g[13] + h[13] * e;
          f[14] = g[14] + h[14] * e;
          f[15] = g[15] + h[15] * e;
          return b;
        };
        g.strictEquals = function (a, b) {
          var c = a.m;
          var d = b.m;
          return c[0] === d[0] && c[1] === d[1] && c[2] === d[2] && c[3] === d[3] && c[4] === d[4] && c[5] === d[5] && c[6] === d[6] && c[7] === d[7] && c[8] === d[8] && c[9] === d[9] && c[10] === d[10] && c[11] === d[11] && c[12] === d[12] && c[13] === d[13] && c[14] === d[14] && c[15] === d[15];
        };
        g.equals = function (a, b, c) {
          if (c === undefined) {
            c = z.EPSILON;
          }
          var d = a.m;
          var e = b.m;
          return Math.abs(d[0] - e[0]) <= c * Math.max(1, Math.abs(d[0]), Math.abs(e[0])) && Math.abs(d[1] - e[1]) <= c * Math.max(1, Math.abs(d[1]), Math.abs(e[1])) && Math.abs(d[2] - e[2]) <= c * Math.max(1, Math.abs(d[2]), Math.abs(e[2])) && Math.abs(d[3] - e[3]) <= c * Math.max(1, Math.abs(d[3]), Math.abs(e[3])) && Math.abs(d[4] - e[4]) <= c * Math.max(1, Math.abs(d[4]), Math.abs(e[4])) && Math.abs(d[5] - e[5]) <= c * Math.max(1, Math.abs(d[5]), Math.abs(e[5])) && Math.abs(d[6] - e[6]) <= c * Math.max(1, Math.abs(d[6]), Math.abs(e[6])) && Math.abs(d[7] - e[7]) <= c * Math.max(1, Math.abs(d[7]), Math.abs(e[7])) && Math.abs(d[8] - e[8]) <= c * Math.max(1, Math.abs(d[8]), Math.abs(e[8])) && Math.abs(d[9] - e[9]) <= c * Math.max(1, Math.abs(d[9]), Math.abs(e[9])) && Math.abs(d[10] - e[10]) <= c * Math.max(1, Math.abs(d[10]), Math.abs(e[10])) && Math.abs(d[11] - e[11]) <= c * Math.max(1, Math.abs(d[11]), Math.abs(e[11])) && Math.abs(d[12] - e[12]) <= c * Math.max(1, Math.abs(d[12]), Math.abs(e[12])) && Math.abs(d[13] - e[13]) <= c * Math.max(1, Math.abs(d[13]), Math.abs(e[13])) && Math.abs(d[14] - e[14]) <= c * Math.max(1, Math.abs(d[14]), Math.abs(e[14])) && Math.abs(d[15] - e[15]) <= c * Math.max(1, Math.abs(d[15]), Math.abs(e[15]));
        };
        g.adjoint = function (b, j) {
          var e = j.m;
          var i = b.m;
          var k = e[0];
          var n = e[1];
          var q = e[2];
          var a = e[3];
          var o = e[4];
          var c = e[5];
          var l = e[6];
          var h = e[7];
          var r = e[8];
          var f = e[9];
          var d = e[10];
          var s = e[11];
          var p = e[12];
          var t = e[13];
          var g = e[14];
          var m = e[15];
          i[0] = c * (d * m - s * g) - f * (l * m - h * g) + t * (l * s - h * d);
          i[1] = -(n * (d * m - s * g) - f * (q * m - a * g) + t * (q * s - a * d));
          i[2] = n * (l * m - h * g) - c * (q * m - a * g) + t * (q * h - a * l);
          i[3] = -(n * (l * s - h * d) - c * (q * s - a * d) + f * (q * h - a * l));
          i[4] = -(o * (d * m - s * g) - r * (l * m - h * g) + p * (l * s - h * d));
          i[5] = k * (d * m - s * g) - r * (q * m - a * g) + p * (q * s - a * d);
          i[6] = -(k * (l * m - h * g) - o * (q * m - a * g) + p * (q * h - a * l));
          i[7] = k * (l * s - h * d) - o * (q * s - a * d) + r * (q * h - a * l);
          i[8] = o * (f * m - s * t) - r * (c * m - h * t) + p * (c * s - h * f);
          i[9] = -(k * (f * m - s * t) - r * (n * m - a * t) + p * (n * s - a * f));
          i[10] = k * (c * m - h * t) - o * (n * m - a * t) + p * (n * h - a * c);
          i[11] = -(k * (c * s - h * f) - o * (n * s - a * f) + r * (n * h - a * c));
          i[12] = -(o * (f * g - d * t) - r * (c * g - l * t) + p * (c * d - l * f));
          i[13] = k * (f * g - d * t) - r * (n * g - q * t) + p * (n * d - q * f);
          i[14] = -(k * (c * g - l * t) - o * (n * g - q * t) + p * (n * l - q * c));
          i[15] = k * (c * d - l * f) - o * (n * d - q * f) + r * (n * l - q * c);
          return b;
        };
        g.toArray = function (a, b, c) {
          if (c === undefined) {
            c = 0;
          }
          for (var d = b.m, e = 0; e < 16; e++) {
            a[c + e] = d[e];
          }
          return a;
        };
        g.fromArray = function (a, b, c) {
          if (c === undefined) {
            c = 0;
          }
          for (var d = a.m, e = 0; e < 16; e++) {
            d[e] = b[c + e];
          }
          return a;
        };
        f.clone = function () {
          var a = this.m;
          return new g(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
        };
        f.set = function (a) {
          var b = this.m;
          var c = a.m;
          b[0] = c[0];
          b[1] = c[1];
          b[2] = c[2];
          b[3] = c[3];
          b[4] = c[4];
          b[5] = c[5];
          b[6] = c[6];
          b[7] = c[7];
          b[8] = c[8];
          b[9] = c[9];
          b[10] = c[10];
          b[11] = c[11];
          b[12] = c[12];
          b[13] = c[13];
          b[14] = c[14];
          b[15] = c[15];
          return this;
        };
        f.equals = function (a) {
          return g.strictEquals(this, a);
        };
        f.fuzzyEquals = function (a) {
          return g.equals(this, a);
        };
        f.toString = function () {
          var a = this.m;
          if (a) {
            return "[\n" + a[0] + ", " + a[1] + ", " + a[2] + ", " + a[3] + ",\n" + a[4] + ", " + a[5] + ", " + a[6] + ", " + a[7] + ",\n" + a[8] + ", " + a[9] + ", " + a[10] + ", " + a[11] + ",\n" + a[12] + ", " + a[13] + ", " + a[14] + ", " + a[15] + "\n]";
          } else {
            return `[
  1, 0, 0, 0
  0, 1, 0, 0
  0, 0, 1, 0
  0, 0, 0, 1
  ]`;
          }
        };
        f.identity = function () {
          return g.identity(this);
        };
        f.transpose = function (a) {
          a = a || new g();
          return g.transpose(a, this);
        };
        f.invert = function (a) {
          a = a || new g();
          return g.invert(a, this);
        };
        f.adjoint = function (a) {
          a = a || new g();
          return g.adjoint(a, this);
        };
        f.determinant = function () {
          return g.determinant(this);
        };
        f.add = function (a, b) {
          b = b || new g();
          return g.add(b, this, a);
        };
        f.subtract = function (a) {
          return g.subtract(this, this, a);
        };
        f.multiply = function (a) {
          return g.multiply(this, this, a);
        };
        f.multiplyScalar = function (a) {
          return g.multiplyScalar(this, this, a);
        };
        f.translate = function (a, b) {
          b = b || new g();
          return g.translate(b, this, a);
        };
        f.scale = function (a, b) {
          b = b || new g();
          return g.scale(b, this, a);
        };
        f.rotate = function (a, b, c) {
          c = c || new g();
          return g.rotate(c, this, a, b);
        };
        f.getTranslation = function (a) {
          a = a || new q.default();
          return g.getTranslation(a, this);
        };
        f.getScale = function (a) {
          a = a || new q.default();
          return g.getScaling(a, this);
        };
        f.getRotation = function (a) {
          a = a || new s.default();
          return g.getRotation(a, this);
        };
        f.fromRTS = function (a, b, c) {
          return g.fromRTS(this, a, b, c);
        };
        f.fromQuat = function (a) {
          return g.fromQuat(this, a);
        };
        return g;
      }(i.default);
      e.default = L;
      L.mul = L.multiply;
      L.sub = L.subtract;
      L.IDENTITY = Object.freeze(new L());
      var l = new q.default();
      var M = new B.default();
      n.default.fastDefine("cc.Mat4", L, {
        m00: 1,
        m01: 0,
        m02: 0,
        m03: 0,
        m04: 0,
        m05: 1,
        m06: 0,
        m07: 0,
        m08: 0,
        m09: 0,
        m10: 1,
        m11: 0,
        m12: 0,
        m13: 0,
        m14: 0,
        m15: 1
      });
      for (var o = function (a) {
          Object.defineProperty(L.prototype, "m" + a, {
            get: function () {
              return this.m[a];
            },
            set: function (b) {
              this.m[a] = b;
            }
          });
        }, r = 0; r < 16; r++) {
        o(r);
      }
      cc.mat4 = function (b, g, e, i, j, k, m, a, n, c, l, h, o, f, d, q) {
        var p = new L(b, g, e, i, j, k, m, a, n, c, l, h, o, f, d, q);
        if (b === undefined) {
          L.identity(p);
        }
        return p;
      };
      cc.Mat4 = L;
      k.exports = e.default;
    }, {
      "../platform/CCClass": 162,
      "./mat3": 252,
      "./quat": 254,
      "./utils": 258,
      "./value-type": 259,
      "./vec3": 261
    }],
    254: [function (b, j, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var i = a(b("./value-type"));
      var k = a(b("../platform/CCClass"));
      var q = a(b("./vec3"));
      var s = a(b("./mat3"));
      var t = b("./utils");
      function a(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      function c(a, b) {
        return (c = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      var o = 0;
      var w = 0;
      var x = 0;
      var z = 0;
      var r = function (a) {
        var b;
        var d;
        d = a;
        (b = h).prototype = Object.create(d.prototype);
        b.prototype.constructor = b;
        c(b, d);
        var f = h.prototype;
        function h(b, c, d, f) {
          var g;
          if (b === undefined) {
            b = 0;
          }
          if (c === undefined) {
            c = 0;
          }
          if (d === undefined) {
            d = 0;
          }
          if (f === undefined) {
            f = 1;
          }
          (g = a.call(this) || this).x = undefined;
          g.y = undefined;
          g.z = undefined;
          g.w = undefined;
          if (b && typeof b == "object") {
            g.x = b.x;
            g.y = b.y;
            g.z = b.z;
            g.w = b.w;
          } else {
            g.x = b;
            g.y = c;
            g.z = d;
            g.w = f;
          }
          return g;
        }
        f.mul = function (a, b) {
          return h.multiply(b || new h(), this, a);
        };
        h.clone = function (a) {
          return new h(a.x, a.y, a.z, a.w);
        };
        h.copy = function (a, b) {
          a.x = b.x;
          a.y = b.y;
          a.z = b.z;
          a.w = b.w;
          return a;
        };
        h.set = function (a, b, c, d, e) {
          a.x = b;
          a.y = c;
          a.z = d;
          a.w = e;
          return a;
        };
        h.identity = function (a) {
          a.x = 0;
          a.y = 0;
          a.z = 0;
          a.w = 1;
          return a;
        };
        h.rotationTo = function (a, b, c) {
          var d = q.default.dot(b, c);
          if (d < -0.999999) {
            q.default.cross(v, q.default.RIGHT, b);
            if (v.mag() < 0.000001) {
              q.default.cross(v, q.default.UP, b);
            }
            q.default.normalize(v, v);
            h.fromAxisAngle(a, v, Math.PI);
            return a;
          } else if (d > 0.999999) {
            a.x = 0;
            a.y = 0;
            a.z = 0;
            a.w = 1;
            return a;
          } else {
            q.default.cross(v, b, c);
            a.x = v.x;
            a.y = v.y;
            a.z = v.z;
            a.w = 1 + d;
            return h.normalize(a, a);
          }
        };
        h.getAxisAngle = function (a, b) {
          var c = Math.acos(b.w) * 2;
          var d = Math.sin(c / 2);
          if (d !== 0) {
            a.x = b.x / d;
            a.y = b.y / d;
            a.z = b.z / d;
          } else {
            a.x = 1;
            a.y = 0;
            a.z = 0;
          }
          return c;
        };
        h.multiply = function (a, b, c) {
          o = b.x * c.w + b.w * c.x + b.y * c.z - b.z * c.y;
          w = b.y * c.w + b.w * c.y + b.z * c.x - b.x * c.z;
          x = b.z * c.w + b.w * c.z + b.x * c.y - b.y * c.x;
          z = b.w * c.w - b.x * c.x - b.y * c.y - b.z * c.z;
          a.x = o;
          a.y = w;
          a.z = x;
          a.w = z;
          return a;
        };
        h.multiplyScalar = function (a, b, c) {
          a.x = b.x * c;
          a.y = b.y * c;
          a.z = b.z * c;
          a.w = b.w * c;
          return a;
        };
        h.scaleAndAdd = function (a, b, c, d) {
          a.x = b.x + c.x * d;
          a.y = b.y + c.y * d;
          a.z = b.z + c.z * d;
          a.w = b.w + c.w * d;
          return a;
        };
        h.rotateX = function (a, b, c) {
          var d = Math.sin(c *= 0.5);
          var e = Math.cos(c);
          o = b.x * e + b.w * d;
          w = b.y * e + b.z * d;
          x = b.z * e - b.y * d;
          z = b.w * e - b.x * d;
          a.x = o;
          a.y = w;
          a.z = x;
          a.w = z;
          return a;
        };
        h.rotateY = function (a, b, c) {
          var d = Math.sin(c *= 0.5);
          var e = Math.cos(c);
          o = b.x * e - b.z * d;
          w = b.y * e + b.w * d;
          x = b.z * e + b.x * d;
          z = b.w * e - b.y * d;
          a.x = o;
          a.y = w;
          a.z = x;
          a.w = z;
          return a;
        };
        h.rotateZ = function (a, b, c) {
          var d = Math.sin(c *= 0.5);
          var e = Math.cos(c);
          o = b.x * e + b.y * d;
          w = b.y * e - b.x * d;
          x = b.z * e + b.w * d;
          z = b.w * e - b.z * d;
          a.x = o;
          a.y = w;
          a.z = x;
          a.w = z;
          return a;
        };
        h.rotateAround = function (a, b, c, d) {
          h.invert(A, b);
          q.default.transformQuat(v, c, A);
          h.fromAxisAngle(A, v, d);
          h.multiply(a, b, A);
          return a;
        };
        h.rotateAroundLocal = function (a, b, c, d) {
          h.fromAxisAngle(A, c, d);
          h.multiply(a, b, A);
          return a;
        };
        h.calculateW = function (a, b) {
          a.x = b.x;
          a.y = b.y;
          a.z = b.z;
          a.w = Math.sqrt(Math.abs(1 - b.x * b.x - b.y * b.y - b.z * b.z));
          return a;
        };
        h.dot = function (a, b) {
          return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
        };
        h.lerp = function (a, b, c, d) {
          a.x = b.x + d * (c.x - b.x);
          a.y = b.y + d * (c.y - b.y);
          a.z = b.z + d * (c.z - b.z);
          a.w = b.w + d * (c.w - b.w);
          return a;
        };
        h.slerp = function (b, d, e, f) {
          var g = 0;
          var h = 0;
          var i = d.x * e.x + d.y * e.y + d.z * e.z + d.w * e.w;
          if (i < 0) {
            i = -i;
            e.x = -e.x;
            e.y = -e.y;
            e.z = -e.z;
            e.w = -e.w;
          }
          if (1 - i > 0.000001) {
            var j = Math.acos(i);
            var k = Math.sin(j);
            g = Math.sin((1 - f) * j) / k;
            h = Math.sin(f * j) / k;
          } else {
            g = 1 - f;
            h = f;
          }
          b.x = g * d.x + h * e.x;
          b.y = g * d.y + h * e.y;
          b.z = g * d.z + h * e.z;
          b.w = g * d.w + h * e.w;
          return b;
        };
        h.sqlerp = function (b, c, d, e, f, g) {
          h.slerp(A, c, f, g);
          h.slerp(p, d, e, g);
          h.slerp(b, A, p, g * 2 * (1 - g));
          return b;
        };
        h.invert = function (a, b) {
          var c = b.x * b.x + b.y * b.y + b.z * b.z + b.w * b.w;
          var d = c ? 1 / c : 0;
          a.x = -b.x * d;
          a.y = -b.y * d;
          a.z = -b.z * d;
          a.w = b.w * d;
          return a;
        };
        h.conjugate = function (a, b) {
          a.x = -b.x;
          a.y = -b.y;
          a.z = -b.z;
          a.w = b.w;
          return a;
        };
        h.len = function (a) {
          return Math.sqrt(a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w);
        };
        h.lengthSqr = function (a) {
          return a.x * a.x + a.y * a.y + a.z * a.z + a.w * a.w;
        };
        h.normalize = function (a, b) {
          var c = b.x * b.x + b.y * b.y + b.z * b.z + b.w * b.w;
          if (c > 0) {
            c = 1 / Math.sqrt(c);
            a.x = b.x * c;
            a.y = b.y * c;
            a.z = b.z * c;
            a.w = b.w * c;
          }
          return a;
        };
        h.fromAxes = function (a, b, c, d) {
          s.default.set(g, b.x, b.y, b.z, c.x, c.y, c.z, d.x, d.y, d.z);
          return h.normalize(a, h.fromMat3(a, g));
        };
        h.fromViewUp = function (a, b, c) {
          s.default.fromViewUp(g, b, c);
          return h.normalize(a, h.fromMat3(a, g));
        };
        h.fromAxisAngle = function (a, b, c) {
          var d = Math.sin(c *= 0.5);
          a.x = d * b.x;
          a.y = d * b.y;
          a.z = d * b.z;
          a.w = Math.cos(c);
          return a;
        };
        h.fromAngleZ = function (a, b) {
          b *= m;
          a.x = a.y = 0;
          a.z = Math.sin(b);
          a.w = Math.cos(b);
          return a;
        };
        h.fromMat3 = function (b, g) {
          var e = g.m;
          var i = e[0];
          var j = e[1];
          var k = e[2];
          var m = e[3];
          var a = e[4];
          var n = e[5];
          var c = e[6];
          var l = e[7];
          var h = e[8];
          var o = i + a + h;
          if (o > 0) {
            var f = 0.5 / Math.sqrt(o + 1);
            b.w = 0.25 / f;
            b.x = (n - l) * f;
            b.y = (c - k) * f;
            b.z = (j - m) * f;
          } else if (i > a && i > h) {
            var d = Math.sqrt(1 + i - a - h) * 2;
            b.w = (n - l) / d;
            b.x = d * 0.25;
            b.y = (m + j) / d;
            b.z = (c + k) / d;
          } else if (a > h) {
            var q = Math.sqrt(1 + a - i - h) * 2;
            b.w = (c - k) / q;
            b.x = (m + j) / q;
            b.y = q * 0.25;
            b.z = (l + n) / q;
          } else {
            var p = Math.sqrt(1 + h - i - a) * 2;
            b.w = (j - m) / p;
            b.x = (c + k) / p;
            b.y = (l + n) / p;
            b.z = p * 0.25;
          }
          return b;
        };
        h.fromEuler = function (b, d, f, g) {
          f *= m;
          g *= m;
          var h = Math.sin(d *= m);
          var j = Math.cos(d);
          var k = Math.sin(f);
          var a = Math.cos(f);
          var o = Math.sin(g);
          var c = Math.cos(g);
          b.x = h * a * c + j * k * o;
          b.y = j * k * c + h * a * o;
          b.z = j * a * o - h * k * c;
          b.w = j * a * c - h * k * o;
          return b;
        };
        h.toAxisX = function (a, b) {
          var c = b.y * 2;
          var d = b.z * 2;
          a.x = 1 - c * b.y - d * b.z;
          a.y = c * b.x + d * b.w;
          a.z = d * b.x + c * b.w;
          return a;
        };
        h.toAxisY = function (a, b) {
          var c = b.x * 2;
          var d = b.y * 2;
          var e = b.z * 2;
          a.x = d * b.x - e * b.w;
          a.y = 1 - c * b.x - e * b.z;
          a.z = e * b.y + c * b.w;
          return a;
        };
        h.toAxisZ = function (a, b) {
          var c = b.x * 2;
          var d = b.y * 2;
          var e = b.z * 2;
          a.x = e * b.x - d * b.w;
          a.y = e * b.y - c * b.w;
          a.z = 1 - c * b.x - d * b.y;
          return a;
        };
        h.toEuler = function (b, g, e) {
          var i = g.x;
          var j = g.y;
          var k = g.z;
          var m = g.w;
          var a = 0;
          var n = 0;
          var o = 0;
          var p = i * j + k * m;
          if (p > 0.499999) {
            a = 0;
            n = (0, t.toDegree)(Math.atan2(i, m) * 2);
            o = 90;
          } else if (p < -0.499999) {
            a = 0;
            n = -(0, t.toDegree)(Math.atan2(i, m) * 2);
            o = -90;
          } else {
            var q = i * i;
            var f = j * j;
            var d = k * k;
            a = (0, t.toDegree)(Math.atan2(i * 2 * m - j * 2 * k, 1 - q * 2 - d * 2));
            n = (0, t.toDegree)(Math.atan2(j * 2 * m - i * 2 * k, 1 - f * 2 - d * 2));
            o = (0, t.toDegree)(Math.asin(p * 2));
            if (e) {
              a = Math.sign(a + 0.000001) * -180 + a;
              n = Math.sign(n + 0.000001) * -180 + n;
              o = Math.sign(o + 0.000001) * 180 - o;
            }
          }
          b.x = a;
          b.y = n;
          b.z = o;
          return b;
        };
        h.strictEquals = function (a, b) {
          return a.x === b.x && a.y === b.y && a.z === b.z && a.w === b.w;
        };
        h.equals = function (a, b, c) {
          if (c === undefined) {
            c = t.EPSILON;
          }
          return Math.abs(a.x - b.x) <= c * Math.max(1, Math.abs(a.x), Math.abs(b.x)) && Math.abs(a.y - b.y) <= c * Math.max(1, Math.abs(a.y), Math.abs(b.y)) && Math.abs(a.z - b.z) <= c * Math.max(1, Math.abs(a.z), Math.abs(b.z)) && Math.abs(a.w - b.w) <= c * Math.max(1, Math.abs(a.w), Math.abs(b.w));
        };
        h.toArray = function (a, b, c) {
          if (c === undefined) {
            c = 0;
          }
          a[c + 0] = b.x;
          a[c + 1] = b.y;
          a[c + 2] = b.z;
          a[c + 3] = b.w;
          return a;
        };
        h.fromArray = function (a, b, c) {
          if (c === undefined) {
            c = 0;
          }
          a.x = b[c + 0];
          a.y = b[c + 1];
          a.z = b[c + 2];
          a.w = b[c + 3];
          return a;
        };
        f.clone = function () {
          return new h(this.x, this.y, this.z, this.w);
        };
        f.set = function (a) {
          this.x = a.x;
          this.y = a.y;
          this.z = a.z;
          this.w = a.w;
          return this;
        };
        f.equals = function (a) {
          return a && this.x === a.x && this.y === a.y && this.z === a.z && this.w === a.w;
        };
        f.toEuler = function (a) {
          return h.toEuler(a, this);
        };
        f.fromEuler = function (a) {
          return h.fromEuler(this, a.x, a.y, a.z);
        };
        f.lerp = function (a, b, c) {
          c = c || new h();
          h.slerp(c, this, a, b);
          return c;
        };
        f.multiply = function (a) {
          return h.multiply(this, this, a);
        };
        f.rotateAround = function (a, b, c, d) {
          d = d || new h();
          return h.rotateAround(d, a, b, c);
        };
        return h;
      }(i.default);
      e.default = r;
      r.mul = r.multiply;
      r.scale = r.multiplyScalar;
      r.mag = r.len;
      r.IDENTITY = Object.freeze(new r());
      var A = new r();
      var p = new r();
      var v = new q.default();
      var g = new s.default();
      var m = Math.PI * 0.5 / 180;
      k.default.fastDefine("cc.Quat", r, {
        x: 0,
        y: 0,
        z: 0,
        w: 1
      });
      cc.quat = function (a, b, c, d) {
        return new r(a, b, c, d);
      };
      cc.Quat = r;
      j.exports = e.default;
    }, {
      "../platform/CCClass": 162,
      "./mat3": 252,
      "./utils": 258,
      "./value-type": 259,
      "./vec3": 261
    }],
    255: [function (b, d, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var f = a(b("./value-type"));
      var g = a(b("../platform/CCClass"));
      var i = a(b("./vec2"));
      var j = a(b("./size"));
      function a(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      function k(a, b) {
        for (var c = 0; c < b.length; c++) {
          var d = b[c];
          d.enumerable = d.enumerable || false;
          d.configurable = true;
          if ("value" in d) {
            d.writable = true;
          }
          Object.defineProperty(a, d.key, d);
        }
      }
      function c(a, b) {
        return (c = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      var m = function (a) {
        var b;
        var d;
        function f(b, c, d, f) {
          var g;
          if (b === undefined) {
            b = 0;
          }
          if (c === undefined) {
            c = 0;
          }
          if (d === undefined) {
            d = 0;
          }
          if (f === undefined) {
            f = 0;
          }
          (g = a.call(this) || this).x = undefined;
          g.y = undefined;
          g.width = undefined;
          g.height = undefined;
          if (b && typeof b == "object") {
            c = b.y;
            d = b.width;
            f = b.height;
            b = b.x;
          }
          g.x = b || 0;
          g.y = c || 0;
          g.width = d || 0;
          g.height = f || 0;
          return g;
        }
        d = a;
        (b = f).prototype = Object.create(d.prototype);
        b.prototype.constructor = b;
        c(b, d);
        f.fromMinMax = function (a, b) {
          var c = Math.min(a.x, b.x);
          var d = Math.min(a.y, b.y);
          return new f(c, d, Math.max(a.x, b.x) - c, Math.max(a.y, b.y) - d);
        };
        var g;
        var l;
        var m = f.prototype;
        m.clone = function () {
          return new f(this.x, this.y, this.width, this.height);
        };
        m.equals = function (a) {
          return a && this.x === a.x && this.y === a.y && this.width === a.width && this.height === a.height;
        };
        m.lerp = function (b, c, d) {
          d = d || new f();
          var e = this.x;
          var g = this.y;
          var h = this.width;
          var a = this.height;
          d.x = e + (b.x - e) * c;
          d.y = g + (b.y - g) * c;
          d.width = h + (b.width - h) * c;
          d.height = a + (b.height - a) * c;
          return d;
        };
        m.set = function (a) {
          this.x = a.x;
          this.y = a.y;
          this.width = a.width;
          this.height = a.height;
          return this;
        };
        m.intersects = function (a) {
          var b = this.x + this.width;
          var c = this.y + this.height;
          var d = a.x + a.width;
          var e = a.y + a.height;
          return !(b < a.x || d < this.x || c < a.y || e < this.y);
        };
        m.intersection = function (b, d) {
          var e = this.x;
          var f = this.y;
          var g = this.x + this.width;
          var h = this.y + this.height;
          var i = d.x;
          var a = d.y;
          var j = d.x + d.width;
          var c = d.y + d.height;
          b.x = Math.max(e, i);
          b.y = Math.max(f, a);
          b.width = Math.min(g, j) - b.x;
          b.height = Math.min(h, c) - b.y;
          return b;
        };
        m.contains = function (a) {
          return this.x <= a.x && this.x + this.width >= a.x && this.y <= a.y && this.y + this.height >= a.y;
        };
        m.containsRect = function (a) {
          return this.x <= a.x && this.x + this.width >= a.x + a.width && this.y <= a.y && this.y + this.height >= a.y + a.height;
        };
        m.union = function (b, d) {
          var e = this.x;
          var f = this.y;
          var g = this.width;
          var h = this.height;
          var i = d.x;
          var a = d.y;
          var j = d.width;
          var c = d.height;
          b.x = Math.min(e, i);
          b.y = Math.min(f, a);
          b.width = Math.max(e + g, i + j) - b.x;
          b.height = Math.max(f + h, a + c) - b.y;
          return b;
        };
        m.transformMat4 = function (b, j) {
          var e = this.x;
          var i = this.y;
          var k = e + this.width;
          var n = i + this.height;
          var q = j.m;
          var a = q[0] * e + q[4] * i + q[12];
          var o = q[1] * e + q[5] * i + q[13];
          var c = q[0] * k + q[4] * i + q[12];
          var l = q[1] * k + q[5] * i + q[13];
          var h = q[0] * e + q[4] * n + q[12];
          var r = q[1] * e + q[5] * n + q[13];
          var f = q[0] * k + q[4] * n + q[12];
          var d = q[1] * k + q[5] * n + q[13];
          var s = Math.min(a, c, h, f);
          var p = Math.max(a, c, h, f);
          var t = Math.min(o, l, r, d);
          var g = Math.max(o, l, r, d);
          b.x = s;
          b.y = t;
          b.width = p - s;
          b.height = g - t;
          return b;
        };
        m.toString = function () {
          return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ", " + this.width.toFixed(2) + ", " + this.height.toFixed(2) + ")";
        };
        g = f;
        if (l = [{
          key: "xMin",
          get: function () {
            return this.x;
          },
          set: function (a) {
            this.width += this.x - a;
            this.x = a;
          }
        }, {
          key: "yMin",
          get: function () {
            return this.y;
          },
          set: function (a) {
            this.height += this.y - a;
            this.y = a;
          }
        }, {
          key: "xMax",
          get: function () {
            return this.x + this.width;
          },
          set: function (a) {
            this.width = a - this.x;
          }
        }, {
          key: "yMax",
          get: function () {
            return this.y + this.height;
          },
          set: function (a) {
            this.height = a - this.y;
          }
        }, {
          key: "center",
          get: function () {
            return new i.default(this.x + this.width * 0.5, this.y + this.height * 0.5);
          },
          set: function (a) {
            this.x = a.x - this.width * 0.5;
            this.y = a.y - this.height * 0.5;
          }
        }, {
          key: "origin",
          get: function () {
            return new i.default(this.x, this.y);
          },
          set: function (a) {
            this.x = a.x;
            this.y = a.y;
          }
        }, {
          key: "size",
          get: function () {
            return new j.default(this.width, this.height);
          },
          set: function (a) {
            this.width = a.width;
            this.height = a.height;
          }
        }]) {
          k(g.prototype, l);
        }
        Object.defineProperty(g, "prototype", {
          writable: false
        });
        return f;
      }(f.default);
      e.default = m;
      g.default.fastDefine("cc.Rect", m, {
        x: 0,
        y: 0,
        width: 0,
        height: 0
      });
      cc.Rect = m;
      cc.rect = function (a, b, c, d) {
        return new m(a, b, c, d);
      };
      d.exports = e.default;
    }, {
      "../platform/CCClass": 162,
      "./size": 256,
      "./value-type": 259,
      "./vec2": 260
    }],
    256: [function (b, d, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var f = h(b("./value-type"));
      var g = h(b("../platform/CCClass"));
      function h(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      function i(a, b) {
        for (var c = 0; c < b.length; c++) {
          var d = b[c];
          d.enumerable = d.enumerable || false;
          d.configurable = true;
          if ("value" in d) {
            d.writable = true;
          }
          Object.defineProperty(a, d.key, d);
        }
      }
      function a(b, c) {
        return (a = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(b, c);
      }
      var j = function (b) {
        var d;
        var f;
        function g(a, c) {
          var d;
          if (a === undefined) {
            a = 0;
          }
          if (c === undefined) {
            c = 0;
          }
          (d = b.call(this) || this).width = undefined;
          d.height = undefined;
          if (a && typeof a == "object") {
            d.width = a.width;
            d.height = a.height;
          } else {
            d.width = a || 0;
            d.height = c || 0;
          }
          return d;
        }
        f = b;
        (d = g).prototype = Object.create(f.prototype);
        d.prototype.constructor = d;
        a(d, f);
        var h;
        var j;
        var k = g.prototype;
        k.clone = function () {
          return new g(this.width, this.height);
        };
        k.equals = function (a) {
          return a && this.width === a.width && this.height === a.height;
        };
        k.lerp = function (a, b, c) {
          c = c || new g();
          var d = this.width;
          var e = this.height;
          c.width = d + (a.width - d) * b;
          c.height = e + (a.height - e) * b;
          return c;
        };
        k.set = function (a) {
          this.width = a.width;
          this.height = a.height;
          return this;
        };
        k.toString = function () {
          return "(" + this.width.toFixed(2) + ", " + this.height.toFixed(2) + ")";
        };
        h = g;
        j = [{
          key: "ZERO",
          get: function () {
            return new g();
          }
        }];
        if (null) {
          i(h.prototype, null);
        }
        if (j) {
          i(h, j);
        }
        Object.defineProperty(h, "prototype", {
          writable: false
        });
        return g;
      }(f.default);
      e.default = j;
      j.ZERO_R = j.ZERO;
      g.default.fastDefine("cc.Size", j, {
        width: 0,
        height: 0
      });
      cc.size = function (a, b) {
        return new j(a, b);
      };
      cc.Size = j;
      d.exports = e.default;
    }, {
      "../platform/CCClass": 162,
      "./value-type": 259
    }],
    257: [function (b, c, d) {
      "use strict";
  
      d.__esModule = true;
      d.default = undefined;
      var e;
      var f = (e = b("./quat")) && e.__esModule ? e : {
        default: e
      };
      var g = new f.default();
      var h = function () {
        function b() {}
        b.toRotation = function (a, b) {
          a.x = b[3];
          a.y = b[4];
          a.z = b[5];
          a.w = b[6];
          return a;
        };
        b.fromRotation = function (a, b) {
          a[3] = b.x;
          a[4] = b.y;
          a[5] = b.z;
          a[6] = b.w;
          return a;
        };
        b.toEuler = function (a, c) {
          b.toRotation(g, c);
          f.default.toEuler(a, g);
          return a;
        };
        b.fromEuler = function (a, c) {
          f.default.fromEuler(g, c.x, c.y, c.z);
          b.fromRotation(a, g);
          return a;
        };
        b.fromEulerNumber = function (c, d, e, h) {
          f.default.fromEuler(g, d, e, h);
          b.fromRotation(c, g);
          return c;
        };
        b.toScale = function (a, b) {
          a.x = b[7];
          a.y = b[8];
          a.z = b[9];
          return a;
        };
        b.fromScale = function (a, b) {
          a[7] = b.x;
          a[8] = b.y;
          a[9] = b.z;
          return a;
        };
        b.toPosition = function (a, b) {
          a.x = b[0];
          a.y = b[1];
          a.z = b[2];
          return a;
        };
        b.fromPosition = function (a, b) {
          a[0] = b.x;
          a[1] = b.y;
          a[2] = b.z;
          return a;
        };
        b.fromAngleZ = function (a, c) {
          f.default.fromAngleZ(g, c);
          b.fromRotation(a, g);
          return a;
        };
        b.toMat4 = function (b, j) {
          var e = j[3];
          var i = j[4];
          var k = j[5];
          var n = j[6];
          var q = e + e;
          var a = i + i;
          var o = k + k;
          var c = e * q;
          var l = e * a;
          var h = e * o;
          var r = i * a;
          var f = i * o;
          var d = k * o;
          var s = n * q;
          var p = n * a;
          var t = n * o;
          var g = j[7];
          var m = j[8];
          var u = j[9];
          var v = b.m;
          v[0] = (1 - (r + d)) * g;
          v[1] = (l + t) * g;
          v[2] = (h - p) * g;
          v[3] = 0;
          v[4] = (l - t) * m;
          v[5] = (1 - (c + d)) * m;
          v[6] = (f + s) * m;
          v[7] = 0;
          v[8] = (h + p) * u;
          v[9] = (f - s) * u;
          v[10] = (1 - (c + r)) * u;
          v[11] = 0;
          v[12] = j[0];
          v[13] = j[1];
          v[14] = j[2];
          v[15] = 1;
          return b;
        };
        return b;
      }();
      d.default = h;
      cc.Trs = h;
      c.exports = d.default;
    }, {
      "./quat": 254
    }],
    258: [function (b, d, e) {
      "use strict";
  
      e.__esModule = true;
      e.INT_MIN = e.INT_MAX = e.INT_BITS = e.FLOAT_BYTES = e.FLOAT_ARRAY_TYPE = e.EPSILON = undefined;
      e.approx = function (a, b, c) {
        c = c || j;
        return Math.abs(a - b) <= c;
      };
      e.clamp = function (a, b, c) {
        if (a < b) {
          return b;
        } else if (a > c) {
          return c;
        } else {
          return a;
        }
      };
      e.clamp01 = function (a) {
        if (a < 0) {
          return 0;
        } else if (a > 1) {
          return 1;
        } else {
          return a;
        }
      };
      e.equals = function (a, b) {
        return Math.abs(a - b) <= j * Math.max(1, Math.abs(a), Math.abs(b));
      };
      e.inverseLerp = function (a, b, c) {
        return (c - a) / (b - a);
      };
      e.lerp = function (a, b, c) {
        return a + (b - a) * c;
      };
      e.nextPow2 = function (a) {
        --a;
        a |= a >> 1;
        a |= a >> 2;
        a |= a >> 4;
        a |= a >> 8;
        a |= a >> 16;
        return ++a;
      };
      e.pingPong = function (a, b) {
        a = h(a, b * 2);
        return b - Math.abs(a - b);
      };
      e.pseudoRandom = c;
      e.pseudoRandomRange = l;
      e.pseudoRandomRangeInt = function (a, b, c) {
        return Math.floor(l(a, b, c));
      };
      e.random = undefined;
      e.randomRange = k;
      e.randomRangeInt = function (a, b) {
        return Math.floor(k(a, b));
      };
      e.repeat = h;
      e.sign = function (a) {
        return (a > 0) - (a < 0);
      };
      e.toDegree = function (a) {
        return a * g;
      };
      e.toRadian = function (a) {
        return a * f;
      };
      var f = Math.PI / 180;
      var g = 180 / Math.PI;
      var j = 0.000001;
      e.EPSILON = j;
      e.INT_BITS = 32;
      e.INT_MAX = 2147483647;
      e.INT_MIN = -1 << 31;
      var i = Float64Array;
      e.FLOAT_ARRAY_TYPE = i;
      e.FLOAT_BYTES = 8;
      var a = Math.random;
      function k(a, b) {
        return Math.random() * (b - a) + a;
      }
      function c(a) {
        return (a = (a * 9301 + 49297) % 233280) / 233280;
      }
      function l(a, b, d) {
        return c(a) * (d - b) + b;
      }
      function h(a, b) {
        return a - Math.floor(a / b) * b;
      }
      e.random = a;
    }, {}],
    259: [function (a, b, c) {
      "use strict";
  
      c.__esModule = true;
      c.default = undefined;
      var d;
      var e = (d = a("../platform/js")) && d.__esModule ? d : {
        default: d
      };
      var f = function () {
        function a() {}
        var b = a.prototype;
        b.clone = function () {
          return null;
        };
        b.equals = function () {
          return false;
        };
        b.lerp = function () {
          return this.clone();
        };
        b.set = function () {};
        b.toString = function () {
          return "" + {};
        };
        return a;
      }();
      c.default = f;
      e.default.setClassName("cc.ValueType", f);
      cc.ValueType = f;
      b.exports = c.default;
    }, {
      "../platform/js": 183
    }],
    260: [function (b, g, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var i = a(b("./value-type"));
      var j = a(b("../platform/CCClass"));
      var k = a(b("../utils/misc"));
      var m = b("./utils");
      function a(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      function o(a, b) {
        for (var c = 0; c < b.length; c++) {
          var d = b[c];
          d.enumerable = d.enumerable || false;
          d.configurable = true;
          if ("value" in d) {
            d.writable = true;
          }
          Object.defineProperty(a, d.key, d);
        }
      }
      function c(a, b) {
        return (c = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      var p = 0;
      var q = 0;
      var n = function (a) {
        var b;
        var g;
        g = a;
        (b = s).prototype = Object.create(g.prototype);
        b.prototype.constructor = b;
        c(b, g);
        var h;
        var j;
        var l = s.prototype;
        function s(b, c) {
          var d;
          if (b === undefined) {
            b = 0;
          }
          if (c === undefined) {
            c = 0;
          }
          (d = a.call(this) || this).mag = s.prototype.len;
          d.magSqr = s.prototype.lengthSqr;
          d.subSelf = s.prototype.subtract;
          d.mulSelf = s.prototype.multiplyScalar;
          d.divSelf = s.prototype.divide;
          d.scaleSelf = s.prototype.multiply;
          d.negSelf = s.prototype.negate;
          d.x = undefined;
          d.y = undefined;
          d.z = 0;
          if (b && typeof b == "object") {
            d.x = b.x || 0;
            d.y = b.y || 0;
          } else {
            d.x = b || 0;
            d.y = c || 0;
          }
          return d;
        }
        l.sub = function (a, b) {
          return s.subtract(b || new s(), this, a);
        };
        l.mul = function (a, b) {
          return s.multiplyScalar(b || new s(), this, a);
        };
        l.div = function (a, b) {
          return s.multiplyScalar(b || new s(), this, 1 / a);
        };
        l.scale = function (a, b) {
          return s.multiply(b || new s(), this, a);
        };
        l.neg = function (a) {
          return s.negate(a || new s(), this);
        };
        s.clone = function (a) {
          return new s(a.x, a.y);
        };
        s.copy = function (a, b) {
          a.x = b.x;
          a.y = b.y;
          return a;
        };
        s.set = function (a, b, c) {
          a.x = b;
          a.y = c;
          return a;
        };
        s.add = function (a, b, c) {
          a.x = b.x + c.x;
          a.y = b.y + c.y;
          return a;
        };
        s.subtract = function (a, b, c) {
          a.x = b.x - c.x;
          a.y = b.y - c.y;
          return a;
        };
        s.multiply = function (a, b, c) {
          a.x = b.x * c.x;
          a.y = b.y * c.y;
          return a;
        };
        s.divide = function (a, b, c) {
          a.x = b.x / c.x;
          a.y = b.y / c.y;
          return a;
        };
        s.ceil = function (a, b) {
          a.x = Math.ceil(b.x);
          a.y = Math.ceil(b.y);
          return a;
        };
        s.floor = function (a, b) {
          a.x = Math.floor(b.x);
          a.y = Math.floor(b.y);
          return a;
        };
        s.min = function (a, b, c) {
          a.x = Math.min(b.x, c.x);
          a.y = Math.min(b.y, c.y);
          return a;
        };
        s.max = function (a, b, c) {
          a.x = Math.max(b.x, c.x);
          a.y = Math.max(b.y, c.y);
          return a;
        };
        s.round = function (a, b) {
          a.x = Math.round(b.x);
          a.y = Math.round(b.y);
          return a;
        };
        s.multiplyScalar = function (a, b, c) {
          a.x = b.x * c;
          a.y = b.y * c;
          return a;
        };
        s.scaleAndAdd = function (a, b, c, d) {
          a.x = b.x + c.x * d;
          a.y = b.y + c.y * d;
          return a;
        };
        s.distance = function (a, b) {
          p = b.x - a.x;
          q = b.y - a.y;
          return Math.sqrt(p * p + q * q);
        };
        s.squaredDistance = function (a, b) {
          p = b.x - a.x;
          q = b.y - a.y;
          return p * p + q * q;
        };
        s.len = function (a) {
          p = a.x;
          q = a.y;
          return Math.sqrt(p * p + q * q);
        };
        s.lengthSqr = function (a) {
          p = a.x;
          q = a.y;
          return p * p + q * q;
        };
        s.negate = function (a, b) {
          a.x = -b.x;
          a.y = -b.y;
          return a;
        };
        s.inverse = function (a, b) {
          a.x = 1 / b.x;
          a.y = 1 / b.y;
          return a;
        };
        s.inverseSafe = function (a, b) {
          p = b.x;
          q = b.y;
          if (Math.abs(p) < m.EPSILON) {
            a.x = 0;
          } else {
            a.x = 1 / p;
          }
          if (Math.abs(q) < m.EPSILON) {
            a.y = 0;
          } else {
            a.y = 1 / q;
          }
          return a;
        };
        s.normalize = function (a, b) {
          p = b.x;
          q = b.y;
          var c = p * p + q * q;
          if (c > 0) {
            c = 1 / Math.sqrt(c);
            a.x = p * c;
            a.y = q * c;
          }
          return a;
        };
        s.dot = function (a, b) {
          return a.x * b.x + a.y * b.y;
        };
        s.cross = function (a, b, c) {
          a.x = a.y = 0;
          a.z = b.x * c.y - b.y * c.x;
          return a;
        };
        s.lerp = function (a, b, c, d) {
          p = b.x;
          q = b.y;
          a.x = p + d * (c.x - p);
          a.y = q + d * (c.y - q);
          return a;
        };
        s.random = function (a, b) {
          b = b || 1;
          var c = (0, m.random)() * 2 * Math.PI;
          a.x = Math.cos(c) * b;
          a.y = Math.sin(c) * b;
          return a;
        };
        s.transformMat3 = function (a, b, c) {
          p = b.x;
          q = b.y;
          var d = c.m;
          a.x = d[0] * p + d[3] * q + d[6];
          a.y = d[1] * p + d[4] * q + d[7];
          return a;
        };
        s.transformMat4 = function (a, b, c) {
          p = b.x;
          q = b.y;
          var d = c.m;
          a.x = d[0] * p + d[4] * q + d[12];
          a.y = d[1] * p + d[5] * q + d[13];
          return a;
        };
        s.strictEquals = function (a, b) {
          return a.x === b.x && a.y === b.y;
        };
        s.equals = function (a, b, c) {
          if (c === undefined) {
            c = m.EPSILON;
          }
          return Math.abs(a.x - b.x) <= c * Math.max(1, Math.abs(a.x), Math.abs(b.x)) && Math.abs(a.y - b.y) <= c * Math.max(1, Math.abs(a.y), Math.abs(b.y));
        };
        s.angle = function (a, b) {
          s.normalize(r, a);
          s.normalize(d, b);
          var c = s.dot(r, d);
          if (c > 1) {
            return 0;
          } else if (c < -1) {
            return Math.PI;
          } else {
            return Math.acos(c);
          }
        };
        s.toArray = function (a, b, c) {
          if (c === undefined) {
            c = 0;
          }
          a[c + 0] = b.x;
          a[c + 1] = b.y;
          return a;
        };
        s.fromArray = function (a, b, c) {
          if (c === undefined) {
            c = 0;
          }
          a.x = b[c + 0];
          a.y = b[c + 1];
          return a;
        };
        l.clone = function () {
          return new s(this.x, this.y);
        };
        l.set = function (a) {
          this.x = a.x;
          this.y = a.y;
          return this;
        };
        l.equals = function (a) {
          return a && this.x === a.x && this.y === a.y;
        };
        l.fuzzyEquals = function (a, b) {
          return this.x - b <= a.x && a.x <= this.x + b && this.y - b <= a.y && a.y <= this.y + b;
        };
        l.toString = function () {
          return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ")";
        };
        l.lerp = function (a, b, c) {
          c = c || new s();
          var d = this.x;
          var e = this.y;
          c.x = d + (a.x - d) * b;
          c.y = e + (a.y - e) * b;
          return c;
        };
        l.clampf = function (a, b) {
          this.x = k.default.clampf(this.x, a.x, b.x);
          this.y = k.default.clampf(this.y, a.y, b.y);
          return this;
        };
        l.add = function (a, b) {
          (b = b || new s()).x = this.x + a.x;
          b.y = this.y + a.y;
          return b;
        };
        l.addSelf = function (a) {
          this.x += a.x;
          this.y += a.y;
          return this;
        };
        l.subtract = function (a) {
          this.x -= a.x;
          this.y -= a.y;
          return this;
        };
        l.multiplyScalar = function (a) {
          this.x *= a;
          this.y *= a;
          return this;
        };
        l.multiply = function (a) {
          this.x *= a.x;
          this.y *= a.y;
          return this;
        };
        l.divide = function (a) {
          this.x /= a;
          this.y /= a;
          return this;
        };
        l.negate = function () {
          this.x = -this.x;
          this.y = -this.y;
          return this;
        };
        l.dot = function (a) {
          return this.x * a.x + this.y * a.y;
        };
        l.cross = function (a) {
          return this.x * a.y - this.y * a.x;
        };
        l.len = function () {
          return Math.sqrt(this.x * this.x + this.y * this.y);
        };
        l.lengthSqr = function () {
          return this.x * this.x + this.y * this.y;
        };
        l.normalizeSelf = function () {
          var a = this.x * this.x + this.y * this.y;
          if (a === 1) {
            return this;
          }
          if (a === 0) {
            return this;
          }
          var b = 1 / Math.sqrt(a);
          this.x *= b;
          this.y *= b;
          return this;
        };
        l.normalize = function (a) {
          (a = a || new s()).x = this.x;
          a.y = this.y;
          a.normalizeSelf();
          return a;
        };
        l.angle = function (a) {
          var b = this.magSqr();
          var c = a.magSqr();
          if (b === 0 || c === 0) {
            return 0;
          }
          var d = this.dot(a) / Math.sqrt(b * c);
          d = k.default.clampf(d, -1, 1);
          return Math.acos(d);
        };
        l.signAngle = function (a) {
          var b = this.angle(a);
          if (this.cross(a) < 0) {
            return -b;
          } else {
            return b;
          }
        };
        l.rotate = function (a, b) {
          (b = b || new s()).x = this.x;
          b.y = this.y;
          return b.rotateSelf(a);
        };
        l.rotateSelf = function (a) {
          var b = Math.sin(a);
          var c = Math.cos(a);
          var d = this.x;
          this.x = c * d - b * this.y;
          this.y = b * d + c * this.y;
          return this;
        };
        l.project = function (a) {
          return a.multiplyScalar(this.dot(a) / a.dot(a));
        };
        l.transformMat4 = function (a, b) {
          b = b || new s();
          s.transformMat4(b, this, a);
          return b;
        };
        l.maxAxis = function () {
          return Math.max(this.x, this.y);
        };
        h = s;
        j = [{
          key: "ONE",
          get: function () {
            return new s(1, 1);
          }
        }, {
          key: "ZERO",
          get: function () {
            return new s(0, 0);
          }
        }, {
          key: "UP",
          get: function () {
            return new s(0, 1);
          }
        }, {
          key: "RIGHT",
          get: function () {
            return new s(1, 0);
          }
        }];
        if (null) {
          o(h.prototype, null);
        }
        if (j) {
          o(h, j);
        }
        Object.defineProperty(h, "prototype", {
          writable: false
        });
        return s;
      }(i.default);
      e.default = n;
      n.sub = n.subtract;
      n.mul = n.multiply;
      n.scale = n.multiplyScalar;
      n.mag = n.len;
      n.squaredMagnitude = n.lengthSqr;
      n.div = n.divide;
      n.ONE_R = n.ONE;
      n.ZERO_R = n.ZERO;
      n.UP_R = n.UP;
      n.RIGHT_R = n.RIGHT;
      var r = new n();
      var d = new n();
      j.default.fastDefine("cc.Vec2", n, {
        x: 0,
        y: 0
      });
      cc.v2 = function (a, b) {
        return new n(a, b);
      };
      cc.Vec2 = n;
      g.exports = e.default;
    }, {
      "../platform/CCClass": 162,
      "../utils/misc": 236,
      "./utils": 258,
      "./value-type": 259
    }],
    261: [function (b, g, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var i = n(b("./value-type"));
      var j = n(b("../platform/CCClass"));
      var k = n(b("../utils/misc"));
      var m = n(b("./vec2"));
      var a = b("./utils");
      function n(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      function c(a, b) {
        for (var c = 0; c < b.length; c++) {
          var d = b[c];
          d.enumerable = d.enumerable || false;
          d.configurable = true;
          if ("value" in d) {
            d.writable = true;
          }
          Object.defineProperty(a, d.key, d);
        }
      }
      function l(a, b) {
        return (l = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      var q = 0;
      var w = 0;
      var x = 0;
      var o = function (b) {
        var d;
        var f;
        f = b;
        (d = o).prototype = Object.create(f.prototype);
        d.prototype.constructor = d;
        l(d, f);
        var g;
        var h;
        var j = o.prototype;
        function o(a, c, d) {
          var f;
          if (a === undefined) {
            a = 0;
          }
          if (c === undefined) {
            c = 0;
          }
          if (d === undefined) {
            d = 0;
          }
          (f = b.call(this) || this).mag = o.prototype.len;
          f.magSqr = o.prototype.lengthSqr;
          f.subSelf = o.prototype.subtract;
          f.mulSelf = o.prototype.multiplyScalar;
          f.divSelf = o.prototype.divide;
          f.scaleSelf = o.prototype.multiply;
          f.negSelf = o.prototype.negate;
          f.x = undefined;
          f.y = undefined;
          f.z = undefined;
          f.angle = m.default.prototype.angle;
          f.project = m.default.prototype.project;
          if (a && typeof a == "object") {
            f.x = a.x;
            f.y = a.y;
            f.z = a.z;
          } else {
            f.x = a;
            f.y = c;
            f.z = d;
          }
          return f;
        }
        j.sub = function (a, b) {
          return o.subtract(b || new o(), this, a);
        };
        j.mul = function (a, b) {
          return o.multiplyScalar(b || new o(), this, a);
        };
        j.div = function (a, b) {
          return o.multiplyScalar(b || new o(), this, 1 / a);
        };
        j.scale = function (a, b) {
          return o.multiply(b || new o(), this, a);
        };
        j.neg = function (a) {
          return o.negate(a || new o(), this);
        };
        o.zero = function (a) {
          a.x = 0;
          a.y = 0;
          a.z = 0;
          return a;
        };
        o.clone = function (a) {
          return new o(a.x, a.y, a.z);
        };
        o.copy = function (a, b) {
          a.x = b.x;
          a.y = b.y;
          a.z = b.z;
          return a;
        };
        o.set = function (a, b, c, d) {
          a.x = b;
          a.y = c;
          a.z = d;
          return a;
        };
        o.add = function (a, b, c) {
          a.x = b.x + c.x;
          a.y = b.y + c.y;
          a.z = b.z + c.z;
          return a;
        };
        o.subtract = function (a, b, c) {
          a.x = b.x - c.x;
          a.y = b.y - c.y;
          a.z = b.z - c.z;
          return a;
        };
        o.multiply = function (a, b, c) {
          a.x = b.x * c.x;
          a.y = b.y * c.y;
          a.z = b.z * c.z;
          return a;
        };
        o.divide = function (a, b, c) {
          a.x = b.x / c.x;
          a.y = b.y / c.y;
          a.z = b.z / c.z;
          return a;
        };
        o.ceil = function (a, b) {
          a.x = Math.ceil(b.x);
          a.y = Math.ceil(b.y);
          a.z = Math.ceil(b.z);
          return a;
        };
        o.floor = function (a, b) {
          a.x = Math.floor(b.x);
          a.y = Math.floor(b.y);
          a.z = Math.floor(b.z);
          return a;
        };
        o.min = function (a, b, c) {
          a.x = Math.min(b.x, c.x);
          a.y = Math.min(b.y, c.y);
          a.z = Math.min(b.z, c.z);
          return a;
        };
        o.max = function (a, b, c) {
          a.x = Math.max(b.x, c.x);
          a.y = Math.max(b.y, c.y);
          a.z = Math.max(b.z, c.z);
          return a;
        };
        o.round = function (a, b) {
          a.x = Math.round(b.x);
          a.y = Math.round(b.y);
          a.z = Math.round(b.z);
          return a;
        };
        o.multiplyScalar = function (a, b, c) {
          a.x = b.x * c;
          a.y = b.y * c;
          a.z = b.z * c;
          return a;
        };
        o.scaleAndAdd = function (a, b, c, d) {
          a.x = b.x + c.x * d;
          a.y = b.y + c.y * d;
          a.z = b.z + c.z * d;
          return a;
        };
        o.distance = function (a, b) {
          q = b.x - a.x;
          w = b.y - a.y;
          x = b.z - a.z;
          return Math.sqrt(q * q + w * w + x * x);
        };
        o.squaredDistance = function (a, b) {
          q = b.x - a.x;
          w = b.y - a.y;
          x = b.z - a.z;
          return q * q + w * w + x * x;
        };
        o.len = function (a) {
          q = a.x;
          w = a.y;
          x = a.z;
          return Math.sqrt(q * q + w * w + x * x);
        };
        o.lengthSqr = function (a) {
          q = a.x;
          w = a.y;
          x = a.z;
          return q * q + w * w + x * x;
        };
        o.negate = function (a, b) {
          a.x = -b.x;
          a.y = -b.y;
          a.z = -b.z;
          return a;
        };
        o.inverse = function (a, b) {
          a.x = 1 / b.x;
          a.y = 1 / b.y;
          a.z = 1 / b.z;
          return a;
        };
        o.inverseSafe = function (b, c) {
          q = c.x;
          w = c.y;
          x = c.z;
          if (Math.abs(q) < a.EPSILON) {
            b.x = 0;
          } else {
            b.x = 1 / q;
          }
          if (Math.abs(w) < a.EPSILON) {
            b.y = 0;
          } else {
            b.y = 1 / w;
          }
          if (Math.abs(x) < a.EPSILON) {
            b.z = 0;
          } else {
            b.z = 1 / x;
          }
          return b;
        };
        o.normalize = function (a, b) {
          q = b.x;
          w = b.y;
          x = b.z;
          var c = q * q + w * w + x * x;
          if (c > 0) {
            c = 1 / Math.sqrt(c);
            a.x = q * c;
            a.y = w * c;
            a.z = x * c;
          }
          return a;
        };
        o.dot = function (a, b) {
          return a.x * b.x + a.y * b.y + a.z * b.z;
        };
        o.cross = function (b, d, e) {
          var f = d.x;
          var g = d.y;
          var h = d.z;
          var i = e.x;
          var a = e.y;
          var j = e.z;
          b.x = g * j - h * a;
          b.y = h * i - f * j;
          b.z = f * a - g * i;
          return b;
        };
        o.lerp = function (a, b, c, d) {
          a.x = b.x + d * (c.x - b.x);
          a.y = b.y + d * (c.y - b.y);
          a.z = b.z + d * (c.z - b.z);
          return a;
        };
        o.random = function (b, c) {
          c = c || 1;
          var d = (0, a.random)() * 2 * Math.PI;
          var f = (0, a.random)() * 2 - 1;
          var g = Math.sqrt(1 - f * f);
          b.x = g * Math.cos(d) * c;
          b.y = g * Math.sin(d) * c;
          b.z = f * c;
          return b;
        };
        o.transformMat4 = function (a, b, c) {
          q = b.x;
          w = b.y;
          x = b.z;
          var d = c.m;
          var e = d[3] * q + d[7] * w + d[11] * x + d[15];
          e = e ? 1 / e : 1;
          a.x = (d[0] * q + d[4] * w + d[8] * x + d[12]) * e;
          a.y = (d[1] * q + d[5] * w + d[9] * x + d[13]) * e;
          a.z = (d[2] * q + d[6] * w + d[10] * x + d[14]) * e;
          return a;
        };
        o.transformMat4Normal = function (a, b, c) {
          q = b.x;
          w = b.y;
          x = b.z;
          var d = c.m;
          var e = d[3] * q + d[7] * w + d[11] * x;
          e = e ? 1 / e : 1;
          a.x = (d[0] * q + d[4] * w + d[8] * x) * e;
          a.y = (d[1] * q + d[5] * w + d[9] * x) * e;
          a.z = (d[2] * q + d[6] * w + d[10] * x) * e;
          return a;
        };
        o.transformMat3 = function (a, b, c) {
          q = b.x;
          w = b.y;
          x = b.z;
          var d = c.m;
          a.x = q * d[0] + w * d[3] + x * d[6];
          a.y = q * d[1] + w * d[4] + x * d[7];
          a.z = q * d[2] + w * d[5] + x * d[8];
          return a;
        };
        o.transformAffine = function (a, b, c) {
          q = b.x;
          w = b.y;
          x = b.z;
          var d = c.m;
          a.x = d[0] * q + d[1] * w + d[2] * x + d[3];
          a.y = d[4] * q + d[5] * w + d[6] * x + d[7];
          a.x = d[8] * q + d[9] * w + d[10] * x + d[11];
          return a;
        };
        o.transformQuat = function (b, c, d) {
          var e = d.w * c.x + d.y * c.z - d.z * c.y;
          var f = d.w * c.y + d.z * c.x - d.x * c.z;
          var g = d.w * c.z + d.x * c.y - d.y * c.x;
          var h = -d.x * c.x - d.y * c.y - d.z * c.z;
          b.x = e * d.w + h * -d.x + f * -d.z - g * -d.y;
          b.y = f * d.w + h * -d.y + g * -d.x - e * -d.z;
          b.z = g * d.w + h * -d.z + e * -d.y - f * -d.x;
          return b;
        };
        o.transformRTS = function (b, d, e, f, g) {
          var i = d.x * g.x;
          var j = d.y * g.y;
          var a = d.z * g.z;
          var k = e.w * i + e.y * a - e.z * j;
          var c = e.w * j + e.z * i - e.x * a;
          var l = e.w * a + e.x * j - e.y * i;
          var h = -e.x * i - e.y * j - e.z * a;
          b.x = k * e.w + h * -e.x + c * -e.z - l * -e.y + f.x;
          b.y = c * e.w + h * -e.y + l * -e.x - k * -e.z + f.y;
          b.z = l * e.w + h * -e.z + k * -e.y - c * -e.x + f.z;
          return b;
        };
        o.transformInverseRTS = function (b, d, e, f, g) {
          var i = d.x - f.x;
          var j = d.y - f.y;
          var a = d.z - f.z;
          var k = e.w * i - e.y * a + e.z * j;
          var c = e.w * j - e.z * i + e.x * a;
          var l = e.w * a - e.x * j + e.y * i;
          var h = e.x * i + e.y * j + e.z * a;
          b.x = (k * e.w + h * e.x + c * e.z - l * e.y) / g.x;
          b.y = (c * e.w + h * e.y + l * e.x - k * e.z) / g.y;
          b.z = (l * e.w + h * e.z + k * e.y - c * e.x) / g.z;
          return b;
        };
        o.rotateX = function (b, d, e, f) {
          q = d.x - e.x;
          w = d.y - e.y;
          x = d.z - e.z;
          var g = Math.cos(f);
          var h = Math.sin(f);
          var i = q;
          var a = w * g - x * h;
          var j = w * h + x * g;
          b.x = i + e.x;
          b.y = a + e.y;
          b.z = j + e.z;
          return b;
        };
        o.rotateY = function (b, d, e, f) {
          q = d.x - e.x;
          w = d.y - e.y;
          x = d.z - e.z;
          var g = Math.cos(f);
          var h = Math.sin(f);
          var i = x * h + q * g;
          var a = w;
          var j = x * g - q * h;
          b.x = i + e.x;
          b.y = a + e.y;
          b.z = j + e.z;
          return b;
        };
        o.rotateZ = function (b, d, e, f) {
          q = d.x - e.x;
          w = d.y - e.y;
          x = d.z - e.z;
          var g = Math.cos(f);
          var h = Math.sin(f);
          var i = q * g - w * h;
          var a = q * h + w * g;
          var j = x;
          b.x = i + e.x;
          b.y = a + e.y;
          b.z = j + e.z;
          return b;
        };
        o.strictEquals = function (a, b) {
          return a.x === b.x && a.y === b.y && a.z === b.z;
        };
        o.equals = function (b, d, e) {
          if (e === undefined) {
            e = a.EPSILON;
          }
          var f = b.x;
          var g = b.y;
          var h = b.z;
          var j = d.x;
          var k = d.y;
          var c = d.z;
          return Math.abs(f - j) <= e * Math.max(1, Math.abs(f), Math.abs(j)) && Math.abs(g - k) <= e * Math.max(1, Math.abs(g), Math.abs(k)) && Math.abs(h - c) <= e * Math.max(1, Math.abs(h), Math.abs(c));
        };
        o.angle = function (a, b) {
          o.normalize(r, a);
          o.normalize(p, b);
          var c = o.dot(r, p);
          if (c > 1) {
            return 0;
          } else if (c < -1) {
            return Math.PI;
          } else {
            return Math.acos(c);
          }
        };
        o.projectOnPlane = function (a, b, c) {
          return o.subtract(a, b, o.project(a, b, c));
        };
        o.project = function (a, b, c) {
          var d = o.lengthSqr(c);
          if (d < 0.000001) {
            return o.set(a, 0, 0, 0);
          } else {
            return o.multiplyScalar(a, c, o.dot(b, c) / d);
          }
        };
        o.toArray = function (a, b, c) {
          if (c === undefined) {
            c = 0;
          }
          a[c + 0] = b.x;
          a[c + 1] = b.y;
          a[c + 2] = b.z;
          return a;
        };
        o.fromArray = function (a, b, c) {
          if (c === undefined) {
            c = 0;
          }
          a.x = b[c + 0];
          a.y = b[c + 1];
          a.z = b[c + 2];
          return a;
        };
        j.clone = function () {
          return new o(this.x, this.y, this.z);
        };
        j.set = function (a) {
          this.x = a.x;
          this.y = a.y;
          this.z = a.z;
          return this;
        };
        j.equals = function (a) {
          return a && this.x === a.x && this.y === a.y && this.z === a.z;
        };
        j.fuzzyEquals = function (a, b) {
          return this.x - b <= a.x && a.x <= this.x + b && this.y - b <= a.y && a.y <= this.y + b && this.z - b <= a.z && a.z <= this.z + b;
        };
        j.toString = function () {
          return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ", " + this.z.toFixed(2) + ")";
        };
        j.lerp = function (a, b, c) {
          c = c || new o();
          o.lerp(c, this, a, b);
          return c;
        };
        j.clampf = function (a, b) {
          this.x = k.default.clampf(this.x, a.x, b.x);
          this.y = k.default.clampf(this.y, a.y, b.y);
          this.z = k.default.clampf(this.z, a.z, b.z);
          return this;
        };
        j.addSelf = function (a) {
          this.x += a.x;
          this.y += a.y;
          this.z += a.z;
          return this;
        };
        j.add = function (a, b) {
          (b = b || new o()).x = this.x + a.x;
          b.y = this.y + a.y;
          b.z = this.z + a.z;
          return b;
        };
        j.subtract = function (a) {
          this.x -= a.x;
          this.y -= a.y;
          this.z -= a.z;
          return this;
        };
        j.multiplyScalar = function (a) {
          this.x *= a;
          this.y *= a;
          this.z *= a;
          return this;
        };
        j.multiply = function (a) {
          this.x *= a.x;
          this.y *= a.y;
          this.z *= a.z;
          return this;
        };
        j.divide = function (a) {
          this.x /= a;
          this.y /= a;
          this.z /= a;
          return this;
        };
        j.negate = function () {
          this.x = -this.x;
          this.y = -this.y;
          this.z = -this.z;
          return this;
        };
        j.dot = function (a) {
          return this.x * a.x + this.y * a.y + this.z * a.z;
        };
        j.cross = function (a, b) {
          b = b || new o();
          o.cross(b, this, a);
          return b;
        };
        j.len = function () {
          return Math.sqrt(this.x * this.x + this.y * this.y + this.z * this.z);
        };
        j.lengthSqr = function () {
          return this.x * this.x + this.y * this.y + this.z * this.z;
        };
        j.normalizeSelf = function () {
          o.normalize(this, this);
          return this;
        };
        j.normalize = function (a) {
          a = a || new o();
          o.normalize(a, this);
          return a;
        };
        j.transformMat4 = function (a, b) {
          b = b || new o();
          o.transformMat4(b, this, a);
          return b;
        };
        j.maxAxis = function () {
          return Math.max(this.x, this.y, this.z);
        };
        j.signAngle = function (a) {
          var b = new m.default(this.x, this.y);
          var c = new m.default(a.x, a.y);
          return b.signAngle(c);
        };
        j.rotate = function (a, b) {
          return m.default.prototype.rotate.call(this, a, b);
        };
        j.rotateSelf = function (a) {
          return m.default.prototype.rotateSelf.call(this, a);
        };
        g = o;
        h = [{
          key: "ONE",
          get: function () {
            return new o(1, 1, 1);
          }
        }, {
          key: "ZERO",
          get: function () {
            return new o();
          }
        }, {
          key: "UP",
          get: function () {
            return new o(0, 1, 0);
          }
        }, {
          key: "RIGHT",
          get: function () {
            return new o(1, 0, 0);
          }
        }, {
          key: "FORWARD",
          get: function () {
            return new o(0, 0, 1);
          }
        }];
        if (null) {
          c(g.prototype, null);
        }
        if (h) {
          c(g, h);
        }
        Object.defineProperty(g, "prototype", {
          writable: false
        });
        return o;
      }(i.default);
      e.default = o;
      o.sub = o.subtract;
      o.mul = o.multiply;
      o.scale = o.multiplyScalar;
      o.mag = o.len;
      o.squaredMagnitude = o.lengthSqr;
      o.div = o.divide;
      o.ONE_R = o.ONE;
      o.ZERO_R = o.ZERO;
      o.UP_R = o.UP;
      o.RIGHT_R = o.RIGHT;
      o.FRONT_R = o.FORWARD;
      var r = new o();
      var p = new o();
      j.default.fastDefine("cc.Vec3", o, {
        x: 0,
        y: 0,
        z: 0
      });
      cc.v3 = function (a, b, c) {
        return new o(a, b, c);
      };
      cc.Vec3 = o;
      g.exports = e.default;
    }, {
      "../platform/CCClass": 162,
      "../utils/misc": 236,
      "./utils": 258,
      "./value-type": 259,
      "./vec2": 260
    }],
    262: [function (b, g, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      e.v4 = d;
      var i = m(b("../platform/CCClass"));
      var j = m(b("./value-type"));
      var k = b("./utils");
      function m(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      function a(a, b) {
        for (var c = 0; c < b.length; c++) {
          var d = b[c];
          d.enumerable = d.enumerable || false;
          d.configurable = true;
          if ("value" in d) {
            d.writable = true;
          }
          Object.defineProperty(a, d.key, d);
        }
      }
      function o(a, b) {
        return (o = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      var p = 0;
      var q = 0;
      var v = 0;
      var w = 0;
      var r = function (b) {
        var c;
        var f;
        f = b;
        (c = l).prototype = Object.create(f.prototype);
        c.prototype.constructor = c;
        o(c, f);
        var g;
        var h;
        var j = l.prototype;
        function l(a, c, d, f) {
          var g;
          if (a === undefined) {
            a = 0;
          }
          if (c === undefined) {
            c = 0;
          }
          if (d === undefined) {
            d = 0;
          }
          if (f === undefined) {
            f = 0;
          }
          (g = b.call(this) || this).mag = l.prototype.len;
          g.magSqr = l.prototype.lengthSqr;
          g.subSelf = l.prototype.subtract;
          g.mulSelf = l.prototype.multiplyScalar;
          g.divSelf = l.prototype.divide;
          g.scaleSelf = l.prototype.multiply;
          g.negSelf = l.prototype.negate;
          g.x = undefined;
          g.y = undefined;
          g.z = undefined;
          g.w = undefined;
          if (a && typeof a == "object") {
            g.x = a.x;
            g.y = a.y;
            g.z = a.z;
            g.w = a.w;
          } else {
            g.x = a;
            g.y = c;
            g.z = d;
            g.w = f;
          }
          return g;
        }
        j.sub = function (a, b) {
          return l.subtract(b || new l(), this, a);
        };
        j.mul = function (a, b) {
          return l.multiplyScalar(b || new l(), this, a);
        };
        j.div = function (a, b) {
          return l.multiplyScalar(b || new l(), this, 1 / a);
        };
        j.scale = function (a, b) {
          return l.multiply(b || new l(), this, a);
        };
        j.neg = function (a) {
          return l.negate(a || new l(), this);
        };
        l.clone = function (a) {
          return new l(a.x, a.y, a.z, a.w);
        };
        l.copy = function (a, b) {
          a.x = b.x;
          a.y = b.y;
          a.z = b.z;
          a.w = b.w;
          return a;
        };
        l.set = function (a, b, c, d, e) {
          a.x = b;
          a.y = c;
          a.z = d;
          a.w = e;
          return a;
        };
        l.add = function (a, b, c) {
          a.x = b.x + c.x;
          a.y = b.y + c.y;
          a.z = b.z + c.z;
          a.w = b.w + c.w;
          return a;
        };
        l.subtract = function (a, b, c) {
          a.x = b.x - c.x;
          a.y = b.y - c.y;
          a.z = b.z - c.z;
          a.w = b.w - c.w;
          return a;
        };
        l.multiply = function (a, b, c) {
          a.x = b.x * c.x;
          a.y = b.y * c.y;
          a.z = b.z * c.z;
          a.w = b.w * c.w;
          return a;
        };
        l.divide = function (a, b, c) {
          a.x = b.x / c.x;
          a.y = b.y / c.y;
          a.z = b.z / c.z;
          a.w = b.w / c.w;
          return a;
        };
        l.ceil = function (a, b) {
          a.x = Math.ceil(b.x);
          a.y = Math.ceil(b.y);
          a.z = Math.ceil(b.z);
          a.w = Math.ceil(b.w);
          return a;
        };
        l.floor = function (a, b) {
          a.x = Math.floor(b.x);
          a.y = Math.floor(b.y);
          a.z = Math.floor(b.z);
          a.w = Math.floor(b.w);
          return a;
        };
        l.min = function (a, b, c) {
          a.x = Math.min(b.x, c.x);
          a.y = Math.min(b.y, c.y);
          a.z = Math.min(b.z, c.z);
          a.w = Math.min(b.w, c.w);
          return a;
        };
        l.max = function (a, b, c) {
          a.x = Math.max(b.x, c.x);
          a.y = Math.max(b.y, c.y);
          a.z = Math.max(b.z, c.z);
          a.w = Math.max(b.w, c.w);
          return a;
        };
        l.round = function (a, b) {
          a.x = Math.round(b.x);
          a.y = Math.round(b.y);
          a.z = Math.round(b.z);
          a.w = Math.round(b.w);
          return a;
        };
        l.multiplyScalar = function (a, b, c) {
          a.x = b.x * c;
          a.y = b.y * c;
          a.z = b.z * c;
          a.w = b.w * c;
          return a;
        };
        l.scaleAndAdd = function (a, b, c, d) {
          a.x = b.x + c.x * d;
          a.y = b.y + c.y * d;
          a.z = b.z + c.z * d;
          a.w = b.w + c.w * d;
          return a;
        };
        l.distance = function (a, b) {
          var c = b.x - a.x;
          var d = b.y - a.y;
          var e = b.z - a.z;
          var f = b.w - a.w;
          return Math.sqrt(c * c + d * d + e * e + f * f);
        };
        l.squaredDistance = function (a, b) {
          var c = b.x - a.x;
          var d = b.y - a.y;
          var e = b.z - a.z;
          var f = b.w - a.w;
          return c * c + d * d + e * e + f * f;
        };
        l.len = function (a) {
          p = a.x;
          q = a.y;
          v = a.z;
          w = a.w;
          return Math.sqrt(p * p + q * q + v * v + w * w);
        };
        l.lengthSqr = function (a) {
          p = a.x;
          q = a.y;
          v = a.z;
          w = a.w;
          return p * p + q * q + v * v + w * w;
        };
        l.negate = function (a, b) {
          a.x = -b.x;
          a.y = -b.y;
          a.z = -b.z;
          a.w = -b.w;
          return a;
        };
        l.inverse = function (a, b) {
          a.x = 1 / b.x;
          a.y = 1 / b.y;
          a.z = 1 / b.z;
          a.w = 1 / b.w;
          return a;
        };
        l.inverseSafe = function (a, b) {
          p = b.x;
          q = b.y;
          v = b.z;
          w = b.w;
          if (Math.abs(p) < k.EPSILON) {
            a.x = 0;
          } else {
            a.x = 1 / p;
          }
          if (Math.abs(q) < k.EPSILON) {
            a.y = 0;
          } else {
            a.y = 1 / q;
          }
          if (Math.abs(v) < k.EPSILON) {
            a.z = 0;
          } else {
            a.z = 1 / v;
          }
          if (Math.abs(w) < k.EPSILON) {
            a.w = 0;
          } else {
            a.w = 1 / w;
          }
          return a;
        };
        l.normalize = function (a, b) {
          p = b.x;
          q = b.y;
          v = b.z;
          w = b.w;
          var c = p * p + q * q + v * v + w * w;
          if (c > 0) {
            c = 1 / Math.sqrt(c);
            a.x = p * c;
            a.y = q * c;
            a.z = v * c;
            a.w = w * c;
          }
          return a;
        };
        l.dot = function (a, b) {
          return a.x * b.x + a.y * b.y + a.z * b.z + a.w * b.w;
        };
        l.lerp = function (a, b, c, d) {
          a.x = b.x + d * (c.x - b.x);
          a.y = b.y + d * (c.y - b.y);
          a.z = b.z + d * (c.z - b.z);
          a.w = b.w + d * (c.w - b.w);
          return a;
        };
        l.random = function (a, b) {
          b = b || 1;
          var c = (0, k.random)() * 2 * Math.PI;
          var d = (0, k.random)() * 2 - 1;
          var f = Math.sqrt(1 - d * d);
          a.x = f * Math.cos(c) * b;
          a.y = f * Math.sin(c) * b;
          a.z = d * b;
          a.w = 0;
          return a;
        };
        l.transformMat4 = function (a, b, c) {
          p = b.x;
          q = b.y;
          v = b.z;
          w = b.w;
          var d = c.m;
          a.x = d[0] * p + d[4] * q + d[8] * v + d[12] * w;
          a.y = d[1] * p + d[5] * q + d[9] * v + d[13] * w;
          a.z = d[2] * p + d[6] * q + d[10] * v + d[14] * w;
          a.w = d[3] * p + d[7] * q + d[11] * v + d[15] * w;
          return a;
        };
        l.transformAffine = function (a, b, c) {
          p = b.x;
          q = b.y;
          v = b.z;
          w = b.w;
          var d = c.m;
          a.x = d[0] * p + d[1] * q + d[2] * v + d[3] * w;
          a.y = d[4] * p + d[5] * q + d[6] * v + d[7] * w;
          a.x = d[8] * p + d[9] * q + d[10] * v + d[11] * w;
          a.w = b.w;
          return a;
        };
        l.transformQuat = function (b, f, e) {
          var g = f.x;
          var h = f.y;
          var i = f.z;
          p = e.x;
          q = e.y;
          v = e.z;
          var j = (w = e.w) * g + q * i - v * h;
          var a = w * h + v * g - p * i;
          var k = w * i + p * h - q * g;
          var c = -p * g - q * h - v * i;
          b.x = j * w + c * -p + a * -v - k * -q;
          b.y = a * w + c * -q + k * -p - j * -v;
          b.z = k * w + c * -v + j * -q - a * -p;
          b.w = f.w;
          return b;
        };
        l.strictEquals = function (a, b) {
          return a.x === b.x && a.y === b.y && a.z === b.z && a.w === b.w;
        };
        l.equals = function (a, b, c) {
          if (c === undefined) {
            c = k.EPSILON;
          }
          return Math.abs(a.x - b.x) <= c * Math.max(1, Math.abs(a.x), Math.abs(b.x)) && Math.abs(a.y - b.y) <= c * Math.max(1, Math.abs(a.y), Math.abs(b.y)) && Math.abs(a.z - b.z) <= c * Math.max(1, Math.abs(a.z), Math.abs(b.z)) && Math.abs(a.w - b.w) <= c * Math.max(1, Math.abs(a.w), Math.abs(b.w));
        };
        l.toArray = function (a, b, c) {
          if (c === undefined) {
            c = 0;
          }
          a[c + 0] = b.x;
          a[c + 1] = b.y;
          a[c + 2] = b.z;
          a[c + 3] = b.w;
          return a;
        };
        l.fromArray = function (a, b, c) {
          if (c === undefined) {
            c = 0;
          }
          a.x = b[c + 0];
          a.y = b[c + 1];
          a.z = b[c + 2];
          a.w = b[c + 3];
          return a;
        };
        j.clone = function () {
          return new l(this.x, this.y, this.z, this.w);
        };
        j.set = function (a, b, c, d) {
          if (a && typeof a == "object") {
            this.x = a.x;
            this.y = a.y;
            this.z = a.z;
            this.w = a.w;
          } else {
            this.x = a || 0;
            this.y = b || 0;
            this.z = c || 0;
            this.w = d || 0;
          }
          return this;
        };
        j.equals = function (a, b) {
          if (b === undefined) {
            b = k.EPSILON;
          }
          return Math.abs(this.x - a.x) <= b * Math.max(1, Math.abs(this.x), Math.abs(a.x)) && Math.abs(this.y - a.y) <= b * Math.max(1, Math.abs(this.y), Math.abs(a.y)) && Math.abs(this.z - a.z) <= b * Math.max(1, Math.abs(this.z), Math.abs(a.z)) && Math.abs(this.w - a.w) <= b * Math.max(1, Math.abs(this.w), Math.abs(a.w));
        };
        j.equals4f = function (a, b, c, d, e) {
          if (e === undefined) {
            e = k.EPSILON;
          }
          return Math.abs(this.x - a) <= e * Math.max(1, Math.abs(this.x), Math.abs(a)) && Math.abs(this.y - b) <= e * Math.max(1, Math.abs(this.y), Math.abs(b)) && Math.abs(this.z - c) <= e * Math.max(1, Math.abs(this.z), Math.abs(c)) && Math.abs(this.w - d) <= e * Math.max(1, Math.abs(this.w), Math.abs(d));
        };
        j.strictEquals = function (a) {
          return this.x === a.x && this.y === a.y && this.z === a.z && this.w === a.w;
        };
        j.strictEquals4f = function (a, b, c, d) {
          return this.x === a && this.y === b && this.z === c && this.w === d;
        };
        j.lerp = function (a, b) {
          p = this.x;
          q = this.y;
          v = this.z;
          w = this.w;
          this.x = p + b * (a.x - p);
          this.y = q + b * (a.y - q);
          this.z = v + b * (a.z - v);
          this.w = w + b * (a.w - w);
          return this;
        };
        j.toString = function () {
          return "(" + this.x.toFixed(2) + ", " + this.y.toFixed(2) + ", " + this.z.toFixed(2) + ", " + this.w.toFixed(2) + ")";
        };
        j.clampf = function (a, b) {
          this.x = (0, k.clamp)(this.x, a.x, b.x);
          this.y = (0, k.clamp)(this.y, a.y, b.y);
          this.z = (0, k.clamp)(this.z, a.z, b.z);
          this.w = (0, k.clamp)(this.w, a.w, b.w);
          return this;
        };
        j.addSelf = function (a) {
          this.x += a.x;
          this.y += a.y;
          this.z += a.z;
          this.w += a.w;
          return this;
        };
        j.add = function (a, b) {
          (b = b || new l()).x = this.x + a.x;
          b.y = this.y + a.y;
          b.z = this.z + a.z;
          b.w = this.w + a.w;
          return b;
        };
        j.subtract = function (a, b) {
          (b = b || new l()).x = this.x - a.x;
          b.y = this.y - a.y;
          b.z = this.z - a.z;
          b.w = this.w - a.w;
          return b;
        };
        j.multiplyScalar = function (a) {
          this.x *= a;
          this.y *= a;
          this.z *= a;
          this.w *= a;
          return this;
        };
        j.multiply = function (a) {
          this.x *= a.x;
          this.y *= a.y;
          this.z *= a.z;
          this.w *= a.w;
          return this;
        };
        j.divide = function (a) {
          this.x /= a;
          this.y /= a;
          this.z /= a;
          this.w /= a;
          return this;
        };
        j.negate = function () {
          this.x = -this.x;
          this.y = -this.y;
          this.z = -this.z;
          this.w = -this.w;
          return this;
        };
        j.dot = function (a) {
          return this.x * a.x + this.y * a.y + this.z * a.z + this.w * a.w;
        };
        j.cross = function (b, c) {
          c = c || new l();
          var d = this.x;
          var f = this.y;
          var g = this.z;
          var h = b.x;
          var i = b.y;
          var a = b.z;
          c.x = f * a - g * i;
          c.y = g * h - d * a;
          c.z = d * i - f * h;
          return c;
        };
        j.len = function () {
          var a = this.x;
          var b = this.y;
          var c = this.z;
          var d = this.w;
          return Math.sqrt(a * a + b * b + c * c + d * d);
        };
        j.lengthSqr = function () {
          var a = this.x;
          var b = this.y;
          var c = this.z;
          var d = this.w;
          return a * a + b * b + c * c + d * d;
        };
        j.normalizeSelf = function () {
          this.normalize(this);
          return this;
        };
        j.normalize = function (a) {
          a = a || new l();
          p = this.x;
          q = this.y;
          v = this.z;
          w = this.w;
          var b = p * p + q * q + v * v + w * w;
          if (b > 0) {
            b = 1 / Math.sqrt(b);
            a.x = p * b;
            a.y = q * b;
            a.z = v * b;
            a.w = w * b;
          }
          return a;
        };
        j.transformMat4 = function (a, b) {
          b = b || new l();
          p = this.x;
          q = this.y;
          v = this.z;
          w = this.w;
          var c = a.m;
          b.x = c[0] * p + c[4] * q + c[8] * v + c[12] * w;
          b.y = c[1] * p + c[5] * q + c[9] * v + c[13] * w;
          b.z = c[2] * p + c[6] * q + c[10] * v + c[14] * w;
          b.w = c[3] * p + c[7] * q + c[11] * v + c[15] * w;
          return b;
        };
        j.maxAxis = function () {
          return Math.max(this.x, this.y, this.z, this.w);
        };
        g = l;
        h = [{
          key: "ZERO",
          get: function () {
            return new l(0, 0, 0, 0);
          }
        }, {
          key: "ONE",
          get: function () {
            return new l(1, 1, 1, 1);
          }
        }, {
          key: "NEG_ONE",
          get: function () {
            return new l(-1, -1, -1, -1);
          }
        }];
        if (null) {
          a(g.prototype, null);
        }
        if (h) {
          a(g, h);
        }
        Object.defineProperty(g, "prototype", {
          writable: false
        });
        return l;
      }(j.default);
      function d(a, b, c, d) {
        return new r(a, b, c, d);
      }
      e.default = r;
      r.sub = r.subtract;
      r.mul = r.multiply;
      r.div = r.divide;
      r.scale = r.multiplyScalar;
      r.mag = r.len;
      r.squaredMagnitude = r.lengthSqr;
      r.ZERO_R = r.ZERO;
      r.ONE_R = r.ONE;
      r.NEG_ONE_R = r.NEG_ONE;
      i.default.fastDefine("cc.Vec4", r, {
        x: 0,
        y: 0,
        z: 0,
        w: 0
      });
      cc.v4 = d;
      cc.Vec4 = r;
    }, {
      "../platform/CCClass": 162,
      "./utils": 258,
      "./value-type": 259
    }],
    263: [function () {
      "use strict";
  
      cc.js;
    }, {}],
    264: [function (a) {
      "use strict";
  
      a("./core/CCGame");
      a("./actions");
      a("./audio/CCAudio");
    }, {
      "./actions": 7,
      "./audio/CCAudio": 20,
      "./core/CCGame": 25
    }],
    265: [function (a, b) {
      "use strict";
  
      var c = a("../core/assets/CCAsset");
      var d = a("../core/assets/CCSpriteFrame");
      var e = cc.Class({
        name: "cc.ParticleAsset",
        extends: c,
        properties: {
          spriteFrame: {
            default: null,
            type: d
          }
        }
      });
      cc.ParticleAsset = b.exports = e;
    }, {
      "../core/assets/CCAsset": 57,
      "../core/assets/CCSpriteFrame": 69
    }],
    266: [function (b, d) {
      "use strict";
  
      var g = b("../core/platform/CCMacro");
      var e = b("./CCParticleAsset");
      var i = b("../core/components/CCRenderComponent");
      var j = b("../core/CCDebug");
      var k = b("../core/utils/texture-util");
      b("../core/renderer/render-flow");
      var a = b("./particle-simulator");
      b("../core/assets/material/CCMaterial");
      var m = b("../core/utils/blend-func");
      var c = cc.Enum({
        GRAVITY: 0,
        RADIUS: 1
      });
      var l = cc.Enum({
        FREE: 0,
        RELATIVE: 1,
        GROUPED: 2
      });
      var h = {
        preview: {
          default: true,
          editorOnly: true,
          notify: false,
          animatable: false,
          tooltip: false
        },
        _custom: false,
        custom: {
          get: function () {
            return this._custom;
          },
          set: function (a) {
            if (this._custom !== a) {
              this._custom = a;
              this._applyFile();
            }
          },
          animatable: false,
          tooltip: false
        },
        _file: {
          default: null,
          type: e
        },
        file: {
          get: function () {
            return this._file;
          },
          set: function (a) {
            if (this._file !== a) {
              this._file = a;
              if (a) {
                this._applyFile();
              } else {
                this.custom = true;
              }
            }
          },
          animatable: false,
          type: e,
          tooltip: false
        },
        _spriteFrame: {
          default: null,
          type: cc.SpriteFrame
        },
        spriteFrame: {
          get: function () {
            return this._spriteFrame;
          },
          set: function (a) {
            var b = this._renderSpriteFrame;
            if (b !== a) {
              this._renderSpriteFrame = a;
              if (!(a && !a._uuid)) {
                this._spriteFrame = a;
              }
              this._applySpriteFrame(b);
            }
          },
          type: cc.SpriteFrame,
          tooltip: false
        },
        _texture: {
          default: null,
          type: cc.Texture2D,
          editorOnly: true
        },
        texture: {
          get: function () {
            return this._getTexture();
          },
          set: function () {},
          type: cc.Texture2D,
          tooltip: false,
          readonly: true,
          visible: false,
          animatable: false
        },
        particleCount: {
          visible: false,
          get: function () {
            return this._simulator.particles.length;
          },
          readonly: true
        },
        _stopped: true,
        stopped: {
          get: function () {
            return this._stopped;
          },
          animatable: false,
          visible: false
        },
        playOnLoad: true,
        autoRemoveOnFinish: {
          default: false,
          animatable: false,
          tooltip: false
        },
        active: {
          get: function () {
            return this._simulator.active;
          },
          visible: false
        },
        totalParticles: 150,
        duration: -1,
        emissionRate: 10,
        life: 1,
        lifeVar: 0,
        _startColor: null,
        startColor: {
          type: cc.Color,
          get: function () {
            return this._startColor;
          },
          set: function (a) {
            this._startColor.r = a.r;
            this._startColor.g = a.g;
            this._startColor.b = a.b;
            this._startColor.a = a.a;
          }
        },
        _startColorVar: null,
        startColorVar: {
          type: cc.Color,
          get: function () {
            return this._startColorVar;
          },
          set: function (a) {
            this._startColorVar.r = a.r;
            this._startColorVar.g = a.g;
            this._startColorVar.b = a.b;
            this._startColorVar.a = a.a;
          }
        },
        _endColor: null,
        endColor: {
          type: cc.Color,
          get: function () {
            return this._endColor;
          },
          set: function (a) {
            this._endColor.r = a.r;
            this._endColor.g = a.g;
            this._endColor.b = a.b;
            this._endColor.a = a.a;
          }
        },
        _endColorVar: null,
        endColorVar: {
          type: cc.Color,
          get: function () {
            return this._endColorVar;
          },
          set: function (a) {
            this._endColorVar.r = a.r;
            this._endColorVar.g = a.g;
            this._endColorVar.b = a.b;
            this._endColorVar.a = a.a;
          }
        },
        angle: 90,
        angleVar: 20,
        startSize: 50,
        startSizeVar: 0,
        endSize: 0,
        endSizeVar: 0,
        startSpin: 0,
        startSpinVar: 0,
        endSpin: 0,
        endSpinVar: 0,
        sourcePos: cc.Vec2.ZERO,
        posVar: cc.Vec2.ZERO,
        _positionType: {
          default: l.FREE,
          formerlySerializedAs: "positionType"
        },
        positionType: {
          type: l,
          get: function () {
            return this._positionType;
          },
          set: function (a) {
            this._positionType = a;
            this._updateMaterial();
          }
        },
        emitterMode: {
          default: c.GRAVITY,
          type: c
        },
        gravity: cc.Vec2.ZERO,
        speed: 180,
        speedVar: 50,
        tangentialAccel: 80,
        tangentialAccelVar: 0,
        radialAccel: 0,
        radialAccelVar: 0,
        rotationIsDir: false,
        startRadius: 0,
        startRadiusVar: 0,
        endRadius: 0,
        endRadiusVar: 0,
        rotatePerS: 0,
        rotatePerSVar: 0
      };
      var n = cc.Class({
        name: "cc.ParticleSystem",
        extends: i,
        mixins: [m],
        editor: false,
        ctor: function () {
          this.initProperties();
        },
        initProperties: function () {
          this._previewTimer = null;
          this._focused = false;
          this._aspectRatio = 1;
          this._simulator = new a(this);
          this._startColor = cc.color(255, 255, 255, 255);
          this._startColorVar = cc.color(0, 0, 0, 0);
          this._endColor = cc.color(255, 255, 255, 0);
          this._endColorVar = cc.color(0, 0, 0, 0);
          this._renderSpriteFrame = null;
        },
        properties: h,
        statics: {
          DURATION_INFINITY: -1,
          START_SIZE_EQUAL_TO_END_SIZE: -1,
          START_RADIUS_EQUAL_TO_END_RADIUS: -1,
          EmitterMode: c,
          PositionType: l
        },
        onFocusInEditor: false,
        onLostFocusInEditor: false,
        onRestore: false,
        _startPreview: false,
        _stopPreview: false,
        _convertTextureToSpriteFrame: false,
        __preload: function () {
          this._super();
          if (this._custom && this.spriteFrame && !this._renderSpriteFrame) {
            this._applySpriteFrame(this.spriteFrame);
          } else if (this._file) {
            if (this._custom) {
              if (!this._getTexture()) {
                this._applyFile();
              }
            } else {
              this._applyFile();
            }
          }
          if (this.playOnLoad) {
            this.resetSystem();
          }
        },
        onDestroy: function () {
          if (this.autoRemoveOnFinish) {
            this.autoRemoveOnFinish = false;
          }
          if (this._buffer) {
            this._buffer.destroy();
            this._buffer = null;
          }
          this._super();
        },
        lateUpdate: function (a) {
          if (!this._simulator.finished) {
            this._simulator.step(a);
          }
        },
        addParticle: function () {},
        stopSystem: function () {
          this._stopped = true;
          this._simulator.stop();
        },
        resetSystem: function () {
          this._stopped = false;
          this._simulator.reset();
          this.markForRender(true);
        },
        isFull: function () {
          return this.particleCount >= this.totalParticles;
        },
        setTextureWithRect: function (a, b) {
          if (a instanceof cc.Texture2D) {
            this.spriteFrame = new cc.SpriteFrame(a, b);
          }
        },
        _applyFile: function () {
          var a = this._file;
          if (a) {
            var b = this;
            cc.assetManager.postLoadNative(a, function (c) {
              if (!c && a._nativeAsset && b.isValid) {
                b._plistFile = a.nativeUrl;
                if (!b._custom) {
                  if (b._spriteFrame !== a.spriteFrame) {
                    b.spriteFrame = a.spriteFrame;
                  }
                  b._initWithDictionary(a._nativeAsset);
                }
                if (b._spriteFrame) {
                  if (!b._renderSpriteFrame && b._spriteFrame) {
                    b._applySpriteFrame(b.spriteFrame);
                  }
                } else if (a.spriteFrame) {
                  b.spriteFrame = a.spriteFrame;
                } else if (b._custom) {
                  b._initTextureWithDictionary(a._nativeAsset);
                }
              }
            });
          }
        },
        _initTextureWithDictionary: function (a) {
          var b = cc.path.changeBasename(this._plistFile, a.textureFileName || "");
          if (a.textureFileName) {
            k.loadImage(b, function (c, d) {
              if (c) {
                a.textureFileName = undefined;
                this._initTextureWithDictionary(a);
              } else {
                cc.assetManager.assets.add(b, d);
                this.spriteFrame = new cc.SpriteFrame(d);
              }
            }, this);
          } else if (a.textureImageData) {
            throw Error(j.getError(100));
          }
          return true;
        },
        _initWithDictionary: function (b) {
          this.totalParticles = parseInt(b.maxParticles || 0);
          this.life = parseFloat(b.particleLifespan || 0);
          this.lifeVar = parseFloat(b.particleLifespanVariance || 0);
          var d = b.emissionRate;
          this.emissionRate = d || Math.min(this.totalParticles / this.life, Number.MAX_VALUE);
          this.duration = parseFloat(b.duration || 0);
          this.srcBlendFactor = parseInt(b.blendFuncSource || g.SRC_ALPHA);
          this.dstBlendFactor = parseInt(b.blendFuncDestination || g.ONE_MINUS_SRC_ALPHA);
          var e = this._startColor;
          e.r = parseFloat(b.startColorRed || 0) * 255;
          e.g = parseFloat(b.startColorGreen || 0) * 255;
          e.b = parseFloat(b.startColorBlue || 0) * 255;
          e.a = parseFloat(b.startColorAlpha || 0) * 255;
          var f = this._startColorVar;
          f.r = parseFloat(b.startColorVarianceRed || 0) * 255;
          f.g = parseFloat(b.startColorVarianceGreen || 0) * 255;
          f.b = parseFloat(b.startColorVarianceBlue || 0) * 255;
          f.a = parseFloat(b.startColorVarianceAlpha || 0) * 255;
          var h = this._endColor;
          h.r = parseFloat(b.finishColorRed || 0) * 255;
          h.g = parseFloat(b.finishColorGreen || 0) * 255;
          h.b = parseFloat(b.finishColorBlue || 0) * 255;
          h.a = parseFloat(b.finishColorAlpha || 0) * 255;
          var i = this._endColorVar;
          i.r = parseFloat(b.finishColorVarianceRed || 0) * 255;
          i.g = parseFloat(b.finishColorVarianceGreen || 0) * 255;
          i.b = parseFloat(b.finishColorVarianceBlue || 0) * 255;
          i.a = parseFloat(b.finishColorVarianceAlpha || 0) * 255;
          this.startSize = parseFloat(b.startParticleSize || 0);
          this.startSizeVar = parseFloat(b.startParticleSizeVariance || 0);
          this.endSize = parseFloat(b.finishParticleSize || 0);
          this.endSizeVar = parseFloat(b.finishParticleSizeVariance || 0);
          this.positionType = parseFloat(b.positionType !== undefined ? b.positionType : l.RELATIVE);
          this.sourcePos.x = 0;
          this.sourcePos.y = 0;
          this.posVar.x = parseFloat(b.sourcePositionVariancex || 0);
          this.posVar.y = parseFloat(b.sourcePositionVariancey || 0);
          this.angle = parseFloat(b.angle || 0);
          this.angleVar = parseFloat(b.angleVariance || 0);
          this.startSpin = parseFloat(b.rotationStart || 0);
          this.startSpinVar = parseFloat(b.rotationStartVariance || 0);
          this.endSpin = parseFloat(b.rotationEnd || 0);
          this.endSpinVar = parseFloat(b.rotationEndVariance || 0);
          this.emitterMode = parseInt(b.emitterType || c.GRAVITY);
          if (this.emitterMode === c.GRAVITY) {
            this.gravity.x = parseFloat(b.gravityx || 0);
            this.gravity.y = parseFloat(b.gravityy || 0);
            this.speed = parseFloat(b.speed || 0);
            this.speedVar = parseFloat(b.speedVariance || 0);
            this.radialAccel = parseFloat(b.radialAcceleration || 0);
            this.radialAccelVar = parseFloat(b.radialAccelVariance || 0);
            this.tangentialAccel = parseFloat(b.tangentialAcceleration || 0);
            this.tangentialAccelVar = parseFloat(b.tangentialAccelVariance || 0);
            var a = b.rotationIsDir || "";
            if (a !== null) {
              a = a.toString().toLowerCase();
              this.rotationIsDir = a === "true" || a === "1";
            } else {
              this.rotationIsDir = false;
            }
          } else {
            if (this.emitterMode !== c.RADIUS) {
              return false;
            }
            this.startRadius = parseFloat(b.maxRadius || 0);
            this.startRadiusVar = parseFloat(b.maxRadiusVariance || 0);
            this.endRadius = parseFloat(b.minRadius || 0);
            this.endRadiusVar = parseFloat(b.minRadiusVariance || 0);
            this.rotatePerS = parseFloat(b.rotatePerSecond || 0);
            this.rotatePerSVar = parseFloat(b.rotatePerSecondVariance || 0);
          }
          this._initTextureWithDictionary(b);
          return true;
        },
        _validateRender: function () {
          var a = this._getTexture();
          if (a && a.loaded) {
            this._super();
          } else {
            this.disableRender();
          }
        },
        _onTextureLoaded: function () {
          this._simulator.updateUVs(true);
          this._syncAspect();
          this._updateMaterial();
          this.markForRender(true);
        },
        _syncAspect: function () {
          var a = this._renderSpriteFrame._rect;
          this._aspectRatio = a.width / a.height;
        },
        _applySpriteFrame: function () {
          this._renderSpriteFrame = this._renderSpriteFrame || this._spriteFrame;
          if (this._renderSpriteFrame) {
            if (this._renderSpriteFrame.textureLoaded()) {
              this._onTextureLoaded();
            } else {
              this._renderSpriteFrame.onTextureLoaded(this._onTextureLoaded, this);
            }
          }
        },
        _getTexture: function () {
          return this._renderSpriteFrame && this._renderSpriteFrame.getTexture() || this._texture;
        },
        _updateMaterial: function () {
          var a = this.getMaterial(0);
          if (a) {
            a.define("CC_USE_MODEL", this._positionType !== l.FREE);
            a.setProperty("texture", this._getTexture());
            m.prototype._updateMaterial.call(this);
          }
        },
        _finishedSimulation: function () {
          this.disableRender();
          if (this.autoRemoveOnFinish && this._stopped) {
            this.node.destroy();
          }
        }
      });
      cc.ParticleSystem = d.exports = n;
    }, {
      "../core/CCDebug": 23,
      "../core/assets/material/CCMaterial": 76,
      "../core/components/CCRenderComponent": 109,
      "../core/platform/CCMacro": 167,
      "../core/renderer/render-flow": 194,
      "../core/utils/blend-func": 230,
      "../core/utils/texture-util": 244,
      "./CCParticleAsset": 265,
      "./particle-simulator": 268,
      "fire-url": undefined
    }],
    267: [function (a) {
      "use strict";
  
      a("./CCParticleAsset");
      a("./CCParticleSystem");
      a("./particle-simulator");
      a("./particle-system-assembler");
    }, {
      "./CCParticleAsset": 265,
      "./CCParticleSystem": 266,
      "./particle-simulator": 268,
      "./particle-system-assembler": 269
    }],
    268: [function (b, d) {
      "use strict";
  
      var e = b("../core/platform/js");
      var j = b("../core/utils/misc");
      var g = cc.v2(0, 0);
      var k = cc.v2();
      var i = cc.v2();
      var a = cc.v2();
      var o = cc.v2();
      function c() {
        this.pos = cc.v2(0, 0);
        this.startPos = cc.v2(0, 0);
        this.color = cc.color(0, 0, 0, 255);
        this.deltaColor = {
          r: 0,
          g: 0,
          b: 0,
          a: 255
        };
        this.preciseColor = {
          r: 0,
          g: 0,
          b: 0,
          a: 255
        };
        this.size = 0;
        this.deltaSize = 0;
        this.rotation = 0;
        this.deltaRotation = 0;
        this.timeToLive = 0;
        this.drawPos = cc.v2(0, 0);
        this.aspectRatio = 1;
        this.dir = cc.v2(0, 0);
        this.radialAccel = 0;
        this.tangentialAccel = 0;
        this.angle = 0;
        this.degreesPerSecond = 0;
        this.radius = 0;
        this.deltaRadius = 0;
      }
      var q = new e.Pool(function (a) {
        a.pos.set(g);
        a.startPos.set(g);
        a.color._val = 4278190080;
        a.deltaColor.r = a.deltaColor.g = a.deltaColor.b = 0;
        a.deltaColor.a = 255;
        a.size = 0;
        a.deltaSize = 0;
        a.rotation = 0;
        a.deltaRotation = 0;
        a.timeToLive = 0;
        a.drawPos.set(g);
        a.aspectRatio = 1;
        a.dir.set(g);
        a.radialAccel = 0;
        a.tangentialAccel = 0;
        a.angle = 0;
        a.degreesPerSecond = 0;
        a.radius = 0;
        a.deltaRadius = 0;
      }, 1024);
      q.get = function () {
        return this._get() || new c();
      };
      function h(a) {
        this.sys = a;
        this.particles = [];
        this.active = false;
        this.readyToPlay = true;
        this.finished = false;
        this.elapsed = 0;
        this.emitCounter = 0;
        this._uvFilled = 0;
        this._worldRotation = 0;
      }
      function l(a) {
        for (var b = 0, c = a; c;) {
          b += c.angle;
          c = c.parent;
        }
        return b;
      }
      h.prototype.stop = function () {
        this.active = false;
        this.readyToPlay = false;
        this.elapsed = this.sys.duration;
        this.emitCounter = 0;
      };
      h.prototype.reset = function () {
        this.active = true;
        this.readyToPlay = true;
        this.elapsed = 0;
        this.emitCounter = 0;
        this.finished = false;
        for (var b = this.particles, c = b.length, d = 0; d < c; ++d) {
          q.put(b[d]);
        }
        b.length = 0;
        var e = this.sys._buffer;
        if (e && e.byteOffset > 0 && c > 0) {
          for (var f = this.sys._vertexFormat._bytes * 4 / 4, g = e._uintVData, h = 0; h < c; h++) {
            var j = f * h;
            g[j + 4] = g[j + 9] = g[j + 14] = g[j + 19] = 0;
          }
          e._dirty = true;
          e.uploadData();
        }
      };
      h.prototype.emitParticle = function (b) {
        var h = this.sys;
        var e = j.clampf;
        var i = q.get();
        this.particles.push(i);
        i.timeToLive = h.life + h.lifeVar * (Math.random() - 0.5) * 2;
        var k;
        var n;
        var r;
        var t;
        var w = i.timeToLive = Math.max(0, i.timeToLive);
        i.pos.x = h.sourcePos.x + h.posVar.x * (Math.random() - 0.5) * 2;
        i.pos.y = h.sourcePos.y + h.posVar.y * (Math.random() - 0.5) * 2;
        var l = h._startColor;
        var u = h._startColorVar;
        var f = h._endColor;
        var d = h._endColorVar;
        i.color.r = k = e(l.r + u.r * (Math.random() - 0.5) * 2, 0, 255);
        i.color.g = n = e(l.g + u.g * (Math.random() - 0.5) * 2, 0, 255);
        i.color.b = r = e(l.b + u.b * (Math.random() - 0.5) * 2, 0, 255);
        i.color.a = t = e(l.a + u.a * (Math.random() - 0.5) * 2, 0, 255);
        var z = i.color;
        var p = i.preciseColor;
        p.r = z.r;
        p.g = z.g;
        p.b = z.b;
        p.a = z.a;
        i.deltaColor.r = (e(f.r + d.r * (Math.random() - 0.5) * 2, 0, 255) - k) / w;
        i.deltaColor.g = (e(f.g + d.g * (Math.random() - 0.5) * 2, 0, 255) - n) / w;
        i.deltaColor.b = (e(f.b + d.b * (Math.random() - 0.5) * 2, 0, 255) - r) / w;
        i.deltaColor.a = (e(f.a + d.a * (Math.random() - 0.5) * 2, 0, 255) - t) / w;
        var v = h.startSize + h.startSizeVar * (Math.random() - 0.5) * 2;
        v = Math.max(0, v);
        i.size = v;
        if (h.endSize === cc.ParticleSystem.START_SIZE_EQUAL_TO_END_SIZE) {
          i.deltaSize = 0;
        } else {
          var B = h.endSize + h.endSizeVar * (Math.random() - 0.5) * 2;
          B = Math.max(0, B);
          i.deltaSize = (B - v) / w;
        }
        var D = h.startSpin + h.startSpinVar * (Math.random() - 0.5) * 2;
        var y = h.endSpin + h.endSpinVar * (Math.random() - 0.5) * 2;
        i.rotation = D;
        i.deltaRotation = (y - D) / w;
        i.startPos.x = b.x;
        i.startPos.y = b.y;
        i.aspectRatio = h._aspectRatio || 1;
        var F = j.degreesToRadians(h.angle + this._worldRotation + h.angleVar * (Math.random() - 0.5) * 2);
        if (h.emitterMode === cc.ParticleSystem.EmitterMode.GRAVITY) {
          var E = h.speed + h.speedVar * (Math.random() - 0.5) * 2;
          i.dir.x = Math.cos(F);
          i.dir.y = Math.sin(F);
          i.dir.mulSelf(E);
          i.radialAccel = h.radialAccel + h.radialAccelVar * (Math.random() - 0.5) * 2;
          i.tangentialAccel = h.tangentialAccel + h.tangentialAccelVar * (Math.random() - 0.5) * 2;
          if (h.rotationIsDir) {
            i.rotation = -j.radiansToDegrees(Math.atan2(i.dir.y, i.dir.x));
          }
        } else {
          var A = h.startRadius + h.startRadiusVar * (Math.random() - 0.5) * 2;
          var x = h.endRadius + h.endRadiusVar * (Math.random() - 0.5) * 2;
          i.radius = A;
          i.deltaRadius = h.endRadius === cc.ParticleSystem.START_RADIUS_EQUAL_TO_END_RADIUS ? 0 : (x - A) / w;
          i.angle = F;
          i.degreesPerSecond = j.degreesToRadians(h.rotatePerS + h.rotatePerSVar * (Math.random() - 0.5) * 2);
        }
      };
      h.prototype.updateUVs = function (b) {
        var d = this.sys._assembler;
        if (d) {
          var e = d.getBuffer();
          if (e && this.sys._renderSpriteFrame) {
            for (var f = d._vfmt._bytes * 4 / 4, g = e._vData, h = this.sys._renderSpriteFrame.uv, i = b ? 0 : this._uvFilled, a = this.particles.length, j = i; j < a; j++) {
              var k = j * f;
              g[k + 2] = h[0];
              g[k + 3] = h[1];
              g[k + 7] = h[2];
              g[k + 8] = h[3];
              g[k + 12] = h[4];
              g[k + 13] = h[5];
              g[k + 17] = h[6];
              g[k + 18] = h[7];
            }
            this._uvFilled = a;
          }
        }
      };
      h.prototype.updateParticleBuffer = function (b, k, e, i) {
        var n = e._vData;
        var q = e._uintVData;
        var a = k.x;
        var o = k.y;
        var c = b.size;
        var r = c;
        var s = b.aspectRatio;
        if (s > 1) {
          r = c / s;
        } else {
          c = r * s;
        }
        var t = c / 2;
        var f = r / 2;
        if (b.rotation) {
          var d = -t;
          var u = -f;
          var p = t;
          var v = f;
          var g = -j.degreesToRadians(b.rotation);
          var m = Math.cos(g);
          var w = Math.sin(g);
          n[i] = d * m - u * w + a;
          n[i + 1] = d * w + u * m + o;
          n[i + 5] = p * m - u * w + a;
          n[i + 6] = p * w + u * m + o;
          n[i + 10] = d * m - v * w + a;
          n[i + 11] = d * w + v * m + o;
          n[i + 15] = p * m - v * w + a;
          n[i + 16] = p * w + v * m + o;
        } else {
          n[i] = a - t;
          n[i + 1] = o - f;
          n[i + 5] = a + t;
          n[i + 6] = o - f;
          n[i + 10] = a - t;
          n[i + 11] = o + f;
          n[i + 15] = a + t;
          n[i + 16] = o + f;
        }
        q[i + 4] = b.color._val;
        q[i + 9] = b.color._val;
        q[i + 14] = b.color._val;
        q[i + 19] = b.color._val;
      };
      h.prototype.step = function (c) {
        c = c > cc.director._maxParticleDeltaTime ? cc.director._maxParticleDeltaTime : c;
        var f = this.sys;
        var e = f.node;
        var h = this.particles;
        var j = this.sys._assembler._vfmt._bytes * 4 / 4;
        var n = cc.ParticleSystem.PositionType;
        e._updateWorldMatrix();
        if (f.positionType === n.FREE) {
          this._worldRotation = l(e);
          var r = e._worldMatrix.m;
          k.x = r[12];
          k.y = r[13];
        } else if (f.positionType === n.RELATIVE) {
          this._worldRotation = e.angle;
          k.x = e.x;
          k.y = e.y;
        } else {
          this._worldRotation = 0;
        }
        if (this.active && f.emissionRate) {
          var s = 1 / f.emissionRate;
          for (h.length < f.totalParticles && (this.emitCounter += c); h.length < f.totalParticles && this.emitCounter > s;) {
            this.emitParticle(k);
            this.emitCounter -= s;
          }
          this.elapsed += c;
          if (f.duration !== -1 && f.duration < this.elapsed) {
            f.stopSystem();
          }
        }
        var d = f._assembler.getBuffer();
        var u = h.length;
        d.reset();
        d.request(u * 4, u * 6);
        if (u > this._uvFilled) {
          this.updateUVs();
        }
        for (var p = 0; p < h.length;) {
          i.x = i.y = a.x = a.y = o.x = o.y = 0;
          var w = h[p];
          w.timeToLive -= c;
          if (w.timeToLive > 0) {
            if (f.emitterMode === cc.ParticleSystem.EmitterMode.GRAVITY) {
              var z = o;
              var B = i;
              var D = a;
              if (w.pos.x || w.pos.y) {
                B.set(w.pos);
                B.normalizeSelf();
              }
              D.set(B);
              B.mulSelf(w.radialAccel);
              var F = D.x;
              D.x = -D.y;
              D.y = F;
              D.mulSelf(w.tangentialAccel);
              z.set(B);
              z.addSelf(D);
              z.addSelf(f.gravity);
              z.mulSelf(c);
              w.dir.addSelf(z);
              z.set(w.dir);
              z.mulSelf(c);
              w.pos.addSelf(z);
            } else {
              w.angle += w.degreesPerSecond * c;
              w.radius += w.deltaRadius * c;
              w.pos.x = -Math.cos(w.angle) * w.radius;
              w.pos.y = -Math.sin(w.angle) * w.radius;
            }
            var G = w.preciseColor;
            var H = w.deltaColor;
            G.r += H.r * c;
            G.g += H.g * c;
            G.b += H.b * c;
            G.a += H.a * c;
            var I = w.color;
            I.r = G.r;
            I.g = G.g;
            I.b = G.b;
            I.a = G.a;
            w.size += w.deltaSize * c;
            if (w.size < 0) {
              w.size = 0;
            }
            w.rotation += w.deltaRotation * c;
            var J = i;
            J.set(w.pos);
            if (f.positionType !== n.GROUPED) {
              J.addSelf(w.startPos);
            }
            var K = j * p;
            this.updateParticleBuffer(w, J, d, K);
            ++p;
          } else {
            var L = h[p];
            if (p !== h.length - 1) {
              h[p] = h[h.length - 1];
            }
            q.put(L);
            h.length--;
          }
        }
        f._assembler._ia._count = h.length * 6;
        if (h.length > 0) {
          d.uploadData();
        } else if (!(this.active || this.readyToPlay)) {
          this.finished = true;
          f._finishedSimulation();
        }
      };
      d.exports = h;
    }, {
      "../core/platform/js": 183,
      "../core/utils/misc": 236
    }],
    269: [function (b, d) {
      "use strict";
  
      var e = g(b("../core/renderer/assembler"));
      var f = g(b("../renderer/core/input-assembler"));
      function g(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      function j(a, b) {
        return (j = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      var i = b("./CCParticleSystem");
      var a = b("../core/renderer/");
      var k = b("../core/renderer/webgl/quad-buffer");
      var c = b("../core/renderer/webgl/vertex-format").vfmtPosUvColor;
      var l = function (b) {
        var d;
        var g;
        function h(a) {
          var d;
          (d = b.call(this, a) || this)._buffer = null;
          d._ia = null;
          d._vfmt = c;
          return d;
        }
        g = b;
        (d = h).prototype = Object.create(g.prototype);
        d.prototype.constructor = d;
        j(d, g);
        var l = h.prototype;
        l.getBuffer = function () {
          if (!this._buffer) {
            this._buffer = new k(a._handle, c);
            this._ia = new f.default();
            this._ia._vertexBuffer = this._buffer._vb;
            this._ia._indexBuffer = this._buffer._ib;
            this._ia._start = 0;
            this._ia._count = 0;
          }
          return this._buffer;
        };
        l.fillBuffers = function (a, b) {
          if (this._ia) {
            var c = cc.ParticleSystem.PositionType;
            if (a.positionType === c.RELATIVE) {
              b.node = a.node.parent;
            } else {
              b.node = a.node;
            }
            b.material = a._materials[0];
            b._flushIA(this._ia);
          }
        };
        return h;
      }(e.default);
      e.default.register(i, l);
      d.exports = l;
    }, {
      "../core/renderer/": 193,
      "../core/renderer/assembler": 190,
      "../core/renderer/webgl/quad-buffer": 222,
      "../core/renderer/webgl/vertex-format": 225,
      "../renderer/core/input-assembler": 272,
      "./CCParticleSystem": 266
    }],
    270: [function (J, t) {
      "use strict";
  
      var e;
      var K;
      var Q;
      var Z;
      var $;
      var aa;
      var ba;
      var ca;
      var da;
      var ea;
      var fa;
      var ga;
      var ha;
      var ia;
      var ja;
      var ka;
      var la;
      var ma;
      var na;
      var oa;
      var pa;
      var qa;
      var ra;
      var sa;
      var ta;
      var ua;
      var va;
      var wa;
      var xa;
      var ya;
      var za;
      var Aa;
      var Ba;
      var Ca;
      var Da;
      var Ea;
      var Fa;
      var Ga;
      var Ha;
      var Ia;
      var Ja;
      var Ka;
      (function (a) {
        a[a.COMPRESSED_RGB_S3TC_DXT1_EXT = 33776] = "COMPRESSED_RGB_S3TC_DXT1_EXT";
        a[a.COMPRESSED_RGBA_S3TC_DXT1_EXT = 33777] = "COMPRESSED_RGBA_S3TC_DXT1_EXT";
        a[a.COMPRESSED_RGBA_S3TC_DXT3_EXT = 33778] = "COMPRESSED_RGBA_S3TC_DXT3_EXT";
        a[a.COMPRESSED_RGBA_S3TC_DXT5_EXT = 33779] = "COMPRESSED_RGBA_S3TC_DXT5_EXT";
        a[a.COMPRESSED_SRGB_S3TC_DXT1_EXT = 35916] = "COMPRESSED_SRGB_S3TC_DXT1_EXT";
        a[a.COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT = 35917] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT1_EXT";
        a[a.COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT = 35918] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT3_EXT";
        a[a.COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT = 35919] = "COMPRESSED_SRGB_ALPHA_S3TC_DXT5_EXT";
        a[a.COMPRESSED_RGB_PVRTC_4BPPV1_IMG = 35840] = "COMPRESSED_RGB_PVRTC_4BPPV1_IMG";
        a[a.COMPRESSED_RGB_PVRTC_2BPPV1_IMG = 35841] = "COMPRESSED_RGB_PVRTC_2BPPV1_IMG";
        a[a.COMPRESSED_RGBA_PVRTC_4BPPV1_IMG = 35842] = "COMPRESSED_RGBA_PVRTC_4BPPV1_IMG";
        a[a.COMPRESSED_RGBA_PVRTC_2BPPV1_IMG = 35843] = "COMPRESSED_RGBA_PVRTC_2BPPV1_IMG";
        a[a.COMPRESSED_RGB_ETC1_WEBGL = 36196] = "COMPRESSED_RGB_ETC1_WEBGL";
      })(e || (e = {}));
      (function (a) {
        a[a.UNKNOWN = 0] = "UNKNOWN";
        a[a.BUFFER = 1] = "BUFFER";
        a[a.TEXTURE = 2] = "TEXTURE";
        a[a.TEXTURE_VIEW = 3] = "TEXTURE_VIEW";
        a[a.RENDER_PASS = 4] = "RENDER_PASS";
        a[a.FRAMEBUFFER = 5] = "FRAMEBUFFER";
        a[a.SAMPLER = 6] = "SAMPLER";
        a[a.SHADER = 7] = "SHADER";
        a[a.PIPELINE_LAYOUT = 8] = "PIPELINE_LAYOUT";
        a[a.PIPELINE_STATE = 9] = "PIPELINE_STATE";
        a[a.BINDING_LAYOUT = 10] = "BINDING_LAYOUT";
        a[a.INPUT_ASSEMBLER = 11] = "INPUT_ASSEMBLER";
        a[a.COMMAND_ALLOCATOR = 12] = "COMMAND_ALLOCATOR";
        a[a.COMMAND_BUFFER = 13] = "COMMAND_BUFFER";
        a[a.QUEUE = 14] = "QUEUE";
        a[a.WINDOW = 15] = "WINDOW";
      })(K || (K = {}));
      (function (a) {
        a[a.UNREADY = 0] = "UNREADY";
        a[a.FAILED = 1] = "FAILED";
        a[a.SUCCESS = 2] = "SUCCESS";
      })(Q || (Q = {}));
      (function () {
        function a(a) {
          this._gfxType = K.UNKNOWN;
          this._status = Q.UNREADY;
          this._gfxType = a;
        }
        Object.defineProperty(a.prototype, "gfxType", {
          get: function () {
            return this._gfxType;
          },
          enumerable: true,
          configurable: true
        });
        Object.defineProperty(a.prototype, "status", {
          get: function () {
            return this._status;
          },
          enumerable: true,
          configurable: true
        });
      })();
      (function (a) {
        a.ATTR_POSITION = "a_position";
        a.ATTR_NORMAL = "a_normal";
        a.ATTR_TANGENT = "a_tangent";
        a.ATTR_BITANGENT = "a_bitangent";
        a.ATTR_WEIGHTS = "a_weights";
        a.ATTR_JOINTS = "a_joints";
        a.ATTR_COLOR = "a_color";
        a.ATTR_COLOR1 = "a_color1";
        a.ATTR_COLOR2 = "a_color2";
        a.ATTR_TEX_COORD = "a_texCoord";
        a.ATTR_TEX_COORD1 = "a_texCoord1";
        a.ATTR_TEX_COORD2 = "a_texCoord2";
        a.ATTR_TEX_COORD3 = "a_texCoord3";
        a.ATTR_TEX_COORD4 = "a_texCoord4";
        a.ATTR_TEX_COORD5 = "a_texCoord5";
        a.ATTR_TEX_COORD6 = "a_texCoord6";
        a.ATTR_TEX_COORD7 = "a_texCoord7";
        a.ATTR_TEX_COORD8 = "a_texCoord8";
      })(Z || (Z = {}));
      (function (a) {
        a[a.UNKNOWN = 0] = "UNKNOWN";
        a[a.BOOL = 1] = "BOOL";
        a[a.BOOL2 = 2] = "BOOL2";
        a[a.BOOL3 = 3] = "BOOL3";
        a[a.BOOL4 = 4] = "BOOL4";
        a[a.INT = 5] = "INT";
        a[a.INT2 = 6] = "INT2";
        a[a.INT3 = 7] = "INT3";
        a[a.INT4 = 8] = "INT4";
        a[a.UINT = 9] = "UINT";
        a[a.UINT2 = 10] = "UINT2";
        a[a.UINT3 = 11] = "UINT3";
        a[a.UINT4 = 12] = "UINT4";
        a[a.FLOAT = 13] = "FLOAT";
        a[a.FLOAT2 = 14] = "FLOAT2";
        a[a.FLOAT3 = 15] = "FLOAT3";
        a[a.FLOAT4 = 16] = "FLOAT4";
        a[a.COLOR4 = 17] = "COLOR4";
        a[a.MAT2 = 18] = "MAT2";
        a[a.MAT2X3 = 19] = "MAT2X3";
        a[a.MAT2X4 = 20] = "MAT2X4";
        a[a.MAT3X2 = 21] = "MAT3X2";
        a[a.MAT3 = 22] = "MAT3";
        a[a.MAT3X4 = 23] = "MAT3X4";
        a[a.MAT4X2 = 24] = "MAT4X2";
        a[a.MAT4X3 = 25] = "MAT4X3";
        a[a.MAT4 = 26] = "MAT4";
        a[a.SAMPLER1D = 27] = "SAMPLER1D";
        a[a.SAMPLER1D_ARRAY = 28] = "SAMPLER1D_ARRAY";
        a[a.SAMPLER2D = 29] = "SAMPLER2D";
        a[a.SAMPLER2D_ARRAY = 30] = "SAMPLER2D_ARRAY";
        a[a.SAMPLER3D = 31] = "SAMPLER3D";
        a[a.SAMPLER_CUBE = 32] = "SAMPLER_CUBE";
        a[a.COUNT = 33] = "COUNT";
      })($ || ($ = {}));
      (function (a) {
        a[a.UNKNOWN = 0] = "UNKNOWN";
        a[a.A8 = 1] = "A8";
        a[a.L8 = 2] = "L8";
        a[a.LA8 = 3] = "LA8";
        a[a.R8 = 4] = "R8";
        a[a.R8SN = 5] = "R8SN";
        a[a.R8UI = 6] = "R8UI";
        a[a.R8I = 7] = "R8I";
        a[a.R16F = 8] = "R16F";
        a[a.R16UI = 9] = "R16UI";
        a[a.R16I = 10] = "R16I";
        a[a.R32F = 11] = "R32F";
        a[a.R32UI = 12] = "R32UI";
        a[a.R32I = 13] = "R32I";
        a[a.RG8 = 14] = "RG8";
        a[a.RG8SN = 15] = "RG8SN";
        a[a.RG8UI = 16] = "RG8UI";
        a[a.RG8I = 17] = "RG8I";
        a[a.RG16F = 18] = "RG16F";
        a[a.RG16UI = 19] = "RG16UI";
        a[a.RG16I = 20] = "RG16I";
        a[a.RG32F = 21] = "RG32F";
        a[a.RG32UI = 22] = "RG32UI";
        a[a.RG32I = 23] = "RG32I";
        a[a.RGB8 = 24] = "RGB8";
        a[a.SRGB8 = 25] = "SRGB8";
        a[a.RGB8SN = 26] = "RGB8SN";
        a[a.RGB8UI = 27] = "RGB8UI";
        a[a.RGB8I = 28] = "RGB8I";
        a[a.RGB16F = 29] = "RGB16F";
        a[a.RGB16UI = 30] = "RGB16UI";
        a[a.RGB16I = 31] = "RGB16I";
        a[a.RGB32F = 32] = "RGB32F";
        a[a.RGB32UI = 33] = "RGB32UI";
        a[a.RGB32I = 34] = "RGB32I";
        a[a.RGBA8 = 35] = "RGBA8";
        a[a.SRGB8_A8 = 36] = "SRGB8_A8";
        a[a.RGBA8SN = 37] = "RGBA8SN";
        a[a.RGBA8UI = 38] = "RGBA8UI";
        a[a.RGBA8I = 39] = "RGBA8I";
        a[a.RGBA16F = 40] = "RGBA16F";
        a[a.RGBA16UI = 41] = "RGBA16UI";
        a[a.RGBA16I = 42] = "RGBA16I";
        a[a.RGBA32F = 43] = "RGBA32F";
        a[a.RGBA32UI = 44] = "RGBA32UI";
        a[a.RGBA32I = 45] = "RGBA32I";
        a[a.R5G6B5 = 46] = "R5G6B5";
        a[a.R11G11B10F = 47] = "R11G11B10F";
        a[a.RGB5A1 = 48] = "RGB5A1";
        a[a.RGBA4 = 49] = "RGBA4";
        a[a.RGB10A2 = 50] = "RGB10A2";
        a[a.RGB10A2UI = 51] = "RGB10A2UI";
        a[a.RGB9E5 = 52] = "RGB9E5";
        a[a.D16 = 53] = "D16";
        a[a.D16S8 = 54] = "D16S8";
        a[a.D24 = 55] = "D24";
        a[a.D24S8 = 56] = "D24S8";
        a[a.D32F = 57] = "D32F";
        a[a.D32F_S8 = 58] = "D32F_S8";
        a[a.BC1 = 59] = "BC1";
        a[a.BC1_ALPHA = 60] = "BC1_ALPHA";
        a[a.BC1_SRGB = 61] = "BC1_SRGB";
        a[a.BC1_SRGB_ALPHA = 62] = "BC1_SRGB_ALPHA";
        a[a.BC2 = 63] = "BC2";
        a[a.BC2_SRGB = 64] = "BC2_SRGB";
        a[a.BC3 = 65] = "BC3";
        a[a.BC3_SRGB = 66] = "BC3_SRGB";
        a[a.BC4 = 67] = "BC4";
        a[a.BC4_SNORM = 68] = "BC4_SNORM";
        a[a.BC5 = 69] = "BC5";
        a[a.BC5_SNORM = 70] = "BC5_SNORM";
        a[a.BC6H_UF16 = 71] = "BC6H_UF16";
        a[a.BC6H_SF16 = 72] = "BC6H_SF16";
        a[a.BC7 = 73] = "BC7";
        a[a.BC7_SRGB = 74] = "BC7_SRGB";
        a[a.ETC_RGB8 = 75] = "ETC_RGB8";
        a[a.ETC2_RGB8 = 76] = "ETC2_RGB8";
        a[a.ETC2_SRGB8 = 77] = "ETC2_SRGB8";
        a[a.ETC2_RGB8_A1 = 78] = "ETC2_RGB8_A1";
        a[a.ETC2_SRGB8_A1 = 79] = "ETC2_SRGB8_A1";
        a[a.ETC2_RGBA8 = 80] = "ETC2_RGBA8";
        a[a.ETC2_SRGB8_A8 = 81] = "ETC2_SRGB8_A8";
        a[a.EAC_R11 = 82] = "EAC_R11";
        a[a.EAC_R11SN = 83] = "EAC_R11SN";
        a[a.EAC_RG11 = 84] = "EAC_RG11";
        a[a.EAC_RG11SN = 85] = "EAC_RG11SN";
        a[a.PVRTC_RGB2 = 86] = "PVRTC_RGB2";
        a[a.PVRTC_RGBA2 = 87] = "PVRTC_RGBA2";
        a[a.PVRTC_RGB4 = 88] = "PVRTC_RGB4";
        a[a.PVRTC_RGBA4 = 89] = "PVRTC_RGBA4";
        a[a.PVRTC2_2BPP = 90] = "PVRTC2_2BPP";
        a[a.PVRTC2_4BPP = 91] = "PVRTC2_4BPP";
        a[a.ASTC_RGBA_4x4 = 92] = "ASTC_RGBA_4x4";
        a[a.ASTC_RGBA_5x4 = 92] = "ASTC_RGBA_5x4";
        a[a.ASTC_RGBA_5x5 = 92] = "ASTC_RGBA_5x5";
        a[a.ASTC_RGBA_6x5 = 92] = "ASTC_RGBA_6x5";
        a[a.ASTC_RGBA_6x6 = 92] = "ASTC_RGBA_6x6";
        a[a.ASTC_RGBA_8x5 = 92] = "ASTC_RGBA_8x5";
        a[a.ASTC_RGBA_8x6 = 92] = "ASTC_RGBA_8x6";
        a[a.ASTC_RGBA_8x8 = 92] = "ASTC_RGBA_8x8";
        a[a.ASTC_RGBA_10x5 = 92] = "ASTC_RGBA_10x5";
        a[a.ASTC_RGBA_10x6 = 92] = "ASTC_RGBA_10x6";
        a[a.ASTC_RGBA_10x8 = 92] = "ASTC_RGBA_10x8";
        a[a.ASTC_RGBA_10x10 = 92] = "ASTC_RGBA_10x10";
        a[a.ASTC_RGBA_12x10 = 92] = "ASTC_RGBA_12x10";
        a[a.ASTC_RGBA_12x12 = 92] = "ASTC_RGBA_12x12";
        a[a.ASTC_SRGBA_4x4 = 92] = "ASTC_SRGBA_4x4";
        a[a.ASTC_SRGBA_5x4 = 92] = "ASTC_SRGBA_5x4";
        a[a.ASTC_SRGBA_5x5 = 92] = "ASTC_SRGBA_5x5";
        a[a.ASTC_SRGBA_6x5 = 92] = "ASTC_SRGBA_6x5";
        a[a.ASTC_SRGBA_6x6 = 92] = "ASTC_SRGBA_6x6";
        a[a.ASTC_SRGBA_8x5 = 92] = "ASTC_SRGBA_8x5";
        a[a.ASTC_SRGBA_8x6 = 92] = "ASTC_SRGBA_8x6";
        a[a.ASTC_SRGBA_8x8 = 92] = "ASTC_SRGBA_8x8";
        a[a.ASTC_SRGBA_10x5 = 92] = "ASTC_SRGBA_10x5";
        a[a.ASTC_SRGBA_10x6 = 92] = "ASTC_SRGBA_10x6";
        a[a.ASTC_SRGBA_10x8 = 92] = "ASTC_SRGBA_10x8";
        a[a.ASTC_SRGBA_10x10 = 92] = "ASTC_SRGBA_10x10";
        a[a.ASTC_SRGBA_12x10 = 92] = "ASTC_SRGBA_12x10";
        a[a.ASTC_SRGBA_12x12 = 92] = "ASTC_SRGBA_12x12";
      })(aa || (aa = {}));
      (function (a) {
        a[a.NONE = 0] = "NONE";
        a[a.TRANSFER_SRC = 1] = "TRANSFER_SRC";
        a[a.TRANSFER_DST = 2] = "TRANSFER_DST";
        a[a.INDEX = 4] = "INDEX";
        a[a.VERTEX = 8] = "VERTEX";
        a[a.UNIFORM = 16] = "UNIFORM";
        a[a.STORAGE = 32] = "STORAGE";
        a[a.INDIRECT = 64] = "INDIRECT";
      })(ba || (ba = {}));
      (function (a) {
        a[a.NONE = 0] = "NONE";
        a[a.DEVICE = 1] = "DEVICE";
        a[a.HOST = 2] = "HOST";
      })(ca || (ca = {}));
      (function (a) {
        a[a.NONE = 0] = "NONE";
        a[a.READ = 1] = "READ";
        a[a.WRITE = 2] = "WRITE";
      })(da || (da = {}));
      (function (a) {
        a[a.POINT_LIST = 0] = "POINT_LIST";
        a[a.LINE_LIST = 1] = "LINE_LIST";
        a[a.LINE_STRIP = 2] = "LINE_STRIP";
        a[a.LINE_LOOP = 3] = "LINE_LOOP";
        a[a.LINE_LIST_ADJACENCY = 4] = "LINE_LIST_ADJACENCY";
        a[a.LINE_STRIP_ADJACENCY = 5] = "LINE_STRIP_ADJACENCY";
        a[a.ISO_LINE_LIST = 6] = "ISO_LINE_LIST";
        a[a.TRIANGLE_LIST = 7] = "TRIANGLE_LIST";
        a[a.TRIANGLE_STRIP = 8] = "TRIANGLE_STRIP";
        a[a.TRIANGLE_FAN = 9] = "TRIANGLE_FAN";
        a[a.TRIANGLE_LIST_ADJACENCY = 10] = "TRIANGLE_LIST_ADJACENCY";
        a[a.TRIANGLE_STRIP_ADJACENCY = 11] = "TRIANGLE_STRIP_ADJACENCY";
        a[a.TRIANGLE_PATCH_ADJACENCY = 12] = "TRIANGLE_PATCH_ADJACENCY";
        a[a.QUAD_PATCH_LIST = 13] = "QUAD_PATCH_LIST";
      })(ea || (ea = {}));
      (function (a) {
        a[a.FILL = 0] = "FILL";
        a[a.POINT = 1] = "POINT";
        a[a.LINE = 2] = "LINE";
      })(fa || (fa = {}));
      (function (a) {
        a[a.GOURAND = 0] = "GOURAND";
        a[a.FLAT = 1] = "FLAT";
      })(ga || (ga = {}));
      (function (a) {
        a[a.NONE = 0] = "NONE";
        a[a.FRONT = 1] = "FRONT";
        a[a.BACK = 2] = "BACK";
      })(ha || (ha = {}));
      (function (a) {
        a[a.NEVER = 0] = "NEVER";
        a[a.LESS = 1] = "LESS";
        a[a.EQUAL = 2] = "EQUAL";
        a[a.LESS_EQUAL = 3] = "LESS_EQUAL";
        a[a.GREATER = 4] = "GREATER";
        a[a.NOT_EQUAL = 5] = "NOT_EQUAL";
        a[a.GREATER_EQUAL = 6] = "GREATER_EQUAL";
        a[a.ALWAYS = 7] = "ALWAYS";
      })(ia || (ia = {}));
      (function (a) {
        a[a.ZERO = 0] = "ZERO";
        a[a.KEEP = 1] = "KEEP";
        a[a.REPLACE = 2] = "REPLACE";
        a[a.INCR = 3] = "INCR";
        a[a.DECR = 4] = "DECR";
        a[a.INVERT = 5] = "INVERT";
        a[a.INCR_WRAP = 6] = "INCR_WRAP";
        a[a.DECR_WRAP = 7] = "DECR_WRAP";
      })(ja || (ja = {}));
      (function (a) {
        a[a.ADD = 0] = "ADD";
        a[a.SUB = 1] = "SUB";
        a[a.REV_SUB = 2] = "REV_SUB";
        a[a.MIN = 3] = "MIN";
        a[a.MAX = 4] = "MAX";
      })(ka || (ka = {}));
      (function (a) {
        a[a.ZERO = 0] = "ZERO";
        a[a.ONE = 1] = "ONE";
        a[a.SRC_ALPHA = 2] = "SRC_ALPHA";
        a[a.DST_ALPHA = 3] = "DST_ALPHA";
        a[a.ONE_MINUS_SRC_ALPHA = 4] = "ONE_MINUS_SRC_ALPHA";
        a[a.ONE_MINUS_DST_ALPHA = 5] = "ONE_MINUS_DST_ALPHA";
        a[a.SRC_COLOR = 6] = "SRC_COLOR";
        a[a.DST_COLOR = 7] = "DST_COLOR";
        a[a.ONE_MINUS_SRC_COLOR = 8] = "ONE_MINUS_SRC_COLOR";
        a[a.ONE_MINUS_DST_COLOR = 9] = "ONE_MINUS_DST_COLOR";
        a[a.SRC_ALPHA_SATURATE = 10] = "SRC_ALPHA_SATURATE";
        a[a.CONSTANT_COLOR = 11] = "CONSTANT_COLOR";
        a[a.ONE_MINUS_CONSTANT_COLOR = 12] = "ONE_MINUS_CONSTANT_COLOR";
        a[a.CONSTANT_ALPHA = 13] = "CONSTANT_ALPHA";
        a[a.ONE_MINUS_CONSTANT_ALPHA = 14] = "ONE_MINUS_CONSTANT_ALPHA";
      })(la || (la = {}));
      (function (a) {
        a[a.NONE = 0] = "NONE";
        a[a.R = 1] = "R";
        a[a.G = 2] = "G";
        a[a.B = 4] = "B";
        a[a.A = 8] = "A";
        a[a.ALL = 15] = "ALL";
      })(ma || (ma = {}));
      (function (a) {
        a[a.NONE = 0] = "NONE";
        a[a.POINT = 1] = "POINT";
        a[a.LINEAR = 2] = "LINEAR";
        a[a.ANISOTROPIC = 3] = "ANISOTROPIC";
      })(na || (na = {}));
      (function (a) {
        a[a.WRAP = 0] = "WRAP";
        a[a.MIRROR = 1] = "MIRROR";
        a[a.CLAMP = 2] = "CLAMP";
        a[a.BORDER = 3] = "BORDER";
      })(oa || (oa = {}));
      (function (a) {
        a[a.TEX1D = 0] = "TEX1D";
        a[a.TEX2D = 1] = "TEX2D";
        a[a.TEX3D = 2] = "TEX3D";
      })(pa || (pa = {}));
      (function (a) {
        a[a.NONE = 0] = "NONE";
        a[a.TRANSFER_SRC = 1] = "TRANSFER_SRC";
        a[a.TRANSFER_DST = 2] = "TRANSFER_DST";
        a[a.SAMPLED = 4] = "SAMPLED";
        a[a.STORAGE = 8] = "STORAGE";
        a[a.COLOR_ATTACHMENT = 16] = "COLOR_ATTACHMENT";
        a[a.DEPTH_STENCIL_ATTACHMENT = 32] = "DEPTH_STENCIL_ATTACHMENT";
        a[a.TRANSIENT_ATTACHMENT = 64] = "TRANSIENT_ATTACHMENT";
        a[a.INPUT_ATTACHMENT = 128] = "INPUT_ATTACHMENT";
      })(qa || (qa = {}));
      (function (a) {
        a[a.X1 = 0] = "X1";
        a[a.X2 = 1] = "X2";
        a[a.X4 = 2] = "X4";
        a[a.X8 = 3] = "X8";
        a[a.X16 = 4] = "X16";
        a[a.X32 = 5] = "X32";
        a[a.X64 = 6] = "X64";
      })(ra || (ra = {}));
      (function (a) {
        a[a.NONE = 0] = "NONE";
        a[a.GEN_MIPMAP = 1] = "GEN_MIPMAP";
        a[a.CUBEMAP = 2] = "CUBEMAP";
        a[a.BAKUP_BUFFER = 4] = "BAKUP_BUFFER";
      })(sa || (sa = {}));
      (function (a) {
        a[a.TV1D = 0] = "TV1D";
        a[a.TV2D = 1] = "TV2D";
        a[a.TV3D = 2] = "TV3D";
        a[a.CUBE = 3] = "CUBE";
        a[a.TV1D_ARRAY = 4] = "TV1D_ARRAY";
        a[a.TV2D_ARRAY = 5] = "TV2D_ARRAY";
      })(ta || (ta = {}));
      (function (a) {
        a[a.VERTEX = 0] = "VERTEX";
        a[a.HULL = 1] = "HULL";
        a[a.DOMAIN = 2] = "DOMAIN";
        a[a.GEOMETRY = 3] = "GEOMETRY";
        a[a.FRAGMENT = 4] = "FRAGMENT";
        a[a.COMPUTE = 5] = "COMPUTE";
        a[a.COUNT = 6] = "COUNT";
      })(ua || (ua = {}));
      (function (a) {
        a[a.UNKNOWN = 0] = "UNKNOWN";
        a[a.UNIFORM_BUFFER = 1] = "UNIFORM_BUFFER";
        a[a.SAMPLER = 2] = "SAMPLER";
        a[a.STORAGE_BUFFER = 3] = "STORAGE_BUFFER";
      })(va || (va = {}));
      (function (a) {
        a[a.PRIMARY = 0] = "PRIMARY";
        a[a.SECONDARY = 1] = "SECONDARY";
      })(wa || (wa = {}));
      (function (a) {
        a[a.LOAD = 0] = "LOAD";
        a[a.CLEAR = 1] = "CLEAR";
        a[a.DISCARD = 2] = "DISCARD";
      })(xa || (xa = {}));
      (function (a) {
        a[a.STORE = 0] = "STORE";
        a[a.DISCARD = 1] = "DISCARD";
      })(ya || (ya = {}));
      (function (a) {
        a[a.UNDEFINED = 0] = "UNDEFINED";
        a[a.GENERAL = 1] = "GENERAL";
        a[a.COLOR_ATTACHMENT_OPTIMAL = 2] = "COLOR_ATTACHMENT_OPTIMAL";
        a[a.DEPTH_STENCIL_ATTACHMENT_OPTIMAL = 3] = "DEPTH_STENCIL_ATTACHMENT_OPTIMAL";
        a[a.DEPTH_STENCIL_READONLY_OPTIMAL = 4] = "DEPTH_STENCIL_READONLY_OPTIMAL";
        a[a.SHADER_READONLY_OPTIMAL = 5] = "SHADER_READONLY_OPTIMAL";
        a[a.TRANSFER_SRC_OPTIMAL = 6] = "TRANSFER_SRC_OPTIMAL";
        a[a.TRANSFER_DST_OPTIMAL = 7] = "TRANSFER_DST_OPTIMAL";
        a[a.PREINITIALIZED = 8] = "PREINITIALIZED";
        a[a.PRESENT_SRC = 9] = "PRESENT_SRC";
      })(za || (za = {}));
      (function (a) {
        a[a.GRAPHICS = 0] = "GRAPHICS";
        a[a.COMPUTE = 1] = "COMPUTE";
        a[a.RAY_TRACING = 2] = "RAY_TRACING";
      })(Aa || (Aa = {}));
      (function (a) {
        a[a.VIEWPORT = 0] = "VIEWPORT";
        a[a.SCISSOR = 1] = "SCISSOR";
        a[a.LINE_WIDTH = 2] = "LINE_WIDTH";
        a[a.DEPTH_BIAS = 3] = "DEPTH_BIAS";
        a[a.BLEND_CONSTANTS = 4] = "BLEND_CONSTANTS";
        a[a.DEPTH_BOUNDS = 5] = "DEPTH_BOUNDS";
        a[a.STENCIL_WRITE_MASK = 6] = "STENCIL_WRITE_MASK";
        a[a.STENCIL_COMPARE_MASK = 7] = "STENCIL_COMPARE_MASK";
      })(Ba || (Ba = {}));
      (function (a) {
        a[a.FRONT = 0] = "FRONT";
        a[a.BACK = 1] = "BACK";
        a[a.ALL = 2] = "ALL";
      })(Ca || (Ca = {}));
      (function (a) {
        a[a.GRAPHICS = 0] = "GRAPHICS";
        a[a.COMPUTE = 1] = "COMPUTE";
        a[a.TRANSFER = 2] = "TRANSFER";
      })(Da || (Da = {}));
      (function (a) {
        a[a.NONE = 0] = "NONE";
        a[a.COLOR = 1] = "COLOR";
        a[a.DEPTH = 2] = "DEPTH";
        a[a.STENCIL = 4] = "STENCIL";
        a[a.DEPTH_STENCIL = 6] = "DEPTH_STENCIL";
        a[a.ALL = 7] = "ALL";
      })(Ea || (Ea = {}));
      (function (a) {
        a[a.DEFAULT = 100] = "DEFAULT";
      })(Fa || (Fa = {}));
      (function (a) {
        a[a.MIN = 0] = "MIN";
        a[a.MAX = 255] = "MAX";
        a[a.DEFAULT = 128] = "DEFAULT";
      })(Ga || (Ga = {}));
      (function (a) {
        a[a.UBO_GLOBAL = 23] = "UBO_GLOBAL";
        a[a.UBO_SHADOW = 22] = "UBO_SHADOW";
        a[a.UBO_LOCAL = 21] = "UBO_LOCAL";
        a[a.UBO_FORWARD_LIGHTS = 20] = "UBO_FORWARD_LIGHTS";
        a[a.UBO_SKINNING = 19] = "UBO_SKINNING";
        a[a.UBO_SKINNING_TEXTURE = 18] = "UBO_SKINNING_TEXTURE";
        a[a.UBO_UI = 17] = "UBO_UI";
        a[a.SAMPLER_JOINTS = 25] = "SAMPLER_JOINTS";
        a[a.SAMPLER_ENVIRONMENT = 26] = "SAMPLER_ENVIRONMENT";
        a[a.CUSTUM_UBO_BINDING_END_POINT = 17] = "CUSTUM_UBO_BINDING_END_POINT";
        a[a.CUSTOM_SAMPLER_BINDING_START_POINT = 30] = "CUSTOM_SAMPLER_BINDING_START_POINT";
      })(Ha || (Ha = {}));
      (function (a) {
        a[a.minFilter = 0] = "minFilter";
        a[a.magFilter = 1] = "magFilter";
        a[a.mipFilter = 2] = "mipFilter";
        a[a.addressU = 3] = "addressU";
        a[a.addressV = 4] = "addressV";
        a[a.addressW = 5] = "addressW";
        a[a.maxAnisotropy = 6] = "maxAnisotropy";
        a[a.cmpFunc = 7] = "cmpFunc";
        a[a.minLOD = 8] = "minLOD";
        a[a.maxLOD = 9] = "maxLOD";
        a[a.mipLODBias = 10] = "mipLODBias";
        a[a.borderColor = 11] = "borderColor";
        a[a.total = 15] = "total";
      })(Ka || (Ka = {}));
      var La = {
        [La.bool = $.BOOL]: "bool",
        [La.int = $.INT]: "int",
        [La.ivec2 = $.INT2]: "ivec2invTypeParams",
        [La.ivec3 = $.INT3]: "ivec3",
        [La.ivec4 = $.INT4]: "ivec4",
        [La.float = $.FLOAT]: "float",
        [La.vec2 = $.FLOAT2]: "vec2",
        [La.vec3 = $.FLOAT3]: "vec3",
        [La.vec4 = $.FLOAT4]: "vec4",
        [La.mat2 = $.MAT2]: "mat2",
        [La.mat3 = $.MAT3]: "mat3",
        [La.mat4 = $.MAT4]: "mat4",
        [La.sampler2D = $.SAMPLER2D]: "sampler2D",
        [La.samplerCube = $.SAMPLER_CUBE]: "samplerCube"
      };
      (Ia = {})[$.BOOL] = 4;
      Ia[$.INT] = 4;
      Ia[$.INT2] = 8;
      Ia[$.INT3] = 12;
      Ia[$.INT4] = 16;
      Ia[$.FLOAT] = 4;
      Ia[$.FLOAT2] = 8;
      Ia[$.FLOAT3] = 12;
      Ia[$.FLOAT4] = 16;
      Ia[$.MAT2] = 16;
      Ia[$.MAT3] = 36;
      Ia[$.MAT4] = 64;
      Ia[$.SAMPLER2D] = 4;
      Ia[$.SAMPLER_CUBE] = 4;
      var W = Ia;
      (Ja = {})[$.BOOL] = aa.R32I;
      Ja[$.INT] = aa.R32I;
      Ja[$.INT2] = aa.RG32I;
      Ja[$.INT3] = aa.RGB32I;
      Ja[$.INT4] = aa.RGBA32I;
      Ja[$.FLOAT] = aa.R32F;
      Ja[$.FLOAT2] = aa.RG32F;
      Ja[$.FLOAT3] = aa.RGB32F;
      Ja[$.FLOAT4] = aa.RGBA32F;
      var X = Ja;
      var Y = {
        BACK: 1029,
        FRONT: 1028,
        NONE: 0,
        ADD: 32774,
        SUB: 32778,
        REV_SUB: 32779,
        ZERO: 0,
        ONE: 1,
        SRC_COLOR: 768,
        ONE_MINUS_SRC_COLOR: 769,
        DST_COLOR: 774,
        ONE_MINUS_DST_COLOR: 775,
        SRC_ALPHA: 770,
        ONE_MINUS_SRC_ALPHA: 771,
        DST_ALPHA: 772,
        ONE_MINUS_DST_ALPHA: 773,
        CONSTANT_COLOR: 32769,
        ONE_MINUS_CONSTANT_COLOR: 32770,
        CONSTANT_ALPHA: 32771,
        ONE_MINUS_CONSTANT_ALPHA: 32772,
        SRC_ALPHA_SATURATE: 776,
        NEVER: 512,
        LESS: 513,
        EQUAL: 514,
        LEQUAL: 515,
        GREATER: 516,
        NOTEQUAL: 517,
        GEQUAL: 518,
        ALWAYS: 519,
        KEEP: 7680,
        REPLACE: 7681,
        INCR: 7682,
        INCR_WRAP: 34055,
        DECR: 7683,
        DECR_WRAP: 34056,
        INVERT: 5386
      };
      Object.assign(Y, Fa);
      var j = {
        murmurhash2_32_gc: function (a, b) {
          for (var c, d = a.length, e = b ^ d, f = 0; d >= 4;) {
            c = ((c = a.charCodeAt(f) & 255 | (a.charCodeAt(++f) & 255) << 8 | (a.charCodeAt(++f) & 255) << 16 | (a.charCodeAt(++f) & 255) << 24) & 65535) * 1540483477 + (((c >>> 16) * 1540483477 & 65535) << 16);
            e = (e & 65535) * 1540483477 + (((e >>> 16) * 1540483477 & 65535) << 16) ^ (c = ((c ^= c >>> 24) & 65535) * 1540483477 + (((c >>> 16) * 1540483477 & 65535) << 16));
            d -= 4;
            ++f;
          }
          switch (d) {
            case 3:
              e ^= (a.charCodeAt(f + 2) & 255) << 16;
            case 2:
              e ^= (a.charCodeAt(f + 1) & 255) << 8;
            case 1:
              e = ((e ^= a.charCodeAt(f) & 255) & 65535) * 1540483477 + (((e >>> 16) * 1540483477 & 65535) << 16);
          }
          e = ((e ^= e >>> 13) & 65535) * 1540483477 + (((e >>> 16) * 1540483477 & 65535) << 16);
          return (e ^= e >>> 15) >>> 0;
        },
        SamplerInfoIndex: Ka,
        effectStructure: {
          $techniques: [{
            $passes: [{
              depthStencilState: {},
              rasterizerState: {},
              blendState: {
                targets: [{}]
              },
              properties: {
                any: {
                  sampler: {},
                  inspector: {}
                }
              }
            }]
          }]
        },
        typeMap: La,
        sizeMap: W,
        formatMap: X,
        passParams: Y,
        RenderQueue: {
          OPAQUE: 0,
          TRANSPARENT: 1,
          OVERLAY: 2
        },
        RenderPriority: Ga,
        GFXGetTypeSize: function (a) {
          switch (a) {
            case $.BOOL:
            case $.INT:
            case $.UINT:
            case $.FLOAT:
              return 4;
            case $.BOOL2:
            case $.INT2:
            case $.UINT2:
            case $.FLOAT2:
              return 8;
            case $.BOOL3:
            case $.INT3:
            case $.UINT3:
            case $.FLOAT3:
              return 12;
            case $.BOOL4:
            case $.INT4:
            case $.UINT4:
            case $.FLOAT4:
            case $.MAT2:
              return 16;
            case $.MAT2X3:
              return 24;
            case $.MAT2X4:
              return 32;
            case $.MAT3X2:
              return 24;
            case $.MAT3:
              return 36;
            case $.MAT3X4:
              return 48;
            case $.MAT4X2:
            case $.MAT4X2:
              return 32;
            case $.MAT4:
              return 64;
            case $.SAMPLER1D:
            case $.SAMPLER1D_ARRAY:
            case $.SAMPLER2D:
            case $.SAMPLER2D_ARRAY:
            case $.SAMPLER3D:
            case $.SAMPLER_CUBE:
              return 4;
            default:
              return 0;
          }
        },
        UniformBinding: Ha
      };
      t.exports = j;
    }, {}],
    271: [function (b, j, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var k = b("../memop");
      var q = c(b("../enums"));
      var w = b("../../core/value-types");
      var n = c(b("./program-lib"));
      var a = c(b("./view"));
      var s = c(b("../gfx"));
      function c(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      var z = new w.Mat4();
      var r = new k.RecyclePool(function () {
        return {
          stage: null,
          items: null
        };
      }, 8);
      var h = new k.RecyclePool(function () {
        return new Float32Array(2);
      }, 8);
      var f = new k.RecyclePool(function () {
        return new Float32Array(3);
      }, 8);
      var d = new k.RecyclePool(function () {
        return new Float32Array(4);
      }, 8);
      var B = new k.RecyclePool(function () {
        return new Float32Array(9);
      }, 8);
      var p = new k.RecyclePool(function () {
        return new Float32Array(16);
      }, 8);
      var v = new k.RecyclePool(function () {
        return new Float32Array(64);
      }, 8);
      var g = new k.RecyclePool(function () {
        return new Int32Array(2);
      }, 8);
      var m = new k.RecyclePool(function () {
        return new Int32Array(3);
      }, 8);
      var y = new k.RecyclePool(function () {
        return new Int32Array(4);
      }, 8);
      var D = new k.RecyclePool(function () {
        return new Int32Array(64);
      }, 8);
      var i = function () {
        function b(b, c) {
          var d;
          this._device = b;
          this._programLib = new n.default(b);
          this._opts = c;
          this._type2defaultValue = ((d = {})[q.default.PARAM_INT] = 0, d[q.default.PARAM_INT2] = new w.Vec2(0, 0), d[q.default.PARAM_INT3] = new w.Vec3(0, 0, 0), d[q.default.PARAM_INT4] = new w.Vec4(0, 0, 0, 0), d[q.default.PARAM_FLOAT] = 0, d[q.default.PARAM_FLOAT2] = new w.Vec2(0, 0), d[q.default.PARAM_FLOAT3] = new w.Vec3(0, 0, 0), d[q.default.PARAM_FLOAT4] = new w.Vec4(0, 0, 0, 0), d[q.default.PARAM_COLOR4] = new w.Color(0, 0, 0, 1), d[q.default.PARAM_MAT3] = new w.Mat3(), d[q.default.PARAM_MAT4] = new w.Mat4(), d[q.default.PARAM_TEXTURE_2D] = c.defaultTexture, d[q.default.PARAM_TEXTURE_CUBE] = c.defaultTextureCube, d);
          this._stage2fn = {};
          this._usedTextureUnits = 0;
          this._viewPools = new k.RecyclePool(function () {
            return new a.default();
          }, 8);
          this._drawItemsPools = new k.RecyclePool(function () {
            return {
              model: null,
              node: null,
              ia: null,
              effect: null,
              defines: null,
              uniforms: null
            };
          }, 100);
          this._stageItemsPools = new k.RecyclePool(function () {
            return new k.RecyclePool(function () {
              return {
                model: null,
                node: null,
                ia: null,
                effect: null,
                defines: null,
                passes: [],
                sortKey: -1,
                uniforms: null
              };
            }, 100);
          }, 16);
          this._definesChanged = false;
        }
        var c = b.prototype;
        c._resetTextuerUnit = function () {
          this._usedTextureUnits = 0;
        };
        c._allocTextureUnit = function () {
          var a = this._device;
          var b = this._usedTextureUnits;
          a._caps.maxTextureUnits;
          this._usedTextureUnits += 1;
          return b;
        };
        c._registerStage = function (a, b) {
          this._stage2fn[a] = b;
        };
        c.clear = function () {
          this._programLib.clear();
          this.reset();
        };
        c.reset = function () {
          this._viewPools.reset();
          this._stageItemsPools.reset();
          this._definesChanged = false;
        };
        c._requestView = function () {
          return this._viewPools.add();
        };
        c._render = function (b, j) {
          var e = this._device;
          e.setFrameBuffer(b._framebuffer);
          e.setViewport(b._rect.x, b._rect.y, b._rect.w, b._rect.h);
          var i = {};
          if (b._clearFlags & q.default.CLEAR_COLOR) {
            i.color = w.Vec4.toArray([], b._color);
          }
          if (b._clearFlags & q.default.CLEAR_DEPTH) {
            i.depth = b._depth;
          }
          if (b._clearFlags & q.default.CLEAR_STENCIL) {
            i.stencil = b._stencil;
          }
          e.clear(i);
          this._drawItemsPools.reset();
          for (var k = 0; k < j._models.length; ++k) {
            var n = j._models.data[k];
            if ((n._cullingMask & b._cullingMask) != 0) {
              var s = this._drawItemsPools.add();
              n.extractDrawItem(s);
            }
          }
          r.reset();
          for (var t = 0; t < b._stages.length; ++t) {
            var u = b._stages[t];
            var x = this._stageItemsPools.add();
            x.reset();
            for (var z = 0; z < this._drawItemsPools.length; ++z) {
              var A = this._drawItemsPools.data[z];
              var B = A.effect.stagePasses[u];
              if (B && B.length !== 0) {
                var C = x.add();
                C.passes = B;
                C.model = A.model;
                C.node = A.node;
                C.ia = A.ia;
                C.effect = A.effect;
                C.defines = A.defines;
                C.sortKey = -1;
                C.uniforms = A.uniforms;
              }
            }
            var D = r.add();
            D.stage = u;
            D.items = x;
          }
          for (var E = 0; E < r.length; ++E) {
            var F = r.data[E];
            (0, this._stage2fn[F.stage])(b, F.items);
          }
        };
        c._setProperty = function (a) {
          var b = this._device;
          var c = a.value;
          if (c === undefined) {
            c = a.val;
          }
          if (c === undefined) {
            c = this._type2defaultValue[a.type];
          }
          if (c !== undefined) {
            if (a.type === q.default.PARAM_TEXTURE_2D || a.type === q.default.PARAM_TEXTURE_CUBE) {
              if (Array.isArray(c)) {
                if (c.length > a.count) {
                  return;
                }
                for (var d = D.add(), e = 0; e < c.length; ++e) {
                  d[e] = this._allocTextureUnit();
                }
                b.setTextureArray(a.name, c, d);
              } else {
                b.setTexture(a.name, c, this._allocTextureUnit());
              }
            } else if (a.directly) {
              b.setUniformDirectly(a.name, c);
            } else {
              b.setUniform(a.name, c);
            }
          }
        };
        c._draw = function (c) {
          var j = this._device;
          var e = this._programLib;
          var i = c.node;
          var k = c.ia;
          var n = c.passes;
          var a = c.effect;
          h.reset();
          f.reset();
          d.reset();
          B.reset();
          p.reset();
          v.reset();
          g.reset();
          m.reset();
          y.reset();
          D.reset();
          i.getWorldMatrix(z);
          j.setUniform("cc_matWorld", w.Mat4.toArray(p.add(), z));
          w.Mat4.invert(z, z);
          w.Mat4.transpose(z, z);
          j.setUniform("cc_matWorldIT", w.Mat4.toArray(p.add(), z));
          for (var o = this._defines, l = 0; l < n.length; ++l) {
            var q = n[l];
            if (this._definesChanged) {
              q._programKey = null;
            }
            var r = k.count;
            if (k._vertexBuffer) {
              j.setVertexBuffer(0, k._vertexBuffer);
            }
            if (k._indexBuffer) {
              j.setIndexBuffer(k._indexBuffer);
            }
            j.setPrimitiveType(k._primitiveType);
            Object.setPrototypeOf(o, q._defines);
            var t = e.getProgram(q, o, a.name);
            j.setProgram(t);
            for (var E = t._uniforms, F = q._properties, G = 0; G < E.length; G++) {
              var H = F[E[G].name];
              if (H !== undefined) {
                this._setProperty(H);
              }
            }
            j.setCullMode(q._cullMode);
            if (q._blend) {
              j.enableBlend();
              j.setBlendFuncSep(q._blendSrc, q._blendDst, q._blendSrcAlpha, q._blendDstAlpha);
              j.setBlendEqSep(q._blendEq, q._blendAlphaEq);
              j.setBlendColor32(q._blendColor);
            }
            if (q._depthTest) {
              j.enableDepthTest();
              j.setDepthFunc(q._depthFunc);
            }
            if (q._depthWrite) {
              j.enableDepthWrite();
            }
            j.setStencilTest(q._stencilTest);
            if (q._stencilTest === s.default.STENCIL_ENABLE) {
              j.setStencilFuncFront(q._stencilFuncFront, q._stencilRefFront, q._stencilMaskFront);
              j.setStencilOpFront(q._stencilFailOpFront, q._stencilZFailOpFront, q._stencilZPassOpFront, q._stencilWriteMaskFront);
              j.setStencilFuncBack(q._stencilFuncBack, q._stencilRefBack, q._stencilMaskBack);
              j.setStencilOpBack(q._stencilFailOpBack, q._stencilZFailOpBack, q._stencilZPassOpBack, q._stencilWriteMaskBack);
            }
            j.draw(k._start, r);
            this._resetTextuerUnit();
          }
        };
        return b;
      }();
      e.default = i;
      j.exports = e.default;
    }, {
      "../../core/value-types": 251,
      "../enums": 277,
      "../gfx": 282,
      "../memop": 294,
      "./program-lib": 274,
      "./view": 276
    }],
    272: [function (b, c, d) {
      "use strict";
  
      d.__esModule = true;
      d.default = undefined;
      var e;
      var f = (e = b("../gfx")) && e.__esModule ? e : {
        default: e
      };
      function g(a, b) {
        for (var c = 0; c < b.length; c++) {
          var d = b[c];
          d.enumerable = d.enumerable || false;
          d.configurable = true;
          if ("value" in d) {
            d.writable = true;
          }
          Object.defineProperty(a, d.key, d);
        }
      }
      var h = function () {
        function a(a, b, c) {
          if (c === undefined) {
            c = f.default.PT_TRIANGLES;
          }
          this._vertexBuffer = a;
          this._indexBuffer = b;
          this._primitiveType = c;
          this._start = 0;
          this._count = -1;
        }
        var b;
        var c;
        b = a;
        if (c = [{
          key: "count",
          get: function () {
            if (this._count !== -1) {
              return this._count;
            } else if (this._indexBuffer) {
              return this._indexBuffer.count;
            } else if (this._vertexBuffer) {
              return this._vertexBuffer.count;
            } else {
              return 0;
            }
          }
        }]) {
          g(b.prototype, c);
        }
        Object.defineProperty(b, "prototype", {
          writable: false
        });
        return a;
      }();
      d.default = h;
      c.exports = d.default;
    }, {
      "../gfx": 282
    }],
    273: [function (b, c, d) {
      "use strict";
  
      d.__esModule = true;
      d.default = undefined;
      var f = e(b("../gfx"));
      var g = e(b("../enums"));
      var h = e(b("../../core/value-types/value-type"));
      function e(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      var a = function () {
        function b(b, c, d, e, g, h) {
          if (g === undefined) {
            g = {};
          }
          if (h === undefined) {
            h = {};
          }
          this._name = b;
          this._detailName = c;
          this._programName = d;
          this._programKey = null;
          this._stage = e;
          this._properties = g;
          this._defines = h;
          this._propertyNames = Object.keys(g);
          this._defineNames = Object.keys(h);
          this._cullMode = f.default.CULL_BACK;
          this._blend = false;
          this._blendEq = f.default.BLEND_FUNC_ADD;
          this._blendAlphaEq = f.default.BLEND_FUNC_ADD;
          this._blendSrc = f.default.BLEND_SRC_ALPHA;
          this._blendDst = f.default.BLEND_ONE_MINUS_SRC_ALPHA;
          this._blendSrcAlpha = f.default.BLEND_SRC_ALPHA;
          this._blendDstAlpha = f.default.BLEND_ONE_MINUS_SRC_ALPHA;
          this._blendColor = 4294967295;
          this._depthTest = false;
          this._depthWrite = false;
          this._depthFunc = f.default.DS_FUNC_LESS;
          this._stencilTest = f.default.STENCIL_INHERIT;
          this._stencilFuncFront = f.default.DS_FUNC_ALWAYS;
          this._stencilRefFront = 0;
          this._stencilMaskFront = 255;
          this._stencilFailOpFront = f.default.STENCIL_OP_KEEP;
          this._stencilZFailOpFront = f.default.STENCIL_OP_KEEP;
          this._stencilZPassOpFront = f.default.STENCIL_OP_KEEP;
          this._stencilWriteMaskFront = 255;
          this._stencilFuncBack = f.default.DS_FUNC_ALWAYS;
          this._stencilRefBack = 0;
          this._stencilMaskBack = 255;
          this._stencilFailOpBack = f.default.STENCIL_OP_KEEP;
          this._stencilZFailOpBack = f.default.STENCIL_OP_KEEP;
          this._stencilZPassOpBack = f.default.STENCIL_OP_KEEP;
          this._stencilWriteMaskBack = 255;
        }
        var a = b.prototype;
        a.setCullMode = function (a) {
          if (a === undefined) {
            a = f.default.CULL_BACK;
          }
          this._cullMode = a;
        };
        a.setBlend = function (b, d, g, h, j, k, l, m) {
          if (b === undefined) {
            b = false;
          }
          if (d === undefined) {
            d = f.default.BLEND_FUNC_ADD;
          }
          if (g === undefined) {
            g = f.default.BLEND_SRC_ALPHA;
          }
          if (h === undefined) {
            h = f.default.BLEND_ONE_MINUS_SRC_ALPHA;
          }
          if (j === undefined) {
            j = f.default.BLEND_FUNC_ADD;
          }
          if (k === undefined) {
            k = f.default.BLEND_SRC_ALPHA;
          }
          if (l === undefined) {
            l = f.default.BLEND_ONE_MINUS_SRC_ALPHA;
          }
          if (m === undefined) {
            m = 4294967295;
          }
          this._blend = b;
          this._blendEq = d;
          this._blendSrc = g;
          this._blendDst = h;
          this._blendAlphaEq = j;
          this._blendSrcAlpha = k;
          this._blendDstAlpha = l;
          this._blendColor = m;
        };
        a.setDepth = function (a, b, c) {
          if (a === undefined) {
            a = false;
          }
          if (b === undefined) {
            b = false;
          }
          if (c === undefined) {
            c = f.default.DS_FUNC_LESS;
          }
          this._depthTest = a;
          this._depthWrite = b;
          this._depthFunc = c;
        };
        a.setStencilFront = function (b, d, g, h, j, k, l, m) {
          if (b === undefined) {
            b = f.default.STENCIL_INHERIT;
          }
          if (d === undefined) {
            d = f.default.DS_FUNC_ALWAYS;
          }
          if (g === undefined) {
            g = 0;
          }
          if (h === undefined) {
            h = 255;
          }
          if (j === undefined) {
            j = f.default.STENCIL_OP_KEEP;
          }
          if (k === undefined) {
            k = f.default.STENCIL_OP_KEEP;
          }
          if (l === undefined) {
            l = f.default.STENCIL_OP_KEEP;
          }
          if (m === undefined) {
            m = 255;
          }
          this._stencilTest = b;
          this._stencilFuncFront = d;
          this._stencilRefFront = g;
          this._stencilMaskFront = h;
          this._stencilFailOpFront = j;
          this._stencilZFailOpFront = k;
          this._stencilZPassOpFront = l;
          this._stencilWriteMaskFront = m;
        };
        a.setStencilEnabled = function (a) {
          if (a === undefined) {
            a = f.default.STENCIL_INHERIT;
          }
          this._stencilTest = a;
        };
        a.setStencilBack = function (b, d, g, h, j, k, l, m) {
          if (b === undefined) {
            b = f.default.STENCIL_INHERIT;
          }
          if (d === undefined) {
            d = f.default.DS_FUNC_ALWAYS;
          }
          if (g === undefined) {
            g = 0;
          }
          if (h === undefined) {
            h = 255;
          }
          if (j === undefined) {
            j = f.default.STENCIL_OP_KEEP;
          }
          if (k === undefined) {
            k = f.default.STENCIL_OP_KEEP;
          }
          if (l === undefined) {
            l = f.default.STENCIL_OP_KEEP;
          }
          if (m === undefined) {
            m = 255;
          }
          this._stencilTest = b;
          this._stencilFuncBack = d;
          this._stencilRefBack = g;
          this._stencilMaskBack = h;
          this._stencilFailOpBack = j;
          this._stencilZFailOpBack = k;
          this._stencilZPassOpBack = l;
          this._stencilWriteMaskBack = m;
        };
        a.setStage = function (a) {
          this._stage = a;
        };
        a.setProperties = function (a) {
          this._properties = a;
        };
        a.getProperty = function (a) {
          if (this._properties[a]) {
            return this._properties[a].value;
          }
        };
        a.setProperty = function (b, c, d) {
          var e = this._properties[b];
          if (!e) {
            return false;
          }
          e.directly = d;
          if (Array.isArray(c)) {
            var f = e.value;
            if (f.length !== c.length) {
              return;
            }
            for (var a = 0; a < c.length; a++) {
              f[a] = c[a];
            }
          } else if (c && !ArrayBuffer.isView(c)) {
            if (e.type === g.default.PARAM_TEXTURE_2D) {
              e.value = c.getImpl();
            } else if (c instanceof h.default) {
              c.constructor.toArray(e.value, c);
            } else {
              e.value = c;
            }
          } else {
            e.value = c;
          }
          return true;
        };
        a.getDefine = function (a) {
          return this._defines[a];
        };
        a.define = function (a, b, c) {
          var d = this._defines[a];
          return !(!c && d === undefined || (d !== b && (this._defines[a] = b, this._programKey = null), 0));
        };
        a.clone = function () {
          var d = new b(this._programName);
          Object.assign(d, this);
          var e = {};
          var f = this._properties;
          for (var g in f) {
            var h = f[g];
            var i = e[g] = {};
            var j = h.value;
            if (Array.isArray(j)) {
              i.value = j.concat();
            } else if (ArrayBuffer.isView(j)) {
              i.value = new j.__proto__.constructor(j);
            } else {
              i.value = j;
            }
            for (var k in h) {
              if (k !== "value") {
                i[k] = h[k];
              }
            }
          }
          d._properties = e;
          d._defines = Object.assign({}, this._defines);
          d._propertyNames = this._propertyNames;
          d._defineNames = this._defineNames;
          return d;
        };
        return b;
      }();
      d.default = a;
      c.exports = d.default;
    }, {
      "../../core/value-types/value-type": 259,
      "../enums": 277,
      "../gfx": 282
    }],
    274: [function (b, d, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var f;
      var g = (f = b("../gfx")) && f.__esModule ? f : {
        default: f
      };
      var j = 0;
      function k(a, b) {
        for (var c = [], d = 0; d < a.length; d++) {
          var e = a[d].name;
          var f = b[e];
          if (typeof f != "number") {
            f = f ? 1 : 0;
          }
          c.push("#define " + e + " " + f);
        }
        return c.join("\n") + "\n";
      }
      function a(b, c, d) {
        for (var e = b, f = 0; f < c.length; f++) {
          var g = c[f].name;
          var h = d[g];
          if (Number.isInteger(h)) {
            var i = RegExp(g, "g");
            e = e.replace(i, h);
          }
        }
        return e;
      }
      function m(a) {
        return a.replace(/#pragma for (\w+) in range\(\s*(\d+)\s*,\s*(\d+)\s*\)([\s\S]+?)#pragma endFor/g, function (b, d, e, f, g) {
          for (var h = "", i = parseInt(e), a = parseInt(f), j = i; j < a; ++j) {
            h += g.replace(RegExp("{" + d + "}", "g"), j);
          }
          return h;
        });
      }
      function c(a) {
        return a.replace(/\bhighp\b/g, "mediump");
      }
      var i = function () {
        function b(a) {
          this._device = a;
          this._templates = {};
          this._cache = {};
          this._checkPrecision();
        }
        var d = b.prototype;
        d.clear = function () {
          this._templates = {};
          this._cache = {};
        };
        d.define = function (b) {
          var k = b.name;
          var e = b.defines;
          var i = b.glsl1 || b;
          var n = i.vert;
          var q = i.frag;
          if (!this._templates[k]) {
            for (var a = ++j, o = 0, r = 0; r < e.length; ++r) {
              var s = e[r];
              var t = 1;
              if (s.type === "number") {
                var w = s.range || [];
                s.min = w[0] || 0;
                s.max = w[1] || 4;
                t = Math.ceil(Math.log2(s.max - s.min));
                s._map = function (a) {
                  return a - this.min << this._offset;
                }.bind(s);
              } else {
                s._map = function (a) {
                  if (a) {
                    return 1 << this._offset;
                  } else {
                    return 0;
                  }
                }.bind(s);
              }
              s._offset = o;
              o += t;
            }
            var x = b.uniforms || [];
            if (b.samplers) {
              for (var d = 0; d < b.samplers.length; d++) {
                x.push(b.samplers[d]);
              }
            }
            if (b.blocks) {
              for (var y = 0; y < b.blocks.length; y++) {
                for (var z = b.blocks[y].defines, A = b.blocks[y].members, B = 0; B < A.length; B++) {
                  x.push({
                    defines: z,
                    name: A[B].name,
                    type: A[B].type
                  });
                }
              }
            }
            this._templates[k] = {
              id: a,
              name: k,
              vert: n,
              frag: q,
              defines: e,
              attributes: b.attributes,
              uniforms: x,
              extensions: b.extensions
            };
          }
        };
        d.getTemplate = function (a) {
          return this._templates[a];
        };
        d.hasProgram = function (a) {
          return this._templates[a] !== undefined;
        };
        d.getKey = function (b, c) {
          for (var d = this._templates[b], e = 0, f = 0; f < d.defines.length; ++f) {
            var g = d.defines[f];
            var h = c[g.name];
            if (h !== undefined) {
              e |= g._map(h);
            }
          }
          return d.id + ":" + e;
        };
        d.getProgram = function (b, d) {
          var e = b._programKey = b._programKey || this.getKey(b._programName, d);
          var i = this._cache[e];
          if (i) {
            return i;
          }
          var j = this._templates[b._programName];
          var l = k(j.defines, d);
          var h = a(j.vert, j.defines, d);
          h = l + m(h);
          if (!this._highpSupported) {
            h = c(h);
          }
          var o = a(j.frag, j.defines, d);
          o = l + m(o);
          if (!this._highpSupported) {
            o = c(o);
          }
          (i = new g.default.Program(this._device, {
            vert: h,
            frag: o
          })).link();
          this._cache[e] = i;
          return i;
        };
        d._checkPrecision = function () {
          var a = this._device._gl;
          var b = false;
          if (a.getShaderPrecisionFormat) {
            var c = a.getShaderPrecisionFormat(a.VERTEX_SHADER, a.HIGH_FLOAT);
            var d = a.getShaderPrecisionFormat(a.FRAGMENT_SHADER, a.HIGH_FLOAT);
            b = c && c.precision > 0 && d && d.precision > 0;
          }
          this._highpSupported = b;
        };
        return b;
      }();
      e.default = i;
      d.exports = e.default;
    }, {
      "../gfx": 282
    }],
    275: [function (a, b, c) {
      "use strict";
  
      function d(a, b) {
        for (var c = 0; c < b.length; c++) {
          var d = b[c];
          d.enumerable = d.enumerable || false;
          d.configurable = true;
          if ("value" in d) {
            d.writable = true;
          }
          Object.defineProperty(a, d.key, d);
        }
      }
      c.__esModule = true;
      c.default = undefined;
      var e = function () {
        function a(a, b) {
          this._name = a;
          this._passes = b;
        }
        var b;
        var c;
        a.prototype.clone = function () {
          for (var b = [], c = 0; c < this._passes.length; c++) {
            b.push(this._passes[c].clone());
          }
          return new a(this._name, b);
        };
        b = a;
        if (c = [{
          key: "name",
          get: function () {
            return this._name;
          }
        }, {
          key: "passes",
          get: function () {
            return this._passes;
          }
        }]) {
          d(b.prototype, c);
        }
        Object.defineProperty(b, "prototype", {
          writable: false
        });
        return a;
      }();
      c.default = e;
      b.exports = c.default;
    }, {}],
    276: [function (b, d, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var f;
      var g = b("../../core/value-types");
      var h = (f = b("../enums")) && f.__esModule ? f : {
        default: f
      };
      var i = new g.Mat4();
      var a = 0;
      var j = function () {
        function b() {
          this._id = a++;
          this._priority = 0;
          this._rect = {
            x: 0,
            y: 0,
            w: 1,
            h: 1
          };
          this._color = new g.Vec4(0.3, 0.3, 0.3, 1);
          this._depth = 1;
          this._stencil = 0;
          this._clearFlags = h.default.CLEAR_COLOR | h.default.CLEAR_DEPTH;
          this._clearModel = null;
          this._matView = cc.mat4();
          this._matViewInv = cc.mat4();
          this._matProj = cc.mat4();
          this._matViewProj = cc.mat4();
          this._matInvViewProj = cc.mat4();
          this._stages = [];
          this._cullingByID = false;
          this._framebuffer = null;
          this._shadowLight = null;
          this._cullingMask = 4294967295;
        }
        var c = b.prototype;
        c.getForward = function (a) {
          var b = this._matView.m;
          return g.Vec3.set(a, -b[2], -b[6], -b[10]);
        };
        c.getPosition = function (a) {
          g.Mat4.invert(i, this._matView);
          return g.Mat4.getTranslation(a, i);
        };
        return b;
      }();
      e.default = j;
      d.exports = e.default;
    }, {
      "../../core/value-types": 251,
      "../enums": 277
    }],
    277: [function (a, b, c) {
      "use strict";
  
      c.__esModule = true;
      c.default = undefined;
      var d = a("./build/mappings");
      var e = {
        PROJ_PERSPECTIVE: 0,
        PROJ_ORTHO: 1,
        LIGHT_DIRECTIONAL: 0,
        LIGHT_POINT: 1,
        LIGHT_SPOT: 2,
        LIGHT_AMBIENT: 3,
        SHADOW_NONE: 0,
        SHADOW_HARD: 1,
        SHADOW_SOFT: 2,
        PARAM_INT: d.typeMap.int,
        PARAM_INT2: d.typeMap.ivec2,
        PARAM_INT3: d.typeMap.ivec3,
        PARAM_INT4: d.typeMap.ivec4,
        PARAM_FLOAT: d.typeMap.float,
        PARAM_FLOAT2: d.typeMap.vec2,
        PARAM_FLOAT3: d.typeMap.vec3,
        PARAM_FLOAT4: d.typeMap.vec4,
        PARAM_MAT2: d.typeMap.mat2,
        PARAM_MAT3: d.typeMap.mat3,
        PARAM_MAT4: d.typeMap.mat4,
        PARAM_TEXTURE_2D: d.typeMap.sampler2D,
        PARAM_TEXTURE_CUBE: d.typeMap.samplerCube,
        CLEAR_COLOR: 1,
        CLEAR_DEPTH: 2,
        CLEAR_STENCIL: 4,
        CLEAR_SKYBOX: 8,
        BUFFER_VIEW_INT8: 0,
        BUFFER_VIEW_UINT8: 1,
        BUFFER_VIEW_INT16: 2,
        BUFFER_VIEW_UINT16: 3,
        BUFFER_VIEW_INT32: 4,
        BUFFER_VIEW_UINT32: 5,
        BUFFER_VIEW_FLOAT32: 6
      };
      c.default = e;
      b.exports = c.default;
    }, {
      "./build/mappings": 270
    }],
    278: [function (b, j, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var i;
      var k;
      var q = c(b("./state"));
      var s = b("./enums");
      var a = c(b("./texture-2d"));
      var o = c(b("./texture-cube"));
      function c(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      function l(a, b) {
        for (var c = 0; c < b.length; c++) {
          var d = b[c];
          d.enumerable = d.enumerable || false;
          d.configurable = true;
          if ("value" in d) {
            d.writable = true;
          }
          Object.defineProperty(a, d.key, d);
        }
      }
      (i = {})[5124] = function (a, b, c) {
        a.uniform1i(b, c);
      };
      i[5126] = function (a, b, c) {
        a.uniform1f(b, c);
      };
      i[35664] = function (a, b, c) {
        a.uniform2fv(b, c);
      };
      i[35665] = function (a, b, c) {
        a.uniform3fv(b, c);
      };
      i[35666] = function (a, b, c) {
        a.uniform4fv(b, c);
      };
      i[35667] = function (a, b, c) {
        a.uniform2iv(b, c);
      };
      i[35668] = function (a, b, c) {
        a.uniform3iv(b, c);
      };
      i[35669] = function (a, b, c) {
        a.uniform4iv(b, c);
      };
      i[35670] = function (a, b, c) {
        a.uniform1i(b, c);
      };
      i[35671] = function (a, b, c) {
        a.uniform2iv(b, c);
      };
      i[35672] = function (a, b, c) {
        a.uniform3iv(b, c);
      };
      i[35673] = function (a, b, c) {
        a.uniform4iv(b, c);
      };
      i[35674] = function (a, b, c) {
        a.uniformMatrix2fv(b, false, c);
      };
      i[35675] = function (a, b, c) {
        a.uniformMatrix3fv(b, false, c);
      };
      i[35676] = function (a, b, c) {
        a.uniformMatrix4fv(b, false, c);
      };
      i[35678] = function (a, b, c) {
        a.uniform1i(b, c);
      };
      i[35680] = function (a, b, c) {
        a.uniform1i(b, c);
      };
      var h = i;
      (k = {})[5124] = function (a, b, c) {
        a.uniform1iv(b, c);
      };
      k[5126] = function (a, b, c) {
        a.uniform1fv(b, c);
      };
      k[35664] = function (a, b, c) {
        a.uniform2fv(b, c);
      };
      k[35665] = function (a, b, c) {
        a.uniform3fv(b, c);
      };
      k[35666] = function (a, b, c) {
        a.uniform4fv(b, c);
      };
      k[35667] = function (a, b, c) {
        a.uniform2iv(b, c);
      };
      k[35668] = function (a, b, c) {
        a.uniform3iv(b, c);
      };
      k[35669] = function (a, b, c) {
        a.uniform4iv(b, c);
      };
      k[35670] = function (a, b, c) {
        a.uniform1iv(b, c);
      };
      k[35671] = function (a, b, c) {
        a.uniform2iv(b, c);
      };
      k[35672] = function (a, b, c) {
        a.uniform3iv(b, c);
      };
      k[35673] = function (a, b, c) {
        a.uniform4iv(b, c);
      };
      k[35674] = function (a, b, c) {
        a.uniformMatrix2fv(b, false, c);
      };
      k[35675] = function (a, b, c) {
        a.uniformMatrix3fv(b, false, c);
      };
      k[35676] = function (a, b, c) {
        a.uniformMatrix4fv(b, false, c);
      };
      k[35678] = function (a, b, c) {
        a.uniform1iv(b, c);
      };
      k[35680] = function (a, b, c) {
        a.uniform1iv(b, c);
      };
      var t = k;
      function f(a, b, c) {
        if (b.blend !== c.blend) {
          if (c.blend) {
            a.enable(a.BLEND);
            if (!(c.blendSrc !== s.enums.BLEND_CONSTANT_COLOR && c.blendSrc !== s.enums.BLEND_ONE_MINUS_CONSTANT_COLOR && c.blendDst !== s.enums.BLEND_CONSTANT_COLOR && c.blendDst !== s.enums.BLEND_ONE_MINUS_CONSTANT_COLOR)) {
              a.blendColor((c.blendColor >> 24) / 255, (c.blendColor >> 16 & 255) / 255, (c.blendColor >> 8 & 255) / 255, (c.blendColor & 255) / 255);
            }
            if (c.blendSep) {
              a.blendFuncSeparate(c.blendSrc, c.blendDst, c.blendSrcAlpha, c.blendDstAlpha);
              a.blendEquationSeparate(c.blendEq, c.blendAlphaEq);
            } else {
              a.blendFunc(c.blendSrc, c.blendDst);
              a.blendEquation(c.blendEq);
            }
            return;
          } else {
            a.disable(a.BLEND);
            return;
          }
        }
        if (c.blend !== false) {
          if (b.blendColor !== c.blendColor) {
            a.blendColor((c.blendColor >> 24) / 255, (c.blendColor >> 16 & 255) / 255, (c.blendColor >> 8 & 255) / 255, (c.blendColor & 255) / 255);
          }
          if (b.blendSep === c.blendSep) {
            if (c.blendSep) {
              if (!(b.blendSrc === c.blendSrc && b.blendDst === c.blendDst && b.blendSrcAlpha === c.blendSrcAlpha && b.blendDstAlpha === c.blendDstAlpha)) {
                a.blendFuncSeparate(c.blendSrc, c.blendDst, c.blendSrcAlpha, c.blendDstAlpha);
              }
              if (!(b.blendEq === c.blendEq && b.blendAlphaEq === c.blendAlphaEq)) {
                a.blendEquationSeparate(c.blendEq, c.blendAlphaEq);
              }
            } else {
              if (!(b.blendSrc === c.blendSrc && b.blendDst === c.blendDst)) {
                a.blendFunc(c.blendSrc, c.blendDst);
              }
              if (b.blendEq !== c.blendEq) {
                a.blendEquation(c.blendEq);
              }
            }
          } else if (c.blendSep) {
            a.blendFuncSeparate(c.blendSrc, c.blendDst, c.blendSrcAlpha, c.blendDstAlpha);
            a.blendEquationSeparate(c.blendEq, c.blendAlphaEq);
          } else {
            a.blendFunc(c.blendSrc, c.blendDst);
            a.blendEquation(c.blendEq);
          }
        }
      }
      function d(a, b, c) {
        if (b.depthTest !== c.depthTest) {
          if (c.depthTest) {
            a.enable(a.DEPTH_TEST);
            a.depthFunc(c.depthFunc);
            a.depthMask(c.depthWrite);
            return;
          } else {
            a.disable(a.DEPTH_TEST);
            return;
          }
        }
        if (b.depthWrite !== c.depthWrite) {
          a.depthMask(c.depthWrite);
        }
        if (c.depthTest !== false) {
          if (b.depthFunc !== c.depthFunc) {
            a.depthFunc(c.depthFunc);
          }
        } else if (c.depthWrite) {
          c.depthTest = true;
          c.depthFunc = s.enums.DS_FUNC_ALWAYS;
          a.enable(a.DEPTH_TEST);
          a.depthFunc(c.depthFunc);
        }
      }
      function u(a, b, c) {
        if (c.stencilTest !== s.enums.STENCIL_INHERIT) {
          if (c.stencilTest !== b.stencilTest) {
            if (c.stencilTest === s.enums.STENCIL_DISABLE) {
              a.disable(a.STENCIL_TEST);
              return;
            } else {
              a.enable(a.STENCIL_TEST);
              if (c.stencilSep) {
                a.stencilFuncSeparate(a.FRONT, c.stencilFuncFront, c.stencilRefFront, c.stencilMaskFront);
                a.stencilMaskSeparate(a.FRONT, c.stencilWriteMaskFront);
                a.stencilOpSeparate(a.FRONT, c.stencilFailOpFront, c.stencilZFailOpFront, c.stencilZPassOpFront);
                a.stencilFuncSeparate(a.BACK, c.stencilFuncBack, c.stencilRefBack, c.stencilMaskBack);
                a.stencilMaskSeparate(a.BACK, c.stencilWriteMaskBack);
                a.stencilOpSeparate(a.BACK, c.stencilFailOpBack, c.stencilZFailOpBack, c.stencilZPassOpBack);
              } else {
                a.stencilFunc(c.stencilFuncFront, c.stencilRefFront, c.stencilMaskFront);
                a.stencilMask(c.stencilWriteMaskFront);
                a.stencilOp(c.stencilFailOpFront, c.stencilZFailOpFront, c.stencilZPassOpFront);
              }
              return;
            }
          } else {
            if (c.stencilTest !== s.enums.STENCIL_DISABLE) {
              if (b.stencilSep === c.stencilSep) {
                if (c.stencilSep) {
                  if (!(b.stencilFuncFront === c.stencilFuncFront && b.stencilRefFront === c.stencilRefFront && b.stencilMaskFront === c.stencilMaskFront)) {
                    a.stencilFuncSeparate(a.FRONT, c.stencilFuncFront, c.stencilRefFront, c.stencilMaskFront);
                  }
                  if (b.stencilWriteMaskFront !== c.stencilWriteMaskFront) {
                    a.stencilMaskSeparate(a.FRONT, c.stencilWriteMaskFront);
                  }
                  if (!(b.stencilFailOpFront === c.stencilFailOpFront && b.stencilZFailOpFront === c.stencilZFailOpFront && b.stencilZPassOpFront === c.stencilZPassOpFront)) {
                    a.stencilOpSeparate(a.FRONT, c.stencilFailOpFront, c.stencilZFailOpFront, c.stencilZPassOpFront);
                  }
                  if (!(b.stencilFuncBack === c.stencilFuncBack && b.stencilRefBack === c.stencilRefBack && b.stencilMaskBack === c.stencilMaskBack)) {
                    a.stencilFuncSeparate(a.BACK, c.stencilFuncBack, c.stencilRefBack, c.stencilMaskBack);
                  }
                  if (b.stencilWriteMaskBack !== c.stencilWriteMaskBack) {
                    a.stencilMaskSeparate(a.BACK, c.stencilWriteMaskBack);
                  }
                  if (!(b.stencilFailOpBack === c.stencilFailOpBack && b.stencilZFailOpBack === c.stencilZFailOpBack && b.stencilZPassOpBack === c.stencilZPassOpBack)) {
                    a.stencilOpSeparate(a.BACK, c.stencilFailOpBack, c.stencilZFailOpBack, c.stencilZPassOpBack);
                  }
                } else {
                  if (!(b.stencilFuncFront === c.stencilFuncFront && b.stencilRefFront === c.stencilRefFront && b.stencilMaskFront === c.stencilMaskFront)) {
                    a.stencilFunc(c.stencilFuncFront, c.stencilRefFront, c.stencilMaskFront);
                  }
                  if (b.stencilWriteMaskFront !== c.stencilWriteMaskFront) {
                    a.stencilMask(c.stencilWriteMaskFront);
                  }
                  if (!(b.stencilFailOpFront === c.stencilFailOpFront && b.stencilZFailOpFront === c.stencilZFailOpFront && b.stencilZPassOpFront === c.stencilZPassOpFront)) {
                    a.stencilOp(c.stencilFailOpFront, c.stencilZFailOpFront, c.stencilZPassOpFront);
                  }
                }
              } else if (c.stencilSep) {
                a.stencilFuncSeparate(a.FRONT, c.stencilFuncFront, c.stencilRefFront, c.stencilMaskFront);
                a.stencilMaskSeparate(a.FRONT, c.stencilWriteMaskFront);
                a.stencilOpSeparate(a.FRONT, c.stencilFailOpFront, c.stencilZFailOpFront, c.stencilZPassOpFront);
                a.stencilFuncSeparate(a.BACK, c.stencilFuncBack, c.stencilRefBack, c.stencilMaskBack);
                a.stencilMaskSeparate(a.BACK, c.stencilWriteMaskBack);
                a.stencilOpSeparate(a.BACK, c.stencilFailOpBack, c.stencilZFailOpBack, c.stencilZPassOpBack);
              } else {
                a.stencilFunc(c.stencilFuncFront, c.stencilRefFront, c.stencilMaskFront);
                a.stencilMask(c.stencilWriteMaskFront);
                a.stencilOp(c.stencilFailOpFront, c.stencilZFailOpFront, c.stencilZPassOpFront);
              }
            }
            return;
          }
        }
      }
      function p(a, b, c) {
        if (b.cullMode !== c.cullMode) {
          if (c.cullMode !== s.enums.CULL_NONE) {
            a.enable(a.CULL_FACE);
            a.cullFace(c.cullMode);
          } else {
            a.disable(a.CULL_FACE);
          }
        }
      }
      function v(b, g, e, i) {
        var j = false;
        if (i.maxStream !== -1) {
          if (e.maxStream !== i.maxStream) {
            j = true;
          } else if (e.program !== i.program) {
            j = true;
          } else {
            for (var k = 0; k < i.maxStream + 1; ++k) {
              if (e.vertexBuffers[k] !== i.vertexBuffers[k] || e.vertexBufferOffsets[k] !== i.vertexBufferOffsets[k]) {
                j = true;
                break;
              }
            }
          }
          if (j) {
            for (var m = 0; m < b._caps.maxVertexAttribs; ++m) {
              b._newAttributes[m] = 0;
            }
            for (var n = 0; n < i.maxStream + 1; ++n) {
              var p = i.vertexBuffers[n];
              var q = i.vertexBufferOffsets[n];
              if (p && p._glID !== -1) {
                g.bindBuffer(g.ARRAY_BUFFER, p._glID);
                for (var t = 0; t < i.program._attributes.length; ++t) {
                  var v = i.program._attributes[t];
                  var w = p._format.element(v.name);
                  if (w) {
                    if (b._enabledAttributes[v.location] === 0) {
                      g.enableVertexAttribArray(v.location);
                      b._enabledAttributes[v.location] = 1;
                    }
                    b._newAttributes[v.location] = 1;
                    g.vertexAttribPointer(v.location, w.num, w.type, w.normalize, w.stride, w.offset + q * w.stride);
                  }
                }
              }
            }
            for (var x = 0; x < b._caps.maxVertexAttribs; ++x) {
              if (b._enabledAttributes[x] !== b._newAttributes[x]) {
                g.disableVertexAttribArray(x);
                b._enabledAttributes[x] = 0;
              }
            }
          }
        }
      }
      function g(a, b, c) {
        for (var d = 0; d < c.maxTextureSlot + 1; ++d) {
          if (b.textureUnits[d] !== c.textureUnits[d]) {
            var e = c.textureUnits[d];
            if (e && e._glID !== -1) {
              a.activeTexture(a.TEXTURE0 + d);
              a.bindTexture(e._target, e._glID);
            }
          }
        }
      }
      function m(b, c, d, e) {
        if (e === undefined) {
          e = 0;
        }
        if (d instanceof a.default) {
          b.framebufferTexture2D(b.FRAMEBUFFER, c, b.TEXTURE_2D, d._glID, 0);
        } else if (d instanceof o.default) {
          b.framebufferTexture2D(b.FRAMEBUFFER, c, b.TEXTURE_CUBE_MAP_POSITIVE_X + e, d._glID, 0);
        } else {
          b.framebufferRenderbuffer(b.FRAMEBUFFER, c, b.RENDERBUFFER, d._glID);
        }
      }
      var w = function () {
        function a(a, b) {
          var c;
          if ((b = b || {}).alpha === undefined) {
            b.alpha = false;
          }
          if (b.stencil === undefined) {
            b.stencil = true;
          }
          if (b.depth === undefined) {
            b.depth = true;
          }
          if (b.antialias === undefined) {
            b.antialias = false;
          }
          if (b.preserveDrawingBuffer === undefined) {
            b.preserveDrawingBuffer = false;
          }
          try {
            c = a.getContext("webgl", b) || a.getContext("experimental-webgl", b) || a.getContext("webkit-3d", b) || a.getContext("moz-webgl", b);
          } catch (a) {
            c = null;
          }
          if (!c) {
            throw Error(cc.debug.getError(2400, "no webgl"));
          }
          this._gl = c;
          this._extensions = {};
          this._caps = {};
          this._stats = {
            texture: 0,
            vb: 0,
            ib: 0,
            drawcalls: 0
          };
          this._initExtensions(["EXT_texture_filter_anisotropic", "EXT_shader_texture_lod", "OES_standard_derivatives", "OES_texture_float", "OES_texture_float_linear", "OES_texture_half_float", "OES_texture_half_float_linear", "OES_vertex_array_object", "WEBGL_compressed_texture_astc", "WEBGL_compressed_texture_etc", "WEBGL_compressed_texture_etc1", "WEBGL_compressed_texture_pvrtc", "WEBGL_compressed_texture_s3tc", "WEBGL_depth_texture", "WEBGL_draw_buffers"]);
          this._initCaps();
          this._initStates();
          q.default.initDefault(this);
          this._current = new q.default(this);
          this._next = new q.default(this);
          this._uniforms = {};
          this._vx = this._vy = this._vw = this._vh = 0;
          this._sx = this._sy = this._sw = this._sh = 0;
          this._framebuffer = null;
          this._enabledAttributes = Array(this._caps.maxVertexAttribs);
          this._newAttributes = Array(this._caps.maxVertexAttribs);
          for (var d = 0; d < this._caps.maxVertexAttribs; ++d) {
            this._enabledAttributes[d] = 0;
            this._newAttributes[d] = 0;
          }
        }
        var b;
        var c;
        var j = a.prototype;
        j._initExtensions = function (b) {
          for (var c = this._gl, d = ["", "WEBKIT_", "MOZ_"], e = 0; e < b.length; ++e) {
            for (var f = b[e], g = 0; g < 3; g++) {
              try {
                var h = c.getExtension(d[g] + f);
                if (h) {
                  this._extensions[f] = h;
                  break;
                }
              } catch (a) {}
            }
          }
        };
        j._initCaps = function () {
          var a = this._gl;
          var b = this.ext("WEBGL_draw_buffers");
          this._caps.maxVertexStreams = 4;
          this._caps.maxVertexTextures = a.getParameter(a.MAX_VERTEX_TEXTURE_IMAGE_UNITS);
          this._caps.maxFragUniforms = a.getParameter(a.MAX_FRAGMENT_UNIFORM_VECTORS);
          this._caps.maxTextureUnits = a.getParameter(a.MAX_TEXTURE_IMAGE_UNITS);
          this._caps.maxVertexAttribs = a.getParameter(a.MAX_VERTEX_ATTRIBS);
          this._caps.maxTextureSize = a.getParameter(a.MAX_TEXTURE_SIZE);
          this._caps.maxDrawBuffers = b ? a.getParameter(b.MAX_DRAW_BUFFERS_WEBGL) : 1;
          this._caps.maxColorAttachments = b ? a.getParameter(b.MAX_COLOR_ATTACHMENTS_WEBGL) : 1;
        };
        j._initStates = function () {
          var a = this._gl;
          a.disable(a.BLEND);
          a.blendFunc(a.ONE, a.ZERO);
          a.blendEquation(a.FUNC_ADD);
          a.blendColor(1, 1, 1, 1);
          a.colorMask(true, true, true, true);
          a.enable(a.CULL_FACE);
          a.cullFace(a.BACK);
          a.disable(a.DEPTH_TEST);
          a.depthFunc(a.LESS);
          a.depthMask(false);
          a.disable(a.POLYGON_OFFSET_FILL);
          a.depthRange(0, 1);
          a.disable(a.STENCIL_TEST);
          a.stencilFunc(a.ALWAYS, 0, 255);
          a.stencilMask(255);
          a.stencilOp(a.KEEP, a.KEEP, a.KEEP);
          a.clearDepth(1);
          a.clearColor(0, 0, 0, 0);
          a.clearStencil(0);
          a.disable(a.SCISSOR_TEST);
        };
        j._restoreTexture = function (a) {
          var b = this._gl;
          var c = this._current.textureUnits[a];
          if (c && c._glID !== -1) {
            b.bindTexture(c._target, c._glID);
          } else {
            b.bindTexture(b.TEXTURE_2D, null);
          }
        };
        j._restoreIndexBuffer = function () {
          var a = this._gl;
          var b = this._current.indexBuffer;
          if (b && b._glID !== -1) {
            a.bindBuffer(a.ELEMENT_ARRAY_BUFFER, b._glID);
          } else {
            a.bindBuffer(a.ELEMENT_ARRAY_BUFFER, null);
          }
        };
        j.ext = function (a) {
          return this._extensions[a];
        };
        j.allowFloatTexture = function () {
          return this.ext("OES_texture_float") != null;
        };
        j.setFrameBuffer = function (a) {
          if (this._framebuffer !== a) {
            this._framebuffer = a;
            var b = this._gl;
            if (a) {
              b.bindFramebuffer(b.FRAMEBUFFER, a._glID);
              for (var c = a._colors.length, d = 0; d < c; ++d) {
                var e = a._colors[d];
                m(b, b.COLOR_ATTACHMENT0 + d, e);
              }
              for (var f = c; f < this._caps.maxColorAttachments; ++f) {
                b.framebufferTexture2D(b.FRAMEBUFFER, b.COLOR_ATTACHMENT0 + f, b.TEXTURE_2D, null, 0);
              }
              if (a._depth) {
                m(b, b.DEPTH_ATTACHMENT, a._depth);
              }
              if (a._stencil) {
                m(b, b.STENCIL_ATTACHMENT, a._stencil);
              }
              if (a._depthStencil) {
                m(b, b.DEPTH_STENCIL_ATTACHMENT, a._depthStencil);
              }
            } else {
              b.bindFramebuffer(b.FRAMEBUFFER, null);
            }
          }
        };
        j.setViewport = function (a, b, c, d) {
          if (!(this._vx === a && this._vy === b && this._vw === c && this._vh === d)) {
            this._gl.viewport(a, b, c, d);
            this._vx = a;
            this._vy = b;
            this._vw = c;
            this._vh = d;
          }
        };
        j.setScissor = function (a, b, c, d) {
          if (!(this._sx === a && this._sy === b && this._sw === c && this._sh === d)) {
            this._gl.scissor(a, b, c, d);
            this._sx = a;
            this._sy = b;
            this._sw = c;
            this._sh = d;
          }
        };
        j.clear = function (a) {
          if (a.color !== undefined || a.depth !== undefined || a.stencil !== undefined) {
            var b = this._gl;
            var c = 0;
            if (a.color !== undefined) {
              c |= b.COLOR_BUFFER_BIT;
              b.clearColor(a.color[0], a.color[1], a.color[2], a.color[3]);
            }
            if (a.depth !== undefined) {
              c |= b.DEPTH_BUFFER_BIT;
              b.clearDepth(a.depth);
              b.enable(b.DEPTH_TEST);
              b.depthMask(true);
              b.depthFunc(b.ALWAYS);
            }
            if (a.stencil !== undefined) {
              c |= b.STENCIL_BUFFER_BIT;
              b.clearStencil(a.stencil);
            }
            b.clear(c);
            if (a.depth !== undefined) {
              if (this._current.depthTest === false) {
                b.disable(b.DEPTH_TEST);
              } else {
                if (this._current.depthWrite === false) {
                  b.depthMask(false);
                }
                if (this._current.depthFunc !== s.enums.DS_FUNC_ALWAYS) {
                  b.depthFunc(this._current.depthFunc);
                }
              }
            }
          }
        };
        j.enableBlend = function () {
          this._next.blend = true;
        };
        j.enableDepthTest = function () {
          this._next.depthTest = true;
        };
        j.enableDepthWrite = function () {
          this._next.depthWrite = true;
        };
        j.setStencilTest = function (a) {
          this._next.stencilTest = a;
        };
        j.setStencilFunc = function (a, b, c) {
          this._next.stencilSep = false;
          this._next.stencilFuncFront = this._next.stencilFuncBack = a;
          this._next.stencilRefFront = this._next.stencilRefBack = b;
          this._next.stencilMaskFront = this._next.stencilMaskBack = c;
        };
        j.setStencilFuncFront = function (a, b, c) {
          this._next.stencilSep = true;
          this._next.stencilFuncFront = a;
          this._next.stencilRefFront = b;
          this._next.stencilMaskFront = c;
        };
        j.setStencilFuncBack = function (a, b, c) {
          this._next.stencilSep = true;
          this._next.stencilFuncBack = a;
          this._next.stencilRefBack = b;
          this._next.stencilMaskBack = c;
        };
        j.setStencilOp = function (a, b, c, d) {
          this._next.stencilFailOpFront = this._next.stencilFailOpBack = a;
          this._next.stencilZFailOpFront = this._next.stencilZFailOpBack = b;
          this._next.stencilZPassOpFront = this._next.stencilZPassOpBack = c;
          this._next.stencilWriteMaskFront = this._next.stencilWriteMaskBack = d;
        };
        j.setStencilOpFront = function (a, b, c, d) {
          this._next.stencilSep = true;
          this._next.stencilFailOpFront = a;
          this._next.stencilZFailOpFront = b;
          this._next.stencilZPassOpFront = c;
          this._next.stencilWriteMaskFront = d;
        };
        j.setStencilOpBack = function (a, b, c, d) {
          this._next.stencilSep = true;
          this._next.stencilFailOpBack = a;
          this._next.stencilZFailOpBack = b;
          this._next.stencilZPassOpBack = c;
          this._next.stencilWriteMaskBack = d;
        };
        j.setDepthFunc = function (a) {
          this._next.depthFunc = a;
        };
        j.setBlendColor32 = function (a) {
          this._next.blendColor = a;
        };
        j.setBlendColor = function (a, b, c, d) {
          this._next.blendColor = (a * 255 << 24 | b * 255 << 16 | c * 255 << 8 | d * 255) >>> 0;
        };
        j.setBlendFunc = function (a, b) {
          this._next.blendSep = false;
          this._next.blendSrc = a;
          this._next.blendDst = b;
        };
        j.setBlendFuncSep = function (a, b, c, d) {
          this._next.blendSep = true;
          this._next.blendSrc = a;
          this._next.blendDst = b;
          this._next.blendSrcAlpha = c;
          this._next.blendDstAlpha = d;
        };
        j.setBlendEq = function (a) {
          this._next.blendSep = false;
          this._next.blendEq = a;
        };
        j.setBlendEqSep = function (a, b) {
          this._next.blendSep = true;
          this._next.blendEq = a;
          this._next.blendAlphaEq = b;
        };
        j.setCullMode = function (a) {
          this._next.cullMode = a;
        };
        j.setVertexBuffer = function (a, b, c) {
          if (c === undefined) {
            c = 0;
          }
          this._next.vertexBuffers[a] = b;
          this._next.vertexBufferOffsets[a] = c;
          if (this._next.maxStream < a) {
            this._next.maxStream = a;
          }
        };
        j.setIndexBuffer = function (a) {
          this._next.indexBuffer = a;
        };
        j.setProgram = function (a) {
          this._next.program = a;
        };
        j.setTexture = function (a, b, c) {
          if (!(c >= this._caps.maxTextureUnits)) {
            this._next.textureUnits[c] = b;
            this.setUniform(a, c);
            if (this._next.maxTextureSlot < c) {
              this._next.maxTextureSlot = c;
            }
          }
        };
        j.setTextureArray = function (a, b, c) {
          var d = b.length;
          if (!(d >= this._caps.maxTextureUnits)) {
            for (var e = 0; e < d; ++e) {
              var f = c[e];
              this._next.textureUnits[f] = b[e];
              if (this._next.maxTextureSlot < f) {
                this._next.maxTextureSlot = f;
              }
            }
            this.setUniform(a, c);
          }
        };
        j.setUniform = function (b, d) {
          var e = this._uniforms[b];
          var f = false;
          var g = false;
          var j = false;
          var k = false;
          do {
            if (!e) {
              break;
            }
            j = Array.isArray(d) || d instanceof Float32Array;
            k = d instanceof Int32Array;
            g = j || k;
            if (e.isArray !== g) {
              break;
            }
            if (e.isArray && e.value.length !== d.length) {
              break;
            }
            f = true;
          } while (0);
          if (f) {
            var m = e.value;
            var o = false;
            if (e.isArray) {
              for (var p = 0, q = m.length; p < q; p++) {
                if (m[p] !== d[p]) {
                  o = true;
                  m[p] = d[p];
                }
              }
            } else if (m !== d) {
              o = true;
              e.value = d;
            }
            if (o) {
              e.dirty = true;
            }
          } else {
            var h = d;
            if (j) {
              h = new Float32Array(d);
            } else if (k) {
              h = new Int32Array(d);
            }
            e = {
              dirty: true,
              value: h,
              isArray: g
            };
          }
          this._uniforms[b] = e;
        };
        j.setUniformDirectly = function (a, b) {
          var c = this._uniforms[a];
          if (!c) {
            this._uniforms[a] = c = {};
          }
          c.dirty = true;
          c.value = b;
        };
        j.setPrimitiveType = function (a) {
          this._next.primitiveType = a;
        };
        j.resetDrawCalls = function () {
          this._stats.drawcalls = 0;
        };
        j.getDrawCalls = function () {
          return this._stats.drawcalls;
        };
        j.draw = function (b, j) {
          var e = this._gl;
          var i = this._current;
          var k = this._next;
          f(e, i, k);
          d(e, i, k);
          u(e, i, k);
          p(e, i, k);
          v(this, e, i, k);
          if (i.indexBuffer !== k.indexBuffer) {
            e.bindBuffer(e.ELEMENT_ARRAY_BUFFER, k.indexBuffer && k.indexBuffer._glID !== -1 ? k.indexBuffer._glID : null);
          }
          var m = false;
          if (i.program !== k.program) {
            if (k.program._linked) {
              e.useProgram(k.program._glID);
            }
            m = true;
          }
          g(e, i, k);
          for (var n = 0; n < k.program._uniforms.length; ++n) {
            var q = k.program._uniforms[n];
            var r = this._uniforms[q.name];
            if (r && (m || r.dirty)) {
              r.dirty = false;
              var w = q.size === undefined ? h[q.type] : t[q.type];
              if (w) {
                w(e, q.location, r.value);
              }
            }
          }
          if (j) {
            if (k.indexBuffer) {
              e.drawElements(this._next.primitiveType, j, k.indexBuffer._format, b * k.indexBuffer._bytesPerIndex);
            } else {
              e.drawArrays(this._next.primitiveType, b, j);
            }
            this._stats.drawcalls++;
          }
          i.set(k);
          k.reset();
        };
        b = a;
        if (c = [{
          key: "caps",
          get: function () {
            return this._caps;
          }
        }]) {
          l(b.prototype, c);
        }
        Object.defineProperty(b, "prototype", {
          writable: false
        });
        return a;
      }();
      e.default = w;
      j.exports = e.default;
    }, {
      "./enums": 279,
      "./state": 286,
      "./texture-2d": 287,
      "./texture-cube": 288
    }],
    279: [function (a, b, c) {
      "use strict";
  
      c.__esModule = true;
      c.attrTypeBytes = function (a) {
        if (a === e.ATTR_TYPE_INT8) {
          return 1;
        } else if (a === e.ATTR_TYPE_UINT8) {
          return 1;
        } else if (a === e.ATTR_TYPE_INT16) {
          return 2;
        } else if (a === e.ATTR_TYPE_UINT16) {
          return 2;
        } else if (a === e.ATTR_TYPE_INT32) {
          return 4;
        } else if (a === e.ATTR_TYPE_UINT32) {
          return 4;
        } else if (a === e.ATTR_TYPE_FLOAT32) {
          return 4;
        } else {
          return 0;
        }
      };
      c.enums = undefined;
      c.glFilter = function (a, b, c) {
        if (c === undefined) {
          c = -1;
        }
        var e = d[b][c + 1];
        if (e === undefined) {
          if (c === -1) {
            return a.LINEAR;
          } else {
            return a.LINEAR_MIPMAP_LINEAR;
          }
        } else {
          return e;
        }
      };
      c.glTextureFmt = function (a) {
        var b = f[a];
        if (b === undefined) {
          return f[e.TEXTURE_FMT_RGBA8];
        } else {
          return b;
        }
      };
      var d = [[9728, 9984, 9986], [9729, 9985, 9987]];
      var f = [{
        format: 6407,
        internalFormat: 33776,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 33777,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 33778,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 33779,
        pixelType: null
      }, {
        format: 6407,
        internalFormat: 36196,
        pixelType: null
      }, {
        format: 6407,
        internalFormat: 35841,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 35843,
        pixelType: null
      }, {
        format: 6407,
        internalFormat: 35840,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 35842,
        pixelType: null
      }, {
        format: 6406,
        internalFormat: 6406,
        pixelType: 5121
      }, {
        format: 6409,
        internalFormat: 6409,
        pixelType: 5121
      }, {
        format: 6410,
        internalFormat: 6410,
        pixelType: 5121
      }, {
        format: 6407,
        internalFormat: 6407,
        pixelType: 33635
      }, {
        format: 6408,
        internalFormat: 6408,
        pixelType: 32820
      }, {
        format: 6408,
        internalFormat: 6408,
        pixelType: 32819
      }, {
        format: 6407,
        internalFormat: 6407,
        pixelType: 5121
      }, {
        format: 6408,
        internalFormat: 6408,
        pixelType: 5121
      }, {
        format: 6407,
        internalFormat: 6407,
        pixelType: 36193
      }, {
        format: 6408,
        internalFormat: 6408,
        pixelType: 36193
      }, {
        format: 6407,
        internalFormat: 6407,
        pixelType: 5126
      }, {
        format: 6408,
        internalFormat: 6408,
        pixelType: 5126
      }, {
        format: null,
        internalFormat: null,
        pixelType: null
      }, {
        format: null,
        internalFormat: null,
        pixelType: null
      }, {
        format: null,
        internalFormat: null,
        pixelType: null
      }, {
        format: null,
        internalFormat: null,
        pixelType: null
      }, {
        format: 6402,
        internalFormat: 6402,
        pixelType: 5123
      }, {
        format: 6402,
        internalFormat: 6402,
        pixelType: 5125
      }, {
        format: 6402,
        internalFormat: 6402,
        pixelType: 5125
      }, {
        format: 6407,
        internalFormat: 37492,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 37496,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 37808,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 37809,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 37810,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 37811,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 37812,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 37813,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 37814,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 37815,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 37816,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 37817,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 37818,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 37819,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 37820,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 37821,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 37840,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 37841,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 37842,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 37843,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 37844,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 37845,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 37846,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 37847,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 37848,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 37849,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 37850,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 37851,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 37852,
        pixelType: null
      }, {
        format: 6408,
        internalFormat: 37853,
        pixelType: null
      }];
      var e = {
        USAGE_STATIC: 35044,
        USAGE_DYNAMIC: 35048,
        USAGE_STREAM: 35040,
        INDEX_FMT_UINT8: 5121,
        INDEX_FMT_UINT16: 5123,
        INDEX_FMT_UINT32: 5125,
        ATTR_POSITION: "a_position",
        ATTR_NORMAL: "a_normal",
        ATTR_TANGENT: "a_tangent",
        ATTR_BITANGENT: "a_bitangent",
        ATTR_WEIGHTS: "a_weights",
        ATTR_JOINTS: "a_joints",
        ATTR_COLOR: "a_color",
        ATTR_COLOR0: "a_color0",
        ATTR_COLOR1: "a_color1",
        ATTR_UV: "a_uv",
        ATTR_UV0: "a_uv0",
        ATTR_UV1: "a_uv1",
        ATTR_UV2: "a_uv2",
        ATTR_UV3: "a_uv3",
        ATTR_UV4: "a_uv4",
        ATTR_UV5: "a_uv5",
        ATTR_UV6: "a_uv6",
        ATTR_UV7: "a_uv7",
        ATTR_TEX_COORD: "a_texCoord",
        ATTR_TEX_COORD1: "a_texCoord1",
        ATTR_TEX_COORD2: "a_texCoord2",
        ATTR_TEX_COORD3: "a_texCoord3",
        ATTR_TEX_COORD4: "a_texCoord4",
        ATTR_TEX_COORD5: "a_texCoord5",
        ATTR_TEX_COORD6: "a_texCoord6",
        ATTR_TEX_COORD7: "a_texCoord7",
        ATTR_TEX_COORD8: "a_texCoord8",
        ATTR_TYPE_INT8: 5120,
        ATTR_TYPE_UINT8: 5121,
        ATTR_TYPE_INT16: 5122,
        ATTR_TYPE_UINT16: 5123,
        ATTR_TYPE_INT32: 5124,
        ATTR_TYPE_UINT32: 5125,
        ATTR_TYPE_FLOAT32: 5126,
        FILTER_NEAREST: 0,
        FILTER_LINEAR: 1,
        WRAP_REPEAT: 10497,
        WRAP_CLAMP: 33071,
        WRAP_MIRROR: 33648,
        TEXTURE_FMT_RGB_DXT1: 0,
        TEXTURE_FMT_RGBA_DXT1: 1,
        TEXTURE_FMT_RGBA_DXT3: 2,
        TEXTURE_FMT_RGBA_DXT5: 3,
        TEXTURE_FMT_RGB_ETC1: 4,
        TEXTURE_FMT_RGB_PVRTC_2BPPV1: 5,
        TEXTURE_FMT_RGBA_PVRTC_2BPPV1: 6,
        TEXTURE_FMT_RGB_PVRTC_4BPPV1: 7,
        TEXTURE_FMT_RGBA_PVRTC_4BPPV1: 8,
        TEXTURE_FMT_A8: 9,
        TEXTURE_FMT_L8: 10,
        TEXTURE_FMT_L8_A8: 11,
        TEXTURE_FMT_R5_G6_B5: 12,
        TEXTURE_FMT_R5_G5_B5_A1: 13,
        TEXTURE_FMT_R4_G4_B4_A4: 14,
        TEXTURE_FMT_RGB8: 15,
        TEXTURE_FMT_RGBA8: 16,
        TEXTURE_FMT_RGB16F: 17,
        TEXTURE_FMT_RGBA16F: 18,
        TEXTURE_FMT_RGB32F: 19,
        TEXTURE_FMT_RGBA32F: 20,
        TEXTURE_FMT_R32F: 21,
        TEXTURE_FMT_111110F: 22,
        TEXTURE_FMT_SRGB: 23,
        TEXTURE_FMT_SRGBA: 24,
        TEXTURE_FMT_D16: 25,
        TEXTURE_FMT_D32: 26,
        TEXTURE_FMT_D24S8: 27,
        TEXTURE_FMT_RGB_ETC2: 28,
        TEXTURE_FMT_RGBA_ETC2: 29,
        TEXTURE_FMT_RGBA_ASTC_4X4: 30,
        TEXTURE_FMT_RGBA_ASTC_5X4: 31,
        TEXTURE_FMT_RGBA_ASTC_5X5: 32,
        TEXTURE_FMT_RGBA_ASTC_6X5: 33,
        TEXTURE_FMT_RGBA_ASTC_6X6: 34,
        TEXTURE_FMT_RGBA_ASTC_8X5: 35,
        TEXTURE_FMT_RGBA_ASTC_8X6: 36,
        TEXTURE_FMT_RGBA_ASTC_8X8: 37,
        TEXTURE_FMT_RGBA_ASTC_10X5: 38,
        TEXTURE_FMT_RGBA_ASTC_10X6: 39,
        TEXTURE_FMT_RGBA_ASTC_10X8: 40,
        TEXTURE_FMT_RGBA_ASTC_10X10: 41,
        TEXTURE_FMT_RGBA_ASTC_12X10: 42,
        TEXTURE_FMT_RGBA_ASTC_12X12: 43,
        TEXTURE_FMT_SRGBA_ASTC_4X4: 44,
        TEXTURE_FMT_SRGBA_ASTC_5X4: 45,
        TEXTURE_FMT_SRGBA_ASTC_5X5: 46,
        TEXTURE_FMT_SRGBA_ASTC_6X5: 47,
        TEXTURE_FMT_SRGBA_ASTC_6X6: 48,
        TEXTURE_FMT_SRGBA_ASTC_8X5: 49,
        TEXTURE_FMT_SRGBA_ASTC_8X6: 50,
        TEXTURE_FMT_SRGBA_ASTC_8X8: 51,
        TEXTURE_FMT_SRGBA_ASTC_10X5: 52,
        TEXTURE_FMT_SRGBA_ASTC_10X6: 53,
        TEXTURE_FMT_SRGBA_ASTC_10X8: 54,
        TEXTURE_FMT_SRGBA_ASTC_10X10: 55,
        TEXTURE_FMT_SRGBA_ASTC_12X10: 56,
        TEXTURE_FMT_SRGBA_ASTC_12X12: 57,
        DS_FUNC_NEVER: 512,
        DS_FUNC_LESS: 513,
        DS_FUNC_EQUAL: 514,
        DS_FUNC_LEQUAL: 515,
        DS_FUNC_GREATER: 516,
        DS_FUNC_NOTEQUAL: 517,
        DS_FUNC_GEQUAL: 518,
        DS_FUNC_ALWAYS: 519,
        RB_FMT_RGBA4: 32854,
        RB_FMT_RGB5_A1: 32855,
        RB_FMT_RGB565: 36194,
        RB_FMT_D16: 33189,
        RB_FMT_S8: 36168,
        RB_FMT_D24S8: 34041,
        BLEND_FUNC_ADD: 32774,
        BLEND_FUNC_SUBTRACT: 32778,
        BLEND_FUNC_REVERSE_SUBTRACT: 32779,
        BLEND_ZERO: 0,
        BLEND_ONE: 1,
        BLEND_SRC_COLOR: 768,
        BLEND_ONE_MINUS_SRC_COLOR: 769,
        BLEND_DST_COLOR: 774,
        BLEND_ONE_MINUS_DST_COLOR: 775,
        BLEND_SRC_ALPHA: 770,
        BLEND_ONE_MINUS_SRC_ALPHA: 771,
        BLEND_DST_ALPHA: 772,
        BLEND_ONE_MINUS_DST_ALPHA: 773,
        BLEND_CONSTANT_COLOR: 32769,
        BLEND_ONE_MINUS_CONSTANT_COLOR: 32770,
        BLEND_CONSTANT_ALPHA: 32771,
        BLEND_ONE_MINUS_CONSTANT_ALPHA: 32772,
        BLEND_SRC_ALPHA_SATURATE: 776,
        STENCIL_DISABLE: 0,
        STENCIL_ENABLE: 1,
        STENCIL_INHERIT: 2,
        STENCIL_OP_KEEP: 7680,
        STENCIL_OP_ZERO: 0,
        STENCIL_OP_REPLACE: 7681,
        STENCIL_OP_INCR: 7682,
        STENCIL_OP_INCR_WRAP: 34055,
        STENCIL_OP_DECR: 7683,
        STENCIL_OP_DECR_WRAP: 34056,
        STENCIL_OP_INVERT: 5386,
        CULL_NONE: 0,
        CULL_FRONT: 1028,
        CULL_BACK: 1029,
        CULL_FRONT_AND_BACK: 1032,
        PT_POINTS: 0,
        PT_LINES: 1,
        PT_LINE_LOOP: 2,
        PT_LINE_STRIP: 3,
        PT_TRIANGLES: 4,
        PT_TRIANGLE_STRIP: 5,
        PT_TRIANGLE_FAN: 6
      };
      c.enums = e;
    }, {}],
    280: [function (a, b, c) {
      "use strict";
  
      c.__esModule = true;
      c.default = undefined;
      var d = function () {
        function a(a, b, c, d) {
          this._device = a;
          this._width = b;
          this._height = c;
          this._colors = d.colors || [];
          this._depth = d.depth || null;
          this._stencil = d.stencil || null;
          this._depthStencil = d.depthStencil || null;
          this._glID = a._gl.createFramebuffer();
        }
        var b = a.prototype;
        b.destroy = function () {
          if (this._glID !== null) {
            this._device._gl.deleteFramebuffer(this._glID);
            this._glID = null;
          }
        };
        b.getHandle = function () {
          return this._glID;
        };
        return a;
      }();
      c.default = d;
      b.exports = c.default;
    }, {}],
    281: [function (b, d, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var f;
      var g = b("./enums");
      function h(a, b) {
        for (var c = 0; c < b.length; c++) {
          var d = b[c];
          d.enumerable = d.enumerable || false;
          d.configurable = true;
          if ("value" in d) {
            d.writable = true;
          }
          Object.defineProperty(a, d.key, d);
        }
      }
      (f = {})[g.enums.INDEX_FMT_UINT8] = 1;
      f[g.enums.INDEX_FMT_UINT16] = 2;
      f[g.enums.INDEX_FMT_UINT32] = 4;
      var j = f;
      var a = function () {
        function a(a, b, c, d) {
          this._device = a;
          this._format = b;
          this._usage = c;
          this._bytesPerIndex = j[b];
          this._bytes = d.byteLength;
          this._numIndices = this._bytes / this._bytesPerIndex;
          this._needExpandDataStore = true;
          this._glID = a._gl.createBuffer();
          this.update(0, d);
          a._stats.ib += this._bytes;
        }
        var b;
        var c;
        var d = a.prototype;
        d.destroy = function () {
          if (this._glID !== -1) {
            this._device._gl.deleteBuffer(this._glID);
            this._device._stats.ib -= this.bytes;
            this._glID = -1;
          }
        };
        d.update = function (a, b) {
          if (this._glID !== -1 && b.byteLength !== 0) {
            if (a + b.byteLength > this._bytes) {
              if (a) {
                return;
              }
              this._needExpandDataStore = true;
              this._bytes = a + b.byteLength;
              this._numIndices = this._bytes / this._bytesPerIndex;
            }
            var c = this._device._gl;
            var d = this._usage;
            c.bindBuffer(c.ELEMENT_ARRAY_BUFFER, this._glID);
            if (this._needExpandDataStore) {
              c.bufferData(c.ELEMENT_ARRAY_BUFFER, b, d);
              this._needExpandDataStore = false;
            } else {
              c.bufferSubData(c.ELEMENT_ARRAY_BUFFER, a, b);
            }
            this._device._restoreIndexBuffer();
          }
        };
        d.setUsage = function (a) {
          this._usage = a;
        };
        b = a;
        if (c = [{
          key: "count",
          get: function () {
            return this._numIndices;
          }
        }]) {
          h(b.prototype, c);
        }
        Object.defineProperty(b, "prototype", {
          writable: false
        });
        return a;
      }();
      a.BYTES_PER_INDEX = j;
      var i = a;
      e.default = i;
      d.exports = e.default;
    }, {
      "./enums": 279
    }],
    282: [function (a, b, c) {
      "use strict";
  
      c.__esModule = true;
      c.default = undefined;
      var d;
      var e = a("./enums");
      d = {
        VertexFormat: a("./vertex-format"),
        IndexBuffer: a("./index-buffer"),
        VertexBuffer: a("./vertex-buffer"),
        Program: a("./program"),
        Texture: a("./texture"),
        Texture2D: a("./texture-2d"),
        TextureCube: a("./texture-cube"),
        RenderBuffer: a("./render-buffer"),
        FrameBuffer: a("./frame-buffer"),
        Device: a("./device"),
        attrTypeBytes: e.attrTypeBytes,
        glFilter: e.glFilter,
        glTextureFmt: e.glTextureFmt
      };
      Object.assign(d, e.enums);
      var f = d;
      c.default = f;
      cc.gfx = d;
      b.exports = c.default;
    }, {
      "./device": 278,
      "./enums": 279,
      "./frame-buffer": 280,
      "./index-buffer": 281,
      "./program": 284,
      "./render-buffer": 285,
      "./texture": 289,
      "./texture-2d": 287,
      "./texture-cube": 288,
      "./vertex-buffer": 290,
      "./vertex-format": 291
    }],
    283: [function (a, b, c) {
      "use strict";
  
      c.__esModule = true;
      c.isPow2 = function (a) {
        return !(a & a - 1 || !a);
      };
    }, {}],
    284: [function (b, c, d) {
      "use strict";
  
      function f(a, b) {
        for (var c = 0; c < b.length; c++) {
          var d = b[c];
          d.enumerable = d.enumerable || false;
          d.configurable = true;
          if ("value" in d) {
            d.writable = true;
          }
          Object.defineProperty(a, d.key, d);
        }
      }
      d.__esModule = true;
      d.default = undefined;
      var g = 0;
      function h(a, b, c) {
        if (c) {
          c.split("\n").forEach(function (c) {
            if (!(c.length < 5)) {
              var d = /^ERROR:\s+(\d+):(\d+):\s*(.*)$/.exec(c);
              if (d) {
                a.push({
                  type: b,
                  fileID: d[1] | 0,
                  line: d[2] | 0,
                  message: d[3].trim()
                });
              } else if (c.length > 0) {
                a.push({
                  type: b,
                  fileID: -1,
                  line: 0,
                  message: c
                });
              }
            }
          });
        }
      }
      var e = function () {
        function b(a, b) {
          this._device = a;
          this._attributes = [];
          this._uniforms = [];
          this._samplers = [];
          this._errors = [];
          this._linked = false;
          this._vertSource = b.vert;
          this._fragSource = b.frag;
          this._glID = null;
          this._id = g++;
        }
        var c;
        var d;
        var k = b.prototype;
        k.link = function () {
          if (!this._linked) {
            var b = this._device._gl;
            if (!b.isContextLost()) {
              var k = j(b, b.VERTEX_SHADER, this._vertSource);
              var e = j(b, b.FRAGMENT_SHADER, this._fragSource);
              var i = b.createProgram();
              b.attachShader(i, k);
              b.attachShader(i, e);
              b.linkProgram(i);
              var n = false;
              var o = this._errors;
              if (!b.getShaderParameter(k, b.COMPILE_STATUS)) {
                h(o, "vs", b.getShaderInfoLog(k) || "");
                n = true;
              }
              if (!b.getShaderParameter(e, b.COMPILE_STATUS)) {
                h(o, "fs", b.getShaderInfoLog(e) || "");
                n = true;
              }
              b.deleteShader(k);
              b.deleteShader(e);
              if (n) {
                return o;
              }
              if (!b.getProgramParameter(i, b.LINK_STATUS)) {
                o.push({
                  info: "Failed to link shader program: " + b.getProgramInfoLog(i)
                });
                return o;
              }
              this._glID = i;
              for (var a = b.getProgramParameter(i, b.ACTIVE_ATTRIBUTES), c = 0; c < a; ++c) {
                var q = b.getActiveAttrib(i, c);
                var s = b.getAttribLocation(i, q.name);
                this._attributes.push({
                  name: q.name,
                  location: s,
                  type: q.type
                });
              }
              for (var t = b.getProgramParameter(i, b.ACTIVE_UNIFORMS), f = 0; f < t; ++f) {
                var w = b.getActiveUniform(i, f);
                var x = w.name;
                var y = b.getUniformLocation(i, x);
                var z = x.substr(x.length - 3) === "[0]";
                if (z) {
                  x = x.substr(0, x.length - 3);
                }
                var A = {
                  name: x,
                  location: y,
                  type: w.type,
                  size: z ? w.size : undefined
                };
                this._uniforms.push(A);
              }
              this._linked = true;
            }
          }
        };
        k.destroy = function () {
          this._device._gl.deleteProgram(this._glID);
          this._linked = false;
          this._glID = null;
          this._attributes = [];
          this._uniforms = [];
          this._samplers = [];
        };
        c = b;
        if (d = [{
          key: "id",
          get: function () {
            return this._id;
          }
        }]) {
          f(c.prototype, d);
        }
        Object.defineProperty(c, "prototype", {
          writable: false
        });
        return b;
      }();
      function j(a, b, c) {
        var d = a.createShader(b);
        a.shaderSource(d, c);
        a.compileShader(d);
        return d;
      }
      d.default = e;
      c.exports = d.default;
    }, {}],
    285: [function (a, b, c) {
      "use strict";
  
      c.__esModule = true;
      c.default = undefined;
      var d = function () {
        function a(a, b, c, d) {
          this._device = a;
          this._format = b;
          this._glID = a._gl.createRenderbuffer();
          this.update(c, d);
        }
        var b = a.prototype;
        b.update = function (a, b) {
          this._width = a;
          this._height = b;
          var c = this._device._gl;
          c.bindRenderbuffer(c.RENDERBUFFER, this._glID);
          c.renderbufferStorage(c.RENDERBUFFER, this._format, a, b);
          c.bindRenderbuffer(c.RENDERBUFFER, null);
        };
        b.destroy = function () {
          if (this._glID !== null) {
            var a = this._device._gl;
            a.bindRenderbuffer(a.RENDERBUFFER, null);
            a.deleteRenderbuffer(this._glID);
            this._glID = null;
          }
        };
        return a;
      }();
      c.default = d;
      b.exports = c.default;
    }, {}],
    286: [function (a, b, c) {
      "use strict";
  
      c.__esModule = true;
      c.default = undefined;
      var d = a("./enums");
      var e = {
        blend: false,
        blendSep: false,
        blendColor: 4294967295,
        blendEq: d.enums.BLEND_FUNC_ADD,
        blendAlphaEq: d.enums.BLEND_FUNC_ADD,
        blendSrc: d.enums.BLEND_ONE,
        blendDst: d.enums.BLEND_ZERO,
        blendSrcAlpha: d.enums.BLEND_ONE,
        blendDstAlpha: d.enums.BLEND_ZERO,
        depthTest: false,
        depthWrite: false,
        depthFunc: d.enums.DS_FUNC_LESS,
        stencilTest: false,
        stencilSep: false,
        stencilFuncFront: d.enums.DS_FUNC_ALWAYS,
        stencilRefFront: 0,
        stencilMaskFront: 255,
        stencilFailOpFront: d.enums.STENCIL_OP_KEEP,
        stencilZFailOpFront: d.enums.STENCIL_OP_KEEP,
        stencilZPassOpFront: d.enums.STENCIL_OP_KEEP,
        stencilWriteMaskFront: 255,
        stencilFuncBack: d.enums.DS_FUNC_ALWAYS,
        stencilRefBack: 0,
        stencilMaskBack: 255,
        stencilFailOpBack: d.enums.STENCIL_OP_KEEP,
        stencilZFailOpBack: d.enums.STENCIL_OP_KEEP,
        stencilZPassOpBack: d.enums.STENCIL_OP_KEEP,
        stencilWriteMaskBack: 255,
        cullMode: d.enums.CULL_BACK,
        primitiveType: d.enums.PT_TRIANGLES,
        maxStream: -1,
        vertexBuffers: [],
        vertexBufferOffsets: [],
        indexBuffer: null,
        maxTextureSlot: -1,
        textureUnits: [],
        program: null
      };
      var f = function () {
        function a(a) {
          this.vertexBuffers = Array(a._caps.maxVertexStreams);
          this.vertexBufferOffsets = Array(a._caps.maxVertexStreams);
          this.textureUnits = Array(a._caps.maxTextureUnits);
          this.set(e);
        }
        a.initDefault = function (a) {
          e.vertexBuffers = Array(a._caps.maxVertexStreams);
          e.vertexBufferOffsets = Array(a._caps.maxVertexStreams);
          e.textureUnits = Array(a._caps.maxTextureUnits);
        };
        var b = a.prototype;
        b.reset = function () {
          this.set(e);
        };
        b.set = function (a) {
          this.blend = a.blend;
          this.blendSep = a.blendSep;
          this.blendColor = a.blendColor;
          this.blendEq = a.blendEq;
          this.blendAlphaEq = a.blendAlphaEq;
          this.blendSrc = a.blendSrc;
          this.blendDst = a.blendDst;
          this.blendSrcAlpha = a.blendSrcAlpha;
          this.blendDstAlpha = a.blendDstAlpha;
          this.depthTest = a.depthTest;
          this.depthWrite = a.depthWrite;
          this.depthFunc = a.depthFunc;
          this.stencilTest = a.stencilTest;
          this.stencilSep = a.stencilSep;
          this.stencilFuncFront = a.stencilFuncFront;
          this.stencilRefFront = a.stencilRefFront;
          this.stencilMaskFront = a.stencilMaskFront;
          this.stencilFailOpFront = a.stencilFailOpFront;
          this.stencilZFailOpFront = a.stencilZFailOpFront;
          this.stencilZPassOpFront = a.stencilZPassOpFront;
          this.stencilWriteMaskFront = a.stencilWriteMaskFront;
          this.stencilFuncBack = a.stencilFuncBack;
          this.stencilRefBack = a.stencilRefBack;
          this.stencilMaskBack = a.stencilMaskBack;
          this.stencilFailOpBack = a.stencilFailOpBack;
          this.stencilZFailOpBack = a.stencilZFailOpBack;
          this.stencilZPassOpBack = a.stencilZPassOpBack;
          this.stencilWriteMaskBack = a.stencilWriteMaskBack;
          this.cullMode = a.cullMode;
          this.primitiveType = a.primitiveType;
          this.maxStream = a.maxStream;
          for (var b = 0; b < a.vertexBuffers.length; ++b) {
            this.vertexBuffers[b] = a.vertexBuffers[b];
          }
          for (var c = 0; c < a.vertexBufferOffsets.length; ++c) {
            this.vertexBufferOffsets[c] = a.vertexBufferOffsets[c];
          }
          this.indexBuffer = a.indexBuffer;
          this.maxTextureSlot = a.maxTextureSlot;
          for (var d = 0; d < a.textureUnits.length; ++d) {
            this.textureUnits[d] = a.textureUnits[d];
          }
          this.program = a.program;
        };
        return a;
      }();
      c.default = f;
      b.exports = c.default;
    }, {
      "./enums": 279
    }],
    287: [function (b, d, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var f;
      var g = (f = b("./texture")) && f.__esModule ? f : {
        default: f
      };
      var h = b("./enums");
      var j = b("./misc");
      function a(b, c) {
        return (a = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(b, c);
      }
      var i = function (b) {
        var c;
        var d;
        function f(a, c) {
          var d;
          var e = (d = b.call(this, a) || this)._device._gl;
          d._target = e.TEXTURE_2D;
          d._glID = e.createTexture();
          c.images = c.images || [null];
          d.update(c);
          return d;
        }
        d = b;
        (c = f).prototype = Object.create(d.prototype);
        c.prototype.constructor = c;
        a(c, d);
        var g = f.prototype;
        g.update = function (a) {
          var b = this._device._gl;
          var c = this._genMipmap;
          if (a) {
            if (a.width !== undefined) {
              this._width = a.width;
            }
            if (a.height !== undefined) {
              this._height = a.height;
            }
            if (a.anisotropy !== undefined) {
              this._anisotropy = a.anisotropy;
            }
            if (a.minFilter !== undefined) {
              this._minFilter = a.minFilter;
            }
            if (a.magFilter !== undefined) {
              this._magFilter = a.magFilter;
            }
            if (a.mipFilter !== undefined) {
              this._mipFilter = a.mipFilter;
            }
            if (a.wrapS !== undefined) {
              this._wrapS = a.wrapS;
            }
            if (a.wrapT !== undefined) {
              this._wrapT = a.wrapT;
            }
            if (a.format !== undefined) {
              this._format = a.format;
              this._compressed = this._format >= h.enums.TEXTURE_FMT_RGB_DXT1 && this._format <= h.enums.TEXTURE_FMT_RGBA_PVRTC_4BPPV1 || this._format >= h.enums.TEXTURE_FMT_RGB_ETC2 && this._format <= h.enums.TEXTURE_FMT_RGBA_ETC2 || this._format >= h.enums.TEXTURE_FMT_RGBA_ASTC_4X4 && this._format <= h.enums.TEXTURE_FMT_SRGBA_ASTC_12X12;
            }
            if (a.genMipmaps !== undefined) {
              this._genMipmap = a.genMipmaps;
              c = a.genMipmaps;
            }
            this._device.caps.maxTextureSize;
            a.width;
            a.height;
            if (a.images !== undefined && a.images.length > 1) {
              c = false;
              if (a.width > a.height) {
                a.width;
              } else {
                a.height;
              }
              a.images.length;
            }
          }
          if (!((0, j.isPow2)(this._width) && (0, j.isPow2)(this._height))) {
            c = false;
          }
          b.activeTexture(b.TEXTURE0);
          b.bindTexture(b.TEXTURE_2D, this._glID);
          if (a.images !== undefined && a.images.length > 0) {
            this._setMipmap(a.images, a.flipY, a.premultiplyAlpha);
            if (a.images.length > 1) {
              this._genMipmap = true;
            }
          }
          if (c) {
            b.hint(b.GENERATE_MIPMAP_HINT, b.NICEST);
            b.generateMipmap(b.TEXTURE_2D);
            this._genMipmap = true;
          }
          this._setTexInfo();
          this._device._restoreTexture(0);
        };
        g.updateSubImage = function (a) {
          var b = this._device._gl;
          var c = (0, h.glTextureFmt)(this._format);
          b.activeTexture(b.TEXTURE0);
          b.bindTexture(b.TEXTURE_2D, this._glID);
          this._setSubImage(c, a);
          this._device._restoreTexture(0);
        };
        g.updateImage = function (a) {
          var b = this._device._gl;
          var c = (0, h.glTextureFmt)(this._format);
          b.activeTexture(b.TEXTURE0);
          b.bindTexture(b.TEXTURE_2D, this._glID);
          this._setImage(c, a);
          this._device._restoreTexture(0);
        };
        g._setSubImage = function (a, b) {
          var c = this._device._gl;
          var d = b.flipY;
          var e = b.premultiplyAlpha;
          var f = b.image;
          if (!f || ArrayBuffer.isView(f) || f instanceof ArrayBuffer) {
            if (d === undefined) {
              c.pixelStorei(c.UNPACK_FLIP_Y_WEBGL, false);
            } else {
              c.pixelStorei(c.UNPACK_FLIP_Y_WEBGL, d);
            }
            if (e === undefined) {
              c.pixelStorei(c.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
            } else {
              c.pixelStorei(c.UNPACK_PREMULTIPLY_ALPHA_WEBGL, e);
            }
            if (this._compressed) {
              c.compressedTexSubImage2D(c.TEXTURE_2D, b.level, b.x, b.y, b.width, b.height, a.format, f);
            } else {
              c.texSubImage2D(c.TEXTURE_2D, b.level, b.x, b.y, b.width, b.height, a.format, a.pixelType, f);
            }
          } else {
            if (d === undefined) {
              c.pixelStorei(c.UNPACK_FLIP_Y_WEBGL, true);
            } else {
              c.pixelStorei(c.UNPACK_FLIP_Y_WEBGL, d);
            }
            if (e === undefined) {
              c.pixelStorei(c.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
            } else {
              c.pixelStorei(c.UNPACK_PREMULTIPLY_ALPHA_WEBGL, e);
            }
            c.texSubImage2D(c.TEXTURE_2D, b.level, b.x, b.y, a.format, a.pixelType, f);
          }
        };
        g._setImage = function (a, b) {
          var c = this._device._gl;
          var d = b.flipY;
          var e = b.premultiplyAlpha;
          var f = b.image;
          if (!f || ArrayBuffer.isView(f) || f instanceof ArrayBuffer) {
            if (d === undefined) {
              c.pixelStorei(c.UNPACK_FLIP_Y_WEBGL, false);
            } else {
              c.pixelStorei(c.UNPACK_FLIP_Y_WEBGL, d);
            }
            if (e === undefined) {
              c.pixelStorei(c.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
            } else {
              c.pixelStorei(c.UNPACK_PREMULTIPLY_ALPHA_WEBGL, e);
            }
            if (this._compressed) {
              c.compressedTexImage2D(c.TEXTURE_2D, b.level, a.internalFormat, b.width, b.height, 0, f);
            } else {
              c.texImage2D(c.TEXTURE_2D, b.level, a.internalFormat, b.width, b.height, 0, a.format, a.pixelType, f);
            }
          } else {
            if (d === undefined) {
              c.pixelStorei(c.UNPACK_FLIP_Y_WEBGL, true);
            } else {
              c.pixelStorei(c.UNPACK_FLIP_Y_WEBGL, d);
            }
            if (e === undefined) {
              c.pixelStorei(c.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
            } else {
              c.pixelStorei(c.UNPACK_PREMULTIPLY_ALPHA_WEBGL, e);
            }
            c.texImage2D(c.TEXTURE_2D, b.level, a.internalFormat, a.format, a.pixelType, f);
          }
        };
        g._setMipmap = function (b, c, d) {
          for (var e = (0, h.glTextureFmt)(this._format), f = {
              width: this._width,
              height: this._height,
              flipY: c,
              premultiplyAlpha: d,
              level: 0,
              image: null
            }, g = 0; g < b.length; ++g) {
            f.level = g;
            f.width = this._width >> g;
            f.height = this._height >> g;
            f.image = b[g];
            this._setImage(e, f);
          }
        };
        g._setTexInfo = function () {
          var a = this._device._gl;
          var b = (0, j.isPow2)(this._width) && (0, j.isPow2)(this._height);
          if (!(b || this._wrapS === h.enums.WRAP_CLAMP && this._wrapT === h.enums.WRAP_CLAMP)) {
            this._wrapS = h.enums.WRAP_CLAMP;
            this._wrapT = h.enums.WRAP_CLAMP;
          }
          var c = this._genMipmap ? this._mipFilter : -1;
          if (!(b || c === -1)) {
            c = -1;
          }
          a.texParameteri(a.TEXTURE_2D, a.TEXTURE_MIN_FILTER, (0, h.glFilter)(a, this._minFilter, c));
          a.texParameteri(a.TEXTURE_2D, a.TEXTURE_MAG_FILTER, (0, h.glFilter)(a, this._magFilter, -1));
          a.texParameteri(a.TEXTURE_2D, a.TEXTURE_WRAP_S, this._wrapS);
          a.texParameteri(a.TEXTURE_2D, a.TEXTURE_WRAP_T, this._wrapT);
          var d = this._device.ext("EXT_texture_filter_anisotropic");
          if (d) {
            a.texParameteri(a.TEXTURE_2D, d.TEXTURE_MAX_ANISOTROPY_EXT, this._anisotropy);
          }
        };
        return f;
      }(g.default);
      e.default = i;
      d.exports = e.default;
    }, {
      "./enums": 279,
      "./misc": 283,
      "./texture": 289
    }],
    288: [function (b, d, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var f;
      var g = (f = b("./texture")) && f.__esModule ? f : {
        default: f
      };
      var h = b("./enums");
      var j = b("./misc");
      function a(b, c) {
        return (a = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(b, c);
      }
      var i = function (b) {
        var c;
        var d;
        function f(a, c) {
          var d;
          var e = (d = b.call(this, a) || this)._device._gl;
          d._target = e.TEXTURE_CUBE_MAP;
          d._glID = e.createTexture();
          d.update(c);
          return d;
        }
        d = b;
        (c = f).prototype = Object.create(d.prototype);
        c.prototype.constructor = c;
        a(c, d);
        var g = f.prototype;
        g.update = function (a) {
          var b = this._device._gl;
          var c = this._genMipmaps;
          if (a) {
            if (a.width !== undefined) {
              this._width = a.width;
            }
            if (a.height !== undefined) {
              this._height = a.height;
            }
            if (a.anisotropy !== undefined) {
              this._anisotropy = a.anisotropy;
            }
            if (a.minFilter !== undefined) {
              this._minFilter = a.minFilter;
            }
            if (a.magFilter !== undefined) {
              this._magFilter = a.magFilter;
            }
            if (a.mipFilter !== undefined) {
              this._mipFilter = a.mipFilter;
            }
            if (a.wrapS !== undefined) {
              this._wrapS = a.wrapS;
            }
            if (a.wrapT !== undefined) {
              this._wrapT = a.wrapT;
            }
            if (a.format !== undefined) {
              this._format = a.format;
              this._compressed = this._format >= h.enums.TEXTURE_FMT_RGB_DXT1 && this._format <= h.enums.TEXTURE_FMT_RGBA_PVRTC_4BPPV1 || this._format >= h.enums.TEXTURE_FMT_RGB_ETC2 && this._format <= h.enums.TEXTURE_FMT_RGBA_ETC2 || this._format >= h.enums.TEXTURE_FMT_RGBA_ASTC_4X4 && this._format <= h.enums.TEXTURE_FMT_SRGBA_ASTC_12X12;
            }
            if (a.genMipmaps !== undefined) {
              this._genMipmaps = a.genMipmaps;
              c = a.genMipmaps;
            }
            if (a.images !== undefined && a.images.length > 1) {
              c = false;
              a.width;
              a.height;
              a.width;
              a.images.length;
            }
          }
          if (!((0, j.isPow2)(this._width) && (0, j.isPow2)(this._height))) {
            c = false;
          }
          b.activeTexture(b.TEXTURE0);
          b.bindTexture(b.TEXTURE_CUBE_MAP, this._glID);
          if (a.images !== undefined && a.images.length > 0) {
            this._setMipmap(a.images, a.flipY, a.premultiplyAlpha);
            if (a.images.length > 1) {
              this._genMipmaps = true;
            }
          }
          if (c) {
            b.hint(b.GENERATE_MIPMAP_HINT, b.NICEST);
            b.generateMipmap(b.TEXTURE_CUBE_MAP);
            this._genMipmaps = true;
          }
          this._setTexInfo();
          this._device._restoreTexture(0);
        };
        g.updateSubImage = function (a) {
          var b = this._device._gl;
          var c = (0, h.glTextureFmt)(this._format);
          b.activeTexture(b.TEXTURE0);
          b.bindTexture(b.TEXTURE_CUBE_MAP, this._glID);
          this._setSubImage(c, a);
          this._device._restoreTexture(0);
        };
        g.updateImage = function (a) {
          var b = this._device._gl;
          var c = (0, h.glTextureFmt)(this._format);
          b.activeTexture(b.TEXTURE0);
          b.bindTexture(b.TEXTURE_CUBE_MAP, this._glID);
          this._setImage(c, a);
          this._device._restoreTexture(0);
        };
        g._setSubImage = function (b, c) {
          var d = this._device._gl;
          var e = c.flipY;
          var f = c.premultiplyAlpha;
          var g = c.faceIndex;
          var h = c.image;
          if (e === undefined) {
            d.pixelStorei(d.UNPACK_FLIP_Y_WEBGL, false);
          } else {
            d.pixelStorei(d.UNPACK_FLIP_Y_WEBGL, e);
          }
          if (f === undefined) {
            d.pixelStorei(d.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
          } else {
            d.pixelStorei(d.UNPACK_PREMULTIPLY_ALPHA_WEBGL, f);
          }
          if (!h || ArrayBuffer.isView(h) || h instanceof ArrayBuffer) {
            if (this._compressed) {
              d.compressedTexSubImage2D(d.TEXTURE_CUBE_MAP_POSITIVE_X + g, c.level, c.x, c.y, c.width, c.height, b.format, h);
            } else {
              d.texSubImage2D(d.TEXTURE_CUBE_MAP_POSITIVE_X + g, c.level, c.x, c.y, c.width, c.height, b.format, b.pixelType, h);
            }
          } else {
            d.texSubImage2D(d.TEXTURE_CUBE_MAP_POSITIVE_X + g, c.level, c.x, c.y, b.format, b.pixelType, h);
          }
        };
        g._setImage = function (b, c) {
          var d = this._device._gl;
          var e = c.flipY;
          var f = c.premultiplyAlpha;
          var g = c.faceIndex;
          var h = c.image;
          if (e === undefined) {
            d.pixelStorei(d.UNPACK_FLIP_Y_WEBGL, false);
          } else {
            d.pixelStorei(d.UNPACK_FLIP_Y_WEBGL, e);
          }
          if (f === undefined) {
            d.pixelStorei(d.UNPACK_PREMULTIPLY_ALPHA_WEBGL, false);
          } else {
            d.pixelStorei(d.UNPACK_PREMULTIPLY_ALPHA_WEBGL, f);
          }
          if (!h || ArrayBuffer.isView(h) || h instanceof ArrayBuffer) {
            if (this._compressed) {
              d.compressedTexImage2D(d.TEXTURE_CUBE_MAP_POSITIVE_X + g, c.level, b.internalFormat, c.width, c.height, 0, h);
            } else {
              d.texImage2D(d.TEXTURE_CUBE_MAP_POSITIVE_X + g, c.level, b.internalFormat, c.width, c.height, 0, b.format, b.pixelType, h);
            }
          } else {
            d.texImage2D(d.TEXTURE_CUBE_MAP_POSITIVE_X + g, c.level, b.internalFormat, b.format, b.pixelType, h);
          }
        };
        g._setMipmap = function (b, d, e) {
          for (var f = (0, h.glTextureFmt)(this._format), g = {
              width: this._width,
              height: this._height,
              faceIndex: 0,
              flipY: d,
              premultiplyAlpha: e,
              level: 0,
              image: null
            }, i = 0; i < b.length; ++i) {
            var j = b[i];
            g.level = i;
            g.width = this._width >> i;
            g.height = this._height >> i;
            for (var k = 0; k < 6; ++k) {
              g.faceIndex = k;
              g.image = j[k];
              this._setImage(f, g);
            }
          }
        };
        g._setTexInfo = function () {
          var a = this._device._gl;
          var b = (0, j.isPow2)(this._width) && (0, j.isPow2)(this._height);
          if (!(b || this._wrapS === h.enums.WRAP_CLAMP && this._wrapT === h.enums.WRAP_CLAMP)) {
            this._wrapS = h.enums.WRAP_CLAMP;
            this._wrapT = h.enums.WRAP_CLAMP;
          }
          var c = this._genMipmaps ? this._mipFilter : -1;
          if (!(b || c === -1)) {
            c = -1;
          }
          a.texParameteri(a.TEXTURE_CUBE_MAP, a.TEXTURE_MIN_FILTER, (0, h.glFilter)(a, this._minFilter, c));
          a.texParameteri(a.TEXTURE_CUBE_MAP, a.TEXTURE_MAG_FILTER, (0, h.glFilter)(a, this._magFilter, -1));
          a.texParameteri(a.TEXTURE_CUBE_MAP, a.TEXTURE_WRAP_S, this._wrapS);
          a.texParameteri(a.TEXTURE_CUBE_MAP, a.TEXTURE_WRAP_T, this._wrapT);
          var d = this._device.ext("EXT_texture_filter_anisotropic");
          if (d) {
            a.texParameteri(a.TEXTURE_CUBE_MAP, d.TEXTURE_MAX_ANISOTROPY_EXT, this._anisotropy);
          }
        };
        return f;
      }(g.default);
      e.default = i;
      d.exports = e.default;
    }, {
      "./enums": 279,
      "./misc": 283,
      "./texture": 289
    }],
    289: [function (a, b, c) {
      "use strict";
  
      c.__esModule = true;
      c.default = undefined;
      var d = a("./enums");
      var e = 0;
      var f = function () {
        function a(a) {
          this._device = a;
          this._width = 4;
          this._height = 4;
          this._genMipmaps = false;
          this._compressed = false;
          this._anisotropy = 1;
          this._minFilter = d.enums.FILTER_LINEAR;
          this._magFilter = d.enums.FILTER_LINEAR;
          this._mipFilter = d.enums.FILTER_LINEAR;
          this._wrapS = d.enums.WRAP_REPEAT;
          this._wrapT = d.enums.WRAP_REPEAT;
          this._format = d.enums.TEXTURE_FMT_RGBA8;
          this._target = -1;
          this._id = e++;
        }
        a.prototype.destroy = function () {
          if (this._glID !== null) {
            this._device._gl.deleteTexture(this._glID);
            this._device._stats.tex -= this.bytes;
            this._glID = null;
          }
        };
        return a;
      }();
      c.default = f;
      b.exports = c.default;
    }, {
      "./enums": 279
    }],
    290: [function (a, b, c) {
      "use strict";
  
      function d(a, b) {
        for (var c = 0; c < b.length; c++) {
          var d = b[c];
          d.enumerable = d.enumerable || false;
          d.configurable = true;
          if ("value" in d) {
            d.writable = true;
          }
          Object.defineProperty(a, d.key, d);
        }
      }
      c.__esModule = true;
      c.default = undefined;
      a("./enums");
      var e = function () {
        function a(a, b, c, d) {
          this._device = a;
          this._format = b;
          this._usage = c;
          this._bytesPerVertex = this._format._bytes;
          this._bytes = d.byteLength;
          this._numVertices = this._bytes / this._bytesPerVertex;
          this._needExpandDataStore = true;
          this._glID = a._gl.createBuffer();
          this.update(0, d);
          a._stats.vb += this._bytes;
        }
        var b;
        var c;
        var f = a.prototype;
        f.destroy = function () {
          if (this._glID !== -1) {
            this._device._gl.deleteBuffer(this._glID);
            this._device._stats.vb -= this.bytes;
            this._glID = -1;
          }
        };
        f.update = function (a, b) {
          if (this._glID !== -1 && b.byteLength !== 0) {
            if (a + b.byteLength > this._bytes) {
              if (a) {
                return;
              }
              this._needExpandDataStore = true;
              this._bytes = a + b.byteLength;
              this._numVertices = this._bytes / this._bytesPerVertex;
            }
            var c = this._device._gl;
            var d = this._usage;
            c.bindBuffer(c.ARRAY_BUFFER, this._glID);
            if (this._needExpandDataStore) {
              c.bufferData(c.ARRAY_BUFFER, b, d);
              this._needExpandDataStore = false;
            } else {
              c.bufferSubData(c.ARRAY_BUFFER, a, b);
            }
            c.bindBuffer(c.ARRAY_BUFFER, null);
          }
        };
        f.getFormat = function (a) {
          return this._format.element(a);
        };
        f.setUsage = function (a) {
          this._usage = a;
        };
        b = a;
        if (c = [{
          key: "count",
          get: function () {
            return this._numVertices;
          }
        }]) {
          d(b.prototype, c);
        }
        Object.defineProperty(b, "prototype", {
          writable: false
        });
        return a;
      }();
      c.default = e;
      b.exports = c.default;
    }, {
      "./enums": 279
    }],
    291: [function (b, c, d) {
      "use strict";
  
      d.__esModule = true;
      d.default = undefined;
      var e;
      var f = b("./enums");
      var g = (e = b("../murmurhash2_gc")) && e.__esModule ? e : {
        default: e
      };
      var h = function () {
        function a(b) {
          this._attr2el = {};
          this._elements = [];
          this._bytes = 0;
          for (var d = "", h = 0, j = b.length; h < j; ++h) {
            var k = b[h];
            var m = {
              name: k.name,
              offset: this._bytes,
              stride: 0,
              stream: -1,
              type: k.type,
              num: k.num,
              normalize: k.normalize !== undefined && k.normalize,
              bytes: k.num * (0, f.attrTypeBytes)(k.type)
            };
            this._attr2el[m.name] = m;
            this._elements.push(m);
            this._bytes += m.bytes;
            d += m.name + ":" + m.num + ":" + m.type + ":" + m.normalize;
          }
          for (var n = 0, p = this._elements.length; n < p; ++n) {
            this._elements[n].stride = this._bytes;
          }
          this._hash = (0, g.default)(d, 666);
        }
        var b = a.prototype;
        b.element = function (a) {
          return this._attr2el[a];
        };
        b.getHash = function () {
          return this._hash;
        };
        return a;
      }();
      d.default = h;
      c.exports = d.default;
    }, {
      "../murmurhash2_gc": 300,
      "./enums": 279
    }],
    292: [function (a, b, c) {
      "use strict";
  
      c.__esModule = true;
      c.default = undefined;
      var d = function () {
        function a(a, b) {
          this._cursor = 0;
          this._data = Array(b);
          for (var c = 0; c < b; ++c) {
            this._data[c] = a();
          }
        }
        a.prototype.request = function () {
          var a = this._data[this._cursor];
          this._cursor = (this._cursor + 1) % this._data.length;
          return a;
        };
        return a;
      }();
      c.default = d;
      b.exports = c.default;
    }, {}],
    293: [function (b, c, d) {
      "use strict";
  
      d.__esModule = true;
      d.default = undefined;
      var e;
      var f = (e = b("./timsort")) && e.__esModule ? e : {
        default: e
      };
      function g(a, b) {
        for (var c = 0; c < b.length; c++) {
          var d = b[c];
          d.enumerable = d.enumerable || false;
          d.configurable = true;
          if ("value" in d) {
            d.writable = true;
          }
          Object.defineProperty(a, d.key, d);
        }
      }
      var h = function () {
        function a(a) {
          this._count = 0;
          this._data = Array(a);
        }
        var b;
        var c;
        var d = a.prototype;
        d._resize = function (a) {
          if (a > this._data.length) {
            for (var b = this._data.length; b < a; ++b) {
              this._data[b] = undefined;
            }
          }
        };
        d.reset = function () {
          for (var a = 0; a < this._count; ++a) {
            this._data[a] = undefined;
          }
          this._count = 0;
        };
        d.push = function (a) {
          if (this._count >= this._data.length) {
            this._resize(this._data.length * 2);
          }
          this._data[this._count] = a;
          ++this._count;
        };
        d.pop = function () {
          --this._count;
          if (this._count < 0) {
            this._count = 0;
          }
          var a = this._data[this._count];
          this._data[this._count] = undefined;
          return a;
        };
        d.fastRemove = function (a) {
          if (!(a >= this._count || a < 0)) {
            var b = this._count - 1;
            this._data[a] = this._data[b];
            this._data[b] = undefined;
            this._count -= 1;
          }
        };
        d.indexOf = function (a) {
          return this._data.indexOf(a);
        };
        d.sort = function (a) {
          return (0, f.default)(this._data, 0, this._count, a);
        };
        b = a;
        if (c = [{
          key: "length",
          get: function () {
            return this._count;
          }
        }, {
          key: "data",
          get: function () {
            return this._data;
          }
        }]) {
          g(b.prototype, c);
        }
        Object.defineProperty(b, "prototype", {
          writable: false
        });
        return a;
      }();
      d.default = h;
      c.exports = d.default;
    }, {
      "./timsort": 298
    }],
    294: [function (b, d, e) {
      "use strict";
  
      e.__esModule = true;
      e.TypedArrayPool = e.RecyclePool = e.Pool = e.LinkedArray = e.FixedArray = e.CircularPool = undefined;
      var f = c(b("./circular-pool"));
      e.CircularPool = f.default;
      var g = c(b("./fixed-array"));
      e.FixedArray = g.default;
      var h = c(b("./linked-array"));
      e.LinkedArray = h.default;
      var i = c(b("./pool"));
      e.Pool = i.default;
      var a = c(b("./recycle-pool"));
      e.RecyclePool = a.default;
      var j = c(b("./typed-array-pool"));
      function c(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      e.TypedArrayPool = j.default;
    }, {
      "./circular-pool": 292,
      "./fixed-array": 293,
      "./linked-array": 295,
      "./pool": 296,
      "./recycle-pool": 297,
      "./typed-array-pool": 299
    }],
    295: [function (b, c, d) {
      "use strict";
  
      d.__esModule = true;
      d.default = undefined;
      var e;
      var f = (e = b("./pool")) && e.__esModule ? e : {
        default: e
      };
      function g(a, b) {
        for (var c = 0; c < b.length; c++) {
          var d = b[c];
          d.enumerable = d.enumerable || false;
          d.configurable = true;
          if ("value" in d) {
            d.writable = true;
          }
          Object.defineProperty(a, d.key, d);
        }
      }
      var h = function () {
        function a(a, b) {
          this._fn = a;
          this._count = 0;
          this._head = null;
          this._tail = null;
          this._pool = new f.default(a, b);
        }
        var b;
        var c;
        var d = a.prototype;
        d.add = function () {
          var a = this._pool.alloc();
          if (this._tail) {
            this._tail._next = a;
            a._prev = this._tail;
          } else {
            this._head = a;
          }
          this._tail = a;
          this._count += 1;
          return a;
        };
        d.remove = function (a) {
          if (a._prev) {
            a._prev._next = a._next;
          } else {
            this._head = a._next;
          }
          if (a._next) {
            a._next._prev = a._prev;
          } else {
            this._tail = a._prev;
          }
          a._next = null;
          a._prev = null;
          this._pool.free(a);
          this._count -= 1;
        };
        d.forEach = function (a, b) {
          var c = this._head;
          if (c) {
            if (b) {
              a = a.bind(b);
            }
            for (var d = 0, e = c; c;) {
              e = c._next;
              a(c, d, this);
              c = e;
              ++d;
            }
          }
        };
        b = a;
        if (c = [{
          key: "head",
          get: function () {
            return this._head;
          }
        }, {
          key: "tail",
          get: function () {
            return this._tail;
          }
        }, {
          key: "length",
          get: function () {
            return this._count;
          }
        }]) {
          g(b.prototype, c);
        }
        Object.defineProperty(b, "prototype", {
          writable: false
        });
        return a;
      }();
      d.default = h;
      c.exports = d.default;
    }, {
      "./pool": 296
    }],
    296: [function (a, b, c) {
      "use strict";
  
      c.__esModule = true;
      c.default = undefined;
      var d = function () {
        function a(a, b) {
          this._fn = a;
          this._idx = b - 1;
          this._frees = Array(b);
          for (var c = 0; c < b; ++c) {
            this._frees[c] = a();
          }
        }
        var b = a.prototype;
        b._expand = function (a) {
          var b = this._frees;
          this._frees = Array(a);
          for (var c = a - b.length, d = 0; d < c; ++d) {
            this._frees[d] = this._fn();
          }
          for (var e = c, f = 0; e < a; ++e, ++f) {
            this._frees[e] = b[f];
          }
          this._idx += c;
        };
        b.alloc = function () {
          if (this._idx < 0) {
            this._expand(Math.round(this._frees.length * 1.2) + 1);
          }
          var a = this._frees[this._idx];
          this._frees[this._idx] = null;
          --this._idx;
          return a;
        };
        b.free = function (a) {
          ++this._idx;
          this._frees[this._idx] = a;
        };
        b.clear = function (a) {
          for (var b = 0; b <= this._idx; b++) {
            if (a) {
              a(this._frees[b]);
            }
          }
          this._frees.length = 0;
          this._idx = -1;
        };
        return a;
      }();
      c.default = d;
      b.exports = c.default;
    }, {}],
    297: [function (b, c, d) {
      "use strict";
  
      d.__esModule = true;
      d.default = undefined;
      var e;
      var f = (e = b("./timsort")) && e.__esModule ? e : {
        default: e
      };
      function g(a, b) {
        for (var c = 0; c < b.length; c++) {
          var d = b[c];
          d.enumerable = d.enumerable || false;
          d.configurable = true;
          if ("value" in d) {
            d.writable = true;
          }
          Object.defineProperty(a, d.key, d);
        }
      }
      var h = function () {
        function a(a, b) {
          this._fn = a;
          this._count = 0;
          this._data = Array(b);
          for (var c = 0; c < b; ++c) {
            this._data[c] = a();
          }
        }
        var b;
        var c;
        var d = a.prototype;
        d.reset = function () {
          this._count = 0;
        };
        d.resize = function (a) {
          if (a > this._data.length) {
            for (var b = this._data.length; b < a; ++b) {
              this._data[b] = this._fn();
            }
          }
        };
        d.add = function () {
          if (this._count >= this._data.length) {
            this.resize(this._data.length * 2);
          }
          return this._data[this._count++];
        };
        d.remove = function (a) {
          if (!(a >= this._count)) {
            var b = this._count - 1;
            var c = this._data[a];
            this._data[a] = this._data[b];
            this._data[b] = c;
            this._count -= 1;
          }
        };
        d.sort = function (a) {
          return (0, f.default)(this._data, 0, this._count, a);
        };
        b = a;
        if (c = [{
          key: "length",
          get: function () {
            return this._count;
          }
        }, {
          key: "data",
          get: function () {
            return this._data;
          }
        }]) {
          g(b.prototype, c);
        }
        Object.defineProperty(b, "prototype", {
          writable: false
        });
        return a;
      }();
      d.default = h;
      cc.RecyclePool = h;
      c.exports = d.default;
    }, {
      "./timsort": 298
    }],
    298: [function (b, g, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = function (b, g, h, k) {
        if (!Array.isArray(b)) {
          throw new TypeError(cc.debug.getError(665905));
        }
        if (g === undefined) {
          g = 0;
        }
        if (h === undefined) {
          h = b.length;
        }
        if (k === undefined) {
          k = n;
        }
        var m = h - g;
        if (!(m < 2)) {
          var p = 0;
          if (m < j) {
            o(b, g, h, g + (p = l(b, g, h, k)), k);
            return;
          }
          var q = new f(b, k);
          var t = c(m);
          do {
            if ((p = l(b, g, h, k)) < t) {
              var u = m;
              if (u > t) {
                u = t;
              }
              o(b, g, g + u, g + p, k);
              p = u;
            }
            q.pushRun(g, p);
            q.mergeRuns();
            m -= p;
            g += p;
          } while (m !== 0);
          q.forceMergeRuns();
        }
      };
      var j = 32;
      var i = 7;
      var k = 256;
      var m = [1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000];
      function a(a) {
        if (a < 100000) {
          if (a < 100) {
            if (a < 10) {
              return 0;
            } else {
              return 1;
            }
          } else if (a < 10000) {
            if (a < 1000) {
              return 2;
            } else {
              return 3;
            }
          } else {
            return 4;
          }
        } else if (a < 10000000) {
          if (a < 1000000) {
            return 5;
          } else {
            return 6;
          }
        } else if (a < 1000000000) {
          if (a < 100000000) {
            return 7;
          } else {
            return 8;
          }
        } else {
          return 9;
        }
      }
      function n(b, d) {
        if (b === d) {
          return 0;
        }
        if (~~b === b && ~~d === d) {
          if (b === 0 || d === 0) {
            if (b < d) {
              return -1;
            } else {
              return 1;
            }
          }
          if (b < 0 || d < 0) {
            if (d >= 0) {
              return -1;
            }
            if (b >= 0) {
              return 1;
            }
            b = -b;
            d = -d;
          }
          var f = a(b);
          var g = a(d);
          var h = 0;
          if (f < g) {
            b *= m[g - f - 1];
            d /= 10;
            h = -1;
          } else if (f > g) {
            d *= m[f - g - 1];
            b /= 10;
            h = 1;
          }
          if (b === d) {
            return h;
          } else if (b < d) {
            return -1;
          } else {
            return 1;
          }
        }
        var i = b + "";
        var j = d + "";
        if (i === j) {
          return 0;
        } else if (i < j) {
          return -1;
        } else {
          return 1;
        }
      }
      function c(a) {
        for (var b = 0; a >= j;) {
          b |= a & 1;
          a >>= 1;
        }
        return a + b;
      }
      function l(a, b, c, d) {
        var e = b + 1;
        if (e === c) {
          return 1;
        }
        if (d(a[e++], a[b]) < 0) {
          for (; e < c && d(a[e], a[e - 1]) < 0;) {
            e++;
          }
          h(a, b, e);
        } else {
          for (; e < c && d(a[e], a[e - 1]) >= 0;) {
            e++;
          }
        }
        return e - b;
      }
      function h(a, b, c) {
        for (c--; b < c;) {
          var d = a[b];
          a[b++] = a[c];
          a[c--] = d;
        }
      }
      function o(b, d, e, f, g) {
        for (f === d && f++; f < e; f++) {
          for (var h = b[f], i = d, j = f; i < j;) {
            var k = i + j >>> 1;
            if (g(h, b[k]) < 0) {
              j = k;
            } else {
              i = k + 1;
            }
          }
          var m = f - i;
          switch (m) {
            case 3:
              b[i + 3] = b[i + 2];
            case 2:
              b[i + 2] = b[i + 1];
            case 1:
              b[i + 1] = b[i];
              break;
            default:
              for (; m > 0;) {
                b[i + m] = b[i + m - 1];
                m--;
              }
          }
          b[i] = h;
        }
      }
      function q(b, d, e, f, g, i) {
        var j = 0;
        var k = 0;
        var m = 1;
        if (i(b, d[e + g]) > 0) {
          for (k = f - g; m < k && i(b, d[e + g + m]) > 0;) {
            j = m;
            if ((m = 1 + (m << 1)) <= 0) {
              m = k;
            }
          }
          if (m > k) {
            m = k;
          }
          j += g;
          m += g;
        } else {
          for (k = g + 1; m < k && i(b, d[e + g - m]) <= 0;) {
            j = m;
            if ((m = 1 + (m << 1)) <= 0) {
              m = k;
            }
          }
          if (m > k) {
            m = k;
          }
          var n = j;
          j = g - m;
          m = g - n;
        }
        for (j++; j < m;) {
          var l = j + (m - j >>> 1);
          if (i(b, d[e + l]) > 0) {
            j = l + 1;
          } else {
            m = l;
          }
        }
        return m;
      }
      function d(b, d, e, f, g, i) {
        var j = 0;
        var k = 0;
        var m = 1;
        if (i(b, d[e + g]) < 0) {
          for (k = g + 1; m < k && i(b, d[e + g - m]) < 0;) {
            j = m;
            if ((m = 1 + (m << 1)) <= 0) {
              m = k;
            }
          }
          if (m > k) {
            m = k;
          }
          var n = j;
          j = g - m;
          m = g - n;
        } else {
          for (k = f - g; m < k && i(b, d[e + g + m]) >= 0;) {
            j = m;
            if ((m = 1 + (m << 1)) <= 0) {
              m = k;
            }
          }
          if (m > k) {
            m = k;
          }
          j += g;
          m += g;
        }
        for (j++; j < m;) {
          var l = j + (m - j >>> 1);
          if (i(b, d[e + l]) < 0) {
            m = l;
          } else {
            j = l + 1;
          }
        }
        return m;
      }
      var f = function () {
        function a(a, b) {
          this.array = a;
          this.compare = b;
          this.minGallop = i;
          this.length = a.length;
          this.tmpStorageLength = k;
          if (this.length < k * 2) {
            this.tmpStorageLength = this.length >>> 1;
          }
          this.tmp = Array(this.tmpStorageLength);
          this.stackLength = this.length < 120 ? 5 : this.length < 1542 ? 10 : this.length < 119151 ? 19 : 40;
          this.runStart = Array(this.stackLength);
          this.runLength = Array(this.stackLength);
          this.stackSize = 0;
        }
        var b = a.prototype;
        b.pushRun = function (a, b) {
          this.runStart[this.stackSize] = a;
          this.runLength[this.stackSize] = b;
          this.stackSize += 1;
        };
        b.mergeRuns = function () {
          for (; this.stackSize > 1;) {
            var a = this.stackSize - 2;
            if (a >= 1 && this.runLength[a - 1] <= this.runLength[a] + this.runLength[a + 1] || a >= 2 && this.runLength[a - 2] <= this.runLength[a] + this.runLength[a - 1]) {
              if (this.runLength[a - 1] < this.runLength[a + 1]) {
                a--;
              }
            } else if (this.runLength[a] > this.runLength[a + 1]) {
              break;
            }
            this.mergeAt(a);
          }
        };
        b.forceMergeRuns = function () {
          for (; this.stackSize > 1;) {
            var a = this.stackSize - 2;
            if (a > 0 && this.runLength[a - 1] < this.runLength[a + 1]) {
              a--;
            }
            this.mergeAt(a);
          }
        };
        b.mergeAt = function (b) {
          var c = this.compare;
          var e = this.array;
          var f = this.runStart[b];
          var g = this.runLength[b];
          var h = this.runStart[b + 1];
          var i = this.runLength[b + 1];
          this.runLength[b] = g + i;
          if (b === this.stackSize - 3) {
            this.runStart[b + 1] = this.runStart[b + 2];
            this.runLength[b + 1] = this.runLength[b + 2];
          }
          this.stackSize--;
          var j = d(e[h], e, f, g, 0, c);
          f += j;
          if ((g -= j) != 0 && (i = q(e[f + g - 1], e, h, i, i - 1, c)) !== 0) {
            if (g <= i) {
              this.mergeLow(f, g, h, i);
            } else {
              this.mergeHigh(f, g, h, i);
            }
          }
        };
        b.mergeLow = function (b, j, k, m) {
          var r = this.compare;
          var s = this.array;
          var a = this.tmp;
          var o = 0;
          for (o = 0; o < j; o++) {
            a[o] = s[b + o];
          }
          var t = 0;
          var w = k;
          var x = b;
          s[x++] = s[w++];
          if (--m != 0) {
            if (j !== 1) {
              for (var y = this.minGallop;;) {
                var z = 0;
                var A = 0;
                var B = false;
                do {
                  if (r(s[w], a[t]) < 0) {
                    s[x++] = s[w++];
                    A++;
                    z = 0;
                    if (--m == 0) {
                      B = true;
                      break;
                    }
                  } else {
                    s[x++] = a[t++];
                    z++;
                    A = 0;
                    if (--j == 1) {
                      B = true;
                      break;
                    }
                  }
                } while ((z | A) < y);
                if (B) {
                  break;
                }
                do {
                  if ((z = d(s[w], a, t, j, 0, r)) !== 0) {
                    for (o = 0; o < z; o++) {
                      s[x + o] = a[t + o];
                    }
                    x += z;
                    t += z;
                    if ((j -= z) <= 1) {
                      B = true;
                      break;
                    }
                  }
                  s[x++] = s[w++];
                  if (--m == 0) {
                    B = true;
                    break;
                  }
                  if ((A = q(a[t], s, w, m, 0, r)) !== 0) {
                    for (o = 0; o < A; o++) {
                      s[x + o] = s[w + o];
                    }
                    x += A;
                    w += A;
                    if ((m -= A) == 0) {
                      B = true;
                      break;
                    }
                  }
                  s[x++] = a[t++];
                  if (--j == 1) {
                    B = true;
                    break;
                  }
                  y--;
                } while (z >= i || A >= i);
                if (B) {
                  break;
                }
                if (y < 0) {
                  y = 0;
                }
                y += 2;
              }
              this.minGallop = y;
              if (y < 1) {
                this.minGallop = 1;
              }
              if (j === 1) {
                for (o = 0; o < m; o++) {
                  s[x + o] = s[w + o];
                }
                s[x + m] = a[t];
              } else {
                if (j === 0) {
                  throw Error(cc.debug.getError(665903));
                }
                for (o = 0; o < j; o++) {
                  s[x + o] = a[t + o];
                }
              }
            } else {
              for (o = 0; o < m; o++) {
                s[x + o] = s[w + o];
              }
              s[x + m] = a[t];
            }
          } else {
            for (o = 0; o < j; o++) {
              s[x + o] = a[t + o];
            }
          }
        };
        b.mergeHigh = function (b, j, k, r) {
          var t = this.compare;
          var s = this.array;
          var a = this.tmp;
          var o = 0;
          for (o = 0; o < r; o++) {
            a[o] = s[k + o];
          }
          var w = b + j - 1;
          var x = r - 1;
          var z = k + r - 1;
          var A = 0;
          var B = 0;
          s[z--] = s[w--];
          if (--j != 0) {
            if (r !== 1) {
              for (var C = this.minGallop;;) {
                var D = 0;
                var E = 0;
                var F = false;
                do {
                  if (t(a[x], s[w]) < 0) {
                    s[z--] = s[w--];
                    D++;
                    E = 0;
                    if (--j == 0) {
                      F = true;
                      break;
                    }
                  } else {
                    s[z--] = a[x--];
                    E++;
                    D = 0;
                    if (--r == 1) {
                      F = true;
                      break;
                    }
                  }
                } while ((D | E) < C);
                if (F) {
                  break;
                }
                do {
                  if ((D = j - d(a[x], s, b, j, j - 1, t)) != 0) {
                    j -= D;
                    B = 1 + (z -= D);
                    A = 1 + (w -= D);
                    o = D - 1;
                    for (; o >= 0; o--) {
                      s[B + o] = s[A + o];
                    }
                    if (j === 0) {
                      F = true;
                      break;
                    }
                  }
                  s[z--] = a[x--];
                  if (--r == 1) {
                    F = true;
                    break;
                  }
                  if ((E = r - q(s[w], a, 0, r, r - 1, t)) != 0) {
                    r -= E;
                    B = 1 + (z -= E);
                    A = 1 + (x -= E);
                    o = 0;
                    for (; o < E; o++) {
                      s[B + o] = a[A + o];
                    }
                    if (r <= 1) {
                      F = true;
                      break;
                    }
                  }
                  s[z--] = s[w--];
                  if (--j == 0) {
                    F = true;
                    break;
                  }
                  C--;
                } while (D >= i || E >= i);
                if (F) {
                  break;
                }
                if (C < 0) {
                  C = 0;
                }
                C += 2;
              }
              this.minGallop = C;
              if (C < 1) {
                this.minGallop = 1;
              }
              if (r === 1) {
                B = 1 + (z -= j);
                A = 1 + (w -= j);
                o = j - 1;
                for (; o >= 0; o--) {
                  s[B + o] = s[A + o];
                }
                s[z] = a[x];
              } else {
                if (r === 0) {
                  throw Error(cc.debug.getError(665904));
                }
                A = z - (r - 1);
                o = 0;
                for (; o < r; o++) {
                  s[A + o] = a[o];
                }
              }
            } else {
              B = 1 + (z -= j);
              A = 1 + (w -= j);
              o = j - 1;
              for (; o >= 0; o--) {
                s[B + o] = s[A + o];
              }
              s[z] = a[x];
            }
          } else {
            A = z - (r - 1);
            o = 0;
            A = z - (r - 1);
            o = 0;
            for (; o < r; o++) {
              s[A + o] = a[o];
            }
          }
        };
        return a;
      }();
      g.exports = e.default;
    }, {}],
    299: [function (b, d, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      for (var f = [,,,,,,,,], g = 0; g < 8; ++g) {
        f[g] = [];
      }
      function h(a) {
        for (var b = 16; b <= 1 << 28; b *= 16) {
          if (a <= b) {
            return b;
          }
        }
        return 0;
      }
      function j(a) {
        var b;
        var c;
        b = (a > 65535) << 4;
        b |= c = ((a >>>= b) > 255) << 3;
        b |= c = ((a >>>= c) > 15) << 2;
        return (b |= c = ((a >>>= c) > 3) << 1) | (a >>>= c) >> 1;
      }
      function a(a) {
        var b = h(a);
        var c = f[j(b) >> 2];
        if (c.length > 0) {
          return c.pop();
        } else {
          return new ArrayBuffer(b);
        }
      }
      var i = {
        alloc_int8: function (b) {
          var c = new Int8Array(a(b), 0, b);
          if (c.length !== b) {
            return c.subarray(0, b);
          } else {
            return c;
          }
        },
        alloc_uint8: function (b) {
          var c = new Uint8Array(a(b), 0, b);
          if (c.length !== b) {
            return c.subarray(0, b);
          } else {
            return c;
          }
        },
        alloc_int16: function (b) {
          var c = new Int16Array(a(b * 2), 0, b);
          if (c.length !== b) {
            return c.subarray(0, b);
          } else {
            return c;
          }
        },
        alloc_uint16: function (b) {
          var c = new Uint16Array(a(b * 2), 0, b);
          if (c.length !== b) {
            return c.subarray(0, b);
          } else {
            return c;
          }
        },
        alloc_int32: function (b) {
          var c = new Int32Array(a(b * 4), 0, b);
          if (c.length !== b) {
            return c.subarray(0, b);
          } else {
            return c;
          }
        },
        alloc_uint32: function (b) {
          var c = new Uint32Array(a(b * 4), 0, b);
          if (c.length !== b) {
            return c.subarray(0, b);
          } else {
            return c;
          }
        },
        alloc_float32: function (b) {
          var c = new Float32Array(a(b * 4), 0, b);
          if (c.length !== b) {
            return c.subarray(0, b);
          } else {
            return c;
          }
        },
        alloc_float64: function (b) {
          var c = new Float64Array(a(b * 8), 0, b);
          if (c.length !== b) {
            return c.subarray(0, b);
          } else {
            return c;
          }
        },
        alloc_dataview: function (b) {
          var c = new DataView(a(b), 0, b);
          if (c.length !== b) {
            return c.subarray(0, b);
          } else {
            return c;
          }
        },
        free: function (a) {
          var b;
          b = a.buffer;
          f[j(b.byteLength) >> 2].push(b);
        },
        reset: function () {
          for (var a = [,,,,,,,,], b = 0; b < 8; ++b) {
            a[b] = [];
          }
        }
      };
      e.default = i;
      d.exports = e.default;
    }, {}],
    300: [function (a, b, c) {
      "use strict";
  
      c.__esModule = true;
      c.default = function (a, b) {
        for (var c, d = a.length, e = b ^ d, f = 0; d >= 4;) {
          c = ((c = a.charCodeAt(f) & 255 | (a.charCodeAt(++f) & 255) << 8 | (a.charCodeAt(++f) & 255) << 16 | (a.charCodeAt(++f) & 255) << 24) & 65535) * 1540483477 + (((c >>> 16) * 1540483477 & 65535) << 16);
          e = (e & 65535) * 1540483477 + (((e >>> 16) * 1540483477 & 65535) << 16) ^ (c = ((c ^= c >>> 24) & 65535) * 1540483477 + (((c >>> 16) * 1540483477 & 65535) << 16));
          d -= 4;
          ++f;
        }
        switch (d) {
          case 3:
            e ^= (a.charCodeAt(f + 2) & 255) << 16;
          case 2:
            e ^= (a.charCodeAt(f + 1) & 255) << 8;
          case 1:
            e = ((e ^= a.charCodeAt(f) & 255) & 65535) * 1540483477 + (((e >>> 16) * 1540483477 & 65535) << 16);
        }
        e = ((e ^= e >>> 13) & 65535) * 1540483477 + (((e >>> 16) * 1540483477 & 65535) << 16);
        return (e ^= e >>> 15) >>> 0;
      };
      b.exports = c.default;
    }, {}],
    301: [function (b, j, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var k = b("../../core/value-types");
      var i = a(b("../core/base-renderer"));
      var q = a(b("../enums"));
      var n = b("../memop");
      function a(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      function o(a) {
        if (a === undefined) {
          throw new ReferenceError("this hasn't been initialised - super() hasn't been called");
        }
        return a;
      }
      function c(a, b) {
        return (c = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      var s = new Float32Array(16);
      var h = new Float32Array(16);
      var u = new Float32Array(16);
      var f = new Float32Array(16);
      var d = new Float32Array(4);
      var w = new Float32Array(64);
      var p = [];
      var r = new Float32Array(4);
      var g = new k.Vec4(0, 0, 0, 0);
      var m = new k.Vec3(0, 0, 0);
      var t = new k.Vec3(0, 0, 0);
      var v = new n.RecyclePool(function () {
        return new Float32Array(16);
      }, 8);
      function y(a, b) {
        return a._priority - b._priority;
      }
      var z = function (b) {
        var j;
        var l;
        function n(a, c) {
          var d;
          (d = b.call(this, a, c) || this)._time = new Float32Array(4);
          d._lights = [];
          d._shadowLights = [];
          d._numLights = 0;
          d._defines = {};
          d._registerStage("shadowcast", d._shadowStage.bind(o(d)));
          d._registerStage("opaque", d._opaqueStage.bind(o(d)));
          d._registerStage("transparent", d._transparentStage.bind(o(d)));
          return d;
        }
        l = b;
        (j = n).prototype = Object.create(l.prototype);
        j.prototype.constructor = j;
        c(j, l);
        var x = n.prototype;
        x.reset = function () {
          v.reset();
          b.prototype.reset.call(this);
        };
        x.render = function (b, d) {
          this.reset();
          if (d) {
            this._time[0] += d;
            this._time[1] = d;
            this._time[2]++;
          }
          this._device.setUniform("cc_time", this._time);
          this._updateLights(b);
          for (var e = this._device._gl.canvas, f = 0; f < b._cameras.length; ++f) {
            var g = this._requestView();
            var h = e.width;
            var i = e.height;
            b._cameras.data[f].extractView(g, h, i);
          }
          this._viewPools.sort(y);
          for (var j = 0; j < this._viewPools.length; ++j) {
            var k = this._viewPools.data[j];
            this._render(k, b);
          }
        };
        x.renderCamera = function (b, c) {
          this.reset();
          this._updateLights(c);
          var d = this._device._gl.canvas;
          var e = d.width;
          var f = d.height;
          var g = this._requestView();
          b.extractView(g, e, f);
          this._viewPools.sort(y);
          for (var h = 0; h < this._viewPools.length; ++h) {
            var i = this._viewPools.data[h];
            this._render(i, c);
          }
        };
        x._updateLights = function (a) {
          this._lights.length = 0;
          this._shadowLights.length = 0;
          for (var b = a._lights, c = 0; c < b.length; ++c) {
            var d = b.data[c];
            d.update(this._device);
            if (d.shadowType !== q.default.SHADOW_NONE) {
              if (this._shadowLights.length < 2) {
                this._shadowLights.unshift(d);
              }
              var e = this._requestView();
              d.extractView(e, ["shadowcast"]);
              this._lights.splice(0, 0, d);
            } else {
              this._lights.push(d);
            }
          }
          this._updateLightDefines();
          this._numLights = b._count;
        };
        x._updateLightDefines = function () {
          for (var a = this._defines, b = 0; b < this._lights.length; ++b) {
            var c = this._lights[b];
            var d = "CC_LIGHT_" + b + "_TYPE";
            var f = "CC_SHADOW_" + b + "_TYPE";
            if (a[d] !== c._type) {
              a[d] = c._type;
              this._definesChanged = true;
            }
            if (a[f] !== c._shadowType) {
              a[f] = c._shadowType;
              this._definesChanged = true;
            }
          }
          var g = Math.min(4, this._lights.length);
          if (a.CC_NUM_LIGHTS !== g) {
            a.CC_NUM_LIGHTS = g;
            this._definesChanged = true;
          }
          g = Math.min(4, this._shadowLights.length);
          if (a.CC_NUM_SHADOW_LIGHTS !== g) {
            a.CC_NUM_SHADOW_LIGHTS = g;
            this._definesChanged = true;
          }
        };
        x._submitLightsUniforms = function () {
          var b = this._device;
          if (this._lights.length > 0) {
            for (var d = v.add(), e = v.add(), f = v.add(), g = Math.min(4, this._lights.length), h = 0; h < g; ++h) {
              var i = this._lights[h];
              var j = h * 4;
              f.set(i._colorUniform, j);
              e.set(i._directionUniform, j);
              d.set(i._positionUniform, j);
              d[j + 3] = i._range;
              if (i._type === q.default.LIGHT_SPOT) {
                e[j + 3] = i._spotUniform[0];
                f[j + 3] = i._spotUniform[1];
              } else {
                e[j + 3] = 0;
                f[j + 3] = 0;
              }
            }
            b.setUniform("cc_lightDirection", e);
            b.setUniform("cc_lightColor", f);
            b.setUniform("cc_lightPositionAndRange", d);
          }
        };
        x._submitShadowStageUniforms = function (a) {
          var b = a._shadowLight;
          var c = r;
          c[0] = b.shadowMinDepth;
          c[1] = b.shadowMaxDepth;
          c[2] = b.shadowDepthScale;
          c[3] = b.shadowDarkness;
          this._device.setUniform("cc_shadow_map_lightViewProjMatrix", k.Mat4.toArray(f, a._matViewProj));
          this._device.setUniform("cc_shadow_map_info", c);
          this._device.setUniform("cc_shadow_map_bias", b.shadowBias);
          this._defines.CC_SHADOW_TYPE = b._shadowType;
        };
        x._submitOtherStagesUniforms = function () {
          for (var a = v.add(), b = 0; b < this._shadowLights.length; ++b) {
            var c = this._shadowLights[b];
            var d = p[b];
            if (!d) {
              d = p[b] = new Float32Array(w.buffer, b * 64, 16);
            }
            k.Mat4.toArray(d, c.viewProjMatrix);
            var f = b * 4;
            a[f] = c.shadowMinDepth;
            a[f + 1] = c.shadowMaxDepth;
            a[f + 2] = c._shadowResolution;
            a[f + 3] = c.shadowDarkness;
          }
          this._device.setUniform("cc_shadow_lightViewProjMatrix", w);
          this._device.setUniform("cc_shadow_info", a);
        };
        x._sortItems = function (a) {
          a.sort(function (a, b) {
            if (a.passes.length !== b.passes.length) {
              return a.passes.length - b.passes.length;
            } else {
              return a.sortKey - b.sortKey;
            }
          });
        };
        x._shadowStage = function (a, b) {
          this._submitShadowStageUniforms(a);
          for (var c = 0; c < b.length; ++c) {
            var d = b.data[c];
            if (d.effect.getDefine("CC_CASTING_SHADOW")) {
              this._draw(d);
            }
          }
        };
        x._drawItems = function (b, c) {
          var d = this._shadowLights;
          if (d.length === 0 && this._numLights === 0) {
            for (var e = 0; e < c.length; ++e) {
              var f = c.data[e];
              this._draw(f);
            }
          } else {
            for (var g = 0; g < c.length; ++g) {
              for (var h = c.data[g], i = 0; i < d.length; ++i) {
                this._device.setTexture("cc_shadow_map_" + i, d[i].shadowMap, this._allocTextureUnit());
              }
              this._draw(h);
            }
          }
        };
        x._opaqueStage = function (a, b) {
          a.getPosition(g);
          this._device.setUniform("cc_matView", k.Mat4.toArray(s, a._matView));
          this._device.setUniform("cc_matViewInv", k.Mat4.toArray(h, a._matViewInv));
          this._device.setUniform("cc_matProj", k.Mat4.toArray(u, a._matProj));
          this._device.setUniform("cc_matViewProj", k.Mat4.toArray(f, a._matViewProj));
          this._device.setUniform("cc_cameraPos", k.Vec4.toArray(d, g));
          this._submitLightsUniforms();
          this._submitOtherStagesUniforms();
          this._drawItems(a, b);
        };
        x._transparentStage = function (a, b) {
          a.getPosition(g);
          a.getForward(m);
          this._device.setUniform("cc_matView", k.Mat4.toArray(s, a._matView));
          this._device.setUniform("cc_matViewInv", k.Mat4.toArray(h, a._matViewInv));
          this._device.setUniform("cc_matProj", k.Mat4.toArray(u, a._matProj));
          this._device.setUniform("cc_matViewProj", k.Mat4.toArray(f, a._matViewProj));
          this._device.setUniform("cc_cameraPos", k.Vec4.toArray(d, g));
          this._submitLightsUniforms();
          this._submitOtherStagesUniforms();
          for (var c = 0; c < b.length; ++c) {
            var e = b.data[c];
            e.node.getWorldPosition(t);
            k.Vec3.sub(t, t, g);
            e.sortKey = -k.Vec3.dot(t, m);
          }
          this._sortItems(b);
          this._drawItems(a, b);
        };
        return n;
      }(i.default);
      e.default = z;
      j.exports = e.default;
    }, {
      "../../core/value-types": 251,
      "../core/base-renderer": 271,
      "../enums": 277,
      "../memop": 294
    }],
    302: [function (b, g, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var i;
      var j = b("../../core/value-types");
      var k = b("../../core/geom-utils");
      var m = (i = b("../enums")) && i.__esModule ? i : {
        default: i
      };
      function a(a, b) {
        for (var c = 0; c < b.length; c++) {
          var d = b[c];
          d.enumerable = d.enumerable || false;
          d.configurable = true;
          if ("value" in d) {
            d.writable = true;
          }
          Object.defineProperty(a, d.key, d);
        }
      }
      var o = new j.Mat4();
      var c = new j.Mat4();
      var l = new j.Mat4();
      var h = new j.Mat4();
      var q = new j.Mat4();
      var f = new j.Mat4();
      var d = new j.Vec3();
      var r = new j.Vec3();
      var p = function () {
        function b() {
          this._poolID = -1;
          this._node = null;
          this._projection = m.default.PROJ_PERSPECTIVE;
          this._priority = 0;
          this._color = new j.Vec4(0.2, 0.3, 0.47, 1);
          this._depth = 1;
          this._stencil = 0;
          this._clearFlags = m.default.CLEAR_COLOR | m.default.CLEAR_DEPTH;
          this._clearModel = null;
          this._stages = [];
          this._framebuffer = null;
          this._near = 0.01;
          this._far = 1000;
          this._fov = Math.PI / 4;
          this._rect = {
            x: 0,
            y: 0,
            w: 1,
            h: 1
          };
          this._orthoHeight = 10;
          this._cullingMask = 4294967295;
        }
        var g;
        var p;
        var s = b.prototype;
        s.setCullingMask = function (a) {
          this._cullingMask = a;
        };
        s.getNode = function () {
          return this._node;
        };
        s.setNode = function (a) {
          this._node = a;
        };
        s.getType = function () {
          return this._projection;
        };
        s.setType = function (a) {
          this._projection = a;
        };
        s.getPriority = function () {
          return this._priority;
        };
        s.setPriority = function (a) {
          this._priority = a;
        };
        s.getOrthoHeight = function () {
          return this._orthoHeight;
        };
        s.setOrthoHeight = function (a) {
          this._orthoHeight = a;
        };
        s.getFov = function () {
          return this._fov;
        };
        s.setFov = function (a) {
          this._fov = a;
        };
        s.getNear = function () {
          return this._near;
        };
        s.setNear = function (a) {
          this._near = a;
        };
        s.getFar = function () {
          return this._far;
        };
        s.setFar = function (a) {
          this._far = a;
        };
        s.getColor = function (a) {
          return j.Vec4.copy(a, this._color);
        };
        s.setColor = function (a, b, c, d) {
          j.Vec4.set(this._color, a, b, c, d);
        };
        s.getDepth = function () {
          return this._depth;
        };
        s.setDepth = function (a) {
          this._depth = a;
        };
        s.getStencil = function () {
          return this._stencil;
        };
        s.setStencil = function (a) {
          this._stencil = a;
        };
        s.getClearFlags = function () {
          return this._clearFlags;
        };
        s.setClearFlags = function (a) {
          this._clearFlags = a;
        };
        s.getRect = function (a) {
          a.x = this._rect.x;
          a.y = this._rect.y;
          a.w = this._rect.w;
          a.h = this._rect.h;
          return a;
        };
        s.setRect = function (a, b, c, d) {
          this._rect.x = a;
          this._rect.y = b;
          this._rect.w = c;
          this._rect.h = d;
        };
        s.getStages = function () {
          return this._stages;
        };
        s.setStages = function (a) {
          this._stages = a;
        };
        s.getFramebuffer = function () {
          return this._framebuffer;
        };
        s.setFrameBuffer = function (a) {
          this._framebuffer = a;
        };
        s._calcMatrices = function (a, b) {
          this._node.getWorldRT(l);
          j.Mat4.invert(c, l);
          var d = a / b;
          if (this._projection === m.default.PROJ_PERSPECTIVE) {
            j.Mat4.perspective(h, this._fov, d, this._near, this._far);
          } else {
            var e = this._orthoHeight * d;
            var g = this._orthoHeight;
            j.Mat4.ortho(h, -e, e, -g, g, this._near, this._far);
          }
          j.Mat4.mul(q, h, c);
          j.Mat4.invert(f, q);
        };
        s.extractView = function (a, b, d) {
          if (this._framebuffer) {
            b = this._framebuffer._width;
            d = this._framebuffer._height;
          }
          a._priority = this._priority;
          a._rect.x = this._rect.x * b;
          a._rect.y = this._rect.y * d;
          a._rect.w = this._rect.w * b;
          a._rect.h = this._rect.h * d;
          this.getColor(a._color);
          a._depth = this._depth;
          a._stencil = this._stencil;
          a._clearFlags = this._clearFlags;
          a._clearModel = this._clearModel;
          a._stages = this._stages;
          a._framebuffer = this._framebuffer;
          this._calcMatrices(b, d);
          j.Mat4.copy(a._matView, c);
          j.Mat4.copy(a._matViewInv, l);
          j.Mat4.copy(a._matProj, h);
          j.Mat4.copy(a._matViewProj, q);
          j.Mat4.copy(a._matInvViewProj, f);
          a._cullingMask = this._cullingMask;
        };
        s.screenPointToRay = function (a, b, e, g, i) {
          if (!cc.geomUtils) {
            return i;
          }
          i = i || new k.Ray();
          this._calcMatrices(e, g);
          var n = this._rect.x * e;
          var c = this._rect.y * g;
          var l = this._rect.w * e;
          var h = this._rect.h * g;
          j.Vec3.set(r, (a - n) / l * 2 - 1, (b - c) / h * 2 - 1, 1);
          j.Vec3.transformMat4(r, r, f);
          if (this._projection === m.default.PROJ_PERSPECTIVE) {
            this._node.getWorldPosition(d);
          } else {
            j.Vec3.set(d, (a - n) / l * 2 - 1, (b - c) / h * 2 - 1, -1);
            j.Vec3.transformMat4(d, d, f);
          }
          return k.Ray.fromPoints(i, d, r);
        };
        s.screenToWorld = function (a, b, e, g) {
          this._calcMatrices(e, g);
          var h = this._rect.x * e;
          var i = this._rect.y * g;
          var k = this._rect.w * e;
          var c = this._rect.h * g;
          if (this._projection === m.default.PROJ_PERSPECTIVE) {
            j.Vec3.set(a, (b.x - h) / k * 2 - 1, (b.y - i) / c * 2 - 1, 0.9999);
            j.Vec3.transformMat4(a, a, f);
            this._node.getWorldPosition(d);
            j.Vec3.lerp(a, d, a, (0, j.lerp)(this._near / this._far, 1, b.z));
          } else {
            j.Vec3.set(a, (b.x - h) / k * 2 - 1, (b.y - i) / c * 2 - 1, b.z * 2 - 1);
            j.Vec3.transformMat4(a, a, f);
          }
          return a;
        };
        s.worldToScreen = function (b, d, e, f) {
          this._calcMatrices(e, f);
          var g = this._rect.x * e;
          var h = this._rect.y * f;
          var a = this._rect.w * e;
          var i = this._rect.h * f;
          j.Vec3.transformMat4(b, d, q);
          b.x = g + (b.x + 1) * 0.5 * a;
          b.y = h + (b.y + 1) * 0.5 * i;
          b.z = b.z * 0.5 + 0.5;
          return b;
        };
        s.worldMatrixToScreen = function (b, c, e, f) {
          this._calcMatrices(e, f);
          j.Mat4.mul(b, q, c);
          var g = e / 2;
          var h = f / 2;
          j.Mat4.identity(o);
          j.Mat4.transform(o, o, j.Vec3.set(d, g, h, 0));
          j.Mat4.scale(o, o, j.Vec3.set(d, g, h, 1));
          j.Mat4.mul(b, o, b);
          return b;
        };
        g = b;
        if (p = [{
          key: "cullingMask",
          get: function () {
            return this._cullingMask;
          },
          set: function (a) {
            this._cullingMask = a;
          }
        }]) {
          a(g.prototype, p);
        }
        Object.defineProperty(g, "prototype", {
          writable: false
        });
        return b;
      }();
      e.default = p;
      g.exports = e.default;
    }, {
      "../../core/geom-utils": 142,
      "../../core/value-types": 251,
      "../enums": 277
    }],
    303: [function (a, b, c) {
      "use strict";
  
      c.__esModule = true;
      c.default = undefined;
      var d = function () {
        function a() {
          this._type = "default";
          this._poolID = -1;
          this._node = null;
          this._inputAssembler = null;
          this._effect = null;
          this._viewID = -1;
          this._cameraID = -1;
          this._userKey = -1;
          this._castShadow = false;
          this._boundingShape = null;
        }
        var b = a.prototype;
        b.setNode = function (a) {
          this._node = a;
        };
        b.setInputAssembler = function (a) {
          this._inputAssembler = a;
        };
        b.setEffect = function (a) {
          this._effect = a;
        };
        b.setUserKey = function (a) {
          this._userKey = a;
        };
        b.extractDrawItem = function (a) {
          a.model = this;
          a.node = this._node;
          a.ia = this._inputAssembler;
          a.effect = this._effect;
        };
        return a;
      }();
      c.default = d;
      b.exports = c.default;
    }, {}],
    304: [function (a, b, c) {
      "use strict";
  
      c.__esModule = true;
      c.default = undefined;
      var d = a("../memop");
      var e = function () {
        function a(a) {
          this._lights = new d.FixedArray(16);
          this._models = new d.FixedArray(16);
          this._cameras = new d.FixedArray(16);
          this._debugCamera = null;
          this._app = a;
          this._views = [];
        }
        var b = a.prototype;
        b._add = function (a, b) {
          if (b._poolID === -1) {
            a.push(b);
            b._poolID = a.length - 1;
          }
        };
        b._remove = function (a, b) {
          if (b._poolID !== -1) {
            a.data[a.length - 1]._poolID = b._poolID;
            a.fastRemove(b._poolID);
            b._poolID = -1;
          }
        };
        b.reset = function () {
          for (var a = 0; a < this._models.length; ++a) {
            this._models.data[a]._viewID = -1;
          }
        };
        b.setDebugCamera = function (a) {
          this._debugCamera = a;
        };
        b.getCameraCount = function () {
          return this._cameras.length;
        };
        b.getCamera = function (a) {
          return this._cameras.data[a];
        };
        b.addCamera = function (a) {
          this._add(this._cameras, a);
        };
        b.removeCamera = function (a) {
          this._remove(this._cameras, a);
        };
        b.getModelCount = function () {
          return this._models.length;
        };
        b.getModel = function (a) {
          return this._models.data[a];
        };
        b.addModel = function (a) {
          this._add(this._models, a);
        };
        b.removeModel = function (a) {
          this._remove(this._models, a);
        };
        b.getLightCount = function () {
          return this._lights.length;
        };
        b.getLight = function (a) {
          return this._lights.data[a];
        };
        b.addLight = function (a) {
          this._add(this._lights, a);
        };
        b.removeLight = function (a) {
          this._remove(this._lights, a);
        };
        b.addView = function (a) {
          if (this._views.indexOf(a) === -1) {
            this._views.push(a);
          }
        };
        b.removeView = function (a) {
          var b = this._views.indexOf(a);
          if (b !== -1) {
            this._views.splice(b, 1);
          }
        };
        return a;
      }();
      c.default = e;
      b.exports = c.default;
    }, {
      "../memop": 294
    }],
    305: [function (b, j, e) {
      "use strict";
  
      e.__esModule = true;
      e.getClassName = e.enums2default = e.ctor2enums = undefined;
      e.getInspectorProps = function (a) {
        var b = {
          type: a.type
        };
        Object.assign(b, a.editor || a.inspector);
        b.defines = a.defines;
        b.value = g(b.type)(a.value);
        if (a.range) {
          b.range = a.range;
        }
        var c = m(b.type);
        b.typeName = y[c] || c;
        b.valueCtor = d[b.type];
        if (b.typeName == "cc.Texture2D") {
          b.typeName = "cc.Asset";
          b.assetType = "cc.Texture2D";
        }
        return b;
      };
      e.getInstanceType = e.getInstanceCtor = undefined;
      var i;
      var k;
      var q;
      var t;
      var w = l(b("./enums"));
      var o = b("../core/value-types");
      var c = l(b("../core/assets/CCTexture2D"));
      function l(a) {
        if (a && a.__esModule) {
          return a;
        } else {
          return {
            default: a
          };
        }
      }
      var h;
      h = b("./gfx/texture-2d");
      var x = cc.Object;
      (i = {})[Boolean] = function (a) {
        return a || false;
      };
      i[Number] = function (a) {
        if (a) {
          if (ArrayBuffer.isView(a)) {
            return a[0];
          } else {
            return a;
          }
        } else {
          return 0;
        }
      };
      i[o.Vec2] = function (a) {
        if (a) {
          return cc.v2(a[0], a[1]);
        } else {
          return cc.v2();
        }
      };
      i[o.Vec3] = function (a) {
        if (a) {
          return cc.v3(a[0], a[1], a[2]);
        } else {
          return cc.v3();
        }
      };
      i[o.Vec4] = function (a) {
        if (a) {
          return cc.v4(a[0], a[1], a[2], a[3]);
        } else {
          return cc.v4();
        }
      };
      i[o.Color] = function (a) {
        if (a) {
          return cc.color(a[0] * 255, a[1] * 255, a[2] * 255, (a[3] || 1) * 255);
        } else {
          return cc.color();
        }
      };
      i[o.Mat4] = function (a) {
        if (a) {
          return cc.mat4(a[0], a[1], a[2], a[3], a[4], a[5], a[6], a[7], a[8], a[9], a[10], a[11], a[12], a[13], a[14], a[15]);
        } else {
          return cc.mat4();
        }
      };
      i[c.default] = function () {
        return null;
      };
      i[x] = function () {
        return null;
      };
      var f = i;
      (k = {})[w.default.PARAM_INT] = Number;
      k[w.default.PARAM_INT2] = o.Vec2;
      k[w.default.PARAM_INT3] = o.Vec3;
      k[w.default.PARAM_INT4] = o.Vec4;
      k[w.default.PARAM_FLOAT] = Number;
      k[w.default.PARAM_FLOAT2] = o.Vec2;
      k[w.default.PARAM_FLOAT3] = o.Vec3;
      k[w.default.PARAM_FLOAT4] = o.Vec4;
      k[w.default.PARAM_MAT4] = o.Mat4;
      k[w.default.PARAM_TEXTURE_2D] = c.default;
      k.color = o.Color;
      k.number = Number;
      k.boolean = Boolean;
      k.default = x;
      var d = k;
      (q = {})[Number] = w.default.PARAM_FLOAT;
      q[o.Vec2] = w.default.PARAM_FLOAT2;
      q[o.Vec3] = w.default.PARAM_FLOAT3;
      q[o.Vec4] = w.default.PARAM_FLOAT4;
      q[o.Color] = w.default.PARAM_COLOR3;
      q[o.Color] = w.default.PARAM_COLOR4;
      q[o.Mat4] = w.default.PARAM_MAT4;
      q[c.default] = w.default.PARAM_TEXTURE_2D;
      q[h] = w.default.PARAM_TEXTURE_2D;
      var z = q;
      e.ctor2enums = z;
      (t = {})[w.default.PARAM_INT] = new Uint32Array([0]);
      t[w.default.PARAM_INT2] = new Uint32Array([0, 0]);
      t[w.default.PARAM_INT3] = new Uint32Array([0, 0, 0]);
      t[w.default.PARAM_INT4] = new Uint32Array([0, 0, 0, 0]);
      t[w.default.PARAM_FLOAT] = new Float32Array([0]);
      t[w.default.PARAM_FLOAT2] = new Float32Array([0, 0]);
      t[w.default.PARAM_FLOAT3] = new Float32Array([0, 0, 0]);
      t[w.default.PARAM_FLOAT4] = new Float32Array([0, 0, 0, 0]);
      t[w.default.PARAM_MAT4] = new Float32Array([0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0]);
      t[w.default.PARAM_TEXTURE_2D] = null;
      t.number = 0;
      t.boolean = false;
      var p = t;
      e.enums2default = p;
      function v(a) {
        return d[a] || d.default;
      }
      e.getInstanceType = v;
      function g(a) {
        return f[v(a)];
      }
      e.getInstanceCtor = g;
      function m(a) {
        return cc.js.getClassName(v(a));
      }
      e.getClassName = m;
      var y = {
        Number: "number",
        Boolean: "boolean"
      };
    }, {
      "../core/assets/CCTexture2D": 72,
      "../core/value-types": 251,
      "./enums": 277,
      "./gfx/texture-2d": 287
    }],
    306: [function (b) {
      "use strict";
  
      var f = b("../core/CCDebug");
      var d = b("../compression/ZipUtils");
      var e = b("../core/platform/js");
      function g(a) {
        var b = cc.Label.HorizontalAlign;
        switch (a) {
          case "center":
            return b.CENTER;
          case "right":
            return b.RIGHT;
          default:
            return b.LEFT;
        }
      }
      function h(a) {
        var b = cc.Label.VerticalAlign;
        switch (a) {
          case "center":
            return b.CENTER;
          case "bottom":
            return b.BOTTOM;
          default:
            return b.TOP;
        }
      }
      function j(b) {
        if (!b) {
          return cc.color(0, 0, 0, 255);
        }
        if ((b = b.indexOf("#") !== -1 ? b.substring(1) : b).length === 8) {
          var c = parseInt(b.substr(0, 2), 16) || 255;
          var d = parseInt(b.substr(2, 2), 16) || 0;
          var e = parseInt(b.substr(4, 2), 16) || 0;
          var f = parseInt(b.substr(6, 2), 16) || 0;
          return cc.color(d, e, f, c);
        }
        var g = parseInt(b.substr(0, 2), 16) || 0;
        var h = parseInt(b.substr(2, 2), 16) || 0;
        var a = parseInt(b.substr(4, 2), 16) || 0;
        return cc.color(g, h, a, 255);
      }
      function q(a, b) {
        for (var d = [], g = a.getElementsByTagName("properties"), i = 0; i < g.length; ++i) {
          for (var k = g[i].getElementsByTagName("property"), m = 0; m < k.length; ++m) {
            d.push(k[m]);
          }
        }
        b = b || {};
        for (var n = 0; n < d.length; n++) {
          var p = d[n];
          var q = p.getAttribute("name");
          var t = p.getAttribute("type") || "string";
          var v = p.getAttribute("value");
          if (t === "int") {
            v = parseInt(v);
          } else if (t === "float") {
            v = parseFloat(v);
          } else if (t === "bool") {
            v = v === "true";
          } else if (t === "color") {
            v = j(v);
          }
          b[q] = v;
        }
        return b;
      }
      b("../core/platform/CCSAXParser");
      cc.TMXLayerInfo = function () {
        this.properties = {};
        this.name = "";
        this._layerSize = null;
        this._tiles = [];
        this.visible = true;
        this._opacity = 0;
        this.ownTiles = true;
        this._minGID = 100000;
        this._maxGID = 0;
        this.offset = cc.v2(0, 0);
      };
      cc.TMXLayerInfo.prototype = {
        constructor: cc.TMXLayerInfo,
        getProperties: function () {
          return this.properties;
        },
        setProperties: function (a) {
          this.properties = a;
        }
      };
      cc.TMXImageLayerInfo = function () {
        this.name = "";
        this.visible = true;
        this.width = 0;
        this.height = 0;
        this.offset = cc.v2(0, 0);
        this._opacity = 0;
        this._trans = new cc.Color(255, 255, 255, 255);
        this.sourceImage = null;
      };
      cc.TMXObjectGroupInfo = function () {
        this.properties = {};
        this.name = "";
        this._objects = [];
        this.visible = true;
        this._opacity = 0;
        this._color = new cc.Color(255, 255, 255, 255);
        this.offset = cc.v2(0, 0);
        this._draworder = "topdown";
      };
      cc.TMXObjectGroupInfo.prototype = {
        constructor: cc.TMXObjectGroupInfo,
        getProperties: function () {
          return this.properties;
        },
        setProperties: function (a) {
          this.properties = a;
        }
      };
      cc.TMXTilesetInfo = function () {
        this.name = "";
        this.firstGid = 0;
        this.spacing = 0;
        this.margin = 0;
        this.sourceImage = null;
        this.imageSize = cc.size(0, 0);
        this.tileOffset = cc.v2(0, 0);
        this._tileSize = cc.size(0, 0);
      };
      cc.TMXTilesetInfo.prototype = {
        constructor: cc.TMXTilesetInfo,
        rectForGID: function (a, b) {
          var c = b || cc.rect(0, 0, 0, 0);
          c.width = this._tileSize.width;
          c.height = this._tileSize.height;
          a &= cc.TiledMap.TileFlag.FLIPPED_MASK;
          a -= parseInt(this.firstGid, 10);
          var d = parseInt((this.imageSize.width - this.margin * 2 + this.spacing) / (this._tileSize.width + this.spacing), 10);
          c.x = parseInt(a % d * (this._tileSize.width + this.spacing) + this.margin, 10);
          c.y = parseInt(parseInt(a / d, 10) * (this._tileSize.height + this.spacing) + this.margin, 10);
          return c;
        }
      };
      cc.TMXMapInfo = function (a, b, c, d, e) {
        this.properties = [];
        this.orientation = null;
        this.parentElement = null;
        this.parentGID = null;
        this.layerAttrs = 0;
        this.storingCharacters = false;
        this.currentString = null;
        this.renderOrder = cc.TiledMap.RenderOrder.RightDown;
        this._supportVersion = [1, 2, 0];
        this._parser = new cc.SAXParser();
        this._objectGroups = [];
        this._allChildren = [];
        this._mapSize = cc.size(0, 0);
        this._tileSize = cc.size(0, 0);
        this._layers = [];
        this._tilesets = [];
        this._imageLayers = [];
        this._tileProperties = {};
        this._tileAnimations = {};
        this._tsxMap = null;
        this._textures = null;
        this._staggerAxis = null;
        this._staggerIndex = null;
        this._hexSideLength = 0;
        this._imageLayerTextures = null;
        this.initWithXML(a, b, c, d, e);
      };
      cc.TMXMapInfo.prototype = {
        constructor: cc.TMXMapInfo,
        getOrientation: function () {
          return this.orientation;
        },
        setOrientation: function (a) {
          this.orientation = a;
        },
        getStaggerAxis: function () {
          return this._staggerAxis;
        },
        setStaggerAxis: function (a) {
          this._staggerAxis = a;
        },
        getStaggerIndex: function () {
          return this._staggerIndex;
        },
        setStaggerIndex: function (a) {
          this._staggerIndex = a;
        },
        getHexSideLength: function () {
          return this._hexSideLength;
        },
        setHexSideLength: function (a) {
          this._hexSideLength = a;
        },
        getMapSize: function () {
          return cc.size(this._mapSize.width, this._mapSize.height);
        },
        setMapSize: function (a) {
          this._mapSize.width = a.width;
          this._mapSize.height = a.height;
        },
        _getMapWidth: function () {
          return this._mapSize.width;
        },
        _setMapWidth: function (a) {
          this._mapSize.width = a;
        },
        _getMapHeight: function () {
          return this._mapSize.height;
        },
        _setMapHeight: function (a) {
          this._mapSize.height = a;
        },
        getTileSize: function () {
          return cc.size(this._tileSize.width, this._tileSize.height);
        },
        setTileSize: function (a) {
          this._tileSize.width = a.width;
          this._tileSize.height = a.height;
        },
        _getTileWidth: function () {
          return this._tileSize.width;
        },
        _setTileWidth: function (a) {
          this._tileSize.width = a;
        },
        _getTileHeight: function () {
          return this._tileSize.height;
        },
        _setTileHeight: function (a) {
          this._tileSize.height = a;
        },
        getLayers: function () {
          return this._layers;
        },
        setLayers: function (a) {
          this._allChildren.push(a);
          this._layers.push(a);
        },
        getImageLayers: function () {
          return this._imageLayers;
        },
        setImageLayers: function (a) {
          this._allChildren.push(a);
          this._imageLayers.push(a);
        },
        getTilesets: function () {
          return this._tilesets;
        },
        setTilesets: function (a) {
          this._tilesets.push(a);
        },
        getObjectGroups: function () {
          return this._objectGroups;
        },
        setObjectGroups: function (a) {
          this._allChildren.push(a);
          this._objectGroups.push(a);
        },
        getAllChildren: function () {
          return this._allChildren;
        },
        getParentElement: function () {
          return this.parentElement;
        },
        setParentElement: function (a) {
          this.parentElement = a;
        },
        getParentGID: function () {
          return this.parentGID;
        },
        setParentGID: function (a) {
          this.parentGID = a;
        },
        getLayerAttribs: function () {
          return this.layerAttrs;
        },
        setLayerAttribs: function (a) {
          this.layerAttrs = a;
        },
        getStoringCharacters: function () {
          return this.storingCharacters;
        },
        setStoringCharacters: function (a) {
          this.storingCharacters = a;
        },
        getProperties: function () {
          return this.properties;
        },
        setProperties: function (a) {
          this.properties = a;
        },
        initWithXML: function (a, b, c, d, e) {
          this._tilesets.length = 0;
          this._layers.length = 0;
          this._imageLayers.length = 0;
          this._tsxMap = b;
          this._textures = c;
          this._imageLayerTextures = e;
          this._textureSizes = d;
          this._objectGroups.length = 0;
          this._allChildren.length = 0;
          this.properties.length = 0;
          this._tileProperties = {};
          this._tileAnimations = {};
          this.currentString = "";
          this.storingCharacters = false;
          this.layerAttrs = cc.TMXLayerInfo.ATTRIB_NONE;
          this.parentElement = cc.TiledMap.NONE;
          return this.parseXMLString(a);
        },
        parseXMLString: function (o, t) {
          var e;
          var $ = this._parser._parseXML(o).documentElement;
          var n = $.getAttribute("orientation");
          var r = $.getAttribute("staggeraxis");
          var s = $.getAttribute("staggerindex");
          var a = $.getAttribute("hexsidelength");
          var c = $.getAttribute("renderorder");
          var l = $.getAttribute("version") || "1.0.0";
          if ($.nodeName === "map") {
            for (var h = l.split("."), u = this._supportVersion, f = 0; f < u.length; f++) {
              var aa = parseInt(h[f]) || 0;
              if (u[f] < aa) {
                break;
              }
            }
            if (n === "orthogonal") {
              this.orientation = cc.TiledMap.Orientation.ORTHO;
            } else if (n === "isometric") {
              this.orientation = cc.TiledMap.Orientation.ISO;
            } else if (n === "hexagonal") {
              this.orientation = cc.TiledMap.Orientation.HEX;
            }
            this.renderOrder = c === "right-up" ? cc.TiledMap.RenderOrder.RightUp : c === "left-up" ? cc.TiledMap.RenderOrder.LeftUp : c === "left-down" ? cc.TiledMap.RenderOrder.LeftDown : cc.TiledMap.RenderOrder.RightDown;
            if (r === "x") {
              this.setStaggerAxis(cc.TiledMap.StaggerAxis.STAGGERAXIS_X);
            } else if (r === "y") {
              this.setStaggerAxis(cc.TiledMap.StaggerAxis.STAGGERAXIS_Y);
            }
            if (s === "odd") {
              this.setStaggerIndex(cc.TiledMap.StaggerIndex.STAGGERINDEX_ODD);
            } else if (s === "even") {
              this.setStaggerIndex(cc.TiledMap.StaggerIndex.STAGGERINDEX_EVEN);
            }
            if (a) {
              this.setHexSideLength(parseFloat(a));
            }
            var ba = cc.size(0, 0);
            ba.width = parseFloat($.getAttribute("width"));
            ba.height = parseFloat($.getAttribute("height"));
            this.setMapSize(ba);
            (ba = cc.size(0, 0)).width = parseFloat($.getAttribute("tilewidth"));
            ba.height = parseFloat($.getAttribute("tileheight"));
            this.setTileSize(ba);
            this.properties = q($);
          }
          var ca = $.getElementsByTagName("tileset");
          if ($.nodeName !== "map") {
            (ca = []).push($);
          }
          e = 0;
          for (; e < ca.length; e++) {
            var da = ca[e];
            var ea = da.getAttribute("source");
            if (ea) {
              var fa = parseInt(da.getAttribute("firstgid"));
              var ga = this._tsxMap[ea];
              if (ga) {
                this.parseXMLString(ga, fa);
              }
            } else {
              var ha = da.getElementsByTagName("image");
              var ia = ha.length > 1;
              var ja = ha[0];
              var ka = ja.getAttribute("source");
              ka = ka.replace(/\\/g, "/");
              var la = da.getElementsByTagName("tile");
              var ma = la && la.length || 1;
              var na = null;
              var oa = da.getAttribute("name") || "";
              var pa = parseInt(da.getAttribute("spacing")) || 0;
              var qa = parseInt(da.getAttribute("margin")) || 0;
              var ra = parseInt(t);
              if (!ra) {
                ra = parseInt(da.getAttribute("firstgid")) || 0;
              }
              var sa = cc.size(0, 0);
              sa.width = parseFloat(da.getAttribute("tilewidth"));
              sa.height = parseFloat(da.getAttribute("tileheight"));
              var ta = da.getElementsByTagName("tileoffset")[0];
              var ua = cc.v2(0, 0);
              if (ta) {
                ua.x = parseFloat(ta.getAttribute("x"));
                ua.y = parseFloat(ta.getAttribute("y"));
              }
              for (var va = null, wa = 0; wa < ma; wa++) {
                if (!(va && !ia)) {
                  (va = new cc.TMXTilesetInfo()).name = oa;
                  va.firstGid = ra;
                  va.spacing = pa;
                  va.margin = qa;
                  va._tileSize = sa;
                  va.tileOffset = ua;
                  va.sourceImage = this._textures[ka];
                  va.imageSize = this._textureSizes[ka] || va.imageSize;
                  va.sourceImage;
                  this.setTilesets(va);
                }
                if (na = la && la[wa]) {
                  this.parentGID = parseInt(ra) + parseInt(na.getAttribute("id") || 0);
                  var xa = na.getElementsByTagName("image");
                  if (xa && xa.length > 0) {
                    var ya = (ja = xa[0]).getAttribute("source");
                    ya = ya.replace(/\\/g, "/");
                    va.sourceImage = this._textures[ya];
                    va.sourceImage;
                    var za = cc.size(0, 0);
                    za.width = parseFloat(ja.getAttribute("width"));
                    za.height = parseFloat(ja.getAttribute("height"));
                    va._tileSize = za;
                    va.firstGid = this.parentGID;
                  }
                  this._tileProperties[this.parentGID] = q(na);
                  var Aa = na.getElementsByTagName("animation");
                  if (Aa && Aa.length > 0) {
                    var Ba = Aa[0].getElementsByTagName("frame");
                    var Ca = {
                      frames: [],
                      dt: 0,
                      frameIdx: 0
                    };
                    this._tileAnimations[this.parentGID] = Ca;
                    for (var Da = Ca.frames, Ea = 0; Ea < Ba.length; Ea++) {
                      var Fa = Ba[Ea];
                      var Ga = parseInt(ra) + parseInt(Fa.getAttribute("tileid"));
                      var Ha = parseFloat(Fa.getAttribute("duration"));
                      Da.push({
                        tileid: Ga,
                        duration: Ha / 1000,
                        grid: null
                      });
                    }
                  }
                }
              }
            }
          }
          var Ia = $.childNodes;
          for (e = 0; e < Ia.length; e++) {
            var Ja = Ia[e];
            if (!this._shouldIgnoreNode(Ja)) {
              if (Ja.nodeName === "imagelayer") {
                var Ka = this._parseImageLayer(Ja);
                if (Ka) {
                  this.setImageLayers(Ka);
                }
              }
              if (Ja.nodeName === "layer") {
                var La = this._parseLayer(Ja);
                this.setLayers(La);
              }
              if (Ja.nodeName === "objectgroup") {
                var Ma = this._parseObjectGroup(Ja);
                this.setObjectGroups(Ma);
              }
            }
          }
          return $;
        },
        _shouldIgnoreNode: function (a) {
          return a.nodeType === 3 || a.nodeType === 8 || a.nodeType === 4;
        },
        _parseImageLayer: function (a) {
          var b = a.getElementsByTagName("image");
          if (!b || b.length == 0) {
            return null;
          }
          var c = new cc.TMXImageLayerInfo();
          c.name = a.getAttribute("name");
          c.offset.x = parseFloat(a.getAttribute("offsetx")) || 0;
          c.offset.y = parseFloat(a.getAttribute("offsety")) || 0;
          var d = a.getAttribute("visible");
          c.visible = !(d === "0");
          var e = a.getAttribute("opacity") || 1;
          c.opacity = parseInt(parseFloat(e) * 255) || 255;
          var f = b[0];
          var g = f.getAttribute("source");
          c.sourceImage = this._imageLayerTextures[g];
          c.width = parseInt(f.getAttribute("width")) || 0;
          c.height = parseInt(f.getAttribute("height")) || 0;
          c.trans = j(f.getAttribute("trans"));
          if (c.sourceImage) {
            return c;
          } else {
            return null;
          }
        },
        _parseLayer: function (b) {
          var e = b.getElementsByTagName("data")[0];
          var i = new cc.TMXLayerInfo();
          i.name = b.getAttribute("name");
          var j = cc.size(0, 0);
          j.width = parseFloat(b.getAttribute("width"));
          j.height = parseFloat(b.getAttribute("height"));
          i._layerSize = j;
          var k = b.getAttribute("visible");
          i.visible = !(k === "0");
          var a = b.getAttribute("opacity") || 1;
          i._opacity = a ? parseInt(parseFloat(a) * 255) : 255;
          i.offset = cc.v2(parseFloat(b.getAttribute("offsetx")) || 0, parseFloat(b.getAttribute("offsety")) || 0);
          for (var c = "", m = 0; m < e.childNodes.length; m++) {
            c += e.childNodes[m].nodeValue;
          }
          c = c.trim();
          var n;
          var o = e.getAttribute("compression");
          var r = e.getAttribute("encoding");
          if (o && o !== "gzip" && o !== "zlib") {
            return null;
          }
          switch (o) {
            case "gzip":
            case "zlib":
              throw Error(f.getError(100));
            case null:
            case "":
              if (r === "base64") {
                n = d.Base64.decodeAsArray(c, 4);
              } else if (r === "csv") {
                n = [];
                for (var s = c.split(","), t = 0; t < s.length; t++) {
                  n.push(parseInt(s[t]));
                }
              } else {
                var w = e.getElementsByTagName("tile");
                n = [];
                for (var v = 0; v < w.length; v++) {
                  n.push(parseInt(w[v].getAttribute("gid")));
                }
              }
              break;
            default:
              this.layerAttrs;
              cc.TMXLayerInfo.ATTRIB_NONE;
          }
          if (n) {
            i._tiles = new Uint32Array(n);
          }
          i.properties = q(b);
          return i;
        },
        _parseObjectGroup: function (a) {
          var b = new cc.TMXObjectGroupInfo();
          b.name = a.getAttribute("name") || "";
          b.offset = cc.v2(parseFloat(a.getAttribute("offsetx")), parseFloat(a.getAttribute("offsety")));
          var e = a.getAttribute("opacity") || 1;
          b._opacity = e ? parseInt(parseFloat(e) * 255) : 255;
          var i = a.getAttribute("visible");
          if (i && parseInt(i) === 0) {
            b.visible = false;
          }
          var k = a.getAttribute("color");
          if (k) {
            b._color.fromHEX(k);
          }
          var c = a.getAttribute("draworder");
          if (c) {
            b._draworder = c;
          }
          b.setProperties(q(a));
          var l = a.getElementsByTagName("object");
          if (l) {
            for (var n = 0; n < l.length; n++) {
              var o = l[n];
              var r = {};
              r.id = o.getAttribute("id") || n;
              r.name = o.getAttribute("name") || "";
              r.width = parseFloat(o.getAttribute("width")) || 0;
              r.height = parseFloat(o.getAttribute("height")) || 0;
              r.x = parseFloat(o.getAttribute("x")) || 0;
              r.y = parseFloat(o.getAttribute("y")) || 0;
              r.rotation = parseFloat(o.getAttribute("rotation")) || 0;
              q(o, r);
              var s = o.getAttribute("visible");
              r.visible = !(s && parseInt(s) === 0);
              var t = o.getElementsByTagName("text");
              if (t && t.length > 0) {
                var w = t[0];
                r.type = cc.TiledMap.TMXObjectType.TEXT;
                r.wrap = w.getAttribute("wrap") == "1";
                r.color = j(w.getAttribute("color"));
                r.halign = g(w.getAttribute("halign"));
                r.valign = h(w.getAttribute("valign"));
                r.pixelsize = parseInt(w.getAttribute("pixelsize")) || 16;
                r.text = w.childNodes[0].nodeValue;
              }
              var x = o.getAttribute("gid");
              if (x) {
                r.gid = parseInt(x);
                r.type = cc.TiledMap.TMXObjectType.IMAGE;
              }
              var z = o.getElementsByTagName("ellipse");
              if (z && z.length > 0) {
                r.type = cc.TiledMap.TMXObjectType.ELLIPSE;
              }
              var B = o.getElementsByTagName("polygon");
              if (B && B.length > 0) {
                r.type = cc.TiledMap.TMXObjectType.POLYGON;
                var C = B[0].getAttribute("points");
                if (C) {
                  r.points = this._parsePointsString(C);
                }
              }
              var D = o.getElementsByTagName("polyline");
              if (D && D.length > 0) {
                r.type = cc.TiledMap.TMXObjectType.POLYLINE;
                var F = D[0].getAttribute("points");
                if (F) {
                  r.polylinePoints = this._parsePointsString(F);
                }
              }
              if (!r.type) {
                r.type = cc.TiledMap.TMXObjectType.RECT;
              }
              b._objects.push(r);
            }
            if (c !== "index") {
              b._objects.sort(function (a, b) {
                return a.y - b.y;
              });
            }
          }
          return b;
        },
        _parsePointsString: function (a) {
          if (!a) {
            return null;
          }
          for (var b = [], c = a.split(" "), d = 0; d < c.length; d++) {
            var e = c[d].split(",");
            b.push({
              x: parseFloat(e[0]),
              y: parseFloat(e[1])
            });
          }
          return b;
        },
        setTileAnimations: function (a) {
          this._tileAnimations = a;
        },
        getTileAnimations: function () {
          return this._tileAnimations;
        },
        getTileProperties: function () {
          return this._tileProperties;
        },
        setTileProperties: function (a) {
          this._tileProperties = a;
        },
        getCurrentString: function () {
          return this.currentString;
        },
        setCurrentString: function (a) {
          this.currentString = a;
        }
      };
      var a = cc.TMXMapInfo.prototype;
      e.getset(a, "mapWidth", a._getMapWidth, a._setMapWidth);
      e.getset(a, "mapHeight", a._getMapHeight, a._setMapHeight);
      e.getset(a, "tileWidth", a._getTileWidth, a._setTileWidth);
      e.getset(a, "tileHeight", a._getTileHeight, a._setTileHeight);
      cc.TMXLayerInfo.ATTRIB_NONE = 1;
      cc.TMXLayerInfo.ATTRIB_BASE64 = 2;
      cc.TMXLayerInfo.ATTRIB_GZIP = 4;
      cc.TMXLayerInfo.ATTRIB_ZLIB = 8;
    }, {
      "../compression/ZipUtils": 21,
      "../core/CCDebug": 23,
      "../core/platform/CCSAXParser": 169,
      "../core/platform/js": 183
    }],
    307: [function (b, g) {
      "use strict";
  
      var e;
      var j = b("../core/value-types");
      var k = (e = b("../core/assets/material/material-variant")) && e.__esModule ? e : {
        default: e
      };
      var m = b("../core/components/CCRenderComponent");
      var n = b("../core/assets/material/CCMaterial");
      var a = b("../core/renderer/render-flow");
      var o = cc.mat4();
      var c = cc.v2();
      var l = cc.v2();
      var h = cc.v2();
      var p = {
        row: 0,
        col: 0
      };
      var f = cc.Class({
        name: "cc.TiledUserNodeData",
        extends: cc.Component,
        ctor: function () {
          this._index = -1;
          this._row = -1;
          this._col = -1;
          this._tiledLayer = null;
        }
      });
      var d = cc.Class({
        name: "cc.TiledLayer",
        extends: m,
        editor: {
          inspector: "packages://inspector/inspectors/comps/tiled-layer.js"
        },
        ctor: function () {
          this._userNodeGrid = {};
          this._userNodeMap = {};
          this._userNodeDirty = false;
          this._tiledTiles = [];
          this._tilesetIndexArr = [];
          this._tilesetIndexToArrIndex = {};
          this._texIdToMatIndex = {};
          this._viewPort = {
            x: -1,
            y: -1,
            width: -1,
            height: -1
          };
          this._cullingRect = {
            leftDown: {
              row: -1,
              col: -1
            },
            rightTop: {
              row: -1,
              col: -1
            }
          };
          this._cullingDirty = true;
          this._rightTop = {
            row: -1,
            col: -1
          };
          this._layerInfo = null;
          this._mapInfo = null;
          this._topOffset = 0;
          this._downOffset = 0;
          this._leftOffset = 0;
          this._rightOffset = 0;
          this._tiles = [];
          this._vertices = [];
          this._verticesDirty = true;
          this._layerName = "";
          this._layerOrientation = null;
          this._texGrids = null;
          this._textures = null;
          this._tilesets = null;
          this._leftDownToCenterX = 0;
          this._leftDownToCenterY = 0;
          this._hasTiledNodeGrid = false;
          this._hasAniGrid = false;
          this._animations = null;
          this._enableCulling = cc.macro.ENABLE_TILEDMAP_CULLING;
        },
        _hasTiledNode: function () {
          return this._hasTiledNodeGrid;
        },
        _hasAnimation: function () {
          return this._hasAniGrid;
        },
        enableCulling: function (a) {
          if (this._enableCulling != a) {
            this._enableCulling = a;
            this._cullingDirty = true;
          }
        },
        addUserNode: function (b) {
          var d = b.getComponent(f);
          return !d && (d = b.addComponent(f), b.parent = this.node, b._renderFlag |= a.FLAG_BREAK_FLOW, this._userNodeMap[b._id] = d, d._row = -1, d._col = -1, d._tiledLayer = this, this._nodeLocalPosToLayerPos(b, c), this._positionToRowCol(c.x, c.y, p), this._addUserNodeToGrid(d, p), this._updateCullingOffsetByUserNode(b), b.on(cc.Node.EventType.POSITION_CHANGED, this._userNodePosChange, d), b.on(cc.Node.EventType.SIZE_CHANGED, this._userNodeSizeChange, d), true);
        },
        removeUserNode: function (b) {
          var c = b.getComponent(f);
          return !!c && (b.off(cc.Node.EventType.POSITION_CHANGED, this._userNodePosChange, c), b.off(cc.Node.EventType.SIZE_CHANGED, this._userNodeSizeChange, c), this._removeUserNodeFromGrid(c), delete this._userNodeMap[b._id], b._removeComponent(c), c.destroy(), b.removeFromParent(true), b._renderFlag &= ~a.FLAG_BREAK_FLOW, true);
        },
        destroyUserNode: function (a) {
          this.removeUserNode(a);
          a.destroy();
        },
        _nodeLocalPosToLayerPos: function (a, b) {
          b.x = a.x + this._leftDownToCenterX;
          b.y = a.y + this._leftDownToCenterY;
        },
        _getNodesByRowCol: function (a, b) {
          var c = this._userNodeGrid[a];
          if (c) {
            return c[b];
          } else {
            return null;
          }
        },
        _getNodesCountByRow: function (a) {
          var b = this._userNodeGrid[a];
          if (b) {
            return b.count;
          } else {
            return 0;
          }
        },
        _updateAllUserNode: function () {
          this._userNodeGrid = {};
          for (var a in this._userNodeMap) {
            var b = this._userNodeMap[a];
            this._nodeLocalPosToLayerPos(b.node, c);
            this._positionToRowCol(c.x, c.y, p);
            this._addUserNodeToGrid(b, p);
            this._updateCullingOffsetByUserNode(b.node);
          }
        },
        _updateCullingOffsetByUserNode: function (a) {
          if (this._topOffset < a.height) {
            this._topOffset = a.height;
          }
          if (this._downOffset < a.height) {
            this._downOffset = a.height;
          }
          if (this._leftOffset < a.width) {
            this._leftOffset = a.width;
          }
          if (this._rightOffset < a.width) {
            this._rightOffset = a.width;
          }
        },
        _userNodeSizeChange: function () {
          var a = this.node;
          this._tiledLayer._updateCullingOffsetByUserNode(a);
        },
        _userNodePosChange: function () {
          var a = this.node;
          var b = this._tiledLayer;
          b._nodeLocalPosToLayerPos(a, c);
          b._positionToRowCol(c.x, c.y, p);
          b._limitInLayer(p);
          if (!(p.row === this._row && p.col === this._col)) {
            b._removeUserNodeFromGrid(this);
            b._addUserNodeToGrid(this, p);
          }
        },
        _removeUserNodeFromGrid: function (a) {
          var b = a._row;
          var c = a._col;
          var d = a._index;
          var e = this._userNodeGrid[b];
          var f = e && e[c];
          if (f) {
            e.count--;
            f.count--;
            f.list[d] = null;
            if (f.count <= 0) {
              f.list.length = 0;
              f.count = 0;
            }
          }
          a._row = -1;
          a._col = -1;
          a._index = -1;
          this._userNodeDirty = true;
        },
        _limitInLayer: function (a) {
          var b = a.row;
          var c = a.col;
          if (b < 0) {
            a.row = 0;
          }
          if (b > this._rightTop.row) {
            a.row = this._rightTop.row;
          }
          if (c < 0) {
            a.col = 0;
          }
          if (c > this._rightTop.col) {
            a.col = this._rightTop.col;
          }
        },
        _addUserNodeToGrid: function (a, b) {
          var c = b.row;
          var d = b.col;
          var e = this._userNodeGrid[c] = this._userNodeGrid[c] || {
            count: 0
          };
          var f = e[d] = e[d] || {
            count: 0,
            list: []
          };
          a._row = c;
          a._col = d;
          a._index = f.list.length;
          e.count++;
          f.count++;
          f.list.push(a);
          this._userNodeDirty = true;
        },
        _isUserNodeDirty: function () {
          return this._userNodeDirty;
        },
        _setUserNodeDirty: function (a) {
          this._userNodeDirty = a;
        },
        onEnable: function () {
          this._super();
          this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this._syncAnchorPoint, this);
          this._activateMaterial();
        },
        onDisable: function () {
          this._super();
          this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this._syncAnchorPoint, this);
        },
        _syncAnchorPoint: function () {
          var a = this.node;
          this._leftDownToCenterX = a.width * a.anchorX * a.scaleX;
          this._leftDownToCenterY = a.height * a.anchorY * a.scaleY;
          this._cullingDirty = true;
        },
        onDestroy: function () {
          this._super();
          if (this._buffer) {
            this._buffer.destroy();
            this._buffer = null;
          }
          this._renderDataList = null;
        },
        getLayerName: function () {
          return this._layerName;
        },
        setLayerName: function (a) {
          this._layerName = a;
        },
        getProperty: function (a) {
          return this._properties[a];
        },
        getPositionAt: function (a, b) {
          var c;
          var d;
          if (b !== undefined) {
            c = Math.floor(a);
            b = Math.floor(b);
          } else {
            c = Math.floor(a.x);
            b = Math.floor(a.y);
          }
          switch (this._layerOrientation) {
            case cc.TiledMap.Orientation.ORTHO:
              d = this._positionForOrthoAt(c, b);
              break;
            case cc.TiledMap.Orientation.ISO:
              d = this._positionForIsoAt(c, b);
              break;
            case cc.TiledMap.Orientation.HEX:
              d = this._positionForHexAt(c, b);
          }
          return d;
        },
        _isInvalidPosition: function (a, b) {
          if (a && typeof a == "object") {
            var c = a;
            b = c.y;
            a = c.x;
          }
          return a >= this._layerSize.width || b >= this._layerSize.height || a < 0 || b < 0;
        },
        _positionForIsoAt: function (b, c) {
          var d = 0;
          var e = 0;
          var f = Math.floor(b) + Math.floor(c) * this._layerSize.width;
          var g = this._tiles[f];
          if (g) {
            var h = (g & cc.TiledMap.TileFlag.FLIPPED_MASK) >>> 0;
            var a = this._texGrids[h].tileset.tileOffset;
            d = a.x;
            e = a.y;
          }
          return cc.v2(this._mapTileSize.width * 0.5 * (this._layerSize.height + b - c - 1) + d, this._mapTileSize.height * 0.5 * (this._layerSize.width - b + this._layerSize.height - c - 2) - e);
        },
        _positionForOrthoAt: function (b, c) {
          var d = 0;
          var e = 0;
          var f = Math.floor(b) + Math.floor(c) * this._layerSize.width;
          var g = this._tiles[f];
          if (g) {
            var h = (g & cc.TiledMap.TileFlag.FLIPPED_MASK) >>> 0;
            var a = this._texGrids[h].tileset.tileOffset;
            d = a.x;
            e = a.y;
          }
          return cc.v2(b * this._mapTileSize.width + d, (this._layerSize.height - c - 1) * this._mapTileSize.height - e);
        },
        _positionForHexAt: function (b, d) {
          var e;
          var g = this._mapTileSize.width;
          var j = this._mapTileSize.height;
          var k = this._layerSize.height;
          var m = Math.floor(b) + Math.floor(d) * this._layerSize.width;
          var a = this._tiles[m];
          e = this._texGrids[a] ? this._texGrids[a].tileset.tileOffset : {
            x: 0,
            y: 0
          };
          var n = this._staggerIndex === cc.TiledMap.StaggerIndex.STAGGERINDEX_ODD ? 1 : -1;
          var c = 0;
          var o = 0;
          var p = 0;
          var q = 0;
          switch (this._staggerAxis) {
            case cc.TiledMap.StaggerAxis.STAGGERAXIS_Y:
              p = 0;
              if (d % 2 == 1) {
                p = g / 2 * n;
              }
              c = b * g + p + e.x;
              o = (k - d - 1) * (j - (j - this._hexSideLength) / 2) - e.y;
              break;
            case cc.TiledMap.StaggerAxis.STAGGERAXIS_X:
              q = 0;
              if (b % 2 == 1) {
                q = j / 2 * -n;
              }
              c = b * (g - (g - this._hexSideLength) / 2) + e.x;
              o = (k - d - 1) * j + q - e.y;
          }
          return cc.v2(c, o);
        },
        setTilesGIDAt: function (b, c, d, f) {
          if (b && b.length !== 0 && !(f <= 0)) {
            if (d < 0) {
              d = 0;
            }
            if (c < 0) {
              c = 0;
            }
            for (var g = 0, h = c + f, j = d;; j++) {
              for (var k = c; k < h; k++) {
                if (g >= b.length) {
                  return;
                }
                this._updateTileForGID(b[g], k, j);
                g++;
              }
            }
          }
        },
        setTileGIDAt: function (a, b, c, d) {
          if (b === undefined) {
            throw Error(cc.debug.getError(667242));
          }
          var e;
          if (d === undefined && b instanceof cc.Vec2) {
            e = b;
            d = c;
          } else {
            h.x = b;
            h.y = c;
            e = h;
          }
          var f = a & cc.TiledMap.TileFlag.FLIPPED_MASK;
          e.x = Math.floor(e.x);
          e.y = Math.floor(e.y);
          if (this._isInvalidPosition(e)) {
            throw Error(cc.debug.getError(667243));
          }
          if (this._tiles && this._tilesets && this._tilesets.length != 0) {
            if (!(f !== 0 && f < this._tilesets[0].firstGid)) {
              d = d || 0;
              this._updateTileForGID((a | d) >>> 0, e.x, e.y);
            }
          }
        },
        _updateTileForGID: function (b, c, d) {
          var e = c + d * this._layerSize.width | 0;
          if (!(e >= this._tiles.length) && b !== this._tiles[e]) {
            var f = (b & cc.TiledMap.TileFlag.FLIPPED_MASK) >>> 0;
            var g = this._texGrids[f];
            var h = g && g.texId;
            if (g) {
              this._tiles[e] = b;
              this._updateVertex(c, d);
              this._buildMaterial(h);
            } else {
              this._tiles[e] = 0;
            }
            this._cullingDirty = true;
          }
        },
        getTiles: function () {
          return this._tiles;
        },
        getTileGIDAt: function (a, b) {
          if (a === undefined) {
            throw Error(cc.debug.getError(667244));
          }
          var c = a;
          if (b === undefined) {
            c = a.x;
            b = a.y;
          }
          if (this._isInvalidPosition(c, b)) {
            throw Error(cc.debug.getError(667245));
          }
          if (!this._tiles) {
            return null;
          }
          var d = Math.floor(c) + Math.floor(b) * this._layerSize.width;
          return (this._tiles[d] & cc.TiledMap.TileFlag.FLIPPED_MASK) >>> 0;
        },
        getTileFlagsAt: function (a, b) {
          if (!a) {
            throw Error(cc.debug.getError(667246));
          }
          if (b !== undefined) {
            a = cc.v2(a, b);
          }
          if (this._isInvalidPosition(a)) {
            throw Error(cc.debug.getError(667247));
          }
          if (!this._tiles) {
            return null;
          }
          var c = Math.floor(a.x) + Math.floor(a.y) * this._layerSize.width;
          return (this._tiles[c] & cc.TiledMap.TileFlag.FLIPPED_ALL) >>> 0;
        },
        _setCullingDirty: function (a) {
          this._cullingDirty = a;
        },
        _isCullingDirty: function () {
          return this._cullingDirty;
        },
        _updateViewPort: function (b, f, e, g) {
          if (this._viewPort.width !== e || this._viewPort.height !== g || this._viewPort.x !== b || this._viewPort.y !== f) {
            this._viewPort.x = b;
            this._viewPort.y = f;
            this._viewPort.width = e;
            this._viewPort.height = g;
            var i = 1;
            if (this._layerOrientation === cc.TiledMap.Orientation.ISO) {
              i = 2;
            }
            var j = this._viewPort.x - this._offset.x + this._leftDownToCenterX;
            var k = this._viewPort.y - this._offset.y + this._leftDownToCenterY;
            var a = j - this._leftOffset;
            var m = k - this._downOffset;
            var n = j + e + this._rightOffset;
            var l = k + g + this._topOffset;
            var h = this._cullingRect.leftDown;
            var q = this._cullingRect.rightTop;
            if (a < 0) {
              a = 0;
            }
            if (m < 0) {
              m = 0;
            }
            this._positionToRowCol(a, m, p);
            p.row -= i;
            p.col -= i;
            p.row = p.row > 0 ? p.row : 0;
            p.col = p.col > 0 ? p.col : 0;
            if (!(p.row === h.row && p.col === h.col)) {
              h.row = p.row;
              h.col = p.col;
              this._cullingDirty = true;
            }
            if (n < 0 || l < 0) {
              p.row = -1;
              p.col = -1;
            } else {
              this._positionToRowCol(n, l, p);
              p.row++;
              p.col++;
            }
            if (p.row > this._rightTop.row) {
              p.row = this._rightTop.row;
            }
            if (p.col > this._rightTop.col) {
              p.col = this._rightTop.col;
            }
            if (!(p.row === q.row && p.col === q.col)) {
              q.row = p.row;
              q.col = p.col;
              this._cullingDirty = true;
            }
          }
        },
        _positionToRowCol: function (b, g, e) {
          var i = cc.TiledMap;
          var j = i.Orientation;
          var k = i.StaggerAxis;
          var m = this._mapTileSize.width;
          var a = this._mapTileSize.height;
          var n = m * 0.5;
          var c = a * 0.5;
          var l = 0;
          var o = 0;
          var p = 0;
          var q = 0;
          var r = this._staggerAxis;
          this._layerSize.width;
          switch (this._layerOrientation) {
            case j.ORTHO:
              o = Math.floor(b / m);
              l = Math.floor(g / a);
              break;
            case j.ISO:
              o = Math.floor(b / n);
              l = Math.floor(g / c);
              break;
            case j.HEX:
              if (r === k.STAGGERAXIS_Y) {
                p = (l = Math.floor(g / (a - this._diffY1))) % 2 == 1 ? n * this._odd_even : 0;
                o = Math.floor((b - p) / m);
              } else {
                q = (o = Math.floor(b / (m - this._diffX1))) % 2 == 1 ? c * -this._odd_even : 0;
                l = Math.floor((g - q) / a);
              }
          }
          e.row = l;
          e.col = o;
          return e;
        },
        _updateCulling: function () {
          if (this._enableCulling) {
            this.node._updateWorldMatrix();
            j.Mat4.invert(o, this.node._worldMatrix);
            var a = cc.visibleRect;
            var b = cc.Camera.findCamera(this.node);
            if (b) {
              c.x = 0;
              c.y = 0;
              l.x = c.x + a.width;
              l.y = c.y + a.height;
              b.getScreenToWorldPoint(c, c);
              b.getScreenToWorldPoint(l, l);
              j.Vec2.transformMat4(c, c, o);
              j.Vec2.transformMat4(l, l, o);
              this._updateViewPort(c.x, c.y, l.x - c.x, l.y - c.y);
            }
          }
        },
        getLayerOrientation: function () {
          return this._layerOrientation;
        },
        getProperties: function () {
          return this._properties;
        },
        _updateVertex: function (j, k) {
          var e = cc.TiledMap;
          var i = e.TileFlag.FLIPPED_MASK;
          var n = e.StaggerAxis;
          var q = e.Orientation;
          var r = this._vertices;
          var a = this._layerOrientation;
          var o = this._tiles;
          if (o) {
            var c;
            var s;
            var t;
            var z;
            var B;
            var F;
            var G;
            var H = this._rightTop;
            var v = this._mapTileSize.width;
            var g = this._mapTileSize.height;
            var m = v * 0.5;
            var y = g * 0.5;
            var J = this._layerSize.height;
            var E = this._layerSize.width;
            var A = this._texGrids;
            if (a === q.HEX) {
              z = this._staggerAxis;
              B = this._diffX1;
              F = this._diffY1;
              G = this._odd_even;
            }
            var x;
            var K;
            var N;
            var Q;
            var T = 0;
            var U = 0;
            var V = 0;
            var W = 0;
            var X = k * E + j;
            if (c = A[K = (o[X] & i) >>> 0]) {
              if (this._animations[K]) {
                this._hasAniGrid = this._hasAniGrid || true;
              }
              switch (a) {
                case q.ORTHO:
                  s = (T = j) * v;
                  t = (U = J - k - 1) * g;
                  break;
                case q.ISO:
                  s = m * (T = J + j - k - 1);
                  t = y * (U = J + E - j - k - 2);
                  break;
                case q.HEX:
                  s = j * (v - B) + (z === n.STAGGERAXIS_Y && k % 2 == 1 ? m * G : 0);
                  t = (J - k - 1) * (g - F) + (z === n.STAGGERAXIS_X && j % 2 == 1 ? y * -G : 0);
                  T = j;
                  U = J - k - 1;
              }
              var L = r[U] = r[U] || {
                minCol: 0,
                maxCol: 0
              };
              var P = L[T] = L[T] || {};
              if (L.minCol > T) {
                L.minCol = T;
              }
              if (L.maxCol < T) {
                L.maxCol = T;
              }
              if (H.row < U) {
                H.row = U;
              }
              if (H.col < T) {
                H.col = T;
              }
              x = c.tileset.tileOffset;
              s += this._offset.x + x.x;
              t += this._offset.y - x.y;
              V = (V = -x.y + c.tileset._tileSize.height - g) < 0 ? 0 : V;
              N = x.y < 0 ? 0 : x.y;
              Q = -x.x < 0 ? 0 : -x.x;
              W = (W = x.x + c.tileset._tileSize.width - v) < 0 ? 0 : W;
              if (this._rightOffset < Q) {
                this._rightOffset = Q;
              }
              if (this._leftOffset < W) {
                this._leftOffset = W;
              }
              if (this._topOffset < N) {
                this._topOffset = N;
              }
              if (this._downOffset < V) {
                this._downOffset = V;
              }
              P.left = s;
              P.bottom = t;
              P.index = X;
              this._cullingDirty = true;
            }
          }
        },
        _updateVertices: function () {
          this._vertices.length = 0;
          if (this._tiles) {
            var a = this._rightTop;
            a.row = -1;
            a.col = -1;
            var b = this._layerSize.height;
            var c = this._layerSize.width;
            this._topOffset = 0;
            this._downOffset = 0;
            this._leftOffset = 0;
            this._rightOffset = 0;
            this._hasAniGrid = false;
            for (var d = 0; d < b; ++d) {
              for (var e = 0; e < c; ++e) {
                this._updateVertex(e, d);
              }
            }
            this._verticesDirty = false;
          }
        },
        getTiledTileAt: function (a, b, c) {
          if (this._isInvalidPosition(a, b)) {
            throw Error(cc.debug.getError(667248));
          }
          if (!this._tiles) {
            return null;
          }
          var d = Math.floor(a) + Math.floor(b) * this._layerSize.width;
          var e = this._tiledTiles[d];
          if (!e && c) {
            var f = new cc.Node();
            (e = f.addComponent(cc.TiledTile))._x = a;
            e._y = b;
            e._layer = this;
            e._updateInfo();
            f.parent = this.node;
            return e;
          }
          return e;
        },
        setTiledTileAt: function (a, b, c) {
          if (this._isInvalidPosition(a, b)) {
            throw Error(cc.debug.getError(667249));
          }
          if (!this._tiles) {
            return null;
          }
          var d = Math.floor(a) + Math.floor(b) * this._layerSize.width;
          this._tiledTiles[d] = c;
          this._cullingDirty = true;
          this._hasTiledNodeGrid = !!c || this._tiledTiles.some(function (a) {
            return !!a;
          });
          return c;
        },
        getTexture: function (a) {
          a = a || 0;
          if (this._textures && a >= 0 && this._textures.length > a) {
            return this._textures[a];
          } else {
            return null;
          }
        },
        getTextures: function () {
          return this._textures;
        },
        setTexture: function (a) {
          this.setTextures([a]);
        },
        setTextures: function (a) {
          this._textures = a;
          this._activateMaterial();
        },
        getLayerSize: function () {
          return this._layerSize;
        },
        getMapTileSize: function () {
          return this._mapTileSize;
        },
        getTileSet: function (a) {
          a = a || 0;
          if (this._tilesets && a >= 0 && this._tilesets.length > a) {
            return this._tilesets[a];
          } else {
            return null;
          }
        },
        getTileSets: function () {
          return this._tilesets;
        },
        setTileSet: function (a) {
          this.setTileSets([a]);
        },
        setTileSets: function (a) {
          this._tilesets = a;
          for (var b = this._textures = [], c = this._texGrids = [], d = 0; d < a.length; d++) {
            var e = a[d];
            if (e) {
              b[d] = e.sourceImage;
            }
          }
          cc.TiledMap.loadAllTextures(b, function () {
            for (var b = 0, d = a.length; b < d; ++b) {
              var f = a[b];
              if (f) {
                cc.TiledMap.fillTextureGrids(f, c, b);
              }
            }
            this._prepareToRender();
          }.bind(this));
        },
        _traverseAllGrid: function () {
          var b = this._tiles;
          var d = this._texGrids;
          var e = this._tilesetIndexArr;
          var f = this._tilesetIndexToArrIndex = {};
          var g = cc.TiledMap.TileFlag.FLIPPED_MASK;
          e.length = 0;
          for (var h = 0; h < b.length; h++) {
            var i = b[h];
            if (i !== 0) {
              var j = d[i = (i & g) >>> 0];
              if (j) {
                var k = j.texId;
                if (f[k] === undefined) {
                  f[k] = e.length;
                  e.push(k);
                }
              }
            }
          }
        },
        _init: function (b, g, e, i, j) {
          this._cullingDirty = true;
          this._layerInfo = b;
          this._mapInfo = g;
          var k = b._layerSize;
          this._layerName = b.name;
          this._tiles = b._tiles;
          this._properties = b.properties;
          this._layerSize = k;
          this._minGID = b._minGID;
          this._maxGID = b._maxGID;
          this._opacity = b._opacity;
          this._renderOrder = g.renderOrder;
          this._staggerAxis = g.getStaggerAxis();
          this._staggerIndex = g.getStaggerIndex();
          this._hexSideLength = g.getHexSideLength();
          this._animations = g.getTileAnimations();
          this._tilesets = e;
          this._textures = i;
          this._texGrids = j;
          this._layerOrientation = g.orientation;
          this._mapTileSize = g.getTileSize();
          var m = this._mapTileSize.width;
          var a = this._mapTileSize.height;
          var n = this._layerSize.width;
          var c = this._layerSize.height;
          if (this._layerOrientation === cc.TiledMap.Orientation.HEX) {
            var l = cc.TiledMap;
            var h = l.StaggerAxis;
            var o = l.StaggerIndex;
            var f = 0;
            var q = 0;
            this._odd_even = this._staggerIndex === o.STAGGERINDEX_ODD ? 1 : -1;
            if (this._staggerAxis === h.STAGGERAXIS_X) {
              this._diffX1 = (m - this._hexSideLength) / 2;
              this._diffY1 = 0;
              q = a * (c + 0.5);
              f = (m + this._hexSideLength) * Math.floor(n / 2) + m * (n % 2);
            } else {
              this._diffX1 = 0;
              this._diffY1 = (a - this._hexSideLength) / 2;
              f = m * (n + 0.5);
              q = (a + this._hexSideLength) * Math.floor(c / 2) + a * (c % 2);
            }
            this.node.setContentSize(f, q);
          } else if (this._layerOrientation === cc.TiledMap.Orientation.ISO) {
            var r = n + c;
            this.node.setContentSize(m * 0.5 * r, a * 0.5 * r);
          } else {
            this.node.setContentSize(n * m, c * a);
          }
          this._offset = cc.v2(b.offset.x, -b.offset.y);
          this._useAutomaticVertexZ = false;
          this._vertexZvalue = 0;
          this._syncAnchorPoint();
          this._prepareToRender();
        },
        _prepareToRender: function () {
          this._updateVertices();
          this._traverseAllGrid();
          this._updateAllUserNode();
          this._activateMaterial();
        },
        _buildMaterial: function (a) {
          var b = this._texIdToMatIndex;
          if (b[a] !== undefined) {
            return null;
          }
          var d = this._tilesetIndexArr;
          var e = this._tilesetIndexToArrIndex;
          var f = e[a];
          if (f === undefined) {
            e[a] = f = d.length;
            d.push(a);
          }
          var g = this._textures[a];
          var h = this._materials[f];
          if (!h) {
            h = n.getBuiltinMaterial("2d-sprite");
          }
          (h = k.default.create(h, this)).define("CC_USE_MODEL", true);
          h.setProperty("texture", g);
          this._materials[f] = h;
          b[a] = f;
          return h;
        },
        _activateMaterial: function () {
          var a = this._tilesetIndexArr;
          if (a.length !== 0) {
            for (var b = a.length, c = 0; c < b; c++) {
              this._buildMaterial(a[c]);
            }
            this._materials.length = b;
            this.markForRender(true);
          } else {
            this.disableRender();
          }
        }
      });
      cc.TiledLayer = g.exports = d;
    }, {
      "../core/assets/material/CCMaterial": 76,
      "../core/assets/material/material-variant": 83,
      "../core/components/CCRenderComponent": 109,
      "../core/renderer/render-flow": 194,
      "../core/value-types": 251
    }],
    308: [function (b, d) {
      "use strict";
  
      b("./CCTMXXMLParser");
      b("./CCTiledMapAsset");
      b("./CCTiledLayer");
      b("./CCTiledTile");
      b("./CCTiledObjectGroup");
      var e = cc.Enum({
        ORTHO: 0,
        HEX: 1,
        ISO: 2
      });
      var f = cc.Enum({
        NONE: 0,
        MAP: 1,
        LAYER: 2,
        OBJECTGROUP: 3,
        OBJECT: 4,
        TILE: 5
      });
      var g = cc.Enum({
        HORIZONTAL: 2147483648,
        VERTICAL: 1073741824,
        DIAGONAL: 536870912,
        FLIPPED_ALL: 4026531840,
        FLIPPED_MASK: 268435455
      });
      var h = cc.Enum({
        STAGGERAXIS_X: 0,
        STAGGERAXIS_Y: 1
      });
      var i = cc.Enum({
        STAGGERINDEX_ODD: 0,
        STAGGERINDEX_EVEN: 1
      });
      var a = cc.Enum({
        RightDown: 0,
        RightUp: 1,
        LeftDown: 2,
        LeftUp: 3
      });
      var j = cc.Enum({
        RECT: 0,
        ELLIPSE: 1,
        POLYGON: 2,
        POLYLINE: 3,
        IMAGE: 4,
        TEXT: 5
      });
      var c = cc.Class({
        name: "cc.TiledMap",
        extends: cc.Component,
        editor: false,
        ctor: function () {
          this._texGrids = [];
          this._textures = [];
          this._tilesets = [];
          this._animations = [];
          this._imageLayers = [];
          this._layers = [];
          this._groups = [];
          this._images = [];
          this._properties = [];
          this._tileProperties = [];
          this._mapSize = cc.size(0, 0);
          this._tileSize = cc.size(0, 0);
        },
        statics: {
          Orientation: e,
          Property: f,
          TileFlag: g,
          StaggerAxis: h,
          StaggerIndex: i,
          TMXObjectType: j,
          RenderOrder: a
        },
        properties: {
          _tmxFile: {
            default: null,
            type: cc.TiledMapAsset
          },
          tmxAsset: {
            get: function () {
              return this._tmxFile;
            },
            set: function (a) {
              if (this._tmxFile !== a) {
                this._tmxFile = a;
                this._applyFile();
              }
            },
            type: cc.TiledMapAsset
          }
        },
        getMapSize: function () {
          return this._mapSize;
        },
        getTileSize: function () {
          return this._tileSize;
        },
        getMapOrientation: function () {
          return this._mapOrientation;
        },
        getObjectGroups: function () {
          return this._groups;
        },
        getObjectGroup: function (a) {
          for (var b = this._groups, c = 0, d = b.length; c < d; c++) {
            var e = b[c];
            if (e && e.getGroupName() === a) {
              return e;
            }
          }
          return null;
        },
        enableCulling: function (a) {
          for (var b = this._layers, c = 0; c < b.length; ++c) {
            b[c].enableCulling(a);
          }
        },
        getProperties: function () {
          return this._properties;
        },
        getLayers: function () {
          return this._layers;
        },
        getLayer: function (a) {
          for (var b = this._layers, c = 0, d = b.length; c < d; c++) {
            var e = b[c];
            if (e && e.getLayerName() === a) {
              return e;
            }
          }
          return null;
        },
        _changeLayer: function (a, b) {
          for (var c = this._layers, d = 0, e = c.length; d < e; d++) {
            var f = c[d];
            if (f && f.getLayerName() === a) {
              c[d] = b;
              return;
            }
          }
        },
        getProperty: function (a) {
          return this._properties[a.toString()];
        },
        getPropertiesForGID: function (a) {
          return this._tileProperties[a];
        },
        __preload: function () {
          if (this._tmxFile) {
            this._applyFile();
          }
        },
        onEnable: function () {
          this.node.on(cc.Node.EventType.ANCHOR_CHANGED, this._syncAnchorPoint, this);
        },
        onDisable: function () {
          this.node.off(cc.Node.EventType.ANCHOR_CHANGED, this._syncAnchorPoint, this);
        },
        _applyFile: function () {
          var b = this._tmxFile;
          if (b) {
            for (var g = b.textures, j = b.textureNames, k = b.textureSizes, m = {}, n = {}, q = 0; q < g.length; ++q) {
              var r = j[q];
              m[r] = g[q];
              n[r] = k[q];
            }
            var s = {};
            g = b.imageLayerTextures;
            j = b.imageLayerTextureNames;
            for (var c = 0; c < g.length; ++c) {
              s[j[c]] = g[c];
            }
            for (var t = b.tsxFileNames, h = b.tsxFiles, u = {}, f = 0; f < t.length; ++f) {
              if (t[f].length > 0) {
                u[t[f]] = h[f].text;
              }
            }
            var v = new cc.TMXMapInfo(b.tmxXmlStr, u, m, n, s);
            var w = v.getTilesets();
            if (!!w) {
              w.length;
            }
            this._buildWithMapInfo(v);
          } else {
            this._releaseMapInfo();
          }
        },
        _releaseMapInfo: function () {
          for (var b = this._layers, d = 0, f = b.length; d < f; d++) {
            b[d].node.removeFromParent(true);
            b[d].node.destroy();
          }
          b.length = 0;
          for (var g = this._groups, h = 0, i = g.length; h < i; h++) {
            g[h].node.removeFromParent(true);
            g[h].node.destroy();
          }
          g.length = 0;
          for (var j = this._images, a = 0, k = j.length; a < k; a++) {
            j[a].removeFromParent(true);
            j[a].destroy();
          }
          j.length = 0;
        },
        _syncAnchorPoint: function () {
          var b;
          var c;
          var d = this.node.getAnchorPoint();
          var f = this.node.width * d.x;
          var g = this.node.height * (1 - d.y);
          b = 0;
          c = this._layers.length;
          for (; b < c; b++) {
            this._layers[b].node.setAnchorPoint(d);
          }
          b = 0;
          c = this._groups.length;
          for (; b < c; b++) {
            var h = this._groups[b];
            var i = h.node;
            i.anchorX = 0.5;
            i.anchorY = 0.5;
            i.x = h._offset.x - f + i.width * i.anchorX;
            i.y = h._offset.y + g - i.height * i.anchorY;
          }
          b = 0;
          c = this._images.length;
          for (; b < c; b++) {
            var j = this._images[b];
            j.anchorX = 0.5;
            j.anchorY = 0.5;
            j.x = j._offset.x - f + j.width * j.anchorX;
            j.y = j._offset.y + g - j.height * j.anchorY;
          }
        },
        _fillAniGrids: function (b, c) {
          for (var d in c) {
            var e = c[d];
            if (e) {
              for (var f = e.frames, g = 0; g < f.length; g++) {
                var h = f[g];
                h.grid = b[h.tileid];
              }
            }
          }
        },
        _buildLayerAndGroup: function () {
          var j = this._tilesets;
          var k = this._texGrids;
          var e = this._animations;
          k.length = 0;
          for (var i = 0, q = j.length; i < q; ++i) {
            var r = j[i];
            if (r) {
              cc.TiledMap.fillTextureGrids(r, k, i);
            }
          }
          this._fillAniGrids(k, e);
          for (var t = this._layers, z = this._groups, B = this._images, F = {}, l = 0, G = t.length; l < G; l++) {
            F[t[l].node._name] = true;
          }
          for (var u = 0, H = z.length; u < H; u++) {
            F[z[u].node._name] = true;
          }
          for (var d = 0, J = B.length; d < J; d++) {
            F[B[d]._name] = true;
          }
          t = this._layers = [];
          z = this._groups = [];
          B = this._images = [];
          var p = this._mapInfo;
          var v = this.node;
          var g = p.getAllChildren();
          var m = this._textures;
          var y = 0;
          var K = 0;
          if (g && g.length > 0) {
            for (var Q = 0, U = g.length; Q < U; Q++) {
              var x = g[Q];
              var V = x.name;
              var W = this.node.getChildByName(V);
              F[V] = false;
              if (!W) {
                (W = new cc.Node()).name = V;
                v.addChild(W);
              }
              W.setSiblingIndex(Q);
              W.active = x.visible;
              if (x instanceof cc.TMXLayerInfo) {
                var X = W.getComponent(cc.TiledLayer);
                if (!X) {
                  X = W.addComponent(cc.TiledLayer);
                }
                X._init(x, p, j, m, k);
                x.ownTiles = false;
                t.push(X);
              } else if (x instanceof cc.TMXObjectGroupInfo) {
                var Y = W.getComponent(cc.TiledObjectGroup);
                if (!Y) {
                  Y = W.addComponent(cc.TiledObjectGroup);
                }
                Y._init(x, p, k);
                z.push(Y);
              } else if (x instanceof cc.TMXImageLayerInfo) {
                var Z = x.sourceImage;
                W.opacity = x.opacity;
                W.layerInfo = x;
                W._offset = cc.v2(x.offset.x, -x.offset.y);
                var $ = W.getComponent(cc.Sprite);
                if (!$) {
                  $ = W.addComponent(cc.Sprite);
                }
                var aa = $.spriteFrame || new cc.SpriteFrame();
                aa.setTexture(Z);
                $.spriteFrame = aa;
                W.width = Z.width;
                W.height = Z.height;
                B.push(W);
              }
              y = Math.max(y, W.width);
              K = Math.max(K, W.height);
            }
          }
          for (var ba = v.children, L = 0, ca = ba.length; L < ca; L++) {
            var D = ba[L];
            if (F[D._name]) {
              D.destroy();
            }
          }
          this.node.width = y;
          this.node.height = K;
          this._syncAnchorPoint();
        },
        _buildWithMapInfo: function (b) {
          this._mapInfo = b;
          this._mapSize = b.getMapSize();
          this._tileSize = b.getTileSize();
          this._mapOrientation = b.orientation;
          this._properties = b.properties;
          this._tileProperties = b.getTileProperties();
          this._imageLayers = b.getImageLayers();
          this._animations = b.getTileAnimations();
          this._tilesets = b.getTilesets();
          var c = this._tilesets;
          this._textures.length = 0;
          for (var d = [], e = 0, f = c.length; e < f; ++e) {
            var g = c[e];
            if (g && g.sourceImage) {
              this._textures[e] = g.sourceImage;
              d.push(g.sourceImage);
            }
          }
          for (var h = 0; h < this._imageLayers.length; h++) {
            var i = this._imageLayers[h];
            if (i && i.sourceImage) {
              d.push(i.sourceImage);
            }
          }
          cc.TiledMap.loadAllTextures(d, function () {
            this._buildLayerAndGroup();
          }.bind(this));
        },
        update: function (b) {
          var c = this._animations;
          var d = this._texGrids;
          for (var e in c) {
            var f = c[e];
            var g = f.frames;
            var h = g[f.frameIdx];
            f.dt += b;
            if (h.duration < f.dt) {
              f.dt = 0;
              f.frameIdx++;
              if (f.frameIdx >= g.length) {
                f.frameIdx = 0;
              }
              h = g[f.frameIdx];
            }
            d[e] = h.grid;
          }
        }
      });
      cc.TiledMap = d.exports = c;
      cc.TiledMap.loadAllTextures = function (b, c) {
        var d = b.length;
        if (d !== 0) {
          for (var e = 0, f = function () {
              if (++e >= d) {
                c();
              }
            }, g = 0; g < d; g++) {
            var h = b[g];
            if (h.loaded) {
              f();
            } else {
              h.once("load", function () {
                f();
              });
            }
          }
        } else {
          c();
        }
      };
      cc.TiledMap.fillTextureGrids = function (b, g, e) {
        var i = b.sourceImage;
        if (!(b.imageSize.width && b.imageSize.height)) {
          b.imageSize.width = i.width;
          b.imageSize.height = i.height;
        }
        var j = b._tileSize.width;
        var k = b._tileSize.height;
        var m = i.width;
        var a = i.height;
        var n = b.spacing;
        var c = b.margin;
        var l = Math.floor((m - c * 2 + n) / (j + n));
        var h = Math.floor((a - c * 2 + n) / (k + n)) * l;
        var o = b.firstGid;
        var q = null;
        var r = !!g[o];
        var s = cc.macro.FIX_ARTIFACTS_BY_STRECHING_TEXEL_TMX ? 0.5 : 0;
        if (h <= 0) {
          h = 1;
        }
        for (var p = b.firstGid + h; o < p && (r && !g[o] && (r = false), r || !g[o]); ++o) {
          q = {
            texId: e,
            tileset: b,
            x: 0,
            y: 0,
            width: j,
            height: k,
            t: 0,
            l: 0,
            r: 0,
            b: 0,
            gid: o
          };
          b.rectForGID(o, q);
          q.x += s;
          q.y += s;
          q.width -= s * 2;
          q.height -= s * 2;
          q.t = q.y / a;
          q.l = q.x / m;
          q.r = (q.x + q.width) / m;
          q.b = (q.y + q.height) / a;
          g[o] = q;
        }
      };
      cc.js.obsolete(cc.TiledMap.prototype, "cc.TiledMap.tmxFile", "tmxAsset", true);
      cc.js.get(cc.TiledMap.prototype, "mapLoaded", function () {
        return [];
      }, false);
    }, {
      "./CCTMXXMLParser": 306,
      "./CCTiledLayer": 307,
      "./CCTiledMapAsset": 309,
      "./CCTiledObjectGroup": 311,
      "./CCTiledTile": 312
    }],
    309: [function (a, b) {
      "use strict";
  
      var c = cc.Class({
        name: "cc.TiledMapAsset",
        extends: cc.Asset,
        properties: {
          tmxXmlStr: "",
          textures: {
            default: [],
            type: [cc.Texture2D]
          },
          textureNames: [cc.String],
          textureSizes: {
            default: [],
            type: [cc.Size]
          },
          imageLayerTextures: {
            default: [],
            type: [cc.Texture2D]
          },
          imageLayerTextureNames: [cc.String],
          tsxFiles: [cc.TextAsset],
          tsxFileNames: [cc.String]
        },
        statics: {
          preventDeferredLoadDependents: true
        },
        createNode: false
      });
      cc.TiledMapAsset = c;
      b.exports = c;
    }, {}],
    310: [function (a, b) {
      "use strict";
  
      var c;
      var d = (c = a("../renderer/core/input-assembler")) && c.__esModule ? c : {
        default: c
      };
      var e = cc.Class({
        name: "cc.TiledMapRenderDataList",
        ctor: function () {
          this._dataList = [];
          this._offset = 0;
        },
        _pushRenderData: function () {
          var a = {
            ia: new d.default(),
            nodesRenderList: []
          };
          this._dataList.push(a);
        },
        popRenderData: function (a) {
          if (this._offset >= this._dataList.length) {
            this._pushRenderData();
          }
          var b = this._dataList[this._offset];
          b.nodesRenderList.length = 0;
          var c = b.ia;
          c._vertexBuffer = a._vb;
          c._indexBuffer = a._ib;
          c._start = a.indiceOffset;
          c._count = 0;
          this._offset++;
          return b;
        },
        pushNodesList: function (a, b) {
          a.nodesRenderList.push(b);
        },
        reset: function () {
          this._offset = 0;
        }
      });
      cc.TiledMapRenderDataList = b.exports = e;
    }, {
      "../renderer/core/input-assembler": 272
    }],
    311: [function (a, b) {
      "use strict";
  
      var c = cc.Class({
        name: "cc.TiledObjectGroup",
        extends: cc.Component,
        getPositionOffset: function () {
          return this._positionOffset;
        },
        getProperties: function () {
          return this._properties;
        },
        getGroupName: function () {
          return this._groupName;
        },
        getProperty: function (a) {
          return this._properties[a.toString()];
        },
        getObject: function (a) {
          for (var b = 0, c = this._objects.length; b < c; b++) {
            var d = this._objects[b];
            if (d && d.name === a) {
              return d;
            }
          }
          return null;
        },
        getObjects: function () {
          return this._objects;
        },
        _init: function (q, t, e) {
          var i = cc.TiledMap;
          var n = i.TMXObjectType;
          var r = i.Orientation;
          var s = i.StaggerAxis;
          var a = i.TileFlag;
          var o = a.FLIPPED_MASK;
          var c = a.HORIZONTAL;
          var l = a.VERTICAL;
          this._groupName = q.name;
          this._positionOffset = q.offset;
          this._mapInfo = t;
          this._properties = q.getProperties();
          this._offset = cc.v2(q.offset.x, -q.offset.y);
          this._opacity = q._opacity;
          var h = t._mapSize;
          var u = t._tileSize;
          var f = 0;
          var J = 0;
          if (t.orientation === r.HEX) {
            if (t.getStaggerAxis() === s.STAGGERAXIS_X) {
              J = u.height * (h.height + 0.5);
              f = (u.width + t.getHexSideLength()) * Math.floor(h.width / 2) + u.width * (h.width % 2);
            } else {
              f = u.width * (h.width + 0.5);
              J = (u.height + t.getHexSideLength()) * Math.floor(h.height / 2) + u.height * (h.height % 2);
            }
          } else if (t.orientation === r.ISO) {
            var K = h.width + h.height;
            f = u.width * 0.5 * K;
            J = u.height * 0.5 * K;
          } else {
            f = h.width * u.width;
            J = h.height * u.height;
          }
          this.node.setContentSize(f, J);
          for (var p = f * this.node.anchorX, v = J * (1 - this.node.anchorY), g = q._objects, m = {}, y = 0, Q = g.length; y < Q; y++) {
            var E = g[y];
            var Z = E.type;
            E.offset = cc.v2(E.x, E.y);
            var $ = E.points || E.polylinePoints;
            if ($) {
              for (var aa = 0; aa < $.length; aa++) {
                $[aa].y *= -1;
              }
            }
            if (r.ISO !== t.orientation) {
              E.y = J - E.y;
            } else {
              var ba = E.x / u.height;
              var ca = E.y / u.height;
              E.x = u.width * 0.5 * (h.height + ba - ca);
              E.y = u.height * 0.5 * (h.width + h.height - ba - ca);
            }
            if (Z === n.TEXT) {
              var da = "text" + E.id;
              m[da] = true;
              var ea = this.node.getChildByName(da);
              if (!ea) {
                ea = new cc.Node();
              }
              ea.active = E.visible;
              ea.anchorX = 0;
              ea.anchorY = 1;
              ea.angle = -E.rotation;
              ea.x = E.x - p;
              ea.y = E.y - v;
              ea.name = da;
              ea.parent = this.node;
              ea.color = E.color;
              ea.opacity = this._opacity;
              ea.setSiblingIndex(y);
              var fa = ea.getComponent(cc.Label);
              if (!fa) {
                fa = ea.addComponent(cc.Label);
              }
              fa.overflow = cc.Label.Overflow.SHRINK;
              fa.lineHeight = E.height;
              fa.string = E.text;
              fa.horizontalAlign = E.halign;
              fa.verticalAlign = E.valign;
              fa.fontSize = E.pixelsize;
              ea.width = E.width;
              ea.height = E.height;
            }
            if (Z === n.IMAGE) {
              var ga = E.gid;
              var ha = e[(ga & o) >>> 0];
              if (!ha) {
                continue;
              }
              var ia = ha.tileset;
              var ja = "img" + E.id;
              m[ja] = true;
              var ka = this.node.getChildByName(ja);
              var la = E.width || ha.width;
              var ma = E.height || ha.height;
              var na = ia.tileOffset.x;
              var oa = ia.tileOffset.y;
              if (ka instanceof cc.PrivateNode) {
                ka.removeFromParent();
                ka.destroy();
                ka = null;
              }
              if (!ka) {
                ka = new cc.Node();
              }
              if (r.ISO == t.orientation) {
                ka.anchorX = 0.5 + na / la;
                ka.anchorY = oa / ma;
              } else {
                ka.anchorX = na / la;
                ka.anchorY = oa / ma;
              }
              ka.active = E.visible;
              ka.angle = -E.rotation;
              ka.x = E.x - p;
              ka.y = E.y - v;
              ka.name = ja;
              ka.parent = this.node;
              ka.opacity = this._opacity;
              ka.setSiblingIndex(y);
              var pa = ka.getComponent(cc.Sprite);
              if (!pa) {
                pa = ka.addComponent(cc.Sprite);
              }
              var qa = pa.spriteFrame;
              if (!qa) {
                qa = new cc.SpriteFrame();
              }
              if ((ga & c) >>> 0) {
                qa.setFlipX(true);
              } else {
                qa.setFlipX(false);
              }
              if ((ga & l) >>> 0) {
                qa.setFlipY(true);
              } else {
                qa.setFlipY(false);
              }
              qa.setTexture(ha.tileset.sourceImage, cc.rect(ha));
              pa.spriteFrame = qa;
              pa.setVertsDirty();
              ka.width = la;
              ka.height = ma;
            }
          }
          this._objects = g;
          for (var ra = this.node.children, G = /^(?:img|text)\d+$/, H = 0, sa = ra.length; H < sa; H++) {
            var X = ra[H];
            var ta = X._name;
            if (G.test(ta) && !m[ta]) {
              X.destroy();
            }
          }
        }
      });
      cc.TiledObjectGroup = b.exports = c;
    }, {}],
    312: [function (a, b) {
      "use strict";
  
      var c = cc.Class({
        name: "cc.TiledTile",
        extends: cc.Component,
        editor: false,
        ctor: function () {
          this._layer = null;
        },
        properties: {
          _x: 0,
          _y: 0,
          x: {
            get: function () {
              return this._x;
            },
            set: function (a) {
              if (a !== this._x) {
                if (!(this._layer && this._layer._isInvalidPosition(a, this._y))) {
                  this._resetTile();
                  this._x = a;
                  this._updateInfo();
                }
              }
            },
            type: cc.Integer
          },
          y: {
            get: function () {
              return this._y;
            },
            set: function (a) {
              if (a !== this._y) {
                if (!(this._layer && this._layer._isInvalidPosition(this._x, a))) {
                  this._resetTile();
                  this._y = a;
                  this._updateInfo();
                }
              }
            },
            type: cc.Integer
          },
          gid: {
            get: function () {
              if (this._layer) {
                return this._layer.getTileGIDAt(this._x, this._y);
              } else {
                return 0;
              }
            },
            set: function (a) {
              if (this._layer) {
                this._layer.setTileGIDAt(a, this._x, this._y);
              }
            },
            type: cc.Integer
          }
        },
        onEnable: function () {
          var a = this.node.parent;
          this._layer = a.getComponent(cc.TiledLayer);
          this._resetTile();
          this._updateInfo();
        },
        onDisable: function () {
          this._resetTile();
        },
        _resetTile: function () {
          if (this._layer && this._layer.getTiledTileAt(this._x, this._y) === this) {
            this._layer.setTiledTileAt(this._x, this._y, null);
          }
        },
        _updateInfo: function () {
          if (this._layer) {
            var a = this._x;
            var b = this._y;
            if (!this._layer.getTiledTileAt(a, b)) {
              this.node.setPosition(this._layer.getPositionAt(a, b));
              this._layer.setTiledTileAt(a, b, this);
            }
          }
        }
      });
      cc.TiledTile = b.exports = c;
    }, {}],
    313: [function (a) {
      "use strict";
  
      a("./CCTiledMap");
      a("./CCTiledMapRenderDataList");
      a("./tiledmap-buffer");
      a("./tmx-layer-assembler");
    }, {
      "./CCTiledMap": 308,
      "./CCTiledMapRenderDataList": 310,
      "./tiledmap-buffer": 314,
      "./tmx-layer-assembler": 315
    }],
    314: [function (a, b) {
      "use strict";
  
      var c = cc.Class({
        name: "cc.TiledMapBuffer",
        extends: a("../core/renderer/webgl/quad-buffer"),
        _updateOffset: function () {
          var a = this._offsetInfo;
          a.vertexOffset = this.vertexOffset;
          a.indiceOffset = this.indiceOffset;
          a.byteOffset = this.byteOffset;
        },
        adjust: function (a, b) {
          this.vertexOffset += a;
          this.indiceOffset += b;
          this.indiceStart = this.indiceOffset;
          this.byteOffset = this.byteOffset + a * this._vertexBytes;
          this._dirty = true;
        }
      });
      cc.TiledMapBuffer = b.exports = c;
    }, {
      "../core/renderer/webgl/quad-buffer": 222
    }],
    315: [function (j, q, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var i;
      var t = (i = j("../core/renderer/assembler")) && i.__esModule ? i : {
        default: i
      };
      var G = j("../core/value-types");
      function s(a, b) {
        return (s = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      var r = j("./CCTiledLayer");
      var o = j("./CCTiledMap");
      var c = o.TileFlag;
      var J = c.FLIPPED_MASK;
      var h = j("../core/renderer/");
      var l = j("../core/renderer/webgl/vertex-format").vfmtPosUvColor;
      var u = parseInt(10922.5);
      var d = o.RenderOrder;
      var f = j("../core/renderer/render-flow");
      var H = cc.mat4();
      var v = cc.v3();
      var g = {
        row: 0,
        col: 0
      };
      var m = {
        x: 0,
        y: 0
      };
      var p = {
        x: 0,
        y: 0
      };
      var K = {
        x: 0,
        y: 0
      };
      var $ = {
        x: 0,
        y: 0
      };
      var aa = null;
      var ba = null;
      var ca = 0;
      var da = 0;
      var ea = 0;
      var fa = 0;
      var Q = null;
      var W = null;
      var ga = null;
      var ha = null;
      var ia = null;
      var ja = null;
      var ka = null;
      var la = null;
      function X(a) {
        a._updateLocalMatrix();
        G.Mat4.mul(a._worldMatrix, Q, a._matrix);
        a._renderFlag &= ~(f.FLAG_TRANSFORM | f.FLAG_BREAK_FLOW);
        f.visitRootNode(a);
        a._renderFlag |= f.FLAG_BREAK_FLOW;
      }
      function B() {
        if (ba._count !== 0) {
          W.material = aa.material;
          W.node = ja.node;
          W._flushIA(aa.ia);
          if (ca >= u) {
            ha.uploadData();
            ha.switchBuffer();
            ka = ha._vData;
            la = ha._uintVData;
            aa = ga.popRenderData(ha);
            ba = aa.ia;
            da = 0;
            ca = 0;
          } else {
            aa = ga.popRenderData(ha);
            ba = aa.ia;
          }
          aa.material = ia;
        }
      }
      function V(b, c) {
        var d = ja._getNodesByRowCol(b, c);
        if (d && d.count != 0) {
          var e = d.list;
          var f = 0;
          var g = 0;
          B();
          W.worldMatDirty++;
          for (; f < d.count;) {
            var h = e[g];
            g++;
            if (h) {
              X(h.node);
              if (f !== g) {
                e[f] = h;
                h._index = f;
              }
              f++;
            }
          }
          e.length = f;
          W.worldMatDirty--;
          ga.pushNodesList(aa, e);
          W._flush();
          W.node = ja.node;
        }
      }
      function k(a, b) {
        m.x = a.l;
        m.y = a.t;
        p.x = a.r;
        p.y = a.t;
        K.x = a.l;
        K.y = a.b;
        $.x = a.r;
        $.y = a.b;
        var d = null;
        if ((b & c.DIAGONAL) >>> 0) {
          d = p;
          p = K;
          K = d;
        }
        if ((b & c.HORIZONTAL) >>> 0) {
          d = m;
          m = p;
          p = d;
          d = K;
          K = $;
          $ = d;
        }
        if ((b & c.VERTICAL) >>> 0) {
          d = m;
          m = K;
          K = d;
          d = p;
          p = $;
          $ = d;
        }
      }
      var U = function (a) {
        var b;
        var c;
        function f() {
          return a.apply(this, arguments) || this;
        }
        c = a;
        (b = f).prototype = Object.create(c.prototype);
        b.prototype.constructor = b;
        s(b, c);
        var j = f.prototype;
        j.updateRenderData = function (a) {
          if (!a._renderDataList) {
            a._buffer = new cc.TiledMapBuffer(h._handle, l);
            a._renderDataList = new cc.TiledMapRenderDataList();
          }
        };
        j.fillBuffers = function (b, j) {
          if (b._vertices.length !== 0) {
            b._updateCulling();
            var e = b.node;
            ea = b._leftDownToCenterX;
            fa = b._leftDownToCenterY;
            Q = e._worldMatrix;
            W = j;
            ja = b;
            ga = b._renderDataList;
            ha = b._buffer;
            if (b._isCullingDirty() || b._isUserNodeDirty() || b._hasAnimation() || b._hasTiledNode()) {
              var i;
              var k;
              ha.reset();
              if (b._enableCulling) {
                var m = b._cullingRect;
                i = m.leftDown;
                k = m.rightTop;
              } else {
                i = g;
                k = b._rightTop;
              }
              var q = (k.row - i.row + 1) * (k.col - i.col + 1);
              if (q > u) {
                q = u;
              }
              ha.request(q * 4, q * 6);
              switch (b._renderOrder) {
                case d.RightDown:
                  this.traverseGrids(i, k, -1, 1);
                  break;
                case d.LeftDown:
                  this.traverseGrids(i, k, -1, -1);
                  break;
                case d.RightUp:
                  this.traverseGrids(i, k, 1, 1);
                  break;
                case d.LeftUp:
                  this.traverseGrids(i, k, 1, -1);
              }
              b._setCullingDirty(false);
              b._setUserNodeDirty(false);
            } else {
              for (var s = null, t = null, v = null, w = 0; w < ga._offset; w++) {
                if ((t = (s = ga._dataList[w]).nodesRenderList).length > 0) {
                  j.worldMatDirty++;
                  for (var x = 0; x < t.length; x++) {
                    if (v = t[x]) {
                      for (var y = 0; y < v.length; y++) {
                        var z = v[y];
                        if (z) {
                          X(z.node);
                        }
                      }
                    }
                  }
                  j.worldMatDirty--;
                  j._flush();
                }
                if (s.ia._count > 0) {
                  j.material = s.material;
                  j.node = e;
                  j._flushIA(s.ia);
                }
              }
            }
            aa = null;
            ba = null;
            Q = null;
            W = null;
            ga = null;
            ha = null;
            ia = null;
            ja = null;
            ka = null;
            la = null;
          }
        };
        j.traverseGrids = function (b, d, e, h) {
          ga.reset();
          if (!(d.row < 0 || d.col < 0)) {
            aa = ga.popRenderData(ha);
            ba = aa.ia;
            ka = ha._vData;
            la = ha._uintVData;
            ca = 0;
            da = 0;
            ia = null;
            var i = ja.node;
            var n = (i.parent ? i.parent._opacity / 255 : 1) * i._opacity;
            i._color._fastSetA(n);
            var r;
            var s;
            var t;
            var x;
            var y;
            var A;
            var C;
            var D;
            var E = i._color._val;
            var v = ja._tiledTiles;
            var g = ja._texGrids;
            var F = ja._tiles;
            var w = ja._texIdToMatIndex;
            var I = ja._materials;
            var z = ja._vertices;
            var G = null;
            var L = 0;
            var M = 0;
            var N = 0;
            var O = 0;
            var P = 0;
            var R = null;
            var S = -1;
            var T = 0;
            var U = true;
            for (e == -1 ? (x = d.row, y = b.row) : (x = b.row, y = d.row); (y - x) * e >= 0; x += e) {
              r = z[x];
              U = (T = ja._getNodesCountByRow(x)) == 0 && r != null;
              if (h == 1) {
                s = U && b.col < r.minCol ? r.minCol : b.col;
                t = U && d.col > r.maxCol ? r.maxCol : d.col;
              } else {
                s = U && d.col > r.maxCol ? r.maxCol : d.col;
                t = U && b.col < r.minCol ? r.minCol : b.col;
              }
              r = z[x];
              U = (T = ja._getNodesCountByRow(x)) == 0 && r != null;
              if (h == 1) {
                s = U && b.col < r.minCol ? r.minCol : b.col;
                t = U && d.col > r.maxCol ? r.maxCol : d.col;
              } else {
                s = U && d.col > r.maxCol ? r.maxCol : d.col;
                t = U && b.col < r.minCol ? r.minCol : b.col;
              }
              for (; (t - s) * h >= 0; s += h) {
                if (A = r && r[s]) {
                  if (G = g[((L = F[A.index]) & J) >>> 0]) {
                    if (S !== G.texId) {
                      if (S !== -1) {
                        B();
                      }
                      D = w[S = G.texId];
                      ia = I[D];
                      aa.material = ia;
                    }
                    if (ia) {
                      M = A.left - ea;
                      N = A.bottom - fa;
                      O = M + (C = G.tileset._tileSize).width;
                      P = N + C.height;
                      if (R = v[A.index]) {
                        if (R.node.active) {
                          R.node._color._fastSetA(R.node._opacity * n / 255);
                          this.fillByTiledNode(R.node, ka, la, M, O, P, N);
                        }
                      } else {
                        ka[da] = M;
                        ka[da + 1] = P;
                        la[da + 4] = E;
                        ka[da + 5] = M;
                        ka[da + 6] = N;
                        la[da + 9] = E;
                        ka[da + 10] = O;
                        ka[da + 11] = P;
                        la[da + 14] = E;
                        ka[da + 15] = O;
                        ka[da + 16] = N;
                        la[da + 19] = E;
                      }
                      k(G, L);
                      ka[da + 2] = m.x;
                      ka[da + 3] = m.y;
                      ka[da + 7] = K.x;
                      ka[da + 8] = K.y;
                      ka[da + 12] = p.x;
                      ka[da + 13] = p.y;
                      ka[da + 17] = $.x;
                      ka[da + 18] = $.y;
                      da += 20;
                      ha.adjust(4, 6);
                      ba._count += 6;
                      ca++;
                      if (T > 0) {
                        V(x, s);
                      }
                      if (ca >= u) {
                        B();
                      }
                    }
                  }
                } else if (T > 0) {
                  V(x, s);
                }
              }
            }
            ha.uploadData();
            if (ba._count > 0) {
              W.material = aa.material;
              W.node = ja.node;
              W._flushIA(aa.ia);
            }
          }
        };
        j.fillByTiledNode = function (b, g, e, i, j, k, a) {
          b._updateLocalMatrix();
          G.Mat4.copy(H, b._matrix);
          G.Vec3.set(v, -(i + ea), -(a + fa), 0);
          G.Mat4.transform(H, H, v);
          var m = H.m;
          var c = m[0];
          var l = m[1];
          var h = m[4];
          var n = m[5];
          var f = m[12];
          var d = m[13];
          var o = b._color._val;
          g[da] = i * c + k * h + f;
          g[da + 1] = i * l + k * n + d;
          e[da + 4] = o;
          g[da + 5] = i * c + a * h + f;
          g[da + 6] = i * l + a * n + d;
          e[da + 9] = o;
          g[da + 10] = j * c + k * h + f;
          g[da + 11] = j * l + k * n + d;
          e[da + 14] = o;
          g[da + 15] = j * c + a * h + f;
          g[da + 16] = j * l + a * n + d;
          e[da + 19] = o;
        };
        return f;
      }(t.default);
      e.default = U;
      t.default.register(r, U);
      q.exports = e.default;
    }, {
      "../core/renderer/": 193,
      "../core/renderer/assembler": 190,
      "../core/renderer/render-flow": 194,
      "../core/renderer/webgl/vertex-format": 225,
      "../core/value-types": 251,
      "./CCTiledLayer": 307,
      "./CCTiledMap": 308
    }],
    316: [function (a) {
      "use strict";
  
      a("./cocos2d/core");
      a("./cocos2d/animation");
      a("./cocos2d/particle");
      a("./cocos2d/tilemap");
      a("./cocos2d/videoplayer/CCVideoPlayer");
      a("./cocos2d/webview/CCWebView");
      a("./cocos2d/core/components/CCStudioComponent");
      a("./extensions/ccpool/CCNodePool");
      a("./cocos2d/actions");
      a("./extensions/spine");
      a("./extensions/dragonbones");
      a("./cocos2d/deprecated");
    }, {
      "./cocos2d/actions": 7,
      "./cocos2d/animation": 16,
      "./cocos2d/core": 155,
      "./cocos2d/core/components/CCStudioComponent": undefined,
      "./cocos2d/deprecated": 263,
      "./cocos2d/particle": 267,
      "./cocos2d/particle/CCParticleAsset": 265,
      "./cocos2d/tilemap": 313,
      "./cocos2d/tilemap/CCTiledMapAsset": 309,
      "./cocos2d/videoplayer/CCVideoPlayer": undefined,
      "./cocos2d/webview/CCWebView": undefined,
      "./extensions/ccpool/CCNodePool": 317,
      "./extensions/dragonbones": undefined,
      "./extensions/spine": 320
    }],
    317: [function (a, b) {
      "use strict";
  
      cc.NodePool = function (a) {
        this.poolHandlerComp = a;
        this._pool = [];
      };
      cc.NodePool.prototype = {
        constructor: cc.NodePool,
        size: function () {
          return this._pool.length;
        },
        clear: function () {
          for (var a = this._pool.length, b = 0; b < a; ++b) {
            this._pool[b].destroy();
          }
          this._pool.length = 0;
        },
        put: function (a) {
          if (a && this._pool.indexOf(a) === -1) {
            a.removeFromParent(false);
            var b = this.poolHandlerComp ? a.getComponent(this.poolHandlerComp) : null;
            if (b && b.unuse) {
              b.unuse();
            }
            this._pool.push(a);
          }
        },
        get: function () {
          var a = this._pool.length - 1;
          if (a < 0) {
            return null;
          }
          var b = this._pool[a];
          this._pool.length = a;
          var c = this.poolHandlerComp ? b.getComponent(this.poolHandlerComp) : null;
          if (c && c.reuse) {
            c.reuse.apply(c, arguments);
          }
          return b;
        }
      };
      b.exports = cc.NodePool;
    }, {}],
    318: [function (b, d) {
      "use strict";
  
      var e;
      var g = (e = b("../../cocos2d/core/value-types/mat4")) && e.__esModule ? e : {
        default: e
      };
      var j = b("../../cocos2d/core/renderer/render-flow").FLAG_TRANSFORM;
      function f() {}
      function h(a) {
        Object.defineProperty(a, "_worldMatDirty", {
          get: function () {
            return true;
          },
          set: function () {}
        });
        a._calculWorldMatrix = f;
        a._mulMat = f;
      }
      var k = new g.default();
      var a = cc.Class({
        name: "sp.AttachUtil",
        ctor: function () {
          this._inited = false;
          this._skeleton = null;
          this._skeletonNode = null;
          this._skeletonComp = null;
          this._attachedRootNode = null;
          this._attachedNodeArray = [];
          this._boneIndexToNode = {};
        },
        init: function (a) {
          this._inited = true;
          this._skeleton = a._skeleton;
          this._skeletonNode = a.node;
          this._skeletonComp = a;
        },
        reset: function () {
          this._inited = false;
          this._skeleton = null;
          this._skeletonNode = null;
          this._skeletonComp = null;
        },
        _prepareAttachNode: function () {
          if (this._skeleton) {
            var a = this._skeletonNode.getChildByName("ATTACHED_NODE_TREE");
            if (!(a && a.isValid)) {
              a = new cc.Node("ATTACHED_NODE_TREE");
              h(a);
              this._skeletonNode.addChild(a);
            }
            if (this._skeletonComp.isAnimationCached() && this._skeletonComp._frameCache) {
              this._skeletonComp._frameCache.enableCacheAttachedInfo();
            }
            this._attachedRootNode = a;
            return a;
          }
        },
        _buildBoneAttachedNode: function (a, b) {
          var c = "ATTACHED_NODE:" + a.data.name;
          var d = new cc.Node(c);
          this._buildBoneRelation(d, a, b);
          return d;
        },
        _buildBoneRelation: function (a, b, c) {
          h(a);
          a._bone = b;
          a._boneIndex = c;
          this._attachedNodeArray.push(a);
          this._boneIndexToNode[c] = a;
        },
        getAttachedRootNode: function () {
          return this._attachedRootNode;
        },
        getAttachedNodes: function (a) {
          var b = this._attachedNodeArray;
          var c = [];
          if (!this._inited) {
            return c;
          }
          for (var d = 0, e = b.length; d < e; d++) {
            var f = b[d];
            if (f && f.isValid && f.name === "ATTACHED_NODE:" + a) {
              c.push(f);
            }
          }
          return c;
        },
        _rebuildNodeArray: function () {
          for (var a = this._boneIndexToNode = {}, b = this._attachedNodeArray, c = this._attachedNodeArray = [], d = 0, e = b.length; d < e; d++) {
            var f = b[d];
            if (f && f.isValid && !f._toRemove) {
              c.push(f);
              a[f._boneIndex] = f;
            }
          }
        },
        _sortNodeArray: function () {
          this._attachedNodeArray.sort(function (a, b) {
            if (a._boneIndex < b._boneIndex) {
              return -1;
            } else {
              return 1;
            }
          });
        },
        _getNodeByBoneIndex: function (a) {
          var b = this._boneIndexToNode[a];
          if (b && b.isValid) {
            return b;
          } else {
            return null;
          }
        },
        destroyAttachedNodes: function (a) {
          if (this._inited) {
            for (var b = this._attachedNodeArray, c = function b(a) {
                for (var c = a.children, d = 0, e = c.length; d < e; d++) {
                  var f = c[d];
                  if (f) {
                    b(f);
                  }
                }
                a._toRemove = true;
              }, d = 0, e = b.length; d < e; d++) {
              var f = b[d];
              if (f && f.isValid && f.name.split("ATTACHED_NODE:")[1] === a) {
                c(f);
                f.removeFromParent(true);
                f.destroy();
                b[d] = null;
              }
            }
            this._rebuildNodeArray();
          }
        },
        generateAttachedNodes: function (b) {
          var d = [];
          if (!this._inited) {
            return d;
          }
          var f = this._prepareAttachNode();
          if (!f) {
            return d;
          }
          for (var e = [], g = this._skeleton.bones, i = 0, j = g.length; i < j; i++) {
            var a = g[i];
            if (a.data.name == b) {
              e.push(a);
            }
          }
          for (var k = function (a) {
              if (a) {
                var b = a.data;
                var c = this._getNodeByBoneIndex(b.index);
                if (c) {
                  return c;
                }
                c = this._buildBoneAttachedNode(a, b.index);
                var d = k(a.parent) || f;
                c.parent = d;
                return c;
              }
            }.bind(this), c = 0, m = e.length; c < m; c++) {
            var h = k(e[c]);
            d.push(h);
          }
          this._sortNodeArray();
          return d;
        },
        destroyAllAttachedNodes: function () {
          this._attachedRootNode = null;
          this._attachedNodeArray.length = 0;
          this._boneIndexToNode = {};
          if (this._inited) {
            var a = this._skeletonNode.getChildByName("ATTACHED_NODE_TREE");
            if (a) {
              a.removeFromParent(true);
              a.destroy();
              a = null;
            }
          }
        },
        generateAllAttachedNodes: function () {
          if (this._inited) {
            this._boneIndexToNode = {};
            this._attachedNodeArray.length = 0;
            var b = this._prepareAttachNode();
            if (b) {
              for (var d = this._skeleton.bones, e = 0, f = d.length; e < f; e++) {
                var g = d[e];
                var h = g.data;
                var j = null;
                if (g.parent) {
                  var k = g.parent.data.index;
                  j = this._boneIndexToNode[k];
                } else {
                  j = b;
                }
                if (j) {
                  var l = j.getChildByName("ATTACHED_NODE:" + h.name);
                  if (l && l.isValid) {
                    this._buildBoneRelation(l, g, h.index);
                  } else {
                    l = this._buildBoneAttachedNode(g, h.index);
                    j.addChild(l);
                  }
                }
              }
              return b;
            }
          }
        },
        _hasAttachedNode: function () {
          return !!this._inited && !!this._skeletonNode.getChildByName("ATTACHED_NODE_TREE");
        },
        _associateAttachedNode: function () {
          if (this._inited) {
            var a = this._skeletonNode.getChildByName("ATTACHED_NODE_TREE");
            if (a && a.isValid) {
              this._attachedRootNode = a;
              this._boneIndexToNode = {};
              this._attachedNodeArray.length = 0;
              h(a);
              if (this._skeletonComp.isAnimationCached() && this._skeletonComp._frameCache) {
                this._skeletonComp._frameCache.enableCacheAttachedInfo();
              }
              for (var b = this._skeleton.bones, d = 0, e = b.length; d < e; d++) {
                var f = b[d];
                var g = f.data;
                var j = null;
                if (f.parent) {
                  var k = f.parent.data.index;
                  j = this._boneIndexToNode[k];
                } else {
                  j = a;
                }
                if (j) {
                  var m = j.getChildByName("ATTACHED_NODE:" + g.name);
                  if (m && m.isValid) {
                    this._buildBoneRelation(m, f, g.index);
                  }
                }
              }
            }
          }
        },
        _syncAttachedNode: function () {
          if (this._inited) {
            var b = this._attachedRootNode;
            var m = this._attachedNodeArray;
            if (!b || !b.isValid) {
              this._attachedRootNode = null;
              m.length = 0;
              return;
            }
            var e = this._skeletonNode._worldMatrix;
            g.default.copy(b._worldMatrix, e);
            b._renderFlag &= ~j;
            var i;
            if (i = this._skeletonComp.isAnimationCached() ? this._skeletonComp._curFrame && this._skeletonComp._curFrame.boneInfos : this._skeleton.bones) {
              for (var o = this._skeletonNode._mulMat, a = function (a, b, c) {
                  var d = k.m;
                  d[0] = c.a;
                  d[1] = c.c;
                  d[4] = c.b;
                  d[5] = c.d;
                  d[12] = c.worldX;
                  d[13] = c.worldY;
                  o(a, b, k);
                }, c = false, n = 0, p = m.length; n < p; n++) {
                var q = m[n];
                if (q && q.isValid) {
                  var r = i[q._boneIndex];
                  if (r) {
                    a(q._worldMatrix, b._worldMatrix, r);
                    q._renderFlag &= ~j;
                  } else {
                    q.removeFromParent(true);
                    q.destroy();
                    m[n] = null;
                    c = true;
                  }
                } else {
                  m[n] = null;
                  c = true;
                }
              }
              if (c) {
                this._rebuildNodeArray();
              }
            }
          }
        }
      });
      d.exports = sp.AttachUtil = a;
    }, {
      "../../cocos2d/core/renderer/render-flow": 194,
      "../../cocos2d/core/value-types/mat4": 253
    }],
    319: [function (b, d) {
      "use strict";
  
      var f = b("./track-entry-listeners");
      var e = b("../../cocos2d/core/components/CCRenderComponent");
      var g = b("./lib/spine");
      var i = b("../../cocos2d/core/graphics/graphics");
      var j = b("../../cocos2d/core/renderer/render-flow").FLAG_POST_RENDER;
      var a = b("./skeleton-cache");
      var k = b("./AttachUtil");
      var c = cc.Enum({
        default: -1
      });
      var l = cc.Enum({
        "<None>": 0
      });
      var h = cc.Enum({
        REALTIME: 0,
        SHARED_CACHE: 1,
        PRIVATE_CACHE: 2
      });
      sp.Skeleton = cc.Class({
        name: "sp.Skeleton",
        extends: e,
        editor: false,
        statics: {
          AnimationCacheMode: h
        },
        properties: {
          paused: {
            default: false,
            visible: false
          },
          skeletonData: {
            default: null,
            type: sp.SkeletonData,
            notify: function () {
              this.defaultSkin = "";
              this.defaultAnimation = "";
              this._updateSkeletonData();
            },
            tooltip: false
          },
          defaultSkin: {
            default: "",
            visible: false
          },
          defaultAnimation: {
            default: "",
            visible: false
          },
          animation: {
            get: function () {
              if (this.isAnimationCached()) {
                return this._animationName;
              }
              var a = this.getCurrent(0);
              return a && a.animation.name || "";
            },
            set: function (a) {
              this.defaultAnimation = a;
              if (a) {
                this.setAnimation(0, a, this.loop);
              } else if (!this.isAnimationCached()) {
                this.clearTrack(0);
                this.setToSetupPose();
              }
            },
            visible: false
          },
          _defaultSkinIndex: {
            get: function () {
              if (this.skeletonData) {
                var a = this.skeletonData.getSkinsEnum();
                if (a) {
                  if (this.defaultSkin === "") {
                    if (a.hasOwnProperty(0)) {
                      this._defaultSkinIndex = 0;
                      return 0;
                    }
                  } else {
                    var b = a[this.defaultSkin];
                    if (b !== undefined) {
                      return b;
                    }
                  }
                }
              }
              return 0;
            },
            set: function (a) {
              var b;
              if (this.skeletonData) {
                b = this.skeletonData.getSkinsEnum();
              }
              if (b) {
                var c = b[a];
                if (c !== undefined) {
                  this.defaultSkin = c;
                  this.setSkin(this.defaultSkin);
                }
              }
            },
            type: c,
            visible: true,
            animatable: false,
            displayName: "Default Skin",
            tooltip: false
          },
          _animationIndex: {
            get: function () {
              var a = this.animation;
              if (this.skeletonData && a) {
                var b = this.skeletonData.getAnimsEnum();
                if (b) {
                  var c = b[a];
                  if (c !== undefined) {
                    return c;
                  }
                }
              }
              return 0;
            },
            set: function (a) {
              var b;
              if (a !== 0) {
                if (this.skeletonData) {
                  b = this.skeletonData.getAnimsEnum();
                }
                if (b) {
                  var c = b[a];
                  if (c !== undefined) {
                    this.animation = c;
                  }
                }
              } else {
                this.animation = "";
              }
            },
            type: l,
            visible: true,
            animatable: false,
            displayName: "Animation",
            tooltip: false
          },
          _preCacheMode: -1,
          _cacheMode: h.REALTIME,
          _defaultCacheMode: {
            default: 0,
            type: h,
            notify: function () {
              this.setAnimationCacheMode(this._defaultCacheMode);
            },
            editorOnly: true,
            visible: true,
            animatable: false,
            displayName: "Animation Cache Mode",
            tooltip: false
          },
          loop: {
            default: true,
            tooltip: false
          },
          premultipliedAlpha: {
            default: true,
            tooltip: false
          },
          timeScale: {
            default: 1,
            tooltip: false
          },
          debugSlots: {
            default: false,
            editorOnly: true,
            tooltip: false,
            notify: function () {
              this._updateDebugDraw();
            }
          },
          debugBones: {
            default: false,
            editorOnly: true,
            tooltip: false,
            notify: function () {
              this._updateDebugDraw();
            }
          },
          debugMesh: {
            default: false,
            editorOnly: true,
            tooltip: false,
            notify: function () {
              this._updateDebugDraw();
            }
          },
          useTint: {
            default: false,
            tooltip: false,
            notify: function () {
              this._updateUseTint();
            }
          },
          enableBatch: {
            default: false,
            notify: function () {
              this._updateBatch();
            },
            tooltip: false
          },
          _accTime: 0,
          _playCount: 0,
          _frameCache: null,
          _curFrame: null,
          _skeletonCache: null,
          _animationName: "",
          _animationQueue: [],
          _headAniInfo: null,
          _playTimes: 0,
          _isAniComplete: true
        },
        ctor: function () {
          this._effectDelegate = null;
          this._skeleton = null;
          this._rootBone = null;
          this._listener = null;
          this._materialCache = {};
          this._debugRenderer = null;
          this._startSlotIndex = -1;
          this._endSlotIndex = -1;
          this._startEntry = {
            animation: {
              name: ""
            },
            trackIndex: 0
          };
          this._endEntry = {
            animation: {
              name: ""
            },
            trackIndex: 0
          };
          this.attachUtil = new k();
        },
        _getDefaultMaterial: function () {
          return cc.Material.getBuiltinMaterial("2d-spine");
        },
        _updateMaterial: function () {
          var a = this.useTint || this.isAnimationCached() && true;
          var b = this.getMaterial(0);
          if (b) {
            b.define("USE_TINT", a);
            b.define("CC_USE_MODEL", !this.enableBatch);
            var c = this.premultipliedAlpha ? cc.gfx.BLEND_ONE : cc.gfx.BLEND_SRC_ALPHA;
            var d = cc.gfx.BLEND_ONE_MINUS_SRC_ALPHA;
            b.setBlend(true, cc.gfx.BLEND_FUNC_ADD, c, c, cc.gfx.BLEND_FUNC_ADD, d, d);
          }
          this._materialCache = {};
        },
        disableRender: function () {
          this._super();
          this.node._renderFlag &= ~j;
        },
        markForRender: function (a) {
          this._super(a);
          if (a) {
            this.node._renderFlag |= j;
          } else {
            this.node._renderFlag &= ~j;
          }
        },
        _updateUseTint: function () {
          var a = this.getMaterial(0);
          if (a) {
            var b = this.useTint || this.isAnimationCached() && true;
            a.define("USE_TINT", b);
          }
          this._materialCache = {};
        },
        _updateBatch: function () {
          var a = this.getMaterial(0);
          if (a) {
            a.define("CC_USE_MODEL", !this.enableBatch);
          }
          this._materialCache = {};
        },
        _validateRender: function () {
          var a = this.skeletonData;
          if (a && a.isTexturesLoaded()) {
            this._super();
          } else {
            this.disableRender();
          }
        },
        setSkeletonData: function (b) {
          if (b.width != null && b.height != null) {
            this.node.setContentSize(b.width, b.height);
          }
          if (this._cacheMode === h.SHARED_CACHE) {
            this._skeletonCache = a.sharedCache;
          } else if (this._cacheMode === h.PRIVATE_CACHE) {
            this._skeletonCache = new a();
            this._skeletonCache.enablePrivateMode();
          }
          if (this.isAnimationCached()) {
            if (!this.debugBones) {
              this.debugSlots;
            }
            var c = this._skeletonCache.getSkeletonCache(this.skeletonData._uuid, b);
            this._skeleton = c.skeleton;
            this._clipper = c.clipper;
            this._rootBone = this._skeleton.getRootBone();
          } else {
            this._skeleton = new g.Skeleton(b);
            this._clipper = new g.SkeletonClipping();
            this._rootBone = this._skeleton.getRootBone();
          }
          this.markForRender(true);
        },
        setSlotsRange: function (a, b) {
          if (!this.isAnimationCached()) {
            this._startSlotIndex = a;
            this._endSlotIndex = b;
          }
        },
        setAnimationStateData: function (a) {
          if (this.isAnimationCached()) ;else {
            var b = new g.AnimationState(a);
            if (this._listener) {
              if (this._state) {
                this._state.removeListener(this._listener);
              }
              b.addListener(this._listener);
            }
            this._state = b;
          }
        },
        __preload: function () {
          this._super();
          for (var a = this.node.children, b = 0, c = a.length; b < c; b++) {
            var d = a[b];
            if (d && d._name === "DEBUG_DRAW_NODE") {
              d.destroy();
            }
          }
          this._updateSkeletonData();
          this._updateDebugDraw();
          this._updateUseTint();
          this._updateBatch();
        },
        setAnimationCacheMode: function (a) {
          if (this._preCacheMode !== a) {
            this._cacheMode = a;
            this._updateSkeletonData();
            this._updateUseTint();
          }
        },
        isAnimationCached: function () {
          return this._cacheMode !== h.REALTIME;
        },
        update: function (a) {
          if (!this.paused) {
            a *= this.timeScale * sp.timeScale;
            if (this.isAnimationCached()) {
              if (this._isAniComplete) {
                if (this._animationQueue.length === 0 && !this._headAniInfo) {
                  var b = this._frameCache;
                  if (b && b.isInvalid()) {
                    b.updateToFrame();
                    var c = b.frames;
                    this._curFrame = c[c.length - 1];
                  }
                  return;
                }
                if (!this._headAniInfo) {
                  this._headAniInfo = this._animationQueue.shift();
                }
                this._accTime += a;
                if (this._accTime > this._headAniInfo.delay) {
                  var d = this._headAniInfo;
                  this._headAniInfo = null;
                  this.setAnimation(0, d.animationName, d.loop);
                }
                return;
              }
              this._updateCache(a);
            } else {
              this._updateRealtime(a);
            }
          }
        },
        _emitCacheCompleteEvent: function () {
          if (this._listener) {
            this._endEntry.animation.name = this._animationName;
            if (this._listener.complete) {
              this._listener.complete(this._endEntry);
            }
            if (this._listener.end) {
              this._listener.end(this._endEntry);
            }
          }
        },
        _updateCache: function (b) {
          var c = this._frameCache;
          if (c.isInited()) {
            var d = c.frames;
            var e = a.FrameTime;
            if (this._accTime == 0 && this._playCount == 0) {
              this._startEntry.animation.name = this._animationName;
              if (this._listener && this._listener.start) {
                this._listener.start(this._startEntry);
              }
            }
            this._accTime += b;
            var f = Math.floor(this._accTime / e);
            if (!c.isCompleted) {
              c.updateToFrame(f);
            }
            if (c.isCompleted && f >= d.length) {
              this._playCount++;
              if (this._playTimes > 0 && this._playCount >= this._playTimes) {
                this._curFrame = d[d.length - 1];
                this._accTime = 0;
                this._playCount = 0;
                this._isAniComplete = true;
                this._emitCacheCompleteEvent();
                return;
              }
              this._accTime = 0;
              f = 0;
              this._emitCacheCompleteEvent();
            }
            this._curFrame = d[f];
          }
        },
        _updateRealtime: function (a) {
          var b = this._skeleton;
          var c = this._state;
          if (b) {
            b.update(a);
            if (c) {
              c.update(a);
              c.apply(b);
            }
          }
        },
        setVertexEffectDelegate: function (a) {
          this._effectDelegate = a;
        },
        updateWorldTransform: function () {
          if (this.isAnimationCached() && this._skeleton) {
            this._skeleton.updateWorldTransform();
          }
        },
        setToSetupPose: function () {
          if (this._skeleton) {
            this._skeleton.setToSetupPose();
          }
        },
        setBonesToSetupPose: function () {
          if (this._skeleton) {
            this._skeleton.setBonesToSetupPose();
          }
        },
        setSlotsToSetupPose: function () {
          if (this._skeleton) {
            this._skeleton.setSlotsToSetupPose();
          }
        },
        updateAnimationCache: function (a) {
          if (this.isAnimationCached()) {
            var b = this.skeletonData._uuid;
            if (this._skeletonCache) {
              this._skeletonCache.updateAnimationCache(b, a);
            }
          }
        },
        invalidAnimationCache: function () {
          if (this.isAnimationCached() && this._skeletonCache) {
            this._skeletonCache.invalidAnimationCache(this.skeletonData._uuid);
          }
        },
        findBone: function (a) {
          if (this._skeleton) {
            return this._skeleton.findBone(a);
          } else {
            return null;
          }
        },
        findSlot: function (a) {
          if (this._skeleton) {
            return this._skeleton.findSlot(a);
          } else {
            return null;
          }
        },
        setSkin: function (a) {
          if (this._skeleton) {
            this._skeleton.setSkinByName(a);
            this._skeleton.setSlotsToSetupPose();
          }
          this.invalidAnimationCache();
        },
        getAttachment: function (a, b) {
          if (this._skeleton) {
            return this._skeleton.getAttachmentByName(a, b);
          } else {
            return null;
          }
        },
        setAttachment: function (a, b) {
          if (this._skeleton) {
            this._skeleton.setAttachment(a, b);
          }
          this.invalidAnimationCache();
        },
        getTextureAtlas: function (a) {
          return a.region;
        },
        setMix: function (a, b, c) {
          if (this._state) {
            this._state.data.setMix(a, b, c);
          }
        },
        setAnimation: function (a, b, c) {
          this._playTimes = c ? 0 : 1;
          this._animationName = b;
          if (this.isAnimationCached()) {
            if (!this._skeletonCache) {
              return null;
            }
            var d = this._skeletonCache.getAnimationCache(this.skeletonData._uuid, b);
            if (!d) {
              d = this._skeletonCache.initAnimationCache(this.skeletonData._uuid, b);
            }
            if (d) {
              this._isAniComplete = false;
              this._accTime = 0;
              this._playCount = 0;
              this._frameCache = d;
              if (this.attachUtil._hasAttachedNode()) {
                this._frameCache.enableCacheAttachedInfo();
              }
              this._frameCache.updateToFrame(0);
              this._curFrame = this._frameCache.frames[0];
            }
          } else if (this._skeleton) {
            var e = this._skeleton.data.findAnimation(b);
            if (!e) {
              return null;
            }
            var f = this._state.setAnimationWith(a, e, c);
            this._state.apply(this._skeleton);
            return f;
          }
          return null;
        },
        addAnimation: function (a, b, c, d) {
          d = d || 0;
          if (this.isAnimationCached()) {
            this._animationQueue.push({
              animationName: b,
              loop: c,
              delay: d
            });
          } else if (this._skeleton) {
            var e = this._skeleton.data.findAnimation(b);
            if (e) {
              return this._state.addAnimationWith(a, e, c, d);
            } else {
              return null;
            }
          }
          return null;
        },
        findAnimation: function (a) {
          if (this._skeleton) {
            return this._skeleton.data.findAnimation(a);
          } else {
            return null;
          }
        },
        getCurrent: function (a) {
          if (this.isAnimationCached()) ;else if (this._state) {
            return this._state.getCurrent(a);
          }
          return null;
        },
        clearTracks: function () {
          if (!this.isAnimationCached()) {
            if (this._state) {
              this._state.clearTracks();
            }
          }
        },
        clearTrack: function (a) {
          if (!this.isAnimationCached()) {
            if (this._state) {
              this._state.clearTrack(a);
            }
          }
        },
        setStartListener: function (a) {
          this._ensureListener();
          this._listener.start = a;
        },
        setInterruptListener: function (a) {
          this._ensureListener();
          this._listener.interrupt = a;
        },
        setEndListener: function (a) {
          this._ensureListener();
          this._listener.end = a;
        },
        setDisposeListener: function (a) {
          this._ensureListener();
          this._listener.dispose = a;
        },
        setCompleteListener: function (a) {
          this._ensureListener();
          this._listener.complete = a;
        },
        setEventListener: function (a) {
          this._ensureListener();
          this._listener.event = a;
        },
        setTrackStartListener: function (a, b) {
          f.getListeners(a).start = b;
        },
        setTrackInterruptListener: function (a, b) {
          f.getListeners(a).interrupt = b;
        },
        setTrackEndListener: function (a, b) {
          f.getListeners(a).end = b;
        },
        setTrackDisposeListener: function (a, b) {
          f.getListeners(a).dispose = b;
        },
        setTrackCompleteListener: function (a, b) {
          f.getListeners(a).complete = function (a) {
            var c = Math.floor(a.trackTime / a.animationEnd);
            b(a, c);
          };
        },
        setTrackEventListener: function (a, b) {
          f.getListeners(a).event = b;
        },
        getState: function () {
          return this._state;
        },
        _resetDefaultAnim: false,
        _resetDefaultSkin: false,
        _updateAnimEnum: false,
        _updateSkinEnum: false,
        _ensureListener: function () {
          if (!this._listener) {
            this._listener = new f();
            if (this._state) {
              this._state.addListener(this._listener);
            }
          }
        },
        _updateSkeletonData: function () {
          if (this.skeletonData) {
            var a = this.skeletonData.getRuntimeData();
            if (a) {
              try {
                this.setSkeletonData(a);
                if (!this.isAnimationCached()) {
                  this.setAnimationStateData(new g.AnimationStateData(this._skeleton.data));
                }
                if (this.defaultSkin) {
                  this.setSkin(this.defaultSkin);
                }
              } catch (a) {}
              this.attachUtil.init(this);
              this.attachUtil._associateAttachedNode();
              this._preCacheMode = this._cacheMode;
              this.animation = this.defaultAnimation;
            } else {
              this.disableRender();
            }
          } else {
            this.disableRender();
          }
        },
        _refreshInspector: function () {
          this._updateAnimEnum();
          this._updateSkinEnum();
          Editor.Utils.refreshSelectedInspector("node", this.node.uuid);
        },
        _updateDebugDraw: function () {
          if (this.debugBones || this.debugSlots) {
            if (!this._debugRenderer) {
              var a = new cc.PrivateNode();
              a.name = "DEBUG_DRAW_NODE";
              var b = a.addComponent(i);
              b.lineWidth = 1;
              b.strokeColor = cc.color(255, 0, 0, 255);
              this._debugRenderer = b;
            }
            this._debugRenderer.node.parent = this.node;
            this.isAnimationCached();
          } else if (this._debugRenderer) {
            this._debugRenderer.node.parent = null;
          }
        }
      });
      d.exports = sp.Skeleton;
    }, {
      "../../cocos2d/core/components/CCRenderComponent": 109,
      "../../cocos2d/core/graphics/graphics": 151,
      "../../cocos2d/core/renderer/render-flow": 194,
      "./AttachUtil": 318,
      "./lib/spine": 321,
      "./skeleton-cache": 322,
      "./track-entry-listeners": 326
    }],
    320: [function (a) {
      "use strict";
  
      var b = typeof window == "undefined" ? global : window;
      b.spine = a("./lib/spine");
      b.sp = b.sp || {};
      sp._timeScale = 1;
      Object.defineProperty(sp, "timeScale", {
        get: function () {
          return this._timeScale;
        },
        set: function (a) {
          this._timeScale = a;
        },
        configurable: true
      });
      sp.ATTACHMENT_TYPE = {
        REGION: 0,
        BOUNDING_BOX: 1,
        MESH: 2,
        SKINNED_MESH: 3
      };
      sp.AnimationEventType = cc.Enum({
        START: 0,
        INTERRUPT: 1,
        END: 2,
        DISPOSE: 3,
        COMPLETE: 4,
        EVENT: 5
      });
      sp.spine = b.spine;
      a("./skeleton-texture");
      a("./skeleton-data");
      a("./vertex-effect-delegate");
      a("./Skeleton");
      a("./spine-assembler");
    }, {
      "./Skeleton": 319,
      "./lib/spine": 321,
      "./skeleton-data": 323,
      "./skeleton-texture": 324,
      "./spine-assembler": 325,
      "./vertex-effect-delegate": 327
    }],
    321: [function (a, b) {
      "use strict";
  
      var c;
      var d;
      var e;
      c = function (a, b) {
        return (c = Object.setPrototypeOf || {
          __proto__: []
        } instanceof Array && function (a, b) {
          a.__proto__ = b;
        } || function (a, b) {
          for (var c in b) {
            if (b.hasOwnProperty(c)) {
              a[c] = b[c];
            }
          }
        })(a, b);
      };
      function f(a, b) {
        function d() {
          this.constructor = a;
        }
        c(a, b);
        a.prototype = b === null ? Object.create(b) : (d.prototype = b.prototype, new d());
      }
      (function (j) {
        var q;
        var b;
        var k;
        var w = function () {
          function a(a, b, c) {
            if (a == null) {
              throw Error("name cannot be null.");
            }
            if (b == null) {
              throw Error("timelines cannot be null.");
            }
            this.name = a;
            this.timelines = b;
            this.timelineIds = [];
            for (var d = 0; d < b.length; d++) {
              this.timelineIds[b[d].getPropertyId()] = true;
            }
            this.duration = c;
          }
          a.prototype.hasTimeline = function (a) {
            return this.timelineIds[a] == 1;
          };
          a.prototype.apply = function (b, d, f, g, j, k, m, a) {
            if (b == null) {
              throw Error("skeleton cannot be null.");
            }
            if (g && this.duration != 0) {
              f %= this.duration;
              if (d > 0) {
                d %= this.duration;
              }
            }
            for (var n = this.timelines, c = 0, o = n.length; c < o; c++) {
              n[c].apply(b, d, f, j, k, m, a);
            }
          };
          a.binarySearch = function (a, b, c) {
            if (c === undefined) {
              c = 1;
            }
            var d = 0;
            var e = a.length / c - 2;
            if (e == 0) {
              return c;
            }
            for (var f = e >>> 1;;) {
              if (a[(f + 1) * c] <= b) {
                d = f + 1;
              } else {
                e = f;
              }
              if (d == e) {
                return (d + 1) * c;
              }
              f = d + e >>> 1;
            }
          };
          a.linearSearch = function (a, b, c) {
            for (var d = 0, e = a.length - c; d <= e; d += c) {
              if (a[d] > b) {
                return d;
              }
            }
            return -1;
          };
          return a;
        }();
        j.Animation = w;
        (function (a) {
          a[a.setup = 0] = "setup";
          a[a.first = 1] = "first";
          a[a.replace = 2] = "replace";
          a[a.add = 3] = "add";
        })(q = j.MixBlend || (j.MixBlend = {}));
        (function (a) {
          a[a.mixIn = 0] = "mixIn";
          a[a.mixOut = 1] = "mixOut";
        })(b = j.MixDirection || (j.MixDirection = {}));
        (function (a) {
          a[a.rotate = 0] = "rotate";
          a[a.translate = 1] = "translate";
          a[a.scale = 2] = "scale";
          a[a.shear = 3] = "shear";
          a[a.attachment = 4] = "attachment";
          a[a.color = 5] = "color";
          a[a.deform = 6] = "deform";
          a[a.event = 7] = "event";
          a[a.drawOrder = 8] = "drawOrder";
          a[a.ikConstraint = 9] = "ikConstraint";
          a[a.transformConstraint = 10] = "transformConstraint";
          a[a.pathConstraintPosition = 11] = "pathConstraintPosition";
          a[a.pathConstraintSpacing = 12] = "pathConstraintSpacing";
          a[a.pathConstraintMix = 13] = "pathConstraintMix";
          a[a.twoColor = 14] = "twoColor";
        })(k = j.TimelineType || (j.TimelineType = {}));
        var r = function () {
          function b(a) {
            if (a <= 0) {
              throw Error("frameCount must be > 0: " + a);
            }
            this.curves = j.Utils.newFloatArray((a - 1) * b.BEZIER_SIZE);
          }
          b.prototype.getFrameCount = function () {
            return this.curves.length / b.BEZIER_SIZE + 1;
          };
          b.prototype.setLinear = function (a) {
            this.curves[a * b.BEZIER_SIZE] = b.LINEAR;
          };
          b.prototype.setStepped = function (a) {
            this.curves[a * b.BEZIER_SIZE] = b.STEPPED;
          };
          b.prototype.getCurveType = function (a) {
            var c = a * b.BEZIER_SIZE;
            if (c == this.curves.length) {
              return b.LINEAR;
            }
            var d = this.curves[c];
            if (d == b.LINEAR) {
              return b.LINEAR;
            } else if (d == b.STEPPED) {
              return b.STEPPED;
            } else {
              return b.BEZIER;
            }
          };
          b.prototype.setCurve = function (e, j, i, k, n) {
            var q = (-j * 2 + k) * 0.03;
            var a = (-i * 2 + n) * 0.03;
            var o = ((j - k) * 3 + 1) * 0.006;
            var c = ((i - n) * 3 + 1) * 0.006;
            var l = q * 2 + o;
            var r = a * 2 + c;
            var s = j * 0.3 + q + o * 0.16666667;
            var t = i * 0.3 + a + c * 0.16666667;
            var w = e * b.BEZIER_SIZE;
            var x = this.curves;
            x[w++] = b.BEZIER;
            for (var p = s, y = t, z = w + b.BEZIER_SIZE - 1; w < z; w += 2) {
              x[w] = p;
              x[w + 1] = y;
              s += l;
              t += r;
              l += o;
              r += c;
              p += s;
              y += t;
            }
          };
          b.prototype.getCurvePercent = function (d, e) {
            e = j.MathUtils.clamp(e, 0, 1);
            var g = this.curves;
            var i = d * b.BEZIER_SIZE;
            var k = g[i];
            if (k == b.LINEAR) {
              return e;
            }
            if (k == b.STEPPED) {
              return 0;
            }
            for (var a = 0, m = ++i, c = i + b.BEZIER_SIZE - 1; i < c; i += 2) {
              if ((a = g[i]) >= e) {
                var l = undefined;
                var p = undefined;
                if (i == m) {
                  l = 0;
                  p = 0;
                } else {
                  l = g[i - 2];
                  p = g[i - 1];
                }
                return p + (g[i + 1] - p) * (e - l) / (a - l);
              }
            }
            var q = g[i - 1];
            return q + (1 - q) * (e - a) / (1 - a);
          };
          b.LINEAR = 0;
          b.STEPPED = 1;
          b.BEZIER = 2;
          b.BEZIER_SIZE = 19;
          return b;
        }();
        j.CurveTimeline = r;
        var a = function (b) {
          function m(a) {
            var c = b.call(this, a) || this;
            c.frames = j.Utils.newFloatArray(a << 1);
            return c;
          }
          f(m, b);
          m.prototype.getPropertyId = function () {
            return (k.rotate << 24) + this.boneIndex;
          };
          m.prototype.setFrame = function (a, b, c) {
            a <<= 1;
            this.frames[a] = b;
            this.frames[a + m.ROTATION] = c;
          };
          m.prototype.apply = function (a, b, e, i, j, k) {
            var c = this.frames;
            var l = a.bones[this.boneIndex];
            if (l.active) {
              if (e < c[0]) {
                switch (k) {
                  case q.setup:
                    l.rotation = l.data.rotation;
                    return;
                  case q.first:
                    var h = l.data.rotation - l.rotation;
                    l.rotation += (h - (16384 - (16384.499999999996 - h / 360 | 0)) * 360) * j;
                }
              } else if (e >= c[c.length - m.ENTRIES]) {
                var n = c[c.length + m.PREV_ROTATION];
                switch (k) {
                  case q.setup:
                    l.rotation = l.data.rotation + n * j;
                    break;
                  case q.first:
                  case q.replace:
                    n += l.data.rotation - l.rotation;
                    n -= (16384 - (16384.499999999996 - n / 360 | 0)) * 360;
                  case q.add:
                    l.rotation += n * j;
                }
              } else {
                var o = w.binarySearch(c, e, m.ENTRIES);
                var d = c[o + m.PREV_ROTATION];
                var r = c[o];
                var p = this.getCurvePercent((o >> 1) - 1, 1 - (e - r) / (c[o + m.PREV_TIME] - r));
                var s = c[o + m.ROTATION] - d;
                s = d + (s - (16384 - (16384.499999999996 - s / 360 | 0)) * 360) * p;
                switch (k) {
                  case q.setup:
                    l.rotation = l.data.rotation + (s - (16384 - (16384.499999999996 - s / 360 | 0)) * 360) * j;
                    break;
                  case q.first:
                  case q.replace:
                    s += l.data.rotation - l.rotation;
                  case q.add:
                    l.rotation += (s - (16384 - (16384.499999999996 - s / 360 | 0)) * 360) * j;
                }
              }
            }
          };
          m.ENTRIES = 2;
          m.PREV_TIME = -2;
          m.PREV_ROTATION = -1;
          m.ROTATION = 1;
          return m;
        }(r);
        j.RotateTimeline = a;
        var o = function (b) {
          function g(a) {
            var c = b.call(this, a) || this;
            c.frames = j.Utils.newFloatArray(a * g.ENTRIES);
            return c;
          }
          f(g, b);
          g.prototype.getPropertyId = function () {
            return (k.translate << 24) + this.boneIndex;
          };
          g.prototype.setFrame = function (a, b, c, d) {
            a *= g.ENTRIES;
            this.frames[a] = b;
            this.frames[a + g.X] = c;
            this.frames[a + g.Y] = d;
          };
          g.prototype.apply = function (a, b, e, i, j, k) {
            var c = this.frames;
            var l = a.bones[this.boneIndex];
            if (l.active) {
              if (e < c[0]) {
                switch (k) {
                  case q.setup:
                    l.x = l.data.x;
                    l.y = l.data.y;
                    return;
                  case q.first:
                    l.x += (l.data.x - l.x) * j;
                    l.y += (l.data.y - l.y) * j;
                }
              } else {
                var h = 0;
                var m = 0;
                if (e >= c[c.length - g.ENTRIES]) {
                  h = c[c.length + g.PREV_X];
                  m = c[c.length + g.PREV_Y];
                } else {
                  var n = w.binarySearch(c, e, g.ENTRIES);
                  h = c[n + g.PREV_X];
                  m = c[n + g.PREV_Y];
                  var d = c[n];
                  var o = this.getCurvePercent(n / g.ENTRIES - 1, 1 - (e - d) / (c[n + g.PREV_TIME] - d));
                  h += (c[n + g.X] - h) * o;
                  m += (c[n + g.Y] - m) * o;
                }
                switch (k) {
                  case q.setup:
                    l.x = l.data.x + h * j;
                    l.y = l.data.y + m * j;
                    break;
                  case q.first:
                  case q.replace:
                    l.x += (l.data.x + h - l.x) * j;
                    l.y += (l.data.y + m - l.y) * j;
                    break;
                  case q.add:
                    l.x += h * j;
                    l.y += m * j;
                }
              }
            }
          };
          g.ENTRIES = 3;
          g.PREV_TIME = -3;
          g.PREV_X = -2;
          g.PREV_Y = -1;
          g.X = 1;
          g.Y = 2;
          return g;
        }(r);
        j.TranslateTimeline = o;
        var c = function (c) {
          function e(a) {
            return c.call(this, a) || this;
          }
          f(e, c);
          e.prototype.getPropertyId = function () {
            return (k.scale << 24) + this.boneIndex;
          };
          e.prototype.apply = function (i, k, n, a, c, l, h) {
            var o = this.frames;
            var f = i.bones[this.boneIndex];
            if (f.active) {
              if (n < o[0]) {
                switch (l) {
                  case q.setup:
                    f.scaleX = f.data.scaleX;
                    f.scaleY = f.data.scaleY;
                    return;
                  case q.first:
                    f.scaleX += (f.data.scaleX - f.scaleX) * c;
                    f.scaleY += (f.data.scaleY - f.scaleY) * c;
                }
              } else {
                var d = 0;
                var r = 0;
                if (n >= o[o.length - e.ENTRIES]) {
                  d = o[o.length + e.PREV_X] * f.data.scaleX;
                  r = o[o.length + e.PREV_Y] * f.data.scaleY;
                } else {
                  var s = w.binarySearch(o, n, e.ENTRIES);
                  d = o[s + e.PREV_X];
                  r = o[s + e.PREV_Y];
                  var t = o[s];
                  var g = this.getCurvePercent(s / e.ENTRIES - 1, 1 - (n - t) / (o[s + e.PREV_TIME] - t));
                  d = (d + (o[s + e.X] - d) * g) * f.data.scaleX;
                  r = (r + (o[s + e.Y] - r) * g) * f.data.scaleY;
                }
                if (c == 1) {
                  if (l == q.add) {
                    f.scaleX += d - f.data.scaleX;
                    f.scaleY += r - f.data.scaleY;
                  } else {
                    f.scaleX = d;
                    f.scaleY = r;
                  }
                } else {
                  var m = 0;
                  var u = 0;
                  if (h == b.mixOut) {
                    switch (l) {
                      case q.setup:
                        m = f.data.scaleX;
                        u = f.data.scaleY;
                        f.scaleX = m + (Math.abs(d) * j.MathUtils.signum(m) - m) * c;
                        f.scaleY = u + (Math.abs(r) * j.MathUtils.signum(u) - u) * c;
                        break;
                      case q.first:
                      case q.replace:
                        m = f.scaleX;
                        u = f.scaleY;
                        f.scaleX = m + (Math.abs(d) * j.MathUtils.signum(m) - m) * c;
                        f.scaleY = u + (Math.abs(r) * j.MathUtils.signum(u) - u) * c;
                        break;
                      case q.add:
                        m = f.scaleX;
                        u = f.scaleY;
                        f.scaleX = m + (Math.abs(d) * j.MathUtils.signum(m) - f.data.scaleX) * c;
                        f.scaleY = u + (Math.abs(r) * j.MathUtils.signum(u) - f.data.scaleY) * c;
                    }
                  } else {
                    switch (l) {
                      case q.setup:
                        m = Math.abs(f.data.scaleX) * j.MathUtils.signum(d);
                        u = Math.abs(f.data.scaleY) * j.MathUtils.signum(r);
                        f.scaleX = m + (d - m) * c;
                        f.scaleY = u + (r - u) * c;
                        break;
                      case q.first:
                      case q.replace:
                        m = Math.abs(f.scaleX) * j.MathUtils.signum(d);
                        u = Math.abs(f.scaleY) * j.MathUtils.signum(r);
                        f.scaleX = m + (d - m) * c;
                        f.scaleY = u + (r - u) * c;
                        break;
                      case q.add:
                        m = j.MathUtils.signum(d);
                        u = j.MathUtils.signum(r);
                        f.scaleX = Math.abs(f.scaleX) * m + (d - Math.abs(f.data.scaleX) * m) * c;
                        f.scaleY = Math.abs(f.scaleY) * u + (r - Math.abs(f.data.scaleY) * u) * c;
                    }
                  }
                }
              }
            }
          };
          return e;
        }(o);
        j.ScaleTimeline = c;
        var l = function (a) {
          function b(b) {
            return a.call(this, b) || this;
          }
          f(b, a);
          b.prototype.getPropertyId = function () {
            return (k.shear << 24) + this.boneIndex;
          };
          b.prototype.apply = function (e, g, i, j, a, k) {
            var c = this.frames;
            var l = e.bones[this.boneIndex];
            if (l.active) {
              if (i < c[0]) {
                switch (k) {
                  case q.setup:
                    l.shearX = l.data.shearX;
                    l.shearY = l.data.shearY;
                    return;
                  case q.first:
                    l.shearX += (l.data.shearX - l.shearX) * a;
                    l.shearY += (l.data.shearY - l.shearY) * a;
                }
              } else {
                var h = 0;
                var m = 0;
                if (i >= c[c.length - b.ENTRIES]) {
                  h = c[c.length + b.PREV_X];
                  m = c[c.length + b.PREV_Y];
                } else {
                  var n = w.binarySearch(c, i, b.ENTRIES);
                  h = c[n + b.PREV_X];
                  m = c[n + b.PREV_Y];
                  var d = c[n];
                  var o = this.getCurvePercent(n / b.ENTRIES - 1, 1 - (i - d) / (c[n + b.PREV_TIME] - d));
                  h += (c[n + b.X] - h) * o;
                  m += (c[n + b.Y] - m) * o;
                }
                switch (k) {
                  case q.setup:
                    l.shearX = l.data.shearX + h * a;
                    l.shearY = l.data.shearY + m * a;
                    break;
                  case q.first:
                  case q.replace:
                    l.shearX += (l.data.shearX + h - l.shearX) * a;
                    l.shearY += (l.data.shearY + m - l.shearY) * a;
                    break;
                  case q.add:
                    l.shearX += h * a;
                    l.shearY += m * a;
                }
              }
            }
          };
          return b;
        }(o);
        j.ShearTimeline = l;
        var h = function (b) {
          function x(a) {
            var c = b.call(this, a) || this;
            c.frames = j.Utils.newFloatArray(a * x.ENTRIES);
            return c;
          }
          f(x, b);
          x.prototype.getPropertyId = function () {
            return (k.color << 24) + this.slotIndex;
          };
          x.prototype.setFrame = function (a, b, c, d, e, f) {
            a *= x.ENTRIES;
            this.frames[a] = b;
            this.frames[a + x.R] = c;
            this.frames[a + x.G] = d;
            this.frames[a + x.B] = e;
            this.frames[a + x.A] = f;
          };
          x.prototype.apply = function (a, b, e, i, j, k) {
            var c = a.slots[this.slotIndex];
            if (c.bone.active) {
              var l = this.frames;
              if (e < l[0]) {
                switch (k) {
                  case q.setup:
                    c.color.setFromColor(c.data.color);
                    return;
                  case q.first:
                    var h = c.color;
                    var n = c.data.color;
                    h.add((n.r - h.r) * j, (n.g - h.g) * j, (n.b - h.b) * j, (n.a - h.a) * j);
                }
              } else {
                var f = 0;
                var o = 0;
                var r = 0;
                var s = 0;
                if (e >= l[l.length - x.ENTRIES]) {
                  var t = l.length;
                  f = l[t + x.PREV_R];
                  o = l[t + x.PREV_G];
                  r = l[t + x.PREV_B];
                  s = l[t + x.PREV_A];
                } else {
                  var g = w.binarySearch(l, e, x.ENTRIES);
                  f = l[g + x.PREV_R];
                  o = l[g + x.PREV_G];
                  r = l[g + x.PREV_B];
                  s = l[g + x.PREV_A];
                  var m = l[g];
                  var y = this.getCurvePercent(g / x.ENTRIES - 1, 1 - (e - m) / (l[g + x.PREV_TIME] - m));
                  f += (l[g + x.R] - f) * y;
                  o += (l[g + x.G] - o) * y;
                  r += (l[g + x.B] - r) * y;
                  s += (l[g + x.A] - s) * y;
                }
                if (j == 1) {
                  c.color.set(f, o, r, s);
                } else {
                  h = c.color;
                  if (k == q.setup) {
                    h.setFromColor(c.data.color);
                  }
                  h.add((f - h.r) * j, (o - h.g) * j, (r - h.b) * j, (s - h.a) * j);
                }
              }
            }
          };
          x.ENTRIES = 5;
          x.PREV_TIME = -5;
          x.PREV_R = -4;
          x.PREV_G = -3;
          x.PREV_B = -2;
          x.PREV_A = -1;
          x.R = 1;
          x.G = 2;
          x.B = 3;
          x.A = 4;
          return x;
        }(r);
        j.ColorTimeline = h;
        var s = function (b) {
          function d(a) {
            var c = b.call(this, a) || this;
            c.frames = j.Utils.newFloatArray(a * d.ENTRIES);
            return c;
          }
          f(d, b);
          d.prototype.getPropertyId = function () {
            return (k.twoColor << 24) + this.slotIndex;
          };
          d.prototype.setFrame = function (a, b, e, f, g, h, i, j, c) {
            a *= d.ENTRIES;
            this.frames[a] = b;
            this.frames[a + d.R] = e;
            this.frames[a + d.G] = f;
            this.frames[a + d.B] = g;
            this.frames[a + d.A] = h;
            this.frames[a + d.R2] = i;
            this.frames[a + d.G2] = j;
            this.frames[a + d.B2] = c;
          };
          d.prototype.apply = function (a, e, i, j, k, n) {
            var c = a.slots[this.slotIndex];
            if (c.bone.active) {
              var l = this.frames;
              if (i < l[0]) {
                switch (n) {
                  case q.setup:
                    c.color.setFromColor(c.data.color);
                    c.darkColor.setFromColor(c.data.darkColor);
                    return;
                  case q.first:
                    var h = c.color;
                    var o = c.darkColor;
                    var r = c.data.color;
                    var s = c.data.darkColor;
                    h.add((r.r - h.r) * k, (r.g - h.g) * k, (r.b - h.b) * k, (r.a - h.a) * k);
                    o.add((s.r - o.r) * k, (s.g - o.g) * k, (s.b - o.b) * k, 0);
                }
              } else {
                var t = 0;
                var z = 0;
                var B = 0;
                var D = 0;
                var F = 0;
                var G = 0;
                var H = 0;
                if (i >= l[l.length - d.ENTRIES]) {
                  var I = l.length;
                  t = l[I + d.PREV_R];
                  z = l[I + d.PREV_G];
                  B = l[I + d.PREV_B];
                  D = l[I + d.PREV_A];
                  F = l[I + d.PREV_R2];
                  G = l[I + d.PREV_G2];
                  H = l[I + d.PREV_B2];
                } else {
                  var A = w.binarySearch(l, i, d.ENTRIES);
                  t = l[A + d.PREV_R];
                  z = l[A + d.PREV_G];
                  B = l[A + d.PREV_B];
                  D = l[A + d.PREV_A];
                  F = l[A + d.PREV_R2];
                  G = l[A + d.PREV_G2];
                  H = l[A + d.PREV_B2];
                  var x = l[A];
                  var C = this.getCurvePercent(A / d.ENTRIES - 1, 1 - (i - x) / (l[A + d.PREV_TIME] - x));
                  t += (l[A + d.R] - t) * C;
                  z += (l[A + d.G] - z) * C;
                  B += (l[A + d.B] - B) * C;
                  D += (l[A + d.A] - D) * C;
                  F += (l[A + d.R2] - F) * C;
                  G += (l[A + d.G2] - G) * C;
                  H += (l[A + d.B2] - H) * C;
                }
                if (k == 1) {
                  c.color.set(t, z, B, D);
                  c.darkColor.set(F, G, H, 1);
                } else {
                  h = c.color;
                  o = c.darkColor;
                  if (n == q.setup) {
                    h.setFromColor(c.data.color);
                    o.setFromColor(c.data.darkColor);
                  }
                  h.add((t - h.r) * k, (z - h.g) * k, (B - h.b) * k, (D - h.a) * k);
                  o.add((F - o.r) * k, (G - o.g) * k, (H - o.b) * k, 0);
                }
              }
            }
          };
          d.ENTRIES = 8;
          d.PREV_TIME = -8;
          d.PREV_R = -7;
          d.PREV_G = -6;
          d.PREV_B = -5;
          d.PREV_A = -4;
          d.PREV_R2 = -3;
          d.PREV_G2 = -2;
          d.PREV_B2 = -1;
          d.R = 1;
          d.G = 2;
          d.B = 3;
          d.A = 4;
          d.R2 = 5;
          d.G2 = 6;
          d.B2 = 7;
          return d;
        }(r);
        j.TwoColorTimeline = s;
        var t = function () {
          function a(a) {
            this.frames = j.Utils.newFloatArray(a);
            this.attachmentNames = Array(a);
          }
          a.prototype.getPropertyId = function () {
            return (k.attachment << 24) + this.slotIndex;
          };
          a.prototype.getFrameCount = function () {
            return this.frames.length;
          };
          a.prototype.setFrame = function (a, b, c) {
            this.frames[a] = b;
            this.attachmentNames[a] = c;
          };
          a.prototype.apply = function (e, g, i, j, a, k, c) {
            var l = e.slots[this.slotIndex];
            if (l.bone.active) {
              if (c != b.mixOut || k != q.setup) {
                var h = this.frames;
                if (i < h[0]) {
                  if (k == q.setup || k == q.first) {
                    var m = l.data.attachmentName;
                    l.setAttachment(m == null ? null : e.getAttachment(this.slotIndex, m));
                  }
                } else {
                  var f;
                  f = i >= h[h.length - 1] ? h.length - 1 : w.binarySearch(h, i, 1) - 1;
                  var n = this.attachmentNames[f];
                  e.slots[this.slotIndex].setAttachment(n == null ? null : e.getAttachment(this.slotIndex, n));
                }
              } else {
                var o = l.data.attachmentName;
                l.setAttachment(o == null ? null : e.getAttachment(this.slotIndex, o));
              }
            }
          };
          return a;
        }();
        j.AttachmentTimeline = t;
        var d = null;
        var u = function (b) {
          function c(a) {
            var c = b.call(this, a) || this;
            c.frames = j.Utils.newFloatArray(a);
            c.frameVertices = Array(a);
            if (d == null) {
              d = j.Utils.newFloatArray(64);
            }
            return c;
          }
          f(c, b);
          c.prototype.getPropertyId = function () {
            return (k.deform << 27) + +this.attachment.id + this.slotIndex;
          };
          c.prototype.setFrame = function (a, b, c) {
            this.frames[a] = b;
            this.frameVertices[a] = c;
          };
          c.prototype.apply = function (e, i, n, r, a, s) {
            var t = e.slots[this.slotIndex];
            if (t.bone.active) {
              var l = t.getAttachment();
              if (l instanceof j.VertexAttachment && l.deformAttachment == this.attachment) {
                var h = t.deform;
                if (h.length == 0) {
                  s = q.setup;
                }
                var u = this.frameVertices;
                var f = u[0].length;
                var d = this.frames;
                if (n < d[0]) {
                  var J = l;
                  switch (s) {
                    case q.setup:
                      h.length = 0;
                      return;
                    case q.first:
                      if (a == 1) {
                        h.length = 0;
                        break;
                      }
                      var K = j.Utils.setArraySize(h, f);
                      if (J.bones == null) {
                        for (var v = J.vertices, Q = 0; Q < f; Q++) {
                          K[Q] += (v[Q] - K[Q]) * a;
                        }
                      } else {
                        a = 1 - a;
                        Q = 0;
                        a = 1 - a;
                        Q = 0;
                        for (; Q < f; Q++) {
                          K[Q] *= a;
                        }
                      }
                  }
                } else {
                  var X = j.Utils.setArraySize(h, f);
                  if (n >= d[d.length - 1]) {
                    var y = u[d.length - 1];
                    if (a == 1) {
                      if (s == q.add) {
                        if ((J = l).bones == null) {
                          v = J.vertices;
                          for (var T = 0; T < f; T++) {
                            X[T] += y[T] - v[T];
                          }
                        } else {
                          for (var Y = 0; Y < f; Y++) {
                            X[Y] += y[Y];
                          }
                        }
                      } else {
                        j.Utils.arrayCopy(y, 0, X, 0, f);
                      }
                    } else {
                      switch (s) {
                        case q.setup:
                          var Z = l;
                          if (Z.bones == null) {
                            v = Z.vertices;
                            for (var x = 0; x < f; x++) {
                              var $ = v[x];
                              X[x] = $ + (y[x] - $) * a;
                            }
                          } else {
                            for (var _ = 0; _ < f; _++) {
                              X[_] = y[_] * a;
                            }
                          }
                          break;
                        case q.first:
                        case q.replace:
                          for (var aa = 0; aa < f; aa++) {
                            X[aa] += (y[aa] - X[aa]) * a;
                          }
                        case q.add:
                          if ((J = l).bones == null) {
                            v = J.vertices;
                            for (var ba = 0; ba < f; ba++) {
                              X[ba] += (y[ba] - v[ba]) * a;
                            }
                          } else {
                            for (var ca = 0; ca < f; ca++) {
                              X[ca] += y[ca] * a;
                            }
                          }
                      }
                    }
                  } else {
                    var da = w.binarySearch(d, n);
                    var I = u[da - 1];
                    var O = u[da];
                    var L = d[da];
                    var P = this.getCurvePercent(da - 1, 1 - (n - L) / (d[da - 1] - L));
                    if (a == 1) {
                      if (s == q.add) {
                        if ((J = l).bones == null) {
                          v = J.vertices;
                          for (var D = 0; D < f; D++) {
                            var ea = I[D];
                            X[D] += ea + (O[D] - ea) * P - v[D];
                          }
                        } else {
                          for (var fa = 0; fa < f; fa++) {
                            ea = I[fa];
                            X[fa] += ea + (O[fa] - ea) * P;
                          }
                        }
                      } else {
                        for (var ga = 0; ga < f; ga++) {
                          ea = I[ga];
                          X[ga] = ea + (O[ga] - ea) * P;
                        }
                      }
                    } else {
                      switch (s) {
                        case q.setup:
                          var ha = l;
                          if (ha.bones == null) {
                            v = ha.vertices;
                            for (var k = 0; k < f; k++) {
                              ea = I[k];
                              $ = v[k];
                              X[k] = $ + (ea + (O[k] - ea) * P - $) * a;
                            }
                          } else {
                            for (var ia = 0; ia < f; ia++) {
                              ea = I[ia];
                              X[ia] = (ea + (O[ia] - ea) * P) * a;
                            }
                          }
                          break;
                        case q.first:
                        case q.replace:
                          for (var ja = 0; ja < f; ja++) {
                            ea = I[ja];
                            X[ja] += (ea + (O[ja] - ea) * P - X[ja]) * a;
                          }
                          break;
                        case q.add:
                          if ((J = l).bones == null) {
                            v = J.vertices;
                            for (var ka = 0; ka < f; ka++) {
                              ea = I[ka];
                              X[ka] += (ea + (O[ka] - ea) * P - v[ka]) * a;
                            }
                          } else {
                            for (var la = 0; la < f; la++) {
                              ea = I[la];
                              X[la] += (ea + (O[la] - ea) * P) * a;
                            }
                          }
                      }
                    }
                  }
                }
              }
            }
          };
          return c;
        }(r);
        j.DeformTimeline = u;
        var p = function () {
          function a(a) {
            this.frames = j.Utils.newFloatArray(a);
            this.events = Array(a);
          }
          a.prototype.getPropertyId = function () {
            return k.event << 24;
          };
          a.prototype.getFrameCount = function () {
            return this.frames.length;
          };
          a.prototype.setFrame = function (a, b) {
            this.frames[a] = b.time;
            this.events[a] = b;
          };
          a.prototype.apply = function (b, d, f, g, i, j, a) {
            if (g != null) {
              var k = this.frames;
              var c = this.frames.length;
              if (d > f) {
                this.apply(b, d, Number.MAX_VALUE, g, i, j, a);
                d = -1;
              } else if (d >= k[c - 1]) {
                return;
              }
              if (!(f < k[0])) {
                var l = 0;
                if (d < k[0]) {
                  l = 0;
                } else {
                  for (var m = k[l = w.binarySearch(k, d)]; l > 0 && k[l - 1] == m;) {
                    l--;
                  }
                }
                for (; l < c && f >= k[l]; l++) {
                  g.push(this.events[l]);
                }
              }
            }
          };
          return a;
        }();
        j.EventTimeline = p;
        var v = function () {
          function a(a) {
            this.frames = j.Utils.newFloatArray(a);
            this.drawOrders = Array(a);
          }
          a.prototype.getPropertyId = function () {
            return k.drawOrder << 24;
          };
          a.prototype.getFrameCount = function () {
            return this.frames.length;
          };
          a.prototype.setFrame = function (a, b, c) {
            this.frames[a] = b;
            this.drawOrders[a] = c;
          };
          a.prototype.apply = function (e, i, k, a, m, c, l) {
            var h = e.drawOrder;
            var n = e.slots;
            if (l != b.mixOut || c != q.setup) {
              var f = this.frames;
              if (k < f[0]) {
                if (!(c != q.setup && c != q.first)) {
                  j.Utils.arrayCopy(e.slots, 0, e.drawOrder, 0, e.slots.length);
                }
              } else {
                var d;
                d = k >= f[f.length - 1] ? f.length - 1 : w.binarySearch(f, k) - 1;
                var o = this.drawOrders[d];
                if (o == null) {
                  j.Utils.arrayCopy(n, 0, h, 0, n.length);
                } else {
                  for (var p = 0, r = o.length; p < r; p++) {
                    h[p] = n[o[p]];
                  }
                }
              }
            } else {
              j.Utils.arrayCopy(e.slots, 0, e.drawOrder, 0, e.slots.length);
            }
          };
          return a;
        }();
        j.DrawOrderTimeline = v;
        var g = function (c) {
          function m(a) {
            var b = c.call(this, a) || this;
            b.frames = j.Utils.newFloatArray(a * m.ENTRIES);
            return b;
          }
          f(m, c);
          m.prototype.getPropertyId = function () {
            return (k.ikConstraint << 24) + this.ikConstraintIndex;
          };
          m.prototype.setFrame = function (b, c, d, e, f, g, h) {
            b *= m.ENTRIES;
            this.frames[b] = c;
            this.frames[b + m.MIX] = d;
            this.frames[b + m.SOFTNESS] = e;
            this.frames[b + m.BEND_DIRECTION] = f;
            this.frames[b + m.COMPRESS] = g ? 1 : 0;
            this.frames[b + m.STRETCH] = h ? 1 : 0;
          };
          m.prototype.apply = function (e, i, j, k, a, c, l) {
            var h = this.frames;
            var n = e.ikConstraints[this.ikConstraintIndex];
            if (n.active) {
              if (j < h[0]) {
                switch (c) {
                  case q.setup:
                    n.mix = n.data.mix;
                    n.softness = n.data.softness;
                    n.bendDirection = n.data.bendDirection;
                    n.compress = n.data.compress;
                    n.stretch = n.data.stretch;
                    return;
                  case q.first:
                    n.mix += (n.data.mix - n.mix) * a;
                    n.softness += (n.data.softness - n.softness) * a;
                    n.bendDirection = n.data.bendDirection;
                    n.compress = n.data.compress;
                    n.stretch = n.data.stretch;
                }
              } else if (j >= h[h.length - m.ENTRIES]) {
                if (c == q.setup) {
                  n.mix = n.data.mix + (h[h.length + m.PREV_MIX] - n.data.mix) * a;
                  n.softness = n.data.softness + (h[h.length + m.PREV_SOFTNESS] - n.data.softness) * a;
                  if (l == b.mixOut) {
                    n.bendDirection = n.data.bendDirection;
                    n.compress = n.data.compress;
                    n.stretch = n.data.stretch;
                  } else {
                    n.bendDirection = h[h.length + m.PREV_BEND_DIRECTION];
                    n.compress = h[h.length + m.PREV_COMPRESS] != 0;
                    n.stretch = h[h.length + m.PREV_STRETCH] != 0;
                  }
                } else {
                  n.mix += (h[h.length + m.PREV_MIX] - n.mix) * a;
                  n.softness += (h[h.length + m.PREV_SOFTNESS] - n.softness) * a;
                  if (l == b.mixIn) {
                    n.bendDirection = h[h.length + m.PREV_BEND_DIRECTION];
                    n.compress = h[h.length + m.PREV_COMPRESS] != 0;
                    n.stretch = h[h.length + m.PREV_STRETCH] != 0;
                  }
                }
              } else {
                var f = w.binarySearch(h, j, m.ENTRIES);
                var d = h[f + m.PREV_MIX];
                var o = h[f + m.PREV_SOFTNESS];
                var p = h[f];
                var r = this.getCurvePercent(f / m.ENTRIES - 1, 1 - (j - p) / (h[f + m.PREV_TIME] - p));
                if (c == q.setup) {
                  n.mix = n.data.mix + (d + (h[f + m.MIX] - d) * r - n.data.mix) * a;
                  n.softness = n.data.softness + (o + (h[f + m.SOFTNESS] - o) * r - n.data.softness) * a;
                  if (l == b.mixOut) {
                    n.bendDirection = n.data.bendDirection;
                    n.compress = n.data.compress;
                    n.stretch = n.data.stretch;
                  } else {
                    n.bendDirection = h[f + m.PREV_BEND_DIRECTION];
                    n.compress = h[f + m.PREV_COMPRESS] != 0;
                    n.stretch = h[f + m.PREV_STRETCH] != 0;
                  }
                } else {
                  n.mix += (d + (h[f + m.MIX] - d) * r - n.mix) * a;
                  n.softness += (o + (h[f + m.SOFTNESS] - o) * r - n.softness) * a;
                  if (l == b.mixIn) {
                    n.bendDirection = h[f + m.PREV_BEND_DIRECTION];
                    n.compress = h[f + m.PREV_COMPRESS] != 0;
                    n.stretch = h[f + m.PREV_STRETCH] != 0;
                  }
                }
              }
            }
          };
          m.ENTRIES = 6;
          m.PREV_TIME = -6;
          m.PREV_MIX = -5;
          m.PREV_SOFTNESS = -4;
          m.PREV_BEND_DIRECTION = -3;
          m.PREV_COMPRESS = -2;
          m.PREV_STRETCH = -1;
          m.MIX = 1;
          m.SOFTNESS = 2;
          m.BEND_DIRECTION = 3;
          m.COMPRESS = 4;
          m.STRETCH = 5;
          return m;
        }(r);
        j.IkConstraintTimeline = g;
        var m = function (b) {
          function x(a) {
            var c = b.call(this, a) || this;
            c.frames = j.Utils.newFloatArray(a * x.ENTRIES);
            return c;
          }
          f(x, b);
          x.prototype.getPropertyId = function () {
            return (k.transformConstraint << 24) + this.transformConstraintIndex;
          };
          x.prototype.setFrame = function (a, b, c, d, e, f) {
            a *= x.ENTRIES;
            this.frames[a] = b;
            this.frames[a + x.ROTATE] = c;
            this.frames[a + x.TRANSLATE] = d;
            this.frames[a + x.SCALE] = e;
            this.frames[a + x.SHEAR] = f;
          };
          x.prototype.apply = function (a, b, e, i, j, k) {
            var c = this.frames;
            var l = a.transformConstraints[this.transformConstraintIndex];
            if (l.active) {
              if (e < c[0]) {
                var h = l.data;
                switch (k) {
                  case q.setup:
                    l.rotateMix = h.rotateMix;
                    l.translateMix = h.translateMix;
                    l.scaleMix = h.scaleMix;
                    l.shearMix = h.shearMix;
                    return;
                  case q.first:
                    l.rotateMix += (h.rotateMix - l.rotateMix) * j;
                    l.translateMix += (h.translateMix - l.translateMix) * j;
                    l.scaleMix += (h.scaleMix - l.scaleMix) * j;
                    l.shearMix += (h.shearMix - l.shearMix) * j;
                }
              } else {
                var n = 0;
                var o = 0;
                var r = 0;
                var s = 0;
                if (e >= c[c.length - x.ENTRIES]) {
                  var t = c.length;
                  n = c[t + x.PREV_ROTATE];
                  o = c[t + x.PREV_TRANSLATE];
                  r = c[t + x.PREV_SCALE];
                  s = c[t + x.PREV_SHEAR];
                } else {
                  var v = w.binarySearch(c, e, x.ENTRIES);
                  n = c[v + x.PREV_ROTATE];
                  o = c[v + x.PREV_TRANSLATE];
                  r = c[v + x.PREV_SCALE];
                  s = c[v + x.PREV_SHEAR];
                  var g = c[v];
                  var m = this.getCurvePercent(v / x.ENTRIES - 1, 1 - (e - g) / (c[v + x.PREV_TIME] - g));
                  n += (c[v + x.ROTATE] - n) * m;
                  o += (c[v + x.TRANSLATE] - o) * m;
                  r += (c[v + x.SCALE] - r) * m;
                  s += (c[v + x.SHEAR] - s) * m;
                }
                if (k == q.setup) {
                  h = l.data;
                  l.rotateMix = h.rotateMix + (n - h.rotateMix) * j;
                  l.translateMix = h.translateMix + (o - h.translateMix) * j;
                  l.scaleMix = h.scaleMix + (r - h.scaleMix) * j;
                  l.shearMix = h.shearMix + (s - h.shearMix) * j;
                } else {
                  l.rotateMix += (n - l.rotateMix) * j;
                  l.translateMix += (o - l.translateMix) * j;
                  l.scaleMix += (r - l.scaleMix) * j;
                  l.shearMix += (s - l.shearMix) * j;
                }
              }
            }
          };
          x.ENTRIES = 5;
          x.PREV_TIME = -5;
          x.PREV_ROTATE = -4;
          x.PREV_TRANSLATE = -3;
          x.PREV_SCALE = -2;
          x.PREV_SHEAR = -1;
          x.ROTATE = 1;
          x.TRANSLATE = 2;
          x.SCALE = 3;
          x.SHEAR = 4;
          return x;
        }(r);
        j.TransformConstraintTimeline = m;
        var x = function (b) {
          function g(a) {
            var c = b.call(this, a) || this;
            c.frames = j.Utils.newFloatArray(a * g.ENTRIES);
            return c;
          }
          f(g, b);
          g.prototype.getPropertyId = function () {
            return (k.pathConstraintPosition << 24) + this.pathConstraintIndex;
          };
          g.prototype.setFrame = function (a, b, c) {
            a *= g.ENTRIES;
            this.frames[a] = b;
            this.frames[a + g.VALUE] = c;
          };
          g.prototype.apply = function (a, b, e, i, j, k) {
            var c = this.frames;
            var l = a.pathConstraints[this.pathConstraintIndex];
            if (l.active) {
              if (e < c[0]) {
                switch (k) {
                  case q.setup:
                    l.position = l.data.position;
                    return;
                  case q.first:
                    l.position += (l.data.position - l.position) * j;
                }
              } else {
                var h = 0;
                if (e >= c[c.length - g.ENTRIES]) {
                  h = c[c.length + g.PREV_VALUE];
                } else {
                  var m = w.binarySearch(c, e, g.ENTRIES);
                  h = c[m + g.PREV_VALUE];
                  var f = c[m];
                  var d = this.getCurvePercent(m / g.ENTRIES - 1, 1 - (e - f) / (c[m + g.PREV_TIME] - f));
                  h += (c[m + g.VALUE] - h) * d;
                }
                if (k == q.setup) {
                  l.position = l.data.position + (h - l.data.position) * j;
                } else {
                  l.position += (h - l.position) * j;
                }
              }
            }
          };
          g.ENTRIES = 2;
          g.PREV_TIME = -2;
          g.PREV_VALUE = -1;
          g.VALUE = 1;
          return g;
        }(r);
        j.PathConstraintPositionTimeline = x;
        var y = function (a) {
          function b(b) {
            return a.call(this, b) || this;
          }
          f(b, a);
          b.prototype.getPropertyId = function () {
            return (k.pathConstraintSpacing << 24) + this.pathConstraintIndex;
          };
          b.prototype.apply = function (e, g, i, j, a, k) {
            var c = this.frames;
            var l = e.pathConstraints[this.pathConstraintIndex];
            if (l.active) {
              if (i < c[0]) {
                switch (k) {
                  case q.setup:
                    l.spacing = l.data.spacing;
                    return;
                  case q.first:
                    l.spacing += (l.data.spacing - l.spacing) * a;
                }
              } else {
                var h = 0;
                if (i >= c[c.length - b.ENTRIES]) {
                  h = c[c.length + b.PREV_VALUE];
                } else {
                  var m = w.binarySearch(c, i, b.ENTRIES);
                  h = c[m + b.PREV_VALUE];
                  var f = c[m];
                  var d = this.getCurvePercent(m / b.ENTRIES - 1, 1 - (i - f) / (c[m + b.PREV_TIME] - f));
                  h += (c[m + b.VALUE] - h) * d;
                }
                if (k == q.setup) {
                  l.spacing = l.data.spacing + (h - l.data.spacing) * a;
                } else {
                  l.spacing += (h - l.spacing) * a;
                }
              }
            }
          };
          return b;
        }(x);
        j.PathConstraintSpacingTimeline = y;
        var z = function (b) {
          function g(a) {
            var c = b.call(this, a) || this;
            c.frames = j.Utils.newFloatArray(a * g.ENTRIES);
            return c;
          }
          f(g, b);
          g.prototype.getPropertyId = function () {
            return (k.pathConstraintMix << 24) + this.pathConstraintIndex;
          };
          g.prototype.setFrame = function (a, b, c, d) {
            a *= g.ENTRIES;
            this.frames[a] = b;
            this.frames[a + g.ROTATE] = c;
            this.frames[a + g.TRANSLATE] = d;
          };
          g.prototype.apply = function (a, b, e, i, j, k) {
            var c = this.frames;
            var l = a.pathConstraints[this.pathConstraintIndex];
            if (l.active) {
              if (e < c[0]) {
                switch (k) {
                  case q.setup:
                    l.rotateMix = l.data.rotateMix;
                    l.translateMix = l.data.translateMix;
                    return;
                  case q.first:
                    l.rotateMix += (l.data.rotateMix - l.rotateMix) * j;
                    l.translateMix += (l.data.translateMix - l.translateMix) * j;
                }
              } else {
                var h = 0;
                var m = 0;
                if (e >= c[c.length - g.ENTRIES]) {
                  h = c[c.length + g.PREV_ROTATE];
                  m = c[c.length + g.PREV_TRANSLATE];
                } else {
                  var n = w.binarySearch(c, e, g.ENTRIES);
                  h = c[n + g.PREV_ROTATE];
                  m = c[n + g.PREV_TRANSLATE];
                  var d = c[n];
                  var o = this.getCurvePercent(n / g.ENTRIES - 1, 1 - (e - d) / (c[n + g.PREV_TIME] - d));
                  h += (c[n + g.ROTATE] - h) * o;
                  m += (c[n + g.TRANSLATE] - m) * o;
                }
                if (k == q.setup) {
                  l.rotateMix = l.data.rotateMix + (h - l.data.rotateMix) * j;
                  l.translateMix = l.data.translateMix + (m - l.data.translateMix) * j;
                } else {
                  l.rotateMix += (h - l.rotateMix) * j;
                  l.translateMix += (m - l.translateMix) * j;
                }
              }
            }
          };
          g.ENTRIES = 3;
          g.PREV_TIME = -3;
          g.PREV_ROTATE = -2;
          g.PREV_TRANSLATE = -1;
          g.ROTATE = 1;
          g.TRANSLATE = 2;
          return g;
        }(r);
        j.PathConstraintMixTimeline = z;
      })(e || (e = {}));
      (function (j) {
        var a = function () {
          function k(a) {
            this.tracks = [];
            this.timeScale = 1;
            this.events = [];
            this.listeners = [];
            this.queue = new d(this);
            this.propertyIDs = new j.IntSet();
            this.animationsChanged = false;
            this.trackEntryPool = new j.Pool(function () {
              return new b();
            });
            this.data = a;
          }
          k.prototype.update = function (b) {
            b *= this.timeScale;
            for (var d = this.tracks, e = 0, f = d.length; e < f; e++) {
              var g = d[e];
              if (g != null) {
                g.animationLast = g.nextAnimationLast;
                g.trackLast = g.nextTrackLast;
                var h = b * g.timeScale;
                if (g.delay > 0) {
                  g.delay -= h;
                  if (g.delay > 0) {
                    continue;
                  }
                  h = -g.delay;
                  g.delay = 0;
                }
                var j = g.next;
                if (j != null) {
                  var k = g.trackLast - j.delay;
                  if (k >= 0) {
                    j.delay = 0;
                    j.trackTime += g.timeScale == 0 ? 0 : (k / g.timeScale + b) * j.timeScale;
                    g.trackTime += h;
                    this.setCurrent(e, j, true);
                    for (; j.mixingFrom != null;) {
                      j.mixTime += b;
                      j = j.mixingFrom;
                    }
                    continue;
                  }
                } else if (g.trackLast >= g.trackEnd && g.mixingFrom == null) {
                  d[e] = null;
                  this.queue.end(g);
                  this.disposeNext(g);
                  continue;
                }
                if (g.mixingFrom != null && this.updateMixingFrom(g, b)) {
                  var l = g.mixingFrom;
                  g.mixingFrom = null;
                  if (l != null) {
                    l.mixingTo = null;
                  }
                  for (; l != null;) {
                    this.queue.end(l);
                    l = l.mixingFrom;
                  }
                }
                g.trackTime += h;
              }
            }
            this.queue.drain();
          };
          k.prototype.updateMixingFrom = function (a, b) {
            var c = a.mixingFrom;
            if (c == null) {
              return true;
            }
            var d = this.updateMixingFrom(c, b);
            c.animationLast = c.nextAnimationLast;
            c.trackLast = c.nextTrackLast;
            if (a.mixTime > 0 && a.mixTime >= a.mixDuration) {
              if (!(c.totalAlpha != 0 && a.mixDuration != 0)) {
                a.mixingFrom = c.mixingFrom;
                if (c.mixingFrom != null) {
                  c.mixingFrom.mixingTo = a;
                }
                a.interruptAlpha = c.interruptAlpha;
                this.queue.end(c);
              }
              return d;
            } else {
              c.trackTime += b * c.timeScale;
              a.mixTime += b;
              return false;
            }
          };
          k.prototype.apply = function (b) {
            if (b == null) {
              throw Error("skeleton cannot be null.");
            }
            if (this.animationsChanged) {
              this._animationsChanged();
            }
            for (var e = this.events, i = this.tracks, n = false, q = 0, r = i.length; q < r; q++) {
              var o = i[q];
              if (!(o == null || o.delay > 0)) {
                n = true;
                var t = q == 0 ? j.MixBlend.first : o.mixBlend;
                var w = o.alpha;
                if (o.mixingFrom != null) {
                  w *= this.applyMixingFrom(o, b, t);
                } else if (o.trackTime >= o.trackEnd && o.next == null) {
                  w = 0;
                }
                var x = o.animationLast;
                var z = o.getAnimationTime();
                var A = o.animation.timelines.length;
                var B = o.animation.timelines;
                if (q == 0 && w == 1 || t == j.MixBlend.add) {
                  for (var C = 0; C < A; C++) {
                    j.Utils.webkit602BugfixHelper(w, t);
                    B[C].apply(b, x, z, e, w, t, j.MixDirection.mixIn);
                  }
                } else {
                  var D = o.timelineMode;
                  var E = o.timelinesRotation.length == 0;
                  if (E) {
                    j.Utils.setArraySize(o.timelinesRotation, A << 1, null);
                  }
                  var F = o.timelinesRotation;
                  for (C = 0; C < A; C++) {
                    var G = B[C];
                    var H = (D[C] & k.NOT_LAST - 1) == k.SUBSEQUENT ? t : j.MixBlend.setup;
                    if (G instanceof j.RotateTimeline) {
                      this.applyRotateTimeline(G, b, z, w, H, F, C << 1, E);
                    } else {
                      j.Utils.webkit602BugfixHelper(w, t);
                      G.apply(b, x, z, e, w, H, j.MixDirection.mixIn);
                    }
                  }
                }
                this.queueEvents(o, z);
                e.length = 0;
                o.nextAnimationLast = z;
                o.nextTrackLast = o.trackTime;
              }
            }
            this.queue.drain();
            return n;
          };
          k.prototype.applyMixingFrom = function (e, i, n) {
            var q = e.mixingFrom;
            if (q.mixingFrom != null) {
              this.applyMixingFrom(q, i, n);
            }
            var s = 0;
            if (e.mixDuration == 0) {
              s = 1;
              if (n == j.MixBlend.first) {
                n = j.MixBlend.setup;
              }
            } else {
              if ((s = e.mixTime / e.mixDuration) > 1) {
                s = 1;
              }
              if (n != j.MixBlend.first) {
                n = q.mixBlend;
              }
            }
            var t = s < q.eventThreshold ? this.events : null;
            var o = s < q.attachmentThreshold;
            var c = s < q.drawOrderThreshold;
            var l = q.animationLast;
            var h = q.getAnimationTime();
            var u = q.animation.timelines.length;
            var f = q.animation.timelines;
            var d = q.alpha * e.interruptAlpha;
            var w = d * (1 - s);
            if (n == j.MixBlend.add) {
              for (var p = 0; p < u; p++) {
                f[p].apply(i, l, h, t, w, n, j.MixDirection.mixOut);
              }
            } else {
              var z = q.timelineMode;
              var g = q.timelineHoldMix;
              var m = q.timelinesRotation.length == 0;
              if (m) {
                j.Utils.setArraySize(q.timelinesRotation, u << 1, null);
              }
              var y = q.timelinesRotation;
              q.totalAlpha = 0;
              p = 0;
              for (; p < u; p++) {
                var B = f[p];
                var D = j.MixDirection.mixOut;
                var F = undefined;
                var G = 0;
                switch (z[p] & k.NOT_LAST - 1) {
                  case k.SUBSEQUENT:
                    F = n;
                    if (!o && B instanceof j.AttachmentTimeline) {
                      if ((z[p] & k.NOT_LAST) == k.NOT_LAST) {
                        continue;
                      }
                      F = j.MixBlend.setup;
                    }
                    if (!c && B instanceof j.DrawOrderTimeline) {
                      continue;
                    }
                    G = w;
                    break;
                  case k.FIRST:
                    F = j.MixBlend.setup;
                    G = w;
                    break;
                  case k.HOLD:
                    F = j.MixBlend.setup;
                    G = d;
                    break;
                  default:
                    F = j.MixBlend.setup;
                    var H = g[p];
                    G = d * Math.max(0, 1 - H.mixTime / H.mixDuration);
                }
                q.totalAlpha += G;
                if (B instanceof j.RotateTimeline) {
                  this.applyRotateTimeline(B, i, h, G, F, y, p << 1, m);
                } else {
                  j.Utils.webkit602BugfixHelper(G, n);
                  if (F == j.MixBlend.setup) {
                    if (B instanceof j.AttachmentTimeline) {
                      if (o || (z[p] & k.NOT_LAST) == k.NOT_LAST) {
                        D = j.MixDirection.mixIn;
                      }
                    } else if (B instanceof j.DrawOrderTimeline && c) {
                      D = j.MixDirection.mixIn;
                    }
                  }
                  B.apply(i, l, h, t, G, F, D);
                }
              }
            }
            if (e.mixDuration > 0) {
              this.queueEvents(q, h);
            }
            this.events.length = 0;
            q.nextAnimationLast = h;
            q.nextTrackLast = q.trackTime;
            return s;
          };
          k.prototype.applyRotateTimeline = function (b, e, i, k, n, q, a, o) {
            if (o) {
              q[a] = 0;
            }
            if (k != 1) {
              var c = b;
              var l = c.frames;
              var h = e.bones[c.boneIndex];
              if (h.active) {
                var r = 0;
                var s = 0;
                if (i < l[0]) {
                  switch (n) {
                    case j.MixBlend.setup:
                      h.rotation = h.data.rotation;
                    default:
                      return;
                    case j.MixBlend.first:
                      r = h.rotation;
                      s = h.data.rotation;
                  }
                } else {
                  r = n == j.MixBlend.setup ? h.data.rotation : h.rotation;
                  if (i >= l[l.length - j.RotateTimeline.ENTRIES]) {
                    s = h.data.rotation + l[l.length + j.RotateTimeline.PREV_ROTATION];
                  } else {
                    var t = j.Animation.binarySearch(l, i, j.RotateTimeline.ENTRIES);
                    var u = l[t + j.RotateTimeline.PREV_ROTATION];
                    var p = l[t];
                    var v = c.getCurvePercent((t >> 1) - 1, 1 - (i - p) / (l[t + j.RotateTimeline.PREV_TIME] - p));
                    s = l[t + j.RotateTimeline.ROTATION] - u;
                    s = u + (s -= (16384 - (16384.499999999996 - s / 360 | 0)) * 360) * v + h.data.rotation;
                    s -= (16384 - (16384.499999999996 - s / 360 | 0)) * 360;
                  }
                }
                var g = 0;
                var w = s - r;
                if ((w -= (16384 - (16384.499999999996 - w / 360 | 0)) * 360) == 0) {
                  g = q[a];
                } else {
                  var z = 0;
                  var B = 0;
                  if (o) {
                    z = 0;
                    B = w;
                  } else {
                    z = q[a];
                    B = q[a + 1];
                  }
                  var C = w > 0;
                  var A = z >= 0;
                  if (j.MathUtils.signum(B) != j.MathUtils.signum(w) && Math.abs(B) <= 90) {
                    if (Math.abs(z) > 180) {
                      z += j.MathUtils.signum(z) * 360;
                    }
                    A = C;
                  }
                  g = w + z - z % 360;
                  if (A != C) {
                    g += j.MathUtils.signum(z) * 360;
                  }
                  q[a] = g;
                }
                q[a + 1] = w;
                r += g * k;
                h.rotation = r - (16384 - (16384.499999999996 - r / 360 | 0)) * 360;
              }
            } else {
              b.apply(e, 0, i, null, 1, n, j.MixDirection.mixIn);
            }
          };
          k.prototype.queueEvents = function (b, d) {
            for (var e = b.animationStart, f = b.animationEnd, g = f - e, h = b.trackLast % g, i = this.events, a = 0, j = i.length; a < j; a++) {
              var c = i[a];
              if (c.time < h) {
                break;
              }
              if (!(c.time > f)) {
                this.queue.event(b, c);
              }
            }
            for ((b.loop ? g == 0 || h > b.trackTime % g : d >= f && b.animationLast < f) && this.queue.complete(b); a < j; a++) {
              if (!(i[a].time < e)) {
                this.queue.event(b, i[a]);
              }
            }
          };
          k.prototype.clearTracks = function () {
            var a = this.queue.drainDisabled;
            this.queue.drainDisabled = true;
            for (var b = 0, c = this.tracks.length; b < c; b++) {
              this.clearTrack(b);
            }
            this.tracks.length = 0;
            this.queue.drainDisabled = a;
            this.queue.drain();
          };
          k.prototype.clearTrack = function (a) {
            if (!(a >= this.tracks.length)) {
              var b = this.tracks[a];
              if (b != null) {
                this.queue.end(b);
                this.disposeNext(b);
                for (var c = b;;) {
                  var d = c.mixingFrom;
                  if (d == null) {
                    break;
                  }
                  this.queue.end(d);
                  c.mixingFrom = null;
                  c.mixingTo = null;
                  c = d;
                }
                this.tracks[b.trackIndex] = null;
                this.queue.drain();
              }
            }
          };
          k.prototype.setCurrent = function (a, b, c) {
            var d = this.expandToIndex(a);
            this.tracks[a] = b;
            if (d != null) {
              if (c) {
                this.queue.interrupt(d);
              }
              b.mixingFrom = d;
              d.mixingTo = b;
              b.mixTime = 0;
              if (d.mixingFrom != null && d.mixDuration > 0) {
                b.interruptAlpha *= Math.min(1, d.mixTime / d.mixDuration);
              }
              d.timelinesRotation.length = 0;
            }
            this.queue.start(b);
          };
          k.prototype.setAnimation = function (a, b, c) {
            var d = this.data.skeletonData.findAnimation(b);
            if (d == null) {
              throw Error("Animation not found: " + b);
            }
            return this.setAnimationWith(a, d, c);
          };
          k.prototype.setAnimationWith = function (a, b, c) {
            if (b == null) {
              throw Error("animation cannot be null.");
            }
            var d = true;
            var e = this.expandToIndex(a);
            if (e != null) {
              if (e.nextTrackLast == -1) {
                this.tracks[a] = e.mixingFrom;
                this.queue.interrupt(e);
                this.queue.end(e);
                this.disposeNext(e);
                e = e.mixingFrom;
                d = false;
              } else {
                this.disposeNext(e);
              }
            }
            var f = this.trackEntry(a, b, c, e);
            this.setCurrent(a, f, d);
            this.queue.drain();
            return f;
          };
          k.prototype.addAnimation = function (a, b, c, d) {
            var e = this.data.skeletonData.findAnimation(b);
            if (e == null) {
              throw Error("Animation not found: " + b);
            }
            return this.addAnimationWith(a, e, c, d);
          };
          k.prototype.addAnimationWith = function (b, c, d, e) {
            if (c == null) {
              throw Error("animation cannot be null.");
            }
            var f = this.expandToIndex(b);
            if (f != null) {
              for (; f.next != null;) {
                f = f.next;
              }
            }
            var g = this.trackEntry(b, c, d, f);
            if (f == null) {
              this.setCurrent(b, g, true);
              this.queue.drain();
            } else {
              f.next = g;
              if (e <= 0) {
                var h = f.animationEnd - f.animationStart;
                if (h != 0) {
                  if (f.loop) {
                    e += h * (1 + (f.trackTime / h | 0));
                  } else {
                    e += Math.max(h, f.trackTime);
                  }
                  e -= this.data.getMix(f.animation, c);
                } else {
                  e = f.trackTime;
                }
              }
            }
            g.delay = e;
            return g;
          };
          k.prototype.setEmptyAnimation = function (a, b) {
            var c = this.setAnimationWith(a, k.emptyAnimation, false);
            c.mixDuration = b;
            c.trackEnd = b;
            return c;
          };
          k.prototype.addEmptyAnimation = function (a, b, c) {
            if (c <= 0) {
              c -= b;
            }
            var d = this.addAnimationWith(a, k.emptyAnimation, false, c);
            d.mixDuration = b;
            d.trackEnd = b;
            return d;
          };
          k.prototype.setEmptyAnimations = function (a) {
            var b = this.queue.drainDisabled;
            this.queue.drainDisabled = true;
            for (var c = 0, d = this.tracks.length; c < d; c++) {
              var e = this.tracks[c];
              if (e != null) {
                this.setEmptyAnimation(e.trackIndex, a);
              }
            }
            this.queue.drainDisabled = b;
            this.queue.drain();
          };
          k.prototype.expandToIndex = function (a) {
            if (a < this.tracks.length) {
              return this.tracks[a];
            } else {
              j.Utils.ensureArrayCapacity(this.tracks, a + 1, null);
              this.tracks.length = a + 1;
              return null;
            }
          };
          k.prototype.trackEntry = function (a, b, c, d) {
            var e = this.trackEntryPool.obtain();
            e.trackIndex = a;
            e.animation = b;
            e.loop = c;
            e.holdPrevious = false;
            e.eventThreshold = 0;
            e.attachmentThreshold = 0;
            e.drawOrderThreshold = 0;
            e.animationStart = 0;
            e.animationEnd = b.duration;
            e.animationLast = -1;
            e.nextAnimationLast = -1;
            e.delay = 0;
            e.trackTime = 0;
            e.trackLast = -1;
            e.nextTrackLast = -1;
            e.trackEnd = Number.MAX_VALUE;
            e.timeScale = 1;
            e.alpha = 1;
            e.interruptAlpha = 1;
            e.mixTime = 0;
            e.mixDuration = d == null ? 0 : this.data.getMix(d.animation, b);
            return e;
          };
          k.prototype.disposeNext = function (a) {
            for (var b = a.next; b != null;) {
              this.queue.dispose(b);
              b = b.next;
            }
            a.next = null;
          };
          k.prototype._animationsChanged = function () {
            this.animationsChanged = false;
            this.propertyIDs.clear();
            for (var a = 0, b = this.tracks.length; a < b; a++) {
              if ((c = this.tracks[a]) != null) {
                for (; c.mixingFrom != null;) {
                  c = c.mixingFrom;
                }
                do {
                  if (!(c.mixingFrom != null && c.mixBlend == j.MixBlend.add)) {
                    this.computeHold(c);
                  }
                  c = c.mixingTo;
                } while (c != null);
              }
            }
            this.propertyIDs.clear();
            a = this.tracks.length - 1;
            for (; a >= 0; a--) {
              for (var c = this.tracks[a]; c != null;) {
                this.computeNotLast(c);
                c = c.mixingFrom;
              }
            }
          };
          k.prototype.computeHold = function (b) {
            var d = b.mixingTo;
            var e = b.animation.timelines;
            var g = b.animation.timelines.length;
            var i = j.Utils.setArraySize(b.timelineMode, g);
            b.timelineHoldMix.length = 0;
            var a = j.Utils.setArraySize(b.timelineHoldMix, g);
            var m = this.propertyIDs;
            if (d != null && d.holdPrevious) {
              for (var c = 0; c < g; c++) {
                m.add(e[c].getPropertyId());
                i[c] = k.HOLD;
              }
            } else {
              t: for (c = 0; c < g; c++) {
                var n = e[c];
                var o = n.getPropertyId();
                if (m.add(o)) {
                  if (d == null || n instanceof j.AttachmentTimeline || n instanceof j.DrawOrderTimeline || n instanceof j.EventTimeline || !d.animation.hasTimeline(o)) {
                    i[c] = k.FIRST;
                  } else {
                    for (var p = d.mixingTo; p != null; p = p.mixingTo) {
                      if (!p.animation.hasTimeline(o)) {
                        if (b.mixDuration > 0) {
                          i[c] = k.HOLD_MIX;
                          a[c] = p;
                          continue t;
                        }
                        break;
                      }
                    }
                    i[c] = k.HOLD;
                  }
                } else {
                  i[c] = k.SUBSEQUENT;
                }
              }
            }
          };
          k.prototype.computeNotLast = function (b) {
            for (var d = b.animation.timelines, e = b.animation.timelines.length, f = b.timelineMode, g = this.propertyIDs, a = 0; a < e; a++) {
              if (d[a] instanceof j.AttachmentTimeline) {
                var h = d[a];
                if (!g.add(h.slotIndex)) {
                  f[a] |= k.NOT_LAST;
                }
              }
            }
          };
          k.prototype.getCurrent = function (a) {
            if (a >= this.tracks.length) {
              return null;
            } else {
              return this.tracks[a];
            }
          };
          k.prototype.addListener = function (a) {
            if (a == null) {
              throw Error("listener cannot be null.");
            }
            this.listeners.push(a);
          };
          k.prototype.removeListener = function (a) {
            var b = this.listeners.indexOf(a);
            if (b >= 0) {
              this.listeners.splice(b, 1);
            }
          };
          k.prototype.clearListeners = function () {
            this.listeners.length = 0;
          };
          k.prototype.clearListenerNotifications = function () {
            this.queue.clear();
          };
          k.emptyAnimation = new j.Animation("<empty>", [], 0);
          k.SUBSEQUENT = 0;
          k.FIRST = 1;
          k.HOLD = 2;
          k.HOLD_MIX = 3;
          k.NOT_LAST = 4;
          return k;
        }();
        j.AnimationState = a;
        var b = function () {
          function a() {
            this.mixBlend = j.MixBlend.replace;
            this.timelineMode = [];
            this.timelineHoldMix = [];
            this.timelinesRotation = [];
          }
          a.prototype.reset = function () {
            this.next = null;
            this.mixingFrom = null;
            this.mixingTo = null;
            this.animation = null;
            this.listener = null;
            this.timelineMode.length = 0;
            this.timelineHoldMix.length = 0;
            this.timelinesRotation.length = 0;
          };
          a.prototype.getAnimationTime = function () {
            if (this.loop) {
              var a = this.animationEnd - this.animationStart;
              if (a == 0) {
                return this.animationStart;
              } else {
                return this.trackTime % a + this.animationStart;
              }
            }
            return Math.min(this.trackTime + this.animationStart, this.animationEnd);
          };
          a.prototype.setAnimationLast = function (a) {
            this.animationLast = a;
            this.nextAnimationLast = a;
          };
          a.prototype.isComplete = function () {
            return this.trackTime >= this.animationEnd - this.animationStart;
          };
          a.prototype.resetRotationDirections = function () {
            this.timelinesRotation.length = 0;
          };
          return a;
        }();
        j.TrackEntry = b;
        var c;
        var d = function () {
          function a(a) {
            this.objects = [];
            this.drainDisabled = false;
            this.animState = a;
          }
          a.prototype.start = function (a) {
            this.objects.push(c.start);
            this.objects.push(a);
            this.animState.animationsChanged = true;
          };
          a.prototype.interrupt = function (a) {
            this.objects.push(c.interrupt);
            this.objects.push(a);
          };
          a.prototype.end = function (a) {
            this.objects.push(c.end);
            this.objects.push(a);
            this.animState.animationsChanged = true;
          };
          a.prototype.dispose = function (a) {
            this.objects.push(c.dispose);
            this.objects.push(a);
          };
          a.prototype.complete = function (a) {
            this.objects.push(c.complete);
            this.objects.push(a);
          };
          a.prototype.event = function (a, b) {
            this.objects.push(c.event);
            this.objects.push(a);
            this.objects.push(b);
          };
          a.prototype.drain = function () {
            if (!this.drainDisabled) {
              this.drainDisabled = true;
              for (var b = this.objects, d = this.animState.listeners, e = 0; e < b.length; e += 2) {
                var f = b[e];
                var g = b[e + 1];
                switch (f) {
                  case c.start:
                    if (g.listener != null && g.listener.start) {
                      g.listener.start(g);
                    }
                    for (var h = 0; h < d.length; h++) {
                      if (d[h].start) {
                        d[h].start(g);
                      }
                    }
                    break;
                  case c.interrupt:
                    if (g.listener != null && g.listener.interrupt) {
                      g.listener.interrupt(g);
                    }
                    h = 0;
                    for (; h < d.length; h++) {
                      if (d[h].interrupt) {
                        d[h].interrupt(g);
                      }
                    }
                    break;
                  case c.end:
                    if (g.listener != null && g.listener.end) {
                      g.listener.end(g);
                    }
                    h = 0;
                    for (; h < d.length; h++) {
                      if (d[h].end) {
                        d[h].end(g);
                      }
                    }
                  case c.dispose:
                    if (g.listener != null && g.listener.dispose) {
                      g.listener.dispose(g);
                    }
                    h = 0;
                    for (; h < d.length; h++) {
                      if (d[h].dispose) {
                        d[h].dispose(g);
                      }
                    }
                    this.animState.trackEntryPool.free(g);
                    break;
                  case c.complete:
                    if (g.listener != null && g.listener.complete) {
                      g.listener.complete(g);
                    }
                    h = 0;
                    for (; h < d.length; h++) {
                      if (d[h].complete) {
                        d[h].complete(g);
                      }
                    }
                    break;
                  case c.event:
                    var j = b[2 + e++];
                    if (g.listener != null && g.listener.event) {
                      g.listener.event(g, j);
                    }
                    h = 0;
                    for (; h < d.length; h++) {
                      if (d[h].event) {
                        d[h].event(g, j);
                      }
                    }
                }
              }
              this.clear();
              this.drainDisabled = false;
            }
          };
          a.prototype.clear = function () {
            this.objects.length = 0;
          };
          return a;
        }();
        j.EventQueue = d;
        (function (a) {
          a[a.start = 0] = "start";
          a[a.interrupt = 1] = "interrupt";
          a[a.end = 2] = "end";
          a[a.dispose = 3] = "dispose";
          a[a.complete = 4] = "complete";
          a[a.event = 5] = "event";
        })(c = j.EventType || (j.EventType = {}));
        var e = function () {
          function a() {}
          a.prototype.start = function () {};
          a.prototype.interrupt = function () {};
          a.prototype.end = function () {};
          a.prototype.dispose = function () {};
          a.prototype.complete = function () {};
          a.prototype.event = function () {};
          return a;
        }();
        j.AnimationStateAdapter = e;
      })(e || (e = {}));
      (function (a) {
        var b = function () {
          function a(a) {
            this.animationToMixTime = {};
            this.defaultMix = 0;
            if (a == null) {
              throw Error("skeletonData cannot be null.");
            }
            this.skeletonData = a;
          }
          a.prototype.setMix = function (a, b, c) {
            var d = this.skeletonData.findAnimation(a);
            if (d == null) {
              throw Error("Animation not found: " + a);
            }
            var e = this.skeletonData.findAnimation(b);
            if (e == null) {
              throw Error("Animation not found: " + b);
            }
            this.setMixWith(d, e, c);
          };
          a.prototype.setMixWith = function (a, b, c) {
            if (a == null) {
              throw Error("from cannot be null.");
            }
            if (b == null) {
              throw Error("to cannot be null.");
            }
            var d = a.name + "." + b.name;
            this.animationToMixTime[d] = c;
          };
          a.prototype.getMix = function (a, b) {
            var c = a.name + "." + b.name;
            var d = this.animationToMixTime[c];
            if (d === undefined) {
              return this.defaultMix;
            } else {
              return d;
            }
          };
          return a;
        }();
        a.AnimationStateData = b;
      })(e || (e = {}));
      (function (b) {
        var a = function () {
          function c(a, b) {
            if (b === undefined) {
              b = "";
            }
            this.assets = {};
            this.errors = {};
            this.toLoad = 0;
            this.loaded = 0;
            this.textureLoader = a;
            this.pathPrefix = b;
          }
          c.downloadText = function (a, b, c) {
            var d = new XMLHttpRequest();
            d.open("GET", a, true);
            d.onload = function () {
              if (d.status == 200) {
                b(d.responseText);
              } else {
                c(d.status, d.responseText);
              }
            };
            d.onerror = function () {
              c(d.status, d.responseText);
            };
            d.send();
          };
          c.downloadBinary = function (a, b, c) {
            var d = new XMLHttpRequest();
            d.open("GET", a, true);
            d.responseType = "arraybuffer";
            d.onload = function () {
              if (d.status == 200) {
                b(new Uint8Array(d.response));
              } else {
                c(d.status, d.responseText);
              }
            };
            d.onerror = function () {
              c(d.status, d.responseText);
            };
            d.send();
          };
          c.prototype.loadBinary = function (a, b, d) {
            var f = this;
            if (b === undefined) {
              b = null;
            }
            if (d === undefined) {
              d = null;
            }
            a = this.pathPrefix + a;
            this.toLoad++;
            c.downloadBinary(a, function (c) {
              f.assets[a] = c;
              if (b) {
                b(a, c);
              }
              f.toLoad--;
              f.loaded++;
            }, function (b, c) {
              f.errors[a] = "Couldn't load binary " + a + ": status " + status + ", " + c;
              if (d) {
                d(a, "Couldn't load binary " + a + ": status " + status + ", " + c);
              }
              f.toLoad--;
              f.loaded++;
            });
          };
          c.prototype.loadText = function (a, b, d) {
            var f = this;
            if (b === undefined) {
              b = null;
            }
            if (d === undefined) {
              d = null;
            }
            a = this.pathPrefix + a;
            this.toLoad++;
            c.downloadText(a, function (c) {
              f.assets[a] = c;
              if (b) {
                b(a, c);
              }
              f.toLoad--;
              f.loaded++;
            }, function (b, c) {
              f.errors[a] = "Couldn't load text " + a + ": status " + status + ", " + c;
              if (d) {
                d(a, "Couldn't load text " + a + ": status " + status + ", " + c);
              }
              f.toLoad--;
              f.loaded++;
            });
          };
          c.prototype.loadTexture = function (a, b, c) {
            var d = this;
            if (b === undefined) {
              b = null;
            }
            if (c === undefined) {
              c = null;
            }
            a = this.pathPrefix + a;
            this.toLoad++;
            var f = new Image();
            f.crossOrigin = "anonymous";
            f.onload = function () {
              var c = d.textureLoader(f);
              d.assets[a] = c;
              d.toLoad--;
              d.loaded++;
              if (b) {
                b(a, f);
              }
            };
            f.onerror = function () {
              d.errors[a] = "Couldn't load image " + a;
              d.toLoad--;
              d.loaded++;
              if (c) {
                c(a, "Couldn't load image " + a);
              }
            };
            f.src = a;
          };
          c.prototype.loadTextureData = function (a, b, c, d) {
            var f = this;
            if (c === undefined) {
              c = null;
            }
            if (d === undefined) {
              d = null;
            }
            a = this.pathPrefix + a;
            this.toLoad++;
            var g = new Image();
            g.onload = function () {
              var b = f.textureLoader(g);
              f.assets[a] = b;
              f.toLoad--;
              f.loaded++;
              if (c) {
                c(a, g);
              }
            };
            g.onerror = function () {
              f.errors[a] = "Couldn't load image " + a;
              f.toLoad--;
              f.loaded++;
              if (d) {
                d(a, "Couldn't load image " + a);
              }
            };
            g.src = b;
          };
          c.prototype.loadTextureAtlas = function (g, d, h) {
            var j = this;
            if (d === undefined) {
              d = null;
            }
            if (h === undefined) {
              h = null;
            }
            var f = g.lastIndexOf("/") >= 0 ? g.substring(0, g.lastIndexOf("/")) : "";
            g = this.pathPrefix + g;
            this.toLoad++;
            c.downloadText(g, function (a) {
              var e = {
                count: 0
              };
              var k = [];
              try {
                new b.TextureAtlas(a, function (a) {
                  k.push(f + "/" + a);
                  var c = document.createElement("img");
                  c.width = 16;
                  c.height = 16;
                  return new b.FakeTexture(c);
                });
              } catch (a) {
                var c = a;
                j.errors[g] = "Couldn't load texture atlas " + g + ": " + c.message;
                if (h) {
                  h(g, "Couldn't load texture atlas " + g + ": " + c.message);
                }
                j.toLoad--;
                j.loaded++;
                return;
              }
              for (var i = function (c) {
                  var i = false;
                  j.loadTexture(c, function (c) {
                    e.count++;
                    if (e.count == k.length) {
                      if (i) {
                        j.errors[g] = "Couldn't load texture atlas page " + c + "} of atlas " + g;
                        if (h) {
                          h(g, "Couldn't load texture atlas page " + c + " of atlas " + g);
                        }
                        j.toLoad--;
                        j.loaded++;
                      } else {
                        try {
                          var l = new b.TextureAtlas(a, function (a) {
                            return j.get(f + "/" + a);
                          });
                          j.assets[g] = l;
                          if (d) {
                            d(g, l);
                          }
                          j.toLoad--;
                          j.loaded++;
                        } catch (a) {
                          var m = a;
                          j.errors[g] = "Couldn't load texture atlas " + g + ": " + m.message;
                          if (h) {
                            h(g, "Couldn't load texture atlas " + g + ": " + m.message);
                          }
                          j.toLoad--;
                          j.loaded++;
                        }
                      }
                    }
                  }, function (a) {
                    i = true;
                    e.count++;
                    if (e.count == k.length) {
                      j.errors[g] = "Couldn't load texture atlas page " + a + "} of atlas " + g;
                      if (h) {
                        h(g, "Couldn't load texture atlas page " + a + " of atlas " + g);
                      }
                      j.toLoad--;
                      j.loaded++;
                    }
                  });
                }, l = 0, m = k; l < m.length; l++) {
                i(m[l]);
              }
            }, function (a, b) {
              j.errors[g] = "Couldn't load texture atlas " + g + ": status " + status + ", " + b;
              if (h) {
                h(g, "Couldn't load texture atlas " + g + ": status " + status + ", " + b);
              }
              j.toLoad--;
              j.loaded++;
            });
          };
          c.prototype.get = function (a) {
            a = this.pathPrefix + a;
            return this.assets[a];
          };
          c.prototype.remove = function (a) {
            a = this.pathPrefix + a;
            var b = this.assets[a];
            if (b.dispose) {
              b.dispose();
            }
            this.assets[a] = null;
          };
          c.prototype.removeAll = function () {
            for (var a in this.assets) {
              var b = this.assets[a];
              if (b.dispose) {
                b.dispose();
              }
            }
            this.assets = {};
          };
          c.prototype.isLoadingComplete = function () {
            return this.toLoad == 0;
          };
          c.prototype.getToLoad = function () {
            return this.toLoad;
          };
          c.prototype.getLoaded = function () {
            return this.loaded;
          };
          c.prototype.dispose = function () {
            this.removeAll();
          };
          c.prototype.hasErrors = function () {
            return Object.keys(this.errors).length > 0;
          };
          c.prototype.getErrors = function () {
            return this.errors;
          };
          return c;
        }();
        b.AssetManager = a;
      })(e || (e = {}));
      (function (a) {
        var b = function () {
          function b(a) {
            this.atlas = a;
          }
          b.prototype.newRegionAttachment = function (b, c, d) {
            var e = this.atlas.findRegion(d);
            if (e == null) {
              return null;
            }
            e.renderObject = e;
            var f = new a.RegionAttachment(c);
            f.setRegion(e);
            return f;
          };
          b.prototype.newMeshAttachment = function (b, c, d) {
            var e = this.atlas.findRegion(d);
            if (e == null) {
              return null;
            }
            e.renderObject = e;
            var f = new a.MeshAttachment(c);
            f.region = e;
            return f;
          };
          b.prototype.newBoundingBoxAttachment = function (b, c) {
            return new a.BoundingBoxAttachment(c);
          };
          b.prototype.newPathAttachment = function (b, c) {
            return new a.PathAttachment(c);
          };
          b.prototype.newPointAttachment = function (b, c) {
            return new a.PointAttachment(c);
          };
          b.prototype.newClippingAttachment = function (b, c) {
            return new a.ClippingAttachment(c);
          };
          return b;
        }();
        a.AtlasAttachmentLoader = b;
      })(e || (e = {}));
      (function (a) {
        (function (a) {
          a[a.Normal = 0] = "Normal";
          a[a.Additive = 1] = "Additive";
          a[a.Multiply = 2] = "Multiply";
          a[a.Screen = 3] = "Screen";
        })(a.BlendMode || (a.BlendMode = {}));
      })(e || (e = {}));
      (function (c) {
        var a = function () {
          function a(a, b, c) {
            this.children = [];
            this.x = 0;
            this.y = 0;
            this.rotation = 0;
            this.scaleX = 0;
            this.scaleY = 0;
            this.shearX = 0;
            this.shearY = 0;
            this.ax = 0;
            this.ay = 0;
            this.arotation = 0;
            this.ascaleX = 0;
            this.ascaleY = 0;
            this.ashearX = 0;
            this.ashearY = 0;
            this.appliedValid = false;
            this.a = 0;
            this.b = 0;
            this.c = 0;
            this.d = 0;
            this.worldY = 0;
            this.worldX = 0;
            this.sorted = false;
            this.active = false;
            if (a == null) {
              throw Error("data cannot be null.");
            }
            if (b == null) {
              throw Error("skeleton cannot be null.");
            }
            this.data = a;
            this.skeleton = b;
            this.parent = c;
            this.setToSetupPose();
          }
          a.prototype.isActive = function () {
            return this.active;
          };
          a.prototype.update = function () {
            this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);
          };
          a.prototype.updateWorldTransform = function () {
            this.updateWorldTransformWith(this.x, this.y, this.rotation, this.scaleX, this.scaleY, this.shearX, this.shearY);
          };
          a.prototype.updateWorldTransformWith = function (j, e, i, k, n, q, a) {
            this.ax = j;
            this.ay = e;
            this.arotation = i;
            this.ascaleX = k;
            this.ascaleY = n;
            this.ashearX = q;
            this.ashearY = a;
            this.appliedValid = true;
            var o = this.parent;
            if (o == null) {
              var r = this.skeleton;
              var l = i + 90 + a;
              var s = r.scaleX;
              var t = r.scaleY;
              this.a = c.MathUtils.cosDeg(i + q) * k * s;
              this.b = c.MathUtils.cosDeg(l) * n * s;
              this.c = c.MathUtils.sinDeg(i + q) * k * t;
              this.d = c.MathUtils.sinDeg(l) * n * t;
              this.worldX = j * s + r.x;
              this.worldY = e * t + r.y;
              return;
            }
            var f = o.a;
            var u = o.b;
            var z = o.c;
            var B = o.d;
            this.worldX = f * j + u * e + o.worldX;
            this.worldY = z * j + B * e + o.worldY;
            switch (this.data.transformMode) {
              case c.TransformMode.Normal:
                l = i + 90 + a;
                var D = c.MathUtils.cosDeg(i + q) * k;
                var F = c.MathUtils.cosDeg(l) * n;
                var G = c.MathUtils.sinDeg(i + q) * k;
                var H = c.MathUtils.sinDeg(l) * n;
                this.a = f * D + u * G;
                this.b = f * F + u * H;
                this.c = z * D + B * G;
                this.d = z * F + B * H;
                return;
              case c.TransformMode.OnlyTranslation:
                l = i + 90 + a;
                this.a = c.MathUtils.cosDeg(i + q) * k;
                this.b = c.MathUtils.cosDeg(l) * n;
                this.c = c.MathUtils.sinDeg(i + q) * k;
                this.d = c.MathUtils.sinDeg(l) * n;
                break;
              case c.TransformMode.NoRotationOrReflection:
                var J = 0;
                if ((x = f * f + z * z) > 0.0001) {
                  u = z * (x = Math.abs(f * B - u * z) / x);
                  B = f * x;
                  J = Math.atan2(z, f) * c.MathUtils.radDeg;
                } else {
                  f = 0;
                  z = 0;
                  J = 90 - Math.atan2(B, u) * c.MathUtils.radDeg;
                }
                var K = i + q - J;
                var A = i + a - J + 90;
                D = c.MathUtils.cosDeg(K) * k;
                F = c.MathUtils.cosDeg(A) * n;
                G = c.MathUtils.sinDeg(K) * k;
                H = c.MathUtils.sinDeg(A) * n;
                this.a = f * D - u * G;
                this.b = f * F - u * H;
                this.c = z * D + B * G;
                this.d = z * F + B * H;
                break;
              case c.TransformMode.NoScale:
              case c.TransformMode.NoScaleOrReflection:
                var x;
                var L = c.MathUtils.cosDeg(i);
                var b = c.MathUtils.sinDeg(i);
                var N = (f * L + u * b) / this.skeleton.scaleX;
                var P = (z * L + B * b) / this.skeleton.scaleY;
                if ((x = Math.sqrt(N * N + P * P)) > 0.00001) {
                  x = 1 / x;
                }
                x = Math.sqrt((N *= x) * N + (P *= x) * P);
                if (this.data.transformMode == c.TransformMode.NoScale && f * B - u * z < 0 != (this.skeleton.scaleX < 0 != this.skeleton.scaleY < 0)) {
                  x = -x;
                }
                var Q = Math.PI / 2 + Math.atan2(P, N);
                var w = Math.cos(Q) * x;
                var I = Math.sin(Q) * x;
                D = c.MathUtils.cosDeg(q) * k;
                F = c.MathUtils.cosDeg(90 + a) * n;
                G = c.MathUtils.sinDeg(q) * k;
                H = c.MathUtils.sinDeg(90 + a) * n;
                this.a = N * D + w * G;
                this.b = N * F + w * H;
                this.c = P * D + I * G;
                this.d = P * F + I * H;
            }
            this.a *= this.skeleton.scaleX;
            this.b *= this.skeleton.scaleX;
            this.c *= this.skeleton.scaleY;
            this.d *= this.skeleton.scaleY;
          };
          a.prototype.setToSetupPose = function () {
            var a = this.data;
            this.x = a.x;
            this.y = a.y;
            this.rotation = a.rotation;
            this.scaleX = a.scaleX;
            this.scaleY = a.scaleY;
            this.shearX = a.shearX;
            this.shearY = a.shearY;
          };
          a.prototype.getWorldRotationX = function () {
            return Math.atan2(this.c, this.a) * c.MathUtils.radDeg;
          };
          a.prototype.getWorldRotationY = function () {
            return Math.atan2(this.d, this.b) * c.MathUtils.radDeg;
          };
          a.prototype.getWorldScaleX = function () {
            return Math.sqrt(this.a * this.a + this.c * this.c);
          };
          a.prototype.getWorldScaleY = function () {
            return Math.sqrt(this.b * this.b + this.d * this.d);
          };
          a.prototype.updateAppliedTransform = function () {
            this.appliedValid = true;
            var b = this.parent;
            if (b == null) {
              this.ax = this.worldX;
              this.ay = this.worldY;
              this.arotation = Math.atan2(this.c, this.a) * c.MathUtils.radDeg;
              this.ascaleX = Math.sqrt(this.a * this.a + this.c * this.c);
              this.ascaleY = Math.sqrt(this.b * this.b + this.d * this.d);
              this.ashearX = 0;
              this.ashearY = Math.atan2(this.a * this.b + this.c * this.d, this.a * this.d - this.b * this.c) * c.MathUtils.radDeg;
              return;
            }
            var e = b.a;
            var i = b.b;
            var j = b.c;
            var k = b.d;
            var m = 1 / (e * k - i * j);
            var a = this.worldX - b.worldX;
            var n = this.worldY - b.worldY;
            this.ax = a * k * m - n * i * m;
            this.ay = n * e * m - a * j * m;
            var o = m * k;
            var l = m * e;
            var h = m * i;
            var q = m * j;
            var f = o * this.a - h * this.c;
            var d = o * this.b - h * this.d;
            var r = l * this.c - q * this.a;
            var p = l * this.d - q * this.b;
            this.ashearX = 0;
            this.ascaleX = Math.sqrt(f * f + r * r);
            if (this.ascaleX > 0.0001) {
              var s = f * p - d * r;
              this.ascaleY = s / this.ascaleX;
              this.ashearY = Math.atan2(f * d + r * p, s) * c.MathUtils.radDeg;
              this.arotation = Math.atan2(r, f) * c.MathUtils.radDeg;
            } else {
              this.ascaleX = 0;
              this.ascaleY = Math.sqrt(d * d + p * p);
              this.ashearY = 0;
              this.arotation = 90 - Math.atan2(p, d) * c.MathUtils.radDeg;
            }
          };
          a.prototype.worldToLocal = function (b) {
            var c = this.a;
            var d = this.b;
            var e = this.c;
            var f = this.d;
            var g = 1 / (c * f - d * e);
            var h = b.x - this.worldX;
            var a = b.y - this.worldY;
            b.x = h * f * g - a * d * g;
            b.y = a * c * g - h * e * g;
            return b;
          };
          a.prototype.localToWorld = function (a) {
            var b = a.x;
            var c = a.y;
            a.x = b * this.a + c * this.b + this.worldX;
            a.y = b * this.c + c * this.d + this.worldY;
            return a;
          };
          a.prototype.worldToLocalRotation = function (a) {
            var b = c.MathUtils.sinDeg(a);
            var d = c.MathUtils.cosDeg(a);
            return Math.atan2(this.a * b - this.c * d, this.d * d - this.b * b) * c.MathUtils.radDeg + this.rotation - this.shearX;
          };
          a.prototype.localToWorldRotation = function (a) {
            a -= this.rotation - this.shearX;
            var b = c.MathUtils.sinDeg(a);
            var d = c.MathUtils.cosDeg(a);
            return Math.atan2(d * this.c + b * this.d, d * this.a + b * this.b) * c.MathUtils.radDeg;
          };
          a.prototype.rotateWorld = function (b) {
            var d = this.a;
            var e = this.b;
            var f = this.c;
            var g = this.d;
            var h = c.MathUtils.cosDeg(b);
            var a = c.MathUtils.sinDeg(b);
            this.a = h * d - a * f;
            this.b = h * e - a * g;
            this.c = a * d + h * f;
            this.d = a * e + h * g;
            this.appliedValid = false;
          };
          return a;
        }();
        c.Bone = a;
      })(e || (e = {}));
      (function (a) {
        var b;
        a.BoneData = function (c, d, e) {
          this.x = 0;
          this.y = 0;
          this.rotation = 0;
          this.scaleX = 1;
          this.scaleY = 1;
          this.shearX = 0;
          this.shearY = 0;
          this.transformMode = b.Normal;
          this.skinRequired = false;
          this.color = new a.Color();
          if (c < 0) {
            throw Error("index must be >= 0.");
          }
          if (d == null) {
            throw Error("name cannot be null.");
          }
          this.index = c;
          this.name = d;
          this.parent = e;
        };
        (function (a) {
          a[a.Normal = 0] = "Normal";
          a[a.OnlyTranslation = 1] = "OnlyTranslation";
          a[a.NoRotationOrReflection = 2] = "NoRotationOrReflection";
          a[a.NoScale = 3] = "NoScale";
          a[a.NoScaleOrReflection = 4] = "NoScaleOrReflection";
        })(b = a.TransformMode || (a.TransformMode = {}));
      })(e || (e = {}));
      (function (a) {
        a.ConstraintData = function (a, b, c) {
          this.name = a;
          this.order = b;
          this.skinRequired = c;
        };
      })(e || (e = {}));
      (function (a) {
        a.Event = function (a, b) {
          if (b == null) {
            throw Error("data cannot be null.");
          }
          this.time = a;
          this.data = b;
        };
      })(e || (e = {}));
      (function (a) {
        a.EventData = function (a) {
          this.name = a;
        };
      })(e || (e = {}));
      (function (aa) {
        var a = function () {
          function a(a, b) {
            this.bendDirection = 0;
            this.compress = false;
            this.stretch = false;
            this.mix = 1;
            this.softness = 0;
            this.active = false;
            if (a == null) {
              throw Error("data cannot be null.");
            }
            if (b == null) {
              throw Error("skeleton cannot be null.");
            }
            this.data = a;
            this.mix = a.mix;
            this.softness = a.softness;
            this.bendDirection = a.bendDirection;
            this.compress = a.compress;
            this.stretch = a.stretch;
            this.bones = [];
            for (var c = 0; c < a.bones.length; c++) {
              this.bones.push(b.findBone(a.bones[c].name));
            }
            this.target = b.findBone(a.target.name);
          }
          a.prototype.isActive = function () {
            return this.active;
          };
          a.prototype.apply = function () {
            this.update();
          };
          a.prototype.update = function () {
            var a = this.target;
            var b = this.bones;
            switch (b.length) {
              case 1:
                this.apply1(b[0], a.worldX, a.worldY, this.compress, this.stretch, this.data.uniform, this.mix);
                break;
              case 2:
                this.apply2(b[0], b[1], a.worldX, a.worldY, this.bendDirection, this.stretch, this.softness, this.mix);
            }
          };
          a.prototype.apply1 = function (b, e, i, j, k, n, a) {
            if (!b.appliedValid) {
              b.updateAppliedTransform();
            }
            var o = b.parent;
            var c = 1 / (o.a * o.d - o.b * o.c);
            var l = e - o.worldX;
            var h = i - o.worldY;
            var q = (l * o.d - h * o.b) * c - b.ax;
            var f = (h * o.a - l * o.c) * c - b.ay;
            var d = Math.atan2(f, q) * aa.MathUtils.radDeg - b.ashearX - b.arotation;
            if (b.ascaleX < 0) {
              d += 180;
            }
            if (d > 180) {
              d -= 360;
            } else if (d < -180) {
              d += 360;
            }
            var r = b.ascaleX;
            var s = b.ascaleY;
            if (j || k) {
              var t = b.data.length * r;
              var g = Math.sqrt(q * q + f * f);
              if (j && g < t || k && g > t && t > 0.0001) {
                var m = (g / t - 1) * a + 1;
                r *= m;
                if (n) {
                  s *= m;
                }
              }
            }
            b.updateWorldTransformWith(b.ax, b.ay, b.arotation + d * a, r, s, b.ashearX, b.ashearY);
          };
          a.prototype.apply2 = function (t, e, i, n, r, s, a, ba) {
            if (ba != 0) {
              if (!t.appliedValid) {
                t.updateAppliedTransform();
              }
              if (!e.appliedValid) {
                e.updateAppliedTransform();
              }
              var c = t.ax;
              var l = t.ay;
              var h = t.ascaleX;
              var ca = h;
              var da = t.ascaleY;
              var ea = e.ascaleX;
              var fa = 0;
              var ga = 0;
              var ha = 0;
              if (h < 0) {
                h = -h;
                fa = 180;
                ha = -1;
              } else {
                fa = 0;
                ha = 1;
              }
              if (da < 0) {
                da = -da;
                ha = -ha;
              }
              if (ea < 0) {
                ea = -ea;
                ga = 180;
              } else {
                ga = 0;
              }
              var ia = e.ax;
              var m = 0;
              var ja = 0;
              var ka = 0;
              var la = t.a;
              var ma = t.b;
              var na = t.c;
              var oa = t.d;
              var pa = Math.abs(h - da) <= 0.0001;
              if (pa) {
                ja = la * ia + ma * (m = e.ay) + t.worldX;
                ka = na * ia + oa * m + t.worldY;
              } else {
                m = 0;
                ja = la * ia + t.worldX;
                ka = na * ia + t.worldY;
              }
              var S = t.parent;
              la = S.a;
              ma = S.b;
              na = S.c;
              var R;
              var qa;
              var ra = 1 / (la * (oa = S.d) - ma * na);
              var I = ja - S.worldX;
              var sa = ka - S.worldY;
              var ta = (I * oa - sa * ma) * ra - c;
              var P = (sa * la - I * na) * ra - l;
              var D = Math.sqrt(ta * ta + P * P);
              var N = e.data.length * ea;
              if (D < 0.0001) {
                this.apply1(t, i, n, false, s, false, ba);
                e.updateWorldTransformWith(ia, m, 0, e.ascaleX, e.ascaleY, e.ashearX, e.ashearY);
                return;
              }
              var ua = ((I = i - S.worldX) * oa - (sa = n - S.worldY) * ma) * ra - c;
              var va = (sa * la - I * na) * ra - l;
              var wa = ua * ua + va * va;
              if (a != 0) {
                a *= h * (ea + 1) / 2;
                var xa = Math.sqrt(wa);
                var U = xa - D - N * h + a;
                if (U > 0) {
                  var z = Math.min(1, U / (a * 2)) - 1;
                  wa = (ua -= (z = (U - a * (1 - z * z)) / xa) * ua) * ua + (va -= z * va) * va;
                }
              }
              t: if (pa) {
                var ya = (wa - D * D - (N *= h) * N) / (D * 2 * N);
                if (ya < -1) {
                  ya = -1;
                } else if (ya > 1) {
                  ya = 1;
                  if (s) {
                    ca *= (Math.sqrt(wa) / (D + N) - 1) * ba + 1;
                  }
                }
                R = Math.atan2(va * (la = D + N * ya) - ua * (ma = N * Math.sin(qa = Math.acos(ya) * r)), ua * la + va * ma);
              } else {
                var za = (la = h * N) * la;
                var W = (ma = da * N) * ma;
                var X = Math.atan2(va, ua);
                var Y = W * -2 * D;
                var j = W - za;
                if ((oa = Y * Y - j * 4 * (na = W * D * D + za * wa - za * W)) >= 0) {
                  var q = Math.sqrt(oa);
                  if (Y < 0) {
                    q = -q;
                  }
                  var Aa = (q = -(Y + q) / 2) / j;
                  var K = na / q;
                  var Q = Math.abs(Aa) < Math.abs(K) ? Aa : K;
                  if (Q * Q <= wa) {
                    R = X - Math.atan2(sa = Math.sqrt(wa - Q * Q) * r, Q);
                    qa = Math.atan2(sa / da, (Q - D) / h);
                    break t;
                  }
                }
                var J = aa.MathUtils.PI;
                var Ba = D - la;
                var Ca = Ba * Ba;
                var Da = 0;
                var Ea = 0;
                var Fa = D + la;
                var Ga = Fa * Fa;
                var Ha = 0;
                if ((na = -la * D / (za - W)) >= -1 && na <= 1) {
                  if ((oa = (I = la * Math.cos(na = Math.acos(na)) + D) * I + (sa = ma * Math.sin(na)) * sa) < Ca) {
                    J = na;
                    Ca = oa;
                    Ba = I;
                    Da = sa;
                  }
                  if (oa > Ga) {
                    Ea = na;
                    Ga = oa;
                    Fa = I;
                    Ha = sa;
                  }
                }
                if (wa <= (Ca + Ga) / 2) {
                  R = X - Math.atan2(Da * r, Ba);
                  qa = J * r;
                } else {
                  R = X - Math.atan2(Ha * r, Fa);
                  qa = Ea * r;
                }
              }
              var Ia = Math.atan2(m, ia) * ha;
              var Ja = t.arotation;
              if ((R = (R - Ia) * aa.MathUtils.radDeg + fa - Ja) > 180) {
                R -= 360;
              } else if (R < -180) {
                R += 360;
              }
              t.updateWorldTransformWith(c, l, Ja + R * ba, ca, t.ascaleY, 0, 0);
              Ja = e.arotation;
              if ((qa = ((qa + Ia) * aa.MathUtils.radDeg - e.ashearX) * ha + ga - Ja) > 180) {
                qa -= 360;
              } else if (qa < -180) {
                qa += 360;
              }
              e.updateWorldTransformWith(ia, m, Ja + qa * ba, e.ascaleX, e.ascaleY, e.ashearX, e.ashearY);
            } else {
              e.updateWorldTransform();
            }
          };
          return a;
        }();
        aa.IkConstraint = a;
      })(e || (e = {}));
      (function (a) {
        var b = function (a) {
          function b(b) {
            var c = a.call(this, b, 0, false) || this;
            c.bones = [];
            c.bendDirection = 1;
            c.compress = false;
            c.stretch = false;
            c.uniform = false;
            c.mix = 1;
            c.softness = 0;
            return c;
          }
          f(b, a);
          return b;
        }(a.ConstraintData);
        a.IkConstraintData = b;
      })(e || (e = {}));
      (function (J) {
        var a = function () {
          function t(a, b) {
            this.position = 0;
            this.spacing = 0;
            this.rotateMix = 0;
            this.translateMix = 0;
            this.spaces = [];
            this.positions = [];
            this.world = [];
            this.curves = [];
            this.lengths = [];
            this.segments = [];
            this.active = false;
            if (a == null) {
              throw Error("data cannot be null.");
            }
            if (b == null) {
              throw Error("skeleton cannot be null.");
            }
            this.data = a;
            this.bones = [];
            for (var c = 0, d = a.bones.length; c < d; c++) {
              this.bones.push(b.findBone(a.bones[c].name));
            }
            this.target = b.findSlot(a.target.name);
            this.position = a.position;
            this.spacing = a.spacing;
            this.rotateMix = a.rotateMix;
            this.translateMix = a.translateMix;
          }
          t.prototype.isActive = function () {
            return this.active;
          };
          t.prototype.apply = function () {
            this.update();
          };
          t.prototype.update = function () {
            var e = this.target.getAttachment();
            if (e instanceof J.PathAttachment) {
              var i = this.rotateMix;
              var j = this.translateMix;
              var n = i > 0;
              if (j > 0 || n) {
                var q = this.data;
                var a = q.spacingMode == J.SpacingMode.Percent;
                var o = q.rotateMode;
                var c = o == J.RotateMode.Tangent;
                var l = o == J.RotateMode.ChainScale;
                var h = this.bones.length;
                var r = c ? h : h + 1;
                var f = this.bones;
                var d = J.Utils.setArraySize(this.spaces, r);
                var s = null;
                var u = this.spacing;
                if (l || !a) {
                  if (l) {
                    s = J.Utils.setArraySize(this.lengths, h);
                  }
                  for (var v = q.spacingMode == J.SpacingMode.Length, g = 0, K = r - 1; g < K;) {
                    var y = (ca = f[g]).data.length;
                    if (y < t.epsilon) {
                      if (l) {
                        s[g] = 0;
                      }
                      d[++g] = 0;
                    } else if (a) {
                      if (l) {
                        var Q = y * ca.a;
                        var W = y * ca.c;
                        var X = Math.sqrt(Q * Q + W * W);
                        s[g] = X;
                      }
                      d[++g] = u;
                    } else {
                      Q = y * ca.a;
                      W = y * ca.c;
                      var Y = Math.sqrt(Q * Q + W * W);
                      if (l) {
                        s[g] = Y;
                      }
                      d[++g] = (v ? y + u : u) * Y / y;
                    }
                  }
                } else {
                  for (g = 1; g < r; g++) {
                    d[g] = u;
                  }
                }
                var Z = this.computeWorldPositions(e, r, c, q.positionMode == J.PositionMode.Percent, a);
                var b = Z[0];
                var $ = Z[1];
                var _ = q.offsetRotation;
                var aa = false;
                if (_ == 0) {
                  aa = o == J.RotateMode.Chain;
                } else {
                  aa = false;
                  _ *= (ba = this.target.bone).a * ba.d - ba.b * ba.c > 0 ? J.MathUtils.degRad : -J.MathUtils.degRad;
                }
                g = 0;
                for (var ba = 3; g < h; g++, ba += 3) {
                  var ca;
                  (ca = f[g]).worldX += (b - ca.worldX) * j;
                  ca.worldY += ($ - ca.worldY) * j;
                  var da = (Q = Z[ba]) - b;
                  var ea = (W = Z[ba + 1]) - $;
                  if (l) {
                    var fa = s[g];
                    if (fa != 0) {
                      var ga = (Math.sqrt(da * da + ea * ea) / fa - 1) * i + 1;
                      ca.a *= ga;
                      ca.c *= ga;
                    }
                  }
                  b = Q;
                  $ = W;
                  if (n) {
                    var ha = ca.a;
                    var ia = ca.b;
                    var ja = ca.c;
                    var ka = ca.d;
                    var la = 0;
                    var ma = 0;
                    var na = 0;
                    la = c ? Z[ba - 1] : d[g + 1] == 0 ? Z[ba + 2] : Math.atan2(ea, da);
                    la -= Math.atan2(ja, ha);
                    if (aa) {
                      ma = Math.cos(la);
                      na = Math.sin(la);
                      var oa = ca.data.length;
                      b += (oa * (ma * ha - na * ja) - da) * i;
                      $ += (oa * (na * ha + ma * ja) - ea) * i;
                    } else {
                      la += _;
                    }
                    if (la > J.MathUtils.PI) {
                      la -= J.MathUtils.PI2;
                    } else if (la < -J.MathUtils.PI) {
                      la += J.MathUtils.PI2;
                    }
                    ma = Math.cos(la *= i);
                    na = Math.sin(la);
                    ca.a = ma * ha - na * ja;
                    ca.b = ma * ia - na * ka;
                    ca.c = na * ha + ma * ja;
                    ca.d = na * ia + ma * ka;
                  }
                  ca.appliedValid = false;
                }
              }
            }
          };
          t.prototype.computeWorldPositions = function (e, i, n, r, s) {
            var a = this.target;
            var o = this.position;
            var K = this.spaces;
            var l = J.Utils.setArraySize(this.positions, i * 3 + 2);
            var h = null;
            var Q = e.closed;
            var f = e.worldVerticesLength;
            var $ = f / 6;
            var aa = t.NONE;
            if (!e.constantSpeed) {
              var ba = e.lengths;
              var v = ba[$ -= Q ? 1 : 2];
              if (r) {
                o *= v;
              }
              if (s) {
                for (var g = 1; g < i; g++) {
                  K[g] *= v;
                }
              }
              h = J.Utils.setArraySize(this.world, 8);
              g = 0;
              for (var ca = 0, da = 0; g < i; g++, ca += 3) {
                var ea = o += Aa = K[g];
                if (Q) {
                  if ((ea %= v) < 0) {
                    ea += v;
                  }
                  da = 0;
                } else {
                  if (ea < 0) {
                    if (aa != t.BEFORE) {
                      aa = t.BEFORE;
                      e.computeWorldVertices(a, 2, 4, h, 0, 2);
                    }
                    this.addBeforePosition(ea, h, 0, l, ca);
                    continue;
                  }
                  if (ea > v) {
                    if (aa != t.AFTER) {
                      aa = t.AFTER;
                      e.computeWorldVertices(a, f - 6, 4, h, 0, 2);
                    }
                    this.addAfterPosition(ea - v, h, 0, l, ca);
                    continue;
                  }
                }
                for (;; da++) {
                  var fa = ba[da];
                  if (!(ea > fa)) {
                    if (da == 0) {
                      ea /= fa;
                    } else {
                      ea = (ea - (Ea = ba[da - 1])) / (fa - Ea);
                    }
                    break;
                  }
                }
                if (da != aa) {
                  aa = da;
                  if (Q && da == $) {
                    e.computeWorldVertices(a, f - 4, 4, h, 0, 2);
                    e.computeWorldVertices(a, 0, 4, h, 4, 2);
                  } else {
                    e.computeWorldVertices(a, da * 6 + 2, 8, h, 0, 2);
                  }
                }
                this.addCurvePosition(ea, h[0], h[1], h[2], h[3], h[4], h[5], h[6], h[7], l, ca, n || g > 0 && Aa == 0);
              }
              return l;
            }
            if (Q) {
              f += 2;
              h = J.Utils.setArraySize(this.world, f);
              e.computeWorldVertices(a, 2, f - 4, h, 0, 2);
              e.computeWorldVertices(a, 0, 2, h, f - 4, 2);
              h[f - 2] = h[0];
              h[f - 1] = h[1];
            } else {
              $--;
              f -= 4;
              h = J.Utils.setArraySize(this.world, f);
              e.computeWorldVertices(a, 2, f, h, 0, 2);
            }
            for (var ga = J.Utils.setArraySize(this.curves, $), x = 0, ha = h[0], ia = h[1], ja = 0, ka = 0, la = 0, ma = 0, na = 0, oa = 0, pa = 0, qa = 0, ra = 0, sa = 0, ta = 0, ua = 0, va = 0, wa = 0, xa = (g = 0, 2); g < $; g++, xa += 6) {
              ja = h[xa];
              ka = h[xa + 1];
              la = h[xa + 2];
              ma = h[xa + 3];
              ta = (pa = (ha - ja * 2 + la) * 0.1875) * 2 + (ra = ((ja - la) * 3 - ha + (na = h[xa + 4])) * 0.09375);
              ua = (qa = (ia - ka * 2 + ma) * 0.1875) * 2 + (sa = ((ka - ma) * 3 - ia + (oa = h[xa + 5])) * 0.09375);
              x += Math.sqrt((va = (ja - ha) * 0.75 + pa + ra * 0.16666667) * va + (wa = (ka - ia) * 0.75 + qa + sa * 0.16666667) * wa);
              va += ta;
              wa += ua;
              ta += ra;
              ua += sa;
              x += Math.sqrt(va * va + wa * wa);
              x += Math.sqrt((va += ta) * va + (wa += ua) * wa);
              x += Math.sqrt((va += ta + ra) * va + (wa += ua + sa) * wa);
              ga[g] = x;
              ha = na;
              ia = oa;
            }
            o *= r ? x : x / e.lengths[$ - 1];
            if (s) {
              for (g = 1; g < i; g++) {
                K[g] *= x;
              }
            }
            for (var ya = this.segments, G = 0, za = (g = 0, ca = 0, da = 0, 0); g < i; g++, ca += 3) {
              var Aa;
              ea = o += Aa = K[g];
              if (Q) {
                if ((ea %= x) < 0) {
                  ea += x;
                }
                da = 0;
              } else {
                if (ea < 0) {
                  this.addBeforePosition(ea, h, 0, l, ca);
                  continue;
                }
                if (ea > x) {
                  this.addAfterPosition(ea - x, h, f - 4, l, ca);
                  continue;
                }
              }
              for (;; da++) {
                var Ba = ga[da];
                if (!(ea > Ba)) {
                  if (da == 0) {
                    ea /= Ba;
                  } else {
                    ea = (ea - (Ea = ga[da - 1])) / (Ba - Ea);
                  }
                  break;
                }
              }
              if (da != aa) {
                aa = da;
                var Ca = da * 6;
                ha = h[Ca];
                ia = h[Ca + 1];
                ja = h[Ca + 2];
                ka = h[Ca + 3];
                la = h[Ca + 4];
                ma = h[Ca + 5];
                ta = (pa = (ha - ja * 2 + la) * 0.03) * 2 + (ra = ((ja - la) * 3 - ha + (na = h[Ca + 6])) * 0.006);
                ua = (qa = (ia - ka * 2 + ma) * 0.03) * 2 + (sa = ((ka - ma) * 3 - ia + (oa = h[Ca + 7])) * 0.006);
                G = Math.sqrt((va = (ja - ha) * 0.3 + pa + ra * 0.16666667) * va + (wa = (ka - ia) * 0.3 + qa + sa * 0.16666667) * wa);
                ya[0] = G;
                Ca = 1;
                for (; Ca < 8; Ca++) {
                  va += ta;
                  wa += ua;
                  ta += ra;
                  ua += sa;
                  G += Math.sqrt(va * va + wa * wa);
                  ya[Ca] = G;
                }
                G += Math.sqrt((va += ta) * va + (wa += ua) * wa);
                ya[8] = G;
                G += Math.sqrt((va += ta + ra) * va + (wa += ua + sa) * wa);
                ya[9] = G;
                za = 0;
              }
              for (ea *= G;; za++) {
                var Da = ya[za];
                if (!(ea > Da)) {
                  var Ea;
                  if (za == 0) {
                    ea /= Da;
                  } else {
                    ea = za + (ea - (Ea = ya[za - 1])) / (Da - Ea);
                  }
                  break;
                }
              }
              this.addCurvePosition(ea * 0.1, ha, ia, ja, ka, la, ma, na, oa, l, ca, n || g > 0 && Aa == 0);
            }
            return l;
          };
          t.prototype.addBeforePosition = function (b, d, e, f, g) {
            var h = d[e];
            var i = d[e + 1];
            var a = d[e + 2] - h;
            var j = d[e + 3] - i;
            var c = Math.atan2(j, a);
            f[g] = h + b * Math.cos(c);
            f[g + 1] = i + b * Math.sin(c);
            f[g + 2] = c;
          };
          t.prototype.addAfterPosition = function (b, d, e, f, g) {
            var h = d[e + 2];
            var i = d[e + 3];
            var a = h - d[e];
            var j = i - d[e + 1];
            var c = Math.atan2(j, a);
            f[g] = h + b * Math.cos(c);
            f[g + 1] = i + b * Math.sin(c);
            f[g + 2] = c;
          };
          t.prototype.addCurvePosition = function (b, j, e, i, k, n, q, a, o, c, l, h) {
            if (b == 0 || isNaN(b)) {
              c[l] = j;
              c[l + 1] = e;
              c[l + 2] = Math.atan2(k - e, i - j);
              return;
            }
            var r = b * b;
            var f = r * b;
            var d = 1 - b;
            var s = d * d;
            var p = s * d;
            var t = d * b;
            var g = t * 3;
            var m = d * g;
            var u = g * b;
            var v = j * p + i * m + n * u + a * f;
            var w = e * p + k * m + q * u + o * f;
            c[l] = v;
            c[l + 1] = w;
            if (h) {
              c[l + 2] = b < 0.001 ? Math.atan2(k - e, i - j) : Math.atan2(w - (e * s + k * t * 2 + q * r), v - (j * s + i * t * 2 + n * r));
            }
          };
          t.NONE = -1;
          t.BEFORE = -2;
          t.AFTER = -3;
          t.epsilon = 0.00001;
          return t;
        }();
        J.PathConstraint = a;
      })(e || (e = {}));
      (function (a) {
        var b = function (a) {
          function b(b) {
            var c = a.call(this, b, 0, false) || this;
            c.bones = [];
            return c;
          }
          f(b, a);
          return b;
        }(a.ConstraintData);
        a.PathConstraintData = b;
        (function (a) {
          a[a.Fixed = 0] = "Fixed";
          a[a.Percent = 1] = "Percent";
        })(a.PositionMode || (a.PositionMode = {}));
        (function (a) {
          a[a.Length = 0] = "Length";
          a[a.Fixed = 1] = "Fixed";
          a[a.Percent = 2] = "Percent";
        })(a.SpacingMode || (a.SpacingMode = {}));
        (function (a) {
          a[a.Tangent = 0] = "Tangent";
          a[a.Chain = 1] = "Chain";
          a[a.ChainScale = 2] = "ChainScale";
        })(a.RotateMode || (a.RotateMode = {}));
      })(e || (e = {}));
      (function (a) {
        var b = function () {
          function a(a) {
            this.toLoad = [];
            this.assets = {};
            this.clientId = a;
          }
          a.prototype.loaded = function () {
            var a = 0;
            for (var b in this.assets) {
              a++;
            }
            return a;
          };
          return a;
        }();
        var c = function () {
          function a(a) {
            if (a === undefined) {
              a = "";
            }
            this.clientAssets = {};
            this.queuedAssets = {};
            this.rawAssets = {};
            this.errors = {};
            this.pathPrefix = a;
          }
          a.prototype.queueAsset = function (a, c, d) {
            var e = this.clientAssets[a];
            if (e == null) {
              e = new b(a);
              this.clientAssets[a] = e;
            }
            if (c !== null) {
              e.textureLoader = c;
            }
            e.toLoad.push(d);
            return this.queuedAssets[d] !== d && (this.queuedAssets[d] = d, true);
          };
          a.prototype.loadText = function (a, b) {
            var c = this;
            b = this.pathPrefix + b;
            if (this.queueAsset(a, null, b)) {
              var d = new XMLHttpRequest();
              d.onreadystatechange = function () {
                if (d.readyState == XMLHttpRequest.DONE) {
                  if (d.status >= 200 && d.status < 300) {
                    c.rawAssets[b] = d.responseText;
                  } else {
                    c.errors[b] = "Couldn't load text " + b + ": status " + d.status + ", " + d.responseText;
                  }
                }
              };
              d.open("GET", b, true);
              d.send();
            }
          };
          a.prototype.loadJson = function (a, b) {
            var c = this;
            b = this.pathPrefix + b;
            if (this.queueAsset(a, null, b)) {
              var d = new XMLHttpRequest();
              d.onreadystatechange = function () {
                if (d.readyState == XMLHttpRequest.DONE) {
                  if (d.status >= 200 && d.status < 300) {
                    c.rawAssets[b] = JSON.parse(d.responseText);
                  } else {
                    c.errors[b] = "Couldn't load text " + b + ": status " + d.status + ", " + d.responseText;
                  }
                }
              };
              d.open("GET", b, true);
              d.send();
            }
          };
          a.prototype.loadTexture = function (a, b, c) {
            var d = this;
            c = this.pathPrefix + c;
            if (this.queueAsset(a, b, c)) {
              var e = new Image();
              e.src = c;
              e.crossOrigin = "anonymous";
              e.onload = function () {
                d.rawAssets[c] = e;
              };
              e.onerror = function () {
                d.errors[c] = "Couldn't load image " + c;
              };
            }
          };
          a.prototype.get = function (a, b) {
            b = this.pathPrefix + b;
            var c = this.clientAssets[a];
            return c == null || c.assets[b];
          };
          a.prototype.updateClientAssets = function (a) {
            for (var b = 0; b < a.toLoad.length; b++) {
              var c = a.toLoad[b];
              if (a.assets[c] == null) {
                var d = this.rawAssets[c];
                if (d == null) {
                  continue;
                }
                if (d instanceof HTMLImageElement) {
                  a.assets[c] = a.textureLoader(d);
                } else {
                  a.assets[c] = d;
                }
              }
            }
          };
          a.prototype.isLoadingComplete = function (a) {
            var b = this.clientAssets[a];
            return b == null || (this.updateClientAssets(b), b.toLoad.length == b.loaded());
          };
          a.prototype.dispose = function () {};
          a.prototype.hasErrors = function () {
            return Object.keys(this.errors).length > 0;
          };
          a.prototype.getErrors = function () {
            return this.errors;
          };
          return a;
        }();
        a.SharedAssetManager = c;
      })(e || (e = {}));
      (function (b) {
        var a = function () {
          function a(d) {
            this._updateCache = [];
            this.updateCacheReset = [];
            this.time = 0;
            this.scaleX = 1;
            this.scaleY = 1;
            this.x = 0;
            this.y = 0;
            if (d == null) {
              throw Error("data cannot be null.");
            }
            this.data = d;
            this.bones = [];
            for (var e = 0; e < d.bones.length; e++) {
              var f = d.bones[e];
              var g = undefined;
              if (f.parent == null) {
                g = new b.Bone(f, this, null);
              } else {
                var j = this.bones[f.parent.index];
                g = new b.Bone(f, this, j);
                j.children.push(g);
              }
              this.bones.push(g);
            }
            this.slots = [];
            this.drawOrder = [];
            e = 0;
            for (; e < d.slots.length; e++) {
              var k = d.slots[e];
              g = this.bones[k.boneData.index];
              var m = new b.Slot(k, g);
              this.slots.push(m);
              this.drawOrder.push(m);
            }
            this.ikConstraints = [];
            e = 0;
            for (; e < d.ikConstraints.length; e++) {
              var p = d.ikConstraints[e];
              this.ikConstraints.push(new b.IkConstraint(p, this));
            }
            this.transformConstraints = [];
            e = 0;
            for (; e < d.transformConstraints.length; e++) {
              var q = d.transformConstraints[e];
              this.transformConstraints.push(new b.TransformConstraint(q, this));
            }
            this.pathConstraints = [];
            e = 0;
            for (; e < d.pathConstraints.length; e++) {
              var t = d.pathConstraints[e];
              this.pathConstraints.push(new b.PathConstraint(t, this));
            }
            this.color = new b.Color(1, 1, 1, 1);
            this.updateCache();
          }
          a.prototype.updateCache = function () {
            this._updateCache.length = 0;
            this.updateCacheReset.length = 0;
            for (var b = this.bones, g = 0, j = b.length; g < j; g++) {
              (m = b[g]).sorted = m.data.skinRequired;
              m.active = !m.sorted;
            }
            if (this.skin != null) {
              var k = this.skin.bones;
              g = 0;
              j = this.skin.bones.length;
              for (; g < j; g++) {
                var m = this.bones[k[g].index];
                do {
                  m.sorted = false;
                  m.active = true;
                  m = m.parent;
                } while (m != null);
              }
            }
            var n = this.ikConstraints;
            var p = this.transformConstraints;
            var a = this.pathConstraints;
            var o = n.length;
            var c = p.length;
            var l = a.length;
            var h = o + c + l;
            t: for (g = 0; g < h; g++) {
              for (var q = 0; q < o; q++) {
                if ((s = n[q]).data.order == g) {
                  this.sortIkConstraint(s);
                  continue t;
                }
              }
              for (q = 0; q < c; q++) {
                if ((s = p[q]).data.order == g) {
                  this.sortTransformConstraint(s);
                  continue t;
                }
              }
              for (q = 0; q < l; q++) {
                var s;
                if ((s = a[q]).data.order == g) {
                  this.sortPathConstraint(s);
                  continue t;
                }
              }
            }
            g = 0;
            j = b.length;
            for (; g < j; g++) {
              this.sortBone(b[g]);
            }
          };
          a.prototype.sortIkConstraint = function (a) {
            a.active = a.target.isActive() && (!a.data.skinRequired || this.skin != null && b.Utils.contains(this.skin.constraints, a.data, true));
            if (a.active) {
              var c = a.target;
              this.sortBone(c);
              var d = a.bones;
              var e = d[0];
              this.sortBone(e);
              if (d.length > 1) {
                var f = d[d.length - 1];
                if (!(this._updateCache.indexOf(f) > -1)) {
                  this.updateCacheReset.push(f);
                }
              }
              this._updateCache.push(a);
              this.sortReset(e.children);
              d[d.length - 1].sorted = true;
            }
          };
          a.prototype.sortPathConstraint = function (d) {
            d.active = d.target.bone.isActive() && (!d.data.skinRequired || this.skin != null && b.Utils.contains(this.skin.constraints, d.data, true));
            if (d.active) {
              var e = d.target;
              var f = e.data.index;
              var g = e.bone;
              if (this.skin != null) {
                this.sortPathConstraintAttachment(this.skin, f, g);
              }
              if (this.data.defaultSkin != null && this.data.defaultSkin != this.skin) {
                this.sortPathConstraintAttachment(this.data.defaultSkin, f, g);
              }
              for (var h = 0, i = this.data.skins.length; h < i; h++) {
                this.sortPathConstraintAttachment(this.data.skins[h], f, g);
              }
              var a = e.getAttachment();
              if (a instanceof b.PathAttachment) {
                this.sortPathConstraintAttachmentWith(a, g);
              }
              var j = d.bones;
              var c = j.length;
              for (h = 0; h < c; h++) {
                this.sortBone(j[h]);
              }
              this._updateCache.push(d);
              h = 0;
              for (; h < c; h++) {
                this.sortReset(j[h].children);
              }
              for (h = 0; h < c; h++) {
                j[h].sorted = true;
              }
            }
          };
          a.prototype.sortTransformConstraint = function (c) {
            c.active = c.target.isActive() && (!c.data.skinRequired || this.skin != null && b.Utils.contains(this.skin.constraints, c.data, true));
            if (c.active) {
              this.sortBone(c.target);
              var d = c.bones;
              var e = d.length;
              if (c.data.local) {
                for (var f = 0; f < e; f++) {
                  var g = d[f];
                  this.sortBone(g.parent);
                  if (!(this._updateCache.indexOf(g) > -1)) {
                    this.updateCacheReset.push(g);
                  }
                }
              } else {
                for (f = 0; f < e; f++) {
                  this.sortBone(d[f]);
                }
              }
              this._updateCache.push(c);
              for (var h = 0; h < e; h++) {
                this.sortReset(d[h].children);
              }
              for (h = 0; h < e; h++) {
                d[h].sorted = true;
              }
            }
          };
          a.prototype.sortPathConstraintAttachment = function (a, b, c) {
            var d = a.attachments[b];
            if (d) {
              for (var e in d) {
                this.sortPathConstraintAttachmentWith(d[e], c);
              }
            }
          };
          a.prototype.sortPathConstraintAttachmentWith = function (d, e) {
            if (d instanceof b.PathAttachment) {
              var f = d.bones;
              if (f == null) {
                this.sortBone(e);
              } else {
                for (var g = this.bones, h = 0; h < f.length;) {
                  for (var i = f[h++], j = h + i; h < j; h++) {
                    var k = f[h];
                    this.sortBone(g[k]);
                  }
                }
              }
            }
          };
          a.prototype.sortBone = function (a) {
            if (!a.sorted) {
              var b = a.parent;
              if (b != null) {
                this.sortBone(b);
              }
              a.sorted = true;
              this._updateCache.push(a);
            }
          };
          a.prototype.sortReset = function (a) {
            for (var b = 0, c = a.length; b < c; b++) {
              var d = a[b];
              if (d.active) {
                if (d.sorted) {
                  this.sortReset(d.children);
                }
                d.sorted = false;
              }
            }
          };
          a.prototype.updateWorldTransform = function () {
            for (var a = this.updateCacheReset, b = 0, c = a.length; b < c; b++) {
              var d = a[b];
              d.ax = d.x;
              d.ay = d.y;
              d.arotation = d.rotation;
              d.ascaleX = d.scaleX;
              d.ascaleY = d.scaleY;
              d.ashearX = d.shearX;
              d.ashearY = d.shearY;
              d.appliedValid = true;
            }
            var f = this._updateCache;
            b = 0;
            c = f.length;
            for (; b < c; b++) {
              f[b].update();
            }
          };
          a.prototype.setToSetupPose = function () {
            this.setBonesToSetupPose();
            this.setSlotsToSetupPose();
          };
          a.prototype.setBonesToSetupPose = function () {
            for (var b = this.bones, c = 0, d = b.length; c < d; c++) {
              b[c].setToSetupPose();
            }
            var f = this.ikConstraints;
            c = 0;
            d = f.length;
            for (; c < d; c++) {
              (a = f[c]).mix = a.data.mix;
              a.softness = a.data.softness;
              a.bendDirection = a.data.bendDirection;
              a.compress = a.data.compress;
              a.stretch = a.data.stretch;
            }
            var g = this.transformConstraints;
            c = 0;
            d = g.length;
            for (; c < d; c++) {
              var h = (a = g[c]).data;
              a.rotateMix = h.rotateMix;
              a.translateMix = h.translateMix;
              a.scaleMix = h.scaleMix;
              a.shearMix = h.shearMix;
            }
            var j = this.pathConstraints;
            c = 0;
            d = j.length;
            for (; c < d; c++) {
              var a;
              h = (a = j[c]).data;
              a.position = h.position;
              a.spacing = h.spacing;
              a.rotateMix = h.rotateMix;
              a.translateMix = h.translateMix;
            }
          };
          a.prototype.setSlotsToSetupPose = function () {
            var a = this.slots;
            b.Utils.arrayCopy(a, 0, this.drawOrder, 0, a.length);
            for (var c = 0, d = a.length; c < d; c++) {
              a[c].setToSetupPose();
            }
          };
          a.prototype.getRootBone = function () {
            if (this.bones.length == 0) {
              return null;
            } else {
              return this.bones[0];
            }
          };
          a.prototype.findBone = function (a) {
            if (a == null) {
              throw Error("boneName cannot be null.");
            }
            for (var b = this.bones, c = 0, d = b.length; c < d; c++) {
              var e = b[c];
              if (e.data.name == a) {
                return e;
              }
            }
            return null;
          };
          a.prototype.findBoneIndex = function (a) {
            if (a == null) {
              throw Error("boneName cannot be null.");
            }
            for (var b = this.bones, c = 0, d = b.length; c < d; c++) {
              if (b[c].data.name == a) {
                return c;
              }
            }
            return -1;
          };
          a.prototype.findSlot = function (a) {
            if (a == null) {
              throw Error("slotName cannot be null.");
            }
            for (var b = this.slots, c = 0, d = b.length; c < d; c++) {
              var e = b[c];
              if (e.data.name == a) {
                return e;
              }
            }
            return null;
          };
          a.prototype.findSlotIndex = function (a) {
            if (a == null) {
              throw Error("slotName cannot be null.");
            }
            for (var b = this.slots, c = 0, d = b.length; c < d; c++) {
              if (b[c].data.name == a) {
                return c;
              }
            }
            return -1;
          };
          a.prototype.setSkinByName = function (a) {
            var b = this.data.findSkin(a);
            if (b == null) {
              throw Error("Skin not found: " + a);
            }
            this.setSkin(b);
          };
          a.prototype.setSkin = function (b) {
            if (b != this.skin) {
              if (b != null) {
                if (this.skin != null) {
                  b.attachAll(this, this.skin);
                } else {
                  for (var c = this.slots, d = 0, e = c.length; d < e; d++) {
                    var f = c[d];
                    var g = f.data.attachmentName;
                    if (g != null) {
                      var h = b.getAttachment(d, g);
                      if (h != null) {
                        f.setAttachment(h);
                      }
                    }
                  }
                }
              }
              this.skin = b;
              this.updateCache();
            }
          };
          a.prototype.getAttachmentByName = function (a, b) {
            return this.getAttachment(this.data.findSlotIndex(a), b);
          };
          a.prototype.getAttachment = function (a, b) {
            if (b == null) {
              throw Error("attachmentName cannot be null.");
            }
            if (this.skin != null) {
              var c = this.skin.getAttachment(a, b);
              if (c != null) {
                return c;
              }
            }
            if (this.data.defaultSkin != null) {
              return this.data.defaultSkin.getAttachment(a, b);
            } else {
              return null;
            }
          };
          a.prototype.setAttachment = function (b, c) {
            if (b == null) {
              throw Error("slotName cannot be null.");
            }
            for (var d = this.slots, e = 0, f = d.length; e < f; e++) {
              var g = d[e];
              if (g.data.name == b) {
                var h = null;
                if (c != null && (h = this.getAttachment(e, c)) == null) {
                  throw Error("Attachment not found: " + c + ", for slot: " + b);
                }
                g.setAttachment(h);
                return;
              }
            }
            throw Error("Slot not found: " + b);
          };
          a.prototype.findIkConstraint = function (a) {
            if (a == null) {
              throw Error("constraintName cannot be null.");
            }
            for (var b = this.ikConstraints, c = 0, d = b.length; c < d; c++) {
              var e = b[c];
              if (e.data.name == a) {
                return e;
              }
            }
            return null;
          };
          a.prototype.findTransformConstraint = function (a) {
            if (a == null) {
              throw Error("constraintName cannot be null.");
            }
            for (var b = this.transformConstraints, c = 0, d = b.length; c < d; c++) {
              var e = b[c];
              if (e.data.name == a) {
                return e;
              }
            }
            return null;
          };
          a.prototype.findPathConstraint = function (a) {
            if (a == null) {
              throw Error("constraintName cannot be null.");
            }
            for (var b = this.pathConstraints, c = 0, d = b.length; c < d; c++) {
              var e = b[c];
              if (e.data.name == a) {
                return e;
              }
            }
            return null;
          };
          a.prototype.getBounds = function (j, e, i) {
            if (i === undefined) {
              i = [,,];
            }
            if (j == null) {
              throw Error("offset cannot be null.");
            }
            if (e == null) {
              throw Error("size cannot be null.");
            }
            for (var k = this.drawOrder, q = Infinity, r = Infinity, t = -Infinity, w = -Infinity, x = 0, z = k.length; x < z; x++) {
              var h = k[x];
              if (h.bone.active) {
                var A = 0;
                var B = null;
                var C = h.getAttachment();
                if (C instanceof b.RegionAttachment) {
                  A = 8;
                  B = b.Utils.setArraySize(i, A, 0);
                  C.computeWorldVertices(h.bone, B, 0, 2);
                } else if (C instanceof b.MeshAttachment) {
                  var D = C;
                  A = D.worldVerticesLength;
                  B = b.Utils.setArraySize(i, A, 0);
                  D.computeWorldVertices(h, 0, A, B, 0, 2);
                }
                if (B != null) {
                  for (var E = 0, F = B.length; E < F; E += 2) {
                    var G = B[E];
                    var H = B[E + 1];
                    q = Math.min(q, G);
                    r = Math.min(r, H);
                    t = Math.max(t, G);
                    w = Math.max(w, H);
                  }
                }
              }
            }
            j.set(q, r);
            e.set(t - q, w - r);
          };
          a.prototype.update = function (a) {
            this.time += a;
          };
          return a;
        }();
        b.Skeleton = a;
      })(e || (e = {}));
      (function (j) {
        var a = function () {
          function q(a) {
            this.scale = 1;
            this.linkedMeshes = [];
            this.attachmentLoader = a;
          }
          q.prototype.readSkeletonData = function (e) {
            var i = this.scale;
            var k = new j.SkeletonData();
            k.name = "";
            var n = new b(e);
            k.hash = n.readString();
            k.version = n.readString();
            k.x = n.readFloat();
            k.y = n.readFloat();
            k.width = n.readFloat();
            k.height = n.readFloat();
            var a = n.readBoolean();
            if (a) {
              k.fps = n.readFloat();
              k.imagesPath = n.readString();
              k.audioPath = n.readString();
            }
            var o = 0;
            o = n.readInt(true);
            for (var r = 0; r < o; r++) {
              n.strings.push(n.readString());
            }
            o = n.readInt(true);
            r = 0;
            for (; r < o; r++) {
              var s = n.readString();
              var t = r == 0 ? null : k.bones[n.readInt(true)];
              (z = new j.BoneData(r, s, t)).rotation = n.readFloat();
              z.x = n.readFloat() * i;
              z.y = n.readFloat() * i;
              z.scaleX = n.readFloat();
              z.scaleY = n.readFloat();
              z.shearX = n.readFloat();
              z.shearY = n.readFloat();
              z.length = n.readFloat() * i;
              z.transformMode = q.TransformModeValues[n.readInt(true)];
              z.skinRequired = n.readBoolean();
              if (a) {
                j.Color.rgba8888ToColor(z.color, n.readInt32());
              }
              k.bones.push(z);
            }
            o = n.readInt(true);
            r = 0;
            for (; r < o; r++) {
              var w = n.readString();
              var x = k.bones[n.readInt(true)];
              var z = new j.SlotData(r, w, x);
              j.Color.rgba8888ToColor(z.color, n.readInt32());
              var A = n.readInt32();
              if (A != -1) {
                j.Color.rgb888ToColor(z.darkColor = new j.Color(), A);
              }
              z.attachmentName = n.readStringRef();
              z.blendMode = q.BlendModeValues[n.readInt(true)];
              k.slots.push(z);
            }
            o = n.readInt(true);
            r = 0;
            for (var B = undefined; r < o; r++) {
              (z = new j.IkConstraintData(n.readString())).order = n.readInt(true);
              z.skinRequired = n.readBoolean();
              B = n.readInt(true);
              for (var C = 0; C < B; C++) {
                z.bones.push(k.bones[n.readInt(true)]);
              }
              z.target = k.bones[n.readInt(true)];
              z.mix = n.readFloat();
              z.softness = n.readFloat() * i;
              z.bendDirection = n.readByte();
              z.compress = n.readBoolean();
              z.stretch = n.readBoolean();
              z.uniform = n.readBoolean();
              k.ikConstraints.push(z);
            }
            o = n.readInt(true);
            r = 0;
            B = undefined;
            for (; r < o; r++) {
              (z = new j.TransformConstraintData(n.readString())).order = n.readInt(true);
              z.skinRequired = n.readBoolean();
              B = n.readInt(true);
              C = 0;
              for (; C < B; C++) {
                z.bones.push(k.bones[n.readInt(true)]);
              }
              z.target = k.bones[n.readInt(true)];
              z.local = n.readBoolean();
              z.relative = n.readBoolean();
              z.offsetRotation = n.readFloat();
              z.offsetX = n.readFloat() * i;
              z.offsetY = n.readFloat() * i;
              z.offsetScaleX = n.readFloat();
              z.offsetScaleY = n.readFloat();
              z.offsetShearY = n.readFloat();
              z.rotateMix = n.readFloat();
              z.translateMix = n.readFloat();
              z.scaleMix = n.readFloat();
              z.shearMix = n.readFloat();
              k.transformConstraints.push(z);
            }
            o = n.readInt(true);
            r = 0;
            B = undefined;
            for (; r < o; r++) {
              (z = new j.PathConstraintData(n.readString())).order = n.readInt(true);
              z.skinRequired = n.readBoolean();
              B = n.readInt(true);
              C = 0;
              for (; C < B; C++) {
                z.bones.push(k.bones[n.readInt(true)]);
              }
              z.target = k.slots[n.readInt(true)];
              z.positionMode = q.PositionModeValues[n.readInt(true)];
              z.spacingMode = q.SpacingModeValues[n.readInt(true)];
              z.rotateMode = q.RotateModeValues[n.readInt(true)];
              z.offsetRotation = n.readFloat();
              z.position = n.readFloat();
              if (z.positionMode == j.PositionMode.Fixed) {
                z.position *= i;
              }
              z.spacing = n.readFloat();
              if (!(z.spacingMode != j.SpacingMode.Length && z.spacingMode != j.SpacingMode.Fixed)) {
                z.spacing *= i;
              }
              z.rotateMix = n.readFloat();
              z.translateMix = n.readFloat();
              k.pathConstraints.push(z);
            }
            var D = this.readSkin(n, k, true, a);
            if (D != null) {
              k.defaultSkin = D;
              k.skins.push(D);
            }
            r = k.skins.length;
            j.Utils.setArraySize(k.skins, o = r + n.readInt(true));
            for (; r < o; r++) {
              k.skins[r] = this.readSkin(n, k, false, a);
            }
            o = this.linkedMeshes.length;
            r = 0;
            for (; r < o; r++) {
              var m = this.linkedMeshes[r];
              var F = m.skin == null ? k.defaultSkin : k.findSkin(m.skin);
              if (F == null) {
                throw Error("Skin not found: " + m.skin);
              }
              var G = F.getAttachment(m.slotIndex, m.parent);
              if (G == null) {
                throw Error("Parent mesh not found: " + m.parent);
              }
              m.mesh.deformAttachment = m.inheritDeform ? G : m.mesh;
              m.mesh.setParentMesh(G);
              m.mesh.updateUVs();
            }
            this.linkedMeshes.length = 0;
            o = n.readInt(true);
            r = 0;
            for (; r < o; r++) {
              (z = new j.EventData(n.readStringRef())).intValue = n.readInt(false);
              z.floatValue = n.readFloat();
              z.stringValue = n.readString();
              z.audioPath = n.readString();
              if (z.audioPath != null) {
                z.volume = n.readFloat();
                z.balance = n.readFloat();
              }
              k.events.push(z);
            }
            o = n.readInt(true);
            r = 0;
            for (; r < o; r++) {
              k.animations.push(this.readAnimation(n, n.readString(), k));
            }
            return k;
          };
          q.prototype.readSkin = function (b, e, g, i) {
            var k = null;
            var m = 0;
            if (g) {
              if ((m = b.readInt(true)) == 0) {
                return null;
              }
              k = new j.Skin("default");
            } else {
              (k = new j.Skin(b.readStringRef())).bones.length = b.readInt(true);
              for (var n = 0, p = k.bones.length; n < p; n++) {
                k.bones[n] = e.bones[b.readInt(true)];
              }
              n = 0;
              p = b.readInt(true);
              for (; n < p; n++) {
                k.constraints.push(e.ikConstraints[b.readInt(true)]);
              }
              n = 0;
              p = b.readInt(true);
              for (; n < p; n++) {
                k.constraints.push(e.transformConstraints[b.readInt(true)]);
              }
              n = 0;
              p = b.readInt(true);
              for (; n < p; n++) {
                k.constraints.push(e.pathConstraints[b.readInt(true)]);
              }
              m = b.readInt(true);
            }
            for (n = 0; n < m; n++) {
              for (var q = b.readInt(true), r = 0, t = b.readInt(true); r < t; r++) {
                var v = b.readStringRef();
                var w = this.readAttachment(b, e, k, q, v, i);
                if (w != null) {
                  k.setAttachment(q, v, w);
                }
              }
            }
            return k;
          };
          q.prototype.readAttachment = function (e, i, n, r, a, o) {
            var c = this.scale;
            var l = e.readStringRef();
            if (l == null) {
              l = a;
            }
            var s = e.readByte();
            switch (q.AttachmentTypeValues[s]) {
              case j.AttachmentType.Region:
                var t = e.readStringRef();
                var u = e.readFloat();
                var z = e.readFloat();
                var G = e.readFloat();
                var H = e.readFloat();
                var v = e.readFloat();
                var g = e.readFloat();
                var J = e.readFloat();
                var K = e.readInt32();
                if (t == null) {
                  t = l;
                }
                var Q = this.attachmentLoader.newRegionAttachment(n, l, t);
                if (Q == null) {
                  return null;
                } else {
                  Q.path = t;
                  Q.x = z * c;
                  Q.y = G * c;
                  Q.scaleX = H;
                  Q.scaleY = v;
                  Q.rotation = u;
                  Q.width = g * c;
                  Q.height = J * c;
                  j.Color.rgba8888ToColor(Q.color, K);
                  Q.updateOffset();
                  return Q;
                }
              case j.AttachmentType.BoundingBox:
                var E = e.readInt(true);
                var W = this.readVertices(e, E);
                K = o ? e.readInt32() : 0;
                var X = this.attachmentLoader.newBoundingBoxAttachment(n, l);
                if (X == null) {
                  return null;
                } else {
                  X.worldVerticesLength = E << 1;
                  X.vertices = W.vertices;
                  X.bones = W.bones;
                  if (o) {
                    j.Color.rgba8888ToColor(X.color, K);
                  }
                  return X;
                }
              case j.AttachmentType.Mesh:
                t = e.readStringRef();
                K = e.readInt32();
                E = e.readInt(true);
                var C = this.readFloatArray(e, E << 1, 1);
                var b = this.readShortArray(e);
                W = this.readVertices(e, E);
                var S = e.readInt(true);
                var R = null;
                g = 0;
                J = 0;
                if (o) {
                  R = this.readShortArray(e);
                  g = e.readFloat();
                  J = e.readFloat();
                }
                if (t == null) {
                  t = l;
                }
                if ((Y = this.attachmentLoader.newMeshAttachment(n, l, t)) == null) {
                  return null;
                } else {
                  Y.path = t;
                  j.Color.rgba8888ToColor(Y.color, K);
                  Y.bones = W.bones;
                  Y.vertices = W.vertices;
                  Y.worldVerticesLength = E << 1;
                  Y.triangles = b;
                  Y.regionUVs = C;
                  Y.updateUVs();
                  Y.hullLength = S << 1;
                  if (o) {
                    Y.edges = R;
                    Y.width = g * c;
                    Y.height = J * c;
                  }
                  return Y;
                }
              case j.AttachmentType.LinkedMesh:
                t = e.readStringRef();
                K = e.readInt32();
                var Y;
                var Z = e.readStringRef();
                var I = e.readStringRef();
                var O = e.readBoolean();
                g = 0;
                J = 0;
                if (o) {
                  g = e.readFloat();
                  J = e.readFloat();
                }
                if (t == null) {
                  t = l;
                }
                if ((Y = this.attachmentLoader.newMeshAttachment(n, l, t)) == null) {
                  return null;
                } else {
                  Y.path = t;
                  j.Color.rgba8888ToColor(Y.color, K);
                  if (o) {
                    Y.width = g * c;
                    Y.height = J * c;
                  }
                  this.linkedMeshes.push(new d(Y, Z, r, I, O));
                  return Y;
                }
              case j.AttachmentType.Path:
                for (var L = e.readBoolean(), P = e.readBoolean(), D = (E = e.readInt(true), W = this.readVertices(e, E), j.Utils.newArray(E / 3, 0)), N = 0, $ = D.length; N < $; N++) {
                  D[N] = e.readFloat() * c;
                }
                K = o ? e.readInt32() : 0;
                if ((t = this.attachmentLoader.newPathAttachment(n, l)) == null) {
                  return null;
                } else {
                  t.closed = L;
                  t.constantSpeed = P;
                  t.worldVerticesLength = E << 1;
                  t.vertices = W.vertices;
                  t.bones = W.bones;
                  t.lengths = D;
                  if (o) {
                    j.Color.rgba8888ToColor(t.color, K);
                  }
                  return t;
                }
              case j.AttachmentType.Point:
                u = e.readFloat();
                z = e.readFloat();
                G = e.readFloat();
                K = o ? e.readInt32() : 0;
                var B = this.attachmentLoader.newPointAttachment(n, l);
                if (B == null) {
                  return null;
                } else {
                  B.x = z * c;
                  B.y = G * c;
                  B.rotation = u;
                  if (o) {
                    j.Color.rgba8888ToColor(B.color, K);
                  }
                  return B;
                }
              case j.AttachmentType.Clipping:
                var V = e.readInt(true);
                E = e.readInt(true);
                W = this.readVertices(e, E);
                K = o ? e.readInt32() : 0;
                var k = this.attachmentLoader.newClippingAttachment(n, l);
                if (k == null) {
                  return null;
                } else {
                  k.endSlot = i.slots[V];
                  k.worldVerticesLength = E << 1;
                  k.vertices = W.vertices;
                  k.bones = W.bones;
                  if (o) {
                    j.Color.rgba8888ToColor(k.color, K);
                  }
                  return k;
                }
            }
            return null;
          };
          q.prototype.readVertices = function (b, d) {
            var e = d << 1;
            var g = new f();
            var i = this.scale;
            if (!b.readBoolean()) {
              g.vertices = this.readFloatArray(b, e, i);
              return g;
            }
            for (var a = [], k = [], c = 0; c < d; c++) {
              var m = b.readInt(true);
              k.push(m);
              for (var n = 0; n < m; n++) {
                k.push(b.readInt(true));
                a.push(b.readFloat() * i);
                a.push(b.readFloat() * i);
                a.push(b.readFloat());
              }
            }
            g.vertices = j.Utils.toFloatArray(a);
            g.bones = k;
            return g;
          };
          q.prototype.readFloatArray = function (a, b, c) {
            var d = Array(b);
            if (c == 1) {
              for (var e = 0; e < b; e++) {
                d[e] = a.readFloat();
              }
            } else {
              for (e = 0; e < b; e++) {
                d[e] = a.readFloat() * c;
              }
            }
            return d;
          };
          q.prototype.readShortArray = function (a) {
            for (var b = a.readInt(true), c = Array(b), d = 0; d < b; d++) {
              c[d] = a.readShort();
            }
            return c;
          };
          q.prototype.readAnimation = function (e, i, n) {
            for (var r = [], s = this.scale, a = 0, t = new j.Color(), c = new j.Color(), l = 0, J = e.readInt(true); l < J; l++) {
              for (var K = e.readInt(true), Q = 0, Y = e.readInt(true); Q < Y; Q++) {
                var Z = e.readByte();
                var $ = e.readInt(true);
                switch (Z) {
                  case q.SLOT_ATTACHMENT:
                    (da = new j.AttachmentTimeline($)).slotIndex = K;
                    for (var aa = 0; aa < $; aa++) {
                      da.setFrame(aa, e.readFloat(), e.readStringRef());
                    }
                    r.push(da);
                    a = Math.max(a, da.frames[$ - 1]);
                    break;
                  case q.SLOT_COLOR:
                    (da = new j.ColorTimeline($)).slotIndex = K;
                    aa = 0;
                    for (; aa < $; aa++) {
                      var ba = e.readFloat();
                      j.Color.rgba8888ToColor(t, e.readInt32());
                      da.setFrame(aa, ba, t.r, t.g, t.b, t.a);
                      if (aa < $ - 1) {
                        this.readCurve(e, aa, da);
                      }
                    }
                    r.push(da);
                    a = Math.max(a, da.frames[($ - 1) * j.ColorTimeline.ENTRIES]);
                    break;
                  case q.SLOT_TWO_COLOR:
                    (da = new j.TwoColorTimeline($)).slotIndex = K;
                    aa = 0;
                    for (; aa < $; aa++) {
                      ba = e.readFloat();
                      j.Color.rgba8888ToColor(t, e.readInt32());
                      j.Color.rgb888ToColor(c, e.readInt32());
                      da.setFrame(aa, ba, t.r, t.g, t.b, t.a, c.r, c.g, c.b);
                      if (aa < $ - 1) {
                        this.readCurve(e, aa, da);
                      }
                    }
                    r.push(da);
                    a = Math.max(a, da.frames[($ - 1) * j.TwoColorTimeline.ENTRIES]);
                }
              }
            }
            l = 0;
            J = e.readInt(true);
            for (; l < J; l++) {
              var ca = e.readInt(true);
              Q = 0;
              Y = e.readInt(true);
              for (; Q < Y; Q++) {
                Z = e.readByte();
                $ = e.readInt(true);
                switch (Z) {
                  case q.BONE_ROTATE:
                    (da = new j.RotateTimeline($)).boneIndex = ca;
                    aa = 0;
                    for (; aa < $; aa++) {
                      da.setFrame(aa, e.readFloat(), e.readFloat());
                      if (aa < $ - 1) {
                        this.readCurve(e, aa, da);
                      }
                    }
                    r.push(da);
                    a = Math.max(a, da.frames[($ - 1) * j.RotateTimeline.ENTRIES]);
                    break;
                  case q.BONE_TRANSLATE:
                  case q.BONE_SCALE:
                  case q.BONE_SHEAR:
                    var da = undefined;
                    var ea = 1;
                    if (Z == q.BONE_SCALE) {
                      da = new j.ScaleTimeline($);
                    } else if (Z == q.BONE_SHEAR) {
                      da = new j.ShearTimeline($);
                    } else {
                      da = new j.TranslateTimeline($);
                      ea = s;
                    }
                    da.boneIndex = ca;
                    aa = 0;
                    for (; aa < $; aa++) {
                      da.setFrame(aa, e.readFloat(), e.readFloat() * ea, e.readFloat() * ea);
                      if (aa < $ - 1) {
                        this.readCurve(e, aa, da);
                      }
                    }
                    r.push(da);
                    a = Math.max(a, da.frames[($ - 1) * j.TranslateTimeline.ENTRIES]);
                }
              }
            }
            l = 0;
            J = e.readInt(true);
            for (; l < J; l++) {
              var fa = e.readInt(true);
              $ = e.readInt(true);
              (da = new j.IkConstraintTimeline($)).ikConstraintIndex = fa;
              aa = 0;
              for (; aa < $; aa++) {
                da.setFrame(aa, e.readFloat(), e.readFloat(), e.readFloat() * s, e.readByte(), e.readBoolean(), e.readBoolean());
                if (aa < $ - 1) {
                  this.readCurve(e, aa, da);
                }
              }
              r.push(da);
              a = Math.max(a, da.frames[($ - 1) * j.IkConstraintTimeline.ENTRIES]);
            }
            l = 0;
            J = e.readInt(true);
            for (; l < J; l++) {
              fa = e.readInt(true);
              $ = e.readInt(true);
              (da = new j.TransformConstraintTimeline($)).transformConstraintIndex = fa;
              aa = 0;
              for (; aa < $; aa++) {
                da.setFrame(aa, e.readFloat(), e.readFloat(), e.readFloat(), e.readFloat(), e.readFloat());
                if (aa < $ - 1) {
                  this.readCurve(e, aa, da);
                }
              }
              r.push(da);
              a = Math.max(a, da.frames[($ - 1) * j.TransformConstraintTimeline.ENTRIES]);
            }
            l = 0;
            J = e.readInt(true);
            for (; l < J; l++) {
              fa = e.readInt(true);
              var ga = n.pathConstraints[fa];
              Q = 0;
              Y = e.readInt(true);
              for (; Q < Y; Q++) {
                Z = e.readByte();
                $ = e.readInt(true);
                switch (Z) {
                  case q.PATH_POSITION:
                  case q.PATH_SPACING:
                    da = undefined;
                    ea = 1;
                    if (Z == q.PATH_SPACING) {
                      da = new j.PathConstraintSpacingTimeline($);
                      if (!(ga.spacingMode != j.SpacingMode.Length && ga.spacingMode != j.SpacingMode.Fixed)) {
                        ea = s;
                      }
                    } else {
                      da = new j.PathConstraintPositionTimeline($);
                      if (ga.positionMode == j.PositionMode.Fixed) {
                        ea = s;
                      }
                    }
                    da.pathConstraintIndex = fa;
                    aa = 0;
                    for (; aa < $; aa++) {
                      da.setFrame(aa, e.readFloat(), e.readFloat() * ea);
                      if (aa < $ - 1) {
                        this.readCurve(e, aa, da);
                      }
                    }
                    r.push(da);
                    a = Math.max(a, da.frames[($ - 1) * j.PathConstraintPositionTimeline.ENTRIES]);
                    break;
                  case q.PATH_MIX:
                    (da = new j.PathConstraintMixTimeline($)).pathConstraintIndex = fa;
                    aa = 0;
                    for (; aa < $; aa++) {
                      da.setFrame(aa, e.readFloat(), e.readFloat(), e.readFloat());
                      if (aa < $ - 1) {
                        this.readCurve(e, aa, da);
                      }
                    }
                    r.push(da);
                    a = Math.max(a, da.frames[($ - 1) * j.PathConstraintMixTimeline.ENTRIES]);
                }
              }
            }
            l = 0;
            J = e.readInt(true);
            for (; l < J; l++) {
              var ha = n.skins[e.readInt(true)];
              Q = 0;
              Y = e.readInt(true);
              for (; Q < Y; Q++) {
                K = e.readInt(true);
                for (var ia = 0, ja = e.readInt(true); ia < ja; ia++) {
                  var ka = ha.getAttachment(K, e.readStringRef());
                  var la = ka.bones != null;
                  var ma = ka.vertices;
                  var na = la ? ma.length / 3 * 2 : ma.length;
                  $ = e.readInt(true);
                  (da = new j.DeformTimeline($)).slotIndex = K;
                  da.attachment = ka;
                  aa = 0;
                  for (; aa < $; aa++) {
                    ba = e.readFloat();
                    var oa = undefined;
                    var pa = e.readInt(true);
                    if (pa == 0) {
                      oa = la ? j.Utils.newFloatArray(na) : ma;
                    } else {
                      oa = j.Utils.newFloatArray(na);
                      var qa = e.readInt(true);
                      pa += qa;
                      if (s == 1) {
                        for (var ra = qa; ra < pa; ra++) {
                          oa[ra] = e.readFloat();
                        }
                      } else {
                        for (ra = qa; ra < pa; ra++) {
                          oa[ra] = e.readFloat() * s;
                        }
                      }
                      if (!la) {
                        ra = 0;
                        for (var sa = oa.length; ra < sa; ra++) {
                          oa[ra] += ma[ra];
                        }
                      }
                    }
                    da.setFrame(aa, ba, oa);
                    if (aa < $ - 1) {
                      this.readCurve(e, aa, da);
                    }
                  }
                  r.push(da);
                  a = Math.max(a, da.frames[$ - 1]);
                }
              }
            }
            var ta = e.readInt(true);
            if (ta > 0) {
              da = new j.DrawOrderTimeline(ta);
              var F = n.slots.length;
              for (l = 0; l < ta; l++) {
                ba = e.readFloat();
                var B = e.readInt(true);
                var ua = j.Utils.newArray(F, 0);
                for (Q = F - 1; Q >= 0; Q--) {
                  ua[Q] = -1;
                }
                var va = j.Utils.newArray(F - B, 0);
                var wa = 0;
                var xa = 0;
                for (Q = 0; Q < B; Q++) {
                  for (K = e.readInt(true); wa != K;) {
                    va[xa++] = wa++;
                  }
                  ua[wa + e.readInt(true)] = wa++;
                }
                for (; wa < F;) {
                  va[xa++] = wa++;
                }
                for (Q = F - 1; Q >= 0; Q--) {
                  if (ua[Q] == -1) {
                    ua[Q] = va[--xa];
                  }
                }
                da.setFrame(l, ba, ua);
              }
              r.push(da);
              a = Math.max(a, da.frames[ta - 1]);
            }
            var ya = e.readInt(true);
            if (ya > 0) {
              da = new j.EventTimeline(ya);
              l = 0;
              for (; l < ya; l++) {
                ba = e.readFloat();
                var H = n.events[e.readInt(true)];
                var za = new j.Event(ba, H);
                za.intValue = e.readInt(false);
                za.floatValue = e.readFloat();
                za.stringValue = e.readBoolean() ? e.readString() : H.stringValue;
                if (za.data.audioPath != null) {
                  za.volume = e.readFloat();
                  za.balance = e.readFloat();
                }
                da.setFrame(l, za);
              }
              r.push(da);
              a = Math.max(a, da.frames[ya - 1]);
            }
            return new j.Animation(i, r, a);
          };
          q.prototype.readCurve = function (a, b, c) {
            switch (a.readByte()) {
              case q.CURVE_STEPPED:
                c.setStepped(b);
                break;
              case q.CURVE_BEZIER:
                this.setCurve(c, b, a.readFloat(), a.readFloat(), a.readFloat(), a.readFloat());
            }
          };
          q.prototype.setCurve = function (a, b, c, d, e, f) {
            a.setCurve(b, c, d, e, f);
          };
          q.AttachmentTypeValues = [0, 1, 2, 3, 4, 5, 6];
          q.TransformModeValues = [j.TransformMode.Normal, j.TransformMode.OnlyTranslation, j.TransformMode.NoRotationOrReflection, j.TransformMode.NoScale, j.TransformMode.NoScaleOrReflection];
          q.PositionModeValues = [j.PositionMode.Fixed, j.PositionMode.Percent];
          q.SpacingModeValues = [j.SpacingMode.Length, j.SpacingMode.Fixed, j.SpacingMode.Percent];
          q.RotateModeValues = [j.RotateMode.Tangent, j.RotateMode.Chain, j.RotateMode.ChainScale];
          q.BlendModeValues = [j.BlendMode.Normal, j.BlendMode.Additive, j.BlendMode.Multiply, j.BlendMode.Screen];
          q.BONE_ROTATE = 0;
          q.BONE_TRANSLATE = 1;
          q.BONE_SCALE = 2;
          q.BONE_SHEAR = 3;
          q.SLOT_ATTACHMENT = 0;
          q.SLOT_COLOR = 1;
          q.SLOT_TWO_COLOR = 2;
          q.PATH_POSITION = 0;
          q.PATH_SPACING = 1;
          q.PATH_MIX = 2;
          q.CURVE_LINEAR = 0;
          q.CURVE_STEPPED = 1;
          q.CURVE_BEZIER = 2;
          return q;
        }();
        j.SkeletonBinary = a;
        var b = function () {
          function a(a, b, c, d) {
            if (b === undefined) {
              b = [];
            }
            if (c === undefined) {
              c = 0;
            }
            if (d === undefined) {
              d = new DataView(a.buffer);
            }
            this.strings = b;
            this.index = c;
            this.buffer = d;
          }
          a.prototype.readByte = function () {
            return this.buffer.getInt8(this.index++);
          };
          a.prototype.readShort = function () {
            var a = this.buffer.getInt16(this.index);
            this.index += 2;
            return a;
          };
          a.prototype.readInt32 = function () {
            var a = this.buffer.getInt32(this.index);
            this.index += 4;
            return a;
          };
          a.prototype.readInt = function (a) {
            var b = this.readByte();
            var c = b & 127;
            if ((b & 128) != 0) {
              c |= ((b = this.readByte()) & 127) << 7;
              if ((b & 128) != 0) {
                c |= ((b = this.readByte()) & 127) << 14;
                if ((b & 128) != 0) {
                  c |= ((b = this.readByte()) & 127) << 21;
                  if ((b & 128) != 0) {
                    c |= ((b = this.readByte()) & 127) << 28;
                  }
                }
              }
            }
            if (a) {
              return c;
            } else {
              return c >>> 1 ^ -(c & 1);
            }
          };
          a.prototype.readStringRef = function () {
            var a = this.readInt(true);
            if (a == 0) {
              return null;
            } else {
              return this.strings[a - 1];
            }
          };
          a.prototype.readString = function () {
            var a = this.readInt(true);
            switch (a) {
              case 0:
                return null;
              case 1:
                return "";
            }
            a--;
            for (var b = "", c = 0; c < a;) {
              var d = this.readByte();
              switch (d >> 4) {
                case 12:
                case 13:
                  b += String.fromCharCode((d & 31) << 6 | this.readByte() & 63);
                  c += 2;
                  break;
                case 14:
                  b += String.fromCharCode((d & 15) << 12 | (this.readByte() & 63) << 6 | this.readByte() & 63);
                  c += 3;
                  break;
                default:
                  b += String.fromCharCode(d);
                  c++;
              }
            }
            return b;
          };
          a.prototype.readFloat = function () {
            var a = this.buffer.getFloat32(this.index);
            this.index += 4;
            return a;
          };
          a.prototype.readBoolean = function () {
            return this.readByte() != 0;
          };
          return a;
        }();
        function d(a, b, c, d, e) {
          this.mesh = a;
          this.skin = b;
          this.slotIndex = c;
          this.parent = d;
          this.inheritDeform = e;
        }
        function f(a, b) {
          if (a === undefined) {
            a = null;
          }
          if (b === undefined) {
            b = null;
          }
          this.bones = a;
          this.vertices = b;
        }
      })(e || (e = {}));
      (function (a) {
        var b = function () {
          function b() {
            this.minX = 0;
            this.minY = 0;
            this.maxX = 0;
            this.maxY = 0;
            this.boundingBoxes = [];
            this.polygons = [];
            this.polygonPool = new a.Pool(function () {
              return a.Utils.newFloatArray(16);
            });
          }
          b.prototype.update = function (b, d) {
            if (b == null) {
              throw Error("skeleton cannot be null.");
            }
            var e = this.boundingBoxes;
            var g = this.polygons;
            var i = this.polygonPool;
            var j = b.slots;
            var k = j.length;
            e.length = 0;
            i.freeAll(g);
            g.length = 0;
            for (var m = 0; m < k; m++) {
              var n = j[m];
              if (n.bone.active) {
                var o = n.getAttachment();
                if (o instanceof a.BoundingBoxAttachment) {
                  var p = o;
                  e.push(p);
                  var q = i.obtain();
                  if (q.length != p.worldVerticesLength) {
                    q = a.Utils.newFloatArray(p.worldVerticesLength);
                  }
                  g.push(q);
                  p.computeWorldVertices(n, 0, p.worldVerticesLength, q, 0, 2);
                }
              }
            }
            if (d) {
              this.aabbCompute();
            } else {
              this.minX = Infinity;
              this.minY = Infinity;
              this.maxX = -Infinity;
              this.maxY = -Infinity;
            }
          };
          b.prototype.aabbCompute = function () {
            for (var b = Infinity, d = Infinity, g = -Infinity, j = -Infinity, k = this.polygons, m = 0, p = k.length; m < p; m++) {
              for (var a = k[m], q = a, r = 0, v = a.length; r < v; r += 2) {
                var w = q[r];
                var x = q[r + 1];
                b = Math.min(b, w);
                d = Math.min(d, x);
                g = Math.max(g, w);
                j = Math.max(j, x);
              }
            }
            this.minX = b;
            this.minY = d;
            this.maxX = g;
            this.maxY = j;
          };
          b.prototype.aabbContainsPoint = function (a, b) {
            return a >= this.minX && a <= this.maxX && b >= this.minY && b <= this.maxY;
          };
          b.prototype.aabbIntersectsSegment = function (b, d, e, f) {
            var g = this.minX;
            var i = this.minY;
            var j = this.maxX;
            var a = this.maxY;
            if (b <= g && e <= g || d <= i && f <= i || b >= j && e >= j || d >= a && f >= a) {
              return false;
            }
            var k = (f - d) / (e - b);
            var c = k * (g - b) + d;
            if (c > i && c < a) {
              return true;
            }
            if ((c = k * (j - b) + d) > i && c < a) {
              return true;
            }
            var m = (i - d) / k + b;
            return m > g && m < j || (m = (a - d) / k + b) > g && m < j;
          };
          b.prototype.aabbIntersectsSkeleton = function (a) {
            return this.minX < a.maxX && this.maxX > a.minX && this.minY < a.maxY && this.maxY > a.minY;
          };
          b.prototype.containsPoint = function (a, b) {
            for (var c = this.polygons, d = 0, e = c.length; d < e; d++) {
              if (this.containsPointPolygon(c[d], a, b)) {
                return this.boundingBoxes[d];
              }
            }
            return null;
          };
          b.prototype.containsPointPolygon = function (b, d, e) {
            for (var f = b, g = b.length, i = g - 2, j = false, k = 0; k < g; k += 2) {
              var m = f[k + 1];
              var n = f[i + 1];
              if (m < e && n >= e || n < e && m >= e) {
                var p = f[k];
                if (p + (e - m) / (n - m) * (f[i] - p) < d) {
                  j = !j;
                }
              }
              i = k;
            }
            return j;
          };
          b.prototype.intersectsSegment = function (b, c, d, e) {
            for (var f = this.polygons, g = 0, h = f.length; g < h; g++) {
              if (this.intersectsSegmentPolygon(f[g], b, c, d, e)) {
                return this.boundingBoxes[g];
              }
            }
            return null;
          };
          b.prototype.intersectsSegmentPolygon = function (b, j, e, i, k) {
            for (var n = b, q = b.length, a = j - i, o = e - k, c = j * k - e * i, l = n[q - 2], r = n[q - 1], s = 0; s < q; s += 2) {
              var t = n[s];
              var w = n[s + 1];
              var x = l * w - r * t;
              var z = l - t;
              var A = r - w;
              var B = a * A - o * z;
              var C = (c * z - a * x) / B;
              if ((C >= l && C <= t || C >= t && C <= l) && (C >= j && C <= i || C >= i && C <= j)) {
                var D = (c * A - o * x) / B;
                if ((D >= r && D <= w || D >= w && D <= r) && (D >= e && D <= k || D >= k && D <= e)) {
                  return true;
                }
              }
              l = t;
              r = w;
            }
            return false;
          };
          b.prototype.getPolygon = function (a) {
            if (a == null) {
              throw Error("boundingBox cannot be null.");
            }
            var b = this.boundingBoxes.indexOf(a);
            if (b == -1) {
              return null;
            } else {
              return this.polygons[b];
            }
          };
          b.prototype.getWidth = function () {
            return this.maxX - this.minX;
          };
          b.prototype.getHeight = function () {
            return this.maxY - this.minY;
          };
          return b;
        }();
        a.SkeletonBounds = b;
      })(e || (e = {}));
      (function (d) {
        var a = function () {
          function b() {
            this.triangulator = new d.Triangulator();
            this.clippingPolygon = [];
            this.clipOutput = [];
            this.clippedVertices = [];
            this.clippedTriangles = [];
            this.scratch = [];
          }
          b.prototype.clipStart = function (e, f) {
            if (this.clipAttachment != null) {
              return 0;
            }
            this.clipAttachment = f;
            var g = f.worldVerticesLength;
            var i = d.Utils.setArraySize(this.clippingPolygon, g);
            f.computeWorldVertices(e, 0, g, i, 0, 2);
            var j = this.clippingPolygon;
            b.makeClockwise(j);
            for (var a = this.clippingPolygons = this.triangulator.decompose(j, this.triangulator.triangulate(j)), k = 0, m = a.length; k < m; k++) {
              var l = a[k];
              b.makeClockwise(l);
              l.push(l[0]);
              l.push(l[1]);
            }
            return a.length;
          };
          b.prototype.clipEndWithSlot = function (a) {
            if (this.clipAttachment != null && this.clipAttachment.endSlot == a.data) {
              this.clipEnd();
            }
          };
          b.prototype.clipEnd = function () {
            if (this.clipAttachment != null) {
              this.clipAttachment = null;
              this.clippingPolygons = null;
              this.clippedVertices.length = 0;
              this.clippedTriangles.length = 0;
              this.clippingPolygon.length = 0;
            }
          };
          b.prototype.isClipping = function () {
            return this.clipAttachment != null;
          };
          b.prototype.clipTriangles = function (t, e, i, n, r, s, a, o, c, l, aa, ba) {
            var ca = this.clipOutput;
            var da = this.clippedVertices;
            var _ = this.clippedTriangles;
            var p = this.clippingPolygons;
            var v = this.clippingPolygons.length;
            var g = o ? 12 : 8;
            var m = 0;
            l = l || 0;
            aa = aa || 0;
            ba = ba || 0;
            da.length = 0;
            _.length = 0;
            t: for (var ea = l, fa = l + n; ea < fa; ea += 3) {
              var E = i[ea] * c;
              var ga = E + aa;
              var ha = E + ba;
              var ia = t[ga];
              var ja = t[ga + 1];
              var ka = r[ha];
              var la = r[ha + 1];
              ha = (E = i[ea + 1] * c) + ba;
              var ma = t[ga = E + aa];
              var na = t[ga + 1];
              var oa = r[ha];
              var pa = r[ha + 1];
              ha = (E = i[ea + 2] * c) + ba;
              for (var qa = t[ga = E + aa], ra = t[ga + 1], sa = r[ha], ta = r[ha + 1], ua = 0; ua < v; ua++) {
                var va = da.length;
                if (!this.clip(ia, ja, ma, na, qa, ra, p[ua], ca)) {
                  (Ea = d.Utils.setArraySize(da, va + g * 3))[va] = ia;
                  Ea[va + 1] = ja;
                  Ea[va + 2] = s.r;
                  Ea[va + 3] = s.g;
                  Ea[va + 4] = s.b;
                  Ea[va + 5] = s.a;
                  if (o) {
                    Ea[va + 6] = ka;
                    Ea[va + 7] = la;
                    Ea[va + 8] = a.r;
                    Ea[va + 9] = a.g;
                    Ea[va + 10] = a.b;
                    Ea[va + 11] = a.a;
                    Ea[va + 12] = ma;
                    Ea[va + 13] = na;
                    Ea[va + 14] = s.r;
                    Ea[va + 15] = s.g;
                    Ea[va + 16] = s.b;
                    Ea[va + 17] = s.a;
                    Ea[va + 18] = oa;
                    Ea[va + 19] = pa;
                    Ea[va + 20] = a.r;
                    Ea[va + 21] = a.g;
                    Ea[va + 22] = a.b;
                    Ea[va + 23] = a.a;
                    Ea[va + 24] = qa;
                    Ea[va + 25] = ra;
                    Ea[va + 26] = s.r;
                    Ea[va + 27] = s.g;
                    Ea[va + 28] = s.b;
                    Ea[va + 29] = s.a;
                    Ea[va + 30] = sa;
                    Ea[va + 31] = ta;
                    Ea[va + 32] = a.r;
                    Ea[va + 33] = a.g;
                    Ea[va + 34] = a.b;
                    Ea[va + 35] = a.a;
                  } else {
                    Ea[va + 6] = ka;
                    Ea[va + 7] = la;
                    Ea[va + 8] = ma;
                    Ea[va + 9] = na;
                    Ea[va + 10] = s.r;
                    Ea[va + 11] = s.g;
                    Ea[va + 12] = s.b;
                    Ea[va + 13] = s.a;
                    Ea[va + 14] = oa;
                    Ea[va + 15] = pa;
                    Ea[va + 16] = qa;
                    Ea[va + 17] = ra;
                    Ea[va + 18] = s.r;
                    Ea[va + 19] = s.g;
                    Ea[va + 20] = s.b;
                    Ea[va + 21] = s.a;
                    Ea[va + 22] = sa;
                    Ea[va + 23] = ta;
                  }
                  va = _.length;
                  (Na = d.Utils.setArraySize(_, va + 3))[va] = m;
                  Na[va + 1] = m + 1;
                  Na[va + 2] = m + 2;
                  m += 3;
                  continue t;
                }
                var wa = ca.length;
                if (wa != 0) {
                  for (var xa = na - ra, ya = qa - ma, za = ia - qa, Aa = ra - ja, Ba = 1 / (xa * za + ya * (ja - ra)), Ca = wa >> 1, Da = this.clipOutput, Ea = d.Utils.setArraySize(da, va + Ca * g), Fa = 0; Fa < wa; Fa += 2) {
                    var Ga = Da[Fa];
                    var Ha = Da[Fa + 1];
                    Ea[va] = Ga;
                    Ea[va + 1] = Ha;
                    Ea[va + 2] = s.r;
                    Ea[va + 3] = s.g;
                    Ea[va + 4] = s.b;
                    Ea[va + 5] = s.a;
                    var Ia = Ga - qa;
                    var Ja = Ha - ra;
                    var Ka = (xa * Ia + ya * Ja) * Ba;
                    var La = (Aa * Ia + za * Ja) * Ba;
                    var Ma = 1 - Ka - La;
                    Ea[va + 6] = ka * Ka + oa * La + sa * Ma;
                    Ea[va + 7] = la * Ka + pa * La + ta * Ma;
                    if (o) {
                      Ea[va + 8] = a.r;
                      Ea[va + 9] = a.g;
                      Ea[va + 10] = a.b;
                      Ea[va + 11] = a.a;
                    }
                    va += g;
                  }
                  va = _.length;
                  var Na = d.Utils.setArraySize(_, va + (Ca - 2) * 3);
                  Ca--;
                  Fa = 1;
                  for (; Fa < Ca; Fa++) {
                    Na[va] = m;
                    Na[va + 1] = m + Fa;
                    Na[va + 2] = m + Fa + 1;
                    va += 3;
                  }
                  m += Ca + 1;
                }
              }
            }
          };
          b.prototype.clip = function (j, k, e, i, n, q, r, a) {
            var s = a;
            var c = false;
            var t = null;
            if (r.length % 4 >= 2) {
              t = a;
              a = this.scratch;
            } else {
              t = this.scratch;
            }
            t.length = 0;
            t.push(j);
            t.push(k);
            t.push(e);
            t.push(i);
            t.push(n);
            t.push(q);
            t.push(j);
            t.push(k);
            a.length = 0;
            for (var z = r, u = r.length - 4, f = 0;; f += 2) {
              for (var B = z[f], F = z[f + 1], G = z[f + 2], H = z[f + 3], J = B - G, K = F - H, N = t, Q = t.length - 2, U = a.length, V = 0; V < Q; V += 2) {
                var W = N[V];
                var X = N[V + 1];
                var Y = N[V + 2];
                var Z = N[V + 3];
                var $ = J * (Z - H) - K * (Y - G) > 0;
                if (J * (X - H) - K * (W - G) > 0) {
                  if ($) {
                    a.push(Y);
                    a.push(Z);
                    continue;
                  }
                  if (Math.abs(da = (ba = Z - X) * (G - B) - (ca = Y - W) * (H - F)) > 0.000001) {
                    var aa = (ca * (F - X) - ba * (B - W)) / da;
                    a.push(B + (G - B) * aa);
                    a.push(F + (H - F) * aa);
                  } else {
                    a.push(B);
                    a.push(F);
                  }
                } else if ($) {
                  var ba;
                  var ca;
                  var da;
                  if (Math.abs(da = (ba = Z - X) * (G - B) - (ca = Y - W) * (H - F)) > 0.000001) {
                    aa = (ca * (F - X) - ba * (B - W)) / da;
                    a.push(B + (G - B) * aa);
                    a.push(F + (H - F) * aa);
                  } else {
                    a.push(B);
                    a.push(F);
                  }
                  a.push(Y);
                  a.push(Z);
                }
                c = true;
              }
              if (U == a.length) {
                s.length = 0;
                return true;
              }
              a.push(a[0]);
              a.push(a[1]);
              if (f == u) {
                break;
              }
              var ea = a;
              (a = t).length = 0;
              t = ea;
            }
            if (s != a) {
              s.length = 0;
              f = 0;
              for (var fa = a.length - 2; f < fa; f++) {
                s[f] = a[f];
              }
            } else {
              s.length = s.length - 2;
            }
            return c;
          };
          b.makeClockwise = function (b) {
            for (var d = b, e = b.length, g = d[e - 2] * d[1] - d[0] * d[e - 1], i = 0, j = 0, k = 0, m = 0, p = e - 3; m < p; m += 2) {
              i = d[m];
              j = d[m + 1];
              k = d[m + 2];
              g += i * d[m + 3] - k * j;
            }
            if (!(g < 0)) {
              m = 0;
              var q = e - 2;
              for (p = e >> 1; m < p; m += 2) {
                var l = d[m];
                var t = d[m + 1];
                var v = q - m;
                d[m] = d[v];
                d[m + 1] = d[v + 1];
                d[v] = l;
                d[v + 1] = t;
              }
            }
          };
          return b;
        }();
        d.SkeletonClipping = a;
      })(e || (e = {}));
      (function (a) {
        var b = function () {
          function a() {
            this.bones = [];
            this.slots = [];
            this.skins = [];
            this.events = [];
            this.animations = [];
            this.ikConstraints = [];
            this.transformConstraints = [];
            this.pathConstraints = [];
            this.fps = 0;
          }
          a.prototype.findBone = function (a) {
            if (a == null) {
              throw Error("boneName cannot be null.");
            }
            for (var b = this.bones, c = 0, d = b.length; c < d; c++) {
              var e = b[c];
              if (e.name == a) {
                return e;
              }
            }
            return null;
          };
          a.prototype.findBoneIndex = function (a) {
            if (a == null) {
              throw Error("boneName cannot be null.");
            }
            for (var b = this.bones, c = 0, d = b.length; c < d; c++) {
              if (b[c].name == a) {
                return c;
              }
            }
            return -1;
          };
          a.prototype.findSlot = function (a) {
            if (a == null) {
              throw Error("slotName cannot be null.");
            }
            for (var b = this.slots, c = 0, d = b.length; c < d; c++) {
              var e = b[c];
              if (e.name == a) {
                return e;
              }
            }
            return null;
          };
          a.prototype.findSlotIndex = function (a) {
            if (a == null) {
              throw Error("slotName cannot be null.");
            }
            for (var b = this.slots, c = 0, d = b.length; c < d; c++) {
              if (b[c].name == a) {
                return c;
              }
            }
            return -1;
          };
          a.prototype.findSkin = function (a) {
            if (a == null) {
              throw Error("skinName cannot be null.");
            }
            for (var b = this.skins, c = 0, d = b.length; c < d; c++) {
              var e = b[c];
              if (e.name == a) {
                return e;
              }
            }
            return null;
          };
          a.prototype.findEvent = function (a) {
            if (a == null) {
              throw Error("eventDataName cannot be null.");
            }
            for (var b = this.events, c = 0, d = b.length; c < d; c++) {
              var e = b[c];
              if (e.name == a) {
                return e;
              }
            }
            return null;
          };
          a.prototype.findAnimation = function (a) {
            if (a == null) {
              throw Error("animationName cannot be null.");
            }
            for (var b = this.animations, c = 0, d = b.length; c < d; c++) {
              var e = b[c];
              if (e.name == a) {
                return e;
              }
            }
            return null;
          };
          a.prototype.findIkConstraint = function (a) {
            if (a == null) {
              throw Error("constraintName cannot be null.");
            }
            for (var b = this.ikConstraints, c = 0, d = b.length; c < d; c++) {
              var e = b[c];
              if (e.name == a) {
                return e;
              }
            }
            return null;
          };
          a.prototype.findTransformConstraint = function (a) {
            if (a == null) {
              throw Error("constraintName cannot be null.");
            }
            for (var b = this.transformConstraints, c = 0, d = b.length; c < d; c++) {
              var e = b[c];
              if (e.name == a) {
                return e;
              }
            }
            return null;
          };
          a.prototype.findPathConstraint = function (a) {
            if (a == null) {
              throw Error("constraintName cannot be null.");
            }
            for (var b = this.pathConstraints, c = 0, d = b.length; c < d; c++) {
              var e = b[c];
              if (e.name == a) {
                return e;
              }
            }
            return null;
          };
          a.prototype.findPathConstraintIndex = function (a) {
            if (a == null) {
              throw Error("pathConstraintName cannot be null.");
            }
            for (var b = this.pathConstraints, c = 0, d = b.length; c < d; c++) {
              if (b[c].name == a) {
                return c;
              }
            }
            return -1;
          };
          return a;
        }();
        a.SkeletonData = b;
      })(e || (e = {}));
      (function (aa) {
        var a = function () {
          function a(a) {
            this.scale = 1;
            this.linkedMeshes = [];
            this.attachmentLoader = a;
          }
          a.prototype.readSkeletonData = function (e) {
            var i = this.scale;
            var j = new aa.SkeletonData();
            var k = typeof e == "string" ? JSON.parse(e) : e;
            var n = k.skeleton;
            if (n != null) {
              j.hash = n.hash;
              j.version = n.spine;
              j.x = n.x;
              j.y = n.y;
              j.width = n.width;
              j.height = n.height;
              j.fps = n.fps;
              j.imagesPath = n.images;
            }
            if (k.bones) {
              for (var q = 0; q < k.bones.length; q++) {
                var r = k.bones[q];
                var s = null;
                var t = this.getValue(r, "parent", null);
                if (t != null && (s = j.findBone(t)) == null) {
                  throw Error("Parent bone not found: " + t);
                }
                (J = new aa.BoneData(j.bones.length, r.name, s)).length = this.getValue(r, "length", 0) * i;
                J.x = this.getValue(r, "x", 0) * i;
                J.y = this.getValue(r, "y", 0) * i;
                J.rotation = this.getValue(r, "rotation", 0);
                J.scaleX = this.getValue(r, "scaleX", 1);
                J.scaleY = this.getValue(r, "scaleY", 1);
                J.shearX = this.getValue(r, "shearX", 0);
                J.shearY = this.getValue(r, "shearY", 0);
                J.transformMode = a.transformModeFromString(this.getValue(r, "transform", "normal"));
                J.skinRequired = this.getValue(r, "skin", false);
                j.bones.push(J);
              }
            }
            if (k.slots) {
              for (q = 0; q < k.slots.length; q++) {
                var z = (ga = k.slots[q]).name;
                var G = ga.bone;
                var H = j.findBone(G);
                if (H == null) {
                  throw Error("Slot bone not found: " + G);
                }
                var J = new aa.SlotData(j.slots.length, z, H);
                var K = this.getValue(ga, "color", null);
                if (K != null) {
                  J.color.setFromString(K);
                }
                var Q = this.getValue(ga, "dark", null);
                if (Q != null) {
                  J.darkColor = new aa.Color(1, 1, 1, 1);
                  J.darkColor.setFromString(Q);
                }
                J.attachmentName = this.getValue(ga, "attachment", null);
                J.blendMode = a.blendModeFromString(this.getValue(ga, "blend", "normal"));
                j.slots.push(J);
              }
            }
            if (k.ik) {
              for (q = 0; q < k.ik.length; q++) {
                var U = k.ik[q];
                (J = new aa.IkConstraintData(U.name)).order = this.getValue(U, "order", 0);
                J.skinRequired = this.getValue(U, "skin", false);
                for (var W = 0; W < U.bones.length; W++) {
                  G = U.bones[W];
                  if ((da = j.findBone(G)) == null) {
                    throw Error("IK bone not found: " + G);
                  }
                  J.bones.push(da);
                }
                var X = U.target;
                J.target = j.findBone(X);
                if (J.target == null) {
                  throw Error("IK target bone not found: " + X);
                }
                J.mix = this.getValue(U, "mix", 1);
                J.softness = this.getValue(U, "softness", 0) * i;
                J.bendDirection = this.getValue(U, "bendPositive", true) ? 1 : -1;
                J.compress = this.getValue(U, "compress", false);
                J.stretch = this.getValue(U, "stretch", false);
                J.uniform = this.getValue(U, "uniform", false);
                j.ikConstraints.push(J);
              }
            }
            if (k.transform) {
              for (q = 0; q < k.transform.length; q++) {
                U = k.transform[q];
                (J = new aa.TransformConstraintData(U.name)).order = this.getValue(U, "order", 0);
                J.skinRequired = this.getValue(U, "skin", false);
                W = 0;
                for (; W < U.bones.length; W++) {
                  G = U.bones[W];
                  if ((da = j.findBone(G)) == null) {
                    throw Error("Transform constraint bone not found: " + G);
                  }
                  J.bones.push(da);
                }
                X = U.target;
                J.target = j.findBone(X);
                if (J.target == null) {
                  throw Error("Transform constraint target bone not found: " + X);
                }
                J.local = this.getValue(U, "local", false);
                J.relative = this.getValue(U, "relative", false);
                J.offsetRotation = this.getValue(U, "rotation", 0);
                J.offsetX = this.getValue(U, "x", 0) * i;
                J.offsetY = this.getValue(U, "y", 0) * i;
                J.offsetScaleX = this.getValue(U, "scaleX", 0);
                J.offsetScaleY = this.getValue(U, "scaleY", 0);
                J.offsetShearY = this.getValue(U, "shearY", 0);
                J.rotateMix = this.getValue(U, "rotateMix", 1);
                J.translateMix = this.getValue(U, "translateMix", 1);
                J.scaleMix = this.getValue(U, "scaleMix", 1);
                J.shearMix = this.getValue(U, "shearMix", 1);
                j.transformConstraints.push(J);
              }
            }
            if (k.path) {
              for (q = 0; q < k.path.length; q++) {
                U = k.path[q];
                (J = new aa.PathConstraintData(U.name)).order = this.getValue(U, "order", 0);
                J.skinRequired = this.getValue(U, "skin", false);
                W = 0;
                for (; W < U.bones.length; W++) {
                  G = U.bones[W];
                  if ((da = j.findBone(G)) == null) {
                    throw Error("Transform constraint bone not found: " + G);
                  }
                  J.bones.push(da);
                }
                X = U.target;
                J.target = j.findSlot(X);
                if (J.target == null) {
                  throw Error("Path target slot not found: " + X);
                }
                J.positionMode = a.positionModeFromString(this.getValue(U, "positionMode", "percent"));
                J.spacingMode = a.spacingModeFromString(this.getValue(U, "spacingMode", "length"));
                J.rotateMode = a.rotateModeFromString(this.getValue(U, "rotateMode", "tangent"));
                J.offsetRotation = this.getValue(U, "rotation", 0);
                J.position = this.getValue(U, "position", 0);
                if (J.positionMode == aa.PositionMode.Fixed) {
                  J.position *= i;
                }
                J.spacing = this.getValue(U, "spacing", 0);
                if (!(J.spacingMode != aa.SpacingMode.Length && J.spacingMode != aa.SpacingMode.Fixed)) {
                  J.spacing *= i;
                }
                J.rotateMix = this.getValue(U, "rotateMix", 1);
                J.translateMix = this.getValue(U, "translateMix", 1);
                j.pathConstraints.push(J);
              }
            }
            if (k.skins) {
              var Y = k.skins;
              if (!(Y instanceof Array)) {
                var Z = [];
                for (var E in Y) {
                  Z.push({
                    name: E,
                    attachments: Y[E]
                  });
                }
                Y = Z;
              }
              for (q = 0; q < Y.length; q++) {
                var $ = Y[q];
                var ba = new aa.Skin($.name);
                if ($.bones) {
                  for (var ca = 0; ca < $.bones.length; ca++) {
                    var da;
                    if ((da = j.findBone($.bones[ca])) == null) {
                      throw Error("Skin bone not found: " + $.bones[q]);
                    }
                    ba.bones.push(da);
                  }
                }
                if ($.ik) {
                  for (ca = 0; ca < $.ik.length; ca++) {
                    if ((ea = j.findIkConstraint($.ik[ca])) == null) {
                      throw Error("Skin IK constraint not found: " + $.ik[q]);
                    }
                    ba.constraints.push(ea);
                  }
                }
                if ($.transform) {
                  for (ca = 0; ca < $.transform.length; ca++) {
                    if ((ea = j.findTransformConstraint($.transform[ca])) == null) {
                      throw Error("Skin transform constraint not found: " + $.transform[q]);
                    }
                    ba.constraints.push(ea);
                  }
                }
                if ($.path) {
                  for (ca = 0; ca < $.path.length; ca++) {
                    var ea;
                    if ((ea = j.findPathConstraint($.path[ca])) == null) {
                      throw Error("Skin path constraint not found: " + $.path[q]);
                    }
                    ba.constraints.push(ea);
                  }
                }
                for (var z in $.attachments) {
                  var fa = j.findSlot(z);
                  if (fa == null) {
                    throw Error("Slot not found: " + z);
                  }
                  var ga = $.attachments[z];
                  for (var ha in ga) {
                    var ia = this.readAttachment(ga[ha], ba, fa.index, ha, j);
                    if (ia != null) {
                      ba.setAttachment(fa.index, ha, ia);
                    }
                  }
                }
                j.skins.push(ba);
                if (ba.name == "default") {
                  j.defaultSkin = ba;
                }
              }
            }
            q = 0;
            for (var ja = this.linkedMeshes.length; q < ja; q++) {
              var L = this.linkedMeshes[q];
              if ((ba = L.skin == null ? j.defaultSkin : j.findSkin(L.skin)) == null) {
                throw Error("Skin not found: " + L.skin);
              }
              var ka = ba.getAttachment(L.slotIndex, L.parent);
              if (ka == null) {
                throw Error("Parent mesh not found: " + L.parent);
              }
              L.mesh.deformAttachment = L.inheritDeform ? ka : L.mesh;
              L.mesh.setParentMesh(ka);
              L.mesh.updateUVs();
            }
            this.linkedMeshes.length = 0;
            if (k.events) {
              for (var la in k.events) {
                var ma = k.events[la];
                (J = new aa.EventData(la)).intValue = this.getValue(ma, "int", 0);
                J.floatValue = this.getValue(ma, "float", 0);
                J.stringValue = this.getValue(ma, "string", "");
                J.audioPath = this.getValue(ma, "audio", null);
                if (J.audioPath != null) {
                  J.volume = this.getValue(ma, "volume", 1);
                  J.balance = this.getValue(ma, "balance", 0);
                }
                j.events.push(J);
              }
            }
            if (k.animations) {
              for (var na in k.animations) {
                var oa = k.animations[na];
                this.readAnimation(oa, na, j);
              }
            }
            return j;
          };
          a.prototype.readAttachment = function (i, e, j, k, n) {
            var a = this.scale;
            k = this.getValue(i, "name", k);
            switch (this.getValue(i, "type", "region")) {
              case "region":
                var o = this.getValue(i, "path", k);
                var q = this.attachmentLoader.newRegionAttachment(e, k, o);
                if (q == null) {
                  return null;
                } else {
                  q.path = o;
                  q.x = this.getValue(i, "x", 0) * a;
                  q.y = this.getValue(i, "y", 0) * a;
                  q.scaleX = this.getValue(i, "scaleX", 1);
                  q.scaleY = this.getValue(i, "scaleY", 1);
                  q.rotation = this.getValue(i, "rotation", 0);
                  q.width = i.width * a;
                  q.height = i.height * a;
                  if ((m = this.getValue(i, "color", null)) != null) {
                    q.color.setFromString(m);
                  }
                  q.updateOffset();
                  return q;
                }
              case "boundingbox":
                var l = this.attachmentLoader.newBoundingBoxAttachment(e, k);
                if (l == null) {
                  return null;
                } else {
                  this.readVertices(i, l, i.vertexCount << 1);
                  if ((m = this.getValue(i, "color", null)) != null) {
                    l.color.setFromString(m);
                  }
                  return l;
                }
              case "mesh":
              case "linkedmesh":
                o = this.getValue(i, "path", k);
                var h = this.attachmentLoader.newMeshAttachment(e, k, o);
                if (h == null) {
                  return null;
                }
                h.path = o;
                if ((m = this.getValue(i, "color", null)) != null) {
                  h.color.setFromString(m);
                }
                h.width = this.getValue(i, "width", 0) * a;
                h.height = this.getValue(i, "height", 0) * a;
                var r = this.getValue(i, "parent", null);
                if (r != null) {
                  this.linkedMeshes.push(new b(h, this.getValue(i, "skin", null), j, r, this.getValue(i, "deform", true)));
                  return h;
                }
                var f = i.uvs;
                this.readVertices(i, h, f.length);
                h.triangles = i.triangles;
                h.regionUVs = f;
                h.updateUVs();
                h.edges = this.getValue(i, "edges", null);
                h.hullLength = this.getValue(i, "hull", 0) * 2;
                return h;
              case "path":
                if ((o = this.attachmentLoader.newPathAttachment(e, k)) == null) {
                  return null;
                }
                o.closed = this.getValue(i, "closed", false);
                o.constantSpeed = this.getValue(i, "constantSpeed", true);
                var d = i.vertexCount;
                this.readVertices(i, o, d << 1);
                for (var t = aa.Utils.newArray(d / 3, 0), p = 0; p < i.lengths.length; p++) {
                  t[p] = i.lengths[p] * a;
                }
                o.lengths = t;
                if ((m = this.getValue(i, "color", null)) != null) {
                  o.color.setFromString(m);
                }
                return o;
              case "point":
                var u = this.attachmentLoader.newPointAttachment(e, k);
                if (u == null) {
                  return null;
                } else {
                  u.x = this.getValue(i, "x", 0) * a;
                  u.y = this.getValue(i, "y", 0) * a;
                  u.rotation = this.getValue(i, "rotation", 0);
                  if ((m = this.getValue(i, "color", null)) != null) {
                    u.color.setFromString(m);
                  }
                  return u;
                }
              case "clipping":
                var g = this.attachmentLoader.newClippingAttachment(e, k);
                if (g == null) {
                  return null;
                }
                var m;
                var w = this.getValue(i, "end", null);
                if (w != null) {
                  var x = n.findSlot(w);
                  if (x == null) {
                    throw Error("Clipping end slot not found: " + w);
                  }
                  g.endSlot = x;
                }
                d = i.vertexCount;
                this.readVertices(i, g, d << 1);
                if ((m = this.getValue(i, "color", null)) != null) {
                  g.color.setFromString(m);
                }
                return g;
            }
            return null;
          };
          a.prototype.readVertices = function (b, d, e) {
            var g = this.scale;
            d.worldVerticesLength = e;
            var i = b.vertices;
            if (e != i.length) {
              var j = [];
              var a = [];
              h = 0;
              o = i.length;
              for (; h < o;) {
                var k = i[h++];
                a.push(k);
                for (var m = h + k * 4; h < m; h += 4) {
                  a.push(i[h]);
                  j.push(i[h + 1] * g);
                  j.push(i[h + 2] * g);
                  j.push(i[h + 3]);
                }
              }
              d.bones = a;
              d.vertices = aa.Utils.toFloatArray(j);
            } else {
              var n = aa.Utils.toFloatArray(i);
              if (g != 1) {
                for (var h = 0, o = i.length; h < o; h++) {
                  n[h] *= g;
                }
              }
              d.vertices = n;
            }
          };
          a.prototype.readAnimation = function (t, e, i) {
            var n = this.scale;
            var r = [];
            var s = 0;
            if (t.slots) {
              for (var ba in t.slots) {
                var ca = t.slots[ba];
                if ((Ra = i.findSlotIndex(ba)) == -1) {
                  throw Error("Slot not found: " + ba);
                }
                for (var da in ca) {
                  var ea = ca[da];
                  if (da == "attachment") {
                    (oa = new aa.AttachmentTimeline(ea.length)).slotIndex = Ra;
                    for (var fa = 0, ga = 0; ga < ea.length; ga++) {
                      var ha = ea[ga];
                      oa.setFrame(fa++, this.getValue(ha, "time", 0), ha.name);
                    }
                    r.push(oa);
                    s = Math.max(s, oa.frames[oa.getFrameCount() - 1]);
                  } else if (da == "color") {
                    (oa = new aa.ColorTimeline(ea.length)).slotIndex = Ra;
                    fa = 0;
                    ga = 0;
                    for (; ga < ea.length; ga++) {
                      ha = ea[ga];
                      var ia = new aa.Color();
                      ia.setFromString(ha.color);
                      oa.setFrame(fa, this.getValue(ha, "time", 0), ia.r, ia.g, ia.b, ia.a);
                      this.readCurve(ha, oa, fa);
                      fa++;
                    }
                    r.push(oa);
                    s = Math.max(s, oa.frames[(oa.getFrameCount() - 1) * aa.ColorTimeline.ENTRIES]);
                  } else {
                    if (da != "twoColor") {
                      throw Error("Invalid timeline type for a slot: " + da + " (" + ba + ")");
                    }
                    (oa = new aa.TwoColorTimeline(ea.length)).slotIndex = Ra;
                    fa = 0;
                    ga = 0;
                    for (; ga < ea.length; ga++) {
                      ha = ea[ga];
                      var ja = new aa.Color();
                      var ka = new aa.Color();
                      ja.setFromString(ha.light);
                      ka.setFromString(ha.dark);
                      oa.setFrame(fa, this.getValue(ha, "time", 0), ja.r, ja.g, ja.b, ja.a, ka.r, ka.g, ka.b);
                      this.readCurve(ha, oa, fa);
                      fa++;
                    }
                    r.push(oa);
                    s = Math.max(s, oa.frames[(oa.getFrameCount() - 1) * aa.TwoColorTimeline.ENTRIES]);
                  }
                }
              }
            }
            if (t.bones) {
              for (var la in t.bones) {
                var ma = t.bones[la];
                var na = i.findBoneIndex(la);
                if (na == -1) {
                  throw Error("Bone not found: " + la);
                }
                for (var da in ma) {
                  ea = ma[da];
                  if (da === "rotate") {
                    (oa = new aa.RotateTimeline(ea.length)).boneIndex = na;
                    fa = 0;
                    ga = 0;
                    for (; ga < ea.length; ga++) {
                      ha = ea[ga];
                      oa.setFrame(fa, this.getValue(ha, "time", 0), this.getValue(ha, "angle", 0));
                      this.readCurve(ha, oa, fa);
                      fa++;
                    }
                    r.push(oa);
                    s = Math.max(s, oa.frames[(oa.getFrameCount() - 1) * aa.RotateTimeline.ENTRIES]);
                  } else {
                    if (da !== "translate" && da !== "scale" && da !== "shear") {
                      throw Error("Invalid timeline type for a bone: " + da + " (" + la + ")");
                    }
                    var oa = null;
                    var pa = 1;
                    var qa = 0;
                    if (da === "scale") {
                      oa = new aa.ScaleTimeline(ea.length);
                      qa = 1;
                    } else if (da === "shear") {
                      oa = new aa.ShearTimeline(ea.length);
                    } else {
                      oa = new aa.TranslateTimeline(ea.length);
                      pa = n;
                    }
                    oa.boneIndex = na;
                    fa = 0;
                    ga = 0;
                    for (; ga < ea.length; ga++) {
                      ha = ea[ga];
                      var ra = this.getValue(ha, "x", qa);
                      var sa = this.getValue(ha, "y", qa);
                      oa.setFrame(fa, this.getValue(ha, "time", 0), ra * pa, sa * pa);
                      this.readCurve(ha, oa, fa);
                      fa++;
                    }
                    r.push(oa);
                    s = Math.max(s, oa.frames[(oa.getFrameCount() - 1) * aa.TranslateTimeline.ENTRIES]);
                  }
                }
              }
            }
            if (t.ik) {
              for (var ta in t.ik) {
                var ua = t.ik[ta];
                var va = i.findIkConstraint(ta);
                (oa = new aa.IkConstraintTimeline(ua.length)).ikConstraintIndex = i.ikConstraints.indexOf(va);
                fa = 0;
                ga = 0;
                for (; ga < ua.length; ga++) {
                  ha = ua[ga];
                  oa.setFrame(fa, this.getValue(ha, "time", 0), this.getValue(ha, "mix", 1), this.getValue(ha, "softness", 0) * n, this.getValue(ha, "bendPositive", true) ? 1 : -1, this.getValue(ha, "compress", false), this.getValue(ha, "stretch", false));
                  this.readCurve(ha, oa, fa);
                  fa++;
                }
                r.push(oa);
                s = Math.max(s, oa.frames[(oa.getFrameCount() - 1) * aa.IkConstraintTimeline.ENTRIES]);
              }
            }
            if (t.transform) {
              for (var ta in t.transform) {
                ua = t.transform[ta];
                va = i.findTransformConstraint(ta);
                (oa = new aa.TransformConstraintTimeline(ua.length)).transformConstraintIndex = i.transformConstraints.indexOf(va);
                fa = 0;
                ga = 0;
                for (; ga < ua.length; ga++) {
                  ha = ua[ga];
                  oa.setFrame(fa, this.getValue(ha, "time", 0), this.getValue(ha, "rotateMix", 1), this.getValue(ha, "translateMix", 1), this.getValue(ha, "scaleMix", 1), this.getValue(ha, "shearMix", 1));
                  this.readCurve(ha, oa, fa);
                  fa++;
                }
                r.push(oa);
                s = Math.max(s, oa.frames[(oa.getFrameCount() - 1) * aa.TransformConstraintTimeline.ENTRIES]);
              }
            }
            var wa = t.path || t.paths;
            if (wa) {
              for (var ta in wa) {
                ua = wa[ta];
                var M = i.findPathConstraintIndex(ta);
                if (M == -1) {
                  throw Error("Path constraint not found: " + ta);
                }
                var xa = i.pathConstraints[M];
                for (var da in ua) {
                  ea = ua[da];
                  if (da === "position" || da === "spacing") {
                    oa = null;
                    pa = 1;
                    if (da === "spacing") {
                      oa = new aa.PathConstraintSpacingTimeline(ea.length);
                      if (!(xa.spacingMode != aa.SpacingMode.Length && xa.spacingMode != aa.SpacingMode.Fixed)) {
                        pa = n;
                      }
                    } else {
                      oa = new aa.PathConstraintPositionTimeline(ea.length);
                      if (xa.positionMode == aa.PositionMode.Fixed) {
                        pa = n;
                      }
                    }
                    oa.pathConstraintIndex = M;
                    fa = 0;
                    ga = 0;
                    for (; ga < ea.length; ga++) {
                      ha = ea[ga];
                      oa.setFrame(fa, this.getValue(ha, "time", 0), this.getValue(ha, da, 0) * pa);
                      this.readCurve(ha, oa, fa);
                      fa++;
                    }
                    r.push(oa);
                    s = Math.max(s, oa.frames[(oa.getFrameCount() - 1) * aa.PathConstraintPositionTimeline.ENTRIES]);
                  } else if (da === "mix") {
                    (oa = new aa.PathConstraintMixTimeline(ea.length)).pathConstraintIndex = M;
                    fa = 0;
                    ga = 0;
                    for (; ga < ea.length; ga++) {
                      ha = ea[ga];
                      oa.setFrame(fa, this.getValue(ha, "time", 0), this.getValue(ha, "rotateMix", 1), this.getValue(ha, "translateMix", 1));
                      this.readCurve(ha, oa, fa);
                      fa++;
                    }
                    r.push(oa);
                    s = Math.max(s, oa.frames[(oa.getFrameCount() - 1) * aa.PathConstraintMixTimeline.ENTRIES]);
                  }
                }
              }
            }
            if (t.deform) {
              for (var ya in t.deform) {
                var za = t.deform[ya];
                var Aa = i.findSkin(ya);
                if (Aa == null) {
                  throw Error("Skin not found: " + ya);
                }
                for (var ba in za) {
                  ca = za[ba];
                  if ((Ra = i.findSlotIndex(ba)) == -1) {
                    throw Error("Slot not found: " + ca.name);
                  }
                  for (var da in ca) {
                    ea = ca[da];
                    var Ba = Aa.getAttachment(Ra, da);
                    if (Ba != null) {
                      var Ca = Ba.bones != null;
                      var Da = Ba.vertices;
                      var Ea = Ca ? Da.length / 3 * 2 : Da.length;
                      (oa = new aa.DeformTimeline(ea.length)).slotIndex = Ra;
                      oa.attachment = Ba;
                      fa = 0;
                      for (var Fa = 0; Fa < ea.length; Fa++) {
                        ha = ea[Fa];
                        var Ga = undefined;
                        var Ha = this.getValue(ha, "vertices", null);
                        if (Ha == null) {
                          Ga = Ca ? aa.Utils.newFloatArray(Ea) : Da;
                        } else {
                          Ga = aa.Utils.newFloatArray(Ea);
                          var Ia = this.getValue(ha, "offset", 0);
                          aa.Utils.arrayCopy(Ha, 0, Ga, Ia, Ha.length);
                          if (n != 1) {
                            for (var Ja = (ga = Ia) + Ha.length; ga < Ja; ga++) {
                              Ga[ga] *= n;
                            }
                          }
                          if (!Ca) {
                            for (ga = 0; ga < Ea; ga++) {
                              Ga[ga] += Da[ga];
                            }
                          }
                        }
                        oa.setFrame(fa, this.getValue(ha, "time", 0), Ga);
                        this.readCurve(ha, oa, fa);
                        fa++;
                      }
                      r.push(oa);
                      s = Math.max(s, oa.frames[oa.getFrameCount() - 1]);
                    }
                  }
                }
              }
            }
            var Ka = t.drawOrder;
            if (Ka == null) {
              Ka = t.draworder;
            }
            if (Ka != null) {
              oa = new aa.DrawOrderTimeline(Ka.length);
              var La = i.slots.length;
              fa = 0;
              Fa = 0;
              for (; Fa < Ka.length; Fa++) {
                var W = Ka[Fa];
                var Ma = null;
                var Na = this.getValue(W, "offsets", null);
                if (Na != null) {
                  Ma = aa.Utils.newArray(La, -1);
                  var Oa = aa.Utils.newArray(La - Na.length, 0);
                  var Pa = 0;
                  var Qa = 0;
                  for (ga = 0; ga < Na.length; ga++) {
                    var Ra;
                    var Sa = Na[ga];
                    if ((Ra = i.findSlotIndex(Sa.slot)) == -1) {
                      throw Error("Slot not found: " + Sa.slot);
                    }
                    for (; Pa != Ra;) {
                      Oa[Qa++] = Pa++;
                    }
                    Ma[Pa + Sa.offset] = Pa++;
                  }
                  for (; Pa < La;) {
                    Oa[Qa++] = Pa++;
                  }
                  for (ga = La - 1; ga >= 0; ga--) {
                    if (Ma[ga] == -1) {
                      Ma[ga] = Oa[--Qa];
                    }
                  }
                }
                oa.setFrame(fa++, this.getValue(W, "time", 0), Ma);
              }
              r.push(oa);
              s = Math.max(s, oa.frames[oa.getFrameCount() - 1]);
            }
            if (t.events) {
              oa = new aa.EventTimeline(t.events.length);
              fa = 0;
              ga = 0;
              for (; ga < t.events.length; ga++) {
                var Ta = t.events[ga];
                var Ua = i.findEvent(Ta.name);
                if (Ua == null) {
                  throw Error("Event not found: " + Ta.name);
                }
                var Va = new aa.Event(aa.Utils.toSinglePrecision(this.getValue(Ta, "time", 0)), Ua);
                Va.intValue = this.getValue(Ta, "int", Ua.intValue);
                Va.floatValue = this.getValue(Ta, "float", Ua.floatValue);
                Va.stringValue = this.getValue(Ta, "string", Ua.stringValue);
                if (Va.data.audioPath != null) {
                  Va.volume = this.getValue(Ta, "volume", 1);
                  Va.balance = this.getValue(Ta, "balance", 0);
                }
                oa.setFrame(fa++, Va);
              }
              r.push(oa);
              s = Math.max(s, oa.frames[oa.getFrameCount() - 1]);
            }
            if (isNaN(s)) {
              throw Error("Error while parsing animation, duration is NaN");
            }
            i.animations.push(new aa.Animation(e, r, s));
          };
          a.prototype.readCurve = function (a, b, c) {
            var d = a.curve;
            if (d) {
              if (d == "stepped") {
                b.setStepped(c);
              } else if (Object.prototype.toString.call(d) === "[object Array]") {
                b.setCurve(c, d[0], d[1], d[2], d[3]);
              } else {
                b.setCurve(c, d, this.getValue(a, "c2", 0), this.getValue(a, "c3", 1), this.getValue(a, "c4", 1));
              }
            }
          };
          a.prototype.getValue = function (a, b, c) {
            if (a[b] !== undefined) {
              return a[b];
            } else {
              return c;
            }
          };
          a.blendModeFromString = function (a) {
            if ((a = a.toLowerCase()) == "normal") {
              return aa.BlendMode.Normal;
            }
            if (a == "additive") {
              return aa.BlendMode.Additive;
            }
            if (a == "multiply") {
              return aa.BlendMode.Multiply;
            }
            if (a == "screen") {
              return aa.BlendMode.Screen;
            }
            throw Error("Unknown blend mode: " + a);
          };
          a.positionModeFromString = function (a) {
            if ((a = a.toLowerCase()) == "fixed") {
              return aa.PositionMode.Fixed;
            }
            if (a == "percent") {
              return aa.PositionMode.Percent;
            }
            throw Error("Unknown position mode: " + a);
          };
          a.spacingModeFromString = function (a) {
            if ((a = a.toLowerCase()) == "length") {
              return aa.SpacingMode.Length;
            }
            if (a == "fixed") {
              return aa.SpacingMode.Fixed;
            }
            if (a == "percent") {
              return aa.SpacingMode.Percent;
            }
            throw Error("Unknown position mode: " + a);
          };
          a.rotateModeFromString = function (a) {
            if ((a = a.toLowerCase()) == "tangent") {
              return aa.RotateMode.Tangent;
            }
            if (a == "chain") {
              return aa.RotateMode.Chain;
            }
            if (a == "chainscale") {
              return aa.RotateMode.ChainScale;
            }
            throw Error("Unknown rotate mode: " + a);
          };
          a.transformModeFromString = function (a) {
            if ((a = a.toLowerCase()) == "normal") {
              return aa.TransformMode.Normal;
            }
            if (a == "onlytranslation") {
              return aa.TransformMode.OnlyTranslation;
            }
            if (a == "norotationorreflection") {
              return aa.TransformMode.NoRotationOrReflection;
            }
            if (a == "noscale") {
              return aa.TransformMode.NoScale;
            }
            if (a == "noscaleorreflection") {
              return aa.TransformMode.NoScaleOrReflection;
            }
            throw Error("Unknown transform mode: " + a);
          };
          return a;
        }();
        aa.SkeletonJson = a;
        function b(a, b, c, d, e) {
          this.mesh = a;
          this.skin = b;
          this.slotIndex = c;
          this.parent = d;
          this.inheritDeform = e;
        }
      })(e || (e = {}));
      (function (a) {
        function b(a, b, c) {
          this.slotIndex = a;
          this.name = b;
          this.attachment = c;
        }
        a.SkinEntry = b;
        var c = function () {
          function c(a) {
            this.attachments = [];
            this.bones = [];
            this.constraints = [];
            if (a == null) {
              throw Error("name cannot be null.");
            }
            this.name = a;
          }
          c.prototype.setAttachment = function (a, b, c) {
            if (c == null) {
              throw Error("attachment cannot be null.");
            }
            var d = this.attachments;
            if (a >= d.length) {
              d.length = a + 1;
            }
            if (!d[a]) {
              d[a] = {};
            }
            d[a][b] = c;
          };
          c.prototype.addSkin = function (b) {
            for (var c = 0; c < b.bones.length; c++) {
              for (var d = b.bones[c], f = false, g = 0; g < this.bones.length; g++) {
                if (this.bones[g] == d) {
                  f = true;
                  break;
                }
              }
              if (!f) {
                this.bones.push(d);
              }
            }
            for (c = 0; c < b.constraints.length; c++) {
              var h = b.constraints[c];
              f = false;
              g = 0;
              for (; g < this.constraints.length; g++) {
                if (this.constraints[g] == h) {
                  f = true;
                  break;
                }
              }
              if (!f) {
                this.constraints.push(h);
              }
            }
            var j = b.getAttachments();
            for (c = 0; c < j.length; c++) {
              var a = j[c];
              this.setAttachment(a.slotIndex, a.name, a.attachment);
            }
          };
          c.prototype.copySkin = function (b) {
            for (var d = 0; d < b.bones.length; d++) {
              for (var e = b.bones[d], f = false, g = 0; g < this.bones.length; g++) {
                if (this.bones[g] == e) {
                  f = true;
                  break;
                }
              }
              if (!f) {
                this.bones.push(e);
              }
            }
            for (d = 0; d < b.constraints.length; d++) {
              var h = b.constraints[d];
              f = false;
              g = 0;
              for (; g < this.constraints.length; g++) {
                if (this.constraints[g] == h) {
                  f = true;
                  break;
                }
              }
              if (!f) {
                this.constraints.push(h);
              }
            }
            var j = b.getAttachments();
            for (d = 0; d < j.length; d++) {
              var k = j[d];
              if (k.attachment != null) {
                if (k.attachment instanceof a.MeshAttachment) {
                  k.attachment = k.attachment.newLinkedMesh();
                  this.setAttachment(k.slotIndex, k.name, k.attachment);
                } else {
                  k.attachment = k.attachment.copy();
                  this.setAttachment(k.slotIndex, k.name, k.attachment);
                }
              }
            }
          };
          c.prototype.getAttachment = function (a, b) {
            var c = this.attachments[a];
            if (c) {
              return c[b];
            } else {
              return null;
            }
          };
          c.prototype.removeAttachment = function (a, b) {
            var c = this.attachments[a];
            if (c) {
              c[b] = null;
            }
          };
          c.prototype.getAttachments = function () {
            for (var a = [], c = 0; c < this.attachments.length; c++) {
              var d = this.attachments[c];
              if (d) {
                for (var e in d) {
                  var f = d[e];
                  if (f) {
                    a.push(new b(c, e, f));
                  }
                }
              }
            }
            return a;
          };
          c.prototype.getAttachmentsForSlot = function (a, c) {
            var d = this.attachments[a];
            if (d) {
              for (var e in d) {
                var f = d[e];
                if (f) {
                  c.push(new b(a, e, f));
                }
              }
            }
          };
          c.prototype.clear = function () {
            this.attachments.length = 0;
            this.bones.length = 0;
            this.constraints.length = 0;
          };
          c.prototype.attachAll = function (b, d) {
            for (var e = 0, f = 0; f < b.slots.length; f++) {
              var g = b.slots[f];
              var h = g.getAttachment();
              if (h && e < d.attachments.length) {
                var j = d.attachments[e];
                for (var k in j) {
                  if (h == j[k]) {
                    var l = this.getAttachment(e, k);
                    if (l != null) {
                      g.setAttachment(l);
                    }
                    break;
                  }
                }
              }
              e++;
            }
          };
          return c;
        }();
        a.Skin = c;
      })(e || (e = {}));
      (function (a) {
        var b = function () {
          function b(b, c) {
            this.deform = [];
            if (b == null) {
              throw Error("data cannot be null.");
            }
            if (c == null) {
              throw Error("bone cannot be null.");
            }
            this.data = b;
            this.bone = c;
            this.color = new a.Color();
            this.darkColor = b.darkColor == null ? null : new a.Color();
            this.setToSetupPose();
          }
          b.prototype.getSkeleton = function () {
            return this.bone.skeleton;
          };
          b.prototype.getAttachment = function () {
            return this.attachment;
          };
          b.prototype.setAttachment = function (a) {
            if (this.attachment != a) {
              this.attachment = a;
              this.attachmentTime = this.bone.skeleton.time;
              this.deform.length = 0;
            }
          };
          b.prototype.setAttachmentTime = function (a) {
            this.attachmentTime = this.bone.skeleton.time - a;
          };
          b.prototype.getAttachmentTime = function () {
            return this.bone.skeleton.time - this.attachmentTime;
          };
          b.prototype.setToSetupPose = function () {
            this.color.setFromColor(this.data.color);
            if (this.darkColor != null) {
              this.darkColor.setFromColor(this.data.darkColor);
            }
            if (this.data.attachmentName == null) {
              this.attachment = null;
            } else {
              this.attachment = null;
              this.setAttachment(this.bone.skeleton.getAttachment(this.data.index, this.data.attachmentName));
            }
          };
          return b;
        }();
        a.Slot = b;
      })(e || (e = {}));
      (function (a) {
        a.SlotData = function (b, c, d) {
          this.color = new a.Color(1, 1, 1, 1);
          if (b < 0) {
            throw Error("index must be >= 0.");
          }
          if (c == null) {
            throw Error("name cannot be null.");
          }
          if (d == null) {
            throw Error("boneData cannot be null.");
          }
          this.index = b;
          this.name = c;
          this.boneData = d;
        };
      })(e || (e = {}));
      (function (a) {
        var b;
        var c;
        var d = function () {
          function a(a) {
            this._image = a;
          }
          a.prototype.getImage = function () {
            return this._image;
          };
          a.filterFromString = function (a) {
            switch (a.toLowerCase()) {
              case "nearest":
                return b.Nearest;
              case "linear":
                return b.Linear;
              case "mipmap":
                return b.MipMap;
              case "mipmapnearestnearest":
                return b.MipMapNearestNearest;
              case "mipmaplinearnearest":
                return b.MipMapLinearNearest;
              case "mipmapnearestlinear":
                return b.MipMapNearestLinear;
              case "mipmaplinearlinear":
                return b.MipMapLinearLinear;
              default:
                throw Error("Unknown texture filter " + a);
            }
          };
          a.wrapFromString = function (a) {
            switch (a.toLowerCase()) {
              case "mirroredtepeat":
                return c.MirroredRepeat;
              case "clamptoedge":
                return c.ClampToEdge;
              case "repeat":
                return c.Repeat;
              default:
                throw Error("Unknown texture wrap " + a);
            }
          };
          return a;
        }();
        a.Texture = d;
        (function (a) {
          a[a.Nearest = 9728] = "Nearest";
          a[a.Linear = 9729] = "Linear";
          a[a.MipMap = 9987] = "MipMap";
          a[a.MipMapNearestNearest = 9984] = "MipMapNearestNearest";
          a[a.MipMapLinearNearest = 9985] = "MipMapLinearNearest";
          a[a.MipMapNearestLinear = 9986] = "MipMapNearestLinear";
          a[a.MipMapLinearLinear = 9987] = "MipMapLinearLinear";
        })(b = a.TextureFilter || (a.TextureFilter = {}));
        (function (a) {
          a[a.MirroredRepeat = 33648] = "MirroredRepeat";
          a[a.ClampToEdge = 33071] = "ClampToEdge";
          a[a.Repeat = 10497] = "Repeat";
        })(c = a.TextureWrap || (a.TextureWrap = {}));
        a.TextureRegion = function () {
          this.u = 0;
          this.v = 0;
          this.u2 = 0;
          this.v2 = 0;
          this.width = 0;
          this.height = 0;
          this.rotate = false;
          this.offsetX = 0;
          this.offsetY = 0;
          this.originalWidth = 0;
          this.originalHeight = 0;
        };
        var g = function (a) {
          function b() {
            return a !== null && a.apply(this, arguments) || this;
          }
          f(b, a);
          b.prototype.setFilters = function () {};
          b.prototype.setWraps = function () {};
          b.prototype.dispose = function () {};
          return b;
        }(d);
        a.FakeTexture = g;
      })(e || (e = {}));
      (function (b) {
        var a = function () {
          function a(a, b) {
            this.pages = [];
            this.regions = [];
            this.load(a, b);
          }
          a.prototype.load = function (i, j) {
            if (j == null) {
              throw Error("textureLoader cannot be null.");
            }
            var k = new g(i);
            var a = [,,,,];
            var m = null;
            for (;;) {
              var n = k.readLine();
              if (n == null) {
                break;
              }
              if ((n = n.trim()).length == 0) {
                m = null;
              } else if (m) {
                var o = new e();
                o.name = n;
                o.page = m;
                var q = k.readValue();
                if (q.toLocaleLowerCase() == "true") {
                  o.degrees = 90;
                } else if (q.toLocaleLowerCase() == "false") {
                  o.degrees = 0;
                } else {
                  o.degrees = parseFloat(q);
                }
                o.rotate = o.degrees == 90;
                k.readTuple(a);
                var r = parseInt(a[0]);
                var s = parseInt(a[1]);
                k.readTuple(a);
                var t = parseInt(a[0]);
                var w = parseInt(a[1]);
                o.u = r / m.width;
                o.v = s / m.height;
                if (o.rotate) {
                  o.u2 = (r + w) / m.width;
                  o.v2 = (s + t) / m.height;
                } else {
                  o.u2 = (r + t) / m.width;
                  o.v2 = (s + w) / m.height;
                }
                o.x = r;
                o.y = s;
                o.width = Math.abs(t);
                o.height = Math.abs(w);
                if (k.readTuple(a) == 4 && k.readTuple(a) == 4) {
                  k.readTuple(a);
                }
                o.originalWidth = parseInt(a[0]);
                o.originalHeight = parseInt(a[1]);
                k.readTuple(a);
                o.offsetX = parseInt(a[0]);
                o.offsetY = parseInt(a[1]);
                o.index = parseInt(k.readValue());
                o.texture = m.texture;
                this.regions.push(o);
              } else {
                (m = new d()).name = n;
                if (k.readTuple(a) == 2) {
                  m.width = parseInt(a[0]);
                  m.height = parseInt(a[1]);
                  k.readTuple(a);
                }
                k.readTuple(a);
                m.minFilter = b.Texture.filterFromString(a[0]);
                m.magFilter = b.Texture.filterFromString(a[1]);
                var x = k.readValue();
                m.uWrap = b.TextureWrap.ClampToEdge;
                m.vWrap = b.TextureWrap.ClampToEdge;
                if (x == "x") {
                  m.uWrap = b.TextureWrap.Repeat;
                } else if (x == "y") {
                  m.vWrap = b.TextureWrap.Repeat;
                } else if (x == "xy") {
                  m.uWrap = m.vWrap = b.TextureWrap.Repeat;
                }
                m.texture = j(n);
                m.texture.setFilters(m.minFilter, m.magFilter);
                m.texture.setWraps(m.uWrap, m.vWrap);
                m.width = m.texture.getImage().width;
                m.height = m.texture.getImage().height;
                this.pages.push(m);
              }
            }
          };
          a.prototype.findRegion = function (a) {
            for (var b = 0; b < this.regions.length; b++) {
              if (this.regions[b].name == a) {
                return this.regions[b];
              }
            }
            return null;
          };
          a.prototype.dispose = function () {
            for (var a = 0; a < this.pages.length; a++) {
              this.pages[a].texture.dispose();
            }
          };
          return a;
        }();
        b.TextureAtlas = a;
        var g = function () {
          function a(a) {
            this.index = 0;
            this.lines = a.split(/\r\n|\r|\n/);
          }
          a.prototype.readLine = function () {
            if (this.index >= this.lines.length) {
              return null;
            } else {
              return this.lines[this.index++];
            }
          };
          a.prototype.readValue = function () {
            var a = this.readLine();
            var b = a.indexOf(":");
            if (b == -1) {
              throw Error("Invalid line: " + a);
            }
            return a.substring(b + 1).trim();
          };
          a.prototype.readTuple = function (a) {
            var b = this.readLine();
            var c = b.indexOf(":");
            if (c == -1) {
              throw Error("Invalid line: " + b);
            }
            for (var d = 0, e = c + 1; d < 3; d++) {
              var f = b.indexOf(",", e);
              if (f == -1) {
                break;
              }
              a[d] = b.substr(e, f - e).trim();
              e = f + 1;
            }
            a[d] = b.substring(e).trim();
            return d + 1;
          };
          return a;
        }();
        function d() {}
        b.TextureAtlasPage = d;
        var e = function (a) {
          function b() {
            return a !== null && a.apply(this, arguments) || this;
          }
          f(b, a);
          return b;
        }(b.TextureRegion);
        b.TextureAtlasRegion = e;
      })(e || (e = {}));
      (function (j) {
        var a = function () {
          function a(a, b) {
            this.rotateMix = 0;
            this.translateMix = 0;
            this.scaleMix = 0;
            this.shearMix = 0;
            this.temp = new j.Vector2();
            this.active = false;
            if (a == null) {
              throw Error("data cannot be null.");
            }
            if (b == null) {
              throw Error("skeleton cannot be null.");
            }
            this.data = a;
            this.rotateMix = a.rotateMix;
            this.translateMix = a.translateMix;
            this.scaleMix = a.scaleMix;
            this.shearMix = a.shearMix;
            this.bones = [];
            for (var c = 0; c < a.bones.length; c++) {
              this.bones.push(b.findBone(a.bones[c].name));
            }
            this.target = b.findBone(a.target.name);
          }
          a.prototype.isActive = function () {
            return this.active;
          };
          a.prototype.apply = function () {
            this.update();
          };
          a.prototype.update = function () {
            if (this.data.local) {
              if (this.data.relative) {
                this.applyRelativeLocal();
              } else {
                this.applyAbsoluteLocal();
              }
            } else if (this.data.relative) {
              this.applyRelativeWorld();
            } else {
              this.applyAbsoluteWorld();
            }
          };
          a.prototype.applyAbsoluteWorld = function () {
            for (var k = this.rotateMix, e = this.translateMix, i = this.scaleMix, n = this.shearMix, q = this.target, r = q.a, a = q.b, o = q.c, c = q.d, l = r * c - a * o > 0 ? j.MathUtils.degRad : -j.MathUtils.degRad, h = this.data.offsetRotation * l, s = this.data.offsetShearY * l, f = this.bones, d = 0, t = f.length; d < t; d++) {
              var p = f[d];
              var u = false;
              if (k != 0) {
                var w = p.a;
                var z = p.b;
                var B = p.c;
                var D = p.d;
                if ((K = Math.atan2(o, r) - Math.atan2(B, w) + h) > j.MathUtils.PI) {
                  K -= j.MathUtils.PI2;
                } else if (K < -j.MathUtils.PI) {
                  K += j.MathUtils.PI2;
                }
                var F = Math.cos(K *= k);
                var G = Math.sin(K);
                p.a = F * w - G * B;
                p.b = F * z - G * D;
                p.c = G * w + F * B;
                p.d = G * z + F * D;
                u = true;
              }
              if (e != 0) {
                var H = this.temp;
                q.localToWorld(H.set(this.data.offsetX, this.data.offsetY));
                p.worldX += (H.x - p.worldX) * e;
                p.worldY += (H.y - p.worldY) * e;
                u = true;
              }
              if (i > 0) {
                var I = Math.sqrt(p.a * p.a + p.c * p.c);
                var J = Math.sqrt(r * r + o * o);
                if (I > 0.00001) {
                  I = (I + (J - I + this.data.offsetScaleX) * i) / I;
                }
                p.a *= I;
                p.c *= I;
                I = Math.sqrt(p.b * p.b + p.d * p.d);
                J = Math.sqrt(a * a + c * c);
                if (I > 0.00001) {
                  I = (I + (J - I + this.data.offsetScaleY) * i) / I;
                }
                p.b *= I;
                p.d *= I;
                u = true;
              }
              if (n > 0) {
                z = p.b;
                D = p.d;
                var K;
                var L = Math.atan2(D, z);
                if ((K = Math.atan2(c, a) - Math.atan2(o, r) - (L - Math.atan2(p.c, p.a))) > j.MathUtils.PI) {
                  K -= j.MathUtils.PI2;
                } else if (K < -j.MathUtils.PI) {
                  K += j.MathUtils.PI2;
                }
                K = L + (K + s) * n;
                I = Math.sqrt(z * z + D * D);
                p.b = Math.cos(K) * I;
                p.d = Math.sin(K) * I;
                u = true;
              }
              if (u) {
                p.appliedValid = false;
              }
            }
          };
          a.prototype.applyRelativeWorld = function () {
            for (var k = this.rotateMix, e = this.translateMix, i = this.scaleMix, n = this.shearMix, q = this.target, r = q.a, a = q.b, o = q.c, c = q.d, l = r * c - a * o > 0 ? j.MathUtils.degRad : -j.MathUtils.degRad, h = this.data.offsetRotation * l, s = this.data.offsetShearY * l, f = this.bones, d = 0, t = f.length; d < t; d++) {
              var p;
              var u = f[d];
              var w = false;
              if (k != 0) {
                var z = u.a;
                var B = u.b;
                var D = u.c;
                var F = u.d;
                if ((p = Math.atan2(o, r) + h) > j.MathUtils.PI) {
                  p -= j.MathUtils.PI2;
                } else if (p < -j.MathUtils.PI) {
                  p += j.MathUtils.PI2;
                }
                var G = Math.cos(p *= k);
                var H = Math.sin(p);
                u.a = G * z - H * D;
                u.b = G * B - H * F;
                u.c = H * z + G * D;
                u.d = H * B + G * F;
                w = true;
              }
              if (e != 0) {
                var I = this.temp;
                q.localToWorld(I.set(this.data.offsetX, this.data.offsetY));
                u.worldX += I.x * e;
                u.worldY += I.y * e;
                w = true;
              }
              if (i > 0) {
                var J = (Math.sqrt(r * r + o * o) - 1 + this.data.offsetScaleX) * i + 1;
                u.a *= J;
                u.c *= J;
                J = (Math.sqrt(a * a + c * c) - 1 + this.data.offsetScaleY) * i + 1;
                u.b *= J;
                u.d *= J;
                w = true;
              }
              if (n > 0) {
                if ((p = Math.atan2(c, a) - Math.atan2(o, r)) > j.MathUtils.PI) {
                  p -= j.MathUtils.PI2;
                } else if (p < -j.MathUtils.PI) {
                  p += j.MathUtils.PI2;
                }
                B = u.b;
                F = u.d;
                p = Math.atan2(F, B) + (p - j.MathUtils.PI / 2 + s) * n;
                J = Math.sqrt(B * B + F * F);
                u.b = Math.cos(p) * J;
                u.d = Math.sin(p) * J;
                w = true;
              }
              if (w) {
                u.appliedValid = false;
              }
            }
          };
          a.prototype.applyAbsoluteLocal = function () {
            var b = this.rotateMix;
            var g = this.translateMix;
            var e = this.scaleMix;
            var i = this.shearMix;
            var j = this.target;
            if (!j.appliedValid) {
              j.updateAppliedTransform();
            }
            for (var k = this.bones, m = 0, n = k.length; m < n; m++) {
              var o = k[m];
              if (!o.appliedValid) {
                o.updateAppliedTransform();
              }
              var q = o.arotation;
              if (b != 0) {
                var r = j.arotation - q + this.data.offsetRotation;
                q += (r -= (16384 - (16384.499999999996 - r / 360 | 0)) * 360) * b;
              }
              var s = o.ax;
              var t = o.ay;
              if (g != 0) {
                s += (j.ax - s + this.data.offsetX) * g;
                t += (j.ay - t + this.data.offsetY) * g;
              }
              var v = o.ascaleX;
              var w = o.ascaleY;
              if (e != 0) {
                if (v > 0.00001) {
                  v = (v + (j.ascaleX - v + this.data.offsetScaleX) * e) / v;
                }
                if (w > 0.00001) {
                  w = (w + (j.ascaleY - w + this.data.offsetScaleY) * e) / w;
                }
              }
              var x = o.ashearY;
              if (i != 0) {
                r = j.ashearY - x + this.data.offsetShearY;
                r -= (16384 - (16384.499999999996 - r / 360 | 0)) * 360;
                o.shearY += r * i;
              }
              o.updateWorldTransformWith(s, t, q, v, w, o.ashearX, x);
            }
          };
          a.prototype.applyRelativeLocal = function () {
            var b = this.rotateMix;
            var g = this.translateMix;
            var e = this.scaleMix;
            var i = this.shearMix;
            var j = this.target;
            if (!j.appliedValid) {
              j.updateAppliedTransform();
            }
            for (var k = this.bones, m = 0, n = k.length; m < n; m++) {
              var o = k[m];
              if (!o.appliedValid) {
                o.updateAppliedTransform();
              }
              var p = o.arotation;
              if (b != 0) {
                p += (j.arotation + this.data.offsetRotation) * b;
              }
              var q = o.ax;
              var r = o.ay;
              if (g != 0) {
                q += (j.ax + this.data.offsetX) * g;
                r += (j.ay + this.data.offsetY) * g;
              }
              var s = o.ascaleX;
              var t = o.ascaleY;
              if (e != 0) {
                if (s > 0.00001) {
                  s *= (j.ascaleX - 1 + this.data.offsetScaleX) * e + 1;
                }
                if (t > 0.00001) {
                  t *= (j.ascaleY - 1 + this.data.offsetScaleY) * e + 1;
                }
              }
              var v = o.ashearY;
              if (i != 0) {
                v += (j.ashearY + this.data.offsetShearY) * i;
              }
              o.updateWorldTransformWith(q, r, p, s, t, o.ashearX, v);
            }
          };
          return a;
        }();
        j.TransformConstraint = a;
      })(e || (e = {}));
      (function (a) {
        var b = function (a) {
          function b(b) {
            var c = a.call(this, b, 0, false) || this;
            c.bones = [];
            c.rotateMix = 0;
            c.translateMix = 0;
            c.scaleMix = 0;
            c.shearMix = 0;
            c.offsetRotation = 0;
            c.offsetX = 0;
            c.offsetY = 0;
            c.offsetScaleX = 0;
            c.offsetScaleY = 0;
            c.offsetShearY = 0;
            c.relative = false;
            c.local = false;
            return c;
          }
          f(b, a);
          return b;
        }(a.ConstraintData);
        a.TransformConstraintData = b;
      })(e || (e = {}));
      (function (a) {
        var b = function () {
          function j() {
            this.convexPolygons = [];
            this.convexPolygonsIndices = [];
            this.indicesArray = [];
            this.isConcaveArray = [];
            this.triangles = [];
            this.polygonPool = new a.Pool(function () {
              return [];
            });
            this.polygonIndicesPool = new a.Pool(function () {
              return [];
            });
          }
          j.prototype.triangulate = function (e) {
            var k = e;
            var i = e.length >> 1;
            var q = this.indicesArray;
            q.length = 0;
            for (var r = 0; r < i; r++) {
              q[r] = r;
            }
            var t = this.isConcaveArray;
            t.length = 0;
            r = 0;
            for (var a = i; r < a; ++r) {
              t[r] = j.isConcave(r, i, k, q);
            }
            var o = this.triangles;
            for (o.length = 0; i > 3;) {
              var c = i - 1;
              r = 0;
              var w = 1;
              for (;;) {
                t: if (!t[r]) {
                  for (var z = q[c] << 1, B = q[r] << 1, D = q[w] << 1, F = k[z], G = k[z + 1], H = k[B], I = k[B + 1], J = k[D], K = k[D + 1], L = (w + 1) % i; L != c; L = (L + 1) % i) {
                    if (t[L]) {
                      var M = q[L] << 1;
                      var N = k[M];
                      var O = k[M + 1];
                      if (j.positiveArea(J, K, F, G, N, O) && j.positiveArea(F, G, H, I, N, O) && j.positiveArea(H, I, J, K, N, O)) {
                        break t;
                      }
                    }
                  }
                  break;
                }
                if (w == 0) {
                  do {
                    if (!t[r]) {
                      break;
                    }
                    r--;
                  } while (r > 0);
                  break;
                }
                c = r;
                r = w;
                w = (w + 1) % i;
              }
              o.push(q[(i + r - 1) % i]);
              o.push(q[r]);
              o.push(q[(r + 1) % i]);
              q.splice(r, 1);
              t.splice(r, 1);
              var P = (--i + r - 1) % i;
              var Q = r == i ? 0 : r;
              t[P] = j.isConcave(P, i, k, q);
              t[Q] = j.isConcave(Q, i, k, q);
            }
            if (i == 3) {
              o.push(q[2]);
              o.push(q[0]);
              o.push(q[1]);
            }
            return o;
          };
          j.prototype.decompose = function (e, q) {
            var i = e;
            var n = this.convexPolygons;
            this.polygonPool.freeAll(n);
            n.length = 0;
            var r = this.convexPolygonsIndices;
            this.polygonIndicesPool.freeAll(r);
            r.length = 0;
            var s = this.polygonIndicesPool.obtain();
            s.length = 0;
            var t = this.polygonPool.obtain();
            t.length = 0;
            for (var G = -1, H = 0, J = 0, K = q.length; J < K; J += 3) {
              var Q = q[J] << 1;
              var W = q[J + 1] << 1;
              var X = q[J + 2] << 1;
              var Y = i[Q];
              var Z = i[Q + 1];
              var $ = i[W];
              var aa = i[W + 1];
              var ba = i[X];
              var ca = i[X + 1];
              var da = false;
              if (G == Q) {
                var ea = t.length - 4;
                var fa = j.winding(t[ea], t[ea + 1], t[ea + 2], t[ea + 3], ba, ca);
                var ga = j.winding(ba, ca, t[0], t[1], t[2], t[3]);
                if (fa == H && ga == H) {
                  t.push(ba);
                  t.push(ca);
                  s.push(X);
                  da = true;
                }
              }
              if (!da) {
                if (t.length > 0) {
                  n.push(t);
                  r.push(s);
                } else {
                  this.polygonPool.free(t);
                  this.polygonIndicesPool.free(s);
                }
                (t = this.polygonPool.obtain()).length = 0;
                t.push(Y);
                t.push(Z);
                t.push($);
                t.push(aa);
                t.push(ba);
                t.push(ca);
                (s = this.polygonIndicesPool.obtain()).length = 0;
                s.push(Q);
                s.push(W);
                s.push(X);
                H = j.winding(Y, Z, $, aa, ba, ca);
                G = Q;
              }
            }
            if (t.length > 0) {
              n.push(t);
              r.push(s);
            }
            J = 0;
            K = n.length;
            for (; J < K; J++) {
              if ((s = r[J]).length != 0) {
                for (var ha = s[0], ia = s[s.length - 1], ja = (t = n[J])[ea = t.length - 4], ka = t[ea + 1], la = t[ea + 2], ma = t[ea + 3], na = t[0], oa = t[1], pa = t[2], qa = t[3], ra = j.winding(ja, ka, la, ma, na, oa), sa = 0; sa < K; sa++) {
                  if (sa != J) {
                    var ta = r[sa];
                    if (ta.length == 3) {
                      var ua = ta[0];
                      var va = ta[1];
                      var wa = ta[2];
                      var xa = n[sa];
                      ba = xa[xa.length - 2];
                      ca = xa[xa.length - 1];
                      if (ua == ha && va == ia) {
                        fa = j.winding(ja, ka, la, ma, ba, ca);
                        ga = j.winding(ba, ca, na, oa, pa, qa);
                        if (fa == ra && ga == ra) {
                          xa.length = 0;
                          ta.length = 0;
                          t.push(ba);
                          t.push(ca);
                          s.push(wa);
                          ja = la;
                          ka = ma;
                          la = ba;
                          ma = ca;
                          sa = 0;
                        }
                      }
                    }
                  }
                }
              }
            }
            for (J = n.length - 1; J >= 0; J--) {
              if ((t = n[J]).length == 0) {
                n.splice(J, 1);
                this.polygonPool.free(t);
                s = r[J];
                r.splice(J, 1);
                this.polygonIndicesPool.free(s);
              }
            }
            return n;
          };
          j.isConcave = function (b, c, d, e) {
            var f = e[(c + b - 1) % c] << 1;
            var g = e[b] << 1;
            var h = e[(b + 1) % c] << 1;
            return !this.positiveArea(d[f], d[f + 1], d[g], d[g + 1], d[h], d[h + 1]);
          };
          j.positiveArea = function (a, b, c, d, e, f) {
            return a * (f - d) + c * (b - f) + e * (d - b) >= 0;
          };
          j.winding = function (b, c, d, e, f, g) {
            var h = d - b;
            var a = e - c;
            if (f * a - g * h + h * c - b * a >= 0) {
              return 1;
            } else {
              return -1;
            }
          };
          return j;
        }();
        a.Triangulator = b;
      })(e || (e = {}));
      (function (b) {
        var g = function () {
          function a() {
            this.array = [];
          }
          a.prototype.add = function (a) {
            var b = this.contains(a);
            this.array[a | 0] = a | 0;
            return !b;
          };
          a.prototype.contains = function (a) {
            return this.array[a | 0] != null;
          };
          a.prototype.remove = function (a) {
            this.array[a | 0] = undefined;
          };
          a.prototype.clear = function () {
            this.array.length = 0;
          };
          return a;
        }();
        b.IntSet = g;
        var e = function () {
          function a(a, b, c, d) {
            if (a === undefined) {
              a = 0;
            }
            if (b === undefined) {
              b = 0;
            }
            if (c === undefined) {
              c = 0;
            }
            if (d === undefined) {
              d = 0;
            }
            this.r = a;
            this.g = b;
            this.b = c;
            this.a = d;
          }
          a.prototype.set = function (a, b, c, d) {
            this.r = a;
            this.g = b;
            this.b = c;
            this.a = d;
            this.clamp();
            return this;
          };
          a.prototype.setFromColor = function (a) {
            this.r = a.r;
            this.g = a.g;
            this.b = a.b;
            this.a = a.a;
            return this;
          };
          a.prototype.setFromString = function (a) {
            a = a.charAt(0) == "#" ? a.substr(1) : a;
            this.r = parseInt(a.substr(0, 2), 16) / 255;
            this.g = parseInt(a.substr(2, 2), 16) / 255;
            this.b = parseInt(a.substr(4, 2), 16) / 255;
            this.a = (a.length != 8 ? 255 : parseInt(a.substr(6, 2), 16)) / 255;
            return this;
          };
          a.prototype.add = function (a, b, c, d) {
            this.r += a;
            this.g += b;
            this.b += c;
            this.a += d;
            this.clamp();
            return this;
          };
          a.prototype.clamp = function () {
            if (this.r < 0) {
              this.r = 0;
            } else if (this.r > 1) {
              this.r = 1;
            }
            if (this.g < 0) {
              this.g = 0;
            } else if (this.g > 1) {
              this.g = 1;
            }
            if (this.b < 0) {
              this.b = 0;
            } else if (this.b > 1) {
              this.b = 1;
            }
            if (this.a < 0) {
              this.a = 0;
            } else if (this.a > 1) {
              this.a = 1;
            }
            return this;
          };
          a.rgba8888ToColor = function (a, b) {
            a.r = ((b & 4278190080) >>> 24) / 255;
            a.g = ((b & 16711680) >>> 16) / 255;
            a.b = ((b & 65280) >>> 8) / 255;
            a.a = (b & 255) / 255;
          };
          a.rgb888ToColor = function (a, b) {
            a.r = ((b & 16711680) >>> 16) / 255;
            a.g = ((b & 65280) >>> 8) / 255;
            a.b = (b & 255) / 255;
          };
          a.WHITE = new a(1, 1, 1, 1);
          a.RED = new a(1, 0, 0, 1);
          a.GREEN = new a(0, 1, 0, 1);
          a.BLUE = new a(0, 0, 1, 1);
          a.MAGENTA = new a(1, 0, 1, 1);
          return a;
        }();
        b.Color = e;
        var i = function () {
          function a() {}
          a.clamp = function (a, b, c) {
            if (a < b) {
              return b;
            } else if (a > c) {
              return c;
            } else {
              return a;
            }
          };
          a.cosDeg = function (b) {
            return Math.cos(b * a.degRad);
          };
          a.sinDeg = function (b) {
            return Math.sin(b * a.degRad);
          };
          a.signum = function (a) {
            if (a > 0) {
              return 1;
            } else if (a < 0) {
              return -1;
            } else {
              return 0;
            }
          };
          a.toInt = function (a) {
            if (a > 0) {
              return Math.floor(a);
            } else {
              return Math.ceil(a);
            }
          };
          a.cbrt = function (a) {
            var b = Math.pow(Math.abs(a), 1 / 3);
            if (a < 0) {
              return -b;
            } else {
              return b;
            }
          };
          a.randomTriangular = function (b, c) {
            return a.randomTriangularWith(b, c, (b + c) * 0.5);
          };
          a.randomTriangularWith = function (a, b, c) {
            var d = Math.random();
            var e = b - a;
            if (d <= (c - a) / e) {
              return a + Math.sqrt(d * e * (c - a));
            } else {
              return b - Math.sqrt((1 - d) * e * (b - c));
            }
          };
          a.PI = 3.1415927;
          a.PI2 = a.PI * 2;
          a.radiansToDegrees = 180 / a.PI;
          a.radDeg = a.radiansToDegrees;
          a.degreesToRadians = a.PI / 180;
          a.degRad = a.degreesToRadians;
          return a;
        }();
        b.MathUtils = i;
        var j = function () {
          function a() {}
          a.prototype.apply = function (a, b, c) {
            return a + (b - a) * this.applyInternal(c);
          };
          return a;
        }();
        b.Interpolation = j;
        var k = function (a) {
          function b(b) {
            var c = a.call(this) || this;
            c.power = 2;
            c.power = b;
            return c;
          }
          f(b, a);
          b.prototype.applyInternal = function (a) {
            if (a <= 0.5) {
              return Math.pow(a * 2, this.power) / 2;
            } else {
              return Math.pow((a - 1) * 2, this.power) / (this.power % 2 == 0 ? -2 : 2) + 1;
            }
          };
          return b;
        }(j);
        b.Pow = k;
        var a = function (a) {
          function b(b) {
            return a.call(this, b) || this;
          }
          f(b, a);
          b.prototype.applyInternal = function (a) {
            return Math.pow(a - 1, this.power) * (this.power % 2 == 0 ? -1 : 1) + 1;
          };
          return b;
        }(k);
        b.PowOut = a;
        var m = function () {
          function a() {}
          a.arrayCopy = function (b, c, d, e, f) {
            for (var g = c, h = e; g < c + f; g++, h++) {
              d[h] = b[g];
            }
          };
          a.setArraySize = function (a, b, c) {
            if (c === undefined) {
              c = 0;
            }
            var d = a.length;
            if (d == b) {
              return a;
            }
            a.length = b;
            if (d < b) {
              for (var e = d; e < b; e++) {
                a[e] = c;
              }
            }
            return a;
          };
          a.ensureArrayCapacity = function (b, c, d) {
            if (d === undefined) {
              d = 0;
            }
            if (b.length >= c) {
              return b;
            } else {
              return a.setArraySize(b, c, d);
            }
          };
          a.newArray = function (a, b) {
            for (var c = Array(a), d = 0; d < a; d++) {
              c[d] = b;
            }
            return c;
          };
          a.newFloatArray = function (b) {
            if (a.SUPPORTS_TYPED_ARRAYS) {
              return new Float32Array(b);
            }
            for (var c = Array(b), d = 0; d < c.length; d++) {
              c[d] = 0;
            }
            return c;
          };
          a.newShortArray = function (b) {
            if (a.SUPPORTS_TYPED_ARRAYS) {
              return new Int16Array(b);
            }
            for (var c = Array(b), d = 0; d < c.length; d++) {
              c[d] = 0;
            }
            return c;
          };
          a.toFloatArray = function (b) {
            if (a.SUPPORTS_TYPED_ARRAYS) {
              return new Float32Array(b);
            } else {
              return b;
            }
          };
          a.toSinglePrecision = function (b) {
            if (a.SUPPORTS_TYPED_ARRAYS) {
              return Math.fround(b);
            } else {
              return b;
            }
          };
          a.webkit602BugfixHelper = function () {};
          a.contains = function (a, b, c) {
            if (c === undefined) {
              c = true;
            }
            for (var d = 0; d < a.length; d++) {
              if (a[d] == b) {
                return true;
              }
            }
            return false;
          };
          a.SUPPORTS_TYPED_ARRAYS = typeof Float32Array != "undefined";
          return a;
        }();
        b.Utils = m;
        var c = function () {
          function a() {}
          a.logBones = function (a) {
            for (var b = 0; b < a.bones.length; b++) {
              a.bones[b];
            }
          };
          return a;
        }();
        b.DebugUtils = c;
        var l = function () {
          function a(a) {
            this.items = [];
            this.instantiator = a;
          }
          a.prototype.obtain = function () {
            if (this.items.length > 0) {
              return this.items.pop();
            } else {
              return this.instantiator();
            }
          };
          a.prototype.free = function (a) {
            if (a.reset) {
              a.reset();
            }
            this.items.push(a);
          };
          a.prototype.freeAll = function (a) {
            for (var b = 0; b < a.length; b++) {
              if (a[b].reset) {
                a[b].reset();
              }
              this.items[b] = a[b];
            }
          };
          a.prototype.clear = function () {
            this.items.length = 0;
          };
          return a;
        }();
        b.Pool = l;
        var h = function () {
          function a(a, b) {
            if (a === undefined) {
              a = 0;
            }
            if (b === undefined) {
              b = 0;
            }
            this.x = a;
            this.y = b;
          }
          a.prototype.set = function (a, b) {
            this.x = a;
            this.y = b;
            return this;
          };
          a.prototype.length = function () {
            var a = this.x;
            var b = this.y;
            return Math.sqrt(a * a + b * b);
          };
          a.prototype.normalize = function () {
            var a = this.length();
            if (a != 0) {
              this.x /= a;
              this.y /= a;
            }
            return this;
          };
          return a;
        }();
        b.Vector2 = h;
        var n = function () {
          function a() {
            this.maxDelta = 0.064;
            this.framesPerSecond = 0;
            this.delta = 0;
            this.totalTime = 0;
            this.lastTime = Date.now() / 1000;
            this.frameCount = 0;
            this.frameTime = 0;
          }
          a.prototype.update = function () {
            var a = Date.now() / 1000;
            this.delta = a - this.lastTime;
            this.frameTime += this.delta;
            this.totalTime += this.delta;
            if (this.delta > this.maxDelta) {
              this.delta = this.maxDelta;
            }
            this.lastTime = a;
            this.frameCount++;
            if (this.frameTime > 1) {
              this.framesPerSecond = this.frameCount / this.frameTime;
              this.frameTime = 0;
              this.frameCount = 0;
            }
          };
          return a;
        }();
        b.TimeKeeper = n;
        var o = function () {
          function a(a) {
            if (a === undefined) {
              a = 32;
            }
            this.addedValues = 0;
            this.lastValue = 0;
            this.mean = 0;
            this.dirty = true;
            this.values = Array(a);
          }
          a.prototype.hasEnoughData = function () {
            return this.addedValues >= this.values.length;
          };
          a.prototype.addValue = function (a) {
            if (this.addedValues < this.values.length) {
              this.addedValues++;
            }
            this.values[this.lastValue++] = a;
            if (this.lastValue > this.values.length - 1) {
              this.lastValue = 0;
            }
            this.dirty = true;
          };
          a.prototype.getMean = function () {
            if (this.hasEnoughData()) {
              if (this.dirty) {
                for (var a = 0, b = 0; b < this.values.length; b++) {
                  a += this.values[b];
                }
                this.mean = a / this.values.length;
                this.dirty = false;
              }
              return this.mean;
            }
            return 0;
          };
          return a;
        }();
        b.WindowedMean = o;
      })(e || (e = {}));
      if (!Math.fround) {
        d = new Float32Array(1);
        Math.fround = function (a) {
          d[0] = a;
          return d[0];
        };
      }
      (function (a) {
        function b(a) {
          if (a == null) {
            throw Error("name cannot be null.");
          }
          this.name = a;
        }
        a.Attachment = b;
        var c = function (b) {
          function c(a) {
            var d = b.call(this, a) || this;
            d.id = (c.nextID++ & 65535) << 11;
            d.worldVerticesLength = 0;
            d.deformAttachment = d;
            return d;
          }
          f(c, b);
          c.prototype.computeWorldVertices = function (j, k, e, q, n, r) {
            e = n + (e >> 1) * r;
            var s = j.bone.skeleton;
            var a = j.deform;
            var o = this.vertices;
            var t = this.bones;
            if (t != null) {
              for (var l = 0, z = 0, B = 0; B < k; B += 2) {
                l += (G = t[l]) + 1;
                z += G;
              }
              var D = s.bones;
              if (a.length == 0) {
                P = n;
                x = z * 3;
                P = n;
                x = z * 3;
                for (; P < e; P += r) {
                  var d = 0;
                  var F = 0;
                  var G = t[l++];
                  for (G += l; l < G; l++, x += 3) {
                    K = D[t[l]];
                    Q = o[x];
                    S = o[x + 1];
                    var H = o[x + 2];
                    d += (Q * K.a + S * K.b + K.worldX) * H;
                    F += (Q * K.c + S * K.d + K.worldY) * H;
                  }
                  q[P] = d;
                  q[P + 1] = F;
                }
              } else {
                for (var J = a, m = (P = n, x = z * 3, z << 1); P < e; P += r) {
                  d = 0;
                  F = 0;
                  G = t[l++];
                  G += l;
                  for (; l < G; l++, x += 3, m += 2) {
                    K = D[t[l]];
                    Q = o[x] + J[m];
                    S = o[x + 1] + J[m + 1];
                    H = o[x + 2];
                    d += (Q * K.a + S * K.b + K.worldX) * H;
                    F += (Q * K.c + S * K.d + K.worldY) * H;
                  }
                  q[P] = d;
                  q[P + 1] = F;
                }
              }
            } else {
              if (a.length > 0) {
                o = a;
              }
              for (var K, L = (K = j.bone).worldX, E = K.worldY, A = K.a, x = K.b, N = K.c, b = K.d, O = k, P = n; P < e; O += 2, P += r) {
                var Q = o[O];
                var S = o[O + 1];
                q[P] = Q * A + S * x + L;
                q[P + 1] = Q * N + S * b + E;
              }
            }
          };
          c.prototype.copyTo = function (b) {
            if (this.bones != null) {
              b.bones = Array(this.bones.length);
              a.Utils.arrayCopy(this.bones, 0, b.bones, 0, this.bones.length);
            } else {
              b.bones = null;
            }
            if (this.vertices != null) {
              b.vertices = a.Utils.newFloatArray(this.vertices.length);
              a.Utils.arrayCopy(this.vertices, 0, b.vertices, 0, this.vertices.length);
            } else {
              b.vertices = null;
            }
            b.worldVerticesLength = this.worldVerticesLength;
            b.deformAttachment = this.deformAttachment;
          };
          c.nextID = 0;
          return c;
        }(b);
        a.VertexAttachment = c;
      })(e || (e = {}));
      (function (a) {
        (function (a) {
          a[a.Region = 0] = "Region";
          a[a.BoundingBox = 1] = "BoundingBox";
          a[a.Mesh = 2] = "Mesh";
          a[a.LinkedMesh = 3] = "LinkedMesh";
          a[a.Path = 4] = "Path";
          a[a.Point = 5] = "Point";
          a[a.Clipping = 6] = "Clipping";
        })(a.AttachmentType || (a.AttachmentType = {}));
      })(e || (e = {}));
      (function (a) {
        var b = function (b) {
          function c(c) {
            var d = b.call(this, c) || this;
            d.color = new a.Color(1, 1, 1, 1);
            return d;
          }
          f(c, b);
          c.prototype.copy = function () {
            var a = new c(name);
            this.copyTo(a);
            a.color.setFromColor(this.color);
            return a;
          };
          return c;
        }(a.VertexAttachment);
        a.BoundingBoxAttachment = b;
      })(e || (e = {}));
      (function (a) {
        var b = function (b) {
          function c(c) {
            var d = b.call(this, c) || this;
            d.color = new a.Color(0.2275, 0.2275, 0.8078, 1);
            return d;
          }
          f(c, b);
          c.prototype.copy = function () {
            var a = new c(name);
            this.copyTo(a);
            a.endSlot = this.endSlot;
            a.color.setFromColor(this.color);
            return a;
          };
          return c;
        }(a.VertexAttachment);
        a.ClippingAttachment = b;
      })(e || (e = {}));
      (function (b) {
        var a = function (a) {
          function c(c) {
            var d = a.call(this, c) || this;
            d.color = new b.Color(1, 1, 1, 1);
            d.tempColor = new b.Color(0, 0, 0, 0);
            return d;
          }
          f(c, a);
          c.prototype.updateUVs = function () {
            var d = this.regionUVs;
            if (!(this.uvs != null && this.uvs.length == d.length)) {
              this.uvs = b.Utils.newFloatArray(d.length);
            }
            var e = this.uvs;
            var f = this.uvs.length;
            var g = this.region.u;
            var i = this.region.v;
            var j = 0;
            var k = 0;
            if (this.region instanceof b.TextureAtlasRegion) {
              var m = this.region;
              var c = m.texture.getImage().width;
              var l = m.texture.getImage().height;
              switch (m.degrees) {
                case 90:
                  g -= (m.originalHeight - m.offsetY - m.height) / c;
                  i -= (m.originalWidth - m.offsetX - m.width) / l;
                  j = m.originalHeight / c;
                  k = m.originalWidth / l;
                  for (var h = 0; h < f; h += 2) {
                    e[h] = g + d[h + 1] * j;
                    e[h + 1] = i + (1 - d[h]) * k;
                  }
                  return;
                case 180:
                  g -= (m.originalWidth - m.offsetX - m.width) / c;
                  i -= m.offsetY / l;
                  j = m.originalWidth / c;
                  k = m.originalHeight / l;
                  h = 0;
                  for (; h < f; h += 2) {
                    e[h] = g + (1 - d[h]) * j;
                    e[h + 1] = i + (1 - d[h + 1]) * k;
                  }
                  return;
                case 270:
                  g -= m.offsetY / c;
                  i -= m.offsetX / l;
                  j = m.originalHeight / c;
                  k = m.originalWidth / l;
                  h = 0;
                  for (; h < f; h += 2) {
                    e[h] = g + (1 - d[h + 1]) * j;
                    e[h + 1] = i + d[h] * k;
                  }
                  return;
              }
              g -= m.offsetX / c;
              i -= (m.originalHeight - m.offsetY - m.height) / l;
              j = m.originalWidth / c;
              k = m.originalHeight / l;
            } else if (this.region == null) {
              g = i = 0;
              j = k = 1;
            } else {
              j = this.region.u2 - g;
              k = this.region.v2 - i;
            }
            for (h = 0; h < f; h += 2) {
              e[h] = g + d[h] * j;
              e[h + 1] = i + d[h + 1] * k;
            }
          };
          c.prototype.getParentMesh = function () {
            return this.parentMesh;
          };
          c.prototype.setParentMesh = function (a) {
            this.parentMesh = a;
            if (a != null) {
              this.bones = a.bones;
              this.vertices = a.vertices;
              this.worldVerticesLength = a.worldVerticesLength;
              this.regionUVs = a.regionUVs;
              this.triangles = a.triangles;
              this.hullLength = a.hullLength;
              this.worldVerticesLength = a.worldVerticesLength;
            }
          };
          c.prototype.copy = function () {
            if (this.parentMesh != null) {
              return this.newLinkedMesh();
            }
            var a = new c(this.name);
            a.region = this.region;
            a.path = this.path;
            a.color.setFromColor(this.color);
            this.copyTo(a);
            a.regionUVs = Array(this.regionUVs.length);
            b.Utils.arrayCopy(this.regionUVs, 0, a.regionUVs, 0, this.regionUVs.length);
            a.uvs = Array(this.uvs.length);
            b.Utils.arrayCopy(this.uvs, 0, a.uvs, 0, this.uvs.length);
            a.triangles = Array(this.triangles.length);
            b.Utils.arrayCopy(this.triangles, 0, a.triangles, 0, this.triangles.length);
            a.hullLength = this.hullLength;
            if (this.edges != null) {
              a.edges = Array(this.edges.length);
              b.Utils.arrayCopy(this.edges, 0, a.edges, 0, this.edges.length);
            }
            a.width = this.width;
            a.height = this.height;
            return a;
          };
          c.prototype.newLinkedMesh = function () {
            var a = new c(this.name);
            a.region = this.region;
            a.path = this.path;
            a.color.setFromColor(this.color);
            a.deformAttachment = this.deformAttachment;
            a.setParentMesh(this.parentMesh != null ? this.parentMesh : this);
            a.updateUVs();
            return a;
          };
          return c;
        }(b.VertexAttachment);
        b.MeshAttachment = a;
      })(e || (e = {}));
      (function (a) {
        var b = function (b) {
          function c(c) {
            var d = b.call(this, c) || this;
            d.closed = false;
            d.constantSpeed = false;
            d.color = new a.Color(1, 1, 1, 1);
            return d;
          }
          f(c, b);
          c.prototype.copy = function () {
            var b = new c(name);
            this.copyTo(b);
            b.lengths = Array(this.lengths.length);
            a.Utils.arrayCopy(this.lengths, 0, b.lengths, 0, this.lengths.length);
            b.closed = closed;
            b.constantSpeed = this.constantSpeed;
            b.color.setFromColor(this.color);
            return b;
          };
          return c;
        }(a.VertexAttachment);
        a.PathAttachment = b;
      })(e || (e = {}));
      (function (a) {
        var b = function (b) {
          function c(c) {
            var d = b.call(this, c) || this;
            d.color = new a.Color(0.38, 0.94, 0, 1);
            return d;
          }
          f(c, b);
          c.prototype.computeWorldPosition = function (a, b) {
            b.x = this.x * a.a + this.y * a.b + a.worldX;
            b.y = this.x * a.c + this.y * a.d + a.worldY;
            return b;
          };
          c.prototype.computeWorldRotation = function (b) {
            var c = a.MathUtils.cosDeg(this.rotation);
            var d = a.MathUtils.sinDeg(this.rotation);
            var e = c * b.a + d * b.b;
            var f = c * b.c + d * b.d;
            return Math.atan2(f, e) * a.MathUtils.radDeg;
          };
          c.prototype.copy = function () {
            var a = new c(name);
            a.x = this.x;
            a.y = this.y;
            a.rotation = this.rotation;
            a.color.setFromColor(this.color);
            return a;
          };
          return c;
        }(a.VertexAttachment);
        a.PointAttachment = b;
      })(e || (e = {}));
      (function (a) {
        var b = function (b) {
          function j(c) {
            var d = b.call(this, c) || this;
            d.x = 0;
            d.y = 0;
            d.scaleX = 1;
            d.scaleY = 1;
            d.rotation = 0;
            d.width = 0;
            d.height = 0;
            d.color = new a.Color(1, 1, 1, 1);
            d.offset = a.Utils.newFloatArray(8);
            d.uvs = a.Utils.newFloatArray(8);
            d.tempColor = new a.Color(1, 1, 1, 1);
            return d;
          }
          f(j, b);
          j.prototype.updateOffset = function () {
            var b = this.width / this.region.originalWidth * this.scaleX;
            var i = this.height / this.region.originalHeight * this.scaleY;
            var e = -this.width / 2 * this.scaleX + this.region.offsetX * b;
            var k = -this.height / 2 * this.scaleY + this.region.offsetY * i;
            var n = e + this.region.width * b;
            var q = k + this.region.height * i;
            var a = this.rotation * Math.PI / 180;
            var o = Math.cos(a);
            var c = Math.sin(a);
            var l = e * o + this.x;
            var h = e * c;
            var r = k * o + this.y;
            var f = k * c;
            var d = n * o + this.x;
            var s = n * c;
            var p = q * o + this.y;
            var t = q * c;
            var g = this.offset;
            g[j.OX1] = l - f;
            g[j.OY1] = r + h;
            g[j.OX2] = l - t;
            g[j.OY2] = p + h;
            g[j.OX3] = d - t;
            g[j.OY3] = p + s;
            g[j.OX4] = d - f;
            g[j.OY4] = r + s;
          };
          j.prototype.setRegion = function (a) {
            this.region = a;
            var b = this.uvs;
            if (a.rotate) {
              b[2] = a.u;
              b[3] = a.v2;
              b[4] = a.u;
              b[5] = a.v;
              b[6] = a.u2;
              b[7] = a.v;
              b[0] = a.u2;
              b[1] = a.v2;
            } else {
              b[0] = a.u;
              b[1] = a.v2;
              b[2] = a.u;
              b[3] = a.v;
              b[4] = a.u2;
              b[5] = a.v;
              b[6] = a.u2;
              b[7] = a.v2;
            }
          };
          j.prototype.computeWorldVertices = function (b, g, e, i) {
            var k = this.offset;
            var m = b.worldX;
            var a = b.worldY;
            var o = b.a;
            var c = b.b;
            var l = b.c;
            var h = b.d;
            var p = 0;
            var q = 0;
            p = k[j.OX1];
            q = k[j.OY1];
            g[e] = p * o + q * c + m;
            g[e + 1] = p * l + q * h + a;
            e += i;
            p = k[j.OX2];
            q = k[j.OY2];
            g[e] = p * o + q * c + m;
            g[e + 1] = p * l + q * h + a;
            e += i;
            p = k[j.OX3];
            q = k[j.OY3];
            g[e] = p * o + q * c + m;
            g[e + 1] = p * l + q * h + a;
            e += i;
            p = k[j.OX4];
            q = k[j.OY4];
            g[e] = p * o + q * c + m;
            g[e + 1] = p * l + q * h + a;
          };
          j.prototype.copy = function () {
            var b = new j(name);
            b.region = this.region;
            b.rendererObject = this.rendererObject;
            b.path = this.path;
            b.x = this.x;
            b.y = this.y;
            b.scaleX = this.scaleX;
            b.scaleY = this.scaleY;
            b.rotation = this.rotation;
            b.width = this.width;
            b.height = this.height;
            a.Utils.arrayCopy(this.uvs, 0, b.uvs, 0, 8);
            a.Utils.arrayCopy(this.offset, 0, b.offset, 0, 8);
            b.color.setFromColor(this.color);
            return b;
          };
          j.OX1 = 0;
          j.OY1 = 1;
          j.OX2 = 2;
          j.OY2 = 3;
          j.OX3 = 4;
          j.OY3 = 5;
          j.OX4 = 6;
          j.OY4 = 7;
          j.X1 = 0;
          j.Y1 = 1;
          j.C1R = 2;
          j.C1G = 3;
          j.C1B = 4;
          j.C1A = 5;
          j.U1 = 6;
          j.V1 = 7;
          j.X2 = 8;
          j.Y2 = 9;
          j.C2R = 10;
          j.C2G = 11;
          j.C2B = 12;
          j.C2A = 13;
          j.U2 = 14;
          j.V2 = 15;
          j.X3 = 16;
          j.Y3 = 17;
          j.C3R = 18;
          j.C3G = 19;
          j.C3B = 20;
          j.C3A = 21;
          j.U3 = 22;
          j.V3 = 23;
          j.X4 = 24;
          j.Y4 = 25;
          j.C4R = 26;
          j.C4G = 27;
          j.C4B = 28;
          j.C4A = 29;
          j.U4 = 30;
          j.V4 = 31;
          return j;
        }(a.Attachment);
        a.RegionAttachment = b;
      })(e || (e = {}));
      (function (a) {
        var b = function () {
          function b(a, b) {
            this.jitterX = 0;
            this.jitterY = 0;
            this.jitterX = a;
            this.jitterY = b;
          }
          b.prototype.begin = function () {};
          b.prototype.transform = function (b) {
            b.x += a.MathUtils.randomTriangular(-this.jitterX, this.jitterY);
            b.y += a.MathUtils.randomTriangular(-this.jitterX, this.jitterY);
          };
          b.prototype.end = function () {};
          return b;
        }();
        a.JitterEffect = b;
      })(e || (e = {}));
      (function (b) {
        var a = function () {
          function a(a, b) {
            this.centerX = 0;
            this.centerY = 0;
            this.radius = 0;
            this.angle = 0;
            this.worldX = 0;
            this.worldY = 0;
            this.radius = a;
            this.interpolation = b;
          }
          a.prototype.begin = function (a) {
            this.worldX = a.x + this.centerX;
            this.worldY = a.y + this.centerY;
          };
          a.prototype.transform = function (d) {
            var e = this.angle * b.MathUtils.degreesToRadians;
            var f = d.x - this.worldX;
            var g = d.y - this.worldY;
            var h = Math.sqrt(f * f + g * g);
            if (h < this.radius) {
              var i = this.interpolation.apply(0, e, (this.radius - h) / this.radius);
              var a = Math.cos(i);
              var j = Math.sin(i);
              d.x = a * f - j * g + this.worldX;
              d.y = j * f + a * g + this.worldY;
            }
          };
          a.prototype.end = function () {};
          a.interpolation = new b.PowOut(2);
          return a;
        }();
        b.SwirlEffect = a;
      })(e || (e = {}));
      b.exports = e;
    }, {}],
    322: [function (j, k) {
      "use strict";
  
      var q;
      var z;
      var B;
      var D;
      var F;
      var G;
      var H = j("./track-entry-listeners");
      var J = j("./lib/spine");
      var c = [];
      var e = [];
      var h = 0;
      var u = 0;
      var K = 0;
      var L = null;
      var N = null;
      var I = 0;
      var O = 0;
      var P = 0;
      var Q = 0;
      var U = null;
      var V = null;
      var t = 0;
      var Y = 0;
      var W = new J.Color(1, 1, 1, 1);
      var b = new J.Color(1, 1, 1, 1);
      var l = [0, 1, 2, 2, 3, 0];
      var R = cc.Class({
        ctor: function () {
          this._privateMode = false;
          this._inited = false;
          this._invalid = true;
          this._enableCacheAttachedInfo = false;
          this.frames = [];
          this.totalTime = 0;
          this._frameIdx = -1;
          this.isCompleted = false;
          this._skeletonInfo = null;
          this._animationName = null;
          this._tempSegments = null;
          this._tempColors = null;
          this._tempBoneInfos = null;
        },
        init: function (a, b) {
          this._inited = true;
          this._animationName = b;
          this._skeletonInfo = a;
        },
        clear: function () {
          this._inited = false;
          for (var a = 0, b = this.frames.length; a < b; a++) {
            this.frames[a].segments.length = 0;
          }
          this.invalidAllFrame();
        },
        bind: function (a) {
          var b = function (a) {
            if (a && a.animation.name === this._animationName) {
              this.isCompleted = true;
            }
          }.bind(this);
          a.complete = b;
        },
        unbind: function (a) {
          a.complete = null;
        },
        begin: function () {
          if (this._invalid) {
            var a = this._skeletonInfo;
            var b = a.curAnimationCache;
            if (b && b !== this) {
              if (this._privateMode) {
                b.invalidAllFrame();
              } else {
                b.updateToFrame();
              }
            }
            var c = a.skeleton;
            var d = a.listener;
            var e = a.state;
            var f = c.data.findAnimation(this._animationName);
            e.setAnimationWith(0, f, false);
            this.bind(d);
            a.curAnimationCache = this;
            this._frameIdx = -1;
            this.isCompleted = false;
            this.totalTime = 0;
            this._invalid = false;
          }
        },
        end: function () {
          if (!this._needToUpdate()) {
            this._skeletonInfo.curAnimationCache = null;
            this.frames.length = this._frameIdx + 1;
            this.isCompleted = true;
            this.unbind(this._skeletonInfo.listener);
          }
        },
        _needToUpdate: function (a) {
          return !this.isCompleted && this.totalTime < 30 && (a == null || this._frameIdx < a);
        },
        updateToFrame: function (a) {
          if (this._inited && (this.begin(), this._needToUpdate(a))) {
            var b = this._skeletonInfo;
            var c = b.skeleton;
            var d = b.clipper;
            var e = b.state;
            do {
              c.update(1 / 60);
              e.update(1 / 60);
              e.apply(c);
              c.updateWorldTransform();
              this._frameIdx++;
              this._updateFrame(c, d, this._frameIdx);
              this.totalTime += 1 / 60;
            } while (this._needToUpdate(a));
            this.end();
          }
        },
        isInited: function () {
          return this._inited;
        },
        isInvalid: function () {
          return this._invalid;
        },
        invalidAllFrame: function () {
          this.isCompleted = false;
          this._invalid = true;
        },
        updateAllFrame: function () {
          this.invalidAllFrame();
          this.updateToFrame();
        },
        enableCacheAttachedInfo: function () {
          if (!this._enableCacheAttachedInfo) {
            this._enableCacheAttachedInfo = true;
            this.invalidAllFrame();
          }
        },
        _updateFrame: function (d, f, g) {
          K = 0;
          h = 0;
          u = 0;
          L = null;
          N = null;
          I = 0;
          O = 0;
          P = 0;
          Q = 0;
          U = null;
          V = null;
          this.frames[g] = this.frames[g] || {
            segments: [],
            colors: [],
            boneInfos: [],
            vertices: null,
            uintVert: null,
            indices: null
          };
          var i = this.frames[g];
          var j = this._tempSegments = i.segments;
          var k = this._tempColors = i.colors;
          var m = this._tempBoneInfos = i.boneInfos;
          this._traverseSkeleton(d, f);
          if (Q > 0) {
            k[Q - 1].vfOffset = K;
          }
          k.length = Q;
          m.length = h;
          var a = P - 1;
          if (a >= 0) {
            if (O > 0) {
              var n = j[a];
              n.indexCount = O;
              n.vfCount = I * 6;
              n.vertexCount = I;
              j.length = P;
            } else {
              j.length = P - 1;
            }
          }
          if (j.length != 0) {
            var o = i.vertices;
            var p = i.uintVert;
            if (!o || o.length < K) {
              o = i.vertices = new Float32Array(K);
              p = i.uintVert = new Uint32Array(o.buffer);
            }
            for (var q = 0, r = 0; q < K;) {
              o[q++] = c[r++];
              o[q++] = c[r++];
              o[q++] = c[r++];
              o[q++] = c[r++];
              p[q++] = c[r++];
              p[q++] = c[r++];
            }
            var s = i.indices;
            if (!s || s.length < u) {
              s = i.indices = new Uint16Array(u);
            }
            for (var t = 0; t < u; t++) {
              s[t] = e[t];
            }
            i.vertices = o;
            i.uintVert = p;
            i.indices = s;
          }
        },
        fillVertices: function (a, d, h, i, j) {
          D = h.a * d.a * a.a * 255;
          q = d.r * a.r * 255;
          z = d.g * a.g * 255;
          B = d.b * a.b * 255;
          W.r = q * h.r;
          W.g = z * h.g;
          W.b = B * h.b;
          W.a = D;
          if (j.darkColor == null) {
            b.set(0, 0, 0, 1);
          } else {
            b.r = j.darkColor.r * q;
            b.g = j.darkColor.g * z;
            b.b = j.darkColor.b * B;
          }
          b.a = 0;
          F = (W.a << 24 >>> 0) + (W.b << 16) + (W.g << 8) + W.r;
          G = (b.a << 24 >>> 0) + (b.b << 16) + (b.g << 8) + b.r;
          if (U !== F || V !== G) {
            var f = this._tempColors;
            U = F;
            V = G;
            if (Q > 0) {
              f[Q - 1].vfOffset = K;
            }
            f[Q++] = {
              fr: W.r,
              fg: W.g,
              fb: W.b,
              fa: W.a,
              dr: b.r,
              dg: b.g,
              db: b.b,
              da: b.a,
              vfOffset: 0
            };
          }
          if (i.isClipping()) {
            i.clipTriangles(c, t, e, Y, c, W, b, true, 6, u, K, K + 2);
            var k = i.clippedVertices;
            var l = i.clippedTriangles;
            Y = l.length;
            t = k.length / 12 * 6;
            for (var g = 0, n = u, o = l.length; g < o;) {
              e[n++] = l[g++];
            }
            for (var p = 0, r = k.length, s = K; p < r; p += 12, s += 6) {
              c[s] = k[p];
              c[s + 1] = k[p + 1];
              c[s + 2] = k[p + 6];
              c[s + 3] = k[p + 7];
              c[s + 4] = F;
              c[s + 5] = G;
            }
          } else {
            for (var v = K, w = K + t; v < w; v += 6) {
              c[v + 4] = F;
              c[v + 5] = G;
            }
          }
        },
        _traverseSkeleton: function (d, f) {
          var g;
          var j;
          var m;
          var p;
          var q;
          var v;
          var x;
          var y;
          var C;
          var Q;
          var R;
          var Z;
          var $ = this._tempSegments;
          var M = this._tempBoneInfos;
          var w = d.color;
          var _ = d.bones;
          if (this._enableCacheAttachedInfo) {
            for (var aa = 0, ba = _.length; aa < ba; aa++, h++) {
              var ca = _[aa];
              var da = M[h];
              if (!da) {
                da = M[h] = {};
              }
              da.a = ca.a;
              da.b = ca.b;
              da.c = ca.c;
              da.d = ca.d;
              da.worldX = ca.worldX;
              da.worldY = ca.worldY;
            }
          }
          for (var ea = 0, fa = d.drawOrder.length; ea < fa; ea++) {
            if ((Z = d.drawOrder[ea]).bone.active) {
              t = 0;
              Y = 0;
              if (g = Z.getAttachment()) {
                v = g instanceof J.RegionAttachment;
                x = g instanceof J.MeshAttachment;
                if (g instanceof J.ClippingAttachment) {
                  f.clipStart(Z, g);
                } else if (v || x) {
                  if (y = g.region.texture._texture) {
                    R = Z.data.blendMode;
                    if (!(L === y.nativeUrl && N === R)) {
                      L = y.nativeUrl;
                      N = R;
                      if ((C = P - 1) >= 0) {
                        if (O > 0) {
                          (Q = $[C]).indexCount = O;
                          Q.vertexCount = I;
                          Q.vfCount = I * 6;
                        } else {
                          P--;
                        }
                      }
                      $[P] = {
                        tex: y,
                        blendMode: R,
                        indexCount: 0,
                        vertexCount: 0,
                        vfCount: 0
                      };
                      P++;
                      O = 0;
                      I = 0;
                    }
                    if (v) {
                      q = l;
                      t = 24;
                      Y = 6;
                      g.computeWorldVertices(Z.bone, c, K, 6);
                    } else if (x) {
                      q = g.triangles;
                      t = (g.worldVerticesLength >> 1) * 6;
                      Y = q.length;
                      g.computeWorldVertices(Z, 0, g.worldVerticesLength, c, K, 6);
                    }
                    if (t != 0 && Y != 0) {
                      for (var B = 0, ga = u, ha = q.length; B < ha;) {
                        e[ga++] = q[B++];
                      }
                      p = g.uvs;
                      for (var ia = K, ja = K + t, ka = 0; ia < ja; ia += 6, ka += 2) {
                        c[ia + 2] = p[ka];
                        c[ia + 3] = p[ka + 1];
                      }
                      j = g.color;
                      m = Z.color;
                      this.fillVertices(w, j, m, f, Z);
                      if (Y > 0) {
                        for (var la = u, ma = u + Y; la < ma; la++) {
                          e[la] += I;
                        }
                        u += Y;
                        K += t;
                        O += Y;
                        I += t / 6;
                      }
                      f.clipEndWithSlot(Z);
                    } else {
                      f.clipEndWithSlot(Z);
                    }
                  } else {
                    f.clipEndWithSlot(Z);
                  }
                } else {
                  f.clipEndWithSlot(Z);
                }
              } else {
                f.clipEndWithSlot(Z);
              }
            }
          }
          f.clipEnd();
        }
      });
      var M = cc.Class({
        ctor: function () {
          this._privateMode = false;
          this._animationPool = {};
          this._skeletonCache = {};
        },
        enablePrivateMode: function () {
          this._privateMode = true;
        },
        clear: function () {
          this._animationPool = {};
          this._skeletonCache = {};
        },
        removeSkeleton: function (a) {
          var b = this._skeletonCache[a];
          if (b) {
            var c = b.animationsCache;
            for (var d in c) {
              var e = c[d];
              if (e) {
                this._animationPool[a + "#" + d] = e;
                e.clear();
              }
            }
            delete this._skeletonCache[a];
          }
        },
        getSkeletonCache: function (b, c) {
          var d = this._skeletonCache[b];
          if (!d) {
            var e = new J.Skeleton(c);
            var f = new J.SkeletonClipping();
            var g = new J.AnimationStateData(e.data);
            var h = new J.AnimationState(g);
            var a = new H();
            h.addListener(a);
            this._skeletonCache[b] = d = {
              skeleton: e,
              clipper: f,
              state: h,
              listener: a,
              animationsCache: {},
              curAnimationCache: null
            };
          }
          return d;
        },
        getAnimationCache: function (a, b) {
          var c = this._skeletonCache[a];
          if (c) {
            return c.animationsCache[b];
          } else {
            return null;
          }
        },
        invalidAnimationCache: function (a) {
          var b = this._skeletonCache[a];
          if (b && b.skeleton) {
            var c = b.animationsCache;
            for (var d in c) {
              c[d].invalidAllFrame();
            }
          }
        },
        initAnimationCache: function (b, c) {
          if (!c) {
            return null;
          }
          var d = this._skeletonCache[b];
          var e = d && d.skeleton;
          if (!e) {
            return null;
          }
          if (!e.data.findAnimation(c)) {
            return null;
          }
          var f = d.animationsCache;
          var g = f[c];
          if (!g) {
            var h = b + "#" + c;
            if (g = this._animationPool[h]) {
              delete this._animationPool[h];
            } else {
              (g = new R())._privateMode = this._privateMode;
            }
            g.init(d, c);
            f[c] = g;
          }
          return g;
        },
        updateAnimationCache: function (a, b) {
          if (b) {
            var c = this.initAnimationCache(a, b);
            if (!c) {
              return null;
            }
            c.updateAllFrame();
          } else {
            var d = this._skeletonCache[a];
            if (!d || !d.skeleton) {
              return;
            }
            var e = d.animationsCache;
            for (var f in e) {
              e[f].updateAllFrame();
            }
          }
        }
      });
      M.FrameTime = 1 / 60;
      M.sharedCache = new M();
      k.exports = M;
    }, {
      "./lib/spine": 321,
      "./track-entry-listeners": 326
    }],
    323: [function (a, b) {
      "use strict";
  
      var c = a("./skeleton-cache").sharedCache;
      var d = cc.Class({
        name: "sp.SkeletonData",
        extends: cc.Asset,
        ctor: function () {
          this.reset();
        },
        properties: {
          _skeletonJson: null,
          skeletonJsonStr: {
            get: function () {
              if (this._skeletonJson) {
                return JSON.stringify(this._skeletonJson);
              } else {
                return "";
              }
            }
          },
          skeletonJson: {
            get: function () {
              return this._skeletonJson;
            },
            set: function (a) {
              this.reset();
              this._skeletonJson = typeof a == "string" ? JSON.parse(a) : a;
              if (!this._uuid && a.skeleton) {
                this._uuid = a.skeleton.hash;
              }
            }
          },
          _atlasText: "",
          atlasText: {
            get: function () {
              return this._atlasText;
            },
            set: function (a) {
              this._atlasText = a;
              this.reset();
            }
          },
          atlas: {
            default: null,
            type: cc.TextAsset
          },
          textures: {
            default: [],
            type: [cc.Texture2D]
          },
          textureNames: {
            default: [],
            type: [cc.String]
          },
          scale: 1,
          _nativeAsset: {
            get: function () {
              return this._buffer;
            },
            set: function (a) {
              this._buffer = a.buffer || a;
              this.reset();
            },
            override: true
          }
        },
        statics: {
          preventDeferredLoadDependents: true
        },
        createNode: false,
        reset: function () {
          this._skeletonCache = null;
          this._atlasCache = null;
        },
        ensureTexturesLoaded: function (b, c) {
          var d = this.textures;
          var e = d.length;
          if (e != 0) {
            for (var f = 0, g = function () {
                if (++f >= e) {
                  if (b) {
                    b.call(c, true);
                  }
                  b = null;
                }
              }, h = 0; h < e; h++) {
              var i = d[h];
              if (i.loaded) {
                g();
              } else {
                i.once("load", g);
              }
            }
          } else {
            b.call(c, false);
          }
        },
        isTexturesLoaded: function () {
          for (var a = this.textures, b = a.length, c = 0; c < b; c++) {
            if (!a[c].loaded) {
              return false;
            }
          }
          return true;
        },
        getRuntimeData: function (a) {
          if (this._skeletonCache) {
            return this._skeletonCache;
          }
          if (!(this.textures && this.textures.length > 0) && this.textureNames && this.textureNames.length > 0) {
            return null;
          }
          var b = this._getAtlas(a);
          if (!b) {
            return null;
          }
          var c = new sp.spine.AtlasAttachmentLoader(b);
          var d = null;
          var e = null;
          if (this.skeletonJson) {
            e = new sp.spine.SkeletonJson(c);
            d = this.skeletonJson;
          } else {
            e = new sp.spine.SkeletonBinary(c);
            d = new Uint8Array(this._nativeAsset);
          }
          e.scale = this.scale;
          this._skeletonCache = e.readSkeletonData(d);
          b.dispose();
          return this._skeletonCache;
        },
        getSkinsEnum: false,
        getAnimsEnum: false,
        _getTexture: function (a) {
          for (var b = this.textureNames, c = 0; c < b.length; c++) {
            if (b[c] === a) {
              var d = this.textures[c];
              var e = new sp.SkeletonTexture({
                width: d.width,
                height: d.height
              });
              e.setRealTexture(d);
              return e;
            }
          }
          return null;
        },
        _getAtlas: function () {
          if (this._atlasCache) {
            return this._atlasCache;
          }
          var a = this.atlasText;
          if (!a && this.atlas) {
            a = this.atlas.text;
          }
          if (a) {
            return this._atlasCache = new sp.spine.TextureAtlas(a, this._getTexture.bind(this));
          } else {
            return null;
          }
        },
        destroy: function () {
          c.removeSkeleton(this._uuid);
          this._super();
        }
      });
      sp.SkeletonData = b.exports = d;
    }, {
      "./skeleton-cache": 322
    }],
    324: [function () {
      "use strict";
  
      sp.SkeletonTexture = cc.Class({
        name: "sp.SkeletonTexture",
        extends: sp.spine.Texture,
        _texture: null,
        _material: null,
        setRealTexture: function (a) {
          this._texture = a;
        },
        getRealTexture: function () {
          return this._texture;
        },
        setFilters: function (a, b) {
          if (this._texture) {
            this._texture.setFilters(a, b);
          }
        },
        setWraps: function (a, b) {
          if (this._texture) {
            this._texture.setWrapMode(a, b);
          }
        },
        dispose: function () {}
      });
    }, {}],
    325: [function (aa, t, e) {
      "use strict";
  
      e.__esModule = true;
      e.default = undefined;
      var i;
      var ba = (i = aa("../../cocos2d/core/renderer/assembler")) && i.__esModule ? i : {
        default: i
      };
      function ca(a, b) {
        return (ca = Object.setPrototypeOf || function (a, b) {
          a.__proto__ = b;
          return a;
        })(a, b);
      }
      var da;
      var ea;
      var fa;
      var ga;
      var ha;
      var ia;
      var ja;
      var ka;
      var la;
      var ma;
      var na;
      var oa;
      var r;
      var pa;
      var qa;
      var ra;
      var sa;
      var ta = aa("./Skeleton");
      var ua = aa("./lib/spine");
      var x = aa("../../cocos2d/core/renderer/render-flow");
      var b = aa("../../cocos2d/core/renderer/webgl/vertex-format");
      var C = b.vfmtPosUvColor;
      var R = b.vfmtPosUvTwoColor;
      var M = cc.gfx;
      var va = 0;
      var S = [0, 1, 2, 2, 3, 0];
      var O = cc.color(0, 0, 255, 255);
      var w = cc.color(255, 0, 0, 255);
      var L = cc.color(0, 255, 0, 255);
      var D = cc.color(255, 255, 0, 255);
      var N = null;
      var P = null;
      var wa = null;
      var xa = null;
      N = new ua.Color(1, 1, 1, 1);
      P = new ua.Color(1, 1, 1, 1);
      wa = new ua.Vector2();
      xa = new ua.Vector2();
      var ya;
      var za;
      var Aa;
      var Ba;
      var Ca;
      var Da;
      var Ea;
      var Fa;
      var Ga;
      var Ha;
      var Ia;
      var Ja;
      var Ka;
      var La;
      var Ma;
      var Na;
      var Oa;
      var Pa;
      var Qa;
      var Ra;
      var Sa;
      var Ta;
      var Ua;
      var Va;
      var Wa;
      var Xa;
      var Ya;
      var Za;
      var $a;
      var _a = 0;
      var ab = 0;
      var bb = 0;
      var cb = 0;
      var db = 0;
      var eb = 0;
      var fb = 0;
      function gb(a, b) {
        var d;
        var e;
        switch (b) {
          case ua.BlendMode.Additive:
            d = da ? cc.macro.ONE : cc.macro.SRC_ALPHA;
            e = cc.macro.ONE;
            break;
          case ua.BlendMode.Multiply:
            d = cc.macro.DST_COLOR;
            e = cc.macro.ONE_MINUS_SRC_ALPHA;
            break;
          case ua.BlendMode.Screen:
            d = cc.macro.ONE;
            e = cc.macro.ONE_MINUS_SRC_COLOR;
            break;
          case ua.BlendMode.Normal:
          default:
            d = da ? cc.macro.ONE : cc.macro.SRC_ALPHA;
            e = cc.macro.ONE_MINUS_SRC_ALPHA;
        }
        var f = !Va.enableBatch;
        var g = Va._materials[0];
        if (!g) {
          return null;
        }
        var h = a.getId() + d + e + ha + f;
        var j = Va._materialCache;
        var c = j[h];
        if (!c) {
          if (j.baseMaterial) {
            c = cc.MaterialVariant.create(g);
          } else {
            c = g;
            j.baseMaterial = g;
          }
          c.define("CC_USE_MODEL", f);
          c.define("USE_TINT", ha);
          c.setProperty("texture", a);
          c.setBlend(true, M.BLEND_FUNC_ADD, d, e, M.BLEND_FUNC_ADD, d, e);
          j[h] = c;
        }
        return c;
      }
      function hb(a) {
        Ra = a.fa * oa;
        La = la * (ea = da ? Ra / 255 : 1);
        Ma = ma * ea;
        Na = na * ea;
        Oa = a.fr * La;
        Pa = a.fg * Ma;
        Qa = a.fb * Na;
        r = (Ra << 24 >>> 0) + (Qa << 16) + (Pa << 8) + Oa;
        Sa = a.dr * La;
        Ta = a.dg * Ma;
        Ua = a.db * Na;
        pa = ((da ? 255 : 0) << 24 >>> 0) + (Ua << 16) + (Ta << 8) + Sa;
      }
      function ib(a) {
        return (a.a << 24 >>> 0) + (a.b << 16) + (a.g << 8) + a.r;
      }
      var jb = function (a) {
        var b;
        var c;
        function d() {
          return a.apply(this, arguments) || this;
        }
        c = a;
        (b = d).prototype = Object.create(c.prototype);
        b.prototype.constructor = b;
        ca(b, c);
        var f = d.prototype;
        f.updateRenderData = function (a) {
          if (!a.isAnimationCached()) {
            var b = a._skeleton;
            if (b) {
              b.updateWorldTransform();
            }
          }
        };
        f.fillVertices = function (a, g, e, h, i) {
          var j;
          var k = Wa._vData;
          var m = Wa._iData;
          var n = Wa._uintVData;
          N.a = e.a * g.a * a.a * oa * 255;
          ea = da ? N.a : 255;
          ya = la * g.r * a.r * ea;
          za = ma * g.g * a.g * ea;
          Aa = na * g.b * a.b * ea;
          N.r = ya * e.r;
          N.g = za * e.g;
          N.b = Aa * e.b;
          if (i.darkColor == null) {
            P.set(0, 0, 0, 1);
          } else {
            P.r = i.darkColor.r * ya;
            P.g = i.darkColor.g * za;
            P.b = i.darkColor.b * Aa;
          }
          P.a = da ? 255 : 0;
          if (h.isClipping()) {
            var o = k.subarray(bb + 2);
            h.clipTriangles(k.subarray(bb), _a, m.subarray(eb), db, o, N, P, ha, ra);
            var f = new Float32Array(h.clippedVertices);
            var d = h.clippedTriangles;
            db = d.length;
            _a = f.length / sa * ra;
            j = Wa.request(_a / ra, db);
            eb = j.indiceOffset;
            cb = j.vertexOffset;
            bb = j.byteOffset >> 2;
            k = Wa._vData;
            m = Wa._iData;
            n = Wa._uintVData;
            m.set(d, eb);
            if ($a) {
              for (var p = 0, q = f.length, t = bb; p < q; p += sa, t += ra) {
                wa.x = f[p];
                wa.y = f[p + 1];
                N.set(f[p + 2], f[p + 3], f[p + 4], f[p + 5]);
                xa.x = f[p + 6];
                xa.y = f[p + 7];
                if (ha) {
                  P.set(f[p + 8], f[p + 9], f[p + 10], f[p + 11]);
                } else {
                  P.set(0, 0, 0, 0);
                }
                $a.transform(wa, xa, N, P);
                k[t] = wa.x;
                k[t + 1] = wa.y;
                k[t + 2] = xa.x;
                k[t + 3] = xa.y;
                n[t + 4] = ib(N);
                if (ha) {
                  n[t + 5] = ib(P);
                }
              }
            } else {
              for (var v = 0, y = f.length, z = bb; v < y; v += sa, z += ra) {
                k[z] = f[v];
                k[z + 1] = f[v + 1];
                k[z + 2] = f[v + 6];
                k[z + 3] = f[v + 7];
                r = (f[v + 5] << 24 >>> 0) + (f[v + 4] << 16) + (f[v + 3] << 8) + f[v + 2];
                n[z + 4] = r;
                if (ha) {
                  pa = (f[v + 11] << 24 >>> 0) + (f[v + 10] << 16) + (f[v + 9] << 8) + f[v + 8];
                  n[z + 5] = pa;
                }
              }
            }
          } else if ($a) {
            for (var A = bb, B = bb + _a; A < B; A += ra) {
              wa.x = k[A];
              wa.y = k[A + 1];
              xa.x = k[A + 2];
              xa.y = k[A + 3];
              $a.transform(wa, xa, N, P);
              k[A] = wa.x;
              k[A + 1] = wa.y;
              k[A + 2] = xa.x;
              k[A + 3] = xa.y;
              n[A + 4] = ib(N);
              if (ha) {
                n[A + 5] = ib(P);
              }
            }
          } else {
            r = ib(N);
            pa = ib(P);
            for (var C = bb, D = bb + _a; C < D; C += ra) {
              n[C + 4] = r;
              if (ha) {
                n[C + 5] = pa;
              }
            }
          }
        };
        f.realTimeTraverse = function (c) {
          var d;
          var f;
          var h;
          var j;
          var l;
          var q;
          var t;
          var u;
          var A;
          var C;
          var E;
          var H;
          var J = Va._skeleton;
          var y = J.color;
          var K = Va._debugRenderer;
          var x = Va._clipper;
          var b = null;
          fa = Va._startSlotIndex;
          ga = Va._endSlotIndex;
          Ba = false;
          if (fa == -1) {
            Ba = true;
          }
          ia = Va.debugSlots;
          ja = Va.debugBones;
          ka = Va.debugMesh;
          if (K && (ja || ia || ka)) {
            K.clear();
            K.lineWidth = 2;
          }
          sa = ha ? 12 : 8;
          _a = 0;
          bb = 0;
          cb = 0;
          db = 0;
          eb = 0;
          for (var N = 0, P = J.drawOrder.length; N < P; N++) {
            if ((E = J.drawOrder[N]) != null && E.bone.active) {
              if (fa >= 0 && fa == E.data.index) {
                Ba = true;
              }
              if (Ba) {
                if (ga >= 0 && ga == E.data.index) {
                  Ba = false;
                }
                _a = 0;
                db = 0;
                if (h = E.getAttachment()) {
                  u = h instanceof ua.RegionAttachment;
                  A = h instanceof ua.MeshAttachment;
                  if (h instanceof ua.ClippingAttachment) {
                    x.clipStart(E, h);
                  } else if (u || A) {
                    if (b = gb(h.region.texture._texture, E.data.blendMode)) {
                      if (Ca || b.getHash() !== Xa.material.getHash()) {
                        Ca = false;
                        Xa._flush();
                        Xa.node = Ya;
                        Xa.material = b;
                      }
                      if (u) {
                        t = S;
                        _a = ra * 4;
                        db = 6;
                        C = Wa.request(4, 6);
                        eb = C.indiceOffset;
                        cb = C.vertexOffset;
                        bb = C.byteOffset >> 2;
                        d = Wa._vData;
                        f = Wa._iData;
                        h.computeWorldVertices(E.bone, d, bb, ra);
                        if (K && ia) {
                          K.strokeColor = O;
                          K.moveTo(d[bb], d[bb + 1]);
                          for (var M = bb + ra, Q = bb + _a; M < Q; M += ra) {
                            K.lineTo(d[M], d[M + 1]);
                          }
                          K.close();
                          K.stroke();
                        }
                      } else if (A && (t = h.triangles, _a = (h.worldVerticesLength >> 1) * ra, db = t.length, C = Wa.request(_a / ra, db), eb = C.indiceOffset, cb = C.vertexOffset, bb = C.byteOffset >> 2, d = Wa._vData, f = Wa._iData, h.computeWorldVertices(E, 0, h.worldVerticesLength, d, bb, ra), K && ka)) {
                        K.strokeColor = D;
                        for (var T = 0, W = t.length; T < W; T += 3) {
                          var X = t[T] * ra + bb;
                          var Y = t[T + 1] * ra + bb;
                          var Z = t[T + 2] * ra + bb;
                          K.moveTo(d[X], d[X + 1]);
                          K.lineTo(d[Y], d[Y + 1]);
                          K.lineTo(d[Z], d[Z + 1]);
                          K.close();
                          K.stroke();
                        }
                      }
                      if (_a != 0 && db != 0) {
                        f.set(t, eb);
                        q = h.uvs;
                        for (var aa = bb, ba = bb + _a, ca = 0; aa < ba; aa += ra, ca += 2) {
                          d[aa + 2] = q[ca];
                          d[aa + 3] = q[ca + 1];
                        }
                        j = h.color;
                        l = E.color;
                        this.fillVertices(y, j, l, x, E);
                        d = Wa._vData;
                        f = Wa._iData;
                        if (db > 0) {
                          for (var da = eb, ea = eb + db; da < ea; da++) {
                            f[da] += cb;
                          }
                          if (c) {
                            H = c.m;
                            Fa = H[0];
                            Ga = H[4];
                            Ha = H[12];
                            Ia = H[1];
                            Ja = H[5];
                            Ka = H[13];
                            for (var la = bb, ma = bb + _a; la < ma; la += ra) {
                              Da = d[la];
                              Ea = d[la + 1];
                              d[la] = Da * Fa + Ea * Ga + Ha;
                              d[la + 1] = Da * Ia + Ea * Ja + Ka;
                            }
                          }
                          Wa.adjust(_a / ra, db);
                        }
                        x.clipEndWithSlot(E);
                      } else {
                        x.clipEndWithSlot(E);
                      }
                    } else {
                      x.clipEndWithSlot(E);
                    }
                  } else {
                    x.clipEndWithSlot(E);
                  }
                } else {
                  x.clipEndWithSlot(E);
                }
              } else {
                x.clipEndWithSlot(E);
              }
            }
          }
          x.clipEnd();
          if (K && ja) {
            var na;
            K.strokeColor = w;
            K.fillColor = O;
            for (var oa = 0, pa = J.bones.length; oa < pa; oa++) {
              var qa = (na = J.bones[oa]).data.length * na.a + na.worldX;
              var ta = na.data.length * na.c + na.worldY;
              K.moveTo(na.worldX, na.worldY);
              K.lineTo(qa, ta);
              K.stroke();
              K.circle(na.worldX, na.worldY, Math.PI * 1.5);
              K.fill();
              if (oa === 0) {
                K.fillColor = L;
              }
            }
          }
        };
        f.cacheTraverse = function (j) {
          var k = Va._curFrame;
          if (k) {
            var e = k.segments;
            if (e.length != 0) {
              var i;
              var m;
              var q;
              var t;
              var y;
              var z;
              var B = k.vertices;
              var l = k.indices;
              var h = 0;
              var F = 0;
              var G = 0;
              if (j) {
                z = j.m;
                Fa = z[0];
                Ia = z[1];
                Ga = z[4];
                Ja = z[5];
                Ha = z[12];
                Ka = z[13];
              }
              var H = va & 16;
              var I = H && Fa === 1 && Ia === 0 && Ga === 0 && Ja === 1;
              var p = 0;
              var J = k.colors;
              var g = J[p++];
              var K = g.vfOffset;
              hb(g);
              for (var N = 0, Q = e.length; N < Q; N++) {
                var x = e[N];
                if (t = gb(x.tex, x.blendMode)) {
                  if (Ca || t.getHash() !== Xa.material.getHash()) {
                    Ca = false;
                    Xa._flush();
                    Xa.node = Ya;
                    Xa.material = t;
                  }
                  ab = x.vertexCount;
                  db = x.indexCount;
                  y = Wa.request(ab, db);
                  eb = y.indiceOffset;
                  cb = y.vertexOffset;
                  fb = y.byteOffset >> 2;
                  i = Wa._vData;
                  m = Wa._iData;
                  q = Wa._uintVData;
                  for (var U = eb, V = eb + db; U < V; U++) {
                    m[U] = cb + l[F++];
                  }
                  G = x.vfCount;
                  i.set(B.subarray(h, h + G), fb);
                  h += G;
                  if (I) {
                    for (var W = fb, X = fb + G; W < X; W += 6) {
                      i[W] += Ha;
                      i[W + 1] += Ka;
                    }
                  } else if (H) {
                    for (var Y = fb, Z = fb + G; Y < Z; Y += 6) {
                      Da = i[Y];
                      Ea = i[Y + 1];
                      i[Y] = Da * Fa + Ea * Ga + Ha;
                      i[Y + 1] = Da * Ia + Ea * Ja + Ka;
                    }
                  }
                  Wa.adjust(ab, db);
                  if (Za) {
                    for (var $ = h - G, _ = fb + 4, aa = fb + 4 + G; _ < aa; _ += 6, $ += 6) {
                      if ($ >= K) {
                        hb(g = J[p++]);
                        K = g.vfOffset;
                      }
                      q[_] = r;
                      q[_ + 1] = pa;
                    }
                  }
                }
              }
            }
          }
        };
        f.fillBuffers = function (a, b) {
          var c = a.node;
          c._renderFlag |= x.FLAG_UPDATE_RENDER_DATA;
          if (a._skeleton) {
            var d = c._color;
            la = d.r / 255;
            ma = d.g / 255;
            na = d.b / 255;
            oa = d.a / 255;
            ha = a.useTint || a.isAnimationCached();
            qa = ha ? R : C;
            ra = ha ? 6 : 5;
            Ya = a.node;
            Wa = b.getBuffer("spine", qa);
            Xa = b;
            Va = a;
            Ca = true;
            da = a.premultipliedAlpha;
            ea = 1;
            va = 0;
            Za = false;
            $a = a._effectDelegate && a._effectDelegate._vertexEffect;
            if (d._val !== 4294967295 || da) {
              Za = true;
            }
            if (ha) {
              va |= 1;
            }
            var e = undefined;
            if (Va.enableBatch) {
              e = Ya._worldMatrix;
              Ca = false;
              va |= 16;
            }
            if (a.isAnimationCached()) {
              this.cacheTraverse(e);
            } else {
              if ($a) {
                $a.begin(a._skeleton);
              }
              this.realTimeTraverse(e);
              if ($a) {
                $a.end();
              }
            }
            b.worldMatDirty++;
            a.attachUtil._syncAttachedNode();
            Ya = undefined;
            Wa = undefined;
            Xa = undefined;
            Va = undefined;
            $a = null;
          }
        };
        f.postFillBuffers = function (a, b) {
          b.worldMatDirty--;
        };
        return d;
      }(ba.default);
      e.default = jb;
      ba.default.register(ta, jb);
      t.exports = e.default;
    }, {
      "../../cocos2d/core/renderer/assembler": 190,
      "../../cocos2d/core/renderer/render-flow": 194,
      "../../cocos2d/core/renderer/webgl/vertex-format": 225,
      "./Skeleton": 319,
      "./lib/spine": 321
    }],
    326: [function (a, b) {
      "use strict";
  
      function c() {
        this.start = null;
        this.end = null;
        this.complete = null;
        this.event = null;
        this.interrupt = null;
        this.dispose = null;
      }
      c.getListeners = function (a) {
        if (!a.listener) {
          a.listener = new c();
        }
        return a.listener;
      };
      b.exports = c;
    }, {}],
    327: [function (a, b) {
      "use strict";
  
      var c = a("./lib/spine");
      sp.VertexEffectDelegate = cc.Class({
        name: "sp.VertexEffectDelegate",
        ctor: function () {
          this._vertexEffect = null;
          this._interpolation = null;
          this._effectType = "none";
        },
        clear: function () {
          this._vertexEffect = null;
          this._interpolation = null;
          this._effectType = "none";
        },
        initJitter: function (a, b) {
          this._effectType = "jitter";
          this._vertexEffect = new c.JitterEffect(a, b);
          return this._vertexEffect;
        },
        initSwirlWithPow: function (a, b) {
          this._interpolation = new c.Pow(b);
          this._vertexEffect = new c.SwirlEffect(a, this._interpolation);
          return this._vertexEffect;
        },
        initSwirlWithPowOut: function (a, b) {
          this._interpolation = new c.PowOut(b);
          this._vertexEffect = new c.SwirlEffect(a, this._interpolation);
          return this._vertexEffect;
        },
        getJitterVertexEffect: function () {
          return this._vertexEffect;
        },
        getSwirlVertexEffect: function () {
          return this._vertexEffect;
        },
        getVertexEffect: function () {
          return this._vertexEffect;
        },
        getEffectType: function () {
          return this._effectType;
        }
      });
      b.exports = sp.VertexEffectDelegate;
    }, {
      "./lib/spine": 321
    }],
    328: [function (a, b) {
      "use strict";
  
      var c = typeof window == "undefined" ? global : window;
      c.cc = c.cc || {};
      cc.internal = cc.internal || {};
      a("./predefine");
      a("./polyfill/typescript");
      a("./cocos2d/core/predefine");
      a("./cocos2d");
      a("./extends");
      b.exports = c.cc;
    }, {
      "./cocos2d": 264,
      "./cocos2d/core/predefine": 187,
      "./extends": 316,
      "./package": undefined,
      "./polyfill/typescript": undefined,
      "./predefine": 329
    }],
    329: [function () {
      "use strict";
  
      var a = typeof window == "undefined" ? global : window;
      function b(b, c) {
        if (a[b] === undefined) {
          Object.defineProperty(a, b, {
            get: function () {
              return c;
            }
          });
        }
      }
      function c(b) {
        return typeof a[b] == "object";
      }
      (function (b, c) {
        if (a[b] === undefined) {
          a[b] = c;
        }
      })("CC_DEBUG", true);
      a.CC_BUILD = true;
      a.CC_DEV = false;
      a.CC_DEBUG = false;
      a.CC_JSB = false;
      a.CC_NATIVERENDERER = false;
      a.CC_SUPPORT_JIT = true;
      a.CC_PHYSICS_BUILTIN = false;
      a.CC_PHYSICS_CANNON = false;
      a.CC_EDITOR = false;
      a.CC_PREVIEW = false;
      a.CC_TEST = false;
      a.CC_RUNTIME = false;
      a.CC_JSB = false;
      var d = !(!c("wx") || !wx.getSharedCanvas);
      var e = !(!c("wx") || !wx.getSystemInfoSync && !wx.getSharedCanvas);
      var f = c("bk");
      b("CC_WECHATGAMESUB", d);
      b("CC_WECHATGAME", e);
      b("CC_QQPLAY", f);
      a.CocosEngine = cc.ENGINE_VERSION = "5.2.0-0";
      a.PG_Engine = "5.2.0-0";
    }, {}]
  }, {}, [328]);