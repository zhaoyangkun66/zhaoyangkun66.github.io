(function () {
    'use strict';

    window.__require = function d(a, b, c) {
        function f(h, i) {
            if (!b[h]) {
                if (!a[h]) {
                    var k = h.split("/");
                    k = k[k.length - 1];
                    if (!a[k]) {
                        var l = typeof __require == "function" && __require;
                        if (!i && l) {
                            return l(k, true);
                        }
                        if (g) {
                            return g(k, true);
                        }
                        throw Error("Cannot find module '" + h + "'");
                    }
                    h = k;
                }
                var m = b[h] = {
                    exports: {}
                };
                a[h][0].call(m.exports, function (b) {
                    return f(a[h][1][b] || b);
                }, m, m.exports, d, a, b, c);
            }
            return b[h].exports;
        }
        for (var g = typeof __require == "function" && __require, h = 0; h < c.length; h++) {
            f(c[h]);
        }
        return f;
    }({
        "APIClient.spec": [function (a, b, c) {
            'use strict';

            var d = {
                value: true
            };
            if (!cc._RF.push(b, "8c9a3eRJFFM1bXVQ+/Kcvdf", "APIClient.spec")) {
                Object.defineProperty(c, "__esModule", d);
                c.onRequestSent = c.onRequestReceived = undefined;
                c.onRequestReceived = function (a, b) {
                    var c = System.get("automation") && System.get("automation").GameData;
                    var d = {
                        error: a,
                        result: b
                    };
                    if (c) {
                        c.emit("RequestReceived", d);
                    }
                };
                c.onRequestSent = function () {
                    var a = System.get("automation") && System.get("automation").GameData;
                    if (a) {
                        a.emit("RequestSent");
                    }
                };
                cc._RF.pop();
            }
        }, {}],
        APIClient: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "d34ca2GoqVBUbdLTDYW//l7", "APIClient")) {
                var c = System.get("bvframework").APIClient;
                b.exports.default = c;
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        AdapterEventEmitter: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "4a843d9tZpBC5Aag4RGjJxr", "AdapterEventEmitter")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("Utils");
                a("AudioAdapterConstant");
                var f = function () {
                    function a() {
                        this.t = Object.create(null);
                        this.i = e.deferCallback(this);
                    }
                    a.prototype.once = function (a, b, c) {
                        this.on(a, b, c, true);
                    };
                    a.prototype.emit = function (a, b, c, d) {
                        if (d === undefined) {
                            d = false;
                        }
                        var f = this.t;
                        var g = f[a];
                        if (!g) {
                            g = f[a] = [];
                        }
                        for (var h = 0, i = function (f) {
                            var i = g[f];
                            if (!(i.id && i.id !== b)) {
                                h = f;
                                j.i(function () {
                                    var g = i.fn;
                                    if (g !== e.emptyFunc) {
                                        if (i.once) {
                                            this.off(a, g, i.id);
                                        }
                                        g(b, c);
                                    }
                                    if (f === h && b !== undefined && d) {
                                        this.off(b);
                                    }
                                });
                            }
                        }, j = this, k = 0, l = g.length; k < l; k++) {
                            i(k);
                        }
                    };
                    a.prototype.on = function (b, c, d, e) {
                        var f = this.t;
                        var g = f[b];
                        if (!g) {
                            g = f[b] = [];
                        }
                        for (var h = 0, i = g.length; h < i; h++) {
                            var j = g[h];
                            if (j.fn === c) {
                                if (j.id === d) {
                                    return;
                                }
                                if (!d || !j.id) {
                                    return;
                                }
                            }
                        }
                        var k = {
                            id: d,
                            fn: c,
                            once: !!e
                        };
                        g.push(k);
                    };
                    a.prototype.off = function (a, b, c) {
                        if (a !== undefined) {
                            switch (typeof a) {
                                case "number":
                                    return this.o(undefined, a);
                                case "function":
                                    return this.o(a, b);
                                default:
                                    if (typeof b == "number") {
                                        c = b;
                                        b = undefined;
                                    }
                                    return this.h(a, b, c);
                            }
                        } else {
                            for (var d in this.t) {
                                this.t[d].length = 0;
                            }
                        }
                    };
                    a.prototype.h = function (a, b, c) {
                        var d = this.t[a];
                        if (d) {
                            if (b !== undefined || c !== undefined) {
                                this.t[a] = d.filter(function (a) {
                                    return g(a, b, c);
                                });
                            } else {
                                d.length = 0;
                            }
                        }
                    };
                    a.prototype.o = function (a, b) {
                        for (var c in this.t) {
                            this.t[c] = this.t[c].filter(function (c) {
                                return g(c, a, b);
                            });
                        }
                    };
                    return a;
                }();
                c.default = f;
                cc._RF.pop();
            }
            function g(a, b, c) {
                return !!(c && c !== a.id || b && b !== a.fn) || (a.fn = e.emptyFunc, false);
            }
        }, {
            AudioAdapterConstant: "AudioAdapterConstant",
            Utils: "Utils"
        }],
        AnalyticsHelper: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "d1d41tYvBBPX6KJU88DFlLq", "AnalyticsHelper")) {
                var c = System.get("bvframework").AnalyticsHelper;
                for (var d in c) {
                    b.exports[d] = c[d];
                }
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        AngpaoController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "ece0aQbOgFN+bkuMghw2lwd", "AngpaoController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("Utils");
                var f = a("GConstants");
                var h = a("GeneralAudioConstant");
                var g = a("BGMHandler");
                var i = a("SlotProperties");
                var j = a("SymbolImageHandler");
                var l = a("AudioManager");
                var m = cc._decorator;
                var n = m.ccclass;
                var o = m.property;
                var p = cc.v2(0, 570);
                var q = cc.v2(-37, 680);
                var r = cc.v2(-250, 790);
                var s = [cc.v2(-320, 500), cc.v2(0, 500), cc.v2(320, 500)];
                var t = [cc.v2(-320, 1000), cc.v2(0, 1000), cc.v2(320, 1000)];
                var k = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.angpaoNode = undefined;
                        b.openAngpaoNode = undefined;
                        b.multHolder = undefined;
                        b.shakeNode = undefined;
                        b.shine = undefined;
                        b.symbolNode = undefined;
                        b.sparkle = undefined;
                        b.circleSparkle = undefined;
                        b.multiplierNode = undefined;
                        b.multiplierShine = undefined;
                        b.particle = undefined;
                        b.spinShine = undefined;
                        b.u = [];
                        b.l = undefined;
                        b._ = undefined;
                        b.flyParticle = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.init = function (a) {
                        this._ = new cc.NodePool();
                        for (var b = 0; b < 3; b++) {
                            var c = cc.instantiate(this.flyParticle);
                            this._.put(c);
                        }
                        this.l = a;
                    };
                    b.prototype.playRespin = function (a, b, c) {
                        var d = this;
                        var e = h.GENERAL_AUDIO.featureAngpauFly.key;
                        l.stopAudioIfPlaying(e);
                        l.playAudioIfNotPlaying(e);
                        this.symbolNode.getComponent(cc.Sprite).spriteFrame = j.symbolImageHandler.symbolImages[a];
                        this.node.stopAllActions();
                        this.node.runAction(cc.sequence(cc.targetedAction(this.angpaoNode, cc.sequence(cc.spawn(cc.delayTime(0.4), cc.fadeIn(0.2)), cc.spawn(cc.bezierTo(0.5, [r, q, p]), cc.sequence(cc.delayTime(0.25), cc.scaleTo(0.25, 1.87), cc.callFunc(this.m.bind(this))), cc.rotateTo(0.3, 0)), cc.scaleTo(0.25, 1.7), cc.delayTime(0.25), cc.callFunc(this.p.bind(this)), cc.scaleTo(0.1, 1.7, 2.15), cc.callFunc(function () {
                            var a = h.GENERAL_AUDIO.featureAngpauReveal.key;
                            l.stopAudioIfPlaying(a);
                            l.playAudioIfNotPlaying(a);
                            g.crossFadePlayNormalBGMtoRespin();
                            d.angpaoNode.rotation = 0;
                            d.openAngpaoNode.active = true;
                            d.shine.node.runAction(cc.fadeIn(0.3));
                            d.symbolNode.opacity = 40;
                            d.sparkle.play();
                            d.shine.play();
                        }))), cc.targetedAction(this.symbolNode, cc.spawn(cc.fadeTo(0.1, 255), cc.sequence(cc.scaleTo(0.125, 1.03), cc.scaleTo(0.375, 0.7)), cc.targetedAction(this.angpaoNode, cc.sequence(cc.scaleTo(0.25, 1), cc.fadeOut(0.3))), cc.callFunc(function () {
                            d.spinShine.runAction(cc.rotateBy(20, 360).repeatForever());
                        }), cc.sequence(cc.moveTo(0.125, cc.v2(0, 920)), cc.moveTo(0.375, cc.v2(0, 570)).easing(cc.easeCircleActionIn()), cc.moveTo(0.125, cc.v2(0, 580)), cc.moveTo(0.2, cc.v2(0, 570))), cc.sequence(cc.delayTime(0.5), cc.callFunc(function () {
                            d.circleSparkle.play();
                        })))), cc.delayTime(0.6), cc.spawn(cc.sequence(cc.delayTime(0.15), cc.callFunc(function () {
                            var a = h.GENERAL_AUDIO.featureMultiAppear.key;
                            l.stopAudioIfPlaying(a);
                            l.playAudioIfNotPlaying(a);
                        }), cc.callFunc(this.S.bind(this, b))), cc.targetedAction(this.symbolNode, cc.spawn(cc.scaleTo(0.3, 0.7).easing(cc.easeCubicActionInOut()), cc.fadeOut(0.3))), cc.targetedAction(this.multiplierNode, cc.spawn(cc.callFunc(function () {
                            d.multiplierShine.play();
                            d.particle.play();
                            d.multiplierNode.parent = d.l;
                        }), cc.sequence(cc.spawn(cc.scaleTo(0.5, 2.6).easing(cc.easeCubicActionInOut()), cc.fadeIn(0.2)), cc.scaleTo(0.5, 2.5), cc.moveTo(0.5, cc.v2(0, 525)).easing(cc.easeCubicActionIn()))))), cc.callFunc(function () {
                            if (c) {
                                c();
                            }
                        })));
                    };
                    b.prototype.stopRespin = function (a) {
                        var b = this;
                        this.multiplierNode.stopAllActions();
                        this.spinShine.stopAllActions();
                        this.multiplierNode.runAction(cc.fadeOut(0.3));
                        this.spinShine.runAction(cc.tintTo(0.3, f.BLACK));
                        this.multiplierShine.stop();
                        this.multiplierShine.setCurrentTime(0);
                        this.particle.stop();
                        this.particle.setCurrentTime(0);
                        this.particle.node.getComponent(cc.Sprite).spriteFrame = undefined;
                        e.delayCallback(0.3)(function () {
                            if (a) {
                                a();
                            }
                            b.multiplierNode.parent = b.multHolder;
                            b.reset();
                        });
                    };
                    b.prototype.reset = function () {
                        var a = this;
                        this.u.forEach(function (b) {
                            b.stopAllActions();
                            b.children[0].opacity = 255;
                            a._.put(b);
                        });
                        this.u = [];
                        this.node.stopAllActions();
                        this.angpaoNode.position = r;
                        this.angpaoNode.opacity = 0;
                        this.angpaoNode.scale = 0.5;
                        this.angpaoNode.rotation = -30;
                        this.openAngpaoNode.active = false;
                        this.shine.node.opacity = 0;
                        this.shine.node.stopAllActions();
                        this.sparkle.stop();
                        this.sparkle.setCurrentTime(0);
                        this.sparkle.node.getComponent(cc.Sprite).spriteFrame = undefined;
                        this.shine.stop();
                        this.shine.setCurrentTime(0);
                        this.shine.node.getComponent(cc.Sprite).spriteFrame = undefined;
                        this.symbolNode.position = cc.v3(0, 900);
                        this.symbolNode.scale = 0.7;
                        this.symbolNode.opacity = 0;
                        this.spinShine.color = f.BLACK;
                        this.spinShine.stopAllActions();
                        this.circleSparkle.stop();
                        this.circleSparkle.setCurrentTime(0);
                        this.circleSparkle.node.getComponent(cc.Sprite).spriteFrame = 0;
                        this.circleSparkle.stop();
                        this.circleSparkle.setCurrentTime(0);
                        this.circleSparkle.node.getComponent(cc.Sprite).spriteFrame = 0;
                        this.multiplierShine.stop();
                        this.multiplierShine.setCurrentTime(0);
                        this.particle.stop();
                        this.particle.setCurrentTime(0);
                        this.particle.node.getComponent(cc.Sprite).spriteFrame = 0;
                        this.multiplierNode.scale = 1.5;
                        this.multiplierNode.opacity = 0;
                        this.multiplierNode.parent = this.multHolder;
                        this.multiplierNode.position = cc.v3(0, 570);
                    };
                    b.prototype.S = function (a) {
                        for (var b = this, c = 0; c < 3; c++) {
                            this.u.push(this.C());
                        }
                        var d = 0;
                        function e() {
                            if (++d >= 3) {
                                b.u.forEach(function (a) {
                                    a.stopAllActions();
                                    a.getComponent(cc.ParticleSystem).stopSystem();
                                    a.children[0].runAction(cc.fadeOut(0.5));
                                });
                            }
                            if (a) {
                                a();
                            }
                        }
                        this.u.forEach(function (a, c) {
                            a.parent = b.node;
                            a.getComponent(cc.ParticleSystem).resetSystem();
                            a.position = cc.v3(0, 570);
                            a.runAction(cc.sequence(cc.bezierTo(0.4, [a.position, t[c], s[c]]), cc.callFunc(e)));
                        });
                    };
                    b.prototype.C = function () {
                        if (this._.size() > 0) {
                            return this._.get();
                        } else {
                            return cc.instantiate(this.flyParticle);
                        }
                    };
                    b.prototype.m = function () {
                        this.shakeNode.stopAllActions();
                        this.shakeNode.runAction(cc.repeatForever(i.createSymbolShake()));
                    };
                    b.prototype.p = function () {
                        this.shakeNode.stopAllActions();
                        this.shakeNode.position = cc.v3();
                    };
                    b.prototype.shake10 = function () {
                        var a = this;
                        var b = (Math.floor(Math.random()) * 100 + 30) * 0.001;
                        this.multiplierNode.stopAllActions();
                        this.multiplierNode.runAction(cc.sequence(cc.moveBy(b, cc.v2(-1.5, 0)), cc.moveBy(b, cc.v2(4, 1.5)), cc.moveBy(b, cc.v2(-1, -4)), cc.moveBy(b, cc.v2(-2, 4.5)), cc.moveBy(b, cc.v2(4.5, -2)), cc.moveBy(b, cc.v2(-4.5, -1.5)), cc.moveBy(b, cc.v2(-1, 2.5)), cc.moveBy(b, cc.v2(3, -1)), cc.moveBy(b, cc.v2(-1.5, 0)), cc.moveBy(b, cc.v2(4, 1.5)), cc.moveBy(b, cc.v2(-1, -4)), cc.moveBy(b, cc.v2(-2, 4.5)), cc.moveBy(b, cc.v2(4.5, -2)), cc.moveBy(b, cc.v2(-4.5, -1.5)), cc.moveBy(b, cc.v2(-1, 2.5)), cc.moveBy(b, cc.v2(3, -1)), cc.callFunc(function () {
                            a.multiplierNode.position = cc.v3(0, 525);
                        })));
                    };
                    b.prototype.win10 = function () {
                        var a = (Math.floor(Math.random()) * 100 + 30) * 0.001;
                        this.multiplierNode.runAction(cc.sequence(cc.moveBy(a, cc.v2(-8.5, 0)), cc.moveBy(a, cc.v2(11, 1.5)), cc.moveBy(a, cc.v2(-7, -4)), cc.moveBy(a, cc.v2(-9, 4.5)), cc.moveBy(a, cc.v2(10, -2)), cc.moveBy(a, cc.v2(-10, -1.5)), cc.moveBy(a, cc.v2(-1, 2.5)), cc.moveBy(a, cc.v2(8.5, -1)), cc.moveBy(a, cc.v2(10, -2)), cc.moveBy(a, cc.v2(-10, -1.5)), cc.moveBy(a, cc.v2(-1, 2.5)), cc.moveBy(a, cc.v2(8.5, -1)), cc.spawn(cc.sequence(cc.moveTo(0.15, cc.v2(0, 640)).easing(cc.easeCubicActionInOut()), cc.moveTo(0.15, cc.v2(0, 600))), cc.sequence(cc.scaleTo(0.15, 4), cc.scaleTo(0.15, 3.5)))));
                    };
                    b.prototype.hide10 = function () {
                        this.multiplierNode.opacity = 0;
                    };
                    b.prototype.setupToRespinState = function () {
                        this.multiplierNode.scale = 2.5;
                        this.multiplierNode.opacity = 255;
                        this.multiplierNode.parent = this.l;
                        this.multiplierNode.position = cc.v3(0, 525);
                        this.multiplierShine.play();
                        this.spinShine.color = f.WHITE;
                        this.spinShine.runAction(cc.rotateBy(20, 360).repeatForever());
                        this.particle.play();
                    };
                    b.prototype.setupToNormalState = function () {
                        this.reset();
                    };
                    __decorate([o(cc.Node)], b.prototype, "angpaoNode", undefined);
                    __decorate([o(cc.Node)], b.prototype, "openAngpaoNode", undefined);
                    __decorate([o(cc.Node)], b.prototype, "multHolder", undefined);
                    __decorate([o(cc.Node)], b.prototype, "shakeNode", undefined);
                    __decorate([o(cc.Animation)], b.prototype, "shine", undefined);
                    __decorate([o(cc.Node)], b.prototype, "symbolNode", undefined);
                    __decorate([o(cc.Animation)], b.prototype, "sparkle", undefined);
                    __decorate([o(cc.Animation)], b.prototype, "circleSparkle", undefined);
                    __decorate([o(cc.Node)], b.prototype, "multiplierNode", undefined);
                    __decorate([o(cc.Animation)], b.prototype, "multiplierShine", undefined);
                    __decorate([o(cc.Animation)], b.prototype, "particle", undefined);
                    __decorate([o(cc.Node)], b.prototype, "spinShine", undefined);
                    __decorate([o(cc.Prefab)], b.prototype, "flyParticle", undefined);
                    return __decorate([n], b);
                }(cc.Component);
                c.default = k;
                cc._RF.pop();
            }
        }, {
            AudioManager: "AudioManager",
            BGMHandler: "BGMHandler",
            GConstants: "GConstants",
            GeneralAudioConstant: "GeneralAudioConstant",
            SlotProperties: "SlotProperties",
            SymbolImageHandler: "SymbolImageHandler",
            Utils: "Utils"
        }],
        AnimParticleSystemPoolHandler: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "90167wb5w5JpKAkqWQq6cj8", "AnimParticleSystemPoolHandler")) {
                c.__esModule = true;
                c.default = undefined;
                var d = cc.Class({
                    extends: cc.Component,
                    unuse: function () {
                        var a = this.node.getComponent(cc.Animation);
                        if (a) {
                            a.stop();
                        }
                    }
                });
                c.default = d;
                b.exports = c.default;
                cc._RF.pop();
            }
        }, {}],
        AnimParticleSystemUtils: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "cbd06HrkTNFtbM/q+8lJvnc", "AnimParticleSystemUtils")) {
                c.__esModule = true;
                c.getAccelerationDistance = function (a, b) {
                    return a * 0.5 * b * b;
                };
                c.getRandomFromRange = function (a, b) {
                    return a + b * (Math.random() - 0.5) * 2;
                };
                cc._RF.pop();
            }
        }, {}],
        AnimParticleSystem: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "3142aQR/shASo2uVaU35yUL", "AnimParticleSystem")) {
                c.__esModule = true;
                c.default = undefined;
                var d = a("AnimParticleSystemUtils");
                var e = cc.Enum({
                    LINEAR: 0,
                    GRAVITY: 1
                });
                var f = [undefined, {
                    proto: cc.easeIn,
                    needParam: true
                }, {
                        proto: cc.easeOut,
                        needParam: true
                    }, {
                        proto: cc.easeInOut,
                        needParam: true
                    }, {
                        proto: cc.easeSineIn
                    }, {
                        proto: cc.easeSineOut
                    }, {
                        proto: cc.easeSineInOut
                    }, {
                        proto: cc.easeCubicActionIn
                    }, {
                        proto: cc.easeCubicActionOut
                    }, {
                        proto: cc.easeCubicActionInOut
                    }, {
                        proto: cc.easeQuinticActionIn
                    }, {
                        proto: cc.easeQuinticActionOut
                    }, {
                        proto: cc.easeQuinticActionInOut
                    }, {
                        proto: cc.easeCircleActionIn
                    }, {
                        proto: cc.easeCircleActionOut
                    }, {
                        proto: cc.easeCircleActionInOut
                    }, {
                        proto: cc.easeElasticIn,
                        needParam: true
                    }, {
                        proto: cc.easeElasticOut,
                        needParam: true
                    }, {
                        proto: cc.easeElasticInOut,
                        needParam: true
                    }, {
                        proto: cc.easeQuadraticActionIn
                    }, {
                        proto: cc.easeQuadraticActionOut
                    }, {
                        proto: cc.easeQuadraticActionInOut
                    }, {
                        proto: cc.easeQuarticActionIn
                    }, {
                        proto: cc.easeQuarticActionOut
                    }, {
                        proto: cc.easeQuarticActionInOut
                    }, {
                        proto: cc.easeExponentialIn
                    }, {
                        proto: cc.easeExponentialOut
                    }, {
                        proto: cc.easeExponentialInOut
                    }, {
                        proto: cc.easeBackIn
                    }, {
                        proto: cc.easeBackOut
                    }, {
                        proto: cc.easeBackInOut
                    }, {
                        proto: cc.easeBounceIn
                    }, {
                        proto: cc.easeBounceOut
                    }, {
                        proto: cc.easeBounceInOut
                    }];
                var g = cc.Enum({
                    None: 0,
                    EaseIn: 1,
                    EaseOut: 2,
                    EaseInOut: 3,
                    EaseSineIn: 4,
                    EaseSineOut: 5,
                    EaseSineInOut: 6,
                    EaseCubicActionIn: 7,
                    EaseCubicActionOut: 8,
                    EaseCubicActionInOut: 9,
                    EaseQuinticActionIn: 10,
                    EaseQuinticActionOut: 11,
                    EaseQuinticActionInOut: 12,
                    EaseCircleActionIn: 13,
                    EaseCircleActionOut: 14,
                    EaseCircleActionInOut: 15,
                    EaseElasticIn: 16,
                    EaseElasticOut: 17,
                    EaseElasticInOut: 18,
                    EaseQuadraticActionIn: 19,
                    EaseQuadraticActionOut: 20,
                    EaseQuadraticActionInOut: 21,
                    EaseQuarticActionIn: 22,
                    EaseQuarticActionOut: 23,
                    EaseQuarticActionInOut: 24,
                    EaseExponentialIn: 25,
                    EaseExponentialOut: 26,
                    EaseExponentialInOut: 27,
                    EaseBackIn: 28,
                    EaseBackOut: 29,
                    EaseBackInOut: 30,
                    EaseBounceIn: 31,
                    EaseBounceOut: 32,
                    EaseBounceInOut: 33
                });
                var h = false;
                var i = cc.Class({
                    extends: cc.Component,
                    properties: {
                        particlePrefab: {
                            type: cc.Prefab,
                            tooltip: false,
                            default: undefined
                        },
                        duration: {
                            type: cc.Float,
                            tooltip: false,
                            default: -1
                        },
                        emissionRate: {
                            type: cc.Float,
                            tooltip: false,
                            default: 20,
                            min: 0.1
                        },
                        life: {
                            type: cc.Float,
                            tooltip: false,
                            default: 1,
                            min: 0.1
                        },
                        lifeVar: {
                            type: cc.Float,
                            tooltip: false,
                            default: 0
                        },
                        particleCount: {
                            type: cc.Integer,
                            tooltip: false,
                            default: 10,
                            min: 1
                        },
                        particleMovementEasing: {
                            type: g,
                            tooltip: false,
                            default: g.None
                        },
                        particleMovementParam: {
                            visible: function () {
                                var a;
                                return ((a = f[this.particleMovementEasing]) == null ? undefined : a.needParam) === true;
                            },
                            type: cc.Float,
                            tooltip: false,
                            default: 0,
                            min: 0
                        },
                        startColor: {
                            tooltip: false,
                            default: cc.Color.WHITE
                        },
                        startColorVar: {
                            tooltip: false,
                            default: cc.Color.BLACK
                        },
                        endColor: {
                            tooltip: false,
                            default: cc.Color.WHITE
                        },
                        endColorVar: {
                            tooltip: false,
                            default: cc.Color.BLACK
                        },
                        colorDelayRatio: {
                            visible: function () {
                                return !this.startColor.equals(this.endColor) || !this.startColorVar.equals(this.endColorVar);
                            },
                            type: cc.Float,
                            tooltip: false,
                            range: [0, 1, 0.01],
                            default: 0
                        },
                        colorEasing: {
                            visible: function () {
                                return !this.startColor.equals(this.endColor) || !this.startColorVar.equals(this.endColorVar);
                            },
                            type: g,
                            tooltip: false,
                            default: g.None
                        },
                        colorEasingParam: {
                            visible: function () {
                                var a;
                                return ((a = f[this.colorEasing]) == null ? undefined : a.needParam) === true;
                            },
                            type: cc.Float,
                            tooltip: false,
                            default: 0,
                            min: 0
                        },
                        startAlpha: {
                            type: cc.Float,
                            tooltip: false,
                            default: 255,
                            min: 0
                        },
                        startAlphaVar: {
                            type: cc.Float,
                            tooltip: false,
                            default: 0
                        },
                        endAlpha: {
                            type: cc.Float,
                            tooltip: false,
                            default: 255,
                            min: 0
                        },
                        endAlphaVar: {
                            type: cc.Float,
                            tooltip: false,
                            default: 0
                        },
                        alphaDelayRatio: {
                            visible: function () {
                                return this.startAlpha !== this.endAlpha || this.startAlphaVar !== this.endAlphaVar;
                            },
                            type: cc.Float,
                            tooltip: false,
                            range: [0, 1, 0.01],
                            default: 0
                        },
                        alphaEasing: {
                            visible: function () {
                                return this.startAlpha !== this.endAlpha || this.startAlphaVar !== this.endAlphaVar;
                            },
                            type: g,
                            tooltip: false,
                            default: g.None
                        },
                        alphaEasingParam: {
                            visible: function () {
                                var a;
                                return ((a = f[this.alphaEasing]) == null ? undefined : a.needParam) === true;
                            },
                            type: cc.Float,
                            tooltip: false,
                            default: 0,
                            min: 0
                        },
                        speed: {
                            type: cc.Float,
                            tooltip: false,
                            default: 0
                        },
                        speedVar: {
                            type: cc.Float,
                            tooltip: false,
                            default: 0
                        },
                        angle: {
                            type: cc.Float,
                            tooltip: false,
                            default: 90
                        },
                        angleVar: {
                            type: cc.Float,
                            tooltip: false,
                            default: 20
                        },
                        startScale: {
                            type: cc.Float,
                            tooltip: false,
                            default: 1
                        },
                        startScaleVar: {
                            type: cc.Float,
                            tooltip: false,
                            default: 0
                        },
                        endScale: {
                            type: cc.Float,
                            tooltip: false,
                            default: 1
                        },
                        endScaleVar: {
                            type: cc.Float,
                            tooltip: false,
                            default: 0
                        },
                        endScaleIsFactor: {
                            visible: function () {
                                return this.startScale !== this.endScale || this.startScaleVar !== this.endScaleVar;
                            },
                            default: false
                        },
                        scaleDelayRatio: {
                            visible: function () {
                                return this.startScale !== this.endScale || this.startScaleVar !== this.endScaleVar;
                            },
                            type: cc.Float,
                            tooltip: false,
                            range: [0, 1, 0.01],
                            default: 0
                        },
                        scaleEasing: {
                            visible: function () {
                                return this.startScale !== this.endScale || this.startScaleVar !== this.endScaleVar;
                            },
                            type: g,
                            tooltip: false,
                            default: g.None
                        },
                        scaleEasingParam: {
                            visible: function () {
                                var a;
                                return ((a = f[this.scaleEasing]) == null ? undefined : a.needParam) === true;
                            },
                            type: cc.Float,
                            tooltip: false,
                            default: 0,
                            min: 0
                        },
                        startSpin: {
                            type: cc.Float,
                            tooltip: false,
                            default: 0
                        },
                        startSpinVar: {
                            type: cc.Float,
                            tooltip: false,
                            default: 0
                        },
                        endSpin: {
                            type: cc.Float,
                            tooltip: false,
                            default: 0
                        },
                        endSpinVar: {
                            type: cc.Float,
                            tooltip: false,
                            default: 0
                        },
                        spinDelayRatio: {
                            visible: function () {
                                return this.startSpin !== this.endSpin || this.startSpinVar !== this.endSpinVar;
                            },
                            type: cc.Float,
                            tooltip: false,
                            range: [0, 1, 0.01],
                            default: 0
                        },
                        spinEasing: {
                            visible: function () {
                                return this.startSpin !== this.endSpin || this.startSpinVar !== this.endSpinVar;
                            },
                            type: g,
                            tooltip: false,
                            default: g.None
                        },
                        spinEasingParam: {
                            visible: function () {
                                var a;
                                return ((a = f[this.spinEasing]) == null ? undefined : a.needParam) === true;
                            },
                            type: cc.Float,
                            tooltip: false,
                            default: 0,
                            min: 0
                        },
                        sourcePos: {
                            tooltip: false,
                            default: cc.v2(0, 0)
                        },
                        sourcePosVar: {
                            tooltip: false,
                            default: cc.v2(0, 0)
                        },
                        emitterMode: {
                            tooltip: false,
                            default: e.LINEAR,
                            type: e
                        },
                        gravityVec: {
                            visible: function () {
                                return this.emitterMode === e.GRAVITY;
                            },
                            tooltip: false,
                            default: cc.v2(0, 0)
                        },
                        gravityVecVar: {
                            visible: function () {
                                return this.emitterMode === e.GRAVITY;
                            },
                            tooltip: false,
                            default: cc.v2(0, 0)
                        },
                        nodePool: {
                            visible: false,
                            get: function () {
                                if (!this.M) {
                                    this.M = new cc.NodePool("AnimParticleSystemPoolHandler");
                                }
                                return this.M;
                            }
                        },
                        A: []
                    },
                    resetSystem: function (a) {
                        if (a === undefined) {
                            a = true;
                        }
                        if (a) {
                            this.stopSystem(true);
                        }
                        var b = 1 / this.emissionRate;
                        this.unschedule(this.I);
                        var c = this.duration;
                        if (c !== 0) {
                            this.schedule(this.I, b);
                            if (c > 0) {
                                this.unschedule(this.stopSystem);
                                this.scheduleOnce(this.stopSystem, c);
                            }
                        }
                    },
                    stopSystem: function (a) {
                        var b = this;
                        if (a === undefined) {
                            a = false;
                        }
                        this.unschedule(this.I);
                        this.unschedule(this.stopSystem);
                        if (a === true) {
                            this.A.forEach(function (a) {
                                a.stopAllActions();
                                b.nodePool.put(a);
                            });
                            this.A = [];
                        }
                    },
                    I: function () {
                        if (!(this.A.length >= this.particleCount)) {
                            var a = this.nodePool.get();
                            if (!a) {
                                a = cc.instantiate(this.particlePrefab);
                            }
                            this.O(a);
                            a.getComponent(cc.Animation).play();
                        }
                    },
                    getLife: function (a, b) {
                        return (0, d.getRandomFromRange)(a, b);
                    },
                    getSpeed: function (a, b) {
                        return (0, d.getRandomFromRange)(a, b);
                    },
                    getEmissionAngle: function (a, b) {
                        return (0, d.getRandomFromRange)(a, b);
                    },
                    getSourceStartScale: function (a, b) {
                        return (0, d.getRandomFromRange)(a, b);
                    },
                    getSourceStartSpinAngle: function (a, b) {
                        return (0, d.getRandomFromRange)(a, b);
                    },
                    getSourceStartAlpha: function (a, b) {
                        return (0, d.getRandomFromRange)(a, b);
                    },
                    getSourceStartColor: function (a, b) {
                        if (b.equals(cc.Color.BLACK)) {
                            return a;
                        } else {
                            return new cc.Color((0, d.getRandomFromRange)(a.getR(), b.getR()), (0, d.getRandomFromRange)(a.getG(), b.getG()), (0, d.getRandomFromRange)(a.getB(), b.getB()));
                        }
                    },
                    getSourceStartPosition: function (a, b) {
                        return cc.v2((0, d.getRandomFromRange)(a.x, b.x), (0, d.getRandomFromRange)(a.y, b.y));
                    },
                    getSourceEndScale: function (a, b, c, e) {
                        return (e ? a : 1) * (0, d.getRandomFromRange)(b, c);
                    },
                    getSourceEndSpinAngle: function (a, b, c) {
                        return (0, d.getRandomFromRange)(b, c);
                    },
                    getSourceEndAlpha: function (a, b, c) {
                        return (0, d.getRandomFromRange)(b, c);
                    },
                    getSourceEndColor: function (a, b, c) {
                        if (c.equals(cc.Color.BLACK)) {
                            return b;
                        } else {
                            return new cc.Color((0, d.getRandomFromRange)(b.getR(), c.getR()), (0, d.getRandomFromRange)(b.getG(), c.getG()), (0, d.getRandomFromRange)(b.getB(), c.getB()));
                        }
                    },
                    getSourceEndPositionLinear: function (b, c, d, e) {
                        var f = Math.cos(d / 180 * Math.PI) * c * e;
                        var a = Math.sin(d / 180 * Math.PI) * c * e;
                        return cc.v2(b.x + f, b.y + a);
                    },
                    getSourceEndPositionGravity: function (a, b, c, e, f, g) {
                        var h = Math.cos(c / 180 * Math.PI) * b * e;
                        var i = Math.sin(c / 180 * Math.PI) * b * e;
                        var j = (0, d.getRandomFromRange)(f.x, g.x);
                        var k = (0, d.getRandomFromRange)(f.y, g.y);
                        var l = a.x + h / 3;
                        var m = a.y + i / 3;
                        var n = a.x + h / 3 * 2;
                        var o = a.y + i / 3 * 2;
                        var p = a.x + h;
                        var q = a.y + i;
                        var r = e * 60 / 3;
                        var s = (0, d.getAccelerationDistance)(j, r);
                        var t = (0, d.getAccelerationDistance)(k, r);
                        var u = r * 2;
                        var v = (0, d.getAccelerationDistance)(j, u);
                        var w = (0, d.getAccelerationDistance)(k, u);
                        var x = r * 3;
                        var y = (0, d.getAccelerationDistance)(j, x);
                        var z = (0, d.getAccelerationDistance)(k, x);
                        var A = p > 0 ? 1 : -1;
                        return [cc.v2(l - s * A, m - t), cc.v2(n - v * A, o - w), cc.v2(p - y * A, q - z)];
                    },
                    getMoveAction: function (b, c, d, e, f) {
                        var a = cc.moveTo(d, c);
                        if (e) {
                            return a.easing(e(f));
                        } else {
                            return a;
                        }
                    },
                    getBezierAction: function (b, c, d, e, f) {
                        var a = cc.bezierTo(d, c);
                        if (e) {
                            return a.easing(e(f));
                        } else {
                            return a;
                        }
                    },
                    getScaleAction: function (b, c, d, e, f, a) {
                        if (!f) {
                            if (e === 0) {
                                return cc.scaleTo(d, c);
                            } else {
                                return cc.sequence(cc.delayTime(e * d), cc.scaleTo(d - e * d, c));
                            }
                        }
                        var g = f(a);
                        if (e === 0) {
                            return cc.scaleTo(d, c).easing(g);
                        } else {
                            return cc.sequence(cc.delayTime(e * d), cc.scaleTo(d - e * d, c).easing(g));
                        }
                    },
                    getRotateAction: function (b, c, d, e, f, a) {
                        if (!f) {
                            if (e === 0) {
                                return cc.rotateTo(d, -c);
                            } else {
                                return cc.sequence(cc.delayTime(e * d), cc.rotateTo(d - e * d, -c));
                            }
                        }
                        var g = f(a);
                        if (e === 0) {
                            return cc.rotateTo(d, -c).easing(g);
                        } else {
                            return cc.sequence(cc.delayTime(e * d), cc.rotateTo(d - e * d, -c).easing(g));
                        }
                    },
                    getFadeAction: function (b, c, d, e, f, a) {
                        if (!f) {
                            if (e === 0) {
                                return cc.fadeTo(d, c);
                            } else {
                                return cc.sequence(cc.delayTime(e * d), cc.fadeTo(d - e * d, c));
                            }
                        }
                        var g = f(a);
                        if (e === 0) {
                            return cc.fadeTo(d, c).easing(g);
                        } else {
                            return cc.sequence(cc.delayTime(e * d), cc.fadeTo(d - e * d, c).easing(g));
                        }
                    },
                    getTintAction: function (b, c, d, e, f, a) {
                        if (!f) {
                            if (e === 0) {
                                return cc.tintTo(d, c);
                            } else {
                                return cc.sequence(cc.delayTime(e * d), cc.tintTo(d - e * d, c));
                            }
                        }
                        var g = f(a);
                        if (e === 0) {
                            return cc.tintTo(d, c).easing(g);
                        } else {
                            return cc.sequence(cc.delayTime(e * d), cc.tintTo(d - e * d, c).easing(g));
                        }
                    },
                    O: function (a) {
                        var b = this;
                        var c = this.getLife(this.life, this.lifeVar);
                        var d = this.getSourceStartPosition(this.sourcePos, this.sourcePosVar);
                        a.setPosition(d);
                        var g = this.getSpeed(this.speed, this.speedVar);
                        var h = this.getEmissionAngle(this.angle, this.angleVar);
                        var i = [];
                        if (this.emitterMode === e.LINEAR) {
                            var j;
                            var l = this.getSourceEndPositionLinear(d, g, h, c);
                            i.push(this.getMoveAction(a.position, l, c, (j = f[this.particleMovementEasing]) == null ? undefined : j.proto, this.particleMovementEasingParam));
                        } else if (this.emitterMode === e.GRAVITY) {
                            var m;
                            var n = this.getSourceEndPositionGravity(d, g, h, c, this.gravityVec, this.gravityVecVar);
                            i.push(this.getBezierAction(a.position, n, c, (m = f[this.particleMovementEasing]) == null ? undefined : m.proto, this.particleMovementEasingParam));
                        }
                        var o;
                        var p = a.scale = this.getSourceStartScale(this.startScale, this.startScaleVar);
                        var r = this.getSourceEndScale(p, this.endScale, this.endScaleVar, this.endScaleIsFactor);
                        if (p !== r && this.scaleDelayRatio < 1) {
                            i.push(this.getScaleAction(p, r, c, this.scaleDelayRatio, (o = f[this.scaleEasing]) == null ? undefined : o.proto, this.scaleEasingParam));
                        }
                        var s;
                        var t = a.angle = this.getSourceStartSpinAngle(-this.startSpin, -this.startSpinVar);
                        var u = this.getSourceEndSpinAngle(t, -this.endSpin, -this.endSpinVar);
                        if (t !== u && this.spinDelayRatio < 1) {
                            i.push(this.getRotateAction(t, u, c, this.spinDelayRatio, (s = f[this.spinEasing]) == null ? undefined : s.proto, this.spinEasingParam));
                        }
                        var v;
                        var w = a.opacity = this.getSourceStartAlpha(this.startAlpha, this.startAlphaVar);
                        var x = this.getSourceEndAlpha(w, this.endAlpha, this.endAlphaVar);
                        if (w !== x && this.alphaDelayRatio < 1) {
                            i.push(this.getFadeAction(w, x, c, this.alphaDelayRatio, (v = f[this.alphaEasing]) == null ? undefined : v.proto, this.alphaEasingParam));
                        }
                        if (!(this.startColor.equals(cc.Color.WHITE) && this.startColorVar.equals(cc.Color.BLACK) && this.endColor.equals(cc.Color.WHITE) && this.endColorVar.equals(cc.Color.BLACK))) {
                            var y;
                            var z = a.color = this.getSourceStartColor(this.startColor, this.startColorVar);
                            var A = this.getSourceEndColor(z, this.endColor, this.endColorVar);
                            if (!z.equals(A) && this.colorDelayRatio < 1) {
                                i.push(this.getTintAction(z, A, c, this.colorDelayRatio, (y = f[this.colorEasing]) == null ? undefined : y.proto, this.colorEasingParam));
                            }
                        }
                        var B;
                        var C = i.length;
                        if (C > 1) {
                            B = cc.sequence(cc.spawn(i), cc.callFunc(function () {
                                b.H(a);
                            }, this));
                        } else if (C === 1) {
                            B = cc.sequence(i[0], cc.callFunc(function () {
                                b.H(a);
                            }, this));
                        }
                        this.A.push(a);
                        this.node.addChild(a);
                        a.runAction(B);
                    },
                    B: function (a, b) {
                        if (!h) {
                            h = true;
                        }
                        return a * 0.5 * b * b;
                    },
                    H: function (a) {
                        var b = this.A;
                        var c = b.indexOf(a);
                        if (c > -1) {
                            b.splice(c, 1);
                        }
                        this.nodePool.put(a);
                    }
                });
                c.default = i;
                b.exports = c.default;
                cc._RF.pop();
            }
        }, {
            AnimParticleSystemUtils: "AnimParticleSystemUtils"
        }],
        Appearance: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "dec3c3clmFKpaYEDuWXqsW2", "Appearance")) {
                cc._RF.pop();
            }
        }, {}],
        AudioAdapterConstant: [function (a, b, c) {
            'use strict';

            var d = {
                value: true
            };
            if (!cc._RF.push(b, "a20c0AJc1VFmKnv1lBJKugX", "AudioAdapterConstant")) {
                Object.defineProperty(c, "__esModule", d);
                c.MAX_INSTANCE_NUMBER = c.MAX_STACK_SOUND = c.DEFAULT_SPRITE = c.AUDIO_ADAPTER_STATE = c.AUDIO_ADAPTER_EVENT = undefined;
                c.AUDIO_ADAPTER_EVENT = {
                    LOADED: "load",
                    LOAD_ERROR: "loaderror",
                    PLAY: "play",
                    STOP: "stop",
                    END: "end",
                    PAUSE: "pause",
                    RESUME: "resume",
                    FADED: "fade",
                    SEEK: "seek",
                    PLAY_ERROR: "playerror",
                    RATE: "rate",
                    VOLUME: "volume",
                    MUTE: "mute"
                };
                c.AUDIO_ADAPTER_STATE = {
                    UNLOADED: "unloaded",
                    LODING: "loading",
                    LOADED: "loaded"
                };
                c.DEFAULT_SPRITE = "__default";
                c.MAX_STACK_SOUND = 50;
                c.MAX_INSTANCE_NUMBER = 24;
                cc._RF.pop();
            }
        }, {}],
        AudioAdapter: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "5c3d2SrYLxJYqXl2p30apID", "AudioAdapter")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e;
                var f;
                var g = a("ResRC");
                var h = a("AudioAdapterConstant");
                var i = a("AdapterEventEmitter");
                var j = a("AudioFactory");
                e = 0;
                function b() {
                    return ++e;
                }
                (function (a) {
                    a.G = "_audio";
                })(f || (f = {}));
                var k = {
                    load: g.load,
                    unload: g.release
                };
                var l = k;
                var m = function () {
                    function a(a) {
                        var b = this;
                        this.N = false;
                        this.T = Object.create(null);
                        this.P = 0;
                        this.R = h.AUDIO_ADAPTER_STATE.UNLOADED;
                        this.L = false;
                        this.maxInstance = h.MAX_INSTANCE_NUMBER;
                        this.k = a.src;
                        this.U = typeof a.volume == "number" ? a.volume : 1;
                        this.j = typeof a.rate == "number" ? a.rate : 1;
                        this.D = !!a.mute;
                        this.W = !!a.loop;
                        this.F = a.sprite;
                        this.V = a.loader || l;
                        this.factory = a.soundFactory || new j.default();
                        var c = a.eventEmitter || new i.default();
                        this.on = function (a, d, e, f) {
                            if (!(e != null && e in b.T == 0)) {
                                c.on(a, d, e, f);
                            }
                        };
                        this.off = c.off.bind(c);
                        this.once = function (a, d, e) {
                            if (!(e != null && e in b.T == 0)) {
                                c.once(a, d, e);
                            }
                        };
                        this.q = c.emit.bind(c);
                        if (a.preload) {
                            // TOLOOK
                            setTimeout(this.load.bind(this), 0);
                        }
                    }
                    a.prototype.load = function () {
                        if (this.R !== h.AUDIO_ADAPTER_STATE.LOADED && this.R !== h.AUDIO_ADAPTER_STATE.LODING) {
                            this.V.load(this.k, this.J.bind(this));
                            this.R = h.AUDIO_ADAPTER_STATE.LODING;
                        }
                    };
                    a.prototype.J = function (a, b) {
                        if (a) {
                            this.q(h.AUDIO_ADAPTER_EVENT.LOAD_ERROR, undefined, a.message || a);
                            this.L = false;
                            this.R = h.AUDIO_ADAPTER_STATE.UNLOADED;
                        } else {
                            this.R = h.AUDIO_ADAPTER_STATE.LOADED;
                            if (b) {
                                this.K = b[f.G];
                            }
                            this.q(h.AUDIO_ADAPTER_EVENT.LOADED);
                            if (this.L) {
                                this.unload();
                            }
                        }
                    };
                    a.prototype.unload = function () {
                        if (this.R !== h.AUDIO_ADAPTER_STATE.UNLOADED) {
                            if (this.R !== h.AUDIO_ADAPTER_STATE.LODING) {
                                if (this.P !== 0) {
                                    this.stop();
                                }
                                this.K = undefined;
                                this.V.unload(this.k);
                                this.L = false;
                                this.R = h.AUDIO_ADAPTER_STATE.UNLOADED;
                            } else {
                                this.L = true;
                            }
                        }
                    };
                    a.prototype.play = function (a) {
                        var c = this;
                        if (this.R !== h.AUDIO_ADAPTER_STATE.LOADED) {
                            throw Error("Audio Adapter:: play : audio not yet loaded!");
                        }
                        var d = typeof a == "number";
                        var e = !d && typeof a == "string";
                        if (this.N || d) {
                            this.resume(a);
                            if (d) {
                                return a;
                            } else {
                                return -1;
                            }
                        }
                        var f = this.T;
                        if (this.P >= this.maxInstance) {
                            var i = undefined;
                            for (var j in f) {
                                i = j;
                                break;
                            }
                            var k = this.T[i];
                            k.stop();
                            delete this.T[i];
                            this.P--;
                            this.off(i);
                            this.addAudioToPool(k);
                        }
                        var l = this.getAudioFromPool();
                        var m = {
                            loop: this.W,
                            muted: this.D,
                            volume: this.U,
                            rate: this.j
                        };
                        l.reset(m);
                        var n = e && this.F ? this.F[a] : undefined;
                        var o = 0;
                        var p = 0;
                        if (n) {
                            o = n.from;
                            p = n.to - o;
                        }
                        var q = b();
                        l.play(o, p);
                        l.once(shell.WebAudioEvent.ENDED, function () {
                            if (!c.T[q]) {
                                throw Error("AudioAdapter :: play : audio doesn't exist on this adapter anymore");
                            }
                            delete c.T[q];
                            c.P--;
                            c.q(h.AUDIO_ADAPTER_EVENT.END, q, undefined, true);
                            c.addAudioToPool(l);
                        });
                        f[q] = l;
                        this.P++;
                        this.q(h.AUDIO_ADAPTER_EVENT.PLAY, q);
                        return q;
                    };
                    a.prototype.stop = function (a) {
                        if (this.R !== h.AUDIO_ADAPTER_STATE.LOADED) {
                            throw Error("Audio Adapter :: stop : Attemp to stop not loaded audio!");
                        }
                        if (this.P !== 0) {
                            if (typeof a == "number") {
                                if (c = this.T[a]) {
                                    delete this.T[a];
                                    this.P--;
                                    c.stop();
                                    this.q(h.AUDIO_ADAPTER_EVENT.STOP, a, undefined, true);
                                    this.addAudioToPool(c);
                                }
                            } else {
                                for (var b in this.T) {
                                    var c;
                                    (c = this.T[b]).stop();
                                    this.q(h.AUDIO_ADAPTER_EVENT.STOP, +b, undefined, true);
                                    this.addAudioToPool(c);
                                }
                                this.T = Object.create(null);
                                this.P = 0;
                            }
                        }
                    };
                    a.prototype.pause = function (a) {
                        if (typeof a == "number") {
                            if ((c = this.T[a]) && c.playing) {
                                c.pause();
                                this.q(h.AUDIO_ADAPTER_EVENT.PAUSE, a);
                            }
                        } else {
                            this.N = true;
                            if (this.P === 0) {
                                return;
                            }
                            for (var b in this.T) {
                                var c;
                                if ((c = this.T[b]).playing) {
                                    c.pause();
                                    this.q(h.AUDIO_ADAPTER_EVENT.PAUSE, +b);
                                }
                            }
                        }
                    };
                    a.prototype.resume = function (a) {
                        if (typeof a == "number") {
                            if ((c = this.T[a]) && c.paused) {
                                c.resume();
                                this.q(h.AUDIO_ADAPTER_EVENT.RESUME, a);
                            }
                        } else {
                            this.N = false;
                            if (this.P === 0) {
                                return;
                            }
                            for (var b in this.T) {
                                var c;
                                if ((c = this.T[b]).paused) {
                                    c.resume();
                                    this.q(h.AUDIO_ADAPTER_EVENT.RESUME, +b);
                                }
                            }
                        }
                    };
                    a.prototype.setMute = function (a, b) {
                        if (typeof b == "number") {
                            if ((d = this.T[b]) && d.muted !== a) {
                                d.muted = a;
                                this.q(h.AUDIO_ADAPTER_EVENT.MUTE, b);
                            }
                        } else {
                            this.D = a;
                            if (this.P === 0) {
                                return;
                            }
                            for (var c in this.T) {
                                var d;
                                if ((d = this.T[c]).muted !== a) {
                                    d.muted = a;
                                    this.q(h.AUDIO_ADAPTER_EVENT.MUTE, +c);
                                }
                            }
                        }
                    };
                    a.prototype.isMute = function (a) {
                        if (typeof a == "number") {
                            var b = this.T[a];
                            return !!b && b.muted;
                        }
                        return this.D;
                    };
                    a.prototype.setVolume = function (a, b) {
                        if (typeof b == "number") {
                            if ((d = this.T[b]) && d.volume !== a) {
                                d.volume = a;
                                this.q(h.AUDIO_ADAPTER_EVENT.VOLUME, b);
                            }
                        } else {
                            this.U = a;
                            if (this.P === 0) {
                                return;
                            }
                            for (var c in this.T) {
                                var d;
                                if ((d = this.T[c]).volume !== a) {
                                    d.volume = a;
                                    this.q(h.AUDIO_ADAPTER_EVENT.VOLUME, +c);
                                }
                            }
                        }
                    };
                    a.prototype.getVolume = function (a) {
                        if (typeof a == "number") {
                            var b = this.T[a];
                            if (b) {
                                return b.volume;
                            } else {
                                return 0;
                            }
                        }
                        return this.U;
                    };
                    a.prototype.getInstantVolume = function (a) {
                        var b = this.T[a];
                        if (b) {
                            return b.instantVolume;
                        } else {
                            return 0;
                        }
                    };
                    a.prototype.fade = function (a, b, c, d) {
                        var e = this;
                        if (this.R !== h.AUDIO_ADAPTER_STATE.LOADED) {
                            throw Error("Audio Adpater :: fade : Audio not loaded!");
                        }
                        if (this.P !== 0) {
                            if (typeof d == "number") {
                                var f = this.T[d];
                                if (f) {
                                    f.off(shell.WebAudioEvent.FADED);
                                    f.once(shell.WebAudioEvent.FADED, function () {
                                        e.q(h.AUDIO_ADAPTER_EVENT.FADED, d);
                                    });
                                    f.fade(a, b, c);
                                }
                            } else {
                                this.U = b;
                                function d(d) {
                                    var f = g.T[d];
                                    f.off(shell.WebAudioEvent.FADED);
                                    f.once(shell.WebAudioEvent.FADED, function () {
                                        e.q(h.AUDIO_ADAPTER_EVENT.FADED, +d);
                                    });
                                    f.fade(a, b, c);
                                }
                                var g = this;
                                for (var i in this.T) {
                                    d(i);
                                }
                            }
                        }
                    };
                    a.prototype.setLoop = function (a, b) {
                        if (typeof b == "number") {
                            if (d = this.T[b]) {
                                d.loop = a;
                            }
                        } else {
                            this.W = a;
                            if (this.P === 0) {
                                return;
                            }
                            for (var c in this.T) {
                                var d;
                                (d = this.T[c]).loop = a;
                            }
                        }
                    };
                    a.prototype.isLoop = function (a) {
                        if (typeof a == "number") {
                            var b = this.T[a];
                            return !!b && b.loop;
                        }
                        return this.W;
                    };
                    a.prototype.setRate = function (a, b) {
                        if (typeof b == "number") {
                            if (d = this.T[b]) {
                                d.rate = a;
                            }
                        } else {
                            this.j = a;
                            if (this.P === 0) {
                                return;
                            }
                            for (var c in this.T) {
                                var d;
                                (d = this.T[c]).rate = a;
                            }
                        }
                    };
                    a.prototype.getRate = function (a) {
                        if (typeof a == "number") {
                            var b = this.T[a];
                            if (b) {
                                return b.rate;
                            }
                        }
                        return this.j;
                    };
                    a.prototype.isPlaying = function (a) {
                        if (typeof a == "number") {
                            var b = this.T[a];
                            return b !== undefined && b.playing;
                        }
                        return this.P > 0 && this.N === false;
                    };
                    a.prototype.getDuration = function (a) {
                        if (typeof a == "number") {
                            var b = this.T[a];
                            if (b) {
                                return b.duration;
                            }
                        } else if (this.K) {
                            return this.K.duration;
                        }
                        return 0;
                    };
                    a.prototype.getState = function () {
                        return this.R;
                    };
                    a.prototype.getCurrentTime = function (a) {
                        var b = this.T[a];
                        if (b) {
                            return b.currentTime;
                        } else {
                            return 0;
                        }
                    };
                    a.prototype.seek = function (a, b) {
                        var c = this;
                        if (this.R !== h.AUDIO_ADAPTER_STATE.LOADED) {
                            throw Error("Audio Adapter:: seek : audio not yet loaded!");
                        }
                        if (this.P !== 0) {
                            if (typeof b == "number") {
                                var d = this.T[b];
                                if (d) {
                                    d.once(shell.WebAudioEvent.SEEK, function () {
                                        c.q(h.AUDIO_ADAPTER_EVENT.SEEK, b);
                                    });
                                    d.seek(a);
                                    d.off(shell.WebAudioEvent.SEEK);
                                }
                            } else {
                                if (this.P === 0) {
                                    return;
                                }
                                this.N = false;
                                var e = __assign({}, this.T);
                                function b(b) {
                                    var d = e[b];
                                    d.once(shell.WebAudioEvent.SEEK, function () {
                                        c.q(h.AUDIO_ADAPTER_EVENT.SEEK, +b);
                                    });
                                    d.seek(a);
                                    d.off(shell.WebAudioEvent.SEEK);
                                }
                                for (var f in e) {
                                    b(f);
                                }
                            }
                        }
                    };
                    a.prototype.getAudioFromPool = function () {
                        return this.factory.get() || new shell.WebAudio(this.K);
                    };
                    a.prototype.addAudioToPool = function (a) {
                        a.reset();
                        a.removeAll();
                        if (!this.factory.put(a)) {
                            a.destroy();
                        }
                    };
                    a.prototype.stereo = function () { };
                    a.getNewId = b;
                    return a;
                }();
                c.default = m;
                cc._RF.pop();
            }
        }, {
            AdapterEventEmitter: "AdapterEventEmitter",
            AudioAdapterConstant: "AudioAdapterConstant",
            AudioFactory: "AudioFactory",
            ResRC: "ResRC"
        }],
        AudioAssetConfig: [function (a, b, c) {
            'use strict';

            var d = {
                value: true
            };
            if (!cc._RF.push(b, "459f6wrPeZPgrrnRpcbVwxL", "AudioAssetConfig")) {
                Object.defineProperty(c, "__esModule", d);
                c.audioAssetConfig = undefined;
                c.audioAssetConfig = [];
                cc._RF.pop();
            }
        }, {}],
        AudioFactory: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "bf4b5cdVNdI7rQp2MPM3CWN", "AudioFactory")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("AudioAdapterConstant");
                var f = function () {
                    function a() {
                        this.maxStackSound = e.MAX_STACK_SOUND;
                        this.Y = [];
                    }
                    a.prototype.put = function (a) {
                        return this.Y.length < this.maxStackSound && (this.Y.push(a), true);
                    };
                    a.prototype.get = function () {
                        return this.Y.pop();
                    };
                    a.prototype.size = function () {
                        return this.Y.length;
                    };
                    a.prototype.destroy = function () {
                        this.Y.forEach(function (a) {
                            a.destroy();
                        });
                        this.Y = [];
                    };
                    return a;
                }();
                c.default = f;
                cc._RF.pop();
            }
        }, {
            AudioAdapterConstant: "AudioAdapterConstant"
        }],
        AudioManager: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "75629TEJFxDq6gs0ecfGPkG", "AudioManager")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.updatePlayRate = c.generalGameAudio = c.stopSfx = c.fadeOutAudioIfPlaying = c.stopAudioIfPlaying = c.playAudioIfNotPlaying = c.audioId = c.crossFadeAudio = c.toggleEffectMuted = c.toggleMusicMuted = c.GeneralAudioPool = c.releaseAudio = c.loadAudio = c.toggleAudioGameStarted = c.unregisterAudio = c.registerAudio = c.init = c.AUDIO_TYPE = undefined;
                var e = a("GameAudioAdapter");
                var f = a("SettingMenuHelper");
                var g = a("RtConfig");
                var h = a("NoSoundAdapter");
                var i = a("GeneralAudioConstant");
                var j = Object.create(null);
                c.GeneralAudioPool = j;
                var l = Object.create(null);
                c.audioId = l;
                var m = Object.create(null);
                var n = {
                    SOUND: 0,
                    MUSIC: 1
                };
                c.AUDIO_TYPE = n;
                var k = false;
                var o = false;
                var p = 1;
                var r = [];
                var s = "audio/";
                j.bgm_mg = undefined;
                j.bgm_mg_b = undefined;
                j.bgm_bigwin_coins = undefined;
                j.bgm_bigwin_end = undefined;
                j.bgm_bigwin_firework = undefined;
                j.bgm_bigwin_main = undefined;
                var t;
                var u = ["bgm_mg", "bgm_mg_b"];
                c.generalGameAudio = t;
                c.init = function () {
                    var a;
                    cc.game.on(cc.game.EVENT_HIDE, y);
                    cc.game.on(cc.game.EVENT_SHOW, z);
                    Object.keys(a = j).forEach(function (b) {
                        var c = u.indexOf(b) !== -1 ? n.MUSIC : n.SOUND;
                        a[b] = x(b, c);
                    });
                    j.bgm_mg.setLoop(true);
                    j.bgm_mg_b.setLoop(true);
                    c.generalGameAudio = t = w("GeneralAudio", false, i.GENERAL_AUDIO);
                    B(true);
                    C(true);
                };
                c.playAudioIfNotPlaying = function (a, b, c, d) {
                    if (b === undefined) {
                        b = false;
                    }
                    if (c === undefined) {
                        c = 0;
                    }
                    if (d === undefined) {
                        d = false;
                    }
                    if (i.GENERAL_AUDIO.hasOwnProperty(a)) {
                        if (!(t.isPlaying(l[a]) && l[a] !== undefined)) {
                            l[a] = t.play(a);
                            if (b) {
                                t.fade(0, 1, c, l[a]);
                            }
                            if (d) {
                                t.setLoop(true, l[a]);
                            }
                        }
                    }
                };
                c.stopAudioIfPlaying = v;
                c.fadeOutAudioIfPlaying = function (a, b) {
                    if (b === undefined) {
                        b = 0;
                    }
                    if (i.GENERAL_AUDIO.hasOwnProperty(a) && l[a] && t.isPlaying(l[a])) {
                        var c = t.getInstantVolume(l[a]);
                        t.fade(c, 0, b, l[a]);
                        t.once("fade", function () {
                            t.stop(l[a]);
                        }, l[a]);
                    }
                };
                c.registerAudio = function (a, b) {
                    var c = b ? n.MUSIC : n.SOUND;
                    if (k) {
                        var d = f.settingMenuHelper.soundEnable;
                        a.setMute(d);
                    }
                    if (!m[c]) {
                        m[c] = [];
                    }
                    m[c].push(a);
                    a.setRate(p);
                    return c;
                };
                c.unregisterAudio = function (a, b) {
                    var c = m[b];
                    var d = c.indexOf(a);
                    if (d === -1) {
                        throw Error("Audio Manager :: unRegisterAudio : audio not found");
                    }
                    c.splice(d, 1);
                };
                c.updatePlayRate = function (a) {
                    p = a;
                    for (var b in m) {
                        if (m[b]) {
                            for (var c = m[b], d = 0, e = c.length; d < e; d++) {
                                c[d].setRate(a);
                            }
                        }
                    }
                };
                c.toggleAudioGameStarted = function () {
                    k = true;
                    B(!f.settingMenuHelper.soundEnable);
                    C(!f.settingMenuHelper.soundEnable);
                };
                c.toggleMusicMuted = B;
                c.toggleEffectMuted = C;
                c.crossFadeAudio = function (a, b, c) {
                    if (c === undefined) {
                        c = 1;
                    }
                    b.setVolume(0);
                    b.play();
                    b.fade(0, c, 1000);
                    if (a.getVolume() === 0) {
                        a.stop();
                    } else {
                        a.fade(a.getVolume(), 0, 1000);
                        a.once("fade", function () {
                            a.stop();
                        });
                    }
                };
                c.loadAudio = function (a, b) {
                    function c() {
                        a.off("loaderror", d);
                        if (b) {
                            b();
                        }
                    }
                    function d(d, e) {
                        a.off("load", c);
                        if (b) {
                            b(e, d);
                        }
                    }
                    a.once("load", c);
                    a.once("loaderror", d);
                    return a.load();
                };
                c.releaseAudio = function (a) {
                    return a.unload();
                };
                c.stopSfx = function (a, b, c) {
                    if (b === undefined) {
                        b = false;
                    }
                    if (c === undefined) {
                        c = 0;
                    }
                    v(a.key, b, c);
                };
                cc._RF.pop();
            }
            function v(a, b, c) {
                if (b === undefined) {
                    b = false;
                }
                if (c === undefined) {
                    c = 0;
                }
                if (i.GENERAL_AUDIO.hasOwnProperty(a) && l[a] && t.isPlaying(l[a])) {
                    if (b) {
                        t.fade(1, 0, c, l[a]);
                        t.once("fade", function () {
                            t.stop(l[a]);
                        }, l[a]);
                    } else {
                        t.stop(l[a]);
                    }
                }
            }
            function w(a, b, c) {
                if (b === undefined) {
                    b = n.SOUND;
                }
                var d = {
                    preload: false,
                    src: A(a),
                    mute: true,
                    sprite: c
                };
                if (g.cs_Launch.noAudio === "1") {
                    return new h.default(d);
                } else {
                    return new e.default(d, b);
                }
            }
            function x(a, b) {
                if (b === undefined) {
                    b = n.SOUND;
                }
                var c = {
                    preload: false,
                    src: A(a),
                    mute: true
                };
                if (g.cs_Launch.noAudio === "1") {
                    return new h.default(c);
                } else {
                    return new e.default(c, b);
                }
            }
            function y() {
                if (!o) {
                    o = true;
                    for (var a in m) {
                        if (m[a]) {
                            for (var b = m[a], c = 0, d = b.length; c < d; c++) {
                                if (b[c].isPlaying()) {
                                    b[c].pause();
                                    r.push(b[c]);
                                }
                            }
                        }
                    }
                }
            }
            function z() {
                var a;
                var b;
                if (o) {
                    o = false;
                    try {
                        for (var c = __values(r), d = c.next(); !d.done; d = c.next()) {
                            d.value.play();
                        }
                    } catch (b) {
                        var e = {
                            error: b
                        };
                        a = e;
                    } finally {
                        try {
                            if (d && !d.done && (b = c.return)) {
                                b.call(c);
                            }
                        } finally {
                            if (a) {
                                throw a.error;
                            }
                        }
                    }
                    r.length = 0;
                }
            }
            function A(a) {
                return s + a;
            }
            function B(a) {
                if (a === undefined) {
                    a = false;
                }
                if (m[n.MUSIC]) {
                    m[n.MUSIC].map(function (b) {
                        b.setMute(a);
                    });
                }
            }
            function C(a) {
                if (a === undefined) {
                    a = false;
                }
                if (m[n.SOUND]) {
                    m[n.SOUND].map(function (b) {
                        b.setMute(a);
                    });
                }
            }
        }, {
            GameAudioAdapter: "GameAudioAdapter",
            GeneralAudioConstant: "GeneralAudioConstant",
            NoSoundAdapter: "NoSoundAdapter",
            RtConfig: "RtConfig",
            SettingMenuHelper: "SettingMenuHelper"
        }],
        AutoSpinHandler: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "6a62eVFmd1Ng5ghvfVXBlUq", "AutoSpinHandler")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.exitAutoSpin = c.decrementAutoSpinCount = c.resetAutoSpinCount = c.startAutoSpin = c.getAutoSpinCount = c.shouldAutoSpin = undefined;
                var e = a("GameEventHandler");
                var f = -1;
                c.shouldAutoSpin = function () {
                    return f > 0;
                };
                c.getAutoSpinCount = function () {
                    return f;
                };
                c.startAutoSpin = function (a, b, c) {
                    f = a;
                    b.enterAutoSpinMode(a, c);
                    e.emitAutoplayStarted(function () {
                        g(b);
                    });
                };
                c.resetAutoSpinCount = function () {
                    f = -1;
                };
                c.decrementAutoSpinCount = function (a) {
                    f -= 1;
                    a.updateAutoSpinCount(f);
                };
                c.exitAutoSpin = function (a) {
                    g(a);
                    e.emitAutoplayStopped();
                };
                cc._RF.pop();
            }
            function g(a) {
                f = -1;
                a.exitAutoSpinMode();
            }
        }, {
            GameEventHandler: "GameEventHandler"
        }],
        AutomationDecorator: [function (a, b, c) {
            'use strict';

            var d = {
                value: true
            };
            if (!cc._RF.push(b, "607a1pUyWBLsphZz1avN+BH", "AutomationDecorator")) {
                Object.defineProperty(c, "__esModule", d);
                c.automationDec = undefined;
                c.automationDec = function (a) {
                    return function (b, c, d) {
                        if (!d) {
                            return d;
                        }
                        var e = d.value;
                        d.value = function () {
                            for (var b = [], c = 0; c < arguments.length; c++) {
                                b[c] = arguments[c];
                            }
                            var d = System.get("automation");
                            if (d) {
                                a.func.apply(a, __spread(b));
                            }
                            var f = e.apply(this, b);
                            return f;
                        };
                        return d;
                    };
                };
                cc._RF.pop();
            }
        }, {}],
        BACKUP_DATA: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "4dc392lxVJArKflo+rU3j23", "BACKUP_DATA")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = new cc.Color(255, 200, 36, 255);
                var f = new cc.Color(255, 255, 255, 255);
                var g = Object.freeze({
                    game: {
                        theme_color: e,
                        theme_font_family: "Arial",
                        white_color: f
                    },
                    game_title: {
                        default_font: "Arial"
                    },
                    setting: {
                        theme_color: e,
                        theme_font: "Arial",
                        slider_switch_color: {
                            false: new cc.Color(144, 144, 150, 255),
                            true: e
                        },
                        slider_line_color: {
                            false: new cc.Color(144, 144, 150, 20),
                            true: e
                        },
                        label_switch_color_a: {
                            false: f,
                            true: e
                        },
                        label_switch_color_b: {
                            false: new cc.Color(144, 144, 150, 82),
                            true: e
                        },
                        label_switch_color_c: {
                            false: new cc.Color(255, 255, 255, 30),
                            true: e
                        },
                        button_switch_color_a: {
                            false: new cc.Color(f.r, f.g, f.b, 79),
                            true: e
                        },
                        color_button_transition_a: {
                            normal: e,
                            pressed: new cc.Color(e.r, e.g, e.b, 128),
                            hover: e,
                            disabled: new cc.Color(e.r, e.g, e.b, 66)
                        },
                        white_button_transition_a: {
                            normal: f,
                            pressed: new cc.Color(f.r, f.g, f.b, 128),
                            hover: f,
                            disabled: new cc.Color(f.r, f.g, f.b, 66)
                        },
                        grey_button_transition_a: {
                            normal: new cc.Color(f.r, f.g, f.b, 153),
                            pressed: new cc.Color(133, 133, 133, 153),
                            hover: new cc.Color(f.r, f.g, f.b, 153),
                            disabled: new cc.Color(133, 133, 133, 153)
                        },
                        spin_start_label: new cc.Color(255, 255, 255, 201)
                    },
                    login: {
                        theme_color: e,
                        default_font: "Arial"
                    },
                    history: {
                        grey_button_transition_b: {
                            normal: f,
                            pressed: new cc.Color(133, 133, 133),
                            hover: f,
                            disabled: new cc.Color(133, 133, 133)
                        },
                        white_button_transition_a: {
                            normal: f,
                            pressed: new cc.Color(255, 255, 255, 128),
                            hover: f,
                            disabled: new cc.Color(255, 255, 255, 66)
                        },
                        calendar_title_select: {
                            true: e,
                            false: new cc.Color(255, 255, 255, 77)
                        },
                        calendar_selection_line: new cc.Color(40, 40, 52, 235),
                        calendar_title_bg: new cc.Color(48, 48, 60, 255),
                        calendar_content_bg: new cc.Color(40, 40, 52, 235),
                        calendar_custom_bg: new cc.Color(48, 48, 60, 255),
                        calendar_custom_line_bg: new cc.Color(48, 48, 60, 255),
                        calendar_custom_title: new cc.Color(255, 255, 255, 153),
                        calendar_custom_dot: new cc.Color(255, 255, 255, 255),
                        calendar_custom_btn: {
                            normal: e,
                            pressed: new cc.Color(119, 119, 119, 255),
                            hover: e,
                            disabled: new cc.Color(87, 87, 87, 255)
                        },
                        calendar_datepicker_default_font: new cc.Color(255, 255, 255, 77),
                        calendar_datepicker_highlight_font: e,
                        calendar_datepicker_highlight_bg: new cc.Color(48, 48, 60, 255),
                        calendar_datepicker_line: new cc.Color(40, 40, 52, 255),
                        theme_color: e,
                        theme_font: "Arial",
                        color_theme_opacity_a: new cc.Color(e.r, e.g, e.b, 153),
                        navigator_bg: new cc.Color(48, 48, 60),
                        navigator_bar_bg: new cc.Color(40, 40, 52),
                        history_bar_item_bg: {
                            normal: new cc.Color(48, 48, 60),
                            pressed: new cc.Color(57, 57, 75, 60),
                            hover: new cc.Color(48, 48, 60),
                            disabled: new cc.Color(40, 40, 52)
                        },
                        history_bar_item_font_bg: {
                            false: f,
                            true: e
                        },
                        history_main_title: new cc.Color(241, 186, 91, 255),
                        history_list_item_arrow: new cc.Color(255, 255, 255, 64),
                        history_list_item_bg_odd: new cc.Color(40, 40, 52),
                        history_list_item_bg_even: new cc.Color(45, 45, 57),
                        history_list_item_bg_pressed: new cc.Color(60, 60, 70),
                        history_list_item_special_font: e,
                        history_list_item_value_font: new cc.Color(255, 255, 255, 153),
                        history_list_item_date_time_font: new cc.Color(255, 255, 255, 153),
                        history_list_item_line: new cc.Color(255, 255, 255, 0),
                        history_list_item_free_games_icon: e,
                        history_list_header_bg: new cc.Color(40, 40, 52, 255),
                        history_list_header_title_font: new cc.Color(255, 255, 255, 77),
                        history_list_bg: new cc.Color(48, 48, 60, 255),
                        history_list_bottom_circle_loading: f,
                        history_list_middle_circle_loading: new cc.Color(255, 255, 255, 77),
                        history_list_bottom_label_color: f,
                        history_list_middle_label_color: new cc.Color(255, 255, 255, 77),
                        history_list_retry: e,
                        history_list_message_title: new cc.Color(220, 220, 220, 153),
                        history_list_message_message: new cc.Color(220, 220, 220, 77),
                        history_list_title_date: new cc.Color(255, 255, 255, 153),
                        history_list_middle_loading_front: e,
                        history_list_middle_loading_back: new cc.Color(e.r * 0.5, e.g * 0.5, e.b * 0.5),
                        history_list_middle_loading_font_color: e,
                        history_list_bottom_loading_front: e,
                        history_list_bottom_loading_back: new cc.Color(e.r * 0.5, e.g * 0.5, e.b * 0.5),
                        history_summary_bg: new cc.Color(40, 40, 52, 255),
                        history_summary_title_font: e,
                        history_summary_record_font: new cc.Color(255, 255, 255, 153),
                        history_summary_amount_font: f,
                        history_detail_header_title_font: e,
                        history_detail_header_value_font: new cc.Color(120, 120, 120, 255),
                        history_detail_header_bg: new cc.Color(40, 40, 52, 255),
                        history_detail_down_arrow: e,
                        history_detail_line: new cc.Color(40, 40, 52, 255),
                        history_detail_payout_font: new cc.Color(255, 255, 255, 66),
                        history_detail_win_line_value_font: f,
                        history_detail_content_bg: new cc.Color(48, 48, 60),
                        history_detail_no_win_combination_font: new cc.Color(255, 255, 255, 204),
                        history_detail_title_font: f,
                        history_detail_page_arrow: e,
                        history_detail_page_arrow_bg: new cc.Color(0, 0, 0, 100),
                        history_bar_close_font: new cc.Color(255, 255, 255, 204),
                        history_bar_bg: new cc.Color(48, 48, 60, 255)
                    },
                    alert: {
                        default_title_color: f,
                        default_message_color: f,
                        default_button_title_color: f,
                        default_button_color: e,
                        default_font: "Arial"
                    },
                    free_game: {
                        theme_color: e,
                        theme_font: "Arial"
                    },
                    bonus_wallet: {
                        theme_color: e,
                        theme_font: "Arial"
                    },
                    setting_rules: {
                        title_color: new cc.Color(255, 255, 255),
                        desc_color: new cc.Color(204, 204, 204),
                        font_style: "Arial"
                    },
                    setting_payout: {
                        title_color: new cc.Color(255, 255, 255),
                        value_color: new cc.Color(255, 255, 255),
                        value_color_red: new cc.Color(192, 38, 48),
                        desc_color: new cc.Color(204, 204, 204),
                        font_style: "Arial"
                    },
                    loading: {
                        front_icon_color: e,
                        back_icon_color: new cc.Color(e.r * 0.5, e.g * 0.5, e.b * 0.5),
                        background_color: new cc.Color(0, 0, 0, 0),
                        font_color: e,
                        font_style: "Arial"
                    }
                });
                c.default = g;
                cc._RF.pop();
            }
        }, {}],
        BGMHandler: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "bdbf5PQ29hIk57h6/UXPSV2", "BGMHandler")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.stopBigWinEndFirework = c.stopBigWinEndCoin = c.playBigWinEndFirework = c.playBigWinEndCoin = c.skipBigWinEnd = c.playNormalBGMFromBigWinEnd = c.playBigWinBGM = c.fadeInNormalBGM = c.fadeOutNormalBGM = c.crossFadePlayRespinBGMtoNormal = c.crossFadePlayNormalBGMtoRespin = c.muteAllBGM = c.muteNormalBGM = c.instantPlayRespinBGM = c.instantPlayNormalBGM = c.BGM_STATE = undefined;
                var e;
                var f = a("AudioManager");
                var g = a("Utils");
                var h = a("GConstants");
                (function (a) {
                    a[a.NONE = 0] = "NONE";
                    a[a.MAIN_LOOP = 1] = "MAIN_LOOP";
                    a[a.RESPIN = 2] = "RESPIN";
                    a[a.BIG_WIN = 3] = "BIG_WIN";
                    a[a.BIG_WIN_END = 4] = "BIG_WIN_END";
                })(e = c.BGM_STATE || (c.BGM_STATE = {}));
                var i = 0;
                var j = -1;
                var k = void e.NONE;
                c.instantPlayNormalBGM = function () {
                    var a = l(e.MAIN_LOOP);
                    a.stop();
                    a.setVolume(1);
                    i = a.play();
                    var b = l(e.RESPIN);
                    b.stop();
                    b.setVolume(0);
                    j = b.play();
                    e.MAIN_LOOP;
                };
                c.instantPlayRespinBGM = function () {
                    var a = l(e.MAIN_LOOP);
                    a.stop();
                    a.setVolume(0);
                    i = a.play();
                    var b = l(e.RESPIN);
                    b.stop();
                    b.setVolume(1);
                    j = b.play();
                    e.MAIN_LOOP;
                };
                c.muteNormalBGM = m;
                c.muteAllBGM = function () {
                    m();
                };
                c.crossFadePlayNormalBGMtoRespin = function () {
                    var a = l(e.MAIN_LOOP);
                    var b = l(e.RESPIN);
                    a.fade(1, 0, h.AUDIO_RELATED_TIMING.BGM_NORMAL_TO_RESPIN);
                    b.fade(0, 1, h.AUDIO_RELATED_TIMING.BGM_NORMAL_TO_RESPIN);
                    e.MAIN_LOOP;
                };
                c.crossFadePlayRespinBGMtoNormal = function () {
                    var a = l(e.MAIN_LOOP);
                    var b = l(e.RESPIN);
                    var c = b.getInstantVolume(j);
                    var d = a.getInstantVolume(i);
                    a.fade(d, 1, h.AUDIO_RELATED_TIMING.BGM_RESPIN_TO_NORMAL);
                    b.fade(c, 0, h.AUDIO_RELATED_TIMING.BGM_RESPIN_TO_NORMAL);
                    e.RESPIN;
                };
                c.fadeOutNormalBGM = function (a) {
                    var b = l(e.MAIN_LOOP);
                    var c = b.getInstantVolume(i);
                    b.fade(c, 0.5, a);
                };
                c.fadeInNormalBGM = function (a) {
                    var b = l(e.MAIN_LOOP);
                    var c = b.getInstantVolume(i);
                    b.fade(c, 1, a);
                };
                c.playBigWinBGM = function () {
                    var a = l(e.MAIN_LOOP);
                    var b = l(e.RESPIN);
                    if (k) {
                        k();
                    }
                    var c = a.getInstantVolume(i);
                    var d = b.getInstantVolume(j);
                    if (c > 0) {
                        a.fade(1, 0, 0.2);
                    }
                    if (d > 0) {
                        b.fade(1, 0, 0.2);
                    }
                    var f = l(e.BIG_WIN);
                    if (f.isPlaying()) {
                        f.stop();
                    }
                    f.play();
                    f.setVolume(1);
                    e.BIG_WIN;
                };
                c.playNormalBGMFromBigWinEnd = function () {
                    var a = l(e.MAIN_LOOP);
                    if (k) {
                        k();
                    }
                    var b = l(e.BIG_WIN);
                    var c = l(e.BIG_WIN_END);
                    if (b.isPlaying()) {
                        b.stop();
                    }
                    if (c.isPlaying()) {
                        c.stop();
                    }
                    c.play();
                    c.setVolume(1);
                    e.BIG_WIN_END;
                    k = g.delayCallback(2)(function () {
                        var b = a.getInstantVolume(i);
                        a.fade(b, 1, 2);
                        e.MAIN_LOOP;
                    });
                };
                c.skipBigWinEnd = function () {
                    var a = k;
                    k = undefined;
                    if (a) {
                        a();
                    }
                    var b = l(e.MAIN_LOOP);
                    var c = l(e.BIG_WIN_END);
                    k = g.delayCallback(0.5)(function () {
                        var a = b.getInstantVolume(i);
                        b.fade(a, 1, 0.5);
                        e.MAIN_LOOP;
                    });
                    c.fade(1, 0, 2);
                    g.delayCallback(2)(function () {
                        if (c.isPlaying()) {
                            c.stop();
                        }
                    });
                };
                c.playBigWinEndCoin = function () {
                    var a = f.GeneralAudioPool.bgm_bigwin_coins;
                    if (a.isPlaying()) {
                        a.stop();
                    }
                    a.play();
                    a.setVolume(1);
                };
                c.playBigWinEndFirework = function () {
                    var a = f.GeneralAudioPool.bgm_bigwin_firework;
                    if (a.isPlaying()) {
                        a.stop();
                    }
                    a.play();
                    a.setVolume(1);
                };
                c.stopBigWinEndCoin = function () {
                    var a = f.GeneralAudioPool.bgm_bigwin_coins;
                    a.fade(1, 0, 2);
                    g.delayCallback(2)(function () {
                        if (a.isPlaying()) {
                            a.stop();
                        }
                    });
                };
                c.stopBigWinEndFirework = function () {
                    var a = f.GeneralAudioPool.bgm_bigwin_firework;
                    a.fade(1, 0, 2);
                    g.delayCallback(2)(function () {
                        if (a.isPlaying()) {
                            a.stop();
                        }
                    });
                };
                cc._RF.pop();
            }
            function l(a) {
                switch (a) {
                    case e.MAIN_LOOP:
                        return f.GeneralAudioPool.bgm_mg;
                    case e.RESPIN:
                        return f.GeneralAudioPool.bgm_mg_b;
                    case e.BIG_WIN:
                        return f.GeneralAudioPool.bgm_bigwin_main;
                    case e.BIG_WIN_END:
                        return f.GeneralAudioPool.bgm_bigwin_end;
                    default:
                        return;
                }
            }
            function m() {
                l(e.MAIN_LOOP).setVolume(0);
                l(e.RESPIN).setVolume(0);
            }
        }, {
            AudioManager: "AudioManager",
            GConstants: "GConstants",
            Utils: "Utils"
        }],
        BVFrameworkEnum: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "ec7f7EEHK9MYKQtN9oOrPGU", "BVFrameworkEnum")) {
                var c = System.get("bvframework").BVFrameworkEnum;
                for (var d in c) {
                    b.exports[d] = c[d];
                }
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        BVFramework: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "a9a1dZAV2tCnpP1jdguoThD", "BVFramework")) {
                var c = System.get("bvframework").getGameContext;
                b.exports.getGameContext = c;
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        BackgroundControllerTwo: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "31ca9PU5j1LtaQhk68hUyoK", "BackgroundControllerTwo")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("Utils");
                var f = cc._decorator;
                var g = f.ccclass;
                var h = f.property;
                var i = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.bgLeft = undefined;
                        b.bgRight = undefined;
                        b.shine = undefined;
                        b.particles = [];
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.init = function () { };
                    b.prototype.setupToNormalState = function () {
                        this.bgLeft.active = false;
                        this.bgRight.active = false;
                        this.bgLeft.stopAllActions();
                        this.bgRight.stopAllActions();
                        this.shine.stopAllActions();
                        this.shine.opacity = 0;
                        this.bgLeft.position = cc.v3(this.bgLeft.position.x, 340);
                        this.bgRight.position = cc.v3(this.bgRight.position.x, 340);
                        this.particles.forEach(function (a) {
                            a.node.opacity = 0;
                            a.play();
                        });
                    };
                    b.prototype.setupToRespinState = function () {
                        this.bgLeft.active = true;
                        this.bgRight.active = true;
                        this.bgLeft.stopAllActions();
                        this.bgRight.stopAllActions();
                        this.bgLeft.position = cc.v3(this.bgLeft.position.x, 410);
                        this.bgRight.position = cc.v3(this.bgRight.position.x, 410);
                        this.shine.stopAllActions();
                        this.shine.opacity = 255;
                        this.shine.runAction(cc.repeatForever(cc.rotateBy(20, 360)));
                        this.particles.forEach(function (a) {
                            a.node.opacity = 255;
                            a.play();
                        });
                    };
                    b.prototype.zoomOut = function () {
                        this.bgLeft.active = true;
                        this.bgRight.active = true;
                        this.bgLeft.runAction(cc.moveTo(2.1, cc.v2(this.bgLeft.position.x, 410)).easing(cc.easeCubicActionInOut()));
                        this.bgRight.runAction(cc.moveTo(2.1, cc.v2(this.bgRight.position.x, 410)).easing(cc.easeCubicActionInOut()));
                        this.shine.stopAllActions();
                        this.shine.runAction(cc.sequence(cc.delayTime(0.75), cc.fadeTo(1.75, 155)));
                        this.shine.runAction(cc.repeatForever(cc.rotateBy(15, 360)));
                        this.particles.forEach(function (a) {
                            a.node.stopAllActions();
                            a.node.opacity = 0;
                            a.node.runAction(cc.fadeIn(1));
                            a.play();
                        });
                    };
                    b.prototype.zoomIn = function () {
                        var a = this;
                        this.bgLeft.runAction(cc.moveTo(2.1, cc.v2(this.bgLeft.position.x, 340)).easing(cc.easeCubicActionInOut()));
                        this.bgRight.runAction(cc.moveTo(2.1, cc.v2(this.bgRight.position.x, 340)).easing(cc.easeCubicActionInOut()));
                        this.shine.stopAllActions();
                        this.shine.runAction(cc.fadeOut(1));
                        this.particles.forEach(function (a) {
                            a.node.stopAllActions();
                            a.node.opacity = 0;
                            a.stop();
                            a.setCurrentTime(0);
                            a.node.getComponent(cc.Sprite).spriteFrame = undefined;
                        });
                        e.delayCallback(2.1)(function () {
                            a.bgLeft.active = false;
                            a.bgRight.active = false;
                        });
                    };
                    b.prototype.teaseZoomOut = function () {
                        this.bgLeft.active = true;
                        this.bgRight.active = true;
                        this.bgLeft.position = cc.v3(this.bgLeft.position.x, 340);
                        this.bgRight.position = cc.v3(this.bgRight.position.x, 340);
                        this.bgLeft.runAction(cc.moveTo(1, cc.v2(this.bgLeft.position.x, 375)).easing(cc.easeCubicActionInOut()));
                        this.bgRight.runAction(cc.moveTo(1, cc.v2(this.bgRight.position.x, 375)).easing(cc.easeCubicActionInOut()));
                    };
                    b.prototype.teaseZoomIn = function () {
                        var a = this;
                        this.bgLeft.position = cc.v3(this.bgLeft.position.x, 375);
                        this.bgRight.position = cc.v3(this.bgRight.position.x, 375);
                        this.bgLeft.runAction(cc.moveTo(1, cc.v2(this.bgLeft.position.x, 340)).easing(cc.easeCubicActionInOut()));
                        this.bgRight.runAction(cc.moveTo(1, cc.v2(this.bgRight.position.x, 340)).easing(cc.easeCubicActionInOut()));
                        e.delayCallback(1)(function () {
                            a.bgLeft.active = false;
                            a.bgRight.active = false;
                        });
                    };
                    b.prototype.destroy = function () {
                        return a.prototype.destroy.call(this);
                    };
                    __decorate([h(cc.Node)], b.prototype, "bgLeft", undefined);
                    __decorate([h(cc.Node)], b.prototype, "bgRight", undefined);
                    __decorate([h(cc.Node)], b.prototype, "shine", undefined);
                    __decorate([h([cc.Animation])], b.prototype, "particles", undefined);
                    return __decorate([g], b);
                }(cc.Component);
                c.default = i;
                cc._RF.pop();
            }
        }, {
            Utils: "Utils"
        }],
        BackgroundController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "f5ddfUyhRhBBK/0KJeh/j0H", "BackgroundController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = cc._decorator;
                var f = e.ccclass;
                var g = e.property;
                var h = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.bg1 = undefined;
                        b.bg2 = undefined;
                        b.shine2 = undefined;
                        b.leaf = undefined;
                        b.leafBlur = undefined;
                        b.bgAnim = undefined;
                        b.petalAnimHolder = [];
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.init = function () {
                        this.petalAnimHolder.forEach(function (a) {
                            a.getComponent("AnimParticleSystem").resetSystem();
                        });
                    };
                    b.prototype.setupToNormalState = function () {
                        this.bg1.stopAllActions();
                        this.bg2.stopAllActions();
                        this.bg1.scale = 1;
                        this.bg2.position = cc.v3(0, 230);
                        this.bg2.scale = 1;
                        this.shine2.stopAllActions();
                        this.shine2.scale = 1;
                        this.shine2.opacity = 0;
                        this.leaf.scale = 1.43;
                        this.leaf.position = cc.v3(0, 560);
                        this.leafBlur.scale = 2.4;
                        this.leafBlur.position = cc.v3(0, -344);
                    };
                    b.prototype.setupToRespinState = function () {
                        this.bg1.stopAllActions();
                        this.bg2.stopAllActions();
                        this.shine2.stopAllActions();
                        this.shine2.opacity = 255;
                        this.shine2.scale = 2;
                        this.bg1.scale = 0.95;
                        this.bg2.position = cc.v3(0, 170);
                        this.bg2.scale = 0.9;
                        this.leaf.scale = 1.33;
                        this.leaf.position = cc.v3(0, 500);
                        this.leafBlur.scale = 2.3;
                        this.leafBlur.position = cc.v3(0, -404);
                    };
                    b.prototype.zoomOut = function (a) {
                        this.bgAnim.play("background_out");
                        this.bgAnim.once(cc.Animation.EventType.FINISHED, function () {
                            if (a) {
                                a();
                            }
                        });
                        this.shine2.stopAllActions();
                        this.shine2.runAction(cc.sequence(cc.delayTime(2.2), cc.spawn(cc.scaleTo(0.75, 2), cc.fadeIn(0.95))));
                    };
                    b.prototype.zoomIn = function (a) {
                        this.bgAnim.play("background_in");
                        this.bgAnim.once(cc.Animation.EventType.FINISHED, function () {
                            if (a) {
                                a();
                            }
                        });
                        this.shine2.stopAllActions();
                        this.shine2.runAction(cc.sequence(cc.delayTime(0.2), cc.fadeOut(0.9)));
                    };
                    b.prototype.teaseZoomOut = function (a) {
                        this.X = a;
                        this.bgAnim.play("background_tease_out");
                        this.bgAnim.once(cc.Animation.EventType.FINISHED, function () {
                            if (a) {
                                a();
                            }
                        });
                    };
                    b.prototype.teaseZoomIn = function (a) {
                        this.Z = a;
                        this.bgAnim.play("background_tease_in");
                        this.bgAnim.once(cc.Animation.EventType.FINISHED, function () {
                            if (a) {
                                a();
                            }
                        });
                    };
                    b.prototype.destroy = function () {
                        return a.prototype.destroy.call(this);
                    };
                    __decorate([g(cc.Node)], b.prototype, "bg1", undefined);
                    __decorate([g(cc.Node)], b.prototype, "bg2", undefined);
                    __decorate([g(cc.Node)], b.prototype, "shine2", undefined);
                    __decorate([g(cc.Node)], b.prototype, "leaf", undefined);
                    __decorate([g(cc.Node)], b.prototype, "leafBlur", undefined);
                    __decorate([g(cc.Animation)], b.prototype, "bgAnim", undefined);
                    __decorate([g([cc.Node])], b.prototype, "petalAnimHolder", undefined);
                    return __decorate([f], b);
                }(cc.Component);
                c.default = h;
                cc._RF.pop();
            }
        }, {}],
        BaseListViewCell: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "24d8a0AiVJMa4yCegaay2ry", "BaseListViewCell")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = cc._decorator;
                var f = e.ccclass;
                var g = e.property;
                var h = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.label = undefined;
                        b.sprite = undefined;
                        b.selectedBackgroundColor = undefined;
                        b.normalBackgroundColor = undefined;
                        b.endPos = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.onLoad = function () {
                        this.setupTouchAction();
                    };
                    b.prototype.setupTouchAction = function () {
                        this.node.on(cc.Node.EventType.TOUCH_START, this.$, this);
                        this.node.on(cc.Node.EventType.TOUCH_MOVE, this.tt, this);
                        this.node.on(cc.Node.EventType.TOUCH_END, this.it, this);
                        this.node.on(cc.Node.EventType.TOUCH_CANCEL, this.st, this);
                        this.node.on(cc.Node.EventType.MOUSE_ENTER, this.et, this);
                        this.node.on(cc.Node.EventType.MOUSE_LEAVE, this.nt, this);
                    };
                    b.prototype.removeTouchAction = function () {
                        this.node.off(cc.Node.EventType.TOUCH_START, this.$, this);
                        this.node.off(cc.Node.EventType.TOUCH_MOVE, this.tt, this);
                        this.node.off(cc.Node.EventType.TOUCH_END, this.it, this);
                        this.node.off(cc.Node.EventType.TOUCH_CANCEL, this.st, this);
                        this.node.off(cc.Node.EventType.MOUSE_ENTER, this.et, this);
                        this.node.off(cc.Node.EventType.MOUSE_LEAVE, this.nt, this);
                    };
                    b.prototype.et = function (a) {
                        if (this.mouseEnterAction) {
                            this.mouseEnterAction(a);
                        }
                    };
                    b.prototype.nt = function (a) {
                        if (this.mouseLeaveAction) {
                            this.mouseLeaveAction(a);
                        }
                    };
                    b.prototype.$ = function (a) {
                        var b = a.touch;
                        var c = cc.v2(b.getLocation().x, b.getLocation().y);
                        this.startPos = c;
                        this.node.color = this.selectedBackgroundColor;
                        if (this.touchStartAction) {
                            this.touchStartAction(a);
                        }
                    };
                    b.prototype.tt = function (a) {
                        this.node.color = this.normalBackgroundColor;
                        if (this.touchMoveAction) {
                            this.touchMoveAction(a);
                        }
                    };
                    b.prototype.it = function (a) {
                        var b = a.touch;
                        var c = cc.v2(b.getLocation().x, b.getLocation().y);
                        this.endPos = c;
                        this.node.color = this.normalBackgroundColor;
                        a.stopPropagationImmediate();
                        if (this.touchEndAction) {
                            this.touchEndAction(a);
                        }
                    };
                    b.prototype.st = function (a) {
                        var b = a.touch;
                        var c = cc.v2(b.getLocation().x, b.getLocation().y);
                        this.endPos = c;
                        this.node.color = this.normalBackgroundColor;
                        a.stopPropagationImmediate();
                        if (this.touchCancelAction) {
                            this.touchCancelAction(a);
                        }
                    };
                    b.prototype.destroy = function () {
                        this.removeTouchAction();
                        a.prototype.destroy.call(this);
                    };
                    __decorate([g(cc.Label)], b.prototype, "label", undefined);
                    __decorate([g(cc.Sprite)], b.prototype, "sprite", undefined);
                    __decorate([g(cc.Color)], b.prototype, "selectedBackgroundColor", undefined);
                    __decorate([g(cc.Color)], b.prototype, "normalBackgroundColor", undefined);
                    return __decorate([f], b);
                }(cc.Component);
                c.default = h;
                cc._RF.pop();
            }
        }, {}],
        BaseScroller: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "7a55d+EM2dKr590KKrgiTXR", "BaseScroller")) {
                var d;
                var e = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", e);
                c.SCROLLER_EVENT = c.ScrollerState = undefined;
                (function (a) {
                    a[a.IDLE = 0] = "IDLE";
                    a[a.RUNNING = 1] = "RUNNING";
                    a[a.ENDED = 2] = "ENDED";
                })(d = c.ScrollerState || (c.ScrollerState = {}));
                c.SCROLLER_EVENT = Object.freeze({
                    RUN: "run",
                    END: "end",
                    ACCELERATE: "accelerate",
                    DECELERATE: "decelerate"
                });
                var f = function (a) {
                    function b(b) {
                        var c = a.call(this) || this;
                        c.state = d.IDLE;
                        c.config = undefined;
                        c.runtimeConfig = undefined;
                        c.config = b;
                        c.runtimeConfig = __assign({}, b);
                        return c;
                    }
                    __extends(b, a);
                    Object.defineProperty(b.prototype, "isPlaying", {
                        get: function () {
                            return this.state === d.RUNNING;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "isEnded", {
                        get: function () {
                            return this.state === d.ENDED;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.setConfig = function (a) {
                        Object.assign(this.config, a);
                    };
                    b.prototype.updateRunTimeConfig = function (a) {
                        Object.assign(this.runtimeConfig, a);
                    };
                    b.prototype.getRunTimeConfig = function () {
                        return __assign({}, this.runtimeConfig);
                    };
                    b.prototype.reset = function () {
                        this.state = d.IDLE;
                        this.runtimeConfig = __assign({}, this.config);
                        this.onReset();
                    };
                    b.prototype.run = function () {
                        if (this.state === d.IDLE) {
                            this.state = d.RUNNING;
                            this.onRun();
                        }
                    };
                    b.prototype.end = function () {
                        if (this.state !== d.ENDED) {
                            this.state = d.ENDED;
                            this.onEnd();
                        }
                    };
                    b.prototype.onReset = function () { };
                    b.prototype.onRun = function () { };
                    b.prototype.onEnd = function () { };
                    b.prototype.emitEvent = function (a, b) {
                        var c = {
                            scroller: this,
                            speedFactor: b
                        };
                        var d = c;
                        this.emit(a, d);
                    };
                    return b;
                }(cc.EventTarget);
                c.default = f;
                cc._RF.pop();
            }
        }, {}],
        BaseUIHelper: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "6c985/s6btKVqrcmkuEBQ1t", "BaseUIHelper")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                a("TweaksData");
                var e = a("Utils");
                var f = a("SettingMenuHelper");
                var h = a("SkipHandler");
                var g = a("BGMHandler");
                var i = a("InfoboardController");
                var j = a("GConstants");
                var l = a("SpaceBarInterrupter");
                var k = a("WinLine.spec");
                var m = a("AutomationDecorator");
                var n = a("GSlotTransactionModel");
                var o = a("GameUtils");
                var p = a("GeneralAudioConstant");
                var r = a("AudioManager");
                var q = function () {
                    function a(a, b) {
                        this.name = "Base UI Helper";
                        this.dataSource = undefined;
                        this.generalControllers = undefined;
                        this.ot = undefined;
                        this.ct = 0;
                        this.ht = undefined;
                        this.generalControllers = b;
                        this.dataSource = a;
                    }
                    a.prototype.destroy = function () {
                        this.generalControllers = undefined;
                        this.dataSource = undefined;
                    };
                    a.prototype.onStateFullyIdle = function () {
                        var a = this.dataSource.transactionModel;
                        var b = a.winLines;
                        var c = a.winValues;
                        var d = a.reels;
                        var f = a.wildCount;
                        var h = this.generalControllers;
                        var i = h.paySelectEffectController;
                        var j = h.slotTintController;
                        var k = h.symbolPopoutController;
                        var g = h.tigerController;
                        var l = [];
                        d.forEach(function (a, c) {
                            if (a === -1) {
                                l.push(c);
                            }
                        });
                        k.enablePanel();
                        k.setupButtonEvent(l);
                        if (b) {
                            j.fadeIn(0.2);
                            i.playAlternateLines(b, c);
                        } else {
                            this.ct++;
                            if (this.ct > 5) {
                                g.noWin(f);
                                this.ct = 0;
                            }
                            this.ht = e.delayCallback(20)(function () {
                                g.noSpin(f);
                            });
                        }
                    };
                    a.prototype.preSpinningCleanup = function (a) {
                        var c = this;
                        var b = this.generalControllers;
                        var d = b.infoboardController;
                        var f = b.slotTintController;
                        var h = b.symbolPopoutController;
                        var i = b.slotController;
                        var k = this.dataSource.transactionModel;
                        var l = k.winLines;
                        var g = k.accumulatedWinAmount;
                        var m = k.featureWinSymbol;
                        if (l || g > 0) {
                            d.hideMediumWinEffect();
                            this.ot = e.delayCallback(j.INFOBOARD_TIMING.DELAY_RESET)(function () {
                                var a = c.dataSource.transactionModel;
                                var b = a.stateTransitionFrom;
                                var e = a.stateTransitionTo;
                                if (b === n.SpinType.RESPIN) {
                                    d.playRespin(m);
                                } else if (b === n.SpinType.NORMAL && e === n.SpinType.RESPIN) {
                                    d.playZoom();
                                } else {
                                    d.resetInfoboard(false);
                                }
                                d.resumeInfoboard();
                            });
                            f.fadeOut(0.1);
                            i.setSlotItemsVisible(true, [0, 1, 2, 3, 4, 5, 6, 7, 8]);
                            this.extraPreSpinningCleanup(a);
                        } else {
                            this.extraPreSpinningCleanup(a);
                        }
                        h.hidePopOutItem();
                        var o = this.ht;
                        this.ht = undefined;
                        if (o) {
                            o();
                        }
                    };
                    a.prototype.extraPreSpinningCleanup = function (a) {
                        if (a) {
                            a();
                        }
                    };
                    a.prototype.playSlotSpinEffect = function () { };
                    a.prototype.setAvailablePrizeAction = function () {
                        var a = this.generalControllers.infoboardController;
                        var b = this.dataSource.transactionModel.accumulatedWinAmount;
                        if (a.infoboardState === i.InfoBoardState.SHOWING_WIN && b === 0) {
                            var c = this.ot;
                            this.ot = undefined;
                            if (c) {
                                c();
                            }
                            a.resetInfoboard(false);
                            a.resumeInfoboard();
                        }
                    };
                    a.prototype.renderFeatureBeforePrize = function (a) {
                        var c = this.dataSource.transactionModel;
                        var d = c.winLines;
                        var f = c.stateTransitionTo;
                        var h = c.stateTransitionFrom;
                        var i = c.reels;
                        var j = this.generalControllers;
                        var k = j.stickyController;
                        var l = j.slotController;
                        var g = j.slotTintController;
                        var m = j.paySelectEffectController;
                        var o = j.angpaoController;
                        var p = j.tigerController;
                        if (h === n.SpinType.RESPIN && f === n.SpinType.NORMAL) {
                            k.playWin(d);
                            g.fadeIn(0.2);
                            l.reloadData(i);
                            e.delayCallback(0.4)(function () {
                                p.playRespinWin();
                            });
                        }
                        e.delayCallback(0.2)(function () {
                            k.playLargeSymbol(i, d, function () {
                                o.win10();
                                l.setSlotItemsVisible(false, [0, 1, 2, 3, 4, 5, 6, 7, 8]);
                                m.stopPaySelect(false);
                            }, a);
                        });
                    };
                    a.prototype.clearLargeSymbol = function (a) {
                        var b = this.generalControllers;
                        var c = b.stickyController;
                        b.slotController.setSlotItemsVisible(true, [0, 1, 2, 3, 4, 5, 6, 7, 8]);
                        c.clearLargeSymbol(a);
                    };
                    a.prototype.playAllLines = function (a) {
                        var b = this.dataSource.transactionModel;
                        var c = b.winLines;
                        var d = b.stateTransitionTo;
                        var e = b.reels;
                        var h = b.featureWinSymbol;
                        var i = this.generalControllers;
                        var k = i.paySelectEffectController;
                        var l = i.slotTintController;
                        var g = i.stickyController;
                        var m = i.payLineNumberController;
                        var o = i.payLineController;
                        var p = f.settingMenuHelper.turboSpinOn;
                        var q = p ? (1 - j.TURBO_SPIN_SPEEDUP_FACTOR) * 0.2 : 0.2;
                        function r() {
                            if (a) {
                                a();
                            }
                        }
                        if (c) {
                            if (d === n.SpinType.NORMAL) {
                                this.extraPlayAllLinesAction();
                                l.fadeIn(q);
                                k.playAllLines(c, true, p, r);
                            } else {
                                var s = c.winPositions;
                                s.forEach(function (a, b) {
                                    s[b] = parseInt(a, 10);
                                });
                                m.show(s);
                                o.showLine(s);
                                g.playSticky(e, c, h, r);
                            }
                        } else {
                            r();
                        }
                    };
                    a.prototype.playSmallWin = function (a, b) {
                        var c = this.generalControllers;
                        var d = c.infoboardController;
                        var e = c.tigerController;
                        var f = this.dataSource.transactionModel;
                        var h = f.wildCount;
                        var i = f.stateTransitionTo;
                        var j = f.stateTransitionFrom;
                        this.updateBalance();
                        function g() {
                            if (b) {
                                b();
                            }
                        }
                        if (o.checkOperatorProfit(a, this.dataSource)) {
                            if (i === n.SpinType.NORMAL && j === n.SpinType.NORMAL) {
                                e.playWin(h);
                            }
                            d.playSmallWin(a, g);
                            var k = p.GENERAL_AUDIO.prizeSmalwin.key;
                            r.stopAudioIfPlaying(k);
                            r.playAudioIfNotPlaying(k);
                        } else {
                            d.resetInfoboard();
                            if (g) {
                                g();
                            }
                        }
                        var l = this.ot;
                        this.ot = undefined;
                        if (l) {
                            l();
                        }
                        this.extraSmallWinAction();
                    };
                    a.prototype.playMediumWin = function (a, c) {
                        var d = this;
                        var f = this.generalControllers;
                        var i = f.infoboardController;
                        var j = f.slotController;
                        var k = f.clickEffectController;
                        var m = f.tigerController;
                        var o = this.dataSource.transactionModel;
                        var g = o.wildCount;
                        var p = o.stateTransitionFrom;
                        var q = o.stateTransitionTo;
                        if (p === n.SpinType.NORMAL && q === n.SpinType.NORMAL) {
                            m.playBigWin(g);
                        }
                        h.default.init(j.node, k);
                        i.playMediumWin(0, a, function () {
                            d.updateBalance();
                            l.spaceBarInterrupter.unsubscribeEventInterrupter("medium_win");
                            e.delayCallback(0.7)(c);
                        });
                        l.spaceBarInterrupter.subscribeEventInterrupter("medium_win", undefined, i.quickStopMediumWin.bind(i));
                        var r = this.ot;
                        this.ot = undefined;
                        if (r) {
                            r();
                        }
                        this.extraMediumWinAction();
                    };
                    a.prototype.playBigWin = function (a, b, c) {
                        var d = this;
                        var f = this.generalControllers;
                        var i = f.infoboardController;
                        var k = f.bigWinController;
                        var l = f.clickEffectController;
                        var m = f.tigerController;
                        var o = f.slotController;
                        var q = f.angpaoController;
                        var s = this.dataSource.transactionModel;
                        var t = s.wildCount;
                        var u = s.winLines;
                        var v = s.stateTransitionFrom;
                        var w = s.stateTransitionTo;
                        function x() {
                            h.default.init(o.node, l);
                            var b = p.GENERAL_AUDIO.infobarAfterBigwin.key;
                            r.stopAudioIfPlaying(b);
                            r.playAudioIfNotPlaying(b);
                            i.playBigWin(a);
                            d.updateBalance();
                            e.delayCallback(1)(c);
                        }
                        var y = 0;
                        if (u && u.winPositions) {
                            for (var z = 0; z < u.winPositions.length; z++) {
                                if (u.winPositions[z] >= 1 && u.winPositions[z] <= 3) {
                                    y++;
                                }
                            }
                        }
                        if (u && u.winPositions && y >= 3) {
                            e.sequenceCallback(function (b) {
                                d.extraBigWinAction();
                                i.playSmallWin(a / 10, b);
                                if (v === n.SpinType.NORMAL && w === n.SpinType.NORMAL) {
                                    m.playBigWin(t);
                                }
                                var c = p.GENERAL_AUDIO.prizeSmalwin.key;
                                r.stopAudioIfPlaying(c);
                                r.playAudioIfNotPlaying(c);
                            }, function (a) {
                                if (v === n.SpinType.NORMAL && w === n.SpinType.NORMAL) {
                                    i.playNormalMultiplier(a);
                                } else {
                                    q.hide10();
                                    i.playMultiplier(m.getTigerPosition(), a);
                                }
                            }, function (c) {
                                h.default.init(k.node, l);
                                g.playBigWinBGM();
                                k.play(a, b, c);
                                k.initBigWinOutSoundEffect(g.playNormalBGMFromBigWinEnd);
                                var e = d.ot;
                                d.ot = undefined;
                                if (e) {
                                    e();
                                }
                            })(x);
                        } else {
                            h.default.init(k.node, l);
                            e.delayCallback(j.BIG_WIN_TIMING.BIG_WIN_DELAY)(function () {
                                g.playBigWinBGM();
                                d.extraBigWinAction();
                                k.play(a, b, x);
                                k.initBigWinOutSoundEffect(g.playNormalBGMFromBigWinEnd);
                                var c = d.ot;
                                d.ot = undefined;
                                if (c) {
                                    c();
                                }
                            });
                        }
                    };
                    a.prototype.updateBalance = function (a) {
                        var b = this.dataSource.playerModel.balance;
                        var c = this.dataSource.transactionModel.accumulatedWinAmount;
                        if (c > 0) {
                            f.settingMenuHelper.setWinAmount(c);
                        }
                        f.settingMenuHelper.setBalance(b);
                        if (a) {
                            a();
                        }
                    };
                    a.prototype.setWinThreshold = function (a) {
                        this.generalControllers.infoboardController.setThreshold(a);
                    };
                    a.prototype.extraSmallWinAction = function () { };
                    a.prototype.extraMediumWinAction = function () { };
                    a.prototype.extraBigWinAction = function () { };
                    a.prototype.extraPlayAllLinesAction = function () { };
                    __decorate([m.automationDec({
                        func: k.winHighlightShown
                    })], a.prototype, "playAllLines", null);
                    return a;
                }();
                c.default = q;
                cc._RF.pop();
            }
        }, {
            AudioManager: "AudioManager",
            AutomationDecorator: "AutomationDecorator",
            BGMHandler: "BGMHandler",
            GConstants: "GConstants",
            GSlotTransactionModel: "GSlotTransactionModel",
            GameUtils: "GameUtils",
            GeneralAudioConstant: "GeneralAudioConstant",
            InfoboardController: "InfoboardController",
            SettingMenuHelper: "SettingMenuHelper",
            SkipHandler: "SkipHandler",
            SpaceBarInterrupter: "SpaceBarInterrupter",
            TweaksData: "TweaksData",
            Utils: "Utils",
            "WinLine.spec": "WinLine.spec"
        }],
        BetModifierButton: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "076aehdcx9HQI7+9hg7FlGu", "BetModifierButton")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("GenericSettingButton");
                var f = a("UIAppearanceHelper");
                var g = a("Utils");
                var h = cc._decorator;
                var i = h.ccclass;
                var j = h.property;
                var k = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.isIncreaseBet = false;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.setShowSettingToastCallback = function (a) {
                        this.rt = a;
                    };
                    Object.defineProperty(b.prototype, "showSettingToast", {
                        get: function () {
                            if (!this.rt) {
                                throw Error("BetModifierButton :: showSettingToast is undefined. Please set it using setShowSettingToastCallback");
                            }
                            return this.rt;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.setHideSettingToastCallback = function (a) {
                        this.at = a;
                    };
                    Object.defineProperty(b.prototype, "hideSettingToast", {
                        get: function () {
                            if (!this.at) {
                                throw Error("BetModifierButton :: hideSettingToast is undefined. Please set it using setHideSettingToastCallback");
                            }
                            return this.at;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.increaseBet = function (a, b, c) {
                        var d = a;
                        if (b === undefined) {
                            for (var e = 0; e < d.length; e++) {
                                if (parseFloat(a[e]) > parseFloat(c)) {
                                    b = e - 1;
                                    c = a[e - 1];
                                    break;
                                }
                            }
                        } else if (b >= d.length - 1) {
                            this.showSettingToast(shell.I18n.t("SettingMenu.BiggestBet"), 2);
                            return {
                                selectedBet: b,
                                selectedBetAmount: c
                            };
                        }
                        if (b === undefined) {
                            throw Error("BetModifierButton :: increaseBet : selectedBet is undefined and cannot be located from selectedBetAmount ");
                        }
                        c = a[++b];
                        if (b >= d.length - 1) {
                            this.showSettingToast(shell.I18n.t("SettingMenu.BiggestBet"), 2);
                        } else {
                            this.hideSettingToast();
                        }
                        return {
                            selectedBet: b,
                            selectedBetAmount: c
                        };
                    };
                    b.prototype.decreaseBet = function (a, b, c) {
                        if (b === undefined) {
                            for (var d = a.length - 1; d >= 0; d--) {
                                if (parseFloat(a[d]) < parseFloat(c)) {
                                    b = d + 1;
                                    c = a[d + 1];
                                    break;
                                }
                            }
                        } else if (b <= 0) {
                            this.showSettingToast(shell.I18n.t("SettingMenu.SmallestBet"), 2);
                            return {
                                selectedBet: b,
                                selectedBetAmount: c
                            };
                        }
                        if (b === undefined) {
                            throw Error("BetModifierButton :: decreaseBet : selectedBet is undefined and cannot be located from selectedBetAmount ");
                        }
                        c = a[--b];
                        if (b <= 0) {
                            this.showSettingToast(shell.I18n.t("SettingMenu.SmallestBet"), 2);
                        } else {
                            this.hideSettingToast();
                        }
                        return {
                            selectedBet: b,
                            selectedBetAmount: c
                        };
                    };
                    b.prototype.updateBetModifierColor = function (a, b) {
                        if (this.isIncreaseBet) {
                            this.isReachLimit = !!(b && a >= b);
                        } else {
                            this.isReachLimit = a <= 0;
                        }
                        this.interactableButtonColor(this.isInteractable);
                    };
                    b.prototype.changeButtonPressedColor = function (a) {
                        if (this.buttonTheme) {
                            var b = f.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".normal");
                            var c = f.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".pressed");
                            if (this.isReachLimit) {
                                var d = f.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".disabled");
                                g.setNodeColorWithOpacity(this.iconSprite, d);
                            } else {
                                g.setNodeColorWithOpacity(this.iconSprite, a ? c : b);
                            }
                        }
                    };
                    b.prototype.interactableButtonColor = function (a) {
                        if (this.buttonTheme) {
                            var b = f.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".normal");
                            var c = f.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".disabled");
                            if (this.isReachLimit) {
                                g.setNodeColorWithOpacity(this.iconSprite, c);
                            } else {
                                g.setNodeColorWithOpacity(this.iconSprite, a ? b : c);
                            }
                        }
                    };
                    b.prototype.maxBet = function (a) {
                        var b = a.length - 1;
                        var c = a[b];
                        var d = {
                            selectedBet: b,
                            selectedBetAmount: c
                        };
                        this.showSettingToast(shell.I18n.t("SettingMenu.BiggestBet"), 2);
                        return d;
                    };
                    b.prototype.buttonActivate = function (a) {
                        if (a) {
                            this.node.active = true;
                            if (this.node.parent) {
                                this.node.parent.active = true;
                            }
                            g.deferCallback(this)(this.enableTouchInteraction);
                        } else {
                            this.disableTouchInteraction();
                            this.node.active = false;
                            if (this.node.parent) {
                                this.node.parent.active = false;
                            }
                        }
                    };
                    __decorate([j(cc.Boolean)], b.prototype, "isIncreaseBet", undefined);
                    return __decorate([i], b);
                }(e.default);
                c.default = k;
                cc._RF.pop();
            }
        }, {
            GenericSettingButton: "GenericSettingButton",
            UIAppearanceHelper: "UIAppearanceHelper",
            Utils: "Utils"
        }],
        BetRepository: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "14dfa+lfKlIS5vAzSig9n4q", "BetRepository")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.BetRepository = undefined;
                var e = function () {
                    function a(a, b) {
                        this.ut = a;
                        this.lt = b;
                        this.ft = a;
                        this.vt = b;
                    }
                    Object.defineProperty(a.prototype, "selectedBetLevelValue", {
                        get: function () {
                            return this.ft;
                        },
                        set: function (a) {
                            this.ft = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(a.prototype, "selectedBetSizeValue", {
                        get: function () {
                            return this.vt;
                        },
                        set: function (a) {
                            this.vt = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(a.prototype, "betLevelValue", {
                        get: function () {
                            return this.ut;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(a.prototype, "betSizeValue", {
                        get: function () {
                            return this.lt;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    a.prototype.updateRemoteBets = function (a, b) {
                        this.ut = this.ft = a;
                        this.lt = this.vt = b;
                    };
                    return a;
                }();
                c.BetRepository = e;
                cc._RF.pop();
            }
        }, {}],
        BigSymbolItemController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "2c00cjJGZxN3qABrM8SRtbm", "BigSymbolItemController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("Utils");
                var f = a("SymbolImageHandler");
                var g = cc._decorator;
                var h = g.ccclass;
                var i = g.property;
                var j = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.mainAnim = undefined;
                        b.symbolSprite = undefined;
                        b.mask = undefined;
                        b.animSprites = [];
                        b.loopAnims = [];
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.playBigSymbol = function (a, b) {
                        this._t();
                        this.symbolSprite.spriteFrame = f.symbolImageHandler.symbolImages[a];
                        this.mask.spriteFrame = f.symbolImageHandler.symbolImages[a];
                        this.symbolSprite.node.runAction(cc.spawn(cc.fadeIn(0.5), cc.scaleTo(0.5, 3).easing(cc.easeBackOut())));
                        this.loopAnims.forEach(function (a) {
                            a.play();
                        });
                        this.mainAnim.play();
                        e.delayCallback(0.5)(function () {
                            if (b) {
                                b();
                            }
                        });
                    };
                    b.prototype.stopBigSymbol = function (a) {
                        this.loopAnims.forEach(function (a) {
                            a.stop();
                            a.setCurrentTime(0);
                        });
                        this.animSprites.forEach(function (a) {
                            a.spriteFrame = undefined;
                        });
                        this.symbolSprite.node.runAction(cc.sequence(cc.fadeOut(0.2), cc.callFunc(this._t.bind(this), cc.callFunc(function () {
                            if (a) {
                                a();
                            }
                        }))));
                    };
                    b.prototype._t = function () {
                        this.symbolSprite.node.stopAllActions();
                        this.symbolSprite.node.scale = 2.8;
                        this.symbolSprite.node.opacity = 0;
                        this.mainAnim.stop();
                        this.mainAnim.setCurrentTime(0);
                        this.loopAnims.forEach(function (a) {
                            a.stop();
                            a.setCurrentTime(0);
                        });
                    };
                    __decorate([i(cc.Animation)], b.prototype, "mainAnim", undefined);
                    __decorate([i(cc.Sprite)], b.prototype, "symbolSprite", undefined);
                    __decorate([i(cc.Mask)], b.prototype, "mask", undefined);
                    __decorate([i([cc.Sprite])], b.prototype, "animSprites", undefined);
                    __decorate([i([cc.Animation])], b.prototype, "loopAnims", undefined);
                    return __decorate([h], b);
                }(cc.Component);
                c.default = j;
                cc._RF.pop();
            }
        }, {
            SymbolImageHandler: "SymbolImageHandler",
            Utils: "Utils"
        }],
        "BigWinController.spec": [function (a, b, c) {
            'use strict';

            var d = {
                value: true
            };
            if (!cc._RF.push(b, "349b6Y3nmhLKrir5iiZi+ry", "BigWinController.spec")) {
                Object.defineProperty(c, "__esModule", d);
                c.skipBigWinAnimationEvent = c.skipBigWinNumberRollEvent = c.initBigWinControllerNodes = undefined;
                c.initBigWinControllerNodes = function (a) {
                    var b = System.get("automation") && System.get("automation").GameConfigs;
                    if (b) {
                        b.initNodeConfig(a.skipButtonNode, "big_win_skip_button");
                    }
                };
                c.skipBigWinNumberRollEvent = function () {
                    var a = System.get("automation") && System.get("automation").GameData;
                    if (a) {
                        a.emit("BigWin", {
                            displayState: "SkipNumberRollEnabled"
                        });
                    }
                };
                c.skipBigWinAnimationEvent = function () {
                    var a = System.get("automation") && System.get("automation").GameData;
                    if (a) {
                        a.emit("BigWin", {
                            displayState: "SkipAnimationEnabled"
                        });
                    }
                };
                cc._RF.pop();
            }
        }, {}],
        BigWinController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "0c8afnrBkpKm56g7KUrARGr", "BigWinController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = {
                    top: 250,
                    bottom: -353
                };
                var f = {
                    top: 340,
                    bottom: -353
                };
                var g = {
                    top: 440,
                    bottom: -353
                };
                var h;
                var i = a("AnalyticsHelper");
                var j = a("Utils");
                var l = a("SkipHandler");
                var m = a("GConstants");
                var n = a("BGMHandler");
                var k = a("GameEventHandler");
                var o = a("SpaceBarInterrupter");
                var p = a("GDataSource");
                var q = a("BigWinController.spec");
                var r = a("AutomationDecorator");
                var s = a("BigWinFireworkController");
                var t = cc._decorator;
                var u = t.ccclass;
                var v = t.property;
                var w = [e, f, g];
                var x = ["bw", "mw", "smw"];
                var y = new cc.color(255, 255, 255);
                (function (a) {
                    a[a.BIG_WIN = 0] = "BIG_WIN";
                    a[a.MEGA_WIN = 1] = "MEGA_WIN";
                    a[a.SUPER_MEGA_WIN = 2] = "SUPER_MEGA_WIN";
                })(h || (h = {}));
                var z = m.BIG_WIN_TIMING.DISMISS_BIG_WIN_DELAY;
                var A = m.BIG_WIN_TIMING.AUTO_DISMISS_BIG_WIN_DELAY;
                var B = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.screenTintNode = undefined;
                        b.titleNode = undefined;
                        b.titleSpriteNode = undefined;
                        b.timedNumberRollNode = undefined;
                        b.numberDisplayNode = undefined;
                        b.coinAnimParticleNode = undefined;
                        b.frame1 = undefined;
                        b.frame2 = undefined;
                        b.particle1 = undefined;
                        b.particle2 = undefined;
                        b.flares = [];
                        b.shine1 = undefined;
                        b.ribbons = [];
                        b.shine2 = undefined;
                        b.petals = undefined;
                        b.coins = undefined;
                        b.coinType = [];
                        b.shine3 = undefined;
                        b.shine4 = undefined;
                        b.shine5 = undefined;
                        b.shine6 = undefined;
                        b.topBar = undefined;
                        b.topBarSpine = undefined;
                        b.bottomBar = undefined;
                        b.frontShine7 = undefined;
                        b.frontNode = undefined;
                        b.lastNode = undefined;
                        b.particles = [];
                        b.frame1Sprites = [];
                        b.shine1Sprites = [];
                        b.shine2Sprites = [];
                        b.shine3Sprites = [];
                        b.shine4Sprites = [];
                        b.shine5Sprites = [];
                        b.shine6Sprites = [];
                        b.frontShine7Sprites = [];
                        b.topBarSprites = [];
                        b.bottomBarSprites = [];
                        b.fireworkController = undefined;
                        b.pt = undefined;
                        b.bt = undefined;
                        b.St = false;
                        b.gt = false;
                        b.Ct = undefined;
                        b.yt = [];
                        b.Mt = undefined;
                        b.At = undefined;
                        b.It = 0;
                        b.Ot = undefined;
                        b.Ht = undefined;
                        b.Bt = undefined;
                        b.Gt = false;
                        b.Nt = undefined;
                        b.Tt = undefined;
                        b.Pt = undefined;
                        b.Rt = undefined;
                        b.Lt = undefined;
                        return b;
                    }
                    var c = {
                        func: q.initBigWinControllerNodes
                    };
                    var d = {
                        func: q.skipBigWinNumberRollEvent
                    };
                    var e = {
                        func: q.skipBigWinAnimationEvent
                    };
                    __extends(b, a);
                    b.prototype.init = function () {
                        this.node.active = false;
                        this.pt = this.timedNumberRollNode.getComponent("NumberDisplayController");
                        this.bt = this.timedNumberRollNode.getComponent("TimedWinRollController");
                        this.Nt = this.coinAnimParticleNode.getComponent("AnimParticleSystem");
                        this.At = this.titleSpriteNode.getComponent("cc.Sprite");
                        this.Mt = this.titleSpriteNode.scale;
                        this._t();
                        this.Et({
                            skipButtonNode: this.node
                        });
                    };
                    b.prototype.Et = function () { };
                    b.prototype.setBigWinLocalizedTitleSpriteFrame = function (a) {
                        this.yt[0] = a.getSpriteFrame("bw");
                        this.yt[1] = a.getSpriteFrame("mw");
                        this.yt[2] = a.getSpriteFrame("smw");
                    };
                    b.prototype.initBigWinOutSoundEffect = function (a) {
                        this.Lt = a;
                    };
                    b.prototype.destroy = function () {
                        this._t();
                        this.node.destroy();
                        return a.prototype.destroy.call(this);
                    };
                    b.prototype.play = function (a, b, c) {
                        if (this.gt !== true) {
                            this.node.active = true;
                            this.gt = true;
                            this.Ot = a;
                            this.Bt = b;
                            this.Rt = c;
                            this.Pt = undefined;
                            this.kt = false;
                            var d = this.bt;
                            d.setNumbersCallback([b.bigWinThreshold, b.megaWinThreshold, b.superMegaWinThreshold]);
                            d.init({
                                bigWinThreshold: b.bigWinThreshold,
                                megaWinThreshold: b.megaWinThreshold,
                                superMegaWinThreshold: b.superMegaWinThreshold,
                                bigWinDuration: m.BIG_WIN_TIMING.BIG_WIN_ROLL_DURATION,
                                megaWinDuration: m.BIG_WIN_TIMING.MEGA_WIN_ROLL_DURATION,
                                superMegaWinDuration: m.BIG_WIN_TIMING.SUPER_MEGA_WIN_ROLL_DURATION,
                                totalWin: a
                            });
                            this.scheduleOnce(this.Ut, m.BIG_WIN_TIMING.SKIP_ROLL_DELAY);
                            this.jt();
                        }
                    };
                    b.prototype.jt = function () {
                        this.St = true;
                        this.bt.play(this.Dt.bind(this));
                        this.Ht = h.BIG_WIN;
                        this.Ct = undefined;
                        this.node.opacity = 255;
                        this.Wt(true);
                    };
                    b.prototype.Dt = function (a) {
                        var b = this;
                        var c = this.Bt;
                        if (a !== this.It && (this.It = a, a === c.megaWinThreshold ? (this.Ht = h.MEGA_WIN, this.Wt()) : a === c.superMegaWinThreshold && (this.Ht = h.SUPER_MEGA_WIN, this.kt = true, this.Wt()), a === this.Ot)) {
                            this.St = false;
                            k.emitGameEffectStateChangedEvent({
                                displayState: "DidUpdate",
                                effectType: "BigWin"
                            });
                            this.frontShine7.parent = this.lastNode;
                            this.frontShine7.scale = 3;
                            this.frontShine7.getComponent(cc.Sprite).spriteFrame = this.frontShine7Sprites[2];
                            this.frontShine7.stopAllActions();
                            this.frontShine7.runAction(cc.spawn(cc.scaleTo(1.55, 4.55), cc.sequence(cc.fadeIn(0.3), cc.fadeOut(1.25))));
                            this.particles.forEach(function (a) {
                                a.node.parent = b.lastNode;
                                a.play();
                                a.setCurrentTime(0);
                            });
                            this.xt();
                            var d = this.Lt;
                            this.Lt = undefined;
                            if (d) {
                                d();
                            }
                            if (this.Ht >= h.MEGA_WIN) {
                                n.playBigWinEndCoin();
                            }
                            if (this.Ht === h.SUPER_MEGA_WIN) {
                                n.playBigWinEndFirework();
                            }
                            this.scheduleOnce(this.Ut, z);
                            var e = p.gDataSource.isGameReplaying ? 1 : A;
                            this.scheduleOnce(this.Ft, e);
                        }
                    };
                    b.prototype.Ft = function () {
                        var a = this;
                        k.emitGameEffectStateChangedEvent({
                            displayState: "WillEnd",
                            effectType: "BigWin"
                        });
                        this.Vt(function () {
                            a._t();
                            l.default.removeEvent(a.node);
                            var b = a.Rt;
                            a.Rt = undefined;
                            if (b) {
                                b();
                            }
                        });
                    };
                    b.prototype._t = function () {
                        this.gt = false;
                        this.St = false;
                        this.At.spriteFrame = undefined;
                        this.It = undefined;
                        this.pt.clear();
                        this.unschedule(this.Ut);
                        this.unschedule(this.Ft);
                        this.zt();
                        this.qt();
                        this.node.active = false;
                    };
                    b.prototype.Wt = function (a) {
                        if (a === undefined) {
                            a = false;
                        }
                        if (a) {
                            this.titleNode.runAction(cc.spawn(cc.sequence(cc.scaleTo(0.2, 1.1), cc.scaleTo(0.85, 1)), cc.fadeIn(0.2)));
                            this.numberDisplayNode.runAction(cc.spawn(cc.sequence(cc.scaleTo(0.2, 1.1), cc.scaleTo(0.8, 1)), cc.fadeIn(0.2)));
                            this.screenTintNode.runAction(cc.sequence(cc.delayTime(0.15), cc.fadeTo(0.25, 180)));
                        }
                        this.Jt();
                    };
                    b.prototype.Jt = function () {
                        var a = this;
                        if (!this.Ct || this.Ht !== this.Ct) {
                            this.Ct = this.Ht;
                            var b = this.Ct;
                            var c = this.titleSpriteNode;
                            var d = this.yt[b];
                            function e() {
                                a.At.spriteFrame = d;
                            }
                            j.spawnCallback(function (b) {
                                function f() {
                                    if (b) {
                                        b();
                                    }
                                }
                                if (a.At.spriteFrame === undefined) {
                                    e();
                                    f();
                                } else if (a.At.spriteFrame !== d) {
                                    a.titleNode.stopAllActions();
                                    a.titleNode.runAction(cc.sequence(cc.scaleTo(0.2, 0), cc.callFunc(e), cc.spawn(cc.sequence(cc.scaleTo(0.2, 1.1), cc.callFunc(f), cc.scaleTo(0.85, 1)), cc.fadeIn(0.2))));
                                } else {
                                    c.runAction(cc.sequence(cc.scaleTo(0.2, a.Mt + 0.1).easing(cc.easeSineOut()), cc.scaleTo(0.4, a.Mt).easing(cc.easeSineIn()), cc.callFunc(f)));
                                }
                            }, function (c) {
                                if (!a.Gt && b >= h.MEGA_WIN) {
                                    a.Nt.resetSystem();
                                    a.Gt = true;
                                }
                                if (c) {
                                    c();
                                }
                            }, function (c) {
                                a.frame1.getComponent(cc.Sprite).spriteFrame = a.frame1Sprites[b];
                                a.frame1.opacity = 0;
                                a.frame1.scale = 2;
                                a.frame1.stopAllActions();
                                a.frame1.runAction(cc.spawn(cc.fadeIn(0.45), cc.sequence(cc.scaleTo(0.3, 2.2), cc.scaleTo(1, 2))));
                                a.frame2.opacity = 0;
                                a.frame2.scale = [2, 2.2, 2.4][b];
                                a.frame2.stopAllActions();
                                a.frame2.runAction(cc.fadeIn(0.25));
                                a.frame2.runAction(cc.repeatForever(cc.rotateBy(3.35, 50)));
                                if (c) {
                                    c();
                                }
                            }, function (c) {
                                a.particle1.resetSystem();
                                a.particle2.resetSystem();
                                a.flares.forEach(function (a) {
                                    a.play();
                                });
                                a.ribbons.forEach(function (a) {
                                    a.play();
                                    a.node.stopAllActions();
                                    a.node.runAction(cc.fadeIn(0.2));
                                });
                                a.shine1.getComponent(cc.Sprite).spriteFrame = a.shine1Sprites[b];
                                a.shine1.stopAllActions();
                                a.shine1.runAction(cc.tintTo(0.2, y));
                                a.shine1.runAction(cc.repeatForever(cc.rotateBy(20, 360)));
                                a.shine2.getComponent(cc.Sprite).spriteFrame = a.shine2Sprites[b];
                                a.shine2.stopAllActions();
                                a.shine2.color = m.BLACK;
                                a.shine2.scale = 1.2;
                                a.shine2.runAction(cc.sequence(cc.delayTime(0.15), cc.tintTo(0.2, 255, 255, 255)));
                                a.shine2.runAction(cc.repeatForever(cc.sequence(cc.scaleTo(0.5, 2), cc.scaleTo(0.5, 1.2))));
                                a.petals.scale = 1;
                                a.petals.stopAllActions();
                                a.petals.runAction(cc.fadeIn(0.2));
                                a.petals.runAction(cc.scaleTo(27, 2.8));
                                a.coins.getComponent(cc.Sprite).spriteFrame = a.coinType[b];
                                a.coins.scale = 1;
                                a.coins.stopAllActions();
                                a.coins.runAction(cc.fadeIn(0.2));
                                a.coins.runAction(cc.scaleTo(60, 1.7));
                                a.shine3.getComponent(cc.Sprite).spriteFrame = a.shine3Sprites[b];
                                a.shine3.stopAllActions();
                                a.shine3.runAction(cc.tintTo(0.5, y));
                                a.shine4.getComponent(cc.Sprite).spriteFrame = a.shine4Sprites[b];
                                a.shine4.stopAllActions();
                                a.shine4.runAction(cc.tintTo(0.5, y));
                                a.shine5.getComponent(cc.Sprite).spriteFrame = a.shine5Sprites[b];
                                a.shine5.stopAllActions();
                                a.shine5.runAction(cc.fadeIn(0.55));
                                a.shine6.getComponent(cc.Sprite).spriteFrame = a.shine6Sprites[b];
                                a.shine6.stopAllActions();
                                a.shine6.runAction(cc.fadeIn(0.55));
                                a.frontShine7.getComponent(cc.Sprite).spriteFrame = a.frontShine7Sprites[b];
                                a.frontShine7.stopAllActions();
                                a.frontShine7.runAction(cc.spawn(cc.scaleTo(1.55, 4.55), cc.sequence(cc.fadeIn(0.3), cc.fadeOut(1.25))));
                                a.particles.forEach(function (a) {
                                    a.play();
                                });
                                var d = a.topBarSpine;
                                a.topBar.getComponent(cc.Sprite).spriteFrame = a.topBarSprites[b];
                                d.setAnimation(0, x[b] + "_spawn", false);
                                d.addAnimation(0, x[b] + "_idle", true);
                                a.topBar.stopAllActions();
                                a.topBar.position = cc.v3(0, 18);
                                var e = w[b].top;
                                a.topBar.runAction(cc.spawn(cc.fadeIn(0.6), cc.sequence(cc.moveTo(0.25, cc.v2(0, e * 1.08)), cc.moveTo(0.85, cc.v2(0, e)))));
                                a.bottomBar.getComponent(cc.Sprite).spriteFrame = a.bottomBarSprites[b];
                                a.bottomBar.stopAllActions();
                                a.bottomBar.position = cc.v3(0, -174);
                                var f = w[b].bottom;
                                a.bottomBar.runAction(cc.spawn(cc.fadeIn(0.6), cc.sequence(cc.moveTo(0.25, cc.v2(0, f * 1.08)), cc.moveTo(0.85, cc.v2(0, f)))));
                                if (c) {
                                    c();
                                }
                            }, function (c) {
                                if (b === h.SUPER_MEGA_WIN) {
                                    a.fireworkController.play(0, 0.2);
                                }
                                if (c) {
                                    c();
                                }
                            })(function () {
                                a.Ct = undefined;
                                var b = a.Pt;
                                a.Pt = undefined;
                                if (b) {
                                    b();
                                }
                            });
                        }
                    };
                    b.prototype.xt = function () {
                        this.zt();
                        if (this.Ct) {
                            this.Pt = this.Ut.bind(this);
                        } else {
                            var a = this.titleNode;
                            var b = this.titleNode.scale;
                            a.runAction(cc.sequence(cc.scaleTo(0.25, b * 1.2).easing(cc.easeSineOut()), cc.scaleTo(0.2, b).easing(cc.easeSineIn())));
                        }
                    };
                    b.prototype.Vt = function (a) {
                        var b = this;
                        this.fireworkController.cleanup();
                        this.screenTintNode.runAction(cc.fadeOut(0.4));
                        this.titleNode.runAction(cc.sequence(cc.fadeOut(0.41), cc.callFunc(function () {
                            b.titleNode.stopAllActions();
                            if (a) {
                                a();
                            }
                        })));
                        this.numberDisplayNode.stopAllActions();
                        this.numberDisplayNode.runAction(cc.fadeOut(0.41));
                        this.screenTintNode.stopAllActions();
                        this.screenTintNode.runAction(cc.fadeOut(0.4));
                        this.Nt.stopSystem();
                        this.frame1.stopAllActions();
                        this.frame2.stopAllActions();
                        this.frame1.runAction(cc.fadeOut(0.2));
                        this.frame2.runAction(cc.fadeOut(0.2));
                        this.ribbons.forEach(function (a) {
                            a.node.runAction(cc.fadeOut(0.2));
                        });
                        this.shine1.stopAllActions();
                        this.shine1.runAction(cc.tintTo(0.2, m.BLACK));
                        this.shine2.stopAllActions();
                        this.shine2.runAction(cc.tintTo(0.2, m.BLACK));
                        this.petals.stopAllActions();
                        this.petals.runAction(cc.fadeOut(0.2));
                        this.coins.stopAllActions();
                        this.coins.runAction(cc.fadeOut(0.2));
                        this.shine3.stopAllActions();
                        this.shine3.runAction(cc.tintTo(0.2, m.BLACK));
                        this.shine4.stopAllActions();
                        this.shine4.runAction(cc.tintTo(0.2, m.BLACK));
                        this.shine5.stopAllActions();
                        this.shine5.runAction(cc.fadeOut(0.2));
                        this.shine6.stopAllActions();
                        this.shine6.runAction(cc.fadeOut(0.2));
                        this.frontShine7.stopAllActions();
                        this.frontShine7.runAction(cc.fadeOut(0.2));
                        this.topBar.stopAllActions();
                        this.topBar.runAction(cc.fadeOut(0.2));
                        this.bottomBar.stopAllActions();
                        this.bottomBar.runAction(cc.fadeOut(0.2));
                        this.Nt.stopSystem();
                        this.particle1.stopSystem();
                        this.particle2.stopSystem();
                    };
                    b.prototype.qt = function () {
                        var a = this;
                        this.fireworkController.cleanup();
                        this.topBar.stopAllActions();
                        this.topBar.position = cc.v3(0, 18);
                        this.topBar.opacity = 0;
                        this.bottomBar.stopAllActions();
                        this.bottomBar.position = cc.v3(0, -174);
                        this.bottomBar.opacity = 0;
                        this.particles.forEach(function (b) {
                            b.node.parent = a.frontNode;
                            b.stop();
                            b.setCurrentTime(0);
                            b.node.getComponent(cc.Sprite).spriteFrame = undefined;
                        });
                        this.frontShine7.parent = this.frontNode;
                        this.frontShine7.stopAllActions();
                        this.frontShine7.scale = 3;
                        this.shine3.stopAllActions();
                        this.shine3.color = m.BLACK;
                        this.shine4.stopAllActions();
                        this.shine4.color = m.BLACK;
                        this.shine5.stopAllActions();
                        this.shine5.opacity = 0;
                        this.shine6.stopAllActions();
                        this.shine6.opacity = 0;
                        this.shine2.stopAllActions();
                        this.shine2.color = m.BLACK;
                        this.shine2.scale = 1.2;
                        this.shine4.stopAllActions();
                        this.shine4.color = m.BLACK;
                        this.shine5.stopAllActions();
                        this.shine5.opacity = 0;
                        this.shine6.stopAllActions();
                        this.shine6.opacity = 0;
                        this.shine1.stopAllActions();
                        this.shine1.color = m.BLACK;
                        this.petals.stopAllActions();
                        this.petals.opacity = 0;
                        this.petals.scale = 1;
                        this.coins.stopAllActions();
                        this.coins.opacity = 0;
                        this.coins.scale = 1;
                        this.flares.forEach(function (a) {
                            a.stop();
                            a.setCurrentTime(0);
                            a.node.getComponent(cc.Sprite).spriteFrame = undefined;
                        });
                        this.ribbons.forEach(function (a) {
                            a.node.stopAllActions();
                            a.stop();
                            a.setCurrentTime(0);
                            a.node.getComponent(cc.Sprite).spriteFrame = undefined;
                        });
                        this.titleNode.stopAllActions();
                        this.titleNode.scaleX = this.titleNode.scaleY = 0;
                        this.titleNode.opacity = 255;
                        this.numberDisplayNode.stopAllActions();
                        this.numberDisplayNode.scale = 0;
                        this.numberDisplayNode.opacity = 255;
                        this.screenTintNode.stopAllActions();
                        this.screenTintNode.opacity = 0;
                        this.Kt = false;
                        this.Gt = false;
                        this.At.spriteFrame = undefined;
                        this.frame1.opacity = 0;
                        this.frame1.scale = 2;
                        this.frame1.stopAllActions();
                        this.frame2.opacity = 0;
                        this.frame2.scale = 2;
                        this.frame2.stopAllActions();
                    };
                    b.prototype.Ut = function () {
                        if (this.Tt) {
                            this.Tt();
                        }
                        this.Tt = l.default.subscribeOnce(this.Qt.bind(this));
                        o.spaceBarInterrupter.subscribeEventInterrupter("big_win", this.node, this.Qt.bind(this));
                    };
                    b.prototype.zt = function () {
                        if (this.Tt) {
                            this.Tt();
                        }
                        this.Tt = undefined;
                        o.spaceBarInterrupter.unsubscribeEventInterrupter("big_win");
                    };
                    b.prototype.Qt = function () {
                        this.zt();
                        if (this.gt && this.St) {
                            var a = this.Ot;
                            var b = this.Bt;
                            var c = this.Lt;
                            this.Lt = undefined;
                            if (c) {
                                c();
                            }
                            if (a >= b.superMegaWinThreshold) {
                                this.Ht = h.SUPER_MEGA_WIN;
                            } else if (a >= b.megaWinThreshold) {
                                this.Ht = h.MEGA_WIN;
                            }
                            this.numberDisplayNode.stopAllActions();
                            this.St = false;
                            this.Wt();
                            this.bt.stop();
                            this.pt.displayNumber(this.Ot, true);
                            this.scheduleOnce(this.Ut, z);
                            var d = p.gDataSource.isGameReplaying ? 1 : A;
                            this.scheduleOnce(this.Ft, d);
                            if (this.Ht >= h.MEGA_WIN) {
                                n.playBigWinEndCoin();
                            }
                            if (this.Ht === h.SUPER_MEGA_WIN) {
                                n.playBigWinEndFirework();
                            }
                            j.delayCallback(0.4)(function () {
                                k.emitGameEffectStateChangedEvent({
                                    displayState: "DidUpdate",
                                    effectType: "BigWin"
                                });
                            });
                            this.Yt();
                        } else {
                            this.unschedule(this.Ft);
                            this.Ft();
                            n.skipBigWinEnd();
                            n.stopBigWinEndCoin();
                            n.stopBigWinEndFirework();
                        }
                    };
                    b.prototype.Yt = function () {
                        var a = shell.ga;
                        i.sendEvent(a.CATEGORY_GAME, a.EVENT_SLOT_SKIP_EFFECT, {
                            type: "Big Prize"
                        });
                    };
                    b.prototype.Xt = function (a) {
                        var b = {
                            easing: function (b) {
                                return (b -= 1) * b * ((a + 1) * b + a) + 1;
                            },
                            reverse: function () {
                                return _easeBackInObj;
                            }
                        };
                        return b;
                    };
                    __decorate([v(cc.Node)], b.prototype, "screenTintNode", undefined);
                    __decorate([v(cc.Node)], b.prototype, "titleNode", undefined);
                    __decorate([v(cc.Node)], b.prototype, "titleSpriteNode", undefined);
                    __decorate([v(cc.Node)], b.prototype, "timedNumberRollNode", undefined);
                    __decorate([v(cc.Node)], b.prototype, "numberDisplayNode", undefined);
                    __decorate([v(cc.Node)], b.prototype, "coinAnimParticleNode", undefined);
                    __decorate([v(cc.Node)], b.prototype, "frame1", undefined);
                    __decorate([v(cc.Node)], b.prototype, "frame2", undefined);
                    __decorate([v(cc.ParticleSystem)], b.prototype, "particle1", undefined);
                    __decorate([v(cc.ParticleSystem)], b.prototype, "particle2", undefined);
                    __decorate([v([cc.Animation])], b.prototype, "flares", undefined);
                    __decorate([v(cc.Node)], b.prototype, "shine1", undefined);
                    __decorate([v([cc.Animation])], b.prototype, "ribbons", undefined);
                    __decorate([v(cc.Node)], b.prototype, "shine2", undefined);
                    __decorate([v(cc.Node)], b.prototype, "petals", undefined);
                    __decorate([v(cc.Node)], b.prototype, "coins", undefined);
                    __decorate([v([cc.SpriteFrame])], b.prototype, "coinType", undefined);
                    __decorate([v(cc.Node)], b.prototype, "shine3", undefined);
                    __decorate([v(cc.Node)], b.prototype, "shine4", undefined);
                    __decorate([v(cc.Node)], b.prototype, "shine5", undefined);
                    __decorate([v(cc.Node)], b.prototype, "shine6", undefined);
                    __decorate([v(cc.Node)], b.prototype, "topBar", undefined);
                    __decorate([v(sp.Skeleton)], b.prototype, "topBarSpine", undefined);
                    __decorate([v(cc.Node)], b.prototype, "bottomBar", undefined);
                    __decorate([v(cc.Node)], b.prototype, "frontShine7", undefined);
                    __decorate([v(cc.Node)], b.prototype, "frontNode", undefined);
                    __decorate([v(cc.Node)], b.prototype, "lastNode", undefined);
                    __decorate([v([cc.Animation])], b.prototype, "particles", undefined);
                    __decorate([v([cc.SpriteFrame])], b.prototype, "frame1Sprites", undefined);
                    __decorate([v([cc.SpriteFrame])], b.prototype, "shine1Sprites", undefined);
                    __decorate([v([cc.SpriteFrame])], b.prototype, "shine2Sprites", undefined);
                    __decorate([v([cc.SpriteFrame])], b.prototype, "shine3Sprites", undefined);
                    __decorate([v([cc.SpriteFrame])], b.prototype, "shine4Sprites", undefined);
                    __decorate([v([cc.SpriteFrame])], b.prototype, "shine5Sprites", undefined);
                    __decorate([v([cc.SpriteFrame])], b.prototype, "shine6Sprites", undefined);
                    __decorate([v([cc.SpriteFrame])], b.prototype, "frontShine7Sprites", undefined);
                    __decorate([v([cc.SpriteFrame])], b.prototype, "topBarSprites", undefined);
                    __decorate([v([cc.SpriteFrame])], b.prototype, "bottomBarSprites", undefined);
                    __decorate([v(s.default)], b.prototype, "fireworkController", undefined);
                    __decorate([r.automationDec(c)], b.prototype, "_initBigWinControllerNodes", null);
                    __decorate([r.automationDec(d)], b.prototype, "_enableSkipEvent", null);
                    __decorate([r.automationDec(e)], b.prototype, "_skipPlay", null);
                    return __decorate([u], b);
                }(cc.Component);
                c.default = B;
                cc._RF.pop();
            }
        }, {
            AnalyticsHelper: "AnalyticsHelper",
            AutomationDecorator: "AutomationDecorator",
            BGMHandler: "BGMHandler",
            "BigWinController.spec": "BigWinController.spec",
            BigWinFireworkController: "BigWinFireworkController",
            GConstants: "GConstants",
            GDataSource: "GDataSource",
            GameEventHandler: "GameEventHandler",
            SkipHandler: "SkipHandler",
            SpaceBarInterrupter: "SpaceBarInterrupter",
            Utils: "Utils"
        }],
        BigWinFireworkController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "335beYjWYpGvLsBB/D7By8d", "BigWinFireworkController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = cc._decorator;
                var f = e.ccclass;
                var g = e.property;
                var h = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.fireworkItemPrefab = undefined;
                        b.Zt = new cc.NodePool("BigWinFireworkItem");
                        b.$t = [];
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.init = function () {
                        this.ti(15);
                    };
                    b.prototype.cleanup = function () {
                        var a = this;
                        this.unscheduleAllCallbacks();
                        this.$t.forEach(function (b) {
                            a.ii(b.node);
                        });
                        this.$t = [];
                    };
                    b.prototype.destroy = function () {
                        this.cleanup();
                        this.fireworkItemPrefab = undefined;
                        this.Zt.clear();
                        this.node.destroy();
                        return a.prototype.destroy.call(this);
                    };
                    b.prototype.play = function (a, b) {
                        var c = this;
                        this.unscheduleAllCallbacks();
                        this.schedule(function () {
                            var b = c.ei();
                            var d = b.node;
                            var e = Math.floor(Math.random() * 1080 - 540);
                            var f = Math.floor(200 + Math.random() * 675);
                            var a = Math.floor(9 + Math.random() * 6) / 10;
                            c.$t.push(b);
                            c.node.addChild(d);
                            b.play(cc.v3(e, f), a, c.ii.bind(c, d));
                        }, b || 1, cc.macro.REPEAT_FOREVER, a);
                    };
                    b.prototype.ti = function (a) {
                        for (var b = 0; b < a && !(this.Zt.size() >= 30); b++) {
                            var c = cc.instantiate(this.fireworkItemPrefab);
                            this.Zt.put(c);
                        }
                    };
                    b.prototype.ei = function () {
                        if (this.Zt.size() > 0) {
                            return this.Zt.get().getComponent("BigWinFireworkItem");
                        } else {
                            return cc.instantiate(this.fireworkItemPrefab).getComponent("BigWinFireworkItem");
                        }
                    };
                    b.prototype.ii = function (a) {
                        if (this.Zt.size() >= 30) {
                            a.destroy();
                        } else {
                            this.Zt.put(a);
                        }
                    };
                    __decorate([g(cc.Prefab)], b.prototype, "fireworkItemPrefab", undefined);
                    return __decorate([f], b);
                }(cc.Component);
                c.default = h;
                cc._RF.pop();
            }
        }, {}],
        BigWinFireworkItem: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "2b1f4Jn+M1ENr3zAA8L1Qzm", "BigWinFireworkItem")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = cc._decorator;
                var f = e.ccclass;
                var g = e.property;
                var h = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.fireworkAnim = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.cleanup = function () {
                        this.fireworkAnim.off("finished");
                        this.fireworkAnim.setCurrentTime(0);
                        this.fireworkAnim.stop();
                        this.node.scale = 1;
                    };
                    b.prototype.play = function (a, b, c) {
                        this.cleanup();
                        this.node.position = a;
                        this.node.scale = b;
                        this.fireworkAnim.on("finished", function () {
                            if (c) {
                                c();
                            }
                        });
                        this.fireworkAnim.play();
                    };
                    b.prototype.unuse = function () {
                        this.cleanup();
                    };
                    b.prototype.destroy = function () {
                        this.cleanup();
                        this.node.destroy();
                        return a.prototype.destroy.call(this);
                    };
                    __decorate([g(cc.Animation)], b.prototype, "fireworkAnim", undefined);
                    return __decorate([f], b);
                }(cc.Component);
                c.default = h;
                cc._RF.pop();
            }
        }, {}],
        BookView: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "46ec0uZUDVPMZDgV9Idp1EN", "BookView")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("ScrollViewEx");
                var f = cc.Enum({
                    LEFT: 1,
                    RIGHT: 2,
                    NULL: 3
                });
                function b(a, b) {
                    return a.sub(b);
                }
                var g = cc._decorator;
                var h = g.ccclass;
                g.property;
                var i = function (a) {
                    function c() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.ni = {};
                        b.oi = {};
                        b.ci = undefined;
                        return b;
                    }
                    __extends(c, a);
                    Object.defineProperty(c.prototype, "nodePools", {
                        get: function () {
                            return this.ni;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(c.prototype, "templates", {
                        get: function () {
                            return this.oi;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    c.prototype.register = function (b, c, d) {
                        if (this.ni[b]); else if (c) {
                            var a;
                            a = d ? new cc.NodePool(d) : new cc.NodePool();
                            this.oi[b] = c;
                            this.ni[b] = a;
                        }
                    };
                    c.prototype.setDataSource = function (a) {
                        if (a !== this.ci) {
                            this.ci = a;
                        }
                    };
                    c.prototype.reloadData = function () {
                        this.hi();
                        this.init(this.ri);
                    };
                    c.prototype.ai = function () {
                        for (this.contentChildsLayout = []; this.content.children.length < 3;) {
                            var b = this.node.width;
                            var c = this.node.height;
                            var d = new cc.Node();
                            var e = d.addComponent(cc.Layout);
                            e.type = cc.Layout.Type.VERTICAL;
                            d.setContentSize(b, c);
                            this.content.addChild(d);
                            this.contentChildsLayout.push(e);
                        }
                    };
                    c.prototype.ui = function () {
                        for (var b = this.node.width, c = this.node.height, d = 0; d < this.content.children.length; d++) {
                            this.content.children[d].setContentSize(b, c);
                        }
                        this.cellSize = b;
                        this.maxScrollArea = cc.v2(-this.cellSize * 0, -this.cellSize * 2);
                        var e = this.li >= this.content.children.length ? this.content.children.length : this.li;
                        this.distance = this.cellSize;
                        var f = this.contentLayout.spacingX / e;
                        this.distance += f;
                        this.fi(this.currIndex);
                    };
                    c.prototype.di = function () {
                        this.node.on("size-changed", this.ui, this);
                    };
                    c.prototype.hi = function () {
                        this.node.off("size-changed", this.ui, this);
                    };
                    c.prototype.init = function (b) {
                        this.di();
                        this.ai();
                        this.contentLayout = this.content.getComponent(cc.Layout);
                        this.cellSize = this.node.width;
                        this.target = 0;
                        this.originalSpeed = this.speed;
                        this.freeCells = [];
                        this.dir = f.NULL;
                        this.selected = true;
                        this.ri = b;
                        this.li = 0;
                        this.constChildList = [];
                        this.middleIndex = Math.floor(this.content.children.length / 2);
                        this.currIndex = 0;
                        this.itemOffSet = 0;
                        this.snapPause = false;
                        this.maxScrollArea = cc.v2(-this.cellSize * 0, -this.cellSize * 2);
                        this.li = this.ci.getCount(this, b);
                        for (var c = 0; c < this.content.children.length; c++) {
                            var d = undefined;
                            if (c <= this.li - 1) {
                                if (this.content.children[c].children.length) {
                                    this.vi(this.content.children[c].children[0]);
                                    (d = this.ci.getItem(this, c, b)).parent = this.content.children[c];
                                    this.content.children[c].zIndex = c;
                                    d.cellIndex = c % this.li;
                                    this.content.children[c].slotID = c;
                                    this.constChildList.push(d);
                                } else {
                                    this.content.children[c].zIndex = c;
                                    (d = this.ci.getItem(this, c, b)).parent = this.content.children[c];
                                    this._i(d);
                                    d.cellIndex = c % this.li;
                                    this.content.children[c].slotID = c;
                                    this.constChildList.push(d);
                                }
                            } else {
                                this.content.children[c].zIndex = c;
                                this.content.children[c].slotID = c;
                            }
                            if (this.li - 1 >= c) {
                                this.content.children[c].active = true;
                            } else {
                                this.content.children[c].active = false;
                            }
                        }
                        if (this.li >= this.content.children.length) {
                            this.totalItems = this.content.children.length - 1;
                        } else {
                            this.totalItems = this.li - 1;
                        }
                        var e = this.li >= this.content.children.length ? this.content.children.length : this.li;
                        this.distance = this.cellSize;
                        var g = this.contentLayout.spacingX / e;
                        this.distance += g;
                        this.fi(this.currIndex);
                    };
                    c.prototype.toLeftItem = function () {
                        var b = this.content.children[0].children[0].cellIndex - 1;
                        if (this.currIndex === 2) {
                            this.currIndex -= 1;
                            this.fi(this.currIndex);
                            if (this.nextAppearTarget) {
                                this.nextAppearTarget(this.constChildList[this.content.children[this.currIndex].slotID].cellIndex);
                            }
                            return;
                        }
                        if (b < 0) {
                            if (this.currIndex === 0) {
                                if (this.closeFromLeft) {
                                    this.closeFromLeft();
                                }
                                this.fi(this.currIndex);
                            } else {
                                this.currIndex = 0;
                                this.fi(this.currIndex);
                                if (this.cancelCloseBook) {
                                    this.cancelCloseBook();
                                }
                                if (this.nextAppearTarget) {
                                    this.nextAppearTarget(this.constChildList[this.content.children[this.currIndex].slotID].cellIndex);
                                }
                            }
                        } else {
                            for (var c = 0; c < this.content.children.length; c++) {
                                if (c === this.content.children.length - 1) {
                                    if (b < 0) {
                                        b = this.li - 1;
                                    }
                                    this.vi(this.content.children[c].children[0]);
                                    var d = this.ci.getItem(this, b, this.ri);
                                    this.constChildList[this.content.children[c].slotID] = d;
                                    this.constChildList[this.content.children[c].slotID].cellIndex = b;
                                    this.content.children[c].zIndex = 0;
                                    d.parent = this.content.children[c];
                                } else {
                                    this.content.children[c].zIndex += 1;
                                }
                            }
                            this.resetLayout = true;
                            this.changeIndexTo = 0;
                            this.currIndex -= 1;
                            if (this.nextAppearTarget) {
                                this.nextAppearTarget(this.constChildList[this.content.children[this.currIndex].slotID].cellIndex);
                            }
                            this.contentLayout.updateLayout();
                            this.content.x = this.content.x + this.itemOffSet;
                            this.snapDone = false;
                            this.currIndex = this.middleIndex;
                        }
                    };
                    c.prototype.toRightItem = function () {
                        var b = this.content.children[this.totalItems].children[0].cellIndex + 1;
                        if (this.currIndex === 0 && this.currIndex < this.totalItems) {
                            this.currIndex += 1;
                            this.fi(this.currIndex);
                            if (this.nextAppearTarget) {
                                this.nextAppearTarget(this.constChildList[this.content.children[this.currIndex].slotID].cellIndex);
                            }
                            return;
                        }
                        if (b > this.li - 1) {
                            if (this.currIndex === this.totalItems) {
                                if (this.closeFromRight) {
                                    this.closeFromRight();
                                }
                                this.fi(this.currIndex);
                            } else {
                                this.currIndex = this.totalItems;
                                this.fi(this.currIndex);
                                if (this.cancelCloseBook) {
                                    this.cancelCloseBook();
                                }
                                if (this.nextAppearTarget) {
                                    this.nextAppearTarget(this.constChildList[this.content.children[this.currIndex].slotID].cellIndex);
                                }
                            }
                        } else {
                            for (var c = this.content.children.length - 1; c >= 0; c--) {
                                if (c === 0) {
                                    if (b >= this.li) {
                                        b = 0;
                                    }
                                    this.vi(this.content.children[c].children[0]);
                                    var d = this.ci.getItem(this, b, this.ri);
                                    this.constChildList[this.content.children[c].slotID] = d;
                                    this.constChildList[this.content.children[c].slotID].cellIndex = b;
                                    this.content.children[c].zIndex = this.content.children.length - 1;
                                    d.parent = this.content.children[c];
                                } else {
                                    this.content.children[c].zIndex -= 1;
                                }
                            }
                            this.resetLayout = true;
                            this.changeIndexTo = 2;
                            this.currIndex += 1;
                            if (this.nextAppearTarget) {
                                this.nextAppearTarget(this.constChildList[this.content.children[this.currIndex].slotID].cellIndex);
                            }
                            this.contentLayout.updateLayout();
                            this.content.x = this.content.x + this.itemOffSet;
                            this.snapDone = false;
                            this.currIndex = this.middleIndex;
                        }
                    };
                    c.prototype.setElasticLeft = function (a) {
                        this.elasticLeft = a;
                    };
                    c.prototype.setElasticRight = function (a) {
                        this.elasticRight = a;
                    };
                    c.prototype.setClosingFromLeft = function (a) {
                        this.closingFromLeft = a;
                    };
                    c.prototype.setCloseFromLeft = function (a) {
                        this.closeFromLeft = a;
                    };
                    c.prototype.setClosingFromRight = function (a) {
                        this.closingFromRight = a;
                    };
                    c.prototype.setCloseFromRight = function (a) {
                        this.closeFromRight = a;
                    };
                    c.prototype.setCancelCloseBook = function (a) {
                        this.cancelCloseBook = a;
                    };
                    c.prototype.setStartScrolling = function (a) {
                        this.startScrolling = a;
                    };
                    c.prototype.getAllItems = function () {
                        var a = [];
                        this.content.children.forEach(function (b) {
                            if (b.children.length) {
                                a.push(b.children[0]);
                            }
                        });
                        return a;
                    };
                    c.prototype.scrollTo = function (b) {
                        if (this.snapDone && !this.snapPause) {
                            var c = this.content.children[this.currIndex].children[0].cellIndex;
                            if (c !== b && !(b > this.li - 1 || b < 0)) {
                                if (b > c) {
                                    if (b === c + 1) {
                                        if (this.currIndex === 0) {
                                            this.toRightItem();
                                        } else {
                                            this.dir = f.RIGHT;
                                            this.itemOffSet = this.cellSize;
                                            this.mi();
                                        }
                                    } else if (this.currIndex === 0) {
                                        var d = this.content.children.length - 1;
                                        this.vi(this.content.children[d].children[0]);
                                        var e = this.ci.getItem(this, b, this.ri);
                                        this.constChildList[this.content.children[d].slotID] = e;
                                        this.constChildList[this.content.children[d].slotID].cellIndex = b;
                                        e.parent = this.content.children[d];
                                        this.speed = 10;
                                        this.currIndex = 2;
                                        this.reloadCells = true;
                                        this.fi(this.currIndex);
                                    } else {
                                        for (var g = b, h = this.content.children.length - 1; h >= 0; h--) {
                                            if (h === 0) {
                                                this.content.children[h].zIndex = 2;
                                                this.vi(this.content.children[h].children[0]);
                                                e = this.ci.getItem(this, g, this.ri);
                                                this.constChildList[this.content.children[h].slotID] = e;
                                                this.constChildList[this.content.children[h].slotID].cellIndex = g;
                                                e.parent = this.content.children[h];
                                            } else {
                                                this.content.children[h].zIndex = h === 1 ? 0 : 1;
                                            }
                                        }
                                        this.currIndex = 0;
                                        this.changeIndexTo = 2;
                                        this.changeContentPos = true;
                                    }
                                } else if (b === c - 1) {
                                    if (this.currIndex === 2) {
                                        this.toLeftItem();
                                    } else {
                                        this.dir = f.LEFT;
                                        this.itemOffSet = -this.cellSize;
                                        this.mi();
                                    }
                                } else if (this.currIndex === this.content.children.length - 1) {
                                    g = 0;
                                    this.vi(this.content.children[g].children[0]);
                                    e = this.ci.getItem(this, b, this.ri);
                                    this.constChildList[this.content.children[g].slotID] = e;
                                    this.constChildList[this.content.children[g].slotID].cellIndex = b;
                                    e.parent = this.content.children[g];
                                    this.speed = 10;
                                    this.currIndex = 0;
                                    this.reloadCells = true;
                                    this.fi(this.currIndex);
                                } else {
                                    d = b;
                                    h = this.content.children.length - 1;
                                    for (; h >= 0; h--) {
                                        if (h === 2) {
                                            this.content.children[h].zIndex = 0;
                                            this.vi(this.content.children[h].children[0]);
                                            e = this.ci.getItem(this, d, this.ri);
                                            this.constChildList[this.content.children[h].slotID] = e;
                                            this.constChildList[this.content.children[h].slotID].cellIndex = d;
                                            e.parent = this.content.children[h];
                                        } else {
                                            this.content.children[h].zIndex = h === 1 ? 2 : 1;
                                        }
                                    }
                                    this.currIndex = 2;
                                    this.changeIndexTo = 0;
                                    this.changeContentPos = true;
                                }
                            }
                        }
                    };
                    c.prototype.dequeueReusableItem = function (b) {
                        var c;
                        var d = this.ni[b];
                        if (d) {
                            if (!(c = d.get())) {
                                var a = this.oi[b];
                                c = cc.instantiate(a);
                            }
                            c.lv_type = b;
                        }
                        return c;
                    };
                    c.prototype.vi = function (b) {
                        var c;
                        var d = b.lv_type;
                        if (d) {
                            c = this.ni[d];
                        }
                        if (c) {
                            c.put(b);
                        }
                    };
                    c.prototype.pi = function () {
                        var b = this.content.children[this.currIndex].children[0].cellIndex;
                        if (b === this.li - 1) {
                            for (var c = b - 2, d = b - 1, e = this.content.children.length - 1; e >= 0; e--) {
                                if (e === 0) {
                                    this.vi(this.content.children[e].children[0]);
                                    var f = this.ci.getItem(this, c, this.ri);
                                    this.constChildList[this.content.children[e].slotID] = f;
                                    this.constChildList[this.content.children[e].slotID].cellIndex = c;
                                    f.parent = this.content.children[e];
                                } else if (e === 1) {
                                    this.vi(this.content.children[e].children[0]);
                                    f = this.ci.getItem(this, d, this.ri);
                                    this.constChildList[this.content.children[e].slotID] = f;
                                    this.constChildList[this.content.children[e].slotID].cellIndex = d;
                                    f.parent = this.content.children[e];
                                }
                            }
                        } else if (b === 0) {
                            d = b + 1;
                            var g = b + 2;
                            for (e = this.content.children.length - 1; e >= 0; e--) {
                                if (e === 1) {
                                    this.vi(this.content.children[e].children[0]);
                                    f = this.ci.getItem(this, d, this.ri);
                                    this.constChildList[this.content.children[e].slotID] = f;
                                    this.constChildList[this.content.children[e].slotID].cellIndex = d;
                                    f.parent = this.content.children[e];
                                } else if (e === 2) {
                                    this.vi(this.content.children[e].children[0]);
                                    f = this.ci.getItem(this, g, this.ri);
                                    this.constChildList[this.content.children[e].slotID] = f;
                                    this.constChildList[this.content.children[e].slotID].cellIndex = g;
                                    f.parent = this.content.children[e];
                                }
                            }
                        } else if (this.currIndex === 0) {
                            d = b + 1;
                            g = b - 1;
                            e = this.content.children.length - 1;
                            for (; e >= 0; e--) {
                                if (e === 1) {
                                    this.content.children[e].zIndex = 2;
                                    this.vi(this.content.children[e].children[0]);
                                    f = this.ci.getItem(this, d, this.ri);
                                    this.constChildList[this.content.children[e].slotID] = f;
                                    this.constChildList[this.content.children[e].slotID].cellIndex = d;
                                    f.parent = this.content.children[e];
                                } else if (e === 2) {
                                    this.content.children[e].zIndex = 0;
                                    this.vi(this.content.children[e].children[0]);
                                    f = this.ci.getItem(this, g, this.ri);
                                    this.constChildList[this.content.children[e].slotID] = f;
                                    this.constChildList[this.content.children[e].slotID].cellIndex = g;
                                    f.parent = this.content.children[e];
                                } else {
                                    this.content.children[e].zIndex = 1;
                                }
                            }
                            this.resetContentPos = true;
                        } else {
                            c = b + 1;
                            d = b - 1;
                            e = this.content.children.length - 1;
                            for (; e >= 0; e--) {
                                if (e === 0) {
                                    this.content.children[e].zIndex = 2;
                                    this.vi(this.content.children[e].children[0]);
                                    f = this.ci.getItem(this, c, this.ri);
                                    this.constChildList[this.content.children[e].slotID] = f;
                                    this.constChildList[this.content.children[e].slotID].cellIndex = c;
                                    f.parent = this.content.children[e];
                                } else if (e === 1) {
                                    this.content.children[e].zIndex = 0;
                                    this.vi(this.content.children[e].children[0]);
                                    f = this.ci.getItem(this, d, this.ri);
                                    this.constChildList[this.content.children[e].slotID] = f;
                                    this.constChildList[this.content.children[e].slotID].cellIndex = d;
                                    f.parent = this.content.children[e];
                                } else {
                                    this.content.children[e].zIndex = 1;
                                }
                            }
                            this.resetContentPos = true;
                        }
                    };
                    c.prototype.fi = function (a) {
                        if (!(a > this.totalItems || a < 0)) {
                            this.currIndex = a;
                            this.target = -this.currIndex * this.distance;
                            this.snapDone = false;
                        }
                    };
                    c.prototype.mi = function () {
                        if (this.dir === f.LEFT && this.content.x > this.maxScrollArea.y) {
                            this.toLeftItem();
                        } else if (this.dir === f.RIGHT && this.content.x < this.maxScrollArea.x) {
                            this.toRightItem();
                        }
                        this.dir = f.NULL;
                    };
                    c.prototype.update = function (a) {
                        var b = this;
                        if (this.snapDone || this.snapPause) {
                            if (this.changeContentPos) {
                                this.changeContentPos = false;
                                this.target = -this.currIndex * this.distance;
                                this.content.x = -this.currIndex * this.distance;
                                this.fi(this.changeIndexTo);
                                this.reloadCells = true;
                            }
                        } else {
                            this.content.x = this.bi(this.content.x, this.target, a, this.speed, function () {
                                if (b.snapFinish) {
                                    b.snapFinish(b.constChildList[b.content.children[b.currIndex].slotID].cellIndex);
                                }
                                if (b.reloadCells) {
                                    b.reloadCells = false;
                                    b.speed = b.originalSpeed;
                                    b.pi();
                                }
                            });
                            if (this.resetContentPos) {
                                this.resetContentPos = false;
                                this.currIndex = this.middleIndex;
                                this.target = -this.currIndex * this.distance;
                                this.content.x = -this.currIndex * this.distance;
                            }
                            this.content.sortAllChildren();
                        }
                    };
                    c.prototype.Si = function (b, c) {
                        if (!this.reloadCells && this.content.children.length) {
                            this.snapPause = true;
                            var d = b.touch;
                            var a = cc.v2(d.getLocation().x, d.getLocation().y);
                            this.startPos = a;
                            this.gi(b, c);
                        } else {
                            this.startPos = null;
                        }
                    };
                    c.prototype.tt = function (b, c) {
                        var d = b.touch;
                        var a = cc.v2(d.getLocation().x, d.getLocation().y);
                        if (this.startPos && this.content.children.length) {
                            if (this.startPos.x < a.x) {
                                if (this.elasticLeft != null) {
                                    this.elastic = this.elasticLeft;
                                }
                                if (this.content.children[0].children[0].cellIndex === 0 && this.currIndex === 0) {
                                    if (this.selected && this.closingFromLeft) {
                                        this.closingFromLeft(this.startPos.x, a.x);
                                    }
                                    if (this.content.x !== 0 && this.selected) {
                                        this.Ci(b, c);
                                    }
                                } else if (this.selected) {
                                    this.Ci(b, c);
                                }
                            } else {
                                if (this.elasticRight != null) {
                                    this.elastic = this.elasticRight;
                                }
                                if (this.content.children[this.totalItems].children[0].cellIndex + 1 === this.li && this.currIndex === this.totalItems) {
                                    if (this.selected && this.closingFromRight) {
                                        this.closingFromRight(this.startPos.x, a.x);
                                    }
                                    if (this.content.x !== this.content.width && this.selected) {
                                        this.Ci(b, c);
                                    }
                                } else if (this.selected) {
                                    this.Ci(b, c);
                                }
                            }
                            if (this.content.x > 0 && this.elasticLeft != null) {
                                this.elastic = this.elasticLeft;
                            } else if (this.content.x > -this.content.width && this.elasticRight != null) {
                                this.elastic = this.elasticRight;
                            }
                        }
                    };
                    c.prototype.yi = function (b, c) {
                        if (!this.reloadCells && this.content.children.length) {
                            this.dragElastic = false;
                            var d = b.touch;
                            var a = cc.v2(d.getLocation().x, d.getLocation().y);
                            this.currentPos = a;
                            if (this.startPos) {
                                if (this.Mi(this.startPos.x, this.currentPos.x) && this.selected) {
                                    if (this.dir != f.RIGHT && this.startPos.x > this.currentPos.x) {
                                        this.dir = f.RIGHT;
                                        this.itemOffSet = this.cellSize;
                                        this.mi();
                                        if (this.cancelCloseBook) {
                                            this.cancelCloseBook();
                                        }
                                    } else if (this.dir != f.LEFT && this.startPos.x < this.currentPos.x) {
                                        this.dir = f.LEFT;
                                        this.itemOffSet = -this.cellSize;
                                        this.mi();
                                    } else {
                                        this.fi(this.currIndex);
                                        if (this.cancelCloseBook) {
                                            this.cancelCloseBook();
                                        }
                                    }
                                } else {
                                    this.fi(this.currIndex);
                                    if (this.cancelCloseBook) {
                                        this.cancelCloseBook();
                                    }
                                }
                                this.snapPause = false;
                                this.Ai(b, c);
                            }
                        }
                    };
                    c.prototype.Ii = function (b, c) {
                        if (!this.reloadCells && this.content.children.length) {
                            this.dragElastic = false;
                            var d = b.touch;
                            var a = cc.v2(d.getLocation().x, d.getLocation().y);
                            this.currentPos = a;
                            if (this.startPos) {
                                if (this.Mi(this.startPos.x, this.currentPos.x) && this.selected) {
                                    if (this.dir != f.RIGHT && this.startPos.x > this.currentPos.x) {
                                        this.dir = f.RIGHT;
                                        this.itemOffSet = this.cellSize;
                                        this.mi();
                                        if (this.cancelCloseBook) {
                                            this.cancelCloseBook();
                                        }
                                    } else if (this.dir != f.LEFT && this.startPos.x < this.currentPos.x) {
                                        this.dir = f.LEFT;
                                        this.itemOffSet = -this.cellSize;
                                        this.mi();
                                    } else {
                                        this.fi(this.currIndex);
                                        if (this.cancelCloseBook) {
                                            this.cancelCloseBook();
                                        }
                                    }
                                } else {
                                    this.fi(this.currIndex);
                                    if (this.cancelCloseBook) {
                                        this.cancelCloseBook();
                                    }
                                }
                                this.snapPause = false;
                                this.wi(b, c);
                            }
                        }
                    };
                    c.prototype.gi = function (a) {
                        this.clickBegan = true;
                        if (this.enabledInHierarchy) {
                            var b = a.touch;
                            if (this.content) {
                                this.Oi(b);
                            }
                            this.Hi = false;
                            this.Bi(a);
                        }
                    };
                    c.prototype.Ci = function (c) {
                        if (this.clickBegan) {
                            this.clickBegan = false;
                            if (this.startScrolling) {
                                this.startScrolling();
                            }
                        }
                        if (this.enabledInHierarchy) {
                            var d = c.touch;
                            if (this.content) {
                                this.Gi(d);
                            }
                            if (this.cancelInnerEvents) {
                                var e;
                                e = d.getLocation();
                                d.getStartLocation();
                                var f = e.mag();
                                if (b(f) > 7 && !this.Hi && c.target !== this.node) {
                                    var g = new cc.Event.EventTouch(c.getTouches(), c.bubbles);
                                    g.type = cc.Node.EventType.TOUCH_CANCEL;
                                    g.touch = c.touch;
                                    g.simulate = true;
                                    c.target.dispatchEvent(g);
                                    this.Hi = true;
                                }
                                this.Bi(c);
                            }
                        }
                    };
                    c.prototype.Ai = function (a) {
                        this.clickBegan = false;
                        if (this.enabledInHierarchy) {
                            var b = a.touch;
                            if (this.content) {
                                this.Ni(b);
                            }
                            this.Ti("touch-up");
                            if (this.Hi) {
                                a.stopPropagation();
                            } else {
                                this.Bi(a);
                            }
                        }
                    };
                    c.prototype.wi = function (a) {
                        this.clickBegan = false;
                        if (this.enabledInHierarchy) {
                            if (!a.simulate) {
                                var b = a.touch;
                                if (this.content) {
                                    this.Ni(b);
                                }
                            }
                            this.Bi(a);
                        }
                    };
                    c.prototype.Pi = function () {
                        if (this.Ri && this.Ri.getScrollY() > 0) {
                            this.dir = f.RIGHT;
                        } else if (this.Ri && this.Ri.getScrollY() < 0) {
                            this.dir = f.LEFT;
                        }
                    };
                    c.prototype.Li = function () {
                        this.snapPause = true;
                        this.snapDone = true;
                    };
                    c.prototype.Ei = function () {
                        this.itemOffSet = this.cellSize;
                        this.mi();
                        this.snapPause = false;
                        this.Ri = undefined;
                    };
                    c.prototype.ki = function (a) {
                        if (this.content.children.length && this.enabledInHierarchy) {
                            this.Ri = a;
                            var b = cc.v2(0, 0);
                            if (this.vertical) {
                                b = cc.v2(0, a.getScrollY() * -0.1);
                            } else if (this.horizontal) {
                                b = cc.v2(a.getScrollY() * -0.1, 0);
                                this.Pi();
                            }
                            this.Ui = 0;
                            this.ji(b);
                            if (!this.Di) {
                                this.Oi();
                                this.schedule(this.Wi, 1 / 60);
                                this.Di = true;
                                this.Li();
                            }
                            this.Bi(a);
                        }
                    };
                    c.prototype.Wi = function (b) {
                        var c;
                        var d;
                        c = this.xi();
                        d = cc.v2(0, 0);
                        0.0001;
                        if (!c.fuzzyEquals(d, 0.0001)) {
                            this.Fi();
                            this.unschedule(this.Wi);
                            this.Di = false;
                            this.Ei();
                            return;
                        }
                        this.Ui += b;
                        if (this.Ui > 0.1) {
                            this.Vi();
                            this.unschedule(this.Wi);
                            this.Di = false;
                            this.Ei();
                        }
                    };
                    return __decorate([h], c);
                }(e.default);
                c.default = i;
                cc._RF.pop();
            }
        }, {
            ScrollViewEx: "ScrollViewEx"
        }],
        ButtonBackground: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "96252/qWvdGA7VOxWpX5d7v", "ButtonBackground")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("UIAppearanceHelper");
                var f = cc._decorator;
                var g = f.ccclass;
                var h = f.property;
                var i = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.background = undefined;
                        b.backgroundColorKey = "";
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.onLoad = function () {
                        this.background.color = e.uiAppearanceHelper.v("" + this.backgroundColorKey) ? e.uiAppearanceHelper.v("" + this.backgroundColorKey) : e.uiAppearanceHelper.v("setting.theme_color");
                    };
                    __decorate([h(cc.Node)], b.prototype, "background", undefined);
                    __decorate([h(cc.String)], b.prototype, "backgroundColorKey", undefined);
                    return __decorate([g], b);
                }(cc.Component);
                c.default = i;
                cc._RF.pop();
            }
        }, {
            UIAppearanceHelper: "UIAppearanceHelper"
        }],
        ButtonController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "b879fiUzY1Om5HhXaCp7Qrf", "ButtonController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = cc._decorator.ccclass;
                var f = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.zi = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.setClickCallback = function (a) {
                        this.zi = a;
                    };
                    b.prototype.onClick = function () {
                        if (this.zi) {
                            this.zi();
                        }
                    };
                    b.prototype.clearClickCallback = function () {
                        this.zi = undefined;
                    };
                    b.prototype.getControllerAndHandlerName = function () {
                        return {
                            ControllerName: "ButtonController",
                            HandlerName: "onClick"
                        };
                    };
                    return __decorate([e], b);
                }(cc.Component);
                c.default = f;
                cc._RF.pop();
            }
        }, {}],
        ButtonHitTest: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "95aac3PHb1J8pXlbPzijfq9", "ButtonHitTest")) {
                c.__esModule = true;
                c.buttonHitTest = function (a) {
                    var b = cc.EventListener.ListenerID.TOUCH_ONE_BY_ONE;
                    cc.internal.eventManager[d.qi](b, cc.director.getScene());
                    var c = cc.internal.eventManager[d.Ji](b);
                    if (!c) {
                        return false;
                    }
                    for (var e, f = c[d.Ki], g = a.parent.convertToWorldSpaceAR(a.getPosition()), h = 0; h < f.length; ++h) {
                        if (f[h].owner[d.Qi](g, f[h])) {
                            e = f[h].owner;
                            break;
                        }
                    }
                    return e && e === a;
                };
                var d = cc.Enum({
                    qi: "_sortListenersOfSceneGraphPriority",
                    Ji: "_getListeners",
                    Qi: "_hitTest",
                    Ki: "_sceneGraphListeners"
                });
                cc._RF.pop();
            }
        }, {}],
        ButtonTheme: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "2a5d1nUeQZE9KCVbljwPCZP", "ButtonTheme")) {
                c.__esModule = true;
                c.default = undefined;
                var d = {
                    tooltip: false,
                    default: ""
                };
                var e = a("UIAppearanceHelper");
                var f = cc.Enum({
                    NONE: 0,
                    COLOR: 1,
                    SPRITE: 2,
                    SCALE: 3
                });
                var g = cc.Class({
                    extends: cc.Component,
                    ctor: function () { },
                    editor: false,
                    properties: {
                        transition: {
                            default: f.NONE,
                            tooltip: false,
                            type: f,
                            animatable: false,
                            notify: function () {
                                this.Yi();
                            }
                        },
                        domainKey: d,
                        colorKey: {
                            tooltip: false,
                            default: "",
                            notify: function () {
                                this.Xi();
                            }
                        }
                    },
                    onLoad: function () {
                        this.Zi = this.node.getComponent(cc.Button);
                        this.Yi();
                        this.Xi();
                    },
                    Yi: function () {
                        var a = this.Zi;
                        if (a) {
                            a.transition = this.transition;
                        }
                    },
                    Xi: function () {
                        var a = this.Zi;
                        if (a && this.transition == f.COLOR) {
                            this.domainKey;
                            this.colorKey;
                            var b = e.uiAppearanceHelper.v(this.domainKey + "." + this.colorKey + ".normal");
                            var c = e.uiAppearanceHelper.v(this.domainKey + "." + this.colorKey + ".pressed");
                            var d = e.uiAppearanceHelper.v(this.domainKey + "." + this.colorKey + ".hover");
                            var g = e.uiAppearanceHelper.v(this.domainKey + "." + this.colorKey + ".disabled");
                            if (b) {
                                a.node.opacity = b.getA();
                                a.normalColor = b;
                                a.pressedColor = c;
                                a.hoverColor = d;
                                a.disabledColor = g;
                            }
                        }
                    }
                });
                c.default = g;
                b.exports = c.default;
                cc._RF.pop();
            }
        }, {
            UIAppearanceHelper: "UIAppearanceHelper"
        }],
        Button: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "0a573tIV9xKS4qfPLe+tVuo", "Button")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = cc.Enum({
                    $i: "_transitionFinished",
                    ts: "_fromColor",
                    ss: "_toColor",
                    es: "_fromScale",
                    ns: "_toScale",
                    os: "_pressed"
                });
                var f = cc._decorator;
                var g = f.ccclass;
                var h = f.property;
                var i = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.targetCascadeOpacity = false;
                        b.hs = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.update = function (b) {
                        var c = this.target;
                        if (!this[e.$i] && (this.transition === cc.Button.Transition.COLOR || this.transition === cc.Button.Transition.SCALE)) {
                            this.time += b;
                            var d;
                            var f;
                            var g;
                            var h = 1;
                            if (this.duration > 0) {
                                h = this.time / this.duration;
                            }
                            if (h >= 1) {
                                h = 1;
                                this[e.$i] = true;
                            }
                            if (this.transition === cc.Button.Transition.COLOR) {
                                this[e.ts].a = c.opacity;
                                var i = this[e.ts].lerp(this[e.ss], h);
                                c.opacity = i.a;
                                i.a = 255;
                                c.color = i;
                            } else if (this.transition === cc.Button.Transition.SCALE) {
                                d = this[e.es];
                                f = this[e.ns];
                                g = h;
                                c.scale = cc.misc.lerp(d, f, g);
                            }
                        }
                    };
                    b.prototype.Si = function (b) {
                        this.hs = this.node.parent.convertToWorldSpaceAR(b.touch.getLocation());
                        a.prototype.Si.call(this, b);
                    };
                    b.prototype.rs = function (b) {
                        var c;
                        if (this[e.os]) {
                            c = this.node.parent.convertToWorldSpaceAR(b.touch.getLocation());
                            if (this.hs.sub(c).mag() > 50) {
                                this[e.os] = false;
                                this.hs = undefined;
                            }
                        } else {
                            this.hs = undefined;
                        }
                        a.prototype.rs.call(this, b);
                    };
                    __decorate([h(cc.Boolean)], b.prototype, "targetCascadeOpacity", undefined);
                    return __decorate([g], b);
                }(cc.Button);
                c.default = i;
                cc._RF.pop();
            }
        }, {}],
        CanvasResizeBroadcaster: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "1bceeNXbqdLOquKoj3nUFeA", "CanvasResizeBroadcaster")) {
                var c = System.get("common").CanvasResizeBroadcaster;
                b.exports.default = c;
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        ClickEffectController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "9c1bbOo47dBVKQhy7Uc4JE2", "ClickEffectController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = cc._decorator;
                var f = e.ccclass;
                var g = e.property;
                var h = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.flashSpriteNode = undefined;
                        b.clickEffectNode = undefined;
                        b.as = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.onLoad = function () {
                        this.as = this.clickEffectNode.getComponent(cc.Animation);
                    };
                    b.prototype.showClickEffect = function (a) {
                        var b = this.node.convertToNodeSpaceAR(a);
                        this.clickEffectNode.setPosition(b);
                        this.as.play("click_effect");
                    };
                    b.prototype.showFlash = function () {
                        this.flashSpriteNode.runAction(cc.sequence(cc.spawn(cc.scaleTo(0.3, 150), cc.sequence(cc.delayTime(0.05), cc.fadeOut(0.3))), cc.callFunc(this.us, this)));
                    };
                    b.prototype.us = function () {
                        var a = this.flashSpriteNode;
                        a.opacity = 128;
                        a.scale = 0;
                    };
                    __decorate([g(cc.Node)], b.prototype, "flashSpriteNode", undefined);
                    __decorate([g(cc.Node)], b.prototype, "clickEffectNode", undefined);
                    return __decorate([f], b);
                }(cc.Component);
                c.default = h;
                cc._RF.pop();
            }
        }, {}],
        ColumnTintController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "db1a7ck92RH5IUeHU4fUx37", "ColumnTintController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = cc._decorator;
                var f = e.ccclass;
                var g = e.property;
                var h = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.columnTintHolder = [];
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.fadeIn = function (a, b, c) {
                        this.columnTintHolder[a].stopAllActions();
                        this.columnTintHolder[a].runAction(cc.sequence(cc.fadeTo(b, 143), cc.callFunc(function () {
                            if (c) {
                                c();
                            }
                        })));
                    };
                    b.prototype.fadeOut = function (a, b, c) {
                        this.columnTintHolder[a].stopAllActions();
                        this.columnTintHolder[a].runAction(cc.sequence(cc.fadeOut(b), cc.callFunc(function () {
                            if (c) {
                                c();
                            }
                        })));
                    };
                    __decorate([g([cc.Node])], b.prototype, "columnTintHolder", undefined);
                    return __decorate([f], b);
                }(cc.Component);
                c.default = h;
                cc._RF.pop();
            }
        }, {}],
        CommonDummy: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "b1293aDfltLSYBmQFiPHMGc", "CommonDummy")) {
                cc._RF.pop();
            }
        }, {}],
        CreatorTweaks: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "a569ek937NGRIiNfWZy/vYu", "CreatorTweaks")) {
                b.exports = {};
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        CustomAnimParticleSystem: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "335a9gVv9pMJJVIVvm5+mNc", "CustomAnimParticleSystem")) {
                c.__esModule = true;
                c.default = undefined;
                var d;
                var e = (d = a("AnimParticleSystem")) && d.__esModule ? d : {
                    default: d
                };
                var f = cc.Enum({
                    LINEAR: 0,
                    GRAVITY: 1
                });
                var g = cc.Class({
                    extends: e.default,
                    properties: {
                        colorDelay: 0
                    },
                    O: function (a) {
                        var b = this;
                        var c = h(this.life, this.lifeVar);
                        var d = this.sourcePos;
                        var e = this.sourcePosVar;
                        var g = h(d.x, e.x);
                        var j = h(d.y, e.y);
                        a.setPosition(g, j);
                        a.angle = -h(this.startSpin, this.startSpinVar);
                        a.scale = h(this.startScale, this.startScaleVar);
                        a.opacity = h(this.startAlpha, this.startAlphaVar);
                        var k = h(this.speed, this.speedVar);
                        var l = h(this.angle, this.angleVar);
                        var m = [];
                        var n = Math.cos(l / 180 * Math.PI) * k * c;
                        var o = Math.sin(l / 180 * Math.PI) * k * c;
                        var p = g + n;
                        var q = j + o;
                        if (this.emitterMode === f.LINEAR) {
                            var r = cc.moveTo(c, cc.v2(p, q));
                            m.push(r);
                        } else if (this.emitterMode === f.GRAVITY) {
                            var s = this.gravityVec;
                            var t = this.gravityVecVar;
                            var u = h(s.x, t.x);
                            var v = h(s.y, t.y);
                            var w = g + n / 3;
                            var x = j + o / 3;
                            var y = g + n / 3 * 2;
                            var z = j + o / 3 * 2;
                            var A = p;
                            var B = q;
                            var C = c * 60 / 3;
                            var D = this.B(u, C);
                            var E = this.B(v, C);
                            var F = C * 2;
                            var G = this.B(u, F);
                            var H = this.B(v, F);
                            var I = C * 3;
                            var J = this.B(u, I);
                            var K = this.B(v, I);
                            var L = A > 0 ? 1 : -1;
                            var M = cc.v2(w - D * L, x - E);
                            var N = cc.v2(y - G * L, z - H);
                            var O = cc.v2(A - J * L, B - K);
                            var P = cc.bezierTo(c, [M, N, O]);
                            m.push(P);
                        }
                        var Q = h(this.endScale, this.endScaleVar);
                        if (a.scale !== Q) {
                            var R = cc.scaleTo(c, Q);
                            m.push(R);
                        }
                        var S = h(this.endSpin, this.endSpinVar);
                        if (a.angle !== -S) {
                            var T = cc.rotateTo(c, S, S);
                            m.push(T);
                        }
                        var U = h(this.endAlpha, this.endAlphaVar);
                        if (a.opacity !== U) {
                            var V = cc.fadeTo(c, U);
                            m.push(V);
                        }
                        var W = this.startColor;
                        var X = this.startColorVar;
                        var Y = this.endColor;
                        var Z = this.endColorVar;
                        if (!(i(W, cc.Color.WHITE) && i(X, cc.Color.BLACK) && i(Y, cc.Color.WHITE) && i(Z, cc.Color.BLACK))) {
                            if (i(X, cc.Color.BLACK)) {
                                a.color = W;
                            } else {
                                var $ = h(W.getR(), X.getR());
                                var _ = h(W.getG(), X.getG());
                                var aa = h(W.getB(), X.getB());
                                a.color = new cc.Color($, _, aa);
                            }
                            var ba;
                            if (i(Z, cc.Color.BLACK)) {
                                ba = Y;
                            } else {
                                var ca = h(Y.getR(), Z.getR());
                                var da = h(Y.getG(), Z.getG());
                                var ea = h(Y.getB(), Z.getB());
                                ba = new cc.Color(ca, da, ea);
                            }
                            if (!i(a.color, ba)) {
                                var fa = this.colorDelay > 1 ? 1 : this.colorDelay < 0 ? 0 : this.colorDelay;
                                var ga = cc.sequence(cc.delayTime(c * fa), cc.tintTo(c - c * fa, ba));
                                m.push(ga);
                            }
                        }
                        var ha;
                        var ia = m.length;
                        if (ia > 1) {
                            ha = cc.sequence(cc.spawn(m), cc.callFunc(function () {
                                b.H(a);
                            }, this));
                        } else if (ia === 1) {
                            ha = cc.sequence(m[0], cc.callFunc(function () {
                                b.H(a);
                            }, this));
                        }
                        this.A.push(a);
                        this.node.addChild(a);
                        a.runAction(ha);
                    }
                });
                c.default = g;
                b.exports = c.default;
                cc._RF.pop();
            }
            function h(a, b) {
                return a + b * (Math.random() - 0.5) * 2;
            }
            function i(a, b) {
                return a.equals(b);
            }
        }, {
            AnimParticleSystem: "AnimParticleSystem"
        }],
        CustomAssetConfig: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "30248ADAbFJo5w43O2b27X1", "CustomAssetConfig")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.customAssetConfig = undefined;
                var e = a("ResourceLoader");
                var f = a("SettingMenuHelper");
                var g = [{
                    name: "setting_menu_audio",
                    type: e.LoaderType.CUSTOM,
                    loadFunc: function (a, b) {
                        f.settingMenuHelper.loadAudio(function (c) {
                            if (c) {
                                b(c);
                            } else {
                                a(undefined);
                            }
                        });
                    }
                }];
                c.customAssetConfig = g;
                cc._RF.pop();
            }
        }, {
            ResourceLoader: "ResourceLoader",
            SettingMenuHelper: "SettingMenuHelper"
        }],
        DataSource: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "33f97XHWf5KOK2d9LLYgXNI", "DataSource")) {
                var c = System.get("bvframework").DataSource;
                b.exports.default = c;
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        DefaultStartScroller: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "a9e6d7qkYZPw5K5UPSZUUME", "DefaultStartScroller")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = {
                    scrollCallback: undefined,
                    maxSpeed: -5040,
                    accelerateDuration: 0.15,
                    accelerateFactor: 1.68,
                    accelerateDistance: -378,
                    bounceDistance: 60,
                    bounceDuration: 0.15,
                    bounceFactor: 1.84
                };
                var f = a("BaseScroller");
                var g = e;
                var h = function (a) {
                    function b(b) {
                        var c = a.call(this, __assign(__assign({}, g), b)) || this;
                        c.accumulatedTime = 0;
                        c.previousY = 0;
                        c.bindedRunUpdate = undefined;
                        c.bindedEndUpdate = undefined;
                        c.bindedRunUpdate = c.runUpdate.bind(c);
                        c.bindedEndUpdate = c.endUpdate.bind(c);
                        return c;
                    }
                    __extends(b, a);
                    b.prototype.onReset = function () {
                        this.update = undefined;
                    };
                    b.prototype.onRun = function () {
                        this.emitEvent(f.SCROLLER_EVENT.RUN);
                        this.accumulatedTime = 0;
                        this.previousY = 0;
                        this.update = this.bindedRunUpdate;
                    };
                    b.prototype.onEnd = function () {
                        this.update = this.bindedEndUpdate;
                        this.emitEvent(f.SCROLLER_EVENT.END);
                    };
                    b.prototype.runUpdate = function (b) {
                        var c = this.runtimeConfig;
                        b = this.accumulatedTime += b;
                        var d = c.bounceDuration;
                        if (b <= d) {
                            var e = 1 - Math.pow(1 - b / d, c.bounceFactor);
                            var g = c.bounceDistance * e;
                            c.scrollCallback(this, g - this.previousY);
                            this.previousY = g;
                            return;
                        }
                        b -= d;
                        var h = c.accelerateDuration;
                        if (b < h) {
                            e = Math.pow(b / h, c.accelerateFactor);
                            g = c.accelerateDistance * e + c.bounceDistance;
                            c.scrollCallback(this, g - this.previousY);
                            this.previousY = g;
                            this.emitEvent(f.SCROLLER_EVENT.ACCELERATE, e);
                            return;
                        }
                        this.emitEvent(f.SCROLLER_EVENT.ACCELERATE, 1);
                        this.end();
                    };
                    b.prototype.endUpdate = function (a) {
                        this.runtimeConfig.scrollCallback(this, a * this.runtimeConfig.maxSpeed);
                    };
                    return b;
                }(f.default);
                c.default = h;
                cc._RF.pop();
            }
        }, {
            BaseScroller: "BaseScroller"
        }],
        DefaultStopScroller: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "080a20w+h1E6aNSIb84n3TU", "DefaultStopScroller")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = {
                    scrollCallback: undefined,
                    getStopDistance: undefined,
                    maxSpeed: -5040,
                    endSpeed: -4680,
                    bounceDistance: -60,
                    bounceDuration: 0.15,
                    bounceFactor: 1.84
                };
                var f = a("BaseScroller");
                var g = e;
                var h = function (a) {
                    function b(b) {
                        var c = a.call(this, __assign(__assign({}, g), b)) || this;
                        c.changeSpeedDuration = 0;
                        c.changeSpeedTimer = 0;
                        c.previousMaxSpeed = 0;
                        c.accumulatedTime = 0;
                        c.previousY = 0;
                        c.endY = 0;
                        c.decelerateDistance = 0;
                        c.decelerateDuration = 0;
                        c.halfDeceleration = 0;
                        c.notified = false;
                        c.bindedIdleUpdate = undefined;
                        c.bindedRunUpdate = undefined;
                        c.bindedIdleUpdate = c.idleUpdate.bind(c);
                        c.bindedRunUpdate = c.runUpdate.bind(c);
                        return c;
                    }
                    __extends(b, a);
                    b.prototype.onReset = function () {
                        this.endY = 0;
                        this.previousY = 0;
                        this.changeSpeedDuration = 0;
                        this.notified = false;
                        this.update = this.bindedIdleUpdate;
                    };
                    b.prototype.onRun = function () {
                        this.emitEvent(f.SCROLLER_EVENT.RUN);
                        var a = this.runtimeConfig;
                        var b = this.endY = a.getStopDistance(this);
                        var c = this.decelerateDistance = b + a.bounceDistance;
                        var d = this.decelerateDuration = c * 2 / (a.maxSpeed + a.endSpeed);
                        this.halfDeceleration = (a.endSpeed - a.maxSpeed) / d / 2;
                        this.previousY = 0;
                        this.notified = false;
                        this.accumulatedTime = 0;
                        this.update = this.bindedRunUpdate;
                    };
                    b.prototype.onEnd = function () {
                        if (!this.notified) {
                            this.notified = true;
                            this.emitEvent(f.SCROLLER_EVENT.DECELERATE, 0);
                        }
                        var a = this.endY;
                        if (a === 0) {
                            a = this.runtimeConfig.getStopDistance(this);
                        }
                        var b = a - this.previousY;
                        if (b) {
                            this.runtimeConfig.scrollCallback(this, b);
                        }
                        this.update = undefined;
                        this.emitEvent(f.SCROLLER_EVENT.END);
                    };
                    b.prototype.idleUpdate = function (a) {
                        var b = this.changeSpeedDuration;
                        if (b) {
                            var c = this.changeSpeedTimer += a;
                            if (!(c >= b)) {
                                var d = this.previousMaxSpeed;
                                var e = d + (this.runtimeConfig.maxSpeed - d) * c / b;
                                this.runtimeConfig.scrollCallback(this, a * e);
                                return;
                            }
                            this.changeSpeedDuration = 0;
                        }
                        this.runtimeConfig.scrollCallback(this, a * this.runtimeConfig.maxSpeed);
                    };
                    b.prototype.runUpdate = function (b) {
                        var c = this.runtimeConfig;
                        b = this.accumulatedTime += b;
                        var d = this.decelerateDuration;
                        if (b < d) {
                            var e = c.maxSpeed * b + this.halfDeceleration * b * b;
                            c.scrollCallback(this, e - this.previousY);
                            this.previousY = e;
                            this.emitEvent(f.SCROLLER_EVENT.DECELERATE, 1 - b / d);
                            return;
                        }
                        if (!this.notified) {
                            this.notified = true;
                            this.emitEvent(f.SCROLLER_EVENT.DECELERATE, 0);
                        }
                        b -= d;
                        var g = c.bounceDuration;
                        if (b < g) {
                            var h = 1 - Math.pow(1 - b / g, c.bounceFactor);
                            e = this.decelerateDistance - c.bounceDistance * h;
                            c.scrollCallback(this, e - this.previousY);
                            this.previousY = e;
                            return;
                        }
                        this.end();
                    };
                    b.prototype.getDecelerateDuration = function () {
                        return this.decelerateDuration;
                    };
                    b.prototype.changeIdleSpeed = function (a, b) {
                        var c = this.runtimeConfig;
                        this.previousMaxSpeed = c.maxSpeed;
                        c.maxSpeed = b;
                        this.changeSpeedDuration = a;
                        this.changeSpeedTimer = 0;
                    };
                    return b;
                }(f.default);
                c.default = h;
                cc._RF.pop();
            }
        }, {
            BaseScroller: "BaseScroller"
        }],
        Deserializer: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "755a5d0q9ZMN7vreqSy6/g4", "Deserializer")) {
                var c = System.get("common").Deserialiser;
                b.exports.Deserializer = c;
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        DrawLine: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "0b006l9a0tOS5No6bQvo8YJ", "DrawLine")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = cc._decorator;
                var f = e.ccclass;
                var g = e.property;
                var h = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.horizontal = true;
                        b.vertical = false;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.onLoad = function () {
                        this.graphics = this.node.addComponent(cc.Graphics);
                        this.fs();
                        this.node.on("size-changed", this.fs, this);
                    };
                    b.prototype.fs = function () {
                        var a;
                        var b;
                        this.graphics.clear();
                        if (this.horizontal) {
                            a = -this.node.width * this.node.anchorX;
                            b = this.node.width - this.node.width * this.node.anchorX;
                            this.graphics.moveTo(a, this.node.height / 2);
                            this.graphics.lineTo(b, this.node.height / 2);
                        } else {
                            a = this.node.height * this.node.anchorX;
                            b = this.node.height * this.node.anchorX - this.node.height;
                            this.graphics.moveTo(this.node.width / 2, a);
                            this.graphics.lineTo(this.node.width / 2, b);
                        }
                        this.graphics.stroke();
                    };
                    b.prototype.onDestroy = function () {
                        this.node.off("size-changed", this.fs, this);
                        this.graphics.clear();
                    };
                    __decorate([g(cc.Boolean)], b.prototype, "horizontal", undefined);
                    __decorate([g(cc.Boolean)], b.prototype, "vertical", undefined);
                    return __decorate([f], b);
                }(cc.Component);
                c.default = h;
                cc._RF.pop();
            }
        }, {}],
        ErrorHandler: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "933099S7qNPvb+XKiLo98KQ", "ErrorHandler")) {
                var c = System.get("bvframework").ErrorHandler;
                for (var d in c) {
                    b.exports[d] = c[d];
                }
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        FeatureWinController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "95849uIMzZL0pGkaFJkWDGE", "FeatureWinController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("SymbolImageHandler");
                var f = cc._decorator;
                var g = f.ccclass;
                var h = f.property;
                var i = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.image = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.show = function (a) {
                        this.image.spriteFrame = e.symbolImageHandler.symbolImages[a];
                        this.node.active = true;
                    };
                    b.prototype.hide = function () {
                        this.node.active = false;
                    };
                    __decorate([h(cc.Sprite)], b.prototype, "image", undefined);
                    return __decorate([g], b);
                }(cc.Component);
                c.default = i;
                cc._RF.pop();
            }
        }, {
            SymbolImageHandler: "SymbolImageHandler"
        }],
        FireworkItem: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "99da7p9RjNLEY8vDpF/6mFE", "FireworkItem")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("Utils");
                var f = cc._decorator;
                var g = f.ccclass;
                var h = f.property;
                var i = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.fireworkAnimation = undefined;
                        b.ds = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.setup = function (a, b) {
                        this.ds = a;
                        this.fireworkAnimation.node.setPosition(b);
                        this.vs();
                    };
                    b.prototype.play = function () {
                        var a = this;
                        this.fireworkAnimation.play();
                        this.fireworkAnimation.on("finished", function () {
                            a.ds.put(a.fireworkAnimation.node);
                        });
                    };
                    b.prototype.vs = function () {
                        var a = e.randomInt(25, 35) / 10;
                        this.fireworkAnimation.node.scale = a;
                    };
                    __decorate([h(cc.Animation)], b.prototype, "fireworkAnimation", undefined);
                    return __decorate([g], b);
                }(cc.Component);
                c.default = i;
                cc._RF.pop();
            }
        }, {
            Utils: "Utils"
        }],
        ForegroundController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "b2cf3LpvJhIu6s35FbXCrhK", "ForegroundController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("GConstants");
                var f = cc._decorator;
                var g = f.ccclass;
                var h = f.property;
                var i = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.reelShine = [];
                        b.reelParticle = [];
                        b.footerGold = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.playRespin = function (a) {
                        var b = this;
                        this._t();
                        this.reelShine.forEach(function (a) {
                            a.play();
                        });
                        this.reelParticle.forEach(function (a) {
                            a.play();
                        });
                        this.reelParticle[0].on(cc.Animation.EventType.FINISHED, function () {
                            b.reelShine.forEach(function (a) {
                                a.node.runAction(cc.sequence(cc.tintTo(0.5, e.BLACK), cc.callFunc(b._t.bind(b))));
                            });
                            if (a) {
                                a();
                            }
                        });
                    };
                    b.prototype.showGold = function () {
                        this.footerGold.active = true;
                    };
                    b.prototype.hideGold = function () {
                        this.footerGold.active = false;
                    };
                    b.prototype._t = function () {
                        this.reelShine.forEach(function (a) {
                            a.node.stopAllActions();
                            a.node.color = e.WHITE;
                            a.stop();
                            a.setCurrentTime(0);
                            a.node.getComponent(cc.Sprite).spriteFrame = undefined;
                        });
                        this.reelParticle.forEach(function (a) {
                            a.stop();
                            a.setCurrentTime(0);
                            a.node.getComponent(cc.Sprite).spriteFrame = undefined;
                        });
                    };
                    __decorate([h([cc.Animation])], b.prototype, "reelShine", undefined);
                    __decorate([h([cc.Animation])], b.prototype, "reelParticle", undefined);
                    __decorate([h(cc.Node)], b.prototype, "footerGold", undefined);
                    return __decorate([g], b);
                }(cc.Component);
                c.default = i;
                cc._RF.pop();
            }
        }, {
            GConstants: "GConstants"
        }],
        GApiClient: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "55c9dWBKr5GWqWxtkwOuSVB", "GApiClient")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.gApiClient = undefined;
                var e = a("APIClient");
                a("TweaksData");
                var f = a("Utils");
                var g = a("AutomationDecorator");
                var h = a("APIClient.spec");
                var i = a("GDataSource");
                var j = f.getPlatform();
                var k = function (a) {
                    function b() {
                        return a !== null && a.apply(this, arguments) || this;
                    }
                    __extends(b, a);
                    b.prototype.spin = function (a) {
                        var b = this;
                        var c = i.gDataSource.transactionModel;
                        var d = c.transactionId;
                        var e = c.betLevelValue;
                        var f = c.betSizeValue;
                        var g = e;
                        var h = i.gDataSource.playerModel.walletKey;
                        var k = {
                            cs: f,
                            ml: g,
                            pf: j,
                            id: d,
                            crl: undefined,
                            wk: h
                        };
                        this.requestEngine("v2/Spin", k, function (c, d) {
                            b._s(c, d);
                            if (a) {
                                a(c, d);
                            }
                        });
                    };
                    b.prototype._s = function (a, b) {
                        this.logResult("spin", b);
                        if (b && b.dt) {
                            var c = b.dt.si;
                            this.print(c.sid);
                            i.gDataSource.updateTransactionInfo(c);
                        }
                    };
                    __decorate([g.automationDec({
                        func: h.onRequestSent
                    })], b.prototype, "spin", null);
                    __decorate([g.automationDec({
                        func: h.onRequestReceived
                    })], b.prototype, "_onRespond", null);
                    return b;
                }(e.default);
                c.default = k;
                var l = new k(i.gDataSource);
                c.gApiClient = l;
                cc._RF.pop();
            }
        }, {
            APIClient: "APIClient",
            "APIClient.spec": "APIClient.spec",
            AutomationDecorator: "AutomationDecorator",
            GDataSource: "GDataSource",
            TweaksData: "TweaksData",
            Utils: "Utils"
        }],
        GConstants: [function (b, c, d) {
            'use strict';

            if (!cc._RF.push(c, "12c16j/3s5O2aee2zhE3JDM", "GConstants")) {
                var a = {
                    value: true
                };
                Object.defineProperty(d, "__esModule", a);
                d.AUDIO_RELATED_TIMING = d.PAY_OUT_DATA = d.TEASE_TIMING = d.TURBO_SPIN_SPEEDUP_FACTOR = d.SPIN_BUTTON_TIMING = d.FEATURE_TRANSITION_TIMING = d.BIG_WIN_TIMING = d.INFOBOARD_TIMING = d.PAY_SELECT_TIMING = d.HORIZONTAL_DIRECTION = d.IS_RTL = d.GREY = d.WHITE = d.BLACK = undefined;
                d.BLACK = cc.color(0, 0, 0);
                d.WHITE = cc.color(255, 255, 255);
                d.GREY = cc.color(50, 50, 50);
                d.IS_RTL = shell.isRTLLanguage && shell.isRTLLanguage();
                var e = cc.Layout.HorizontalDirection.LEFT_TO_RIGHT;
                var f = cc.Layout.HorizontalDirection.RIGHT_TO_LEFT;
                d.HORIZONTAL_DIRECTION = d.IS_RTL ? f : e;
                d.PAY_SELECT_TIMING = {
                    PLAY_ALTERNATE_LINE_DURATION: 2,
                    PLAY_ALL_LINE_DURATION: 0,
                    ALTERNATE_LINE_ONE_BY_ONE_INTERVAL: 0.1,
                    ALL_LINE_ONE_BY_ONE_INTERVAL: 0.05,
                    ALTERNATE_LINE_DELAY_TIME: 0.05
                };
                d.INFOBOARD_TIMING = {
                    MEDIUM_WIN_ROLL_DURATION: 2,
                    DELAY_RESET: 0.5
                };
                d.BIG_WIN_TIMING = {
                    BIG_WIN_DELAY: 0.4,
                    SKIP_ROLL_DELAY: 0.7,
                    DISMISS_BIG_WIN_DELAY: 0.5,
                    AUTO_DISMISS_BIG_WIN_DELAY: 6,
                    BIG_WIN_ROLL_DURATION: [4.219, 3.75],
                    MEGA_WIN_ROLL_DURATION: [3.75, 3.75],
                    SUPER_MEGA_WIN_ROLL_DURATION: [3.75, 3.738]
                };
                d.FEATURE_TRANSITION_TIMING = {
                    PRE_ZOOM_DURATION: 0.35,
                    UI_TRANSITION_INTO_BONUS_DURATION: 1.75,
                    UI_TRANSITION_INTO_NORMAL_DURATION: 1,
                    UI_TRANSITION_INTO_NORMAL_DELAY: 1,
                    FADE_OUT_BONUS_REEL_DURATION: 0.35
                };
                d.SPIN_BUTTON_TIMING = {
                    SECONDS_PER_ROUND_SPINNING: 0.5,
                    SECONDS_PER_ROUND_IDLE: 4
                };
                d.TURBO_SPIN_SPEEDUP_FACTOR = 0.4;
                d.TEASE_TIMING = {
                    ENTER_TEASE_DURATION: 1.75,
                    EXIT_TEASE_DURATION: 1.3
                };
                d.PAY_OUT_DATA = {
                    "0": {
                        "3": 250
                    },
                    "2": {
                        "3": 100
                    },
                    "3": {
                        "3": 25
                    },
                    "4": {
                        "3": 10
                    },
                    "5": {
                        "3": 8
                    },
                    "6": {
                        "3": 5
                    },
                    "7": {
                        "3": 3
                    }
                };
                d.AUDIO_RELATED_TIMING = {
                    FADE_IN_RESPIN_REEL_LOOP_DURATION: 1,
                    FADE_OUT_RESPIN_REEL_LOOP_DURATION: 0.5,
                    FADE_OUT_ZOOM_OUT_SFX_DURATION: 0.5,
                    FADE_OUT_MOUSE_TEASE_VOX_DURATION: 0.5,
                    BGM_CROSSFADE_DURATION: 1,
                    FS_REEL_LOOP_VOLUME: 0.6,
                    BGM_NORMAL_TO_RESPIN: 0.1,
                    BGM_RESPIN_TO_NORMAL: 1.5
                };
                cc._RF.pop();
            }
        }, {}],
        GDataSource: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "2a313L7PyZGlqutL42bLW8/", "GDataSource")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.gDataSource = undefined;
                var e = a("RtConfig");
                var f = a("GSlotTransactionModel");
                var g = a("DataSource");
                var h = a("PlayerModel");
                var i = a("SlotSystemModel");
                var j = function (a) {
                    function b() {
                        return a.call(this, {
                            playerModel: new h.default(),
                            systemModel: new i.default(e.cs_Config),
                            transactionModel: new f.default()
                        }) || this;
                    }
                    __extends(b, a);
                    return b;
                }(g.default);
                c.default = j;
                var k = new j();
                c.gDataSource = k;
                cc._RF.pop();
            }
        }, {
            DataSource: "DataSource",
            GSlotTransactionModel: "GSlotTransactionModel",
            PlayerModel: "PlayerModel",
            RtConfig: "RtConfig",
            SlotSystemModel: "SlotSystemModel"
        }],
        GIdleState: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "5ac57uin/lCkpc/fmWpJiL5", "GIdleState")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("IdleState");
                var f = a("SlotGameConstants");
                var g = a("ReplayModeHandler");
                var h = a("TransactionStateMachineHandler");
                var i = function (a) {
                    function b(b, c, d, e) {
                        if (e === undefined) {
                            e = f.DEFAULT_AUTO_SPIN_DELAY_TIME;
                        }
                        var g = a.call(this, b, c, d, e) || this;
                        g.ms = c.uiHelper;
                        return g;
                    }
                    __extends(b, a);
                    b.prototype.run = function () {
                        var b = this;
                        function c() {
                            a.prototype.run.call(b);
                        }
                        if (g.fmReplayModeHandler.replayCompleted()) {
                            c();
                        } else {
                            h.goToStateCallback("idle")(c);
                        }
                    };
                    b.prototype.onStateFullyIdle = function () {
                        this.ms.onStateFullyIdle();
                    };
                    b.prototype.additionalDestroyCleanups = function () {
                        this.ms = undefined;
                    };
                    b.prototype.preExitStateCleanups = function () {
                        var a = this.generalControllers.symbolPopoutController;
                        a.disablePanel();
                        a.clearOnClickCallback();
                    };
                    b.prototype.onExitState = function (a) {
                        h.transitionCompleteCallback("action")(a);
                    };
                    b.prototype.enableAvailableActions = function () {
                        if (g.fmReplayModeHandler.replayStarted()) {
                            this.enableSpinAction();
                        }
                    };
                    b.prototype.defineSystemEventConfigParam = function () {
                        var a = this;
                        return {
                            callback: function () {
                                if (g.fmReplayModeHandler.replayCompleted()) {
                                    g.fmReplayModeHandler.endReplay();
                                    a.tryAutoSpin();
                                } else {
                                    h.goToStateCallback("action", true)(function () {
                                        if (!g.fmReplayModeHandler.replayCompleted()) {
                                            a.tryAutoSpin();
                                        }
                                    });
                                }
                            }
                        };
                    };
                    return b;
                }(e.default);
                c.default = i;
                cc._RF.pop();
            }
        }, {
            IdleState: "IdleState",
            ReplayModeHandler: "ReplayModeHandler",
            SlotGameConstants: "SlotGameConstants",
            TransactionStateMachineHandler: "TransactionStateMachineHandler"
        }],
        GNormalGameState: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "8ba89Q1SMVGHJfV/8zsSj5r", "GNormalGameState")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("Utils");
                var f = a("NormalSpinDecorator");
                var g = a("NormalPrizeDecorator");
                var h = a("GSlotTransactionModel");
                var i = a("GIdleState");
                var j = a("GSpinState");
                var l = a("GNormalResultState");
                var m = a("GPrizeState");
                var n = a("NormalUIHelper");
                var o = a("GResultDecorator");
                var p = a("TransactionStateMachineHandler");
                var q = cc.Enum({
                    NONE: 0,
                    IDLE: 1,
                    SPIN: 2,
                    RESULT: 3,
                    CHECK: 4
                });
                var k = function () {
                    function a(a, b, c) {
                        this.name = "Normal Game State";
                        this.ci = undefined;
                        this.ps = undefined;
                        this.bs = undefined;
                        this.Ss = undefined;
                        this.ms = undefined;
                        this.ci = a;
                        this.ps = b;
                        this.bs = c;
                        this.ms = new n.default(a, b);
                    }
                    a.prototype.run = function () {
                        this.Ss = q.NONE;
                        this.gs();
                    };
                    a.prototype.destroy = function () {
                        this.ci = undefined;
                        this.ps = undefined;
                        this.bs = undefined;
                        this.Ss = undefined;
                    };
                    a.prototype.gs = function () {
                        switch (this.Ss) {
                            case q.NONE:
                                this.Ss = q.IDLE;
                                this.Cs();
                                break;
                            case q.IDLE:
                                this.Ss = q.SPIN;
                                this.ys();
                                break;
                            case q.SPIN:
                                this.Ss = q.RESULT;
                                this.Ms();
                                break;
                            case q.RESULT:
                                this.Ss = q.CHECK;
                                this.As();
                                break;
                            case q.CHECK:
                                var a = undefined;
                                if (this.ci.transactionModel.stateTransitionTo === h.SpinType.NORMAL) {
                                    this.Ss = q.NONE;
                                    a = this.gs.bind(this);
                                } else {
                                    a = this.Is.bind(this);
                                }
                                this.ws(a);
                        }
                    };
                    a.prototype.Cs = function () {
                        var a = {
                            generalControllers: this.ps,
                            uiHelper: this.ms
                        };
                        var b = a;
                        new i.default(this.ci, b, this.gs.bind(this), 0.3).run();
                    };
                    a.prototype.ys = function () {
                        var a = {
                            generalControllers: this.ps,
                            uiHelper: this.ms
                        };
                        var b = a;
                        var c = new f.default(this.ci, b);
                        new j.default(this.ci, b, this.gs.bind(this), c).run();
                    };
                    a.prototype.Ms = function () {
                        var a = {
                            generalControllers: this.ps,
                            uiHelper: this.ms
                        };
                        var b = a;
                        var c = new o.default(this.ci, b);
                        new l.default(this.ci, b, this.gs.bind(this), c).run();
                    };
                    a.prototype.As = function () {
                        var a = {
                            generalControllers: this.ps,
                            uiHelper: this.ms
                        };
                        var b = a;
                        var c = new g.default(this.ci, b);
                        new m.default(this.ci, b, this.gs.bind(this), c).run();
                    };
                    a.prototype.ws = function (a) {
                        var b = this.ci.transactionModel.stateTransitionTo;
                        var c = this.ci;
                        var d = c.isGameReplaying;
                        var e = c.nextGameReplayInfo;
                        var f = b === h.SpinType.NORMAL ? "setup" : "idle";
                        f = d && e ? "idle" : f;
                        p.transitionCompleteCallback(f)(a);
                    };
                    a.prototype.Is = function () {
                        var a = this.bs;
                        this.bs = undefined;
                        this.destroy();
                        e.deferCallback(this)(a);
                    };
                    return a;
                }();
                c.default = k;
                cc._RF.pop();
            }
        }, {
            GIdleState: "GIdleState",
            GNormalResultState: "GNormalResultState",
            GPrizeState: "GPrizeState",
            GResultDecorator: "GResultDecorator",
            GSlotTransactionModel: "GSlotTransactionModel",
            GSpinState: "GSpinState",
            NormalPrizeDecorator: "NormalPrizeDecorator",
            NormalSpinDecorator: "NormalSpinDecorator",
            NormalUIHelper: "NormalUIHelper",
            TransactionStateMachineHandler: "TransactionStateMachineHandler",
            Utils: "Utils"
        }],
        GNormalResultState: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "64d7f1bCUdFaZJl2yqdd7bl", "GNormalResultState")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("ResultState");
                var f = a("SlotStateMachine");
                var g = a("GSlotTransactionModel");
                var h = a("SlotAnalyticsEnum");
                var i = a("RespinReelStatusHandler");
                var j = a("TransactionStateMachineHandler");
                var k = a("SlotAnalyticsHelper");
                var l = a("SlotProperties");
                var m = a("SpinConfigHandler");
                var n = function (a) {
                    function b(b, c, d, e) {
                        var f = a.call(this, b, c, d, e) || this;
                        f.uiHelper = undefined;
                        f._decorator = undefined;
                        f._decorator = e;
                        f.ms = c.uiHelper;
                        return f;
                    }
                    __extends(b, a);
                    b.prototype.setAvailableActions = function () {
                        i.respinReelStatusHandler.updateRespinReelStatus(this.dataSource);
                    };
                    b.prototype.setSlotData = function () {
                        var a = this.generalControllers;
                        var b = a.slotController;
                        var c = a.symbolPopoutController;
                        var d = this.dataSource.transactionModel;
                        var e = d.reels;
                        var f = d.stateTransitionTo;
                        var h = d.featureWinSymbol;
                        var i = e.slice();
                        if (f === g.SpinType.RESPIN && h) {
                            i.forEach(function (a, b) {
                                if (a !== h && a !== l.SLOT_INDEX.WILD) {
                                    i[b] = -1;
                                }
                            });
                        }
                        b.setReelData(i);
                        c.setReelData(i);
                    };
                    b.prototype.resultDidStartRender = function (a) {
                        var b = this;
                        var c = this.dataSource.transactionModel;
                        var d = c.stateTransitionTo;
                        var e = c.stateTransitionFrom;
                        var i = c.isShowTease;
                        function k() {
                            j.goToStateCallback("prize", true)(a);
                        }
                        if (e === g.SpinType.NORMAL && d === g.SpinType.RESPIN) {
                            this.ms.renderBonusFeatureBeforeResult(function () {
                                var a = b.generalControllers.slotController;
                                if (m.featureConfig.fastStopFeature) {
                                    a.unmarkFastStop();
                                    a.enableTouchEvent();
                                    if (b._decorator && b._decorator.clearAvailableActions) {
                                        b._decorator.clearAvailableActions();
                                    }
                                    b._decorator.triggerFastStop = b.handleSlotRegionFastStop.bind(b);
                                    b._decorator.setKeyboardActionsDuringRespinTransition();
                                }
                                if (m.featureConfig.fastStopFeature && a.getStopStyle() !== f.StopStyle.FAST) {
                                    a.setOnClickCallback(b.handleSlotRegionFastStop.bind(b, h.SpinTrigger.CLICK));
                                }
                            }, k);
                        } else if (i) {
                            this.ms.renderTeaseFeatureBeforeResult(this.Os.bind(this), k);
                        } else {
                            k();
                        }
                    };
                    b.prototype.invokeSlotStop = function () {
                        var a = this.generalControllers.slotController;
                        if (a.getStopStyle() === f.StopStyle.FAST) {
                            a.fastStop();
                        } else {
                            a.stopSpin();
                        }
                    };
                    b.prototype.slotDidStartStopping = function (a) {
                        this.ms.renderFeatureDuringResult(function () {
                            if (a) {
                                a();
                            }
                        });
                    };
                    b.prototype.renderFeature = function (a) {
                        this.ms.renderFeatureAfterResult(function () {
                            if (a) {
                                a();
                            }
                        });
                    };
                    b.prototype.handleSlotRegionFastStop = function (a) {
                        var b = this.generalControllers;
                        var c = b.slotController;
                        b.uiShiftController;
                        b.backgroundController;
                        var d = b.spinButtonController;
                        this.dataSource.transactionModel.isShowTease;
                        switch (this.process) {
                            case h.SpinStateProcess.REEL_SPINNING:
                                k.sendFastStopGA(a, d.isAutoSpin());
                                if (this._decorator && this._decorator.fastStopTriggeredWhileSpinning) {
                                    this._decorator.fastStopTriggeredWhileSpinning();
                                }
                                this.fastStopTriggeredWhileSpinning();
                                c.setOnClickCallback(undefined);
                                c.markFastStop();
                                break;
                            case h.SpinStateProcess.REEL_STOPPING:
                                k.sendFastStopGA(a, d.isAutoSpin());
                                if (this._decorator && this._decorator.triggerFastStopWhileStopping) {
                                    this._decorator.triggerFastStopWhileStopping();
                                }
                                this.triggerFastStopWhileStopping();
                                c.setOnClickCallback(undefined);
                                c.fastStop();
                        }
                    };
                    b.prototype.additionalDestroyCleanups = function () {
                        this.ms = undefined;
                    };
                    b.prototype.Os = function () {
                        var a = this.generalControllers;
                        var b = a.slotController;
                        var c = a.spinButtonController;
                        b.setOnSlotBeginInterruptCallback(function () {
                            c.stopSpin();
                        });
                    };
                    return b;
                }(e.default);
                c.default = n;
                cc._RF.pop();
            }
        }, {
            GSlotTransactionModel: "GSlotTransactionModel",
            RespinReelStatusHandler: "RespinReelStatusHandler",
            ResultState: "ResultState",
            SlotAnalyticsEnum: "SlotAnalyticsEnum",
            SlotAnalyticsHelper: "SlotAnalyticsHelper",
            SlotProperties: "SlotProperties",
            SlotStateMachine: "SlotStateMachine",
            SpinConfigHandler: "SpinConfigHandler",
            TransactionStateMachineHandler: "TransactionStateMachineHandler"
        }],
        GNormalStopScroller: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "38e38f5QRpDprD5l00K1bGD", "GNormalStopScroller")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("DefaultStopScroller");
                var f = a("BaseScroller");
                var g = a("GeneralAudioConstant");
                var h = a("AudioManager");
                var i = a("SlotProperties");
                var j = cc._decorator.ccclass;
                var k = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.Hs = 0.2;
                        b.Bs = undefined;
                        b.Gs = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.updateEndSpeed = function (a) {
                        this.config.endSpeed = a;
                        this.runtimeConfig.endSpeed = a;
                    };
                    Object.defineProperty(b.prototype, "scrollerIndex", {
                        set: function (a) {
                            this.Ns = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "isRespin", {
                        set: function (a) {
                            this.Ts = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.setOnScrollerReachesBouncePointCallback = function (a) {
                        this.Ps = a;
                    };
                    b.prototype.setOnScrollerReachesLowestPointCallback = function (a) {
                        this.Rs = a;
                    };
                    b.prototype.setOnScrollerReachesSlowDownPointCallback = function (a) {
                        this.Ls = a;
                    };
                    b.prototype.onRun = function () {
                        this.emitEvent(f.SCROLLER_EVENT.RUN);
                        var a = this.runtimeConfig;
                        var b = this.endY = a.getStopDistance(this);
                        var c = this.decelerateDistance = b + a.bounceDistance;
                        var d = this.decelerateDuration = c * 2 / (a.maxSpeed + a.endSpeed);
                        this.halfDeceleration = (a.endSpeed - a.maxSpeed) / d / 2;
                        this.previousY = 0;
                        this.notified = false;
                        this.accumulatedTime = 0;
                        this.update = this.bindedRunUpdate;
                        this.Bs = false;
                        this.Gs = false;
                    };
                    b.prototype.runUpdate = function (a) {
                        var b = this.runtimeConfig;
                        a = this.accumulatedTime += a;
                        var c = this.decelerateDuration;
                        if (a < c) {
                            if (!this.Gs && a > c * this.Hs) {
                                this.Gs = true;
                                if (this.Ls) {
                                    this.Ls(this.Ns, this.Ts);
                                }
                            }
                            var d = b.maxSpeed * a + this.halfDeceleration * a * a;
                            b.scrollCallback(this, d - this.previousY);
                            this.previousY = d;
                            this.emitEvent(f.SCROLLER_EVENT.DECELERATE, 1 - a / c);
                            return;
                        }
                        if (!this.notified) {
                            this.notified = true;
                            this.emitEvent(f.SCROLLER_EVENT.DECELERATE, 0);
                            if (this.Ps) {
                                this.Ps(this.Ns, this.Ts);
                            }
                            var e = g.GENERAL_AUDIO.spinStop.key;
                            h.stopAudioIfPlaying(e);
                            h.playAudioIfNotPlaying(e);
                            if (this.Ns === i.NORMAL_SLOT_COLUMN - 1) {
                                var j = g.GENERAL_AUDIO.spinActiveLoop.key;
                                h.stopAudioIfPlaying(j);
                            }
                        }
                        if ((a -= c) < b.bounceDuration) {
                            var k = Math.pow(2, a * -12) * Math.sin(Math.PI * 2 * (a * 0.1 - 0.075) / 0.3) + 1;
                            var l = (d = this.decelerateDistance - b.bounceDistance * k) - this.previousY;
                            b.scrollCallback(this, l);
                            if (l > 0 && !this.Bs) {
                                this.Bs = true;
                                if (this.Rs) {
                                    this.Rs(this.Ns, this.Ts);
                                }
                            }
                            this.previousY = d;
                            return;
                        }
                        this.end();
                    };
                    return __decorate([j], b);
                }(e.default);
                c.default = k;
                cc._RF.pop();
            }
        }, {
            AudioManager: "AudioManager",
            BaseScroller: "BaseScroller",
            DefaultStopScroller: "DefaultStopScroller",
            GeneralAudioConstant: "GeneralAudioConstant",
            SlotProperties: "SlotProperties"
        }],
        GPopOutItem: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "545aadFzDRAIoq12el2mf1A", "GPopOutItem")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("PopOutItem");
                var f = a("GConstants");
                var g = a("GeneralAudioConstant");
                var h = a("SpineConfigHandler");
                var i = a("SlotProperties");
                var j = a("AudioManager");
                var k = cc._decorator;
                var l = k.ccclass;
                var m = k.property;
                var n = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.spine = undefined;
                        b.background = undefined;
                        b.payoutNumber = [];
                        b.payoutValue = [];
                        b.numberHolder = undefined;
                        b.numberHolderLayout = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.unuse = function () {
                        this.node.opacity = 0;
                    };
                    b.prototype.reuse = function () {
                        this.node.opacity = 0;
                    };
                    b.prototype.hideItem = function () {
                        this.node.opacity = 0;
                        this.node.active = false;
                    };
                    b.prototype.showItem = function (a, b, c, d, e, f) {
                        if (d !== -1) {
                            var k = g.GENERAL_AUDIO.uiInfo.key;
                            j.stopAudioIfPlaying(k);
                            j.playAudioIfNotPlaying(k);
                            var l = h.spineConfigHandler.getNormalSymbolSpine(d);
                            var m = d === i.SLOT_INDEX.WILD ? "idle" : "win_idle";
                            this.spine.skeletonData = l;
                            this.spine.setAnimation(0, m, true);
                            this.Es(f);
                            this.setPayoutValue(d, b);
                            this.node.active = true;
                            this.node.setPosition(e);
                            this.node.runAction(cc.sequence(cc.fadeTo(0.2, 255), cc.callFunc(function () {
                                if (a) {
                                    a();
                                }
                            })));
                        } else if (a) {
                            a();
                        }
                    };
                    b.prototype.Es = function (a) {
                        this.ks();
                        this.background.node.scaleX = a ? 1 : -1;
                        this.node.anchorX = a ? 0.265 : 0.735;
                        if (f.IS_RTL) {
                            this.numberHolder.x = a ? 280 : -240;
                        } else {
                            this.numberHolder.x = a ? 240 : -280;
                        }
                    };
                    b.prototype.ks = function () {
                        this.numberHolderLayout.horizontalDirection = f.HORIZONTAL_DIRECTION;
                    };
                    b.prototype.setPayoutValue = function (a, b) {
                        var c = this;
                        var d = b[a];
                        var e = Object.keys(d);
                        e.reverse();
                        this.payoutNumber.forEach(function (a) {
                            var b = a.getComponent("NumberDisplayController");
                            b.clear();
                            b.displayNumber(e[0]);
                            var f = c.payoutValue[0].getComponent("NumberDisplayController");
                            f.clear();
                            f.displayNumber(d[e[0]]);
                        });
                    };
                    __decorate([m(sp.Skeleton)], b.prototype, "spine", undefined);
                    __decorate([m(cc.Sprite)], b.prototype, "background", undefined);
                    __decorate([m([cc.Node])], b.prototype, "payoutNumber", undefined);
                    __decorate([m([cc.Node])], b.prototype, "payoutValue", undefined);
                    __decorate([m(cc.Node)], b.prototype, "numberHolder", undefined);
                    __decorate([m(cc.Layout)], b.prototype, "numberHolderLayout", undefined);
                    return __decorate([l], b);
                }(e.default);
                c.default = n;
                cc._RF.pop();
            }
        }, {
            AudioManager: "AudioManager",
            GConstants: "GConstants",
            GeneralAudioConstant: "GeneralAudioConstant",
            PopOutItem: "PopOutItem",
            SlotProperties: "SlotProperties",
            SpineConfigHandler: "SpineConfigHandler"
        }],
        GPrizeState: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "78701ULLg5Pe5ROZ+aIrTPo", "GPrizeState")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("PrizeState");
                var f = a("Utils");
                var g = a("GSlotTransactionModel");
                var h = a("TransactionStateMachineHandler");
                var i = function (a) {
                    function b(b, c, d, e) {
                        var f = a.call(this, b, c, d, e) || this;
                        f.uiHelper = undefined;
                        f.uiHelper = c.uiHelper;
                        f.uiHelper.setWinThreshold(f.getWinThresholds());
                        return f;
                    }
                    __extends(b, a);
                    b.prototype.setAvailableActions = function () {
                        this.uiHelper.setAvailablePrizeAction();
                    };
                    b.prototype.renderPrize = function () {
                        f.spawnCallback(this.renderLines.bind(this), f.sequenceCallback(this.Us.bind(this), this.js.bind(this), this.playPrize.bind(this)))(this.exitState.bind(this));
                    };
                    b.prototype.Us = function (a) {
                        this.uiHelper.renderFeatureBeforePrize(a);
                    };
                    b.prototype.playAllLines = function (a) {
                        this.uiHelper.playAllLines(a);
                    };
                    b.prototype.runSmallPrizeState = function (a, b) {
                        this.uiHelper.playSmallWin(a, b);
                    };
                    b.prototype.runMediumPrizeState = function (a, b) {
                        this.uiHelper.playMediumWin(a, b);
                    };
                    b.prototype.runBigPrizeState = function (a, b) {
                        var c = this.getWinThresholds();
                        this.uiHelper.playBigWin(a, c, b);
                    };
                    b.prototype.getWinThresholds = function () {
                        var a = this.dataSource.transactionModel;
                        var b = a.betLevelValue;
                        var c = a.betSizeValue;
                        var d = this.dataSource.systemModel.maxLineNumber;
                        return this.dataSource.systemModel.winThresholds.getAllThresholds(c, b, d);
                    };
                    b.prototype.preExitStateCleanup = function () {
                        this.uiHelper.clearLargeSymbol();
                    };
                    b.prototype.js = function (b) {
                        var c = this.dataSource.transactionModel.stateTransitionTo;
                        var d = this.dataSource;
                        var e = d.isGameReplaying;
                        var i = d.nextGameReplayInfo;
                        var j = c === g.SpinType.NORMAL ? "setup" : "idle";
                        j = e && i ? "idle" : j;
                        f.sequenceCallback(h.transitionCompleteCallback("prize"), h.goToStateCallback(j, true))(b);
                    };
                    return b;
                }(e.default);
                c.default = i;
                cc._RF.pop();
            }
        }, {
            GSlotTransactionModel: "GSlotTransactionModel",
            PrizeState: "PrizeState",
            TransactionStateMachineHandler: "TransactionStateMachineHandler",
            Utils: "Utils"
        }],
        GRefreshWorldHandler: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "a8cd9CQqD5IBJrUbbqohyhh", "GRefreshWorldHandler")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.GRefreshWorldHandler = undefined;
                var e = a("GDataSource");
                var f = a("GApiClient");
                var g = a("RefreshWorldHandler");
                var h = a("Utils");
                var i = a("AutoSpinHandler");
                var j = a("GSlotTransactionModel");
                var k = a("BGMHandler");
                var l = a("AudioManager");
                var m = function (a) {
                    function b(b) {
                        var c = a.call(this, e.gDataSource, f.gApiClient) || this;
                        c.setupUICallback = undefined;
                        c.ps = undefined;
                        c.Ds = [l.GeneralAudioPool.bgm_bigwin_main, l.GeneralAudioPool.bgm_bigwin_end];
                        c.Ws = function (a) {
                            var b = e.gDataSource.transactionModel;
                            var d = b.reels;
                            var f = b.wildCount;
                            var g = c.ps;
                            var i = g.slotController;
                            var j = g.tigerController;
                            var k = g.backgroundController2;
                            var l = g.symbolPopoutController;
                            var m = [];
                            d.forEach(function (a, b) {
                                if (a === -1) {
                                    m.push(b);
                                }
                            });
                            j.resetTiger(f);
                            k.setupToNormalState();
                            i.setReelData(d);
                            i.reloadData(d);
                            l.setReelData(d);
                            l.setupButtonEvent(m);
                            if (c.setupUICallback) {
                                h.deferCallback(true)(c.setupUICallback.bind(c, a));
                            } else {
                                a();
                            }
                        };
                        c.ps = b.generalControllers;
                        return c;
                    }
                    __extends(b, a);
                    b.prototype.cleanup = function () {
                        var a = this.ps;
                        var b = a.paySelectEffectController;
                        var c = a.symbolPopoutController;
                        var d = a.slotTintController;
                        var e = a.infoboardController;
                        var f = a.stickyController;
                        c.hidePopOutItem();
                        b.stopPaySelect();
                        d.fadeOut(0);
                        e.resetInfoboard(false);
                        e.resumeInfoboard();
                        e.instantHideMediumWin();
                        f.clearSticky();
                    };
                    b.prototype.cleanupReplayWorld = function (a) {
                        this.cleanup();
                        this.xs();
                        if (a) {
                            a();
                        }
                    };
                    b.prototype.enableSpinButton = function () {
                        this.ps.spinButtonController.idle();
                    };
                    b.prototype.disableSpinButton = function () {
                        var a = this.ps.spinButtonController;
                        i.exitAutoSpin(a);
                        a.idle();
                    };
                    b.prototype.hideLoadingPage = function (a) {
                        if (a) {
                            a();
                        }
                    };
                    b.prototype.showLoadingPage = function (a) {
                        if (a) {
                            a();
                        }
                    };
                    b.prototype.setupNewWorld = function (a) {
                        h.sequenceCallback(this.Ws.bind(this), this.Fs.bind(this))(function () {
                            if (a) {
                                a();
                            }
                        });
                    };
                    b.prototype.setupReplayWorld = function (a) {
                        h.sequenceCallback(this.Ws.bind(this), this.Vs.bind(this))(function () {
                            if (a) {
                                a();
                            }
                        });
                    };
                    b.prototype.Fs = function (a) {
                        var b = e.gDataSource.transactionModel;
                        var c = b.winLines;
                        var d = b.winValues;
                        b.w;
                        var f = this.ps;
                        var g = f.slotTintController;
                        var i = f.paySelectEffectController;
                        var j = f.infoboardController;
                        h.sequenceCallback(function (a) {
                            if (c) {
                                g.fadeIn(0.2);
                                i.playAlternateLines(c, d);
                            }
                            if (a) {
                                a();
                            }
                        }, function (a) {
                            var b = e.gDataSource.systemModel;
                            var c = b.maxLineNumber;
                            var f = b.winThresholds;
                            var h = e.gDataSource.transactionModel;
                            var i = h.betSizeValue;
                            var k = h.betLevelValue;
                            var g = e.gDataSource.transactionModel.accumulatedWinAmount;
                            var l = f.getAllThresholds(i, k, c);
                            if (g > 0) {
                                if (g >= l.mediumWinThreshold && g < l.bigWinThreshold) {
                                    j.instantPlayMediumWin(g);
                                } else {
                                    j.playWin(g);
                                }
                            } else {
                                j.resetInfoboard(false);
                                j.resumeInfoboard();
                            }
                            if (a) {
                                a();
                            }
                        })(a);
                    };
                    b.prototype.Vs = function (a) {
                        var b = e.gDataSource.transactionModel.stateTransitionTo;
                        if (!(b !== j.SpinType.NORMAL && b !== j.SpinType.RESPIN)) {
                            k.instantPlayNormalBGM();
                        }
                        if (a) {
                            a();
                        }
                    };
                    b.prototype.xs = function () {
                        k.muteAllBGM();
                        this.Ds.forEach(function (a) {
                            l.stopSfx(a);
                        });
                    };
                    b.prototype.refreshWorldByGameReplay = function (a) {
                        h.sequenceCallback(this.zs(), this.qs(), this.Js(), this.Ks(), this.cleanupReplayWorld.bind(this), h.deferCallback(), this.setupReplayWorld.bind(this), this.Qs())(function () {
                            if (a) {
                                a();
                            }
                        });
                    };
                    return b;
                }(g.default);
                c.GRefreshWorldHandler = m;
                cc._RF.pop();
            }
        }, {
            AudioManager: "AudioManager",
            AutoSpinHandler: "AutoSpinHandler",
            BGMHandler: "BGMHandler",
            GApiClient: "GApiClient",
            GDataSource: "GDataSource",
            GSlotTransactionModel: "GSlotTransactionModel",
            RefreshWorldHandler: "RefreshWorldHandler",
            Utils: "Utils"
        }],
        GRespinDecorator: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "aab44w65hdH4JxmZJ9YTyw9", "GRespinDecorator")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("NormalSpinDecorator");
                var f = a("GeneralAudioConstant");
                var g = a("AudioManager");
                var h = function (a) {
                    function b(b, c, d) {
                        var e = a.call(this, c, d) || this;
                        e.ms = undefined;
                        e.Ys = undefined;
                        e.ms = d.uiHelper;
                        e.Ys = b;
                        return e;
                    }
                    __extends(b, a);
                    b.prototype.startSlotController = function () {
                        this.generalControllers.slotController.spin(false, true);
                        var a = f.GENERAL_AUDIO.featureSpin.key;
                        g.stopAudioIfPlaying(a);
                        g.playAudioIfNotPlaying(a);
                    };
                    return b;
                }(e.default);
                c.default = h;
                cc._RF.pop();
            }
        }, {
            AudioManager: "AudioManager",
            GeneralAudioConstant: "GeneralAudioConstant",
            NormalSpinDecorator: "NormalSpinDecorator"
        }],
        GRespinGameState: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "aabe8xM4qJKrqfMY6Fr3srJ", "GRespinGameState")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("Utils");
                var f = a("NormalPrizeDecorator");
                var g = a("NormalResultDecorator");
                var h = a("GSlotTransactionModel");
                var i = a("GRespinResultState");
                var j = a("GPrizeState");
                var l = a("GRespinState");
                var m = a("RespinUIHelper");
                var n = a("GRespinDecorator");
                var o = a("ReplayModeHandler");
                var p = a("TransactionStateMachineHandler");
                var q = cc.Enum({
                    NONE: 0,
                    IDLE: 1,
                    SPIN: 2,
                    RESULT: 3,
                    CHECK: 4
                });
                var k = function () {
                    function a(a, b, c) {
                        this.name = "Respin Game State";
                        this.ci = undefined;
                        this.ps = undefined;
                        this.bs = undefined;
                        this.Ss = undefined;
                        this.ms = undefined;
                        this.Ys = true;
                        this.Xs = true;
                        this.ci = a;
                        this.ps = b;
                        this.bs = c;
                        this.ms = new m.default(a, b);
                    }
                    a.prototype.run = function (a) {
                        this.Ys = a;
                        this.Xs = true;
                        this.Ss = q.IDLE;
                        this.gs();
                    };
                    a.prototype.destroy = function () {
                        this.ci = undefined;
                        this.ps = undefined;
                        this.bs = undefined;
                        this.Ss = undefined;
                    };
                    a.prototype.gs = function () {
                        var a = this;
                        switch (this.Ss) {
                            case q.IDLE:
                                var b = {
                                    noBet: true
                                };
                                this.Ss = q.SPIN;
                                p.goToStateCallback("action", true, b)(function () {
                                    if (!o.fmReplayModeHandler.replayCompleted()) {
                                        p.transitionCompleteCallback("action")(a.ys.bind(a));
                                    }
                                });
                                break;
                            case q.SPIN:
                                this.Ss = q.RESULT;
                                this.Ms();
                                break;
                            case q.RESULT:
                                this.Ss = q.CHECK;
                                this.As();
                                break;
                            case q.CHECK:
                                this.Ys = false;
                                var c = undefined;
                                if (this.ci.transactionModel.stateTransitionTo === h.SpinType.NORMAL) {
                                    c = this.Is.bind(this);
                                } else {
                                    this.Ss = q.IDLE;
                                    this.Xs = false;
                                    c = this.gs.bind(this);
                                }
                                this.ws(c);
                        }
                    };
                    a.prototype.ys = function () {
                        var a = {
                            generalControllers: this.ps,
                            uiHelper: this.ms
                        };
                        var b = a;
                        var c = new n.default(this.Ys, this.ci, b);
                        var d = new l.default(this.ci, b, this.gs.bind(this), c);
                        function f() {
                            d.run();
                        }
                        if (this.Ys) {
                            e.delayCallback(1)(f);
                        } else if (this.Zs()) {
                            e.delayCallback(0.3)(f);
                        } else {
                            f();
                        }
                    };
                    a.prototype.Ms = function () {
                        var a = {
                            generalControllers: this.ps,
                            uiHelper: this.ms
                        };
                        var b = a;
                        var c = new g.default(this.ci, b);
                        new i.default(this.ci, b, this.gs.bind(this), c).run();
                    };
                    a.prototype.As = function () {
                        var a = {
                            generalControllers: this.ps,
                            uiHelper: this.ms
                        };
                        var b = a;
                        var c = new f.default(this.ci, b);
                        new j.default(this.ci, b, this.gs.bind(this), c).run();
                    };
                    a.prototype.Zs = function () {
                        return this.ps.slotController.getIsFastStopped();
                    };
                    a.prototype.ws = function (a) {
                        var b = this.ci.transactionModel.stateTransitionTo === h.SpinType.NORMAL ? "setup" : "idle";
                        p.transitionCompleteCallback(b)(a);
                    };
                    a.prototype.Is = function () {
                        var a = this.bs;
                        this.bs = undefined;
                        this.destroy();
                        this.ms.exitRespinTransition(a);
                    };
                    return a;
                }();
                c.default = k;
                cc._RF.pop();
            }
        }, {
            GPrizeState: "GPrizeState",
            GRespinDecorator: "GRespinDecorator",
            GRespinResultState: "GRespinResultState",
            GRespinState: "GRespinState",
            GSlotTransactionModel: "GSlotTransactionModel",
            NormalPrizeDecorator: "NormalPrizeDecorator",
            NormalResultDecorator: "NormalResultDecorator",
            ReplayModeHandler: "ReplayModeHandler",
            RespinUIHelper: "RespinUIHelper",
            TransactionStateMachineHandler: "TransactionStateMachineHandler",
            Utils: "Utils"
        }],
        GRespinResultState: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "c495aZAvBNBUrxqFP+J3/Gh", "GRespinResultState")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("ResultState");
                var f = a("RespinReelStatusHandler");
                var g = a("TransactionStateMachineHandler");
                var h = function (a) {
                    function b(b, c, d, e) {
                        var f = a.call(this, b, c, d, e) || this;
                        f.uiHelper = undefined;
                        f.uiHelper = c.uiHelper;
                        return f;
                    }
                    __extends(b, a);
                    b.prototype.setAvailableActions = function () {
                        f.respinReelStatusHandler.updateRespinReelStatus(this.dataSource);
                    };
                    b.prototype.setSlotData = function () {
                        var b = this.generalControllers;
                        var c = b.slotController;
                        var d = b.symbolPopoutController;
                        var e = b.stickyController;
                        var f = this.dataSource.transactionModel.reels;
                        var g = e.stickyMap;
                        var h = f.slice();
                        h.forEach(function (a, b) {
                            if (a !== -1 && g[b] !== undefined) {
                                h[b] = -1;
                            }
                        });
                        c.setReelData(h);
                        d.setReelData(f);
                    };
                    b.prototype.renderFeature = function (a) {
                        this.uiHelper.renderFeatureAfterResult(function () {
                            if (a) {
                                a();
                            }
                        });
                    };
                    b.prototype.resultDidStartRender = function (a) {
                        g.goToStateCallback("prize", true)(a);
                    };
                    return b;
                }(e.default);
                c.default = h;
                cc._RF.pop();
            }
        }, {
            RespinReelStatusHandler: "RespinReelStatusHandler",
            ResultState: "ResultState",
            TransactionStateMachineHandler: "TransactionStateMachineHandler"
        }],
        GRespinState: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "013b6kkQudB/q1Mi31uBGqQ", "GRespinState")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("SpinState");
                var f = a("RequestHandler");
                var g = a("Utils");
                var h = a("GApiClient");
                var i = a("AutoSpinHandler");
                var j = a("TransactionStateMachineHandler");
                var k = function (a) {
                    function b(b, c, d, e) {
                        var f = a.call(this, b, c, d, e) || this;
                        f.uiHelper = undefined;
                        f.ms = c.uiHelper;
                        return f;
                    }
                    __extends(b, a);
                    b.prototype.stateWillStartSpin = function () {
                        this.ms.preSpinningCleanup();
                        this.ms.playSlotSpinEffect();
                    };
                    b.prototype.callApi = function (a) {
                        g.sequenceCallback(j.goToStateCallback("result", true), this.$s.bind(this))(a);
                    };
                    b.prototype.$s = function (a) {
                        var b = this;
                        f.doTransactionAPIRequest({
                            name: this.name,
                            apiRequest: h.gApiClient.spin.bind(h.gApiClient)
                        }, this.dataSource, function (c, d) {
                            if (d && d.dt) {
                                j.transitionCompleteCallback("result")(a);
                                if (c && i.shouldAutoSpin()) {
                                    i.exitAutoSpin(b.generalControllers.spinButtonController);
                                }
                            }
                        });
                    };
                    b.prototype.additionalDestroyCleanups = function () {
                        this.ms = undefined;
                    };
                    return b;
                }(e.default);
                c.default = k;
                cc._RF.pop();
            }
        }, {
            AutoSpinHandler: "AutoSpinHandler",
            GApiClient: "GApiClient",
            RequestHandler: "RequestHandler",
            SpinState: "SpinState",
            TransactionStateMachineHandler: "TransactionStateMachineHandler",
            Utils: "Utils"
        }],
        GResultDecorator: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "4f61bnbGm9MGatqeAdCY87z", "GResultDecorator")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = function (a) {
                    function b(b, c) {
                        return a.call(this, b, c) || this;
                    }
                    __extends(b, a);
                    b.prototype.setKeyboardActionsDuringRespinTransition = function () {
                        this.setAvailableActions();
                        this.generalControllers.spinButtonController.setOnClickCallback(undefined);
                    };
                    return b;
                }(a("NormalResultDecorator").default);
                c.default = e;
                cc._RF.pop();
            }
        }, {
            NormalResultDecorator: "NormalResultDecorator"
        }],
        GSlotHelper: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "dfa523kEqBMJLPuPnDqOsIb", "GSlotHelper")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("SlotHelper");
                var f = a("SlotProperties");
                var g = cc._decorator.ccclass;
                var h = function (a) {
                    function b() {
                        return a !== null && a.apply(this, arguments) || this;
                    }
                    __extends(b, a);
                    b.prototype.init = function (b) {
                        a.prototype.init.call(this, b);
                        this.te.forEach(function (a, b) {
                            a.scrollerIndex = b;
                        });
                    };
                    b.prototype.updateRespinSlotHelperConfig = function () {
                        this.te.forEach(function (a) {
                            a.isRespin = true;
                        });
                    };
                    b.prototype.updateNormalSpinSlotHelperConfig = function () {
                        this.te.forEach(function (a) {
                            a.isRespin = false;
                        });
                    };
                    b.prototype.setStopScrollerEndSpeed = function (a, b) {
                        this.te[a].updateEndSpeed(b);
                    };
                    b.prototype.setOnScrollerReachesBouncePointCallback = function (a) {
                        this.te.forEach(function (b) {
                            b.setOnScrollerReachesBouncePointCallback(a);
                        });
                    };
                    b.prototype.setOnScrollerReachesLowestPointCallback = function (b) {
                        var c = this;
                        function a(d, e) {
                            var g = c.ie[d];
                            var h = [];
                            g.getFunctionalItems().forEach(function (a) {
                                if (a.symbolIndex === f.SLOT_INDEX.FU) {
                                    h.push(a);
                                }
                            });
                            if (b && h.length > 0) {
                                b(d, e, h);
                            }
                        }
                        this.te.forEach(function (b) {
                            b.setOnScrollerReachesLowestPointCallback(a);
                        });
                    };
                    b.prototype.setOnScrollerReachesSlowDownPointCallback = function (a) {
                        this.te.forEach(function (b) {
                            b.setOnScrollerReachesSlowDownPointCallback(a);
                        });
                    };
                    return __decorate([g], b);
                }(e.default);
                c.default = h;
                cc._RF.pop();
            }
        }, {
            SlotHelper: "SlotHelper",
            SlotProperties: "SlotProperties"
        }],
        GSlotItemPool: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "7fcd3oX3IhM0Lp/lFSopY75", "GSlotItemPool")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("NodePoolHandler");
                var f = function (a) {
                    function b() {
                        return a !== null && a.apply(this, arguments) || this;
                    }
                    __extends(b, a);
                    b.prototype.init = function (a) {
                        this.slotItemConstructor = a.slotItem;
                        this.normalSpriteFrames = a.normalSpriteFrame;
                        this.blurSpriteFrames = a.blurSpriteFrame ? a.blurSpriteFrame : a.normalSpriteFrame;
                        this.normalScale = a.normalScale === undefined ? 1 : a.normalScale;
                        this.blurScale = a.blurScale === undefined ? 1 : a.blurScale;
                        this.getSymbolZOrder = a.getSymbolZOrder ? a.getSymbolZOrder : 0;
                    };
                    b.prototype.getSlotItem = function (a, b, c) {
                        if (b === undefined) {
                            b = false;
                        }
                        if (c === undefined) {
                            c = undefined;
                        }
                        var d = e.nodePoolHandler.dequeueReusableItem("slotItem").getComponent("GSlotItem");
                        if (a < 0) {
                            var f = d;
                            f.symbolIndex = a;
                            return f;
                        }
                        d.init({
                            sprite: d.symbolImage,
                            normalScale: this.normalScale,
                            blurScale: this.blurScale,
                            getSymbolZOrder: this.getSymbolZOrder
                        });
                        d.setup(a, this.normalSpriteFrames[a], this.blurSpriteFrames[a], b, c);
                        return d;
                    };
                    b.prototype.releaseSlotItem = function (a) {
                        if (a.symbolIndex < 0) {
                            a.node.destroy();
                        } else {
                            e.nodePoolHandler.enqueueReusableItem(a.node, "slotItem");
                        }
                    };
                    return b;
                }(a("SlotItemPool").default);
                c.default = f;
                cc._RF.pop();
            }
        }, {
            NodePoolHandler: "NodePoolHandler",
            SlotItemPool: "SlotItemPool"
        }],
        GSlotItem: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "a5b01zWV65J67CjEAIlv2aP", "GSlotItem")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("SlotItem");
                var f = a("GeneralAudioConstant");
                var g = a("NodePoolHandler");
                var h = a("SpineConfigHandler");
                var i = a("AudioManager");
                var j = a("SlotProperties");
                var k = cc._decorator;
                var l = k.ccclass;
                var m = k.property;
                var n = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.attachmentHolder = undefined;
                        b.symbolImage = undefined;
                        b.mask = undefined;
                        b.wildShine = undefined;
                        b.se = [];
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.setActive = function (a) {
                        var b = a ? 255 : 0;
                        if (this.symbolImage) {
                            this.symbolImage.node.opacity = b;
                        }
                    };
                    b.prototype.unuse = function () {
                        this.removeExternalContents();
                        this.symbolImage.spriteFrame = undefined;
                        this.mask.active = false;
                        this.node.stopAllActions();
                        this.node.scale = 1;
                        a.prototype.unuse.call(this);
                    };
                    b.prototype.setup = function (b, c, d, e) {
                        if (e === undefined) {
                            e = false;
                        }
                        if (b === j.SLOT_INDEX.WILD) {
                            var f = g.nodePoolHandler.dequeueReusableItem("wildItem");
                            var i = g.nodePoolHandler.getPool("wildItem");
                            var k = {
                                item: f,
                                pool: i
                            };
                            this.addExternalContent(k, true);
                            f.getComponent("WildItemController").init(h.spineConfigHandler.getNormalSymbolSpine(0));
                            f.getComponent("WildItemController").playIdle();
                        }
                        a.prototype.setup.call(this, b, c, d, e);
                    };
                    b.prototype.addExternalContent = function (a, b) {
                        this.se.push(a);
                        var c = a.item;
                        if (b) {
                            c.parent = this.attachmentHolder;
                        } else {
                            this.attachmentHolder.addChild(c);
                        }
                    };
                    b.prototype.removeExternalContents = function () {
                        this.se.forEach(function (a) {
                            if (a.pool) {
                                a.pool.put(a.item);
                            } else {
                                a.item.destroy();
                            }
                        });
                        this.se = [];
                    };
                    b.prototype.setZIndex = function (a) {
                        if (a === undefined) {
                            a = 0;
                        }
                        this.node.zIndex = a + this.zOrder * 100;
                    };
                    Object.defineProperty(b.prototype, "worldPosition", {
                        get: function () {
                            var a = cc.v2();
                            return this.node.convertToWorldSpaceAR(a);
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "spriteImage", {
                        get: function () {
                            return this.sprite.spriteFrame;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "symbolZOrder", {
                        get: function () {
                            return this.zOrder;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.setBlur = function (a) {
                        var b = this.sprite;
                        if (b) {
                            b.spriteFrame = a ? this.blurSpriteFrame : this.normalSpriteFrame;
                            b.node.scaleX = a ? this.blurScale.x : this.normalScale.x;
                            b.node.scaleY = a ? this.blurScale.y : this.normalScale.y;
                        }
                    };
                    b.prototype.disableSprite = function () {
                        var a = this.sprite;
                        this.normalSpriteFrame = undefined;
                        this.blurSpriteFrame = undefined;
                        if (a) {
                            a.spriteFrame = undefined;
                        }
                    };
                    b.prototype.showWildShine = function (a, b) {
                        var c = this;
                        var d = f.GENERAL_AUDIO.symWildHighlight.key;
                        i.stopAudioIfPlaying(d);
                        i.playAudioIfNotPlaying(d);
                        this.node.stopAllActions();
                        this.mask.active = true;
                        this.node.runAction(cc.sequence(cc.delayTime(a), cc.callFunc(function () {
                            c.wildShine.play();
                        }), cc.delayTime(0.2), cc.callFunc(function () {
                            if (b) {
                                b();
                            }
                        })));
                    };
                    __decorate([m(cc.Node)], b.prototype, "attachmentHolder", undefined);
                    __decorate([m(cc.Sprite)], b.prototype, "symbolImage", undefined);
                    __decorate([m(cc.Node)], b.prototype, "mask", undefined);
                    __decorate([m(cc.Animation)], b.prototype, "wildShine", undefined);
                    return __decorate([l], b);
                }(e.default);
                c.default = n;
                cc._RF.pop();
            }
        }, {
            AudioManager: "AudioManager",
            GeneralAudioConstant: "GeneralAudioConstant",
            NodePoolHandler: "NodePoolHandler",
            SlotItem: "SlotItem",
            SlotProperties: "SlotProperties",
            SpineConfigHandler: "SpineConfigHandler"
        }],
        GSlotTransactionModel: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "2c611dJeBpLOqKLE3nHj7yi", "GSlotTransactionModel")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.SpinType = undefined;
                var e = a("SlotTransactionModel");
                (function (a) {
                    a[a.NORMAL = 1] = "NORMAL";
                    a[a.RESPIN = 4] = "RESPIN";
                })(c.SpinType || (c.SpinType = {}));
                var f = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.Ts = undefined;
                        b.ee = undefined;
                        b.ne = undefined;
                        b.oe = undefined;
                        b.ce = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.updateSlotGameTransactionInfo = function (a) {
                        var b = a.irs;
                        var c = a.fws;
                        var d = a.ist;
                        var e = a.wc;
                        var f = a.itw;
                        this.Ts = b;
                        this.ee = c;
                        this.ne = d;
                        this.oe = e;
                        this.ce = f;
                    };
                    Object.defineProperty(b.prototype, "isRespin", {
                        get: function () {
                            return this.Ts;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "featureWinSymbol", {
                        get: function () {
                            return this.ee;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "isShowTease", {
                        get: function () {
                            return this.ne;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "wildCount", {
                        get: function () {
                            return this.oe;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "isTriggerWild", {
                        get: function () {
                            return this.ce;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    return b;
                }(e.default);
                c.default = f;
                cc._RF.pop();
            }
        }, {
            SlotTransactionModel: "SlotTransactionModel"
        }],
        GSpinButtonController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "d63e8n/nwlEIKjzPvWI/5Nn", "GSpinButtonController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("SpinButtonController");
                var f = a("GConstants");
                var g = a("AudioManager");
                var h = a("SpinButtonController.spec");
                var i = a("AutomationDecorator");
                var j = a("GeneralAudioConstant");
                var k = cc._decorator;
                var l = k.ccclass;
                var m = k.property;
                var n = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.spinArrow = undefined;
                        b.spinArrowBg = undefined;
                        b.autoSpinHolder = undefined;
                        b.autoSpinNumberDisplayNode = undefined;
                        b.arrowSprite = undefined;
                        b.arrowSF = undefined;
                        b.arrowBlurSF = undefined;
                        b.arrowGreySF = undefined;
                        b.arrowGreyBlurSF = undefined;
                        b.bounceAnim = undefined;
                        b.sparkleAnimation = [];
                        b.circleGlowNode = undefined;
                        b.hoverScale = undefined;
                        b.hoverBase = undefined;
                        b.autoSpinHoverGlowNode = undefined;
                        b.ears = [];
                        b.shineAnim = undefined;
                        b.backGlow = undefined;
                        b.footerShine = undefined;
                        b.he = undefined;
                        b.re = false;
                        return b;
                    }
                    var c = {
                        func: h.initSpinButtonControllerNodes
                    };
                    var d = {
                        func: h.setButtonInteractivity
                    };
                    __extends(b, a);
                    b.prototype.destroy = function () {
                        this.onStopAllAnimations();
                        this.node.destroy();
                        return a.prototype.destroy.call(this);
                    };
                    b.prototype.onStopAllAnimations = function () {
                        this.node.stopAllActions();
                        this.spinArrow.stopAllActions();
                        this.onHideMouseOverEffect();
                    };
                    b.prototype.onShowIdleAnimation = function () {
                        this.ae();
                        this.ue(false);
                        this.spinArrow.stopAllActions();
                        var a = cc.repeatForever(cc.rotateBy(f.SPIN_BUTTON_TIMING.SECONDS_PER_ROUND_IDLE, 360));
                        this.spinArrow.runAction(a);
                    };
                    b.prototype.onShowSpinAnimation = function () {
                        var a = this;
                        if (this.mode === e.SpinButtonMode.ENABLED) {
                            var b = j.GENERAL_AUDIO.spinBtn.key;
                            g.stopAudioIfPlaying(b);
                            g.playAudioIfNotPlaying(b);
                            this.footerShine.stop();
                            this.footerShine.setCurrentTime(0);
                            this.footerShine.play();
                            this.shineAnim.play();
                            this.backGlow.play();
                            this.sparkleAnimation.forEach(function (b) {
                                b.node.opacity = 255;
                                b.play();
                                b.on("finished", function () {
                                    b.node.opacity = 0;
                                }, a);
                            });
                            this.circleGlowNode.runAction(cc.sequence(cc.fadeIn(0.1).easing(cc.easeCubicActionOut()), cc.fadeOut(0.2)));
                            this.bounceAnim.play();
                            this.onHideMouseOverEffect();
                            this.le();
                            this.ue(false);
                            this.spinArrow.stopAllActions();
                            var c = cc.repeatForever(cc.rotateBy(f.SPIN_BUTTON_TIMING.SECONDS_PER_ROUND_SPINNING, 360));
                            this.spinArrow.runAction(c);
                        }
                    };
                    b.prototype.replaceSpinBlurredSpriteFrame = function () {
                        this.le();
                    };
                    b.prototype.onShowStopSpinningAnimation = function () {
                        if (this.mode === e.SpinButtonMode.DISABLED) {
                            this.fe();
                        } else {
                            this.ae();
                        }
                        this.ue(false);
                        this.spinArrow.stopAllActions();
                    };
                    b.prototype.onEnableButton = function () {
                        this.ae();
                        this.re = true;
                    };
                    b.prototype.onDisableButton = function () {
                        if (this.animationState === e.SpinButtonAnimationState.SPINNING) {
                            this.de();
                        } else {
                            this.fe();
                        }
                        this.re = false;
                    };
                    b.prototype.showAutoSpinLook = function (b) {
                        this.ue(true);
                        this.he.clear();
                        this.he.displayNumber(b);
                        a.prototype.showAutoSpinLook.call(this, b);
                    };
                    b.prototype.onUpdateAutoSpinCount = function (a) {
                        if (this.mode === e.SpinButtonMode.AUTOSPIN) {
                            this.he.clear();
                            this.he.displayNumber(a);
                        }
                    };
                    b.prototype.onExitAutoSpinMode = function () { };
                    b.prototype.onResumeIdle = function () {
                        if (this.mode !== e.SpinButtonMode.DISABLED) {
                            this.onShowIdleAnimation();
                        }
                    };
                    b.prototype.onResumeSpin = function () {
                        if (this.mode !== e.SpinButtonMode.DISABLED) {
                            this.onHideMouseOverEffect();
                            this.onShowSpinAnimation();
                        }
                    };
                    b.prototype.onResumeStop = function () {
                        this.onHideMouseOverEffect();
                        this.onShowStopSpinningAnimation();
                    };
                    b.prototype.onPlayMouseOverEffect = function () {
                        if (this.animationState === e.SpinButtonAnimationState.IDLE && this.mode !== e.SpinButtonMode.AUTOSPIN) {
                            this.hoverBase.opacity = 0;
                            this.hoverScale.color = f.BLACK;
                            this.hoverBase.parent.getComponent(cc.Animation).play();
                        } else if (this.mode === e.SpinButtonMode.AUTOSPIN) {
                            this.autoSpinHoverGlowNode.play();
                        }
                    };
                    b.prototype.onHideMouseOverEffect = function () {
                        this.hoverBase.opacity = 0;
                        this.hoverScale.color = f.BLACK;
                        this.autoSpinHoverGlowNode.node.opacity = 0;
                        this.autoSpinHoverGlowNode.stop();
                        this.hoverBase.parent.getComponent(cc.Animation).stop();
                        this.hoverBase.parent.getComponent(cc.Animation).setCurrentTime(0);
                    };
                    b.prototype.onInit = function () {
                        this.he = this.autoSpinNumberDisplayNode.getComponent("NumberDisplayController");
                        this.initSpinButtonControllerNodes({
                            spinButtonNode: this.node
                        });
                        this.enableMouseClick();
                    };
                    b.prototype.initSpinButtonControllerNodes = function () { };
                    b.prototype.ae = function () {
                        this.arrowSprite.spriteFrame = this.arrowSF;
                    };
                    b.prototype.le = function () {
                        this.arrowSprite.spriteFrame = this.arrowBlurSF;
                    };
                    b.prototype.fe = function () {
                        this.arrowSprite.spriteFrame = this.arrowGreySF;
                    };
                    b.prototype.de = function () {
                        this.arrowSprite.spriteFrame = this.arrowGreyBlurSF;
                    };
                    b.prototype.ue = function (a) {
                        this.spinArrow.active = !a;
                        this.spinArrowBg.active = !a;
                        this.autoSpinHolder.active = a;
                        this.ears.forEach(function (b) {
                            b.active = !a;
                        });
                    };
                    b.prototype.setInteractable = function (a) {
                        this.re = a;
                    };
                    b.prototype.enableMouseClick = function () {
                        this.node.on(cc.Node.EventType.TOUCH_END, this.ve, this);
                    };
                    b.prototype.disableMouseClick = function () {
                        this.node.off(cc.Node.EventType.TOUCH_END, this.ve, this);
                    };
                    b.prototype.enableMouseHover = function () {
                        a.prototype.enableMouseHover.call(this);
                        this.node.on(cc.Node.EventType.MOUSE_MOVE, this._e, this);
                    };
                    b.prototype.disableMouseHover = function () {
                        a.prototype.disableMouseHover.call(this);
                        this.node.off(cc.Node.EventType.MOUSE_MOVE, this._e, this);
                    };
                    b.prototype.mouseHovered = function (b) {
                        if (this.re && this.mode !== e.SpinButtonMode.DISABLED) {
                            if (!this.isHovered) {
                                if (this.me()) {
                                    a.prototype.mouseHovered.call(this, b);
                                } else if (this.pe(b)) {
                                    a.prototype.mouseHovered.call(this, b);
                                }
                            }
                        }
                    };
                    b.prototype.mouseLeave = function (b) {
                        if (this.isHovered) {
                            if (this.me()) {
                                a.prototype.mouseLeave.call(this, b);
                            } else if (!this.pe(b)) {
                                a.prototype.mouseLeave.call(this, b);
                            }
                        }
                    };
                    b.prototype._e = function (b) {
                        if (this.re && !this.me()) {
                            if (this.pe(b)) {
                                if (!this.isHovered) {
                                    a.prototype.mouseHovered.call(this, b);
                                }
                            } else if (this.isHovered) {
                                a.prototype.mouseLeave.call(this, b);
                            }
                        }
                    };
                    b.prototype.pe = function (a) {
                        return !!this.me() || this.be(a);
                    };
                    b.prototype.be = function (a) {
                        var b = a.touch ? a.touch.getLocation() : a.getLocation();
                        var c = this.node.convertToNodeSpaceAR(b);
                        var d = this.node.width / 2;
                        return c.x * c.x + c.y * c.y <= d * d;
                    };
                    b.prototype.ve = function (a) {
                        if (this.re && this.pe(a)) {
                            this.clickSpinButton();
                        }
                    };
                    b.prototype.me = function () {
                        return this.autoSpinHolder.active;
                    };
                    __decorate([m(cc.Node)], b.prototype, "spinArrow", undefined);
                    __decorate([m(cc.Node)], b.prototype, "spinArrowBg", undefined);
                    __decorate([m(cc.Node)], b.prototype, "autoSpinHolder", undefined);
                    __decorate([m(cc.Node)], b.prototype, "autoSpinNumberDisplayNode", undefined);
                    __decorate([m(cc.Sprite)], b.prototype, "arrowSprite", undefined);
                    __decorate([m(cc.SpriteFrame)], b.prototype, "arrowSF", undefined);
                    __decorate([m(cc.SpriteFrame)], b.prototype, "arrowBlurSF", undefined);
                    __decorate([m(cc.SpriteFrame)], b.prototype, "arrowGreySF", undefined);
                    __decorate([m(cc.SpriteFrame)], b.prototype, "arrowGreyBlurSF", undefined);
                    __decorate([m(cc.Animation)], b.prototype, "bounceAnim", undefined);
                    __decorate([m([cc.Animation])], b.prototype, "sparkleAnimation", undefined);
                    __decorate([m(cc.Node)], b.prototype, "circleGlowNode", undefined);
                    __decorate([m(cc.Node)], b.prototype, "hoverScale", undefined);
                    __decorate([m(cc.Node)], b.prototype, "hoverBase", undefined);
                    __decorate([m(cc.Animation)], b.prototype, "autoSpinHoverGlowNode", undefined);
                    __decorate([m([cc.Node])], b.prototype, "ears", undefined);
                    __decorate([m(cc.Animation)], b.prototype, "shineAnim", undefined);
                    __decorate([m(cc.Animation)], b.prototype, "backGlow", undefined);
                    __decorate([m(cc.Animation)], b.prototype, "footerShine", undefined);
                    __decorate([i.automationDec(c)], b.prototype, "initSpinButtonControllerNodes", null);
                    __decorate([i.automationDec(d)], b.prototype, "setInteractable", null);
                    return __decorate([l], b);
                }(e.default);
                c.default = n;
                cc._RF.pop();
            }
        }, {
            AudioManager: "AudioManager",
            AutomationDecorator: "AutomationDecorator",
            GConstants: "GConstants",
            GeneralAudioConstant: "GeneralAudioConstant",
            SpinButtonController: "SpinButtonController",
            "SpinButtonController.spec": "SpinButtonController.spec"
        }],
        GSpinState: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "a1887bwwCZHBLvxcJ2M9gy3", "GSpinState")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("SpinState");
                var f = a("RequestHandler");
                var g = a("Utils");
                var h = a("GApiClient");
                var i = a("AutoSpinHandler");
                var j = a("TransactionStateMachineHandler");
                var k = function (a) {
                    function b(b, c, d, e) {
                        var f = a.call(this, b, c, d, e) || this;
                        f.uiHelper = undefined;
                        f.uiHelper = c.uiHelper;
                        return f;
                    }
                    __extends(b, a);
                    b.prototype.stateWillStartSpin = function () {
                        this.uiHelper.preSpinningCleanup();
                        this.uiHelper.playSlotSpinEffect();
                    };
                    b.prototype.callApi = function (a) {
                        g.sequenceCallback(j.goToStateCallback("result", true), this.$s.bind(this))(a);
                    };
                    b.prototype.$s = function (a) {
                        var b = this;
                        f.doTransactionAPIRequest({
                            name: this.name,
                            apiRequest: h.gApiClient.spin.bind(h.gApiClient)
                        }, this.dataSource, function (c, d) {
                            if (d && d.dt) {
                                if (c && i.shouldAutoSpin()) {
                                    i.exitAutoSpin(b.generalControllers.spinButtonController);
                                }
                                j.transitionCompleteCallback("result")(a);
                            }
                        });
                    };
                    b.prototype.additionalDestroyCleanups = function () {
                        this.uiHelper = undefined;
                    };
                    return b;
                }(e.default);
                c.default = k;
                cc._RF.pop();
            }
        }, {
            AutoSpinHandler: "AutoSpinHandler",
            GApiClient: "GApiClient",
            RequestHandler: "RequestHandler",
            SpinState: "SpinState",
            TransactionStateMachineHandler: "TransactionStateMachineHandler",
            Utils: "Utils"
        }],
        GameAudioAdapter: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "72ce2m7Nz9BCpH6kGYmhcUG", "GameAudioAdapter")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("AudioManager");
                var f = a("AudioAdapter");
                var g = a("AudioAdapterConstant");
                var h = cc._decorator.ccclass;
                var i = function (a) {
                    function b(b, c) {
                        var d = a.call(this, b) || this;
                        d.Se = undefined;
                        d.ge = undefined;
                        d.ge = c;
                        return d;
                    }
                    __extends(b, a);
                    b.prototype.load = function () {
                        var b = this;
                        function c() {
                            b.off(g.AUDIO_ADAPTER_EVENT.LOAD_ERROR, d);
                            b.Se = e.registerAudio(b, b.ge);
                        }
                        function d() {
                            b.off(g.AUDIO_ADAPTER_EVENT.LOADED, c);
                        }
                        this.once(g.AUDIO_ADAPTER_EVENT.LOADED, c);
                        this.once(g.AUDIO_ADAPTER_EVENT.LOAD_ERROR, d);
                        return a.prototype.load.call(this);
                    };
                    b.prototype.unload = function () {
                        e.unregisterAudio(this, this.Se);
                        return a.prototype.unload.call(this);
                    };
                    return __decorate([h], b);
                }(f.default);
                c.default = i;
                cc._RF.pop();
            }
        }, {
            AudioAdapter: "AudioAdapter",
            AudioAdapterConstant: "AudioAdapterConstant",
            AudioManager: "AudioManager"
        }],
        GameEventHandler: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "6da04mFMhpNcpdeGLQM+RKD", "GameEventHandler")) {
                var c = System.get("bvframework").GameEventHandler;
                var d = {
                    subscribeGameInfoUpdateEvent: "subscribeUpdateGameInfoEvent",
                    subscribeGameLayoutInfoRequestEvent: "subscribeGameLayoutInfoEvent",
                    subscribeGameConfigRequestEvent: "subscribeGameConfigRequest",
                    subscribeGameConfigUpdateEvent: "subscribeGameConfigUpdateRequest",
                    subscribeAudioPlayRateUpdateEvent: "subscribeUpdateAudioPlayRateEvent",
                    subscribeInUIIdleStateStatusUpdateEvent: "subscribeUIIdleStateEvent",
                    subscribeOperatorCurrencyFormatUpdateEvent: "subscribeOperatorCurrencyFormatUpdate",
                    subscribeStoredGamesNameRequestEvent: "subscribeGameNameRequestEvent",
                    emitGameStateChangedEvent: "emitGameStateChange",
                    emitAutoplayStartedEvent: "emitAutoplayStarted",
                    emitAutoplayStoppedEvent: "emitAutoplayStopped",
                    emitErrorLogEvent: "emitErrorLog",
                    emitGamePlayUIBlockEvent: "emitBlockUIEvent",
                    addGamePauseEventCallback: "setGamePauseEventCallback",
                    addGameResumeEventCallback: "setGameResumeEventCallback",
                    addTransactionInfoChangedEventCallback: "setTransactionInfoChangedCallback",
                    removeTransactionInfoChangedEventCallback: "removeTransactionInfoChangedCallback",
                    addGamePlayUIBlockEventCallback: "setGamePlayUIBlockEventCallback",
                    addInUIIdleStateCallback: "setInUIIdleStateCallback",
                    subscribeSessionSocketErrorEvent: "subscribeOperationSocketErrorEvent",
                    subscribeSessionSocketConnectedEvent: "subscribeOperationSocketConnectedEvent",
                    subscribeSessionSocketConnectionStatusRequestEvent: "subscribeOperationSocketConnectionStatusRequestEvent"
                };
                var e = __assign({}, c);
                Object.keys(d).forEach(function (a) {
                    e[d[a]] = e[a];
                });
                for (var f in e) {
                    b.exports[f] = e[f];
                }
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        GameHeaderHelper: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "295f80O8n1EXbn2oiNk8NLd", "GameHeaderHelper")) {
                var c = System.get("bvframework").GameHeaderHelper;
                for (var d in c) {
                    b.exports[d] = c[d];
                }
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        GameInitializationHandler: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "b3a04bieS1EsYWkuqlKhqB3", "GameInitializationHandler")) {
                var c = System.get("bvframework").GameInitializationHandler;
                for (var d in c) {
                    b.exports[d] = c[d];
                }
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        GameLayout: [function (b, c, d) {
            'use strict';

            var e = {
                value: true
            };
            var f = {
                x: 0,
                y: -235
            };
            var g = {
                position: f,
                size: {
                    width: 1080,
                    height: 300
                }
            };
            var h = {
                x: 0,
                y: -520
            };
            var i = {
                position: h,
                size: {
                    width: 1080,
                    height: 240
                }
            };
            var a = {
                x: 0,
                y: -635
            };
            var j = {
                position: a,
                size: {
                    width: 1080,
                    height: 300
                }
            };
            var k = {
                uiFreeSpace: g,
                uiSettingMenu: i,
                uiBigWinFreeSpace: j
            };
            if (!cc._RF.push(c, "dce93T8CsZHTbOXkpseC7dW", "GameLayout")) {
                Object.defineProperty(d, "__esModule", e);
                d.gameLayout = undefined;
                d.gameLayout = k;
                cc._RF.pop();
            }
        }, {}],
        GameMaintenanceHandler: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "6c833L7mQpG+JThxZci79NX", "GameMaintenanceHandler")) {
                var c = System.get("bvframework").GameMaintenanceHandler;
                for (var d in c) {
                    b.exports[d] = c[d];
                }
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        GameMaintenanceModel: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "9919da29LFDdJcSuJgAAHrr", "GameMaintenanceModel")) {
                var c = System.get("bvframework").GameMaintenanceModel;
                for (var d in c) {
                    b.exports[d] = c[d];
                }
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        GamePluginModel: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "c0badZnWvFI0LG/0J35BfII", "GamePluginModel")) {
                var c = System.get("bvframework").GamePluginModel;
                b.exports.default = c;
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        GamePreference: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "20addtomYtGCrhEXEIvVhDS", "GamePreference")) {
                c.__esModule = true;
                c.globalPreference = c.gamePreference = undefined;
                var d = a("Preference");
                var e = a("RtConfig");
                var f = (0, d.getPreference)(e.cs_Config.bundleId);
                c.gamePreference = f;
                var g = (0, d.getPreference)(e.cs_Config.globalDomain);
                c.globalPreference = g;
                cc._RF.pop();
            }
        }, {
            Preference: "Preference",
            RtConfig: "RtConfig"
        }],
        GameTitle: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "12eedGFUCVPu7lTHrspCNtZ", "GameTitle")) {
                var c = System.get("bvframework").GameTitle;
                for (var d in c) {
                    b.exports[d] = c[d];
                }
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        GameTweaksConfig: [function (a, b, c) {
            'use strict';

            var d;
            if (!cc._RF.push(b, "82e00IU/NVM3bUxTCWfQzx3", "GameTweaksConfig")) {
                c.__esModule = true;
                c.default = undefined;
                a("CreatorTweaks");
                if (d = a("TweaksConfig")) {
                    d.__esModule;
                }
                a("TweaksData");
                c.default = false;
                b.exports = c.default;
                cc._RF.pop();
            }
        }, {
            CreatorTweaks: "CreatorTweaks",
            TweaksConfig: "TweaksConfig",
            TweaksData: "TweaksData"
        }],
        GameTweaksData: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "21ddbUCEaFM06TmBlOwfWKe", "GameTweaksData")) {
                c.__esModule = true;
                c.testSymbols = undefined;
                c.testSymbols = undefined;
                cc._RF.pop();
            }
        }, {}],
        GameUtils: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "576e78TekpIpIcjjcHFmVOq", "GameUtils")) {
                var c = System.get("bvframework").GameUtils;
                for (var d in c) {
                    b.exports[d] = c[d];
                }
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        GeneralAssetConfig: [function (a, c, e) {
            'use strict';

            if (!cc._RF.push(c, "39993EWULpL9o77fgroS3sO", "GeneralAssetConfig")) {
                var f = {
                    value: true
                };
                Object.defineProperty(e, "__esModule", f);
                e.generalAssetConfig = undefined;
                var g = {
                    name: "angpao_controller",
                    url: "load_res/angpao_controller",
                    type: cc.Prefab,
                    isLocalized: false
                };
                var i = {
                    name: "background_controller",
                    url: "load_res/background_controller",
                    type: cc.Prefab,
                    isLocalized: false
                };
                var j = {
                    name: "background_controller_2",
                    url: "load_res/background_controller_2",
                    type: cc.Prefab,
                    isLocalized: false
                };
                var d = {
                    name: "big_win_controller",
                    url: "load_res/big_win_controller",
                    type: cc.Prefab,
                    isLocalized: false
                };
                var k = {
                    name: "big_win_text",
                    url: "texture/big_win/bigwin_text",
                    type: cc.SpriteAtlas,
                    isLocalized: true
                };
                var l = {
                    name: "column_tint_controller",
                    url: "load_res/column_tint_controller",
                    type: cc.Prefab,
                    isLocalized: false
                };
                var h = {
                    name: "click_effect",
                    url: "lib/click_effect/prefab/click_effect_layer",
                    type: cc.Prefab,
                    isLocalized: false
                };
                var b = {
                    name: "h_firecracker_atlas_symbols",
                    url: "spine/h_firecracker_atlas_symbols",
                    type: sp.SkeletonData,
                    isLocalized: true
                };
                var m = {
                    name: "h_ingot_atlas_symbols",
                    url: "spine/h_ingot_atlas_symbols",
                    type: sp.SkeletonData,
                    isLocalized: true
                };
                var n = {
                    name: "h_pouch_atlas_symbols",
                    url: "spine/h_pouch_atlas_symbols",
                    type: sp.SkeletonData,
                    isLocalized: true
                };
                var o = {
                    name: "h_orange_atlas_symbols",
                    url: "spine/h_orange_atlas_symbols",
                    type: sp.SkeletonData,
                    isLocalized: true
                };
                var p = {
                    name: "h_ruyi_atlas_symbols",
                    url: "spine/h_ruyi_atlas_symbols",
                    type: sp.SkeletonData,
                    isLocalized: true
                };
                var q = {
                    name: "h_angbao_atlas_symbols",
                    url: "spine/h_angbao_atlas_symbols",
                    type: sp.SkeletonData,
                    isLocalized: true
                };
                var r = {
                    name: "info_board_controller",
                    url: "load_res/info_board_controller",
                    type: cc.Prefab,
                    isLocalized: false
                };
                var s = {
                    name: "infoboard_text",
                    url: "texture/info_board/infoboard_text",
                    type: cc.SpriteAtlas,
                    isLocalized: true
                };
                var t = {
                    name: "infoboard_win_text",
                    url: "texture/info_board/infoboard_win_text",
                    type: cc.SpriteAtlas,
                    isLocalized: true
                };
                var u = {
                    name: "normal_symbol",
                    url: "texture/slot/normal_symbol",
                    type: cc.SpriteAtlas,
                    isLocalized: false
                };
                var v = {
                    name: "pay_line_number_controller",
                    url: "load_res/pay_line_number_controller",
                    type: cc.Prefab,
                    isLocalized: false
                };
                var w = {
                    name: "pay_line_controller",
                    url: "load_res/pay_line_controller",
                    type: cc.Prefab,
                    isLocalized: false
                };
                var x = {
                    name: "pay_out_effect_controller",
                    url: "load_res/pay_out_effect_controller",
                    type: cc.Prefab,
                    isLocalized: false
                };
                var y = {
                    name: "pay_select_effect_controller",
                    url: "load_res/pay_select_effect_controller",
                    type: cc.Prefab,
                    isLocalized: false
                };
                var z = {
                    name: "s_wild",
                    url: "spine/s_wild",
                    type: sp.SkeletonData,
                    isLocalized: true
                };
                var A = {
                    name: "setting_menu_wallet_panel",
                    url: "lib/setting_menu/prefab/info_footer/setting_info_footer_controller",
                    type: cc.Prefab,
                    isLocalized: false
                };
                var B = {
                    name: "slot_controller",
                    url: "load_res/slot_controller",
                    type: cc.Prefab,
                    isLocalized: false
                };
                var C = {
                    name: "slot_tint_controller",
                    url: "load_res/slot_tint_controller",
                    type: cc.Prefab,
                    isLocalized: false
                };
                var D = {
                    name: "trail_particle_controller",
                    url: "load_res/trail_particle_controller",
                    type: cc.Prefab,
                    isLocalized: false
                };
                var E = {
                    name: "spin_button_controller",
                    url: "load_res/spin_button_controller",
                    type: cc.Prefab,
                    isLocalized: false
                };
                var F = {
                    name: "foreground_controller",
                    url: "load_res/foreground_controller",
                    type: cc.Prefab,
                    isLocalized: false
                };
                var G = {
                    name: "wild_symbol",
                    url: "texture/slot/wild_symbol",
                    type: cc.SpriteAtlas,
                    isLocalized: true
                };
                var H = {
                    name: "symbol_popout_controller",
                    url: "load_res/symbol_payout_controller",
                    type: cc.Prefab,
                    isLocalized: false
                };
                var I = {
                    name: "tiger_controller",
                    url: "load_res/tiger_controller",
                    type: cc.Prefab,
                    isLocalized: false
                };
                var J = {
                    name: "sticky_controller",
                    url: "load_res/sticky_controller",
                    type: cc.Prefab,
                    isLocalized: false
                };
                var K = [g, i, j, d, k, l, h, b, m, n, o, p, q, r, s, t, u, v, w, x, y, z, A, B, C, D, E, F, G, H, I, J];
                e.generalAssetConfig = K;
                cc._RF.pop();
            }
        }, {}],
        GeneralAudioConstant: [function (a, b, c) {
            'use strict';

            var d = {
                value: true
            };
            if (!cc._RF.push(b, "98107tSwVFGrb9HqR7fLSWz", "GeneralAudioConstant")) {
                Object.defineProperty(c, "__esModule", d);
                c.GENERAL_AUDIO = undefined;
                c.GENERAL_AUDIO = {
                    featureAngpauFly: {
                        from: 0,
                        to: 1.156271,
                        key: "featureAngpauFly"
                    },
                    featureAngpauReveal: {
                        from: 2,
                        to: 5.795333,
                        key: "featureAngpauReveal"
                    },
                    featureMultiAppear: {
                        from: 6,
                        to: 9.010396,
                        key: "featureMultiAppear"
                    },
                    featureQuit: {
                        from: 10,
                        to: 11.625021,
                        key: "featureQuit"
                    },
                    featureSpin: {
                        from: 12,
                        to: 13.437521,
                        key: "featureSpin"
                    },
                    featureStart: {
                        from: 14,
                        to: 17.766708,
                        key: "featureStart"
                    },
                    featureTease: {
                        from: 18,
                        to: 21.805479,
                        key: "featureTease"
                    },
                    featureWinLine1: {
                        from: 22,
                        to: 24.093812,
                        key: "featureWinLine1"
                    },
                    featureWinLine2: {
                        from: 25,
                        to: 27.102688,
                        key: "featureWinLine2"
                    },
                    featureWinLine3: {
                        from: 28,
                        to: 30.061479,
                        key: "featureWinLine3"
                    },
                    featureWinLine4: {
                        from: 31,
                        to: 33.090667,
                        key: "featureWinLine4"
                    },
                    featureWinLine5: {
                        from: 34,
                        to: 36.080292,
                        key: "featureWinLine5"
                    },
                    infobarAfterBigwin: {
                        from: 37,
                        to: 38.537542,
                        key: "infobarAfterBigwin"
                    },
                    multiAppearWoRespin: {
                        from: 39,
                        to: 40.352646,
                        key: "multiAppearWoRespin"
                    },
                    multiFly: {
                        from: 41,
                        to: 42.256792,
                        key: "multiFly"
                    },
                    prizeMedwinEnd: {
                        from: 43,
                        to: 44.875,
                        key: "prizeMedwinEnd"
                    },
                    prizeMedwinMain: {
                        from: 45,
                        to: 46.5,
                        key: "prizeMedwinMain"
                    },
                    prizePayoutIdle: {
                        from: 47,
                        to: 47.916667,
                        key: "prizePayoutIdle"
                    },
                    prizeSmalwin: {
                        from: 48,
                        to: 49.733896,
                        key: "prizeSmalwin"
                    },
                    prizeWinFullscreen: {
                        from: 50,
                        to: 52.531792,
                        key: "prizeWinFullscreen"
                    },
                    spinActiveLoop: {
                        from: 53,
                        to: 53.068229,
                        key: "spinActiveLoop"
                    },
                    spinBtn: {
                        from: 54,
                        to: 55.039104,
                        key: "spinBtn"
                    },
                    spinStop: {
                        from: 56,
                        to: 56.125021,
                        key: "spinStop"
                    },
                    spinStopQuick: {
                        from: 57,
                        to: 57.184208,
                        key: "spinStopQuick"
                    },
                    symWildHighlight: {
                        from: 58,
                        to: 59.041667,
                        key: "symWildHighlight"
                    },
                    symWildReach: {
                        from: 60,
                        to: 61,
                        key: "symWildReach"
                    },
                    symWildSpawn: {
                        from: 61,
                        to: 62.020854,
                        key: "symWildSpawn"
                    },
                    uiInfo: {
                        from: 63,
                        to: 63.208354,
                        key: "uiInfo"
                    },
                    voxIdle4: {
                        from: 64,
                        to: 65.892208,
                        key: "voxIdle4"
                    },
                    voxRsWin: {
                        from: 66,
                        to: 69.3,
                        key: "voxRsWin"
                    },
                    voxSmallwin1a: {
                        from: 70,
                        to: 71.702104,
                        key: "voxSmallwin1a"
                    },
                    voxSmallwin1b: {
                        from: 72,
                        to: 73.623458,
                        key: "voxSmallwin1b"
                    },
                    voxSmallwin1c: {
                        from: 74,
                        to: 75.343771,
                        key: "voxSmallwin1c"
                    },
                    voxSmallwin2a: {
                        from: 76,
                        to: 77.166667,
                        key: "voxSmallwin2a"
                    },
                    voxSmallwin2b: {
                        from: 78,
                        to: 79.831771,
                        key: "voxSmallwin2b"
                    },
                    voxZoExit: {
                        from: 80,
                        to: 81.083333,
                        key: "voxZoExit"
                    },
                    __duration: 82.03
                };
                cc._RF.pop();
            }
        }, {}],
        GenericSettingButton: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "aeaa7CV0CtEMo2Sab7CGMw1", "GenericSettingButton")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("ButtonTheme");
                var f = a("UIAppearanceHelper");
                var g = a("Utils");
                var h = cc._decorator;
                var i = h.ccclass;
                var j = h.property;
                var k = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.iconSprite = undefined;
                        b.collider = undefined;
                        b.buttonTheme = undefined;
                        b.circleCollider = undefined;
                        b.re = true;
                        b.Ce = cc.v2();
                        b.ye = cc.v2();
                        b.Me = false;
                        b.Ae = false;
                        b.Ie = false;
                        b.we = undefined;
                        b.willHideOnceClick = true;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.onLoad = function () {
                        var a;
                        var b;
                        if (shell.environment.getOrientationMode() === "land") {
                            if (!((a = this.circleCollider) === null || a === undefined)) {
                                a.getComponent(cc.Sprite).spriteFrame = undefined;
                            }
                            this.circleCollider = undefined;
                        }
                        this.enableTouchInteraction();
                        if (!((b = this.circleCollider) === null || b === undefined)) {
                            b.opacity = 0;
                        }
                        if (this.buttonTheme) {
                            var c = f.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".normal");
                            g.setNodeColorWithOpacity(this.iconSprite, c);
                        }
                        this.we = this.iconSprite.getComponent(cc.Sprite).spriteFrame;
                    };
                    b.prototype.setIconSprite = function (a) {
                        this.iconSprite.getComponent(cc.Sprite).spriteFrame = a;
                    };
                    b.prototype.destroy = function () {
                        this.disableTouchInteraction();
                        return a.prototype.destroy.call(this);
                    };
                    b.prototype.onClick = function () { };
                    b.prototype.buttonActivate = function (a) {
                        if (a) {
                            this.node.active = true;
                            g.deferCallback(this)(this.enableTouchInteraction);
                        } else {
                            this.disableTouchInteraction();
                            this.node.active = false;
                        }
                    };
                    Object.defineProperty(b.prototype, "isInteractable", {
                        get: function () {
                            return this.re;
                        },
                        set: function (a) {
                            this.re = a;
                            this.interactableButtonColor(a);
                            if (a) {
                                this.enableTouchInteraction();
                            } else {
                                this.disableTouchInteraction();
                                this.Ie = false;
                            }
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.Oe = function (a) {
                        if (this.re) {
                            this.Ie = true;
                            this.ye = this.Ce = a.touch.getLocation();
                            var b = this.He(a);
                            this.Me = !b;
                            this.Be(b);
                        } else {
                            a.stopPropagation();
                        }
                    };
                    b.prototype.Hi = function (a) {
                        var b;
                        var c;
                        if (this.Ie) {
                            if (this.re) {
                                this.ye = a.touch.getLocation();
                                if (this.circleCollider) {
                                    if (!this.Me) {
                                        this.ye = a.touch.getLocation();
                                        b = cc.v2(0, this.Ce.y);
                                        c = cc.v2(0, this.ye.y);
                                        if (b.sub(c).mag() > 60) {
                                            this.Be(false);
                                            this.Me = true;
                                        }
                                        a.stopPropagation();
                                    }
                                }
                            } else {
                                a.stopPropagation();
                            }
                        }
                    };
                    b.prototype.Ge = function (a) {
                        if (this.Ie) {
                            if (this.re) {
                                if (!this.Me) {
                                    a.stopPropagation();
                                    this.Be(false);
                                    this.onClick();
                                    if (this.willHideOnceClick) {
                                        this.Ne();
                                    }
                                }
                            } else {
                                a.stopPropagation();
                            }
                        }
                    };
                    b.prototype.Te = function (a) {
                        if (this.Ie) {
                            if (this.re) {
                                if (!this.Me) {
                                    a.stopPropagation();
                                    this.Be(false);
                                }
                            } else {
                                a.stopPropagation();
                            }
                        }
                    };
                    b.prototype.changeButtonColor = function (a) {
                        this.changeButtonPressedColor(a);
                    };
                    b.prototype.Be = function (a) {
                        if (!this.Me) {
                            this.changeButtonPressedColor(a);
                        }
                    };
                    b.prototype.changeButtonPressedColor = function (a) {
                        if (this.buttonTheme) {
                            var b = f.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".normal");
                            var c = f.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".pressed");
                            g.setNodeColorWithOpacity(this.iconSprite, a ? c : b);
                        }
                    };
                    b.prototype.interactableButtonColor = function (a) {
                        if (this.buttonTheme) {
                            var b = f.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".normal");
                            var c = f.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".disabled");
                            g.setNodeColorWithOpacity(this.iconSprite, a ? b : c);
                        }
                    };
                    b.prototype.He = function (a) {
                        var b = this.circleCollider;
                        if (!b) {
                            return true;
                        }
                        var c = a.touch ? a.touch.getLocation() : a.getLocation();
                        var d = b.convertToNodeSpaceAR(c);
                        var e = b.width / 2;
                        return d.x * d.x + d.y * d.y <= e * e;
                    };
                    b.prototype.Pe = function (a) {
                        if (this.we && this.circleCollider) {
                            if (this.He(a)) {
                                this.circleCollider.opacity = 255;
                            } else {
                                this.circleCollider.opacity = 0;
                            }
                        }
                    };
                    b.prototype.Ne = function () {
                        var a;
                        if (this.we && this.circleCollider) {
                            this.Me = false;
                            if (!((a = this.circleCollider) === null || a === undefined)) {
                                a.opacity = 0;
                            }
                        }
                    };
                    b.prototype.enableTouchInteraction = function () {
                        if (!this.Ae) {
                            this.Ae = true;
                            var a = this.circleCollider ? this.circleCollider : this.collider;
                            a.on(cc.Node.EventType.TOUCH_START, this.Oe, this);
                            a.on(cc.Node.EventType.TOUCH_MOVE, this.Hi, this);
                            a.on(cc.Node.EventType.TOUCH_END, this.Ge, this);
                            a.on(cc.Node.EventType.TOUCH_CANCEL, this.Te, this);
                            if (this.circleCollider) {
                                a.on(cc.Node.EventType.MOUSE_ENTER, this.Pe, this);
                                a.on(cc.Node.EventType.MOUSE_MOVE, this.Pe, this);
                                a.on(cc.Node.EventType.MOUSE_LEAVE, this.Ne, this);
                            }
                        }
                    };
                    b.prototype.disableTouchInteraction = function () {
                        if (this.Ae) {
                            this.Ae = false;
                            var a = this.circleCollider ? this.circleCollider : this.collider;
                            a.off(cc.Node.EventType.TOUCH_START, this.Oe, this);
                            a.off(cc.Node.EventType.TOUCH_MOVE, this.Hi, this);
                            a.off(cc.Node.EventType.TOUCH_END, this.Ge, this);
                            a.off(cc.Node.EventType.TOUCH_CANCEL, this.Te, this);
                            if (this.circleCollider) {
                                a.off(cc.Node.EventType.MOUSE_ENTER, this.Pe, this);
                                a.off(cc.Node.EventType.MOUSE_MOVE, this.Pe, this);
                                a.off(cc.Node.EventType.MOUSE_LEAVE, this.Ne, this);
                                this.circleCollider.opacity = 0;
                            }
                        }
                    };
                    __decorate([j(cc.Node)], b.prototype, "iconSprite", undefined);
                    __decorate([j(cc.Node)], b.prototype, "collider", undefined);
                    __decorate([j(e)], b.prototype, "buttonTheme", undefined);
                    __decorate([j(cc.Node)], b.prototype, "circleCollider", undefined);
                    return __decorate([i], b);
                }(cc.Component);
                c.default = k;
                cc._RF.pop();
            }
        }, {
            ButtonTheme: "ButtonTheme",
            UIAppearanceHelper: "UIAppearanceHelper",
            Utils: "Utils"
        }],
        GridView: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "2a349Sf9h1Dw6gCmtoNZ3ZP", "GridView")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("ScrollViewEx");
                function b(a, b, c) {
                    return a.fuzzyEquals(b, c);
                }
                function i(a, b) {
                    return a.sub(b).mag();
                }
                var f = cc._decorator;
                var g = f.ccclass;
                f.property;
                var h = function (c) {
                    function a() {
                        var a = c !== null && c.apply(this, arguments) || this;
                        a.autoSnap = true;
                        a.ni = {};
                        a.oi = {};
                        return a;
                    }
                    var d = {
                        get: function () {
                            return this.ni;
                        },
                        enumerable: false,
                        configurable: true
                    };
                    var e = {
                        get: function () {
                            return this.oi;
                        },
                        enumerable: false,
                        configurable: true
                    };
                    __extends(a, c);
                    Object.defineProperty(a.prototype, "nodePools", d);
                    Object.defineProperty(a.prototype, "templates", e);
                    a.prototype.setEstimatedSize = function (a) {
                        if (this.vertical) {
                            this.estimatedHeight = a.y;
                        } else {
                            this.estimatedWidth = a.x;
                        }
                    };
                    a.prototype.setConstantCellSize = function (b, c) {
                        var d = {
                            width: b,
                            height: c
                        };
                        this.constCellSize = d;
                    };
                    a.prototype.setResetFinish = function (a) {
                        this.resetFinish = a;
                    };
                    a.prototype.setSpawnCell = function (a) {
                        this.Re = a;
                    };
                    a.prototype.setRemoveCell = function (a) {
                        this.Le = a;
                    };
                    a.prototype.setPullingLeft = function (a) {
                        this.Ee = a;
                    };
                    a.prototype.setPullLeftEnd = function (a) {
                        this.ke = a;
                    };
                    a.prototype.setPullingRight = function (a) {
                        this.Ue = a;
                    };
                    a.prototype.setPullRightEnd = function (a) {
                        this.je = a;
                    };
                    a.prototype.setPullingDown = function (a) {
                        this.De = a;
                    };
                    a.prototype.setPullDownEnd = function (a) {
                        this.We = a;
                    };
                    a.prototype.setPullingUp = function (a) {
                        this.xe = a;
                    };
                    a.prototype.setPullUpEnd = function (a) {
                        this.Fe = a;
                    };
                    a.prototype.setFocusPoint = function (a) {
                        switch (a) {
                            case 1:
                                this.focusPoint = {};
                                this.focusPoint.type = 1;
                                this.focusPoint.width = this.viewSize.width / 2;
                                this.focusPoint.height = this.viewSize.height / 2;
                                break;
                            case 2:
                                this.focusPoint = {};
                                this.focusPoint.type = 2;
                                this.focusPoint.width = this.viewSize.width;
                                this.focusPoint.height = this.viewSize.height;
                                break;
                            default:
                                this.focusPoint = {};
                                this.focusPoint.type = 0;
                                this.focusPoint.width = 0;
                                this.focusPoint.height = 0;
                        }
                    };
                    a.prototype.getFocusPoint = function () {
                        if (!this.focusPoint) {
                            this.focusPoint = {};
                            this.focusPoint.type = 0;
                            this.focusPoint.width = 0;
                            this.focusPoint.height = 0;
                        }
                        return this.focusPoint;
                    };
                    a.prototype.setLayoutSetting = function (a) {
                        this.contentLayout = this.content.getComponent(cc.Layout);
                        this.layoutSetting = this.getLayoutSetting();
                        if (a.spacingLeft) {
                            this.layoutSetting.spacingLeft = a.spacingLeft;
                        }
                        if (a.spacingRight) {
                            this.layoutSetting.spacingRight = a.spacingRight;
                        }
                        if (a.spacingTop) {
                            this.layoutSetting.spacingTop = a.spacingTop;
                        }
                        if (a.spacingBottom) {
                            this.layoutSetting.spacingBottom = a.spacingBottom;
                        }
                        if (a.spacingX) {
                            this.layoutSetting.spacingX = a.spacingX;
                        }
                        if (a.spacingY) {
                            this.layoutSetting.spacingY = a.spacingY;
                        }
                        this.contentLayout.paddingLeft = this.layoutSetting.spacingLeft;
                        this.contentLayout.paddingRight = this.layoutSetting.spacingRight;
                        this.contentLayout.paddingTop = this.layoutSetting.spacingTop;
                        this.contentLayout.paddingBottom = this.layoutSetting.spacingBottom;
                        this.contentLayout.spacingX = this.layoutSetting.spacingX;
                        this.contentLayout.spacingY = this.layoutSetting.spacingY;
                    };
                    a.prototype.getLayoutSetting = function () {
                        if (this.layoutSetting) {
                            return this.layoutSetting;
                        } else {
                            return this.layoutSetting = {
                                spacingLeft: 0,
                                spacingRight: 0,
                                spacingTop: 0,
                                spacingBottom: 0,
                                spacingX: 0,
                                spacingY: 0
                            };
                        }
                    };
                    a.prototype.getVisibleItems = function () {
                        var b = [];
                        var c = this.content.children;
                        if (c.length) {
                            for (var d = 0; d < c.length; d++) {
                                b.push(c[d]);
                            }
                        }
                        return b;
                    };
                    a.prototype.setDataSource = function (b) {
                        var c = this.node;
                        var d = c.width;
                        var a = c.height;
                        this.Ve(d, a);
                        if (b !== this.ci) {
                            this.ci = b;
                        }
                    };
                    a.prototype.ze = function () {
                        return this.ci;
                    };
                    a.prototype.qe = function (a) {
                        this.Je = a;
                    };
                    a.prototype.Ke = function () {
                        if (!this.Je) {
                            this.Je = 0;
                        }
                        return this.Je;
                    };
                    a.prototype.ui = function () {
                        var b = this.node;
                        var c = b.width;
                        var d = b.height;
                        this.Ve(c, d);
                        this.Qe(this.ri, this.currentIndex);
                    };
                    a.prototype.Ve = function (b, c) {
                        var d = {
                            width: b,
                            height: c
                        };
                        this.viewSize = d;
                        this.content.parent.setContentSize(b, c);
                    };
                    a.prototype.Ye = function () {
                        return this.viewSize;
                    };
                    a.prototype.register = function (b, c, d) {
                        if (this.nodePools[b]); else if (c) {
                            var a = new cc.NodePool(d);
                            this.templates[b] = c;
                            this.nodePools[b] = a;
                        }
                    };
                    a.prototype.reloadData = function () {
                        this.setSnapDone(true);
                        var b = this.ci;
                        var c = b.getCount(this, this.ri);
                        var d = this.Je;
                        if (d !== c) {
                            this.setMasterControl(true);
                            if (c < d) {
                                this.Xe(c);
                            } else {
                                this.qe(c);
                                this.reloadCurrentData();
                                this.Ze();
                            }
                        } else {
                            this.reloadCurrentData();
                        }
                        if (b.didReloadData) {
                            b.didReloadData();
                        }
                    };
                    a.prototype.insertItem = function () { };
                    a.prototype.removeItem = function () { };
                    a.prototype.Qe = function (b, c, d) {
                        if (b === undefined) {
                            b = this.ri;
                        }
                        this.hi();
                        this.$e();
                        this.setMasterControl(true);
                        this.content.y = 0;
                        this.content.x = 0;
                        this.content.setContentSize(0, 0);
                        this.contentLayout.paddingTop = this.layoutSetting.spacingTop;
                        this.contentLayout.paddingBottom = this.layoutSetting.spacingBottom;
                        this.contentLayout.paddingLeft = this.layoutSetting.spacingLeft;
                        this.contentLayout.paddingRight = this.layoutSetting.spacingRight;
                        if (this.content.children.length) {
                            for (var a = this.content.children.length - 1; a >= 0; a--) {
                                var e = this.content.children[a];
                                this.tn(e);
                            }
                        }
                        this.init(b, c, false, d);
                    };
                    a.prototype.reset = function (a, b) {
                        if (a === undefined) {
                            a = this.ri;
                        }
                        this.Qe(a, b, this.resetFinish);
                    };
                    a.prototype.init = function (b, c, d, e) {
                        if (c === undefined) {
                            c = 0;
                        }
                        if (d === undefined) {
                            d = true;
                        }
                        if (!this.layoutSetting) {
                            this.setLayoutSetting({
                                spacingLeft: 0,
                                spacingRight: 0,
                                spacingTop: 0,
                                spacingBottom: 0,
                                spacingX: 0,
                                spacingY: 0
                            });
                        }
                        var f = this.ci;
                        this.isDynamicSize = !!f.getCellSize;
                        this.isPreCalculateSize = !(!this.constCellSize && !this.isDynamicSize);
                        if (!this.isPreCalculateSize) {
                            c = 0;
                        }
                        this.originalElastic = this.elastic;
                        this.currentIndex = c;
                        this.currentTarget = c;
                        this.requestSnap = false;
                        this.setMasterControl(false);
                        this.contentLayout = this.content.getComponent(cc.Layout);
                        this.setSnapDone(true);
                        this.snapPause = false;
                        this.outerCellsMatrix = [];
                        this.ri = b;
                        this.pauseUpdate = false;
                        this.pullDir = null;
                        this.prevContentY = this.content.y;
                        this.prevContentX = this.content.x * -1;
                        this.di();
                        this.qe(f.getCount(this, this.ri));
                        if (this.vertical) {
                            this.contentLayout.startAxis = 0;
                            this.content.width = this.viewSize.width;
                            this.in(0, c, this.viewSize.height, d, e);
                        } else {
                            this.contentLayout.startAxis = 1;
                            this.content.height = this.viewSize.height;
                            this.sn(0, c, this.viewSize.width, d, e);
                        }
                    };
                    a.prototype.scrollTo = function (b, c) {
                        var d = this;
                        if (c === undefined) {
                            c = true;
                        }
                        if (!(b >= this.Je)) {
                            if (!this.isPreCalculateSize || c) {
                                if (this.vertical) {
                                    var a = this.en(b);
                                    if (a !== null) {
                                        var e = this.getFocusPoint();
                                        this.currentIndex = b;
                                        if (e.type === 1) {
                                            this.target = this.nn(a) - this.outerCellsMatrix[a].height - e.height + this.outerCellsMatrix[a][0].height / 2;
                                        } else {
                                            this.target = this.nn(a) - this.outerCellsMatrix[a].height - this.layoutSetting.spacingTop;
                                        }
                                        var f = this.content.height - this.viewSize.height;
                                        if (this.target < 0) {
                                            this.target = 0;
                                        } else if (this.target > f) {
                                            this.target = f;
                                        }
                                    } else {
                                        this.target = this.estimatedHeight;
                                        this.suddenStopIndex = b;
                                    }
                                } else {
                                    var g = this.en(b);
                                    if (g !== null) {
                                        e = this.getFocusPoint();
                                        this.currentIndex = b;
                                        if (e.type === 1) {
                                            this.target = this.cn(g) - this.outerCellsMatrix[g].width - e.width + this.outerCellsMatrix[g][0].width / 2;
                                        } else {
                                            this.target = this.cn(g) - this.outerCellsMatrix[g].width - this.layoutSetting.spacingLeft;
                                        }
                                        var h = this.content.width - this.viewSize.width;
                                        if (this.target < 0) {
                                            this.target = 0;
                                        } else if (this.target > h) {
                                            this.target = h;
                                        }
                                    } else {
                                        this.target = this.estimatedWidth;
                                        this.suddenStopIndex = b;
                                    }
                                }
                                this.lerpSpeed = 10;
                                this.setSnapDone(false);
                            } else {
                                this.Qe(this.ri, b, function () {
                                    if (d.snapFinish) {
                                        d.snapFinish(b);
                                    }
                                });
                            }
                        }
                    };
                    a.prototype.stopUpdate = function () {
                        this.setMasterControl(true);
                    };
                    a.prototype.resumeUpdate = function () {
                        if (this.pauseUpdate) {
                            this.setMasterControl(false);
                            this.pullDir = null;
                            this.pauseUpdate = false;
                        }
                    };
                    a.prototype.setMasterControl = function (a) {
                        this.hn = a;
                    };
                    a.prototype.rn = function () {
                        if (!(this.pauseUpdate || this.hn)) {
                            if (this.content.children.length) {
                                if (this.vertical) {
                                    if (this.content.y !== this.prevContentY) {
                                        this.an();
                                    }
                                } else if (this.content.x * -1 !== this.prevContentX) {
                                    this.un();
                                }
                            }
                        }
                    };
                    a.prototype.nn = function (b) {
                        if (this.outerCellsMatrix[b] && this.outerCellsMatrix[b].totalHeight) {
                            return this.outerCellsMatrix[b].totalHeight;
                        }
                        for (var c = this.layoutSetting.spacingTop, d = 0; d <= b; d++) {
                            c += this.outerCellsMatrix[d].height;
                            if (d === b) {
                                this.outerCellsMatrix[b].totalHeight = c;
                                return c;
                            }
                            c += this.layoutSetting.spacingY;
                        }
                    };
                    a.prototype.cn = function (b) {
                        if (this.outerCellsMatrix[b] && this.outerCellsMatrix[b].totalWidth) {
                            return this.outerCellsMatrix[b].totalWidth;
                        }
                        for (var c = this.layoutSetting.spacingLeft, d = 0; d <= b; d++) {
                            c += this.outerCellsMatrix[d].width;
                            if (d === b) {
                                this.outerCellsMatrix[b].totalWidth = c;
                                return c;
                            }
                            c += this.layoutSetting.spacingX;
                        }
                    };
                    a.prototype.ln = function () {
                        if (this.vertical) {
                            if (this.dn() < this.vn) {
                                return 0;
                            }
                            if (this._n() > this.mn) {
                                var a = this.content.children.length - 1;
                                return this.content.children[a].row;
                            }
                            for (var b = 0, c = 0, d = this.content.height, e = null, f = 0; f < this.content.children.length; f++) {
                                if (e != this.content.children[f].row) {
                                    e = this.content.children[f].row;
                                    var g = this.nn(e) - this.outerCellsMatrix[e].height - this.layoutSetting.spacingTop;
                                    if ((c = Math.abs(g - this.content.y)) >= d) {
                                        return b;
                                    }
                                    b = e;
                                    d = c;
                                }
                            }
                            return b;
                        }
                        if (this.pn() > this.bn) {
                            return 0;
                        }
                        if (this.Sn() < this.gn) {
                            a = this.content.children.length - 1;
                            return this.content.children[a].col;
                        }
                        var h = 0;
                        var i = 0;
                        d = this.content.width;
                        var j = null;
                        for (f = 0; f < this.content.children.length; f++) {
                            if (j != this.content.children[f].col) {
                                j = this.content.children[f].col;
                                var l = this.cn(j) - this.outerCellsMatrix[j].width - this.layoutSetting.spacingLeft;
                                if ((i = Math.abs(l - this.content.x * -1)) >= d) {
                                    return h;
                                }
                                h = j;
                                d = i;
                            }
                        }
                        return h;
                    };
                    a.prototype.Cn = function () {
                        this.elastic = this.originalElastic;
                        if (!this.hn && this.requestSnap && this.content.children.length) {
                            if (this.vertical) {
                                var b = this.getFocusPoint();
                                this.requestSnap = false;
                                var c = this.ln();
                                this.currentTarget = c;
                                this.currentIndex = this.outerCellsMatrix[c][0] ? this.outerCellsMatrix[c][0].zIndex : null;
                                if (b.type === 1) {
                                    this.target = this.nn(c) - this.outerCellsMatrix[c].height - b.height + this.outerCellsMatrix[c][0].height / 2;
                                } else {
                                    this.target = this.nn(c) - this.outerCellsMatrix[c].height - this.layoutSetting.spacingTop;
                                }
                                var d = this.content.height - this.viewSize.height;
                                if (d < 0) {
                                    d = 0;
                                }
                                if (this.target <= 0) {
                                    this.target = 0;
                                } else if (this.target >= d) {
                                    this.target = d;
                                }
                            } else {
                                b = this.getFocusPoint();
                                this.requestSnap = false;
                                var e = this.ln();
                                this.currentTarget = e;
                                this.currentIndex = this.outerCellsMatrix[e][0] ? this.outerCellsMatrix[e][0].zIndex : null;
                                if (b.type === 1) {
                                    this.target = this.cn(e) - this.outerCellsMatrix[e].width - b.width + this.outerCellsMatrix[e][0].width / 2;
                                } else {
                                    this.target = this.cn(e) - this.outerCellsMatrix[e].width - this.layoutSetting.spacingLeft;
                                }
                                var f = this.content.width - this.viewSize.width;
                                if (f < 0) {
                                    f = 0;
                                }
                                if (this.target <= 0) {
                                    this.target = 0;
                                } else if (this.target >= f) {
                                    this.target = f;
                                }
                            }
                            this.lerpSpeed = 5;
                            this.setSnapDone(false);
                        }
                    };
                    a.prototype.an = function () {
                        var a = this.content.y;
                        var b = this.content.children[0];
                        var c = this.content.children[this.content.children.length - 1];
                        var d = b.row;
                        var e = c.row;
                        var f = this.nn(e) - this.viewSize.height;
                        if (this.prevContentY > a) {
                            var g = b.zIndex;
                            var h = a - this.contentLayout.paddingTop + this.layoutSetting.spacingY;
                            if (h < 0) {
                                this.yn(d - 1, g - 1, h);
                            }
                            if (e > 0 && this.outerCellsMatrix[e - 1] && this.outerCellsMatrix[e - 1][0]) {
                                var i = a - f + this.layoutSetting.spacingY + this.outerCellsMatrix[e].height;
                                if (i < 0) {
                                    this.Mn(e, i, f);
                                }
                            }
                        } else {
                            var j = c.zIndex;
                            var k = a - f;
                            if (k > 0) {
                                this.An(e + 1, 0, j + 1, k);
                            }
                            if (d < this.outerCellsMatrix.length - 1 && this.outerCellsMatrix[d + 1] && this.outerCellsMatrix[d + 1][0]) {
                                var l = a - this.contentLayout.paddingTop - this.outerCellsMatrix[d].height;
                                if (l > 0) {
                                    this.In(d, l);
                                }
                            }
                        }
                        this.prevContentY = a;
                    };
                    a.prototype.un = function () {
                        var a = this.content.x * -1;
                        var b = this.content.children[0];
                        var c = this.content.children[this.content.children.length - 1];
                        var d = b.col;
                        var e = c.col;
                        var f = this.cn(e) - this.viewSize.width;
                        if (this.prevContentX > a) {
                            var g = b.zIndex;
                            var h = a - this.contentLayout.paddingLeft + this.layoutSetting.spacingX;
                            if (h < 0) {
                                this.wn(d - 1, g - 1, h);
                            }
                            if (e > 0 && this.outerCellsMatrix[e - 1] && this.outerCellsMatrix[e - 1][0]) {
                                var i = a - f + this.layoutSetting.spacingX + this.outerCellsMatrix[e].width;
                                if (i < 0) {
                                    this.On(e, i, f);
                                }
                            }
                        } else {
                            var j = c.zIndex;
                            var k = a - f;
                            if (k > 0) {
                                this.Hn(0, e + 1, j + 1, k);
                            }
                            if (d < this.outerCellsMatrix.length - 1 && this.outerCellsMatrix[d + 1] && this.outerCellsMatrix[d + 1][0]) {
                                var l = a - this.contentLayout.paddingLeft - this.outerCellsMatrix[d].width;
                                if (l > 0) {
                                    this.Bn(d, l);
                                }
                            }
                        }
                        this.prevContentX = a;
                    };
                    a.prototype.Gn = function () {
                        for (var a, b, c = this.layoutSetting, d = c.spacingX, e = c.spacingLeft + c.spacingRight, f = 0, g = 0, h = 0, i = this.Je; f < i;) {
                            if (this.isDynamicSize) {
                                var j = this.ci.getCellSize(f);
                                a = j.width + d;
                                b = j.height;
                            } else {
                                a = this.constCellSize.width + d;
                                b = this.constCellSize.height;
                            }
                            if (!this.outerCellsMatrix[g]) {
                                this.outerCellsMatrix[g] = {};
                                this.outerCellsMatrix[g][h] = null;
                                this.outerCellsMatrix[g].itemCount = 0;
                                this.outerCellsMatrix[g].height = 0;
                                this.outerCellsMatrix[g].freeWidth = this.viewSize.width - e;
                                this.freeWidth = this.viewSize.width - e;
                            }
                            if (this.freeWidth - a >= 0) {
                                this.outerCellsMatrix[g].height = Math.max(b, this.outerCellsMatrix[g].height);
                                this.outerCellsMatrix[g][h] = null;
                                this.freeWidth -= a;
                                h += 1;
                                this.outerCellsMatrix[g].itemCount = h;
                                f++;
                            } else if (this.freeWidth + d - a >= 0) {
                                this.outerCellsMatrix[g].height = Math.max(b, this.outerCellsMatrix[g].height);
                                this.outerCellsMatrix[g][h] = null;
                                this.freeWidth -= a;
                                h += 1;
                                this.outerCellsMatrix[g].itemCount = h;
                                f++;
                            } else {
                                g += 1;
                                h = 0;
                            }
                        }
                        this.freeWidth = undefined;
                        this.Nn();
                    };
                    a.prototype.Tn = function () {
                        for (var a, b, c = this.layoutSetting, d = c.spacingY, e = c.spacingTop + c.spacingBottom, f = 0, g = 0, h = 0, i = this.Je; f < i;) {
                            if (this.isDynamicSize) {
                                var j = this.ci.getCellSize(f);
                                a = j.width;
                                b = j.height + d;
                            } else {
                                a = this.constCellSize.width;
                                b = this.constCellSize.height + d;
                            }
                            if (!this.outerCellsMatrix[h]) {
                                this.outerCellsMatrix[h] = {};
                                this.outerCellsMatrix[h][g] = {};
                                this.outerCellsMatrix[h].itemCount = 0;
                                this.outerCellsMatrix[h].width = 0;
                                this.outerCellsMatrix[h].freeHeight = this.viewSize.height - e;
                                this.freeHeight = this.viewSize.height - e;
                            }
                            if (this.freeHeight - b >= 0) {
                                this.outerCellsMatrix[h].width = Math.max(a, this.outerCellsMatrix[h].width);
                                this.outerCellsMatrix[h][g] = null;
                                this.freeHeight -= b;
                                g += 1;
                                this.outerCellsMatrix[h].itemCount = g;
                                f++;
                            } else if (this.freeHeight + this.layoutSetting.spacingY - b >= 0) {
                                this.outerCellsMatrix[h].width = Math.max(a, this.outerCellsMatrix[h].width);
                                this.outerCellsMatrix[h][g] = null;
                                this.freeHeight -= b;
                                g += 1;
                                this.outerCellsMatrix[h].itemCount = g;
                                f++;
                            } else {
                                h += 1;
                                g = 0;
                            }
                        }
                        this.freeHeight = undefined;
                        this.Pn();
                    };
                    a.prototype.Rn = function (a, b, c) {
                        this.lastContentY = this.content.y;
                        for (var d, e, f = this.layoutSetting, h = f.spacingX, i = f.spacingY, j = f.spacingLeft + f.spacingRight, k = a, l = 0, m = this.Je, n = 0; b < m;) {
                            if (this.isDynamicSize) {
                                var o = this.ci.getCellSize(b);
                                d = o.width + h;
                                e = o.height;
                            } else {
                                d = this.constCellSize.width + h;
                                e = this.constCellSize.height;
                            }
                            if (!(c > 0)) {
                                return;
                            }
                            if (!this.outerCellsMatrix[k]) {
                                this.outerCellsMatrix[k] = {};
                                this.outerCellsMatrix[k][l] = null;
                                this.outerCellsMatrix[k].itemCount = 0;
                                this.outerCellsMatrix[k].height = 0;
                                this.outerCellsMatrix[k].freeWidth = this.viewSize.width - j;
                            }
                            if (this.outerCellsMatrix[k].freeWidth - d >= 0) {
                                this.outerCellsMatrix[k].height = Math.max(e, this.outerCellsMatrix[k].height);
                                var p = this.ci.getItem(this, b, this.ri);
                                this.Ln(p, k, l, b);
                                this.outerCellsMatrix[k].freeWidth -= d;
                                l += 1;
                                this.outerCellsMatrix[k].itemCount = l;
                                b++;
                            } else if (this.outerCellsMatrix[k].freeWidth + h - d >= 0) {
                                this.outerCellsMatrix[k].height = Math.max(e, this.outerCellsMatrix[k].height);
                                p = this.ci.getItem(this, b, this.ri);
                                this.Ln(p, k, l, b);
                                this.outerCellsMatrix[k].freeWidth -= d;
                                l += 1;
                                this.outerCellsMatrix[k].itemCount = l;
                                b++;
                            } else {
                                var r = (c -= n) - (this.outerCellsMatrix[k].height + i);
                                if (r > 0) {
                                    c = r;
                                } else if (r + i > 0) {
                                    c = r + i;
                                    n = i;
                                } else {
                                    c = r;
                                }
                                k += 1;
                                l = 0;
                            }
                        }
                    };
                    a.prototype.En = function (a, b, c) {
                        this.lastContentX = this.content.x * -1;
                        for (var d, e, f = this.layoutSetting, h = f.spacingX, i = f.spacingY, j = f.spacingTop + f.spacingBottom, k = 0, l = a, m = this.Je, n = 0; b < m;) {
                            if (this.isDynamicSize) {
                                var o = this.ci.getCellSize(b);
                                d = o.width;
                                e = o.height + i;
                            } else {
                                d = this.constCellSize.width;
                                e = this.constCellSize.height + i;
                            }
                            if (!(c > 0)) {
                                this.setMasterControl(false);
                                return;
                            }
                            if (!this.outerCellsMatrix[l]) {
                                this.outerCellsMatrix[l] = {};
                                this.outerCellsMatrix[l][k] = {};
                                this.outerCellsMatrix[l].itemCount = 0;
                                this.outerCellsMatrix[l].width = 0;
                                this.outerCellsMatrix[l].freeHeight = this.viewSize.height - j;
                            }
                            if (this.outerCellsMatrix[l].freeHeight - e >= 0) {
                                this.outerCellsMatrix[l].width = Math.max(d, this.outerCellsMatrix[l].width);
                                var p = this.ci.getItem(this, b, this.ri);
                                this.Ln(p, k, l, b);
                                this.outerCellsMatrix[l].freeHeight -= e;
                                k += 1;
                                this.outerCellsMatrix[l].itemCount = k;
                                b++;
                            } else if (this.outerCellsMatrix[l].freeHeight + i - e >= 0) {
                                this.outerCellsMatrix[l].width = Math.max(d, this.outerCellsMatrix[l].width);
                                p = this.ci.getItem(this, b, this.ri);
                                this.Ln(p, k, l, b);
                                this.outerCellsMatrix[l].freeHeight -= e;
                                k += 1;
                                this.outerCellsMatrix[l].itemCount = k;
                                b++;
                            } else {
                                var r = (c -= n) - (this.outerCellsMatrix[l].width + h);
                                if (r > 0) {
                                    c = r;
                                } else if (r + h > 0) {
                                    c = r + h;
                                    n = h;
                                } else {
                                    c = r;
                                }
                                l += 1;
                                k = 0;
                            }
                        }
                        this.setMasterControl(false);
                    };
                    a.prototype.kn = function (b, c, d) {
                        var a = this.en(b);
                        var e = this.Un(a);
                        var f = this.nn(a) - this.outerCellsMatrix[a].height;
                        if (this.dn() < this.vn) {
                            this.target = 0;
                        } else if (this._n() > this.mn) {
                            this.target = this.content.height + this.mn;
                        } else {
                            this.target = f - this.layoutSetting.spacingTop;
                        }
                        this.content.y = this.target;
                        this.contentLayout.paddingTop = f;
                        this.contentLayout.paddingBottom = this.layoutSetting.spacingBottom;
                        this.contentLayout.updateLayout();
                        this.Rn(a, e, c);
                        var g = this.content.y - f;
                        if (g < 0) {
                            this.yn(a - 1, e - 1, g, d);
                        } else if (d) {
                            d();
                        }
                        this.setMasterControl(false);
                    };
                    a.prototype.jn = function (b, c, d) {
                        var a = this.en(b);
                        var e = this.Un(a);
                        var f = (this.cn(a) - this.outerCellsMatrix[a].width) * -1;
                        if (this.pn() > this.bn) {
                            this.target = 0;
                        } else if (this.Sn() < this.gn) {
                            this.target = (this.content.width - this.gn) * -1;
                        } else {
                            this.target = f + this.layoutSetting.spacingLeft;
                        }
                        this.content.x = this.target;
                        this.contentLayout.paddingLeft = -f;
                        this.contentLayout.paddingRight = this.layoutSetting.spacingRight;
                        this.contentLayout.updateLayout();
                        this.En(a, e, c);
                        var g = this.content.x * -1 + f;
                        if (g < 0) {
                            this.wn(a - 1, e - 1, g, d);
                        } else if (d) {
                            d();
                        }
                        this.setMasterControl(false);
                    };
                    a.prototype.in = function (a, b, c, d, e) {
                        if (d === undefined) {
                            d = true;
                        }
                        if (this.Je) {
                            if (this.isPreCalculateSize && !d) {
                                this.Gn();
                                this.kn(b, c, e);
                            } else {
                                this.lastContentY = this.content.y;
                                for (var f = this.layoutSetting, h = f.spacingX, i = f.spacingY, j = f.spacingLeft + f.spacingRight, k = a, l = 0, m = undefined, n = undefined, o = undefined, p = this.Je, g = 0; b < p;) {
                                    n = (m = this.ci.getItem(this, b, this.ri)).width + h;
                                    o = m.height;
                                    if (!(c > 0)) {
                                        this.Nn();
                                        this.vi(m);
                                        this.setMasterControl(false);
                                        return;
                                    }
                                    if (!this.outerCellsMatrix[k]) {
                                        this.outerCellsMatrix[k] = {};
                                        this.outerCellsMatrix[k][l] = null;
                                        this.outerCellsMatrix[k].itemCount = 0;
                                        this.outerCellsMatrix[k].height = 0;
                                        this.outerCellsMatrix[k].freeWidth = this.viewSize.width - j;
                                    }
                                    if (this.outerCellsMatrix[k].freeWidth - n >= 0) {
                                        this.outerCellsMatrix[k].height = Math.max(o, this.outerCellsMatrix[k].height);
                                        this.Ln(m, k, l, b);
                                        this.outerCellsMatrix[k].freeWidth -= n;
                                        l += 1;
                                        this.outerCellsMatrix[k].itemCount = l;
                                        b++;
                                        this.Nn();
                                    } else if (this.outerCellsMatrix[k].freeWidth + h - n >= 0) {
                                        this.outerCellsMatrix[k].height = Math.max(o, this.outerCellsMatrix[k].height);
                                        this.Ln(m, k, l, b);
                                        this.outerCellsMatrix[k].freeWidth -= n;
                                        l += 1;
                                        this.outerCellsMatrix[k].itemCount = l;
                                        b++;
                                        this.Nn();
                                    } else {
                                        var r = (c -= g) - (this.outerCellsMatrix[k].height + i);
                                        if (r > 0) {
                                            c = r;
                                        } else if (r + i > 0) {
                                            c = r + i;
                                            g = i;
                                        } else {
                                            c = r;
                                        }
                                        this.Nn();
                                        this.vi(m);
                                        k += 1;
                                        l = 0;
                                    }
                                }
                                this.setMasterControl(false);
                            }
                        } else if (e) {
                            e();
                        }
                    };
                    a.prototype.sn = function (a, b, c, d, e) {
                        if (this.Je) {
                            if (this.isPreCalculateSize && !d) {
                                this.Tn();
                                this.jn(b, c, e);
                            } else {
                                this.lastContentX = this.content.x * -1;
                                for (var f = this.layoutSetting, h = f.spacingX, i = f.spacingY, j = f.spacingTop + f.spacingBottom, k = 0, l = a, m = undefined, n = undefined, o = undefined, p = this.Je, g = 0; b < p;) {
                                    n = (m = this.ci.getItem(this, b, this.ri)).width;
                                    o = m.height + i;
                                    if (!(c > 0)) {
                                        this.Pn();
                                        this.vi(m);
                                        this.setMasterControl(false);
                                        return;
                                    }
                                    if (!this.outerCellsMatrix[l]) {
                                        this.outerCellsMatrix[l] = {};
                                        this.outerCellsMatrix[l][k] = {};
                                        this.outerCellsMatrix[l].itemCount = 0;
                                        this.outerCellsMatrix[l].width = 0;
                                        this.outerCellsMatrix[l].freeHeight = this.viewSize.height - j;
                                    }
                                    if (this.outerCellsMatrix[l].freeHeight - o >= 0) {
                                        this.outerCellsMatrix[l].width = Math.max(n, this.outerCellsMatrix[l].width);
                                        this.Ln(m, k, l, b);
                                        this.outerCellsMatrix[l].freeHeight -= o;
                                        k += 1;
                                        this.outerCellsMatrix[l].itemCount = k;
                                        b++;
                                        this.Pn();
                                    } else if (this.outerCellsMatrix[l].freeHeight + i - o >= 0) {
                                        this.outerCellsMatrix[l].width = Math.max(n, this.outerCellsMatrix[l].width);
                                        this.Ln(m, k, l, b);
                                        this.outerCellsMatrix[l].freeHeight -= o;
                                        k += 1;
                                        this.outerCellsMatrix[l].itemCount = k;
                                        b++;
                                        this.Pn();
                                    } else {
                                        var r = (c -= g) - (this.outerCellsMatrix[l].width + h);
                                        if (r > 0) {
                                            c = r;
                                        } else if (r + h > 0) {
                                            c = r + h;
                                            g = h;
                                        } else {
                                            c = r;
                                        }
                                        this.Pn();
                                        this.vi(m);
                                        l += 1;
                                        k = 0;
                                    }
                                }
                                this.setMasterControl(false);
                            }
                        } else if (e) {
                            e();
                        }
                    };
                    a.prototype.In = function (b, c) {
                        for (var d = this.layoutSetting.spacingLeft + this.layoutSetting.spacingRight, a = this.outerCellsMatrix[b].itemCount - 1; c > 0;) {
                            if (a >= 0) {
                                if (this.Le) {
                                    this.Le();
                                }
                                this.tn(this.outerCellsMatrix[b][a]);
                                a--;
                            } else {
                                this.contentLayout.paddingTop += this.outerCellsMatrix[b].height + this.layoutSetting.spacingY;
                                this.outerCellsMatrix[b].freeWidth = this.viewSize.width - d;
                                if ((b += 1) >= this.outerCellsMatrix.length - 1 || !this.outerCellsMatrix[b][0]) {
                                    return;
                                }
                                a = this.outerCellsMatrix[b].itemCount - 1;
                                c = this.content.y - this.contentLayout.paddingTop - this.outerCellsMatrix[b].height;
                            }
                        }
                    };
                    a.prototype.Bn = function (b, c) {
                        for (var d = this.layoutSetting.spacingTop + this.layoutSetting.spacingBottom, a = this.outerCellsMatrix[b].itemCount - 1; c > 0;) {
                            if (a >= 0) {
                                this.tn(this.outerCellsMatrix[b][a]);
                                a--;
                            } else {
                                this.contentLayout.paddingLeft += this.outerCellsMatrix[b].width + this.layoutSetting.spacingX;
                                this.outerCellsMatrix[b].freeHeight = this.viewSize.height - d;
                                if ((b += 1) >= this.outerCellsMatrix.length - 1 || !this.outerCellsMatrix[b][0]) {
                                    return;
                                }
                                a = this.outerCellsMatrix[b].itemCount - 1;
                                c = this.content.x * -1 - this.contentLayout.paddingLeft - this.outerCellsMatrix[b].width;
                            }
                        }
                    };
                    a.prototype.Mn = function (b, c, d) {
                        for (var e = this.layoutSetting.spacingLeft + this.layoutSetting.spacingRight, f = this.outerCellsMatrix[b].itemCount - 1; c < 0;) {
                            if (f >= 0) {
                                if (this.Le) {
                                    this.Le();
                                }
                                this.tn(this.outerCellsMatrix[b][f]);
                                f--;
                            } else {
                                this.outerCellsMatrix[b].freeWidth = this.viewSize.width - e;
                                if ((b -= 1) <= 0 || !this.outerCellsMatrix[b][0]) {
                                    return;
                                }
                                f = this.outerCellsMatrix[b].itemCount - 1;
                                d = this.nn(b) - this.viewSize.height;
                                c = this.content.y - d + this.layoutSetting.spacingY + this.outerCellsMatrix[b].height;
                            }
                        }
                    };
                    a.prototype.On = function (b, c, d) {
                        for (var e = this.layoutSetting.spacingTop + this.layoutSetting.spacingBottom, f = this.outerCellsMatrix[b].itemCount - 1; c < 0;) {
                            if (f >= 0) {
                                if (this.Le) {
                                    this.Le();
                                }
                                this.tn(this.outerCellsMatrix[b][f]);
                                f--;
                            } else {
                                this.outerCellsMatrix[b].freeHeight = this.viewSize.height - e;
                                if ((b -= 1) <= 0 || !this.outerCellsMatrix[b][0]) {
                                    return;
                                }
                                f = this.outerCellsMatrix[b].itemCount - 1;
                                d = this.cn(b) - this.viewSize.width;
                                c = this.content.x * -1 - d + this.layoutSetting.spacingX + this.outerCellsMatrix[b].width;
                            }
                        }
                    };
                    a.prototype.removeUselessItems = function (b, c) {
                        this.qe(b);
                        if (this.vertical) {
                            for (var d = this.content.children.length - 1; d >= 0; d--) {
                                if (!((f = this.content.children[d]).zIndex > b - 1)) {
                                    this.reloadCurrentData();
                                    var e = f.col + 1;
                                    this.outerCellsMatrix[f.row].itemCount = e;
                                    this.outerCellsMatrix.splice(f.row + 1, this.outerCellsMatrix.length - 1);
                                    this.Nn();
                                    this.setMasterControl(false);
                                    if (c) {
                                        c();
                                    }
                                    break;
                                }
                                this.outerCellsMatrix[f.row].freeWidth += this.outerCellsMatrix[f.row][f.col].width + this.layoutSetting.spacingX;
                                this.tn(f);
                                if (d === 0) {
                                    this.Nn();
                                    this.setMasterControl(false);
                                    if (c) {
                                        c();
                                    }
                                }
                            }
                        } else {
                            for (d = this.content.children.length - 1; d >= 0; d--) {
                                var f;
                                if (!((f = this.content.children[d]).zIndex >= b - 1)) {
                                    this.reloadCurrentData();
                                    e = f.row + 1;
                                    this.outerCellsMatrix[f.col].itemCount = e;
                                    this.outerCellsMatrix.splice(f.col + 1, this.outerCellsMatrix.length - 1);
                                    this.Pn();
                                    this.setMasterControl(false);
                                    if (c) {
                                        c();
                                    }
                                    break;
                                }
                                this.outerCellsMatrix[f.col].freeHeight += this.outerCellsMatrix[f.col][f.row].height + this.layoutSetting.spacingY;
                                this.tn(f);
                                if (d === 0) {
                                    this.Nn();
                                    this.setMasterControl(false);
                                    if (c) {
                                        c();
                                    }
                                }
                            }
                        }
                    };
                    a.prototype.An = function (a, b, c, d) {
                        this.lastContentY = this.content.y;
                        for (var e, f, g, h = this.layoutSetting.spacingLeft + this.layoutSetting.spacingRight, i = a, j = b, k = this.Je; c < k;) {
                            f = (e = this.ci.getItem(this, c, this.ri)).width + this.layoutSetting.spacingX;
                            g = e.height;
                            if (!(d > 0)) {
                                this.Nn();
                                this.vi(e);
                                return;
                            }
                            if (!this.outerCellsMatrix[i]) {
                                this.outerCellsMatrix[i] = {};
                                this.outerCellsMatrix[i][j] = {};
                                this.outerCellsMatrix[i].itemCount = 0;
                                this.outerCellsMatrix[i].height = 0;
                                this.outerCellsMatrix[i].freeWidth = this.viewSize.width - h;
                            }
                            if (this.outerCellsMatrix[i].freeWidth - f >= 0) {
                                if (this.Re) {
                                    this.Re();
                                }
                                this.outerCellsMatrix[i].height = Math.max(g, this.outerCellsMatrix[i].height);
                                this.Ln(e, i, j, c);
                                this.outerCellsMatrix[i].freeWidth -= f;
                                j += 1;
                                this.outerCellsMatrix[i].itemCount = j;
                                if (++c >= k) {
                                    this.Nn();
                                }
                            } else if (this.outerCellsMatrix[i].freeWidth + this.layoutSetting.spacingX - f >= 0) {
                                if (this.Re) {
                                    this.Re();
                                }
                                this.outerCellsMatrix[i].height = Math.max(g, this.outerCellsMatrix[i].height);
                                this.Ln(e, i, j, c);
                                this.outerCellsMatrix[i].freeWidth -= f;
                                j += 1;
                                this.outerCellsMatrix[i].itemCount = j;
                                c++;
                                this.Nn();
                            } else {
                                var l = this.content.children[this.content.children.length - 1].row;
                                var n = this.nn(l) - this.viewSize.height;
                                d = this.content.y - n;
                                this.Nn();
                                this.vi(e);
                                i += 1;
                                j = 0;
                            }
                        }
                    };
                    a.prototype.Hn = function (a, b, c, d) {
                        this.lastContentY = this.content.x * -1;
                        for (var e, f, g, h = this.layoutSetting.spacingTop + this.layoutSetting.spacingBottom, i = a, j = b, k = this.Je; c < k;) {
                            f = (e = this.ci.getItem(this, c, this.ri)).width;
                            g = e.height + this.layoutSetting.spacingY;
                            if (!(d > 0)) {
                                this.Pn();
                                this.vi(e);
                                return;
                            }
                            if (!this.outerCellsMatrix[j]) {
                                this.outerCellsMatrix[j] = {};
                                this.outerCellsMatrix[j][i] = {};
                                this.outerCellsMatrix[j].itemCount = 0;
                                this.outerCellsMatrix[j].width = 0;
                                this.outerCellsMatrix[j].freeHeight = this.viewSize.height - h;
                            }
                            if (this.outerCellsMatrix[j].freeHeight - g >= 0) {
                                if (this.Re) {
                                    this.Re();
                                }
                                this.outerCellsMatrix[j].width = Math.max(f, this.outerCellsMatrix[j].width);
                                this.Ln(e, i, j, c);
                                this.outerCellsMatrix[j].freeHeight -= g;
                                i += 1;
                                this.outerCellsMatrix[j].itemCount = i;
                                if (++c >= k) {
                                    this.Pn();
                                }
                            } else if (this.outerCellsMatrix[j].freeHeight + this.layoutSetting.spacingY - g >= 0) {
                                if (this.Re) {
                                    this.Re();
                                }
                                this.outerCellsMatrix[j].width = Math.max(f, this.outerCellsMatrix[j].width);
                                this.Ln(e, i, j, c);
                                this.outerCellsMatrix[j].freeHeight -= g;
                                i += 1;
                                this.outerCellsMatrix[j].itemCount = i;
                                c++;
                                this.Pn();
                            } else {
                                var l = this.content.children[this.content.children.length - 1].col;
                                var n = this.cn(l) - this.viewSize.width;
                                d = this.content.x * -1 - n;
                                this.Pn();
                                this.vi(e);
                                j += 1;
                                i = 0;
                            }
                        }
                    };
                    a.prototype.yn = function (b, c, d, e) {
                        if (!(b < 0)) {
                            for (var f, g, h, i = b, j = this.outerCellsMatrix[i].itemCount - 1; c >= 0;) {
                                g = (f = this.ci.getItem(this, c, this.ri)).width + this.layoutSetting.spacingX;
                                h = f.height;
                                if (!(d < 0)) {
                                    this.Nn();
                                    this.vi(f);
                                    if (e) {
                                        e();
                                    }
                                    return;
                                }
                                if (j >= 0) {
                                    if (this.Re) {
                                        this.Re();
                                    }
                                    this.outerCellsMatrix[i].height = Math.max(h, this.outerCellsMatrix[i].height);
                                    this.Ln(f, i, j, c);
                                    this.outerCellsMatrix[i].freeWidth -= g;
                                    if (c === 0) {
                                        this.contentLayout.paddingTop -= this.outerCellsMatrix[i].height + this.layoutSetting.spacingY;
                                        d = this.content.y - this.contentLayout.paddingTop;
                                    }
                                    j -= 1;
                                    c--;
                                } else {
                                    this.contentLayout.paddingTop -= this.outerCellsMatrix[i].height + this.layoutSetting.spacingY;
                                    d = this.content.y - this.contentLayout.paddingTop;
                                    this.Nn();
                                    this.vi(f);
                                    i -= 1;
                                    j = this.outerCellsMatrix[i].itemCount - 1;
                                }
                            }
                            if (e) {
                                e();
                            }
                        }
                    };
                    a.prototype.wn = function (a, b, c, d) {
                        if (!(a < 0)) {
                            for (var e, f, g, h = this.content.x * -1, i = a, j = this.outerCellsMatrix[i].itemCount - 1; b >= 0;) {
                                f = (e = this.ci.getItem(this, b, this.ri)).width;
                                g = e.height + this.layoutSetting.spacingY;
                                if (!(c < 0)) {
                                    this.Pn();
                                    this.vi(e);
                                    if (d) {
                                        d();
                                    }
                                    return;
                                }
                                if (j >= 0) {
                                    if (this.Re) {
                                        this.Re();
                                    }
                                    this.outerCellsMatrix[i].width = Math.max(f, this.outerCellsMatrix[i].width);
                                    this.Ln(e, j, i, b);
                                    this.outerCellsMatrix[i].freeHeight -= g;
                                    if (b === 0) {
                                        this.contentLayout.paddingLeft -= this.outerCellsMatrix[i].width + this.layoutSetting.spacingX;
                                        c = h - this.contentLayout.paddingLeft;
                                    }
                                    j -= 1;
                                    b--;
                                } else {
                                    this.contentLayout.paddingLeft -= this.outerCellsMatrix[i].width + this.layoutSetting.spacingX;
                                    c = h - this.contentLayout.paddingLeft;
                                    this.Pn();
                                    this.vi(e);
                                    i -= 1;
                                    j = this.outerCellsMatrix[i].itemCount - 1;
                                }
                            }
                            if (d) {
                                d();
                            }
                        }
                    };
                    a.prototype.Nn = function () {
                        for (var a = this.layoutSetting.spacingTop + this.layoutSetting.spacingBottom, b = 0; b < this.outerCellsMatrix.length; b++) {
                            a += this.outerCellsMatrix[b].height;
                            if (b !== this.outerCellsMatrix.length - 1) {
                                a += this.layoutSetting.spacingY;
                            } else if (this.content.height !== a) {
                                this.content.height = a;
                            }
                        }
                    };
                    a.prototype.Pn = function () {
                        for (var a = this.layoutSetting.spacingLeft + this.layoutSetting.spacingRight, b = 0; b < this.outerCellsMatrix.length; b++) {
                            a += this.outerCellsMatrix[b].width;
                            if (b !== this.outerCellsMatrix.length - 1) {
                                a += this.layoutSetting.spacingX;
                            } else if (this.content.width !== a) {
                                this.content.width = a;
                            }
                        }
                    };
                    a.prototype.Ln = function (b, c, d, a) {
                        var e = this.Dn();
                        if (this.vertical) {
                            this.outerCellsMatrix[c][d] = e;
                        } else {
                            this.outerCellsMatrix[d][c] = e;
                        }
                        this.content.addChild(e);
                        e.addChild(b);
                        e.row = c;
                        e.col = d;
                        e.zIndex = a;
                        e.width = b.width;
                        e.height = b.height;
                        this.content.sortAllChildren();
                    };
                    a.prototype.dequeueReusableItem = function (b) {
                        var c;
                        var d = this.nodePools[b];
                        if (d) {
                            if (!(c = d.get())) {
                                var a = this.templates[b];
                                c = cc.instantiate(a);
                            }
                            c.lv_type = b;
                        }
                        return c;
                    };
                    a.prototype.vi = function (b) {
                        var c;
                        var d = b.lv_type;
                        if (d) {
                            c = this.nodePools[d];
                        }
                        if (c) {
                            c.put(b);
                        }
                    };
                    a.prototype.Xe = function (b) {
                        if (this.vertical) {
                            var c = this.en(this.currentIndex);
                            if (this.currentIndex <= b - 1) {
                                this.removeUselessItems(b);
                            } else if (c !== null) {
                                this.isReducingData = true;
                                this.newDataCount = b;
                                this.setMasterControl(true);
                                this.scrollTo(0);
                            } else {
                                this.removeUselessItems(b);
                            }
                        } else {
                            var d = this.en(this.currentIndex);
                            if (this.currentIndex < b - 1) {
                                this.removeUselessItems(b);
                            } else if (d !== null) {
                                this.isReducingData = true;
                                this.stopAutoScroll();
                                this.setMasterControl(true);
                                this.scrollTo(0);
                            } else {
                                this.removeUselessItems(b);
                            }
                        }
                    };
                    a.prototype.Ze = function () {
                        if (this.vertical) {
                            if (!this.content.children.length) {
                                this.in(0, 0, this.viewSize.height);
                                return;
                            }
                            var a = (g = this.content.children[this.content.children.length - 1]).row;
                            var b = a - 1;
                            if (b < 0) {
                                b = 0;
                            }
                            var c = this.nn(b) - this.viewSize.height;
                            var d = g.zIndex;
                            var e = this.content.y - c;
                            var f = (j = this.ci.getItem(this, d + 1, this.ri)).width + this.layoutSetting.spacingX;
                            this.vi(j);
                            if (this.outerCellsMatrix[a].freeWidth - f >= 0) {
                                this.An(a, this.outerCellsMatrix[a].itemCount, d + 1, e);
                            } else if (this.outerCellsMatrix[a].freeWidth + this.layoutSetting.spacingX - f >= 0) {
                                this.An(a, this.outerCellsMatrix[a].itemCount, d + 1, e);
                            }
                            this.setMasterControl(false);
                        } else {
                            if (!this.content.children.length) {
                                this.sn(0, 0, this.viewSize.width);
                                return;
                            }
                            var g;
                            var h = (g = this.content.children[this.content.children.length - 1]).col;
                            var i = h - 1;
                            if (i < 0) {
                                i = 0;
                            }
                            c = this.cn(i) - this.viewSize.width;
                            var j;
                            var k = g.zIndex;
                            var l = this.content.x * -1 - c;
                            var n = (j = this.ci.getItem(this, k + 1, this.ri)).height + this.layoutSetting.spacingY;
                            this.vi(j);
                            if (this.outerCellsMatrix[h].freeHeight - n >= 0) {
                                this.Hn(this.outerCellsMatrix[k].itemCount, h, k + 1, l);
                            } else if (this.outerCellsMatrix[h].freeWidth + this.layoutSetting.spacingX - n >= 0) {
                                this.Hn(this.outerCellsMatrix[h].itemCount, h, k + 1, l);
                            }
                            this.setMasterControl(false);
                        }
                    };
                    a.prototype.reloadCurrentData = function (b) {
                        if (this.content.children.length) {
                            for (var c = 0; c < this.content.children.length; c++) {
                                this.vi(this.content.children[c].children[0]);
                                var d = this.ci.getItem(this, this.content.children[c].zIndex, this.ri);
                                this.content.children[c].addChild(d);
                                this.content.sortAllChildren();
                            }
                        }
                        if (b) {
                            b();
                        }
                    };
                    a.prototype.tn = function (a) {
                        var b = a;
                        if (b !== null && b.row !== null && b.col !== null) {
                            if (this.vertical) {
                                this.outerCellsMatrix[b.row][b.col] = null;
                            } else {
                                this.outerCellsMatrix[b.col][b.row] = null;
                            }
                            if (b.children.length) {
                                this.vi(b.children[0]);
                            }
                            this.M.put(b);
                            this.content.sortAllChildren();
                        }
                    };
                    a.prototype.Dn = function () {
                        if (this.M) {
                            if (this.M.size()) {
                                return this.M.get();
                            } else {
                                return new cc.Node();
                            }
                        } else {
                            this.M = new cc.NodePool();
                            return new cc.Node();
                        }
                    };
                    a.prototype.bi = function (b, c, d, e, f) {
                        if (e === undefined) {
                            e = 1;
                        }
                        if (i(cc.v2(b, 0), cc.v2(c, 0)) <= 1) {
                            this.Wn(f);
                            return c;
                        }
                        this.Ti("scrolling");
                        var g = b + (d *= e) * (c - b);
                        if (b >= c) {
                            if (g <= c) {
                                this.Wn(f);
                                g = c;
                            }
                        } else if (g >= c) {
                            this.Wn(f);
                            g = c;
                        }
                        return g;
                    };
                    a.prototype.Wn = function (b) {
                        var c = this;
                        if (this.isReducingData) {
                            this.isReducingData = false;
                            this.removeUselessItems(this.newDataCount, function () {
                                c.setMasterControl(false);
                                c.setSnapDone(true);
                                c.stopAutoScroll();
                                c.Ti("scroll-ended");
                                if (c.currentIndex === null) {
                                    var a = c.ln();
                                    c.currentIndex = c.outerCellsMatrix[a][0].zIndex;
                                }
                                if (c.snapFinish) {
                                    c.snapFinish(c.currentIndex);
                                }
                                if (b) {
                                    b();
                                }
                            });
                        } else {
                            this.setMasterControl(false);
                            this.setSnapDone(true);
                            this.stopAutoScroll();
                            this.Ti("scroll-ended");
                            if (this.currentIndex === null) {
                                var d = this.ln();
                                this.currentIndex = this.outerCellsMatrix[d][0].zIndex;
                            }
                            if (this.snapFinish) {
                                this.snapFinish(this.currentIndex);
                            }
                            if (b) {
                                b();
                            }
                        }
                    };
                    a.prototype.Un = function (b) {
                        for (var c = 0, d = 0; d <= b; d++) {
                            if (b === d) {
                                return c;
                            }
                            c += this.outerCellsMatrix[d].itemCount;
                        }
                    };
                    a.prototype.en = function (b) {
                        for (var c = this.outerCellsMatrix.length - 1, d = 0; d <= c; d++) {
                            if (!((b -= this.outerCellsMatrix[d].itemCount) >= 0)) {
                                return d;
                            }
                            if (d === c) {
                                return null;
                            }
                        }
                    };
                    a.prototype.destroy = function () {
                        this.hi();
                        c.prototype.destroy.call(this);
                    };
                    a.prototype.di = function () {
                        this.content.on(cc.Node.EventType.POSITION_CHANGED, this.rn, this);
                        if (this.autoSnap) {
                            this.node.on("scroll-ended", this.Cn, this);
                        }
                        this.node.on(cc.Node.EventType.SIZE_CHANGED, this.ui, this);
                    };
                    a.prototype.hi = function () {
                        this.content.off(cc.Node.EventType.POSITION_CHANGED, this.rn, this);
                        if (this.autoSnap) {
                            this.node.off("scroll-ended", this.Cn, this);
                        }
                        this.node.off(cc.Node.EventType.SIZE_CHANGED, this.ui, this);
                    };
                    a.prototype.$e = function () {
                        this.vn = 0;
                        this.mn = 0;
                        this.bn = 0;
                        this.gn = 0;
                        this.xn = [];
                        this.Fn = [];
                        this.Vn = 0;
                        this.Hi = false;
                        this.zn = false;
                        this.qn = false;
                        this.Jn = cc.v2(0, 0);
                        this.Kn = cc.v2(0, 0);
                        this.Qn = 0;
                        this.Yn = 0;
                        this.Xn = false;
                        this.Zn = false;
                        this.$n = cc.v2(0, 0);
                        this.io = cc.v2(0, 0);
                        this.so = true;
                        this.Di = false;
                        this.Ui = 0;
                        this.eo = false;
                        this.no = 0;
                        this.oo = false;
                        this.co = false;
                    };
                    a.prototype.update = function (a) {
                        if (!this.pauseUpdate) {
                            if (this.snapPause) {
                                this.setSnapDone(true);
                                this.stopAutoScroll();
                                return;
                            }
                            if (!this.snapDone) {
                                if (!this.content.children.length) {
                                    this.content.setPosition(cc.v2(0, 0));
                                    this.setSnapDone(true);
                                    return;
                                }
                                if (!(this.suddenStopIndex && this.content.children[this.content.children.length - 1].zIndex >= this.suddenStopIndex)) {
                                    this.stopAutoScroll();
                                    if (this.vertical) {
                                        this.content.y = this.bi(this.content.y, this.target, a, this.lerpSpeed);
                                    } else {
                                        this.content.x = this.bi(this.content.x * -1, this.target, a, this.lerpSpeed) * -1;
                                    }
                                    return;
                                }
                                this.setMasterControl(true);
                                this.scrollTo(this.suddenStopIndex);
                                this.suddenStopIndex = null;
                            }
                            c.prototype.update.call(this, a);
                        }
                    };
                    a.prototype.Si = function (a, b) {
                        this.elastic = this.originalElastic;
                        this.touchPos = a.touch.getLocation();
                        if (!this.hn && this.content.children.length) {
                            this.unschedule(this.Wi);
                            this.Di = false;
                            this.snapPause = true;
                            this.setSnapDone(true);
                            c.prototype.Si.call(this, a, b);
                        }
                    };
                    a.prototype.tt = function (a, b) {
                        this.elastic = this.originalElastic;
                        if (!this.hn && this.content.children.length) {
                            if (this.vertical) {
                                this.ho(a);
                            } else {
                                this.ro(a);
                            }
                            if (!this.pauseUpdate) {
                                c.prototype.tt.call(this, a, b);
                            }
                        }
                    };
                    a.prototype.ao = function () {
                        if (this.Ri && this.Ri.getScrollY() > 0) {
                            if (this.xe && this.pullDir === 2) {
                                this.xe(0);
                            }
                            if (this.De && this.dn() <= this.vn) {
                                if (!this.pauseUpdate) {
                                    this.beginPullPos = cc.v2(0, this.Ri.getScrollY());
                                }
                                if ((a = this.beginPullPos.y - this.Ri.getScrollY()) > 0) {
                                    a = 0;
                                }
                                this.De(Math.abs(a));
                                this.pauseUpdate = true;
                                this.pullDir = 1;
                            }
                            if (this.content.children[0].zIndex > 0) {
                                this.elastic = true;
                            }
                        } else if (this.Ri && this.Ri.getScrollY() < 0) {
                            var a;
                            if (this.De && this.pullDir === 1) {
                                this.De(0);
                            }
                            if (this.xe && Math.round(this._n()) >= Math.round(this.mn)) {
                                if (!(this.content.children.length && this.content.children[this.content.children.length - 1].zIndex !== this.Je - 1)) {
                                    if (!this.pauseUpdate) {
                                        this.beginPullPos = cc.v2(0, this.Ri.getScrollY());
                                    }
                                    if ((a = this.beginPullPos.y - this.Ri.getScrollY()) < 0) {
                                        a = 0;
                                    }
                                    this.xe(a);
                                    this.pauseUpdate = true;
                                    this.pullDir = 2;
                                }
                            }
                            if (this.content.children[this.content.children.length - 1].zIndex < this.Je - 1) {
                                this.elastic = true;
                            }
                        }
                    };
                    a.prototype.Pi = function () {
                        if (this.Ri && this.Ri.getScrollY() > 0) {
                            if (this.xe && this.pullDir === 2) {
                                this.Ue(0);
                            }
                            if (this.Ee && this.Sn() <= this.gn) {
                                if (!this.pauseUpdate) {
                                    this.beginPullPos = cc.v2(this.Ri.getScrollY(), 0);
                                }
                                if ((a = this.beginPullPos.x - this.Ri.getScrollY()) > 0) {
                                    a = 0;
                                }
                                this.Ee(Math.abs(a));
                                this.pauseUpdate = true;
                                this.pullDir = 1;
                            }
                            if (this.content.children[0].zIndex > 0) {
                                this.elastic = true;
                            }
                        } else if (this.Ri && this.Ri.getScrollY() < 0) {
                            var a;
                            if (this.De && this.pullDir === 1) {
                                this.Ee(0);
                            }
                            if (this.Ue && this.pn() >= this.bn) {
                                if (!(this.content.children.length && this.content.children[this.content.children.length - 1].zIndex !== this.Je - 1)) {
                                    if (!this.pauseUpdate) {
                                        this.beginPullPos = cc.v2(this.Ri.getScrollY(), 0);
                                    }
                                    if ((a = this.beginPullPos.x - this.Ri.getScrollY()) < 0) {
                                        a = 0;
                                    }
                                    this.Ue(a);
                                    this.pauseUpdate = true;
                                    this.pullDir = 2;
                                }
                            }
                            if (this.content.children[this.content.children.length - 1].zIndex < this.Je - 1) {
                                this.elastic = true;
                            }
                        }
                    };
                    a.prototype.ho = function (a) {
                        if (this.touchPos.y > a.touch.getLocation().y) {
                            if (this.xe && this.pullDir === 2) {
                                this.xe(0);
                            }
                            if (this.De && this.dn() <= this.vn) {
                                if (!this.pauseUpdate) {
                                    this.beginPullPos = a.touch.getLocation();
                                }
                                if ((b = this.beginPullPos.y - a.touch.getLocation().y) < 0) {
                                    b = 0;
                                }
                                this.De(b);
                                this.pauseUpdate = true;
                                this.pullDir = 1;
                            }
                            if (this.content.children[0].zIndex > 0) {
                                this.elastic = true;
                            }
                        } else if (this.touchPos.y < a.touch.getLocation().y) {
                            var b;
                            if (this.De && this.pullDir === 1) {
                                this.De(0);
                            }
                            if (this.xe && Math.round(this._n()) >= Math.round(this.mn)) {
                                if (!(this.content.children.length && this.content.children[this.content.children.length - 1].zIndex !== this.Je - 1)) {
                                    if (!this.pauseUpdate) {
                                        this.beginPullPos = a.touch.getLocation();
                                    }
                                    if ((b = this.beginPullPos.y - a.touch.getLocation().y) > 0) {
                                        b = 0;
                                    }
                                    this.xe(Math.abs(b));
                                    this.pauseUpdate = true;
                                    this.pullDir = 2;
                                }
                            }
                            if (this.content.children[this.content.children.length - 1].zIndex < this.Je - 1) {
                                this.elastic = true;
                            }
                        }
                    };
                    a.prototype.ro = function (a) {
                        if (this.touchPos.x > a.touch.getLocation().x) {
                            if (this.Ue && this.pullDir === 1) {
                                this.Ue(0);
                            }
                            if (this.Ee && this.Sn() <= this.gn) {
                                if (!(this.content.children.length && this.content.children[this.content.children.length - 1].zIndex !== this.Je - 1)) {
                                    if (!this.pauseUpdate) {
                                        this.beginPullPos = a.touch.getLocation();
                                    }
                                    if ((b = this.beginPullPos.x - a.touch.getLocation().x) < 0) {
                                        b = 0;
                                    }
                                    this.Ee(b);
                                    this.pauseUpdate = true;
                                    this.pullDir = 2;
                                }
                            }
                            if (this.content.children[this.content.children.length - 1].zIndex < this.Je - 1) {
                                this.elastic = true;
                            }
                        } else if (this.touchPos.x < a.touch.getLocation().x) {
                            var b;
                            if (this.Ee && this.pullDir === 2) {
                                this.Ee(0);
                            }
                            if (this.Ue && this.pn() >= this.bn) {
                                if (!this.pauseUpdate) {
                                    this.beginPullPos = a.touch.getLocation();
                                }
                                if ((b = this.beginPullPos.x - a.touch.getLocation().x) > 0) {
                                    b = 0;
                                }
                                this.Ue(Math.abs(b));
                                this.pauseUpdate = true;
                                this.pullDir = 1;
                            }
                            if (this.content.children[0].zIndex > 0) {
                                this.elastic = true;
                            }
                        }
                    };
                    a.prototype.yi = function (b, d) {
                        if (i(this.touchPos, b.touch.getLocation()) >= 50) {
                            b.stopPropagationImmediate();
                        }
                        if (!this.hn && this.content.children.length) {
                            if (this.pauseUpdate) {
                                if (this.vertical) {
                                    var e = this.beginPullPos.y - b.touch.getLocation().y;
                                    if (this.We && this.pullDir === 1) {
                                        if (e < 0) {
                                            e = 0;
                                        }
                                        this.We(e);
                                    } else if (this.Fe && this.pullDir === 2) {
                                        if (e > 0) {
                                            e = 0;
                                        }
                                        this.Fe(Math.abs(e));
                                    }
                                } else {
                                    e = this.beginPullPos.x - b.touch.getLocation().x;
                                    if (this.je && this.pullDir === 1) {
                                        if (e > 0) {
                                            e = 0;
                                        }
                                        this.je(Math.abs(e));
                                    } else if (this.ke && this.pullDir === 2) {
                                        if (e < 0) {
                                            e = 0;
                                        }
                                        this.ke(e);
                                    }
                                }
                                this.pullDir = null;
                            }
                            this.snapPause = false;
                            this.requestSnap = true;
                            c.prototype.yi.call(this, b, d);
                        }
                    };
                    a.prototype.Ii = function (b, d) {
                        if (i(this.touchPos, b.touch.getLocation()) >= 50) {
                            b.stopPropagationImmediate();
                        }
                        if (!this.hn && this.content.children.length) {
                            if (this.pauseUpdate) {
                                if (this.vertical) {
                                    var e = this.beginPullPos.y - b.touch.getLocation().y;
                                    if (this.We && this.pullDir === 1) {
                                        if (e < 0) {
                                            e = 0;
                                        }
                                        this.We(e);
                                    } else if (this.Fe && this.pullDir === 2) {
                                        if (e > 0) {
                                            e = 0;
                                        }
                                        this.Fe(Math.abs(e));
                                    }
                                } else {
                                    e = this.beginPullPos.x - b.touch.getLocation().x;
                                    if (this.je && this.pullDir === 1) {
                                        if (e > 0) {
                                            e = 0;
                                        }
                                        this.je(Math.abs(e));
                                    } else if (this.ke && this.pullDir === 2) {
                                        if (e < 0) {
                                            e = 0;
                                        }
                                        this.ke(e);
                                    }
                                }
                                this.pullDir = null;
                            }
                            this.snapPause = false;
                            this.requestSnap = true;
                            c.prototype.Ii.call(this, b, d);
                        }
                    };
                    a.prototype.Li = function () {
                        this.snapPause = true;
                        this.setSnapDone(true);
                    };
                    a.prototype.Ei = function () {
                        if (!this.hn) {
                            if (this.pauseUpdate) {
                                if (this.vertical) {
                                    var a = this.beginPullPos.y - this.Ri.getScrollY();
                                    if (this.We && this.pullDir === 1) {
                                        if (a > 0) {
                                            a = 0;
                                        }
                                        this.We(Math.abs(a));
                                    } else if (this.Fe && this.pullDir === 2) {
                                        if (a < 0) {
                                            a = 0;
                                        }
                                        this.Fe(a);
                                    }
                                } else {
                                    a = this.beginPullPos.x - this.Ri.getScrollY();
                                    if (this.je && this.pullDir === 1) {
                                        if (a > 0) {
                                            a = 0;
                                        }
                                        this.je(Math.abs(a));
                                    } else if (this.ke && this.pullDir === 2) {
                                        if (a < 0) {
                                            a = 0;
                                        }
                                        this.ke(a);
                                    }
                                }
                                this.pullDir = null;
                            }
                            this.snapPause = false;
                            this.requestSnap = true;
                            if (this.autoSnap) {
                                this.Cn();
                            }
                            this.Ri = undefined;
                        }
                    };
                    a.prototype.ki = function (b, c) {
                        this.elastic = this.originalElastic;
                        if (!this.hn && this.content.children.length && this.enabledInHierarchy && !this.uo(b, c)) {
                            this.Ri = b;
                            var d = cc.v2(0, 0);
                            if (this.vertical) {
                                d = cc.v2(0, b.getScrollY() * -0.1);
                                this.ao();
                            } else if (this.horizontal) {
                                d = cc.v2(b.getScrollY() * -0.1, 0);
                                this.Pi();
                            }
                            this.Ui = 0;
                            this.ji(d);
                            if (!this.Di) {
                                this.Oi();
                                this.schedule(this.Wi, 1 / 60);
                                this.Di = true;
                                this.Li();
                            }
                            this.Bi(b);
                        }
                    };
                    a.prototype.Wi = function (a) {
                        if (!this.hn) {
                            var c = this.xi();
                            if (!b(c, cc.v2(0, 0), 0.0001)) {
                                this.Fi();
                                this.unschedule(this.Wi);
                                this.Di = false;
                                this.Ei();
                                return;
                            }
                            this.Ui += a;
                            if (this.Ui > 0.1) {
                                this.Vi();
                                this.unschedule(this.Wi);
                                this.Di = false;
                                this.Ei();
                            }
                        }
                    };
                    a.prototype.lo = function (a) {
                        var b = this.fo();
                        var c = b ? 0.05 : 1;
                        this.Yn += a * (1 / c);
                        var d;
                        var e = Math.min(1, this.Yn / this.Qn);
                        if (this.qn) {
                            d = e;
                            e = (d -= 1) * d * d * d * d + 1;
                        }
                        var f = this.Jn.add(this.Kn.mul(e));
                        var g = e > 0.5;
                        if (Math.abs(e - 1) <= this.getScrollEndedEventTiming() && !this.eo) {
                            this.Ti("scroll-ended-with-threshold");
                            this.eo = true;
                        }
                        if (this.elastic) {
                            var h = f.sub(this.$n);
                            if (b) {
                                h = h.mul(c);
                            }
                            f = this.$n.add(h);
                        } else {
                            var i = f.sub(this.getContentPosition());
                            var j = this.xi(i);
                            if (!j.fuzzyEquals(cc.v2(0, 0), 0.0001)) {
                                f = f.add(j);
                                g = true;
                            }
                        }
                        if (g) {
                            this.zn = false;
                        }
                        var l = f.sub(this.getContentPosition());
                        this.do(this.vo(l), g);
                        this.Ti("scrolling");
                        if (!this.zn) {
                            this.oo = false;
                            this.co = false;
                            this.Ti("scroll-ended");
                        }
                    };
                    a.prototype.uo = function () {
                        return false;
                    };
                    a.prototype.Fi = function () {
                        if (!this._o() && this.inertia) {
                            var a = this.mo();
                            if (!b(a, cc.v2(0, 0), 0.0001) && this.brake < 1) {
                                this.po(a);
                            } else if (this.autoSnap) {
                                this.Cn();
                            }
                        }
                        this.Vi();
                    };
                    return __decorate([g], a);
                }(e.default);
                c.default = h;
                cc._RF.pop();
            }
        }, {
            ScrollViewEx: "ScrollViewEx"
        }],
        HitPassThrough: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "c55eeQvpvBJQ70BFU5konXG", "HitPassThrough")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e;
                var f = cc._decorator;
                var g = f.ccclass;
                var h = f.property;
                (function (a) {
                    a.Qi = "_hitTest";
                })(e || (e = {}));
                var i = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.passPoint = cc.v2(0, 0);
                        b.passSize = cc.size(0, 0);
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.onEnable = function () {
                        var a = this;
                        this.bo = this.node[e.Qi];
                        this.node[e.Qi] = function (b, c) {
                            if (!a.bo.call(this, b, c)) {
                                return false;
                            }
                            for (var d = a.passPoint.x + this.x - a.passSize.width / 2, e = a.passPoint.y + this.y - a.passSize.height / 2, f = this.getParent(); f !== null; f = f.parent) {
                                d += f.x;
                                e += f.y;
                            }
                            var g = a.passSize.width;
                            var h = a.passSize.height;
                            var i = b.x - d;
                            var j = d + g - b.x;
                            var l = e + h - b.y;
                            var k = b.y - e;
                            return !(i >= 0 && j >= 0 && l >= 0 && k >= 0);
                        };
                    };
                    b.prototype.onDisable = function () {
                        this.node[e.Qi] = this.bo;
                        this.bo = undefined;
                    };
                    __decorate([h(cc.Vec2)], b.prototype, "passPoint", undefined);
                    __decorate([h(cc.Size)], b.prototype, "passSize", undefined);
                    return __decorate([g], b);
                }(cc.Component);
                c.default = i;
                cc._RF.pop();
            }
        }, {}],
        IdleState: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "9928eUmiH5DjJzRecinmoRP", "IdleState")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("AutoSpinHandler");
                var f = a("SlotGameConstants");
                var g = a("SlotAnalyticsEnum");
                var h = a("SystemFeatureHandler");
                var i = a("AnalyticsHelper");
                var j = a("GameEventHandler");
                var k = a("ButtonHitTest");
                var l = a("SlotDependencyManager");
                var n = a("SettingMenuHelper");
                var o = a("Utils");
                var m = a("JakeSlotGameTemplate");
                var p = a("SpinButtonController");
                var q = function () {
                    function a(a, b, c, d) {
                        if (d === undefined) {
                            d = f.DEFAULT_AUTO_SPIN_DELAY_TIME;
                        }
                        this.name = "Idle";
                        this.dataSource = a;
                        this.generalControllers = b.generalControllers;
                        this.finalCallback = c;
                        this.So = {
                            dataSource: this.dataSource,
                            autoSpinCount: e.getAutoSpinCount(),
                            walletHelper: l.walletHelper,
                            settingMenuHelper: n.settingMenuHelper,
                            exitAutoSpinHandler: this.Co.bind(this),
                            callback: this.tryAutoSpin.bind(this)
                        };
                        this.yo = d;
                    }
                    a.prototype.run = function () {
                        var a = this.Mo();
                        h.handleSystemEvent(a);
                    };
                    a.prototype.destroy = function () {
                        this.additionalDestroyCleanups();
                        this.disableSpinAction();
                        this.Ao();
                        this.dataSource = undefined;
                        this.finalCallback = undefined;
                        this.generalControllers = undefined;
                    };
                    a.prototype.tryAutoSpin = function () {
                        var a = this;
                        var b = this.generalControllers.spinButtonController;
                        this.Io();
                        if (b.isAutoSpin()) {
                            var c = this.dataSource;
                            var d = c.playerModel.balance;
                            var f = c.transactionModel.accumulatedWinAmount;
                            var g = n.settingMenuHelper.isBalanceHitTargetInAutoSpinMode(f, d);
                            if (!e.shouldAutoSpin() || g) {
                                this.Co();
                                this.wo();
                            } else {
                                var h = this.Oo(this.Ho.bind(this));
                                this.Bo(function () {
                                    a.enableSpinAction();
                                    if (h) {
                                        h();
                                    }
                                });
                            }
                        } else {
                            this.wo();
                        }
                    };
                    a.prototype.Io = function () {
                        j.setGamePauseEventCallback(this.name, this.Go.bind(this));
                    };
                    a.prototype.Go = function () {
                        if (this.No) {
                            this.Ao();
                        }
                        j.emitGameNotifyPauseEvent();
                    };
                    a.prototype.To = function () {
                        j.removeGamePauseEventCallback(this.name);
                    };
                    a.prototype.Bo = function (a) {
                        j.setGameResumeEventCallback(this.name, a);
                    };
                    a.prototype.Oo = function (a) {
                        var b = j.isGameStatePaused() ? 1 : 0;
                        return function () {
                            if (a) {
                                a(b);
                            }
                        };
                    };
                    a.prototype.Po = function () {
                        j.removeGameResumeEventCallback(this.name);
                    };
                    a.prototype.wo = function () {
                        var a = this.generalControllers.spinButtonController;
                        a.enableButton();
                        a.idle();
                        this.onStateFullyIdle();
                        this.Ro();
                        this.enableAvailableActions();
                        this.Bo(this.enableSpinAction.bind(this));
                    };
                    a.prototype.Lo = function (a) {
                        if (this.generalControllers.spinButtonController.isAutoSpin()) {
                            this.Co();
                            this.wo();
                        } else {
                            this.Eo(a);
                        }
                    };
                    a.prototype.ko = function (a) {
                        if (!m.JSGTConfig.spaceBarInterrupterEnabled && k.buttonHitTest(this.generalControllers.spinButtonController.node)) {
                            switch (a.keyCode) {
                                case f.SPIN_BUTTON_TRIGGER_KEY:
                                    this.Lo(g.SpinTrigger.SPACEBAR);
                            }
                        }
                    };
                    a.prototype.spinFreeCredit = function (a) {
                        var b = this.generalControllers.spinButtonController;
                        n.settingMenuHelper.setWinAmount(0);
                        l.walletHelper.spin();
                        if (b.isAutoSpin()) {
                            e.decrementAutoSpinCount(b);
                        }
                        this.Is(a);
                    };
                    a.prototype.spinCashCredit = function (a) {
                        var b = this.generalControllers.spinButtonController;
                        this.Uo(a);
                        if (b.isAutoSpin()) {
                            e.decrementAutoSpinCount(b);
                        }
                        this.Is(a);
                    };
                    a.prototype.spinBonusCredit = function (a) {
                        this.spinCashCredit(a);
                    };
                    a.prototype.spinInvalidBet = function () {
                        this.Co();
                        this.wo();
                    };
                    a.prototype.spinInsufficientCredit = function (a) {
                        this.spinInvalidBet(a);
                    };
                    a.prototype.Eo = function (a) {
                        var b = this;
                        var c = this.generalControllers.spinButtonController;
                        if (!(c && c.mode === p.SpinButtonMode.DISABLED)) {
                            this.preStartSpinAction(function () {
                                h.checkSpinValidity({
                                    getCostPerSpinFunction: b.getCostPerSpin.bind(b, a),
                                    dataSource: b.dataSource,
                                    walletHelper: l.walletHelper,
                                    callback: function (c) {
                                        switch (c) {
                                            case g.SpinCredits.FREE_GAME:
                                                b.spinFreeCredit(a);
                                                break;
                                            case g.SpinCredits.CASH:
                                                b.spinCashCredit(a);
                                                break;
                                            case g.SpinCredits.BONUS:
                                                b.spinBonusCredit(a);
                                                break;
                                            case g.SpinCredits.BET_INVALID:
                                                b.spinInvalidBet(a);
                                                break;
                                            case g.SpinCredits.INSUFFICIENT:
                                                b.spinInsufficientCredit(a);
                                        }
                                    }
                                });
                            });
                        }
                    };
                    a.prototype.Ao = function () {
                        var a = this.No;
                        this.No = undefined;
                        if (a) {
                            a();
                        }
                    };
                    a.prototype.Is = function (a) {
                        var b = this;
                        if (!this.dataSource.isGameReplaying) {
                            var c = n.settingMenuHelper.turboSpinOn ? "Turbo" : "Normal";
                            var d = a === g.SpinTrigger.AUTOSPIN ? "Auto" : "Manual";
                            var e = {
                                actionName: "" + c + d + "Spin"
                            };
                            i.sendAnalyticsEvent(e);
                        }
                        this.disableAvailableActions();
                        this.jo();
                        this.disableSpinAction();
                        this.preExitStateCleanups();
                        this.To();
                        this.Po();
                        this.onExitState(function () {
                            var a = b.finalCallback;
                            b.finalCallback = undefined;
                            b.destroy();
                            o.deferCallback(true)(function () {
                                o.deferCallback(true)(a);
                            });
                        });
                    };
                    a.prototype.onStateFullyIdle = function () { };
                    a.prototype.additionalDestroyCleanups = function () { };
                    a.prototype.preExitStateCleanups = function () { };
                    a.prototype.enableAvailableActions = function () { };
                    a.prototype.disableAvailableActions = function () { };
                    a.prototype.preStartSpinAction = function (a) {
                        if (a) {
                            a();
                        }
                    };
                    a.prototype.defineSystemEventConfigParam = function () {
                        return {};
                    };
                    a.prototype.onExitState = function (a) {
                        a();
                    };
                    a.prototype.Mo = function () {
                        var a = this.defineSystemEventConfigParam();
                        return Object.assign(this.So, a);
                    };
                    a.prototype.Ro = function () {
                        n.settingMenuHelper.autoSpinCallback = this.Do.bind(this);
                        n.settingMenuHelper.setAllButtonsInteractable(true);
                    };
                    a.prototype.jo = function () {
                        n.settingMenuHelper.autoSpinCallback = undefined;
                        n.settingMenuHelper.setAllButtonsInteractable(false);
                    };
                    a.prototype.enableSpinAction = function () {
                        this.generalControllers.spinButtonController.setOnClickCallback(this.Lo.bind(this));
                        if (!m.JSGTConfig.spaceBarInterrupterEnabled) {
                            cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.ko, this);
                        }
                    };
                    a.prototype.disableSpinAction = function () {
                        this.generalControllers.spinButtonController.clearOnClickCallback();
                        if (!m.JSGTConfig.spaceBarInterrupterEnabled) {
                            cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.ko, this);
                        }
                    };
                    a.prototype.Do = function () {
                        var a = this;
                        var b = n.settingMenuHelper.autoSpinCount;
                        var c = n.settingMenuHelper.singleWinAmount;
                        var d = n.settingMenuHelper.balanceAmountMoreThan;
                        var f = n.settingMenuHelper.balanceAmountLessThan;
                        var g = {
                            count: b,
                            single_win: c,
                            increment: d,
                            decrement: f
                        };
                        i.sendEvent(shell.ga.CATEGORY_GAME, shell.ga.EVENT_SLOT_AUTO_SPIN, g);
                        this.jo();
                        this.disableAvailableActions();
                        e.startAutoSpin(b, this.generalControllers.spinButtonController, function () {
                            a.Bo(a.Ho.bind(a, a.yo));
                        });
                    };
                    a.prototype.Co = function () {
                        var a = this.generalControllers.spinButtonController;
                        e.exitAutoSpin(a);
                        a.idle();
                        this.Ao();
                        this.enableAvailableActions();
                        this.Ro();
                        this.Bo(this.enableSpinAction.bind(this));
                    };
                    a.prototype.Ho = function (a) {
                        var b = this.dataSource.transactionModel.accumulatedWinAmount > 0 ? 0 : this.yo;
                        b = a || b;
                        this.No = o.delayCallback(b)(this.Eo.bind(this, g.SpinTrigger.AUTOSPIN));
                    };
                    a.prototype.getCostPerSpin = function (a) {
                        if (a === g.SpinTrigger.FEATURE_BUY) {
                            throw Error("overwrite getCostPerSpin function for support feature buy spin");
                        }
                        var b = this.dataSource.systemModel.maxLineNumber;
                        var c = this.dataSource.transactionModel;
                        var d = c.betSizeValue;
                        var e = c.betLevelValue;
                        return o.toDecimalWithExp(d * e * b, 2);
                    };
                    a.prototype.Uo = function (a) {
                        if (a === undefined) {
                            throw Error("trigger cannot be undefined");
                        }
                        var b = this.getCostPerSpin(a);
                        n.settingMenuHelper.setWinAmount(0);
                        l.walletHelper.spin(b);
                    };
                    return a;
                }();
                c.default = q;
                cc._RF.pop();
            }
        }, {
            AnalyticsHelper: "AnalyticsHelper",
            AutoSpinHandler: "AutoSpinHandler",
            ButtonHitTest: "ButtonHitTest",
            GameEventHandler: "GameEventHandler",
            JakeSlotGameTemplate: "JakeSlotGameTemplate",
            SettingMenuHelper: "SettingMenuHelper",
            SlotAnalyticsEnum: "SlotAnalyticsEnum",
            SlotDependencyManager: "SlotDependencyManager",
            SlotGameConstants: "SlotGameConstants",
            SpinButtonController: "SpinButtonController",
            SystemFeatureHandler: "SystemFeatureHandler",
            Utils: "Utils"
        }],
        InfoboardController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "d9237cyY11EsrptxXomkPBH", "InfoboardController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.InfoboardBgState = c.InfoBoardState = undefined;
                var e;
                var f = a("AnalyticsHelper");
                var g = a("Utils");
                var h = a("SkipHandler");
                var i = a("InfoboardMessageController");
                var j = a("SymbolImageHandler");
                var l = a("GeneralAudioConstant");
                var n = a("AudioManager");
                var o = a("GConstants");
                (function (a) {
                    a[a.SHOWING_MESSAGE = 0] = "SHOWING_MESSAGE";
                    a[a.SHOWING_WIN = 1] = "SHOWING_WIN";
                    a[a.SHOWING_ROLL = 2] = "SHOWING_ROLL";
                    a[a.SHOWING_EVENT = 3] = "SHOWING_EVENT";
                })(e = c.InfoBoardState || (c.InfoBoardState = {}));
                (function (a) {
                    a[a.LEVEL_ONE = 0] = "LEVEL_ONE";
                    a[a.LEVEL_TWO = 1] = "LEVEL_TWO";
                })(c.InfoboardBgState || (c.InfoboardBgState = {}));
                var k = cc._decorator;
                var m = k.ccclass;
                var p = k.property;
                var q = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.numberDisplayNode = undefined;
                        b.winDisplayNode = undefined;
                        b.infoboardMessageController = undefined;
                        b.coins = undefined;
                        b.particle = undefined;
                        b.shine = undefined;
                        b.dispenser = undefined;
                        b.glow = undefined;
                        b.infoboardHolder = undefined;
                        b.level2Infoboard = undefined;
                        b.level3Infoboard = undefined;
                        b.leftMask = undefined;
                        b.rightMask = undefined;
                        b.multiplier = undefined;
                        b.multiplier2 = undefined;
                        b.multiplier2Ten = undefined;
                        b.multiplier2Shine = undefined;
                        b.multiplier2Particle = undefined;
                        b.sparkle = undefined;
                        b.sparkle2 = undefined;
                        b.firstPart = undefined;
                        b.secondPart = undefined;
                        b.symbolSprite = undefined;
                        b.dynamicMessage = undefined;
                        b.message = undefined;
                        b.Wo = [];
                        b.xo = [];
                        b.Fo = undefined;
                        b.Vo = undefined;
                        b.zo = undefined;
                        b.qo = undefined;
                        b.Jo = undefined;
                        b.Ko = undefined;
                        b.Qo = undefined;
                        b.Yo = undefined;
                        b.Xo = {};
                        b.Zo = 0;
                        b.$o = -1;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.init = function () {
                        this.Wo.length = 0;
                        if (shell.isRTLLanguage()) {
                            this.Zo = 1;
                            this.$o = 1;
                            this.dynamicMessage.getComponent(cc.Layout).horizontalDirection = cc.Layout.HorizontalDirection.RIGHT_TO_LEFT;
                        }
                    };
                    b.prototype.destroy = function () {
                        this._t();
                        return a.prototype.destroy.call(this);
                    };
                    Object.defineProperty(b.prototype, "infoboardState", {
                        get: function () {
                            return this.Yo;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype._t = function () {
                        var a = this.Ko;
                        this.Ko = undefined;
                        if (a) {
                            a();
                        }
                        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.quickStopMediumWin, this);
                    };
                    b.prototype.getInfoboardWorldPosition = function () {
                        return this.node.convertToWorldSpaceAR(cc.v2(0, 0));
                    };
                    b.prototype.setLocalizedSprites = function (a) {
                        this.Wo.length = 0;
                        this.xo.length = 0;
                        this.Wo.push(a.getSpriteFrame("info_main1"), a.getSpriteFrame("info_main2"), a.getSpriteFrame("info_main3"));
                        this.Fo = a.getSpriteFrame("info_bns");
                        this.Vo = a.getSpriteFrame("info_respin1");
                        this.zo = a.getSpriteFrame("info_respin2");
                        this.firstPart.spriteFrame = this.Vo;
                        this.secondPart.spriteFrame = this.zo;
                    };
                    b.prototype.setLocalizedWinAndTotalWinSprites = function (a) {
                        var b = a.getSpriteFrame("info_win");
                        var c = a.getSpriteFrame("info_tw");
                        this.infoboardMessageController.setLocalizedSpriteFrame(b, c);
                    };
                    b.prototype.setThreshold = function (a) {
                        this.Xo = a;
                    };
                    b.prototype.playZoom = function () {
                        this.dynamicMessage.stopAllActions();
                        this.dynamicMessage.active = false;
                        this.message.active = true;
                        var a = this.Fo;
                        this.infoboardMessageController.setSprites([a]);
                        if (this.Yo !== e.SHOWING_ROLL) {
                            this.infoboardMessageController.clearNumberRoll();
                        } else if (this.Yo === e.SHOWING_MESSAGE) {
                            this.infoboardMessageController.clear(true);
                        }
                        this.infoboardMessageController.clearDisplayNumber();
                        this.infoboardMessageController.setTotalAndWinText(false, false);
                        this.tc();
                    };
                    b.prototype.playRespin = function (a) {
                        var b = this;
                        if (this.message.active !== false) {
                            this.symbolSprite.spriteFrame = j.symbolImageHandler.symbolImages[a];
                            this.dynamicMessage.active = true;
                            this.message.active = false;
                            this.dynamicMessage.stopAllActions();
                            g.deferCallback()(function () {
                                var a = b.infoboardMessageController.maskNode.width;
                                var c = b.infoboardMessageController.padding;
                                if (b.dynamicMessage.width * b.dynamicMessage.scaleY + c * 2 > a) {
                                    var d = b.$o;
                                    b.dynamicMessage.setAnchorPoint(b.Zo, b.dynamicMessage.anchorY);
                                    b.dynamicMessage.setPosition(cc.v2((a / 2 - c) * d, b.dynamicMessage.y));
                                    b.qo = b.dynamicMessage.position;
                                    var e = b.dynamicMessage.width * b.dynamicMessage.scaleY + c * 2;
                                    var f = cc.delayTime(1.5);
                                    var g = cc.moveBy(e / 130, cc.v2(e * d, 0));
                                    var h = cc.sequence(f, g, cc.callFunc(function () {
                                        b.dynamicMessage.position = b.qo;
                                    })).repeatForever();
                                    b.dynamicMessage.runAction(h);
                                }
                            });
                            this.infoboardMessageController.clear(true);
                            if (this.Yo !== e.SHOWING_ROLL) {
                                this.infoboardMessageController.clearNumberRoll();
                            }
                            this.infoboardMessageController.clearDisplayNumber();
                            this.infoboardMessageController.setTotalAndWinText(false, false);
                            this.tc();
                        }
                    };
                    b.prototype.resetInfoboard = function (a) {
                        this.dynamicMessage.stopAllActions();
                        this.message.active = true;
                        this.dynamicMessage.active = false;
                        var b = a ? this.xo.slice() : this.Wo.slice();
                        this.infoboardMessageController.setSprites(b);
                        if (this.Yo !== e.SHOWING_ROLL) {
                            this.infoboardMessageController.clearNumberRoll();
                        } else if (this.Yo === e.SHOWING_MESSAGE) {
                            this.infoboardMessageController.clear(true);
                        }
                        this.infoboardMessageController.clearDisplayNumber();
                        this.infoboardMessageController.setTotalAndWinText(false, false);
                        this.tc();
                    };
                    b.prototype.resumeInfoboard = function (a) {
                        if (a === undefined) {
                            a = 0;
                        }
                        var b = this.ic;
                        this.ic = undefined;
                        if (b) {
                            b();
                        }
                        if (a > 0) {
                            this.ic = g.delayCallback(a)(this.sc.bind(this));
                        } else {
                            this.sc();
                        }
                    };
                    b.prototype.deactivateInfoboardMessage = function () {
                        this.infoboardMessageController.hideInfoboardMessage();
                    };
                    b.prototype.playWin = function (a, b) {
                        if (b === undefined) {
                            b = false;
                        }
                        var c = this.ic;
                        this.ic = undefined;
                        if (c) {
                            c();
                        }
                        this.infoboardMessageController.showDisplayNumber(a, false);
                        this.infoboardMessageController.setTotalAndWinText(b, !b);
                        this.infoboardMessageController.unscheduleRandomSpriteTips();
                        if (this.Yo === e.SHOWING_MESSAGE) {
                            this.deactivateInfoboardMessage();
                        }
                        this.Yo = e.SHOWING_WIN;
                    };
                    b.prototype.playDynamicWin = function (a, b) {
                        if (b === undefined) {
                            b = false;
                        }
                        this.ec();
                        if (a >= this.Xo.bigWinThreshold) {
                            this.level3Infoboard.active = true;
                            this.level3Infoboard.opacity = 255;
                            this.level2Infoboard.active = false;
                            this.level2Infoboard.opacity = 0;
                            this.leftMask.active = false;
                            this.rightMask.active = false;
                            this.shine.node.position = cc.v3(0, 35);
                            this.shine.node.setScale(3.3, 3.3);
                            this.shine.play("infoboard_c3");
                        } else if (a >= this.Xo.mediumWinThreshold) {
                            this.level2Infoboard.active = true;
                            this.level2Infoboard.opacity = 255;
                            this.level3Infoboard.active = false;
                            this.level3Infoboard.opacity = 0;
                            this.leftMask.active = false;
                            this.rightMask.active = false;
                        } else {
                            this.level2Infoboard.active = false;
                            this.level2Infoboard.opacity = 0;
                            this.level3Infoboard.active = false;
                            this.level3Infoboard.opacity = 0;
                            this.leftMask.active = true;
                            this.rightMask.active = true;
                        }
                        this.playWin(a, b);
                    };
                    b.prototype.playTotalWin = function (a, b) {
                        var c = this.ic;
                        this.ic = undefined;
                        if (c) {
                            c();
                        }
                        this.infoboardMessageController.showDisplayNumber(a, false);
                        this.infoboardMessageController.setTotalAndWinText(true, false);
                        this.infoboardMessageController.unscheduleRandomSpriteTips();
                        if (this.Yo === e.SHOWING_MESSAGE) {
                            this.deactivateInfoboardMessage();
                        }
                        this.Yo = e.SHOWING_WIN;
                        if (b) {
                            b();
                        }
                    };
                    b.prototype.playSmallWin = function (a, b) {
                        this.infoboardMessageController.clearNumberRoll();
                        this.playWin(a);
                        g.spawnCallback(this.ec.bind(this), this.nc.bind(this))(function () {
                            if (b) {
                                b();
                            }
                        });
                    };
                    b.prototype.ec = function (a) {
                        this.infoboardHolder.stopAllActions();
                        this.infoboardHolder.scale = 1;
                        this.infoboardHolder.runAction(cc.sequence(cc.scaleTo(0.2, 1.05).easing(cc.easeCircleActionOut()), cc.scaleTo(0.2, 1).easing(cc.easeCircleActionOut()), cc.delayTime(0.3), cc.callFunc(function () {
                            if (a) {
                                a();
                            }
                        })));
                        this.coins.play();
                        this.particle.play();
                        this.sparkle.play();
                        this.sparkle2.play();
                        this.shine.node.position = cc.v3(0, 0);
                        this.shine.node.setScale(3.3, 3.3);
                        this.shine.play();
                        this.dispenser.play();
                        this.glow.runAction(cc.fadeTo(0.25, 155));
                    };
                    b.prototype.playMediumWin = function (a, b, c) {
                        this.oc = undefined;
                        this.Jo = b;
                        this.Qo = c;
                        this.cc(a);
                        this.infoboardHolder.stopAllActions();
                        this.infoboardHolder.scale = 1;
                        this.infoboardHolder.runAction(cc.sequence(cc.scaleTo(0.2, 1.05).easing(cc.easeCircleActionOut()), cc.scaleTo(0.2, 1).easing(cc.easeCircleActionOut())));
                        this.hc();
                        this.Ko = h.default.subscribeOnce(this.quickStopMediumWin.bind(this));
                        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.quickStopMediumWin, this);
                        cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.quickStopMediumWin, this);
                    };
                    b.prototype.instantPlayMediumWin = function (a) {
                        this.playWin(a, true);
                    };
                    b.prototype.hc = function () {
                        this.leftMask.active = false;
                        this.rightMask.active = false;
                        this.coins.stop();
                        this.coins.setCurrentTime(0);
                        this.coins.node.getComponent(cc.Sprite).spriteFrame = undefined;
                        this.particle.stop();
                        this.particle.setCurrentTime(0);
                        this.particle.node.getComponent(cc.Sprite).spriteFrame = undefined;
                        this.sparkle.stop();
                        this.sparkle.setCurrentTime(0);
                        this.sparkle.node.getComponent(cc.Sprite).spriteFrame = undefined;
                        this.sparkle2.stop();
                        this.sparkle2.setCurrentTime(0);
                        this.sparkle2.node.getComponent(cc.Sprite).spriteFrame = undefined;
                        this.shine.stop();
                        this.shine.setCurrentTime(0);
                        this.shine.node.getComponent(cc.Sprite).spriteFrame = undefined;
                        this.dispenser.stop();
                        this.dispenser.setCurrentTime(0);
                        this.dispenser.node.getComponent(cc.Sprite).spriteFrame = undefined;
                        this.glow.stopAllActions();
                        this.glow.opacity = 0;
                        this.level2Infoboard.stopAllActions();
                        this.level2Infoboard.active = true;
                        this.level2Infoboard.opacity = 0;
                        this.level2Infoboard.runAction(cc.fadeIn(0.2));
                        this.coins.play();
                        this.particle.play();
                        this.sparkle.play();
                        this.sparkle2.play();
                        this.shine.node.position = cc.v3(0, 40);
                        this.shine.node.setScale(3.35, 3.7);
                        this.shine.play("infoboard_c2");
                        this.dispenser.play();
                        this.glow.runAction(cc.fadeTo(0.25, 150));
                    };
                    b.prototype.nc = function (a) {
                        var b = this.winDisplayNode;
                        b.scaleX = b.scaleY = 1;
                        b.stopAllActions();
                        b.runAction(cc.sequence(cc.delayTime(0.1), cc.scaleTo(0.1, 1.15), cc.scaleTo(0.2, 1).easing(cc.easeBackInOut()), cc.callFunc(function () {
                            if (a) {
                                a();
                            }
                        })));
                    };
                    b.prototype.playBigWin = function (a, b) {
                        this.playDynamicWin(a);
                        this.nc(b);
                    };
                    b.prototype.quickStopMediumWin = function () {
                        var a = l.GENERAL_AUDIO.prizeMedwinMain.key;
                        n.stopAudioIfPlaying(a);
                        this.sparkle.play();
                        this.sparkle2.play();
                        this.particle.play();
                        this.infoboardHolder.stopAllActions();
                        this.infoboardHolder.scale = 1;
                        this.infoboardHolder.runAction(cc.sequence(cc.scaleTo(0.2, 1.05).easing(cc.easeCircleActionOut()), cc.scaleTo(0.2, 1).easing(cc.easeCircleActionOut())));
                        var b = this.Qo;
                        this.Qo = undefined;
                        if (b) {
                            b();
                        }
                        if (this.Jo) {
                            var c = this.Ko;
                            this.Ko = undefined;
                            if (c) {
                                c();
                            }
                            cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.quickStopMediumWin, this);
                            this.Yt();
                            this.playWin(this.Jo, true);
                            this.rc();
                            this.infoboardMessageController.clearNumberRoll();
                        }
                    };
                    b.prototype.cc = function (a) {
                        if (a === undefined) {
                            a = 0;
                        }
                        var b = l.GENERAL_AUDIO.prizeMedwinMain.key;
                        n.stopAudioIfPlaying(b);
                        n.playAudioIfNotPlaying(b);
                        this.infoboardMessageController.unscheduleRandomSpriteTips();
                        this.infoboardMessageController.setTotalAndWinText(false, true);
                        if (this.Yo === e.SHOWING_MESSAGE) {
                            this.deactivateInfoboardMessage();
                        }
                        this.Yo = e.SHOWING_ROLL;
                        this.infoboardMessageController.showNumberRoll(1.488, a, this.Jo, this.ac.bind(this), !this.numberDisplayNode.active);
                    };
                    b.prototype.ac = function () {
                        var a = this.Ko;
                        this.Ko = undefined;
                        if (a) {
                            a();
                        }
                        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.quickStopMediumWin, this);
                        this.rc();
                    };
                    b.prototype.rc = function () {
                        var a = this;
                        var b = l.GENERAL_AUDIO.prizeMedwinEnd.key;
                        n.stopAudioIfPlaying(b);
                        n.playAudioIfNotPlaying(b);
                        this.playWin(this.Jo, false);
                        this.particle.play();
                        this.sparkle.play();
                        this.sparkle2.play();
                        this.infoboardHolder.stopAllActions();
                        this.infoboardHolder.scale = 1;
                        this.infoboardHolder.runAction(cc.sequence(cc.scaleTo(0.2, 1.05).easing(cc.easeCircleActionOut()), cc.scaleTo(0.2, 1).easing(cc.easeCircleActionOut())));
                        this.nc(function () {
                            var b = a.Qo;
                            a.Qo = undefined;
                            if (b) {
                                b();
                            }
                        });
                    };
                    b.prototype.hideMediumWinEffect = function (a) {
                        if (a) {
                            a();
                        }
                    };
                    b.prototype.instantHideMediumWin = function () { };
                    b.prototype.sc = function () {
                        if (this.Yo !== e.SHOWING_ROLL) {
                            this.infoboardMessageController.clearNumberRoll();
                            this.infoboardMessageController.showInfoboardMessage();
                        }
                        this.infoboardMessageController.clearDisplayNumber();
                        this.Yo = e.SHOWING_MESSAGE;
                        this.infoboardMessageController.playScheduleRandomSpriteTips();
                        this.infoboardMessageController.setTotalAndWinText(false, false);
                        this.tc();
                    };
                    b.prototype.Yt = function () {
                        var a = shell.ga;
                        f.sendEvent(a.CATEGORY_GAME, a.EVENT_SLOT_SKIP_EFFECT, {
                            type: "Medium Prize"
                        });
                    };
                    b.prototype.playMultiplier = function (a, b) {
                        var c = this;
                        var d = cc.v3(0, 1015);
                        this.multiplier.position = d;
                        this.multiplier.scale = 3.5;
                        this.multiplier.opacity = 255;
                        var e = l.GENERAL_AUDIO.multiFly.key;
                        n.stopAudioIfPlaying(e);
                        n.playAudioIfNotPlaying(e);
                        this.multiplier.runAction(cc.sequence(cc.spawn(cc.moveTo(1, cc.v2(0, 0)).easing(cc.easeQuinticActionIn()), cc.scaleTo(0.8, 5).easing(cc.easeQuinticActionIn())), cc.spawn(cc.fadeOut(0.5), cc.callFunc(function () {
                            c.multiplier.scale = 0;
                            if (b) {
                                b();
                            }
                        }), cc.scaleTo(2, 5))));
                    };
                    b.prototype.playNormalMultiplier = function (a) {
                        var b = this;
                        this.multiplier2Particle.stop();
                        this.multiplier2Particle.setCurrentTime(0);
                        this.multiplier2Particle.node.getComponent(cc.Sprite).spriteFrame = undefined;
                        this.multiplier2.position = cc.v3(-290, 1200);
                        this.multiplier2.scale = 1;
                        this.multiplier2Ten.scale = 0;
                        this.multiplier2.active = true;
                        this.multiplier2Shine.color = o.BLACK;
                        var c = l.GENERAL_AUDIO.multiAppearWoRespin.key;
                        n.stopAudioIfPlaying(c);
                        n.playAudioIfNotPlaying(c);
                        this.multiplier2Particle.play();
                        this.multiplier2.runAction(cc.sequence(cc.targetedAction(this.multiplier2Ten, cc.scaleTo(0.25, 0.7)), cc.spawn(cc.targetedAction(this.multiplier2Shine, cc.tintTo(0.5, o.WHITE)), cc.targetedAction(this.multiplier2Ten, cc.scaleTo(0.1, 0.6))), cc.delayTime(0.7), cc.callFunc(function () {
                            var a = l.GENERAL_AUDIO.multiFly.key;
                            n.stopAudioIfPlaying(a);
                            n.playAudioIfNotPlaying(a);
                        }), cc.bezierTo(0.5, [cc.v2(-290, 1200), cc.v2(100, 1000), cc.v2(0, 0)]), cc.callFunc(function () {
                            b.multiplier2.active = false;
                            if (a) {
                                a();
                            }
                        })));
                    };
                    b.prototype.tc = function () {
                        this.multiplier.stopAllActions();
                        this.multiplier.scale = 0;
                        this.level2Infoboard.active = false;
                        this.level2Infoboard.opacity = 0;
                        this.level2Infoboard.stopAllActions();
                        this.level3Infoboard.active = false;
                        this.level3Infoboard.opacity = 0;
                        this.leftMask.active = true;
                        this.rightMask.active = true;
                        this.infoboardHolder.stopAllActions();
                        this.infoboardHolder.runAction(cc.scaleTo(0.2, 1));
                        this.coins.stop();
                        this.coins.setCurrentTime(0);
                        this.coins.node.getComponent(cc.Sprite).spriteFrame = undefined;
                        this.particle.stop();
                        this.particle.setCurrentTime(0);
                        this.particle.node.getComponent(cc.Sprite).spriteFrame = undefined;
                        this.sparkle.stop();
                        this.sparkle.setCurrentTime(0);
                        this.sparkle.node.getComponent(cc.Sprite).spriteFrame = undefined;
                        this.sparkle2.stop();
                        this.sparkle2.setCurrentTime(0);
                        this.sparkle2.node.getComponent(cc.Sprite).spriteFrame = undefined;
                        this.shine.stop();
                        this.shine.setCurrentTime(0);
                        this.shine.node.getComponent(cc.Sprite).spriteFrame = undefined;
                        this.dispenser.stop();
                        this.dispenser.setCurrentTime(0);
                        this.dispenser.node.getComponent(cc.Sprite).spriteFrame = undefined;
                        this.glow.stopAllActions();
                        this.glow.opacity = 0;
                    };
                    __decorate([p(cc.Node)], b.prototype, "numberDisplayNode", undefined);
                    __decorate([p(cc.Node)], b.prototype, "winDisplayNode", undefined);
                    __decorate([p(i.default)], b.prototype, "infoboardMessageController", undefined);
                    __decorate([p(cc.Animation)], b.prototype, "coins", undefined);
                    __decorate([p(cc.Animation)], b.prototype, "particle", undefined);
                    __decorate([p(cc.Animation)], b.prototype, "shine", undefined);
                    __decorate([p(cc.Animation)], b.prototype, "dispenser", undefined);
                    __decorate([p(cc.Node)], b.prototype, "glow", undefined);
                    __decorate([p(cc.Node)], b.prototype, "infoboardHolder", undefined);
                    __decorate([p(cc.Node)], b.prototype, "level2Infoboard", undefined);
                    __decorate([p(cc.Node)], b.prototype, "level3Infoboard", undefined);
                    __decorate([p(cc.Node)], b.prototype, "leftMask", undefined);
                    __decorate([p(cc.Node)], b.prototype, "rightMask", undefined);
                    __decorate([p(cc.Node)], b.prototype, "multiplier", undefined);
                    __decorate([p(cc.Node)], b.prototype, "multiplier2", undefined);
                    __decorate([p(cc.Node)], b.prototype, "multiplier2Ten", undefined);
                    __decorate([p(cc.Node)], b.prototype, "multiplier2Shine", undefined);
                    __decorate([p(cc.Animation)], b.prototype, "multiplier2Particle", undefined);
                    __decorate([p(cc.Animation)], b.prototype, "sparkle", undefined);
                    __decorate([p(cc.Animation)], b.prototype, "sparkle2", undefined);
                    __decorate([p(cc.Sprite)], b.prototype, "firstPart", undefined);
                    __decorate([p(cc.Sprite)], b.prototype, "secondPart", undefined);
                    __decorate([p(cc.Sprite)], b.prototype, "symbolSprite", undefined);
                    __decorate([p(cc.Node)], b.prototype, "dynamicMessage", undefined);
                    __decorate([p(cc.Node)], b.prototype, "message", undefined);
                    return __decorate([m], b);
                }(cc.Component);
                c.default = q;
                cc._RF.pop();
            }
        }, {
            AnalyticsHelper: "AnalyticsHelper",
            AudioManager: "AudioManager",
            GConstants: "GConstants",
            GeneralAudioConstant: "GeneralAudioConstant",
            InfoboardMessageController: "InfoboardMessageController",
            SkipHandler: "SkipHandler",
            SymbolImageHandler: "SymbolImageHandler",
            Utils: "Utils"
        }],
        "InfoboardMessageController.spec": [function (a, b, c) {
            'use strict';

            var d = {
                value: true
            };
            if (!cc._RF.push(b, "9a894aU+wtPzI8aYY1BbeiI", "InfoboardMessageController.spec")) {
                Object.defineProperty(c, "__esModule", d);
                c.setWinAmount = c.setTotalAndWinText = undefined;
                c.setTotalAndWinText = function (a, b) {
                    if (a || b) {
                        var c = System.get("automation") && System.get("automation").GameData;
                        if (c) {
                            c.emit(a ? "ShowTotalWin" : "ShowWin");
                        }
                    }
                };
                c.setWinAmount = function (a, b) {
                    if (a && a > 0) {
                        var c = System.get("automation") && System.get("automation").GameData;
                        if (c) {
                            c.emit(b ? "ShowTotalWin" : "ShowWin");
                        }
                    }
                };
                cc._RF.pop();
            }
        }, {}],
        InfoboardMessageController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "f962cm61b9P6rw9Yco9B/O4", "InfoboardMessageController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.InfoboardMessageOrderState = undefined;
                var e;
                var f;
                var g = a("NumberDisplayController");
                var h = a("NumberRollController");
                var i = a("Utils");
                var j = a("AutomationDecorator");
                var l = a("InfoboardMessageController.spec");
                (function (a) {
                    a[a.SEQUENCE = 0] = "SEQUENCE";
                    a[a.RANDOM = 1] = "RANDOM";
                })(e = c.InfoboardMessageOrderState || (c.InfoboardMessageOrderState = {}));
                (function (a) {
                    a.uc = "_fntConfig";
                })(f || (f = {}));
                var k = cc._decorator;
                var n = k.ccclass;
                var o = k.property;
                var m = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.maskNode = undefined;
                        b.padding = 40;
                        b.label = undefined;
                        b.winLabelColor = new cc.Color();
                        b.winLabelOutlineColor = new cc.Color();
                        b.tipsLabelColor = new cc.Color();
                        b.tipsLabelOutlineColor = new cc.Color();
                        b.enableWinOutline = true;
                        b.enableTipsOutline = true;
                        b.spriteMessageNode = undefined;
                        b.sprite = undefined;
                        b.numberRollController = undefined;
                        b.numberDisplayController = undefined;
                        b.winText = undefined;
                        b.totalText = undefined;
                        b.winDisplayNode = undefined;
                        b.qo = undefined;
                        b.lc = [];
                        b.fc = [];
                        b.dc = [];
                        b.vc = [];
                        b._c = undefined;
                        b.mc = undefined;
                        b.pc = undefined;
                        b.bc = undefined;
                        b.Sc = 4;
                        b.Cc = 3;
                        b.yc = 4;
                        b.Mc = 3;
                        b.Ac = 0;
                        b.Ic = 650;
                        b.Oc = 1;
                        b.Hc = e.RANDOM;
                        b.Zo = 0;
                        b.$o = -1;
                        b.Bc = undefined;
                        return b;
                    }
                    var c = {
                        get: function () {
                            return this.mc;
                        },
                        enumerable: false,
                        configurable: true
                    };
                    var d = {
                        tooltip: false
                    };
                    var p = {
                        tooltip: false
                    };
                    var q = {
                        tooltip: false
                    };
                    var m = {
                        tooltip: false
                    };
                    var k = {
                        tooltip: false
                    };
                    var r = {
                        tooltip: false
                    };
                    __extends(b, a);
                    Object.defineProperty(b.prototype, "willExpire", c);
                    b.prototype.onLoad = function () {
                        if (shell.isRTLLanguage()) {
                            this.Zo = 1;
                            this.$o = 1;
                        }
                        if (this.winText) {
                            var a = this.winText.node.parent;
                            var b = this.Bc = a.getComponent(cc.Layout);
                            if (shell.isRTLLanguage()) {
                                b.horizontalDirection = cc.Layout.HorizontalDirection.RIGHT_TO_LEFT;
                            }
                        }
                    };
                    b.prototype.initNumberDisplayNodeEvent = function () {
                        this.Oc = this.winDisplayNode.scale;
                        this.winDisplayNode.on("size-changed", this.resizeNumberDisplay, this);
                    };
                    b.prototype.setNumberDisplayNodeWidth = function (a) {
                        this.Ic = a;
                    };
                    b.prototype.setEventMessage = function (a, b, c) {
                        if (b === undefined) {
                            b = true;
                        }
                        if (c === undefined) {
                            c = false;
                        }
                        if (!this._c) {
                            if (c) {
                                this.label.node.color = this.tipsLabelOutlineColor;
                                this.label.node.getComponent(cc.LabelOutline).enabled = this.enableTipsOutline;
                            }
                            this._c = false;
                            this.pc = true;
                            this.mc = b;
                            this.unschedule(this.playRandomTips);
                            this.unschedule(this.playRandomSpriteTips);
                            if (a instanceof cc.SpriteFrame) {
                                this.setSpriteMessage(a);
                            } else if (typeof a == "string") {
                                this.setLabel(a);
                            }
                        }
                    };
                    b.prototype.clear = function (a) {
                        if (a === undefined) {
                            a = false;
                        }
                        if (this._c || this.pc || a || this.Hc !== e.RANDOM) {
                            if (this.sprite) {
                                this.unschedule(this.playRandomSpriteTips);
                                this.playRandomSpriteTips();
                            } else if (this.label) {
                                this.unschedule(this.playRandomTips);
                                this.playRandomTips();
                            }
                        }
                    };
                    b.prototype.stop = function () {
                        if (this.sprite) {
                            this.sprite.node.stopAllActions();
                        }
                        if (this.label) {
                            this.label.node.stopAllActions();
                        }
                    };
                    b.prototype.setLocalizedSpriteFrame = function (a, b) {
                        this.winText.spriteFrame = a;
                        this.totalText.spriteFrame = b;
                    };
                    b.prototype.setSprites = function (a) {
                        this.fc = undefined;
                        this.fc = a;
                        this.vc = a.slice();
                    };
                    b.prototype.setOrderOfMessage = function (a) {
                        if (a === undefined) {
                            a = e.RANDOM;
                        }
                        this.Hc = a;
                    };
                    b.prototype.setRandomSpriteScheduleTime = function (a, b) {
                        if (a === undefined) {
                            a = 4;
                        }
                        if (b === undefined) {
                            b = 3;
                        }
                        this.Mc = b;
                        this.yc = a;
                    };
                    b.prototype.playScheduleRandomSpriteTipsOverride = function () {
                        var a = Math.floor(Math.random() * this.Mc) + this.yc;
                        this.unschedule(this.playRandomSpriteTips);
                        this.scheduleOnce(this.playRandomSpriteTips, a);
                    };
                    b.prototype.playScheduleRandomSpriteTips = function (a) {
                        if (a === undefined) {
                            a = 0;
                        }
                        this.unschedule(this.playRandomSpriteTips);
                        this.scheduleOnce(this.playRandomSpriteTips, a);
                    };
                    b.prototype.unscheduleRandomSpriteTips = function () {
                        this.unschedule(this.playRandomSpriteTips);
                    };
                    b.prototype.setTotalAndWinText = function (a, b) {
                        this.totalText.node.active = a;
                        this.winText.node.active = b;
                        this.winDisplayNode.opacity = 255;
                        if (this.Bc) {
                            this.Bc.updateLayout();
                        }
                    };
                    b.prototype.showInfoboardMessage = function () {
                        var a = this.maskNode.getComponent(cc.Mask);
                        if (a) {
                            a.enabled = true;
                        }
                        this.spriteMessageNode.active = true;
                    };
                    b.prototype.hideInfoboardMessage = function () {
                        this.spriteMessageNode.active = false;
                        var a = this.maskNode.getComponent(cc.Mask);
                        if (a) {
                            a.enabled = false;
                        }
                    };
                    b.prototype.showDisplayNumber = function (a, b) {
                        if (b === undefined) {
                            b = false;
                        }
                        this._c = true;
                        if (this.winDisplayNode) {
                            this.winDisplayNode.setScale(this.Oc);
                        }
                        this.numberDisplayController.clear();
                        this.numberDisplayController.displayNumber(a, b);
                        if (this.Bc) {
                            this.Bc.updateLayout();
                        }
                    };
                    b.prototype.clearDisplayNumber = function () {
                        this.numberDisplayController.clear();
                    };
                    b.prototype.showNumberRoll = function (a, b, c, d, e) {
                        if (e === undefined) {
                            e = true;
                        }
                        this.pc = false;
                        this._c = true;
                        this.bc = d;
                        if (this.winDisplayNode) {
                            this.winDisplayNode.setScale(this.Oc);
                        }
                        this.numberRollController.rollDuration = a;
                        this.numberRollController.play(b, c, this.onNumberRollComplete.bind(this), e);
                    };
                    b.prototype.skipNumberRoll = function () {
                        this.numberRollController.skip();
                        this.onNumberRollComplete();
                    };
                    b.prototype.clearNumberRoll = function () {
                        this.numberRollController.stop();
                    };
                    b.prototype.setSpriteMessage = function (a) {
                        var c = this;
                        var d = this.padding;
                        var e = this.sprite;
                        var f = e.node;
                        f.stopAllActions();
                        e.spriteFrame = a;
                        var g = this.maskNode.width;
                        if (f.width * f.scaleY + d * 2 > g) {
                            var h = this.$o;
                            f.setAnchorPoint(this.Zo, f.anchorY);
                            f.setPosition(cc.v2((g / 2 - d) * h, f.y));
                            this.qo = f.position;
                            var j = f.width * f.scaleY + d * 2;
                            var k = cc.delayTime(1.5);
                            var b = cc.moveBy(j / 130, cc.v2(j * h, 0));
                            var l = undefined;
                            l = this.mc ? cc.sequence(k, b, cc.callFunc(this.playScheduleRandomSpriteTips, this)) : cc.sequence(k, b, cc.callFunc(function () {
                                f.position = c.qo;
                            })).repeatForever();
                            f.runAction(l);
                        } else {
                            f.setAnchorPoint(0.5, f.anchorY);
                            f.x = 0;
                            if (!this.mc) {
                                return;
                            }
                            i.deferCallback(true)(this.playScheduleRandomSpriteTipsOverride.bind(this));
                        }
                    };
                    b.prototype.playRandomSpriteTips = function () {
                        this._c = false;
                        this.pc = false;
                        this.mc = true;
                        if (this.vc.length === 0) {
                            this.vc = this.fc.slice();
                        }
                        var a = this.vc;
                        if (this.Hc === e.RANDOM) {
                            var b = Math.floor(Math.random() * a.length);
                            if (a.length > 1) {
                                for (; this.sprite.spriteFrame === a[b];) {
                                    b = Math.floor(Math.random() * a.length);
                                }
                            }
                            this.setSpriteMessage(a[b]);
                            this.vc.splice(b, 1);
                        } else if (this.Hc === e.SEQUENCE) {
                            this.setSpriteMessage(a[0]);
                            this.vc.splice(0, 1);
                        }
                    };
                    b.prototype.resizeNumberDisplay = function () {
                        var a = this.Ic;
                        var b = this.winDisplayNode.width * this.Oc;
                        var c = b - a;
                        if (c > 0) {
                            var d = this.Oc - c / b;
                            this.winDisplayNode.scale = d;
                        }
                    };
                    b.prototype.onNumberRollComplete = function () {
                        var a = this.bc;
                        this._c = false;
                        this.bc = undefined;
                        if (a) {
                            a();
                        }
                    };
                    b.prototype.initLabelNodeY = function () {
                        this.Ac = this.label.node.y;
                    };
                    b.prototype.setTips = function (a) {
                        this.lc = a;
                        this.dc = a.slice();
                    };
                    b.prototype.setLocalizedFont = function (a) {
                        this.label.font = a;
                    };
                    b.prototype.setLabelFontHeight = function (a) {
                        if (a === undefined) {
                            a = 0;
                        }
                        var b = this.label.font;
                        if (b[f.uc]) {
                            this.label.lineHeight = b[f.uc].commonHeight + a;
                        }
                    };
                    b.prototype.setWinLabelColor = function (a) {
                        this.winLabelColor = a;
                    };
                    b.prototype.setWinLabelOutlineColor = function (a) {
                        this.winLabelOutlineColor = a;
                    };
                    b.prototype.setTipsLabelColor = function (a) {
                        this.tipsLabelColor = a;
                    };
                    b.prototype.setTipsLabelOutlineColor = function (a) {
                        this.tipsLabelOutlineColor = a;
                    };
                    b.prototype.setWinAmount = function (a, b, c) {
                        if (b === undefined) {
                            b = false;
                        }
                        if (c === undefined) {
                            c = false;
                        }
                        if (a && a > 0) {
                            this.unschedule(this.playRandomTips);
                            this.unschedule(this.playRandomSpriteTips);
                            this.pc = false;
                            this._c = true;
                            this.mc = c;
                            var d = this.label.node;
                            var e = d.getComponent(cc.LabelOutline);
                            d.color = this.winLabelColor;
                            if (e) {
                                e.color = this.winLabelOutlineColor;
                                e.enabled = this.enableWinOutline;
                            }
                            var f = (b ? shell.I18n.t("InfoboardMessage.TotalWin") : shell.I18n.t("InfoboardMessage.Win")) + " " + i.formatCurrency(a, "", "");
                            this.setLabel(f);
                        }
                    };
                    b.prototype.setRandomLabelScheduleTime = function (a, b) {
                        if (a === undefined) {
                            a = 4;
                        }
                        if (b === undefined) {
                            b = 3;
                        }
                        this.Cc = b;
                        this.Sc = a;
                    };
                    b.prototype.scheduleRandomTips = function () {
                        var a = Math.floor(Math.random() * this.Cc) + this.Sc;
                        this.unschedule(this.playRandomTips);
                        this.scheduleOnce(this.playRandomTips, a);
                    };
                    b.prototype.playScheduleRandomTips = function (a) {
                        if (a === undefined) {
                            a = 0;
                        }
                        this.unschedule(this.playRandomTips);
                        this.scheduleOnce(this.playRandomTips, a);
                    };
                    b.prototype.unscheduleRandomTips = function () {
                        this.unschedule(this.playRandomTips);
                    };
                    b.prototype.playRandomTips = function () {
                        this._c = false;
                        this.pc = false;
                        if (this.lc.length !== 1) {
                            this.mc = true;
                        }
                        if (this.dc.length === 0) {
                            this.dc = this.lc.slice();
                        }
                        var a = this.dc;
                        var b = Math.floor(Math.random() * a.length);
                        var c = this.label.node;
                        c.color = this.tipsLabelColor;
                        var d = c.getComponent(cc.LabelOutline);
                        if (d) {
                            d.color = this.tipsLabelOutlineColor;
                            d.enabled = this.enableTipsOutline;
                        }
                        this.setLabel(a[b]);
                        this.dc.splice(b, 1);
                    };
                    b.prototype.setLabel = function (a) {
                        var b = this.label;
                        b.string = a;
                        b.node.y = this.maskNode.height * 2;
                        this.unschedule(this.determineOverFlow);
                        this.scheduleOnce(this.determineOverFlow);
                    };
                    b.prototype.determineOverFlow = function () {
                        var a = this.label.node;
                        var b = this.padding;
                        if (a.width + b * 2 > this.maskNode.width) {
                            this.scrollLabel();
                        } else {
                            a.stopAllActions();
                            a.setAnchorPoint(0.5, a.anchorY);
                            a.x = 0;
                            if (this.mc) {
                                this.scheduleRandomTips();
                            }
                        }
                        a.y = this.Ac;
                    };
                    b.prototype.scrollLabel = function () {
                        var a = this.label;
                        var b = this.padding;
                        var c = a.node;
                        var d = this.$o;
                        c.stopAllActions();
                        c.setAnchorPoint(this.Zo, c.anchorY);
                        c.setPosition(cc.v2((this.maskNode.width / 2 - b) * d, c.y));
                        var e;
                        var f = c.width + b * 2;
                        var h = cc.delayTime(1.5);
                        var i = cc.moveBy(f / 130, cc.v2(f * d, 0));
                        e = this.mc ? cc.sequence(h, i, cc.callFunc(this.playScheduleRandomTips, this)) : cc.sequence(h, i, cc.callFunc(this.scrollLabel, this));
                        c.runAction(e);
                    };
                    b.prototype.Gc = function () {
                        this.stop();
                        this.numberRollController.stop();
                        this.numberDisplayController.clear();
                        this.unschedule(this.scheduleRandomTips);
                        this.unschedule(this.playRandomSpriteTips);
                        this.unschedule(this.playRandomTips);
                        this.padding = 40;
                        this.Ic = 650;
                        this.Ac = 0;
                        this.Hc = e.RANDOM;
                        this.enableTipsOutline = true;
                        this.enableWinOutline = true;
                        this._c = false;
                        this.lc = [];
                        this.fc = [];
                        this.vc = [];
                        this.dc = undefined;
                        this.mc = undefined;
                        this.pc = undefined;
                        this.tipsLabelColor = undefined;
                        this.tipsLabelOutlineColor = undefined;
                        this.bc = undefined;
                    };
                    b.prototype.destroy = function () {
                        this.Gc();
                        this.node.destroy();
                        return a.prototype.destroy.call(this);
                    };
                    __decorate([o({
                        type: cc.Node,
                        tooltip: false
                    })], b.prototype, "maskNode", undefined);
                    __decorate([o({
                        type: cc.Float,
                        tooltip: false
                    })], b.prototype, "padding", undefined);
                    __decorate([o({
                        type: cc.Label,
                        tooltip: false
                    })], b.prototype, "label", undefined);
                    __decorate([o(d)], b.prototype, "winLabelColor", undefined);
                    __decorate([o(p)], b.prototype, "winLabelOutlineColor", undefined);
                    __decorate([o(q)], b.prototype, "tipsLabelColor", undefined);
                    __decorate([o(m)], b.prototype, "tipsLabelOutlineColor", undefined);
                    __decorate([o(k)], b.prototype, "enableWinOutline", undefined);
                    __decorate([o(r)], b.prototype, "enableTipsOutline", undefined);
                    __decorate([o({
                        type: cc.Node,
                        tooltip: false
                    })], b.prototype, "spriteMessageNode", undefined);
                    __decorate([o({
                        type: cc.Sprite,
                        tooltip: false
                    })], b.prototype, "sprite", undefined);
                    __decorate([o({
                        type: h.default,
                        tooltip: false
                    })], b.prototype, "numberRollController", undefined);
                    __decorate([o({
                        type: g.default,
                        tooltip: false
                    })], b.prototype, "numberDisplayController", undefined);
                    __decorate([o({
                        type: cc.Sprite,
                        tooltip: false
                    })], b.prototype, "winText", undefined);
                    __decorate([o({
                        type: cc.Sprite,
                        tooltip: false
                    })], b.prototype, "totalText", undefined);
                    __decorate([o({
                        type: cc.Node,
                        tooltip: false
                    })], b.prototype, "winDisplayNode", undefined);
                    __decorate([j.automationDec({
                        func: l.setTotalAndWinText
                    })], b.prototype, "setTotalAndWinText", null);
                    __decorate([j.automationDec({
                        func: l.setWinAmount
                    })], b.prototype, "setWinAmount", null);
                    return __decorate([n], b);
                }(cc.Component);
                c.default = m;
                cc._RF.pop();
            }
        }, {
            AutomationDecorator: "AutomationDecorator",
            "InfoboardMessageController.spec": "InfoboardMessageController.spec",
            NumberDisplayController: "NumberDisplayController",
            NumberRollController: "NumberRollController",
            Utils: "Utils"
        }],
        JSONSerializer: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "1252bHHaiZC15bpK+5v9l5B", "JSONSerializer")) {
                var c = System.get("common").JSONSerialiser;
                b.exports.JSONSerializer = c;
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        JakeSlotGameTemplate: [function (a, b, c) {
            'use strict';

            var d = {
                value: true
            };
            var e = {
                spaceBarInterrupterEnabled: false
            };
            if (!cc._RF.push(b, "e12d8fBWfBCyboZWCaBLXDu", "JakeSlotGameTemplate")) {
                Object.defineProperty(c, "__esModule", d);
                c.initJakeSlotGameTemplate = c.JSGTConfig = undefined;
                c.JSGTConfig = e;
                c.initJakeSlotGameTemplate = function (a) {
                    c.JSGTConfig = Object.freeze(a);
                };
                cc._RF.pop();
            }
        }, {}],
        LabelLocalized: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "f5f30hTmFFOcLgg2elp0I0D", "LabelLocalized")) {
                c.__esModule = true;
                c.default = undefined;
                var d = cc.Class({
                    extends: cc.Component,
                    editor: false,
                    properties: {
                        key: {
                            tooltip: false,
                            default: "",
                            notify: function () {
                                this.Nc();
                            }
                        }
                    },
                    onLoad: function () {
                        this.Tc = this.node.getComponent(cc.Label);
                        if (!this.Tc) {
                            this.Tc = this.node.getComponent(cc.RichText);
                        }
                        this.Nc();
                    },
                    Nc: function () {
                        var a = this.Tc;
                        if (a) {
                            a.string = shell.I18n.t(this.key);
                        }
                    }
                });
                c.default = d;
                b.exports = c.default;
                cc._RF.pop();
            }
        }, {}],
        LabelTheme: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "05b6c8yPn1LZIH3AnSTBq8U", "LabelTheme")) {
                c.__esModule = true;
                c.default = undefined;
                var d;
                var e = function (a) {
                    if (a && a.__esModule) {
                        return a;
                    }
                    if (a === null || typeof a != "object" && typeof a != "function") {
                        return {
                            default: a
                        };
                    }
                    var b = r(undefined);
                    if (b && b.has(a)) {
                        return b.get(a);
                    }
                    var c = {};
                    var d = Object.defineProperty && Object.getOwnPropertyDescriptor;
                    for (var e in a) {
                        if (e !== "default" && Object.prototype.hasOwnProperty.call(a, e)) {
                            var f = d ? Object.getOwnPropertyDescriptor(a, e) : null;
                            if (f && (f.get || f.set)) {
                                Object.defineProperty(c, e, f);
                            } else {
                                c[e] = a[e];
                            }
                        }
                    }
                    c.default = a;
                    if (b) {
                        b.set(a, c);
                    }
                    return c;
                }(a("ResRC"));
                var f = a("ResourceQualifierHelper");
                var g = a("Utils");
                var h = a("UIAppearanceHelper");
                var i = cc.Enum({
                    Pc: "_updateRichText",
                    Rc: "_isBold",
                    Lc: "_isItalic"
                });
                var j = (0, g.getCocosMajor)();
                d = typeof j == "number" && j >= 4 ? function (a) {
                    return a.markForRender(true);
                } : function (a) {
                    return a.markForUpdateRenderData(true);
                };
                var l = {
                    tooltip: false,
                    default: ""
                };
                var n = {
                    tooltip: false,
                    default: "theme_font"
                };
                var o = {
                    tooltip: false,
                    default: ""
                };
                var p = {
                    tooltip: false,
                    default: ""
                };
                var m = {
                    tooltip: false,
                    default: ""
                };
                var k = cc.Class({
                    extends: cc.Component,
                    ctor: function () { },
                    editor: false,
                    properties: {
                        followThemeColor: false,
                        followFont: false,
                        domainKey: l,
                        colorKey: {
                            tooltip: false,
                            default: "",
                            notify: function () {
                                this.Ec();
                            }
                        },
                        fontFamilyKey: n,
                        fontKey: o,
                        fontWeightKey: p,
                        fontStyleKey: m
                    },
                    onLoad: function () {
                        this.Tc = this.node.getComponent(cc.Label);
                        if (!this.Tc) {
                            this.Tc = this.node.getComponent(cc.RichText);
                        }
                        this.Ec();
                        this.kc();
                    },
                    Ec: function () {
                        if (this.followThemeColor) {
                            var a = this.node;
                            this.domainKey;
                            this.colorKey;
                            if (a && this.colorKey != "") {
                                var b = h.uiAppearanceHelper.v(this.domainKey + "." + this.colorKey);
                                a.color = new cc.Color(b.r, b.g, b.b);
                                a.opacity = b.getA();
                            }
                        }
                    },
                    kc: function () {
                        var a = this;
                        if (this.followFont) {
                            var b = this.Tc;
                            if (b) {
                                b.offsetY = (0, h.getOffsetY)();
                                if (this.fontFamilyKey && this.domainKey) {
                                    var c = h.uiAppearanceHelper.v(this.domainKey + "." + this.fontFamilyKey);
                                    this.Uc(c);
                                }
                                if (this.fontWeightKey) {
                                    var d = this.fontWeightKey;
                                    this.jc(d);
                                }
                                if (this.fontStyleKey) {
                                    var i = this.fontStyleKey;
                                    this.Dc(i);
                                }
                                if (!this.fontFamilyKey && this.fontKey && this.domainKey) {
                                    var j = h.uiAppearanceHelper.v(this.domainKey + "." + this.fontKey);
                                    if (typeof j == "object") {
                                        this.Wc(j);
                                        return;
                                    }
                                    if (j) {
                                        var k = (0, f.getResourceURL)(j);
                                        if (k) {
                                            e.load(k, cc.Font, function (b, c) {
                                                if (!b) {
                                                    a.Wc(c);
                                                }
                                            });
                                        }
                                        return;
                                    }
                                }
                            }
                        }
                    },
                    Wc: function (a) {
                        var b = this.Tc;
                        if (cc.isValid(this.node)) {
                            b.font = a;
                            if (b instanceof cc.Label) {
                                d(b);
                            } else if (b instanceof cc.RichText) {
                                b[i.Pc]();
                            }
                        }
                    },
                    Uc: function (a) {
                        var b = this.Tc;
                        if (cc.isValid(this.node)) {
                            b.fontFamily = a;
                            if (b instanceof cc.Label) {
                                d(b);
                            } else if (b instanceof cc.RichText) {
                                b[i.Pc]();
                            }
                        }
                    },
                    jc: function (a) {
                        var b = this.Tc;
                        if (cc.isValid(this.node)) {
                            b[i.Rc] = a;
                            if (b instanceof cc.Label) {
                                d(b);
                            } else {
                                cc.RichText;
                            }
                        }
                    },
                    Dc: function (a) {
                        var b = this.Tc;
                        if (cc.isValid(this.node)) {
                            b[i.Lc] = a;
                            if (b instanceof cc.Label) {
                                d(b);
                            } else {
                                cc.RichText;
                            }
                        }
                    }
                });
                c.default = k;
                b.exports = c.default;
                cc._RF.pop();
            }
            function r(a) {
                if (typeof WeakMap != "function") {
                    return null;
                }
                var b = new WeakMap();
                var c = new WeakMap();
                return (r = function (a) {
                    if (a) {
                        return c;
                    } else {
                        return b;
                    }
                })(a);
            }
        }, {
            ResRC: "ResRC",
            ResourceQualifierHelper: "ResourceQualifierHelper",
            UIAppearanceHelper: "UIAppearanceHelper",
            Utils: "Utils"
        }],
        LandscapeSettingInfoFooterController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "e550bCO+rxMtaTFsIcS7wfm", "LandscapeSettingInfoFooterController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("SettingInfoFooterController");
                var f = a("UIAppearanceHelper");
                var g = a("Utils");
                var h = cc._decorator;
                var i = h.ccclass;
                var j = h.property;
                var k = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.borders = [];
                        b.descriptionLabel = [];
                        b.landscapeSoundButtonHolder = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.boot = function () {
                        a.prototype.boot.call(this);
                        var b = f.uiAppearanceHelper.v("setting.secondary_theme_color");
                        this.borders.forEach(function (a) {
                            g.setNodeColorWithOpacity(a, b);
                        });
                        var c = f.uiAppearanceHelper.v("setting.tertiary_theme_color");
                        this.descriptionLabel.forEach(function (a) {
                            g.setNodeColorWithOpacity(a.node, c);
                        });
                        this.betOptionsButton.normalColor = f.uiAppearanceHelper.v("setting.tertiary_theme_color");
                        this.betOptionsButton.pressedColor = f.uiAppearanceHelper.v("setting.color_button_transition_a.pressed");
                        this.betOptionsButton.hoverColor = f.uiAppearanceHelper.v("setting.tertiary_theme_color");
                        this.betOptionsButton.disabledColor = f.uiAppearanceHelper.v("setting.tertiary_theme_color");
                        this.walletButton.normalColor = f.uiAppearanceHelper.v("setting.tertiary_theme_color");
                        this.walletButton.pressedColor = f.uiAppearanceHelper.v("setting.color_button_transition_a.pressed");
                        this.walletButton.hoverColor = f.uiAppearanceHelper.v("setting.tertiary_theme_color");
                        this.walletButton.disabledColor = f.uiAppearanceHelper.v("setting.tertiary_theme_color");
                        this.winButton.normalColor = f.uiAppearanceHelper.v("setting.tertiary_theme_color");
                        this.winButton.pressedColor = f.uiAppearanceHelper.v("setting.color_button_transition_a.pressed");
                        this.winButton.hoverColor = f.uiAppearanceHelper.v("setting.tertiary_theme_color");
                        this.winButton.disabledColor = f.uiAppearanceHelper.v("setting.tertiary_theme_color");
                    };
                    b.prototype.setWalletNavigateIcon = function (a) {
                        this.xc();
                        switch (a) {
                            case e.WALLET_FOOTER_TYPE.CASH:
                                this.walletNavigateIcon.getComponent(cc.Sprite).spriteFrame = this.walletFooterTypeSFList[a - 1];
                                break;
                            case e.WALLET_FOOTER_TYPE.FREE_GAME:
                                this.walletNavigateIcon.getComponent(cc.Sprite).spriteFrame = this.walletFooterTypeSFList[a - 1];
                                this.specialIcon.spriteFrame = this.rewardFooterTypeSFList[a - 2];
                                this.descriptionLabel[2].string = shell.I18n.t("SettingMenu.FreeGame");
                                break;
                            case e.WALLET_FOOTER_TYPE.BONUS:
                                this.walletNavigateIcon.getComponent(cc.Sprite).spriteFrame = this.walletFooterTypeSFList[a - 1];
                                this.specialIcon.spriteFrame = this.rewardFooterTypeSFList[a - 2];
                                this.descriptionLabel[2].string = shell.I18n.t("SettingMenu.RollOver");
                                break;
                            default:
                                this.walletNavigateIcon.getComponent(cc.Sprite).spriteFrame = undefined;
                        }
                    };
                    b.prototype.xc = function () {
                        this.descriptionLabel[0].string = shell.I18n.t("WalletHelper.Balance");
                        this.descriptionLabel[1].string = shell.I18n.t("SettingMenu.WinPrizeWord");
                        this.descriptionLabel[2].string = "";
                        this.descriptionLabel[3].string = shell.I18n.t("SettingMenu.Bet");
                    };
                    __decorate([j([cc.Node])], b.prototype, "borders", undefined);
                    __decorate([j([cc.Label])], b.prototype, "descriptionLabel", undefined);
                    __decorate([j(cc.Node)], b.prototype, "landscapeSoundButtonHolder", undefined);
                    return __decorate([i], b);
                }(e.SettingInfoFooterController);
                c.default = k;
                cc._RF.pop();
            }
        }, {
            SettingInfoFooterController: "SettingInfoFooterController",
            UIAppearanceHelper: "UIAppearanceHelper",
            Utils: "Utils"
        }],
        LandscapeSettingMenuController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "0a93fcJrXdI5b2EdfUH4UAj", "LandscapeSettingMenuController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.LandscapeSettingMenuController = undefined;
                var e = a("SettingMenuController");
                var f = a("CanvasResizeBroadcaster");
                var g = a("UIAppearanceHelper");
                var h = cc._decorator;
                var i = h.ccclass;
                var j = h.property;
                var k = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.landscapeSoundButtonHolder = undefined;
                        b.moreMenuLayoutNode = undefined;
                        b.moreMenuBGNode = undefined;
                        b.Fc = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.onLoad = function () {
                        this.Vc();
                        this.moreMenuLayoutNode.on("size-changed", this.Vc.bind(this));
                        this.Fc = this.moreMenuLayerNode.position;
                        this.settingTurboSprite.node.color = g.uiAppearanceHelper.v("setting.theme_color");
                        this.defaultMenuLayerNode.y = 0;
                        this.settingToast.opacity = 0;
                        this.featureBuyToast.opacity = 0;
                        this.featureBuyToast.active = false;
                        this.moreMenuLayerNode.y = -(this.moreMenuLayerNode.height + this.zc());
                        this.reminderBoard.active = false;
                        this.reminderBoard.opacity = 1;
                        this.settingMenuUIBlock.active = false;
                        this.subControllerHolder.height = this.qc = cc.view.getVisibleSize().height;
                        this.Jc = f.default.subscribe(this.ui.bind(this));
                    };
                    b.prototype.showMoreMenuLayer = function () {
                        var a = this;
                        if (!this.Kc) {
                            this.Kc = true;
                            this.Qc = true;
                            this.Yc();
                            this.moreMenuLayerNode.active = true;
                            this.moreMenuLayerNode.stopAllActions();
                            this.moreMenuLayerNode.runAction(cc.sequence(cc.spawn(cc.moveTo(0.2, this.Fc.x, this.Fc.y).easing(cc.easeQuadraticActionOut()), cc.fadeIn(0.2).easing(cc.easeQuadraticActionOut())), cc.callFunc(function () {
                                a.Kc = false;
                                if (a.onMenuEndChanged) {
                                    a.onMenuEndChanged();
                                }
                            })));
                            var b = this.onMenuStartChanged;
                            if (b) {
                                b(true, true);
                            }
                        }
                    };
                    b.prototype.hideMoreMenuLayer = function () {
                        var a = this;
                        if (!this.Kc) {
                            this.Kc = true;
                            this.Qc = true;
                            this.Yc();
                            this.moreMenuLayerNode.stopAllActions();
                            this.moreMenuLayerNode.runAction(cc.sequence(cc.spawn(cc.moveTo(0.2, this.Fc.x, -this.moreMenuLayerNode.height).easing(cc.easeQuadraticActionOut()), cc.fadeOut(0.2).easing(cc.easeQuadraticActionOut())), cc.callFunc(function () {
                                a.Kc = false;
                                a.moreMenuLayerNode.active = false;
                                if (a.onMenuEndChanged) {
                                    a.onMenuEndChanged();
                                }
                            })));
                            if (this.moreMenuLayerNode.active === false) {
                                this.Kc = false;
                            }
                            var b = this.onMenuStartChanged;
                            if (b) {
                                b(false, true);
                            }
                        }
                    };
                    b.prototype.Vc = function () {
                        this.moreMenuBGNode.width = this.moreMenuLayoutNode.width;
                        this.moreMenuBGNode.height = this.moreMenuLayoutNode.height;
                    };
                    __decorate([j(cc.Node)], b.prototype, "landscapeSoundButtonHolder", undefined);
                    __decorate([j(cc.Node)], b.prototype, "moreMenuLayoutNode", undefined);
                    __decorate([j(cc.Node)], b.prototype, "moreMenuBGNode", undefined);
                    return __decorate([i], b);
                }(e.SettingMenuController);
                c.LandscapeSettingMenuController = k;
                cc._RF.pop();
            }
        }, {
            CanvasResizeBroadcaster: "CanvasResizeBroadcaster",
            SettingMenuController: "SettingMenuController",
            UIAppearanceHelper: "UIAppearanceHelper"
        }],
        LandscapeSoundButton: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "948ffXQc5hNbqpouW3VdkkX", "LandscapeSoundButton")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("SoundButton");
                var f = a("UIAppearanceHelper");
                var g = a("Utils");
                var h = cc._decorator;
                var i = h.ccclass;
                var j = h.property;
                var k = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.largeSprite = undefined;
                        b.largeSoundOnIcon = undefined;
                        b.largeSoundOffIcon = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.onLoad = function () {
                        this.enableTouchInteraction();
                        if (this.buttonTheme) {
                            var a = f.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".normal");
                            g.setNodeColorWithOpacity(this.largeSprite.node, a);
                        }
                    };
                    b.prototype.changeButtonPressedColor = function (a) {
                        if (this.buttonTheme) {
                            var b = f.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".normal");
                            var c = f.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".pressed");
                            g.setNodeColorWithOpacity(this.largeSprite.node, a ? c : b);
                        }
                    };
                    b.prototype.interactableButtonColor = function (a) {
                        if (this.buttonTheme) {
                            var b = f.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".normal");
                            var c = f.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".disabled");
                            g.setNodeColorWithOpacity(this.largeSprite.node, a ? b : c);
                        }
                    };
                    __decorate([j(cc.Sprite)], b.prototype, "largeSprite", undefined);
                    __decorate([j(cc.SpriteFrame)], b.prototype, "largeSoundOnIcon", undefined);
                    __decorate([j(cc.SpriteFrame)], b.prototype, "largeSoundOffIcon", undefined);
                    return __decorate([i], b);
                }(e.default);
                c.default = k;
                cc._RF.pop();
            }
        }, {
            SoundButton: "SoundButton",
            UIAppearanceHelper: "UIAppearanceHelper",
            Utils: "Utils"
        }],
        LaunchConfig: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "9687e72GwxLXpeDvVqr6s0O", "LaunchConfig")) {
                var c = System.get("bvframework").LaunchConfig;
                for (var d in c) {
                    b.exports[d] = c[d];
                }
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        LineController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "15878i9jmRPk6rKeeTw6Ok4", "LineController")) {
                c.__esModule = true;
                c.default = undefined;
                var d = cc.Enum({
                    HEAD: 0,
                    BODY: 1,
                    TAIL: 2
                });
                var e = cc.Class({
                    extends: cc.Component,
                    properties: {
                        headerLineMargin: 10,
                        lineMargin: 10,
                        tailLineMargin: 10,
                        headerLinePrefab: cc.Prefab,
                        linePrefab: cc.Prefab,
                        tailLinePrefab: cc.Prefab,
                        animtionHeaderLineName: "header_line",
                        animtionReverseHeaderLineName: "reverse_header_line",
                        animtionLineName: "line",
                        animtionReverseLineName: "reverse_line",
                        animtionTailLineName: "tail_line",
                        animtionReverseTailLineName: "reverse_tail_line",
                        animtionLoop: false,
                        animationInverted: false
                    },
                    onLoad: function () {
                        this.Xc = {};
                        this.Zc = 0;
                        this.$c = false;
                        this.th = false;
                        this.ih = new cc.NodePool("LinePrefabController");
                        this.sh = new cc.NodePool("LinePrefabController");
                        this.eh = new cc.NodePool("LinePrefabController");
                        this.nh = 7;
                        this.oh = [];
                        for (var a = 0; a < this.nh - 1; a++) {
                            this.oh.push(false);
                        }
                    },
                    destroy: function () {
                        this.hh = null;
                        this.ih.clear();
                        this.sh.clear();
                        this.eh.clear();
                        this.node.destroy();
                        this._super();
                    },
                    setCallbackForAnimationFinish: function (a) {
                        this.hh = a;
                    },
                    addLine: function (a, b) {
                        var c = this;
                        if (!this.Xc[b]) {
                            var e = [];
                            a.forEach(function (a, b, f) {
                                if (b != 0) {
                                    var g;
                                    var h;
                                    var i = f[b - 1];
                                    var j = f[b];
                                    if (b == 1) {
                                        if (!(g = c.sh.get())) {
                                            g = cc.instantiate(c.headerLinePrefab);
                                        }
                                        h = c.headerLineMargin;
                                        g.typeIdentifier = d.HEAD;
                                    } else if (b == f.length - 1) {
                                        if (!(g = c.eh.get())) {
                                            g = cc.instantiate(c.tailLinePrefab);
                                        }
                                        h = c.tailLineMargin;
                                        g.typeIdentifier = d.TAIL;
                                    } else {
                                        if (!(g = c.ih.get())) {
                                            g = cc.instantiate(c.linePrefab);
                                        }
                                        h = c.lineMargin;
                                        g.typeIdentifier = d.BODY;
                                    }
                                    var l = i.x;
                                    var m = i.y;
                                    var n = j.x;
                                    var k = j.y;
                                    var o = (l + n) / 2;
                                    var p = (m + k) / 2;
                                    var q = Math.atan2(k - m, n - l) * 180 / Math.PI;
                                    var r = c.rh(q);
                                    var s = Math.sqrt(Math.pow(n + -l, 2) + Math.pow(k - m, 2));
                                    g.x = o;
                                    g.y = p;
                                    g.width = s + h;
                                    g.angle = -r;
                                    if (c.$c == 0) {
                                        c.ah(g, "line").getComponent("LinePrefabController").setAnimTimeFrameCallback(c.uh.bind(c));
                                    }
                                    c.node.addChild(g);
                                    e.push(g);
                                }
                            });
                            this.$c = true;
                            if (this.animationInverted == 1) {
                                e.reverse();
                            }
                            var f = this.lh(e);
                            this.Xc[b] = f;
                        }
                    },
                    removeAllLines: function () {
                        var a = this;
                        this.stopAnimation();
                        Object.keys(this.Xc).map(function (b) {
                            var c = a.Xc[b];
                            a.fh(c, b);
                        });
                        this.$c = false;
                        cc.sys.garbageCollect();
                    },
                    removeLine: function (a) {
                        var b = this.Xc[a];
                        this.fh(b, a);
                        this.dh();
                        if (Object.keys(this.Xc).length < 1) {
                            this.th = false;
                        }
                    },
                    startAnimation: function () {
                        if (this.th == 0 && Object.keys(this.Xc).length > 0) {
                            this.th = true;
                            this.Zc = 0;
                            this.vh();
                            this.oh[0] = true;
                            this._h();
                        }
                    },
                    stopAnimation: function () {
                        this.Zc = 0;
                        this.th = false;
                    },
                    dh: function () {
                        var a = this;
                        var b = Object.keys(this.Xc);
                        if (b.length > 0) {
                            b.forEach(function (b) {
                                if (a.Xc[b][0].LinePrefabController.getAnimTimeFrameCallback()) {
                                    a.$c = true;
                                }
                            });
                            var c = Math.floor(Math.random() * Math.floor(b.length));
                            this.Xc[b[c]].forEach(function (b) {
                                b.LinePrefabController.setAnimTimeFrameCallback(a.uh.bind(a));
                            });
                            this.$c = true;
                        }
                    },
                    _h: function () {
                        if (this.th == 1) {
                            var a = this.oh.indexOf(true);
                            this.Zc = a;
                            if (a == -1) {
                                return;
                            }
                            var b = this.mh();
                            if (b.length > 0) {
                                b.forEach(function (a) {
                                    var b = a.LineAnimation;
                                    var c = this.ph(a.Line.typeIdentifier);
                                    b.play(c);
                                }, this);
                                this.oh[a] = false;
                                if (++a < this.oh.length) {
                                    this.oh[a] = true;
                                } else {
                                    this.Zc = a;
                                }
                            }
                        }
                    },
                    uh: function () {
                        if (this.mh().length < 1) {
                            this.bh();
                        } else if (this.th == 1) {
                            this._h();
                        }
                    },
                    ph: function (a) {
                        var b;
                        switch (a) {
                            case d.HEAD:
                                b = this.animationInverted == 1 ? this.animtionReverseHeaderLineName : this.animtionHeaderLineName;
                                break;
                            case d.TAIL:
                                b = this.animationInverted == 1 ? this.animtionReverseTailLineName : this.animtionTailLineName;
                                break;
                            default:
                                b = this.animationInverted == 1 ? this.animtionReverseLineName : this.animtionLineName;
                        }
                        return b;
                    },
                    mh: function () {
                        var a = this;
                        var b = [];
                        Object.keys(this.Xc).map(function (c) {
                            var d = a.Xc[c];
                            if (d.length >= a.Zc + 1) {
                                var e = d[a.Zc];
                                b.push(e);
                            }
                        });
                        return b;
                    },
                    bh: function () {
                        var a = this;
                        if (this.animtionLoop == 1) {
                            Object.keys(this.Xc).map(function (b) {
                                a.Xc[b].forEach(function (a) {
                                    var b = a.LineAnimation;
                                    b.setCurrentTime(0);
                                    b.stop();
                                });
                            });
                            this.vh();
                            this.oh[0] = true;
                            this.scheduleOnce(this._h);
                        } else {
                            this.th = false;
                        }
                        var b = this.hh;
                        if (b) {
                            b();
                        }
                    },
                    fh: function (a, b) {
                        if (a && a.length > 0) {
                            a.forEach(function (a) {
                                a.LinePrefabController.setAnimTimeFrameCallback(null);
                                var b = a.LineAnimation;
                                b.setCurrentTime(0);
                                b.stop();
                                a.parent = null;
                                if (a.Line.typeIdentifier == d.HEAD) {
                                    this.sh.put(a.Line);
                                } else if (a.Line.typeIdentifier == d.TAIL) {
                                    this.eh.put(a.Line);
                                } else {
                                    this.ih.put(a.Line);
                                }
                            }, this);
                            delete this.Xc[b];
                        }
                    },
                    vh: function () {
                        for (var a = 0; a < this.oh.length; a++) {
                            this.oh[a] = false;
                        }
                    },
                    rh: function (a) {
                        if (a == 0) {
                            return 0;
                        } else if (a > 0) {
                            return a * -1;
                        } else {
                            return Math.abs(a);
                        }
                    },
                    Sh: function (a) {
                        var b = this.angleMarginRatio;
                        return Math.abs(a) / 180 * b;
                    },
                    lh: function (a) {
                        var b = this;
                        if (!Array.isArray(a)) {
                            throw Error("Line Node is not an array");
                        }
                        var c = [];
                        a.forEach(function (a) {
                            var d = Object.create(null);
                            var e = b.ah(a, "line");
                            d.Line = a;
                            d.LinePrefabController = e.getComponent("LinePrefabController");
                            d.LineAnimation = e.getComponent(cc.Animation);
                            c.push(d);
                        });
                        return c;
                    },
                    ah: function (a, b) {
                        var c = a.getChildByName(b);
                        if (c !== null) {
                            return c;
                        } else {
                            return a;
                        }
                    }
                });
                c.default = e;
                b.exports = c.default;
                cc._RF.pop();
            }
        }, {}],
        LinePrefabController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "275baJMs+tIcoOItOeSbgwO", "LinePrefabController")) {
                c.__esModule = true;
                c.default = undefined;
                var d = cc.Class({
                    extends: cc.Component,
                    properties: {},
                    onLoad: function () { },
                    unuse: function () {
                        var a = this.node.getComponent(cc.Animation);
                        if (a && a.setCurrentTime(0)) {
                            a.stop();
                        }
                        this.hh = null;
                    },
                    setAnimTimeFrameCallback: function (a) {
                        this.hh = a;
                    },
                    getAnimTimeFrameCallback: function () {
                        return this.hh;
                    },
                    onAnimTimeFrameCallback: function () {
                        var a = this.hh;
                        if (a) {
                            a();
                        }
                    },
                    destroy: function () {
                        this.hh = null;
                        var a = this.node.getComponent(cc.Animation);
                        if (a) {
                            a.stop();
                        }
                        this.node.destroy();
                        this._super();
                    }
                });
                c.default = d;
                b.exports = c.default;
                cc._RF.pop();
            }
        }, {}],
        Line: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "fbd9fUvpvVLs5ubCe3O9Csy", "Line")) {
                c.__esModule = true;
                c.Line = undefined;
                var d;
                var e = (d = a("LineController")) && d.__esModule ? d : {
                    default: d
                };
                var f = {
                    init: function (a, b, c, d, f) {
                        if (a == null) {
                            throw Error("WinningLine :: init : lineHolder is required!");
                        }
                        this.gh = [];
                        var g = new cc.Node();
                        g.anchorX = 0;
                        g.anchorY = 0;
                        g.x = b / 2 * -1;
                        a.addChild(g);
                        var h = this.Ch = g.addComponent(e.default);
                        h.headerLinePrefab = c;
                        h.linePrefab = d;
                        h.tailLinePrefab = f;
                    },
                    updateLineMargin: function (a, b, c) {
                        if (a === undefined) {
                            a = 10;
                        }
                        if (b === undefined) {
                            b = 10;
                        }
                        if (c === undefined) {
                            c = 10;
                        }
                        var d = this.Ch;
                        d.headerLineMargin = a;
                        d.lineMargin = b;
                        d.tailLineMargin = c;
                    },
                    updateLineAnimName: function (a, b, c) {
                        if (a === undefined) {
                            a = "header_line";
                        }
                        if (b === undefined) {
                            b = "line";
                        }
                        if (c === undefined) {
                            c = "tail_line";
                        }
                        var d = this.Ch;
                        d.animtionHeaderLineName = a;
                        d.animtionLineName = b;
                        d.animtionTailLineName = c;
                    },
                    updateLineReverseAnimName: function (a, b, c) {
                        if (a === undefined) {
                            a = "header_line";
                        }
                        if (b === undefined) {
                            b = "line";
                        }
                        if (c === undefined) {
                            c = "tail_line";
                        }
                        var d = this.Ch;
                        d.animtionReverseHeaderLineName = a;
                        d.animtionReverseLineName = b;
                        d.animtionReverseTailLineName = c;
                    },
                    setLineMap: function (a) {
                        if (a === undefined) {
                            a = [];
                        }
                        this.gh = a;
                    },
                    showLines: function (a) {
                        if (a === undefined) {
                            a = [];
                        }
                        a.forEach(function (a) {
                            this.Ch.addLine(this.gh[a - 1], a);
                        }, this);
                    },
                    hideLine: function (a) {
                        this.Ch.removeLine(a);
                    },
                    hideAllLines: function () {
                        this.Ch.removeAllLines();
                    },
                    stopLineAnimation: function () {
                        this.Ch.stopAnimation();
                    },
                    startLineAnimation: function (a, b, c) {
                        if (a === undefined) {
                            a = true;
                        }
                        if (b === undefined) {
                            b = false;
                        }
                        var d = this.Ch;
                        d.animtionLoop = a;
                        d.animationInverted = b;
                        d.setCallbackForAnimationFinish(c);
                        d.startAnimation();
                    }
                };
                c.Line = f;
                cc._RF.pop();
            }
        }, {
            LineController: "LineController"
        }],
        ListViewCellUpdateAnim: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "5502dsWooBCr7Ubvh4+KVSO", "ListViewCellUpdateAnim")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = cc._decorator.ccclass;
                var f = function () {
                    function a() { }
                    a.prototype.layoutDuration = function () {
                        return 0.5;
                    };
                    a.prototype.layoutDelay = function () {
                        return 0.5;
                    };
                    a.prototype.updateCellAmimation = function () { };
                    a.prototype.animationEnd = function () { };
                    return __decorate([e], a);
                }();
                c.default = f;
                cc._RF.pop();
            }
        }, {}],
        ListViewEnum: [function (a, b, c) {
            'use strict';

            var d = {
                value: true
            };
            if (!cc._RF.push(b, "1db1bgDOdFP2LjHMP1kDfIt", "ListViewEnum")) {
                Object.defineProperty(c, "__esModule", d);
                c.cellUpdateAction = c.scrollPosition = undefined;
                (function (a) {
                    a[a.scrollPositionTop = 0] = "scrollPositionTop";
                    a[a.scrollPositionMiddle = 1] = "scrollPositionMiddle";
                    a[a.scrollPositionBottom = 2] = "scrollPositionBottom";
                })(c.scrollPosition || (c.scrollPosition = {}));
                (function (a) {
                    a[a.cellUpdateActionInsert = 0] = "cellUpdateActionInsert";
                    a[a.cellUpdateActionRemove = 1] = "cellUpdateActionRemove";
                    a[a.cellUpdateActionUpdate = 2] = "cellUpdateActionUpdate";
                })(c.cellUpdateAction || (c.cellUpdateAction = {}));
                cc._RF.pop();
            }
        }, {}],
        ListView: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "3d710qNmRNP1LLRNNBcLNnF", "ListView")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("ListViewEnum");
                var f = cc._decorator;
                var g = f.ccclass;
                var h = f.property;
                var i = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.view = undefined;
                        b.contentWidget = undefined;
                        b.ni = {};
                        b.oi = {};
                        b.yh = [];
                        b.Mh = 0;
                        b.Ah = 0;
                        b.Ih = 0;
                        b.wh = 0;
                        b.Oh = false;
                        b.Hh = false;
                        b.Bh = false;
                        b.ci = undefined;
                        return b;
                    }
                    var c = {
                        get: function () {
                            return this.ni;
                        },
                        enumerable: false,
                        configurable: true
                    };
                    var d = {
                        get: function () {
                            return this.oi;
                        },
                        enumerable: false,
                        configurable: true
                    };
                    var f = {
                        get: function () {
                            return this.yh;
                        },
                        enumerable: false,
                        configurable: true
                    };
                    __extends(b, a);
                    Object.defineProperty(b.prototype, "nodePools", c);
                    Object.defineProperty(b.prototype, "templates", d);
                    Object.defineProperty(b.prototype, "visibleCells", f);
                    b.prototype.onLoad = function () {
                        this.content.originY = this.content.y;
                    };
                    b.prototype.start = function () {
                        a.prototype.start.call(this);
                        cc.director.once(cc.Director.EVENT_AFTER_DRAW, this.Gh, this);
                    };
                    b.prototype.onDisable = function () {
                        a.prototype.onDisable.call(this);
                        this.content.off("position-changed", this.Nh, this);
                        this.node.off("scroll-to-top", this.Th, this);
                        this.node.off("scroll-to-bottom", this.Ph, this);
                        this.node.off("scroll-ended", this.Rh, this);
                        this.node.off("scrolling", this.Lh, this);
                        this.node.off("size-changed", this.ui, this);
                    };
                    b.prototype.onEnable = function () {
                        a.prototype.onEnable.call(this);
                        this.content.on("position-changed", this.Nh, this);
                        this.node.on("scroll-to-top", this.Th, this);
                        this.node.on("scroll-to-bottom", this.Ph, this);
                        this.node.on("scroll-ended", this.Rh, this);
                        this.node.on("scrolling", this.Lh, this);
                        this.node.on("size-changed", this.ui, this);
                        if (this.Hh) {
                            this.reloadData();
                            this.Hh = false;
                        }
                    };
                    b.prototype.viewWillLayoutSubviews = function () { };
                    b.prototype.viewDidLayoutSubviews = function () {
                        var a = this.node.width;
                        var b = this.node.height;
                        this.view.setContentSize(a, b);
                        this.content.width = a;
                        for (; this.Eh();) {
                            this.kh();
                        }
                        for (; this.Uh();) {
                            this.jh();
                        }
                        for (; this.Dh();) {
                            this.Wh();
                        }
                        for (; this.xh();) {
                            this.Fh();
                        }
                    };
                    b.prototype.setDataSource = function (a) {
                        this.ci = a;
                    };
                    b.prototype.register = function (a, b, c) {
                        if (this.nodePools[a]); else if (b) {
                            var d;
                            d = c ? new cc.NodePool(c) : new cc.NodePool();
                            this.templates[a] = b;
                            this.nodePools[a] = d;
                        }
                    };
                    b.prototype.dequeueReusableItem = function (a) {
                        var b;
                        var c = this.nodePools[a];
                        if (c) {
                            if (!(b = c.get())) {
                                var d = this.templates[a];
                                b = cc.instantiate(d);
                            }
                            b.lv_type = a;
                        }
                        return b;
                    };
                    b.prototype.reloadData = function () {
                        var a = this;
                        if (this.ci) {
                            if (this.Vh) {
                                this.stopAutoScroll();
                                var b = this.yh;
                                var c = this.Ih = this.ci.getCount(this);
                                var d = 0;
                                var e = 0;
                                var f = 0;
                                if (b && b.length && b.length > 0) {
                                    d = (v = b[0]).listViewIndex;
                                    e = j(v);
                                    f = b[b.length - 1].listViewIndex;
                                }
                                this.Oh = true;
                                if (b && b.length && (c === 0 || f >= c)) {
                                    for (var g = b.length - 1; f >= c && (n = b[g]);) {
                                        if (n) {
                                            this.vi(n);
                                        }
                                        f--;
                                        g--;
                                    }
                                }
                                var h = this.yh = [];
                                if (d < c) {
                                    for (var i = 0, m = (g = d, e); g < c && this.Eh();) {
                                        var n;
                                        if (n = this.zh(g, b)) {
                                            this.vi(n);
                                        }
                                        if (t = this.ci.getItem(this, g)) {
                                            t.lv_type;
                                            t.x = 0;
                                            t.y = m - t.height * t.anchorY;
                                            t.listViewIndex = g;
                                            i += t.height;
                                            this.content.addChild(t);
                                            h.push(t);
                                            m = l(t);
                                            g++;
                                        }
                                    }
                                    var o = this.content.originY - m - this.view.height;
                                    this.content.height = Math.abs(m);
                                    if (i < this.view.height && d > 0) {
                                        g = d - 1;
                                        for (var p = this.view.height - i, r = 0, s = e; g >= 0 && r < p;) {
                                            if (t = this.ci.getItem(this, g)) {
                                                t.lv_type;
                                                t.x = 0;
                                                t.y = s + t.height * (1 - t.anchorY);
                                                t.listViewIndex = g;
                                                r += t.height;
                                                this.content.addChild(t);
                                                h.unshift(t);
                                                s = j(t);
                                                g--;
                                            }
                                        }
                                        this.content.runAction(cc.sequence(cc.moveTo(0.2, cc.v2(0, o)), cc.callFunc(function () {
                                            a.content.y = o;
                                            a.content.oldY = o;
                                            a.Oh = false;
                                            a.qh();
                                        })));
                                    } else {
                                        this.Oh = false;
                                        this.qh();
                                    }
                                } else {
                                    i = 0;
                                    g = c - 1;
                                    s = -c * this.wh;
                                    for (; g >= 0 && i < this.view.height;) {
                                        var t;
                                        if (t = this.ci.getItem(this, g)) {
                                            t.lv_type;
                                            t.x = 0;
                                            t.y = s + t.height * (1 - t.anchorY);
                                            t.listViewIndex = g;
                                            i += t.height;
                                            this.content.addChild(t);
                                            h.unshift(t);
                                            s = j(t);
                                            g--;
                                        }
                                    }
                                    p = 0;
                                    if (i > this.view.height) {
                                        p = i - this.view.height;
                                    } else if (i < this.view.height) {
                                        this.Jh(true);
                                    }
                                    var u = this.content.originY + p;
                                    this.content.runAction(cc.sequence(cc.moveTo(0.2, cc.v2(0, u)), cc.callFunc(function () {
                                        a.content.y = u;
                                        a.content.oldY = u;
                                        a.Oh = false;
                                        a.qh();
                                    })));
                                }
                                if (h.length && h.length > 0) {
                                    var v = h[0];
                                    var x = h[h.length - 1];
                                    this.wh = (j(v) - l(x)) / (x.listViewIndex - v.listViewIndex + 1);
                                    this.content.height = this.wh * c;
                                }
                            } else {
                                this.Hh = true;
                            }
                        }
                    };
                    b.prototype.scrollToRow = function (a, b, c) {
                        var d = this;
                        if (b === undefined) {
                            b = e.scrollPosition.scrollPositionTop;
                        }
                        if (c === undefined) {
                            c = true;
                        }
                        this.stopAutoScroll();
                        var f = this.content.y;
                        if (!(a < 0 || a >= this.Ih)) {
                            var g = this.yh;
                            if (g && g.length && !(g.length <= 0)) {
                                this.content.off("position-changed", this.Nh, this);
                                var h = this.Ah = a;
                                g = this.Kh(h, g);
                                this.yh = g;
                                if (g[0].listViewIndex === 0) {
                                    this.Jh(true);
                                }
                                var i;
                                var j;
                                var k = this.itemAtIndex(a);
                                var l = g.indexOf(k);
                                var n = 0;
                                j = b === e.scrollPosition.scrollPositionTop ? 0 : b === e.scrollPosition.scrollPositionMiddle ? this.view.height / 2 - k.height * k.anchorY : this.view.height;
                                if (b === e.scrollPosition.scrollPositionBottom) {
                                    n = (n = j - (o = this.Qh(l, g, j, false))) >= 0 ? n : 0;
                                    i = this.content.originY + Math.abs(k.y) + k.height * k.anchorY - j + n;
                                } else if (b === e.scrollPosition.scrollPositionTop) {
                                    var o = this.Qh(l, g, this.view.height - j, true);
                                    n = (n = this.view.height - j - o) >= 0 ? n : 0;
                                    i = this.content.originY + Math.abs(k.y) - k.height * k.anchorY - j - n;
                                } else {
                                    o = this.Qh(l, g, this.view.height - j, true);
                                    if ((n = this.view.height - j - o) <= 0) {
                                        n = j - (o = this.Qh(l - 1, g, j, false));
                                    }
                                    n = n >= 0 ? n : 0;
                                    i = this.content.originY + Math.abs(k.y) - k.height * k.anchorY - j - n;
                                }
                                if (f === (i = i >= this.content.originY ? i : this.content.originY)) {
                                    this.content.y = i;
                                    this.content.oldY = i;
                                    this.Yh(h);
                                    this.content.on("position-changed", this.Nh, this);
                                    return;
                                }
                                if (c) {
                                    this.content.runAction(cc.sequence(cc.moveTo(0.2, cc.v2(this.content.x, i)), cc.callFunc(function () {
                                        d.content.y = i;
                                        d.content.oldY = i;
                                        d.Yh(h);
                                        d.content.on("position-changed", d.Nh, d);
                                    })));
                                } else {
                                    this.content.y = i;
                                    this.content.oldY = i;
                                    this.Yh(h);
                                    this.content.on("position-changed", this.Nh, this);
                                }
                            }
                        }
                    };
                    b.prototype.visibleItems = function () {
                        return this.yh;
                    };
                    b.prototype.itemAtIndex = function (a) {
                        return this.zh(a, this.yh);
                    };
                    b.prototype.insertCellAtIndex = function (a, b) {
                        var c = this;
                        if (b === undefined) {
                            b = true;
                        }
                        if (!(a > this.Ih)) {
                            this.stopAutoScroll();
                            this.Ih += 1;
                            this.content.height = this.wh * this.Ih;
                            var d = this.itemAtIndex(a);
                            var f = this.yh;
                            var g = this.Xh;
                            if (!d) {
                                var h = f[0];
                                if (h.listViewIndex > a) {
                                    this.Zh(0, h.listViewIndex + 1);
                                } else if (this.Eh()) {
                                    this.kh();
                                }
                                if (g) {
                                    g.updateCellAmimation(null, e.cellUpdateAction.cellUpdateActionInsert);
                                }
                                if (g) {
                                    g.animationEnd();
                                }
                                return;
                            }
                            var i = f.indexOf(d);
                            var k = j(d);
                            var m = this.ci.getItem(this, a);
                            m.x = 0;
                            m.y = k - m.height * m.anchorY;
                            m.listViewIndex = a;
                            this.content.addChild(m);
                            f.splice(i, 0, m);
                            k = l(m);
                            this.Zh(i + 1, a + 1);
                            if (g) {
                                g.updateCellAmimation(m, e.cellUpdateAction.cellUpdateActionInsert);
                            }
                            this.$h(i + 1, k, e.cellUpdateAction.cellUpdateActionInsert, b, function () {
                                for (; c.xh();) {
                                    c.Fh();
                                }
                                c.tr();
                                c.ir = false;
                            });
                        }
                    };
                    b.prototype.removeCellAtIndex = function (a, b) {
                        var c = this;
                        if (b === undefined) {
                            b = true;
                        }
                        if (!(a >= this.Ih)) {
                            var d = this.yh;
                            this.Ih -= 1;
                            var f = this.itemAtIndex(a);
                            var g = this.Xh;
                            if (!f) {
                                var h = d[0];
                                if (h.listViewIndex > a) {
                                    this.Zh(0, h.listViewIndex - 1);
                                }
                                if (g) {
                                    g.updateCellAmimation(null, e.cellUpdateAction.cellUpdateActionRemove);
                                }
                                if (g) {
                                    g.animationEnd();
                                }
                                return;
                            }
                            this.stopAutoScroll();
                            var i = d.indexOf(f);
                            var k = j(f);
                            d.splice(i, 1);
                            this.Zh(i, a);
                            if (this.Xh) {
                                g.updateCellAmimation(f, e.cellUpdateAction.cellUpdateActionRemove, function () {
                                    c.vi(f);
                                    f.removeFromParent();
                                });
                            } else {
                                this.vi(f);
                                f.removeFromParent();
                            }
                            this.$h(i, k, e.cellUpdateAction.cellUpdateActionRemove, b, function () {
                                for (; c.Dh();) {
                                    c.Wh();
                                }
                                for (; c.Eh();) {
                                    c.kh();
                                }
                                c.tr();
                                c.ir = false;
                            });
                        }
                    };
                    b.prototype.updateCellAtIndex = function (a, b) {
                        var c = this;
                        if (b === undefined) {
                            b = true;
                        }
                        var d = this.itemAtIndex(a);
                        if (d) {
                            var f = this.yh;
                            var g = f.indexOf(d);
                            var h = j(d);
                            var i = d.height;
                            var m = this.ci.getItem(this, a);
                            if (m && (this.vi(d), m.x = 0, m.y = h - m.height * m.anchorY, m.listViewIndex = a, this.content.addChild(m), f[g] = m, i !== m.height)) {
                                h = l(m);
                                this.$h(g + 1, h, e.cellUpdateAction.cellUpdateActionUpdate, b, function () {
                                    if (i < m.height) {
                                        for (; c.xh();) {
                                            c.Fh();
                                        }
                                    } else {
                                        for (; c.Eh();) {
                                            c.kh();
                                        }
                                    }
                                    c.tr();
                                    c.ir = false;
                                });
                            }
                        }
                    };
                    b.prototype.setScrollToTopCallback = function (a) {
                        this.sr = a;
                    };
                    b.prototype.setScrollToBottomCallback = function (a) {
                        this.er = a;
                    };
                    b.prototype.setScrollEndedCallback = function (a) {
                        this.nr = a;
                    };
                    b.prototype.setScrollingCallback = function (a) {
                        this.or = a;
                    };
                    b.prototype.setCellUpdateAnimCallback = function (a) {
                        this.Xh = a;
                    };
                    b.prototype.Gh = function () {
                        if (this.contentWidget) {
                            this.contentWidget.isAlignTop = false;
                        }
                    };
                    b.prototype.vi = function (a) {
                        var b;
                        var c = a.lv_type;
                        if (c) {
                            b = this.nodePools[c];
                        }
                        if (b) {
                            b.put(a);
                        }
                    };
                    b.prototype.tr = function () {
                        var a = this.yh;
                        if (a.length > 0) {
                            var b = a[a.length - 1];
                            var c = a[0];
                            var d = Math.abs(b.y) + b.height * b.anchorY;
                            if (d > this.content.height) {
                                this.content.height = d;
                            } else if (d < this.view.height && c.listViewIndex === 0) {
                                this.content.y = this.content.originY;
                                this.content.oldY = this.content.originY;
                                this.content.height = d;
                            } else if (b.listViewIndex === this.Ih - 1) {
                                this.content.height = d;
                            }
                        } else {
                            this.content.height = 0;
                        }
                    };
                    b.prototype.cr = function () {
                        var a = this.yh;
                        if (a && a.length && !(a.length <= 0)) {
                            var b = a[0];
                            var c = j(b);
                            var d = a[a.length - 1];
                            if (b.listViewIndex !== 0 || c === 0) {
                                if (c > -this.wh && b.listViewIndex > 1) {
                                    this.hr(true);
                                } else if (d.listViewIndex === this.Ih - 1 && Math.abs(d.y) + d.height * d.anchorY < this.content.height) {
                                    this.hr(true);
                                } else if (Math.abs(d.y) + d.height * d.anchorY > this.content.height) {
                                    this.hr(false);
                                }
                            } else {
                                this.hr(true);
                            }
                        }
                    };
                    b.prototype.hr = function (a, b) {
                        if (b === undefined) {
                            b = true;
                        }
                        this.Oh = true;
                        this.Jh(a);
                        this.Oh = false;
                        this.Jn.y = this.content.y;
                        if (b) {
                            this.rr();
                        }
                    };
                    b.prototype.Jh = function (a) {
                        var b = this.yh;
                        if (b && b.length && !(b.length <= 0)) {
                            this.stopAutoScroll();
                            if (a) {
                                for (var c = -b[0].listViewIndex * this.wh, d = 0; d < b.length;) {
                                    (f = b[d]).x = 0;
                                    f.y = c - f.height * f.anchorY;
                                    c = l(f);
                                    d++;
                                }
                            } else {
                                var e = -b[b.length - 1].listViewIndex * this.wh;
                                for (d = b.length - 1; d >= 0;) {
                                    var f;
                                    (f = b[d]).x = 0;
                                    f.y = e - f.height * f.anchorY + f.height;
                                    e = j(f);
                                    d--;
                                }
                            }
                            var g = b[0];
                            var h = this.content.originY - l(g);
                            this.content.y = h;
                            this.content.oldY = h;
                            this.tr();
                        }
                    };
                    b.prototype.rr = function () {
                        this.zn = true;
                        this.Qn = this.ar;
                        this.Yn = 0;
                        this.Kn = this.ur;
                    };
                    b.prototype.Eh = function () {
                        var a = false;
                        var b = this.yh;
                        if (b.length > 0) {
                            var c = b[b.length - 1];
                            if (c.listViewIndex === this.Ih - 1) {
                                return false;
                            }
                            var d = l(c);
                            var e = this.content.convertToWorldSpaceAR(cc.v2(0, d));
                            var f = l(this.view);
                            var g = this.view.parent.convertToWorldSpaceAR(cc.v2(0, f));
                            if (e.y >= g.y) {
                                a = true;
                            }
                        } else if (b.length === 0 && this.Ih > 0) {
                            a = true;
                        }
                        return a;
                    };
                    b.prototype.Dh = function () {
                        var a = false;
                        var b = this.yh;
                        if (b.length > 0) {
                            var c = b[0];
                            if (c.listViewIndex === 0) {
                                return false;
                            }
                            var d = j(c);
                            var e = this.content.convertToWorldSpaceAR(cc.v2(0, d));
                            var f = j(this.view);
                            var g = this.view.parent.convertToWorldSpaceAR(cc.v2(0, f));
                            if (e.y <= g.y) {
                                a = true;
                            }
                        }
                        return a;
                    };
                    b.prototype.xh = function () {
                        var a = false;
                        var b = this.yh;
                        if (b.length > 1) {
                            var c = j(b[b.length - 1]);
                            var d = this.content.convertToWorldSpaceAR(cc.v2(0, c));
                            var e = l(this.view);
                            var f = this.view.parent.convertToWorldSpaceAR(cc.v2(0, e));
                            if (d.y < f.y) {
                                a = true;
                            }
                        }
                        return a;
                    };
                    b.prototype.Uh = function () {
                        var a = false;
                        var b = this.yh;
                        if (b.length > 1) {
                            var c = l(b[0]);
                            var d = this.content.convertToWorldSpaceAR(cc.v2(0, c));
                            var e = j(this.view);
                            var f = this.view.parent.convertToWorldSpaceAR(cc.v2(0, e));
                            if (d.y > f.y) {
                                a = true;
                            }
                        }
                        return a;
                    };
                    b.prototype.kh = function () {
                        var a = this.yh;
                        if (a.length > 0) {
                            var b = this.Ih;
                            var c = a[a.length - 1];
                            var d = c.listViewIndex + 1;
                            if (d < b) {
                                var e = this.ci.getItem(this, d);
                                e.lv_type;
                                var f = l(c);
                                e.x = 0;
                                e.y = f - e.height * e.anchorY;
                                e.listViewIndex = d;
                                this.content.addChild(e);
                                a.push(e);
                            }
                        }
                    };
                    b.prototype.Wh = function () {
                        var a = this.yh;
                        if (a.length > 0) {
                            var b = a[0];
                            var c = b.listViewIndex - 1;
                            if (c >= 0) {
                                var d = this.ci.getItem(this, c);
                                d.lv_type;
                                var e = j(b);
                                d.x = 0;
                                d.y = e - d.height * d.anchorY + d.height;
                                d.listViewIndex = c;
                                this.content.addChild(d);
                                a.unshift(d);
                            }
                        }
                    };
                    b.prototype.jh = function () {
                        var a = this.yh;
                        if (a.length > 0) {
                            var b = a[0];
                            this.vi(b);
                            a.shift();
                        }
                    };
                    b.prototype.Fh = function () {
                        var a = this.yh;
                        if (a.length > 0) {
                            var b = a[a.length - 1];
                            this.vi(b);
                            a.pop();
                        }
                    };
                    b.prototype.lr = function () {
                        var a = this.yh;
                        if (a.length > 0) {
                            for (var b = 0; b < a.length && this.Uh();) {
                                this.jh();
                                b++;
                            }
                        }
                    };
                    b.prototype.dr = function () {
                        var a = this.yh;
                        if (a.length > 0) {
                            for (var b = a[a.length - 1]; b >= 0 && this.xh();) {
                                this.Fh();
                                b--;
                            }
                        }
                    };
                    b.prototype.Yh = function (a) {
                        this.lr();
                        this.dr();
                        var b = this.yh;
                        var c = this.itemAtIndex(a);
                        var d = b.indexOf(c);
                        if (d !== -1) {
                            var e = d;
                            var f = [];
                            var h = -1;
                            var i = -1;
                            if (b.length > e) {
                                var j = b[e];
                                var l = j.listViewIndex;
                                e++;
                                f.push(j);
                                for (; e < b.length;) {
                                    if ((m = (p = b[e]).listViewIndex) - l != 1) {
                                        h = m;
                                        break;
                                    }
                                    f.push(p);
                                    e++;
                                    l = m;
                                }
                                e = d - 1;
                                l = j.listViewIndex;
                                for (; e >= 0;) {
                                    var m;
                                    if (l - (m = (p = b[e]).listViewIndex) != 1) {
                                        i = m;
                                        break;
                                    }
                                    f.unshift(p);
                                    e--;
                                    l = m;
                                }
                            }
                            if (h >= 0) {
                                for (var n = this.itemAtIndex(h), o = b.indexOf(n); b.length > o;) {
                                    var p = b[o];
                                    this.vi(p);
                                    o++;
                                }
                            }
                            if (i >= 0) {
                                for (var r = this.itemAtIndex(i), g = b.indexOf(r); g >= 0;) {
                                    p = b[g];
                                    this.vi(p);
                                    g--;
                                }
                            }
                            this.yh = f;
                        }
                    };
                    b.prototype.vr = function (a, b) {
                        for (var c = this.yh, d = c[0], e = c[c.length - 1], f = a, g = 0, h = []; f < this.Ih && g <= b && f !== d.listViewIndex && f !== e.listViewIndex;) {
                            var i = this.ci.getItem(this, f);
                            i.listViewIndex = f;
                            this.content.addChild(i);
                            h.push(i);
                            g += i.height;
                            f++;
                        }
                        return h;
                    };
                    b.prototype._r = function (a, b) {
                        for (var c = this.yh, d = c[0], e = c[c.length - 1], f = a, g = 0, h = []; f >= 0 && g <= b && f !== d.listViewIndex && f !== e.listViewIndex;) {
                            var i = this.ci.getItem(this, f);
                            i.listViewIndex = f;
                            this.content.addChild(i);
                            h.unshift(i);
                            g += i.height;
                            f--;
                        }
                        return h;
                    };
                    b.prototype.mr = function (a, b) {
                        if (!b || !b.length || b.length <= 0) {
                            return null;
                        }
                        for (var c = 0; c < b.length; c++) {
                            var d = b[c];
                            d.x = 0;
                            d.y = a - d.height * d.anchorY;
                            a -= d.height;
                        }
                        return b;
                    };
                    b.prototype.pr = function (a, b) {
                        if (!b || !b.length || b.length <= 0) {
                            return null;
                        }
                        for (var c = b.length - 1; c >= 0; c--) {
                            var d = b[c];
                            d.x = 0;
                            d.y = a + d.height * d.anchorY;
                            a += d.height;
                        }
                        return b;
                    };
                    b.prototype.Qh = function (a, b, c, d) {
                        var e = a;
                        var f = 0;
                        if (d) {
                            for (var g = e; g < b.length && !((f += b[g].height) >= c); g++);
                        } else {
                            for (g = e; g >= 0 && !((f += b[g].height) >= c); g--);
                        }
                        return f;
                    };
                    b.prototype.Kh = function (a, b) {
                        var c;
                        var d;
                        var e = b[0];
                        var f = b[b.length - 1];
                        var g = this.view.height;
                        if (a >= e.listViewIndex && a <= f.listViewIndex) {
                            c = this.vr(f.listViewIndex + 1, g);
                            d = this._r(e.listViewIndex - 1, g);
                            c = this.mr(l(f), c);
                            if (d = this.pr(j(e), d)) {
                                b = d.concat(b);
                            }
                            if (c) {
                                b = b.concat(c);
                            }
                        } else {
                            var h = a;
                            c = this.vr(h, g);
                            h = a;
                            var i = undefined;
                            i = (d = this._r(h - 1, g)) && c ? d.concat(c) : d || c;
                            if (a > f.listViewIndex) {
                                i = this.mr(l(f), i);
                                b = b.concat(i);
                            } else if (i = this.pr(j(e), i)) {
                                b = i.concat(b);
                            }
                        }
                        return b;
                    };
                    b.prototype.br = function () {
                        var a = this.yh;
                        return !(a.length > 0) || a[a.length - 1].listViewIndex === this.Ih - 1;
                    };
                    b.prototype.zh = function (a, b) {
                        if (!b || !b.length || b.length <= 0) {
                            return null;
                        }
                        for (var c = null, d = 0; d < b.length;) {
                            var e = b[d];
                            if (e.listViewIndex === a) {
                                c = e;
                                break;
                            }
                            d++;
                        }
                        return c;
                    };
                    b.prototype.qh = function () {
                        this.tr();
                        if (this.ci.didReloadData) {
                            this.ci.didReloadData(this);
                        }
                    };
                    b.prototype.$h = function (a, b, c, d, e) {
                        var f = this;
                        var g = this.Xh;
                        this.ir = true;
                        for (var h, i = this.yh, j = g ? g.layoutDuration() : 0.5, k = g ? g.layoutDelay(c) : 0, l = function (a) {
                            var c = i[a];
                            var l = c.y;
                            var n = b - c.height * c.anchorY;
                            b = n - c.height * c.anchorY;
                            if (a === i.length - 1) {
                                h = Math.abs(n) + c.height * c.anchorY;
                            }
                            if (l !== n && d) {
                                c.runAction(cc.sequence(cc.delayTime(k), cc.moveTo(j, cc.v2(c.x, n)), cc.callFunc(function () {
                                    c.y = n;
                                    if (a === i.length - 1) {
                                        f.Sr(h);
                                        if (e) {
                                            e();
                                        }
                                        if (g) {
                                            g.animationEnd();
                                        }
                                    }
                                })));
                            } else {
                                c.y = n;
                                if (a === i.length - 1) {
                                    m.Sr(h);
                                    if (e) {
                                        e();
                                    }
                                    if (g) {
                                        g.animationEnd();
                                    }
                                }
                            }
                        }, m = this, n = a; n < i.length; n++) {
                            l(n);
                        }
                        if (a >= i.length) {
                            if (e) {
                                e();
                            }
                            if (g) {
                                g.animationEnd();
                            }
                        }
                    };
                    b.prototype.Sr = function (a) {
                        var b = a + this.content.originY - this.content.y - this.view.height;
                        if (b < 0) {
                            this.content.oldY += b;
                            this.content.y += b;
                        }
                    };
                    b.prototype.Zh = function (a, b) {
                        for (var c = this.yh, d = a; d < c.length; d++) {
                            c[d].listViewIndex = b;
                            b += 1;
                        }
                    };
                    b.prototype.Nh = function () {
                        var a = this.content;
                        var b = a.y - a.oldY;
                        a.oldY = a.y;
                        if (!this.Oh) {
                            if (b > 0) {
                                for (; this.Eh();) {
                                    this.kh();
                                }
                                for (; this.Uh();) {
                                    this.jh();
                                }
                            } else if (b < 0) {
                                for (; this.Dh();) {
                                    this.Wh();
                                }
                                for (; this.xh();) {
                                    this.Fh();
                                }
                            }
                            this.cr();
                        }
                    };
                    b.prototype.Th = function () {
                        this.gr = true;
                    };
                    b.prototype.Ph = function () {
                        this.Cr = true;
                    };
                    b.prototype.Rh = function () {
                        if (this.nr) {
                            this.nr();
                        }
                    };
                    b.prototype.Lh = function () {
                        var a = this.xi();
                        if (this.or) {
                            this.or(a.y);
                        }
                    };
                    b.prototype.ui = function () {
                        this.viewDidLayoutSubviews();
                    };
                    b.prototype.stopAutoScroll = function () {
                        if (this.Oh) {
                            this.ar = this.Qn - this.Yn;
                            var b = Math.min(1, this.Yn / this.Qn);
                            if (this.qn) {
                                d = b;
                                b = (d -= 1) * d * d * d * d + 1;
                            }
                            this.ur = (c = 1 - b, this.Kn.mul(c));
                        }
                        var c;
                        var d;
                        a.prototype.stopAutoScroll.call(this);
                    };
                    b.prototype.Fi = function () {
                        var b = this;
                        if (this.gr && this.sr) {
                            var c = this.xi();
                            this.sr(function () {
                                b.gr = false;
                                b.po(cc.v2(0, 0));
                            }, c);
                        } else if (this.Cr && this.er && this.br()) {
                            this.er(function (a) {
                                b.Cr = false;
                                var c = b.Ih = b.ci.getCount(b);
                                b.content.height = b.wh * c;
                                var d = b.yh;
                                if (d && d.length && d.length > 0) {
                                    var e = d[d.length - 1].listViewIndex;
                                    for (b.content.off("position-changed", b.Nh, b); e < c && b.Eh();) {
                                        b.kh();
                                        e += 1;
                                    }
                                    b.tr();
                                    b.content.on("position-changed", b.Nh, b);
                                }
                                if (a) {
                                    b.Fi();
                                }
                            });
                        } else {
                            this.gr = false;
                            this.Cr = false;
                            a.prototype.Fi.call(this);
                        }
                    };
                    b.prototype.Gi = function (b) {
                        if (!this.ir) {
                            a.prototype.Gi.call(this, b);
                        }
                    };
                    __decorate([h(cc.Node)], b.prototype, "view", undefined);
                    __decorate([h(cc.Widget)], b.prototype, "contentWidget", undefined);
                    return __decorate([g], b);
                }(cc.ScrollView);
                c.default = i;
                cc._RF.pop();
            }
            function j(a) {
                return a.y - a.height * a.anchorY + a.height;
            }
            function l(a) {
                return a.y - a.height * a.anchorY;
            }
        }, {
            ListViewEnum: "ListViewEnum"
        }],
        LoadingController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "d3b3aRS5uVIkp5h4hZ4Ux5H", "LoadingController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("ResourceLoader");
                var f = a("NoSoundAdapter");
                var g = a("GameAudioAdapter");
                var h = a("SettingMenuHelper");
                var i = a("AnalyticsHelper");
                var j = a("BVFrameworkEnum");
                var l = a("ErrorHandler");
                var m = a("QuitGameWithEvent");
                var n = a("LaunchConfig");
                var o = a("GeneralAssetConfig");
                var p = a("AudioAssetConfig");
                var r = a("CustomAssetConfig");
                var s = a("SymbolImageHandler");
                var k = a("SpineConfigHandler");
                var t = a("AudioManager");
                var u = cc._decorator;
                var q = u.ccclass;
                var v = u.property;
                var w = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.backgroundControllerHolder = undefined;
                        b.angpaoControllerHolder = undefined;
                        b.behindSlotHolder = undefined;
                        b.backgroundController2Holder = undefined;
                        b.bigWinControllerHolder = undefined;
                        b.clickEffectHolder = undefined;
                        b.infoBoardControllerHolder = undefined;
                        b.paySelectEffectControllerHolder = undefined;
                        b.payOutEffectControllerHolder = undefined;
                        b.payLineNumberControllerHolder = undefined;
                        b.settingMenuHolder = undefined;
                        b.slotControllerHolder = undefined;
                        b.spinButtonControllerHolder = undefined;
                        b.foregroundControllerHolder = undefined;
                        b.symbolPopoutControllerHolder = undefined;
                        b.featureWinControllerHolder = undefined;
                        b.trailParticleHolder = undefined;
                        b.tigerControllerHolder = undefined;
                        b.stickyControllerHolder = undefined;
                        b.uiShiftNode = undefined;
                        b.yr = new e.default();
                        b.ps = undefined;
                        b.Mr = undefined;
                        b.Ar = false;
                        b.Ir = "load resource fail";
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.setup = function (a) {
                        this.ps = a.generalControllers;
                        this.wr = a.bonusControllers;
                        this.Or();
                        this.Hr();
                        this.Br();
                        this.spinButtonControllerHolder.zIndex = j.EN_GAME_LAYER_Z_INDEX_HIGH + 50;
                        this.settingMenuHolder.zIndex = j.EN_GAME_LAYER_Z_INDEX_HIGH + 50;
                        this.bigWinControllerHolder.zIndex = j.EN_GAME_LAYER_Z_INDEX_HIGH + 50;
                    };
                    b.prototype.loadGeneralBundle = function (a, b) {
                        if (b === undefined) {
                            b = false;
                        }
                        var c = [].concat(o.generalAssetConfig, p.audioAssetConfig, r.customAssetConfig);
                        this.Ar = b;
                        this.Gr(c, this.Nr.bind(this), this.Tr.bind(this), a);
                    };
                    b.prototype.Gr = function (a, b, c, d) {
                        shell.setProgressVisible(true);
                        this.Mr = d;
                        var e = {
                            bundle: a,
                            progressCallback: b,
                            retryHandling: this.Pr.bind(this),
                            retryingCallback: this.Rr.bind(this),
                            retryMessage: shell.I18n.t("General.ResourceRetryMessage")
                        };
                        this.yr.loadBundle(e).then(c);
                    };
                    b.prototype.Or = function () {
                        var a = n.cs_Launch.noAudio === "1" ? f.default : g.default;
                        h.settingMenuHelper.initAudio(a);
                    };
                    b.prototype.Hr = function () {
                        Object.keys(t.GeneralAudioPool).forEach(function (a) {
                            p.audioAssetConfig.push({
                                name: a,
                                type: e.LoaderType.CUSTOM,
                                loadFunc: function (b, c) {
                                    t.loadAudio(t.GeneralAudioPool[a], function (a) {
                                        if (a) {
                                            c(a);
                                        }
                                        b(undefined);
                                    });
                                }
                            });
                        });
                        p.audioAssetConfig.push({
                            name: "general_audio",
                            type: e.LoaderType.CUSTOM,
                            loadFunc: function (a, b) {
                                t.loadAudio(t.generalGameAudio, function (c) {
                                    if (c) {
                                        b(c);
                                    }
                                    a(undefined);
                                });
                            }
                        });
                    };
                    b.prototype.Br = function () {
                        var a = {
                            setting_menu: h.settingMenuHelper.path + "prefab/setting_menu/setting_menu",
                            setting_menu_auto_spin_button: h.settingMenuHelper.path + "prefab/others/spin_options_button",
                            setting_menu_more_menu_button: h.settingMenuHelper.path + "prefab/others/more_menu_button",
                            setting_menu_setting_button: h.settingMenuHelper.path + "prefab/others/sound_button",
                            setting_menu_rules_button: h.settingMenuHelper.path + "prefab/others/rules_button",
                            setting_menu_payout_button: h.settingMenuHelper.path + "prefab/others/payout_button",
                            setting_menu_history_button: h.settingMenuHelper.path + "prefab/others/history_button",
                            setting_menu_hide_more_button: h.settingMenuHelper.path + "prefab/others/hide_more_menu_button",
                            setting_menu_minus_bet_button: h.settingMenuHelper.path + "prefab/others/minus_bet_button",
                            setting_menu_plus_bet_button: h.settingMenuHelper.path + "prefab/others/plus_bet_button",
                            setting_menu_smartbot_button: h.settingMenuHelper.path + "prefab/others/smartbot_button",
                            setting_menu_turbo_spin_button: h.settingMenuHelper.path + "prefab/others/turbo_spin_button",
                            setting_menu_quit_button: h.settingMenuHelper.path + "prefab/others/quit_button"
                        };
                        var b = a;
                        var c = {
                            name: "setting_menu_locale",
                            url: h.settingMenuHelper.path + "texture/hd/setting_menu_locale",
                            type: cc.SpriteAtlas,
                            isLocalized: true
                        };
                        r.customAssetConfig.push(c);
                        Object.keys(b).forEach(function (a) {
                            var c = {
                                name: a,
                                url: b[a],
                                type: cc.Prefab,
                                isLocalized: false
                            };
                            r.customAssetConfig.push(c);
                        });
                    };
                    b.prototype.Pr = function (a, b, c, d) {
                        var e = this;
                        var f = shell.Error;
                        var g = shell.ClientError;
                        var h = new f(g.Domain, g.GameLoadResourceError);
                        var j = d > 0 ? d : undefined;
                        i.sendLoadFailReport(j);
                        var k = this.Ar ? l.ErrContext.Launch : l.ErrContext.Preload;
                        l.showError(h, k, function (b) {
                            switch (b) {
                                case l.ErrAction.Retry:
                                    if (a) {
                                        a();
                                    }
                                    break;
                                case l.ErrAction.Quit:
                                    m.quitGameWithEvent(e.Ir)();
                            }
                        });
                    };
                    b.prototype.Rr = function (a) {
                        var b = a > 0 ? a : undefined;
                        i.sendLoadFailReport(b);
                    };
                    b.prototype.Nr = function (a, b) {
                        shell.setProgress(a, b);
                    };
                    b.prototype.Tr = function (a) {
                        var b;
                        var c;
                        var d = a.angpao_controller;
                        var e = a.background_controller;
                        var f = a.background_controller_2;
                        var g = a.big_win_controller;
                        var i = a.big_win_text;
                        var j = a.column_tint_controller;
                        var l = a.click_effect;
                        var m = a.h_firecracker_atlas_symbols;
                        var n = a.h_ingot_atlas_symbols;
                        var o = a.h_pouch_atlas_symbols;
                        var p = a.h_orange_atlas_symbols;
                        var q = a.h_angbao_atlas_symbols;
                        var r = a.h_ruyi_atlas_symbols;
                        var t = a.s_wild;
                        var u = a.info_board_controller;
                        var v = a.infoboard_text;
                        var w = a.infoboard_win_text;
                        var x = a.normal_symbol;
                        var y = a.setting_menu;
                        var z = a.setting_menu_auto_spin_button;
                        var A = a.setting_menu_more_menu_button;
                        var B = a.setting_menu_setting_button;
                        var C = a.setting_menu_rules_button;
                        var D = a.setting_menu_payout_button;
                        var E = a.setting_menu_history_button;
                        var F = a.setting_menu_hide_more_button;
                        var G = a.setting_menu_wallet_panel;
                        var H = a.setting_menu_locale;
                        var I = a.setting_menu_minus_bet_button;
                        var J = a.setting_menu_plus_bet_button;
                        var K = a.setting_menu_smartbot_button;
                        var L = a.setting_menu_turbo_spin_button;
                        var M = a.setting_menu_quit_button;
                        var N = a.spin_button_controller;
                        var O = a.slot_controller;
                        var P = a.slot_tint_controller;
                        var Q = a.pay_select_effect_controller;
                        var R = a.pay_line_number_controller;
                        var S = a.pay_line_controller;
                        var T = a.pay_out_effect_controller;
                        var U = a.wild_symbol;
                        var V = a.foreground_controller;
                        var W = a.symbol_popout_controller;
                        var X = a.trail_particle_controller;
                        var Y = a.tiger_controller;
                        var Z = a.sticky_controller;
                        b = cc.instantiate(X.result);
                        this.trailParticleHolder.addChild(b);
                        c = b.getComponent("TrailParticleEffectController");
                        this.ps.trailParticleEffectController = c;
                        b = cc.instantiate(Z.result);
                        this.stickyControllerHolder.addChild(b);
                        (c = b.getComponent("StickyController")).init();
                        this.ps.stickyController = c;
                        this.ps.uiShiftController = this.uiShiftNode.getComponent("UIShiftController");
                        this.ps.uiShiftController.init();
                        b = cc.instantiate(l.result);
                        this.clickEffectHolder.addChild(b);
                        c = b.getComponent("ClickEffectController");
                        this.ps.clickEffectController = c;
                        b = cc.instantiate(y.result);
                        this.settingMenuHolder.addChild(b);
                        c = b.getComponent("SettingMenuController");
                        this.ps.settingController = c;
                        h.settingMenuHelper.setButtonPrefab(h.ButtonPrefabType.SPIN_OPTIONS, z.result);
                        h.settingMenuHelper.setButtonPrefab(h.ButtonPrefabType.MORE_MENU, A.result);
                        h.settingMenuHelper.setButtonPrefab(h.ButtonPrefabType.SOUND, B.result, true);
                        h.settingMenuHelper.setButtonPrefab(h.ButtonPrefabType.RULE, C.result);
                        h.settingMenuHelper.setButtonPrefab(h.ButtonPrefabType.PAYTABLE, D.result);
                        h.settingMenuHelper.setButtonPrefab(h.ButtonPrefabType.HISTORY, E.result);
                        h.settingMenuHelper.setButtonPrefab(h.ButtonPrefabType.HIDE_MORE, F.result);
                        h.settingMenuHelper.setButtonPrefab(h.ButtonPrefabType.TURBO_SPIN, L.result, true);
                        h.settingMenuHelper.setButtonPrefab(h.ButtonPrefabType.SMARTBOT, K.result);
                        h.settingMenuHelper.setButtonPrefab(h.ButtonPrefabType.MINUS_BET, I.result);
                        h.settingMenuHelper.setButtonPrefab(h.ButtonPrefabType.PLUS_BET, J.result);
                        h.settingMenuHelper.setButtonPrefab(h.ButtonPrefabType.QUIT, M.result);
                        h.settingMenuHelper.settingMenuLocaleIcons = H.result;
                        b = cc.instantiate(G.result);
                        this.ps.settingMenuFooterController = b.getComponent("SettingInfoFooterController");
                        var $ = [t.result, undefined, n.result, r.result, o.result, q.result, m.result, p.result];
                        k.spineConfigHandler.setSymbolSpine($);
                        b = cc.instantiate(d.result);
                        this.angpaoControllerHolder.addChild(b);
                        (c = b.getComponent("AngpaoController")).init(this.behindSlotHolder);
                        this.ps.angpaoController = c;
                        b = cc.instantiate(e.result);
                        this.backgroundControllerHolder.addChild(b);
                        (c = b.getComponent("BackgroundController")).init();
                        this.ps.backgroundController = c;
                        b = cc.instantiate(f.result);
                        this.backgroundController2Holder.addChild(b);
                        c = b.getComponent("BackgroundControllerTwo");
                        this.ps.backgroundController2 = c;
                        b = cc.instantiate(g.result);
                        this.bigWinControllerHolder.addChild(b);
                        (c = b.getComponent("BigWinController")).init();
                        c.setBigWinLocalizedTitleSpriteFrame(i.result);
                        this.ps.bigWinController = c;
                        s.symbolImageHandler.setSymbolImage(x.result);
                        s.symbolImageHandler.setLocalizedWildImage(U.result);
                        b = cc.instantiate(O.result);
                        this.slotControllerHolder.addChild(b);
                        (c = b.getComponent("SlotController")).setSymbolImageHandler(s.symbolImageHandler);
                        this.ps.slotController = c;
                        (c = (b = cc.instantiate(P.result)).getComponent("SlotTintController")).init();
                        this.ps.slotTintController = c;
                        c = (b = cc.instantiate(j.result)).getComponent("ColumnTintController");
                        this.ps.columnTintController = c;
                        b = cc.instantiate(N.result);
                        this.spinButtonControllerHolder.addChild(b);
                        (c = b.getComponent("GSpinButtonController")).init();
                        this.ps.spinButtonController = c;
                        b = cc.instantiate(V.result);
                        this.foregroundControllerHolder.addChild(b);
                        c = b.getComponent("ForegroundController");
                        this.ps.foregroundController = c;
                        b = cc.instantiate(Y.result);
                        this.tigerControllerHolder.addChild(b);
                        (c = b.getComponent("TigerController")).init();
                        this.ps.tigerController = c;
                        b = cc.instantiate(u.result);
                        this.infoBoardControllerHolder.addChild(b);
                        (c = b.getComponent("InfoboardController")).init();
                        c.setLocalizedSprites(v.result);
                        c.setLocalizedWinAndTotalWinSprites(w.result);
                        this.ps.infoboardController = c;
                        b = cc.instantiate(R.result);
                        this.payLineNumberControllerHolder.addChild(b);
                        (c = b.getComponent("PayLineNumberController")).init();
                        this.ps.payLineNumberController = c;
                        b = cc.instantiate(S.result);
                        this.paySelectEffectControllerHolder.addChild(b);
                        (c = b.getComponent("PayLineController")).init();
                        this.ps.payLineController = c;
                        b = cc.instantiate(T.result);
                        this.payOutEffectControllerHolder.addChild(b);
                        (c = b.getComponent("PayOutEffectController")).init(this.ps.slotController);
                        this.ps.payOutEffectController = c;
                        (c = (b = cc.instantiate(Q.result)).getComponent("PaySelectEffectController")).init(this.ps.slotController, this.ps.payOutEffectController, this.ps.payLineNumberController, this.ps.payLineController);
                        this.ps.paySelectEffectController = c;
                        this.paySelectEffectControllerHolder.addChild(b);
                        (c = (b = cc.instantiate(W.result)).getComponent("SymbolPayoutController")).disablePanel();
                        this.ps.symbolPopoutController = c;
                        this.symbolPopoutControllerHolder.addChild(b);
                        b = new cc.Node("symbol_payout_tint_node");
                        this.symbolPopoutControllerHolder.addChild(b);
                        this.ps.symbolPopoutController.setPopOutTintHolder(b);
                        b = new cc.Node("symbol_payout_display_node");
                        this.symbolPopoutControllerHolder.addChild(b);
                        this.ps.symbolPopoutController.setPopOutDisplayHolder(b);
                        var _ = this.Mr;
                        this.Mr = undefined;
                        if (_) {
                            _();
                        }
                    };
                    __decorate([v(cc.Node)], b.prototype, "backgroundControllerHolder", undefined);
                    __decorate([v(cc.Node)], b.prototype, "angpaoControllerHolder", undefined);
                    __decorate([v(cc.Node)], b.prototype, "behindSlotHolder", undefined);
                    __decorate([v(cc.Node)], b.prototype, "backgroundController2Holder", undefined);
                    __decorate([v(cc.Node)], b.prototype, "bigWinControllerHolder", undefined);
                    __decorate([v(cc.Node)], b.prototype, "clickEffectHolder", undefined);
                    __decorate([v(cc.Node)], b.prototype, "infoBoardControllerHolder", undefined);
                    __decorate([v(cc.Node)], b.prototype, "paySelectEffectControllerHolder", undefined);
                    __decorate([v(cc.Node)], b.prototype, "payOutEffectControllerHolder", undefined);
                    __decorate([v(cc.Node)], b.prototype, "payLineNumberControllerHolder", undefined);
                    __decorate([v(cc.Node)], b.prototype, "settingMenuHolder", undefined);
                    __decorate([v(cc.Node)], b.prototype, "slotControllerHolder", undefined);
                    __decorate([v(cc.Node)], b.prototype, "spinButtonControllerHolder", undefined);
                    __decorate([v(cc.Node)], b.prototype, "foregroundControllerHolder", undefined);
                    __decorate([v(cc.Node)], b.prototype, "symbolPopoutControllerHolder", undefined);
                    __decorate([v(cc.Node)], b.prototype, "featureWinControllerHolder", undefined);
                    __decorate([v(cc.Node)], b.prototype, "trailParticleHolder", undefined);
                    __decorate([v(cc.Node)], b.prototype, "tigerControllerHolder", undefined);
                    __decorate([v(cc.Node)], b.prototype, "stickyControllerHolder", undefined);
                    __decorate([v(cc.Node)], b.prototype, "uiShiftNode", undefined);
                    return __decorate([q], b);
                }(cc.Component);
                c.default = w;
                cc._RF.pop();
            }
        }, {
            AnalyticsHelper: "AnalyticsHelper",
            AudioAssetConfig: "AudioAssetConfig",
            AudioManager: "AudioManager",
            BVFrameworkEnum: "BVFrameworkEnum",
            CustomAssetConfig: "CustomAssetConfig",
            ErrorHandler: "ErrorHandler",
            GameAudioAdapter: "GameAudioAdapter",
            GeneralAssetConfig: "GeneralAssetConfig",
            LaunchConfig: "LaunchConfig",
            NoSoundAdapter: "NoSoundAdapter",
            QuitGameWithEvent: "QuitGameWithEvent",
            ResourceLoader: "ResourceLoader",
            SettingMenuHelper: "SettingMenuHelper",
            SpineConfigHandler: "SpineConfigHandler",
            SymbolImageHandler: "SymbolImageHandler"
        }],
        Main: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "4beca/GAZlDX4iji0eR7872", "Main")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("GDataSource");
                var f = a("GApiClient");
                var g = a("GSlotTransactionModel");
                var h = a("AudioManager");
                var i = a("Transitions");
                var j = a("RequestHandler");
                var k = a("GameInitializationHandler");
                var l = a("MultiResHandler");
                var m = a("GRefreshWorldHandler");
                var n = a("NotifyHelper");
                var o = a("AnalyticsHelper");
                var p = a("Utils");
                var q = a("SettingMenuHelper");
                var r = a("UIAppearanceHelper");
                var s = a("WalletHelper");
                var t = a("GameLayout");
                var u = a("SettingMenuHandlers");
                var v = a("WalletHandlers");
                var w = a("GameEventHandler");
                var x = a("GNormalGameState");
                var y = a("GRespinGameState");
                var z = a("BGMHandler");
                var A = a("JakeSlotGameTemplate");
                var B = a("SpaceBarInterrupter");
                var C = a("ReplayModeHandler");
                var D = a("TransactionStateMachineHandler");
                var E = a("SlotProperties");
                var F = a("GConstants");
                var G = a("GeneralAudioConstant");
                var H = a("SpinConfigHandler");
                var I = cc._decorator.ccclass;
                var J = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.generalControllers = Object.create(null);
                        b.Lr = undefined;
                        b.Er = undefined;
                        b.kr = true;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.onLoad = function () {
                        var a = {
                            enableSessionSocket: true
                        };
                        var b = {
                            spaceBarInterrupterEnabled: true
                        };
                        k.initializeGame({
                            dataSource: e.gDataSource,
                            apiClient: f.gApiClient,
                            multiResHandler: l.default,
                            notifyConfig: {
                                theme: n.ThemeType.SLOT,
                                buttonColor: r.uiAppearanceHelper.v("game.theme_color"),
                                buttonTitleColor: r.uiAppearanceHelper.v("game.white_color"),
                                titleColor: r.uiAppearanceHelper.v("game.white_color"),
                                messageColor: r.uiAppearanceHelper.v("game.white_color")
                            },
                            gameTitle: {
                                name: shell.I18n.t("FT.Title"),
                                fontFamily: r.uiAppearanceHelper.v("game.theme_font_family")
                            },
                            callback: this.Ur.bind(this),
                            refreshWorldCallback: this.jr.bind(this),
                            updateBalanceCallback: this.Dr.bind(this),
                            gameLayoutInfo: t.gameLayout,
                            autoDeductBalance: true,
                            updateAudioPlayRateCallback: this.Wr.bind(this),
                            socketConfig: a
                        });
                        A.initJakeSlotGameTemplate(b);
                    };
                    b.prototype.Ur = function () {
                        p.sequenceCallback(this.xr.bind(this), this.Fr.bind(this), this.Vr.bind(this), this.zr.bind(this), this.qr.bind(this), this.Jr.bind(this), this.Kr.bind(this), this.Qr.bind(this), this.Yr.bind(this), this.Xr.bind(this), this.Zr.bind(this), this.$r.bind(this), this.ta.bind(this), this.ia.bind(this))(this.sa.bind(this));
                    };
                    b.prototype.xr = function (a) {
                        var b = {
                            minimumSpinningTime: 0.3,
                            regularSpinningTime: 0.8,
                            jurisdictionModel: e.gDataSource.systemModel.operatorJurisdiction
                        };
                        H.initSpinConfig(b);
                        if (a) {
                            a();
                        }
                    };
                    b.prototype.jr = function (a) {
                        function b() {
                            if (a) {
                                a();
                            }
                        }
                        if (e.gDataSource.isGameReplaying) {
                            this.ea(b);
                        } else {
                            this.na(b);
                        }
                    };
                    b.prototype.ea = function (a) {
                        var b;
                        var c = this;
                        if (C.fmReplayModeHandler.replayStarted()) {
                            C.fmReplayModeHandler.completeReplay();
                            b = function () {
                                if (a) {
                                    a();
                                }
                                C.fmReplayModeHandler.stopReplay(function () {
                                    if (c.R) {
                                        c.R.destroy();
                                        c.R = undefined;
                                    }
                                    p.deferCallback(c)(c.oa);
                                });
                            };
                        } else {
                            C.fmReplayModeHandler.startReplay();
                            b = function () {
                                if (a) {
                                    a();
                                }
                                if (c.R) {
                                    c.R.destroy();
                                    c.R = undefined;
                                }
                                p.deferCallback(c)(c.oa);
                            };
                        }
                        this.generalControllers.refreshWorld.refreshWorldByGameReplay(b);
                    };
                    b.prototype.na = function (a) {
                        if (e.gDataSource.transactionModel.previousGameState === g.SpinType.NORMAL) {
                            this.generalControllers.refreshWorld.refreshWorldByChangeWalletIdle(a);
                        } else if (a) {
                            a();
                        }
                    };
                    b.prototype.Dr = function (a) {
                        q.settingMenuHelper.setBalance(a);
                    };
                    b.prototype.Wr = function (a) {
                        h.updatePlayRate(a);
                    };
                    b.prototype.Fr = function (a) {
                        var b = {
                            getGameInfo: this.ca.bind(this)
                        };
                        s.walletHelper.init(b);
                        if (a) {
                            a();
                        }
                    };
                    b.prototype.ca = function (a, b) {
                        var c = a ? {
                            wk: a
                        } : undefined;
                        this.ha(function (a, c) {
                            if (b) {
                                b(c);
                            }
                        }, c);
                    };
                    b.prototype.Vr = function (a) {
                        var b = Date.now();
                        o.sendEvent(shell.ga.CATEGORY_QUERY, shell.ga.EVENT_READ_INFO);
                        shell.setProgressVisible(false);
                        n.showMessage(shell.I18n.t("General.LoadingInfo"));
                        var c = {
                            eatk: e.gDataSource.systemModel.extraAssetTableKey
                        };
                        var d = c;
                        this.ha(function (c, d) {
                            s.walletHelper.processInitGameInfo(d, function () {
                                shell.ga.sendTiming(shell.ga.CATEGORY_QUERY, shell.ga.EVENT_READ_INFO, Date.now() - b);
                                if (a) {
                                    a();
                                }
                            });
                        }, d);
                    };
                    b.prototype.ha = function (a, b) {
                        j.doAPIRequest({
                            name: "Get Game Info",
                            apiRequest: f.gApiClient.getGameInfo.bind(f.gApiClient),
                            apiRequestParam: b,
                            retryMessage: shell.I18n.t("General.LoadingInfoRetry"),
                            errorTitle: shell.I18n.t("General.ErrorLaunchFailed")
                        }, this.ra(a));
                    };
                    b.prototype.ra = function (a) {
                        return function (b, c) {
                            if (c && c.dt) {
                                var d = e.gDataSource.systemModel;
                                var f = d.betLevelList;
                                var g = d.betSizeList;
                                var h = d.maxLineNumber;
                                var i = e.gDataSource.transactionModel;
                                var j = i.betSizeValue;
                                var k = i.betLevelValue;
                                var l = e.gDataSource.playerModel.minimumBetAmount;
                                q.settingMenuHelper.betSizeList = g;
                                q.settingMenuHelper.betSizeValue = j;
                                q.settingMenuHelper.betLevelList = f;
                                q.settingMenuHelper.betLevelValue = k;
                                q.settingMenuHelper.betLineValue = h;
                                q.settingMenuHelper.minimumBetAmount = l;
                                a(b, c);
                            }
                        };
                    };
                    b.prototype.zr = function (a) {
                        h.init();
                        if (a) {
                            a();
                        }
                    };
                    b.prototype.qr = function (a) {
                        q.settingMenuHelper.baseBet = shell.I18n.t("General.BaseBet");
                        u.setupSettingMenu({
                            apiClient: f.gApiClient,
                            dataSource: e.gDataSource,
                            settingMenuHelper: q.settingMenuHelper,
                            walletHelper: s.walletHelper,
                            isProgressiveGame: false,
                            showForfeitProgressReminder: false,
                            settingMenuDependenciesPath: {
                                historyLibPath: "lib/fortune_mouse_history",
                                historyPrefabPath: "lib/fortune_mouse_history/prefab/history_factory"
                            },
                            toggleEffectMuted: h.toggleEffectMuted,
                            toggleMusicMuted: h.toggleMusicMuted,
                            callback: a
                        });
                    };
                    b.prototype.Jr = function (a) {
                        var b = {
                            generalControllers: this.generalControllers
                        };
                        var c = b;
                        this.aa = this.getComponent("LoadingController");
                        this.aa.setup(c);
                        if (a) {
                            a();
                        }
                    };
                    b.prototype.Kr = function (a) {
                        n.showMessage(shell.I18n.t("General.LoadingResource"));
                        this.aa.loadGeneralBundle(a, true);
                    };
                    b.prototype.Qr = function (a) {
                        var b = this.generalControllers;
                        var c = {
                            dataSource: e.gDataSource,
                            settingMenuHelper: q.settingMenuHelper,
                            settingController: b.settingController,
                            settingWalletPanelController: b.settingMenuFooterController,
                            spinButtonController: b.spinButtonController,
                            callback: a
                        };
                        u.initializeSettingMenu(c);
                    };
                    b.prototype.Yr = function (a) {
                        var b = {
                            dataSource: e.gDataSource,
                            settingWalletPanelController: this.generalControllers.settingMenuFooterController,
                            settingMenuHelper: q.settingMenuHelper,
                            walletHelper: s.walletHelper,
                            callback: a
                        };
                        v.setupWallets(b);
                    };
                    b.prototype.Xr = function (a) {
                        var b = e.gDataSource.transactionModel.reels;
                        var c = this.generalControllers;
                        var d = c.slotController;
                        var f = c.clickEffectController;
                        var i = c.angpaoController;
                        d.init(b);
                        d.setClickEffectController(f);
                        d.setOnReelReachesBouncePointCallback(function (a) {
                            var b = e.gDataSource.transactionModel;
                            var c = b.reels;
                            var d = b.stateTransitionTo;
                            var f = b.stateTransitionFrom;
                            var j = [];
                            c.forEach(function (b, c) {
                                if (E.getColumnFromIndex(c) === a) {
                                    j.push(b);
                                }
                            });
                            if (j.includes(E.SLOT_INDEX.WILD) && f === g.SpinType.NORMAL && d === g.SpinType.NORMAL) {
                                h.playAudioIfNotPlaying(G.GENERAL_AUDIO.symWildSpawn.key);
                            }
                            if (d === g.SpinType.RESPIN && a === 2) {
                                i.shake10();
                            }
                        });
                        d.setOnSlotInterruptCallback(function () {
                            var a = e.gDataSource.transactionModel;
                            var b = a.reels;
                            var c = a.stateTransitionTo;
                            var d = a.stateTransitionFrom;
                            if (b.includes(E.SLOT_INDEX.WILD) && d === g.SpinType.NORMAL && c === g.SpinType.NORMAL) {
                                h.stopAudioIfPlaying(G.GENERAL_AUDIO.symWildSpawn.key);
                                h.playAudioIfNotPlaying(G.GENERAL_AUDIO.symWildSpawn.key);
                            }
                        });
                        d.setSpinTiming(H.featureConfig.minimumSpinningTime, H.featureConfig.regularSpinningTime);
                        if (a) {
                            a();
                        }
                    };
                    b.prototype.ua = function () {
                        B.spaceBarInterrupter.init({
                            spinButtonClickCallback: this.generalControllers.spinButtonController.clickSpinButton.bind(this.generalControllers.spinButtonController),
                            reelClickCallback: this.generalControllers.slotController.onKeyBoardDownClicked.bind(this.generalControllers.slotController)
                        });
                    };
                    b.prototype.Zr = function (a) {
                        var b = this.generalControllers;
                        var c = b.slotController;
                        var d = b.spinButtonController;
                        var e = b.slotTintController;
                        var f = b.columnTintController;
                        var g = b.foregroundController;
                        var h = c.mask.node;
                        var i = {
                            generalControllers: this.generalControllers
                        };
                        h.addChild(e.node);
                        h.addChild(f.node);
                        q.settingMenuHelper.menuChangedCallBack = function () {
                            if (q.settingMenuHelper.isIdle()) {
                                d.show();
                                g.showGold();
                            } else {
                                d.hide();
                                g.hideGold();
                            }
                        };
                        this.generalControllers.refreshWorld = new m.GRefreshWorldHandler(i);
                        this.generalControllers.refreshWorld.setupUICallback = this.ta.bind(this);
                        if (a) {
                            a();
                        }
                    };
                    b.prototype.$r = function (a) {
                        var b = {
                            numberOfColumn: E.NORMAL_SLOT_COLUMN,
                            numberOfRow: E.NORMAL_SLOT_ROW,
                            payoutData: F.PAY_OUT_DATA
                        };
                        var c = this.generalControllers.symbolPopoutController;
                        var d = e.gDataSource.transactionModel.reels;
                        var f = b;
                        c.setReelData(d);
                        c.setTintConfig({
                            height: 1100
                        });
                        c.init(f);
                        if (a) {
                            a();
                        }
                    };
                    b.prototype.ta = function (a) {
                        var b;
                        switch (e.gDataSource.transactionModel.stateTransitionTo) {
                            case g.SpinType.NORMAL:
                                b = new i.ToNormalSpinTransition();
                                break;
                            case g.SpinType.RESPIN:
                                b = new i.ToRespinTransition();
                        }
                        var c = {
                            generalControllers: this.generalControllers,
                            loadingController: this.aa
                        };
                        b.instanceRun(c, function () {
                            b.destroy();
                            if (a) {
                                a();
                            }
                        });
                    };
                    b.prototype.ia = function (a) {
                        var b = this;
                        w.subscribeGamePauseEvent();
                        w.subscribeGameResumeEvent();
                        w.setGamePlayUIBlockEventCallback(function (a) {
                            var c = b.generalControllers.spinButtonController;
                            if (a) {
                                c.node.pauseSystemEvents(true);
                            } else {
                                c.node.resumeSystemEvents(true);
                            }
                        });
                        if (a) {
                            a();
                        }
                    };
                    b.prototype.sa = function () {
                        shell.setProgressVisible(false);
                        n.showMessage(shell.I18n.t("General.LoadingCompleted"));
                        shell.requestGameStart(true, this.la.bind(this));
                    };
                    b.prototype.la = function () {
                        this.Vs();
                        this.ua();
                        this.fa(this.oa.bind(this));
                    };
                    b.prototype.fa = function (a) {
                        var b = e.gDataSource.transactionModel.stateTransitionTo === g.SpinType.NORMAL ? "setup" : "idle";
                        D.initState(b);
                        if (a) {
                            a();
                        }
                    };
                    b.prototype.Vs = function () {
                        var a = e.gDataSource.transactionModel.stateTransitionTo;
                        h.toggleAudioGameStarted();
                        if (a === g.SpinType.RESPIN) {
                            z.instantPlayRespinBGM();
                        } else {
                            z.instantPlayNormalBGM();
                        }
                    };
                    b.prototype.oa = function () {
                        var a = e.gDataSource.transactionModel;
                        var b = a.stateTransitionFrom;
                        var c = a.stateTransitionTo;
                        switch (b) {
                            case g.SpinType.NORMAL:
                                if (c === g.SpinType.NORMAL) {
                                    this.da = this.va.bind(this);
                                } else if (c === g.SpinType.RESPIN) {
                                    if (this.kr) {
                                        this.da = this._a.bind(this);
                                    } else {
                                        this.da = this.ma.bind(this, this._a.bind(this));
                                    }
                                }
                                break;
                            case g.SpinType.RESPIN:
                                if (c === g.SpinType.NORMAL) {
                                    this.da = this.pa.bind(this, this.va.bind(this));
                                } else if (c === g.SpinType.RESPIN) {
                                    this.da = this._a.bind(this);
                                }
                        }
                        p.deferCallback(this)(this.da);
                    };
                    b.prototype.ba = function () {
                        this.kr = false;
                        var a = this.R;
                        if (a) {
                            a.destroy();
                        }
                        this.R = undefined;
                        p.deferCallback(this)(this.oa.bind(this));
                    };
                    b.prototype.va = function () {
                        (this.R = new x.default(e.gDataSource, this.generalControllers, this.ba.bind(this))).run();
                    };
                    b.prototype._a = function () {
                        (this.R = new y.default(e.gDataSource, this.generalControllers, this.ba.bind(this))).run(this.kr);
                    };
                    b.prototype.pa = function (a) {
                        var b = new i.ToNormalSpinTransition();
                        var c = {
                            generalControllers: this.generalControllers,
                            loadingController: this.aa
                        };
                        b.run(c, function () {
                            b.destroy();
                            if (a) {
                                a();
                            }
                        });
                    };
                    b.prototype.ma = function (a) {
                        var b = new i.ToRespinTransition();
                        var c = {
                            generalControllers: this.generalControllers,
                            loadingController: this.aa
                        };
                        b.run(c, function () {
                            b.destroy();
                            if (a) {
                                a();
                            }
                        });
                    };
                    return __decorate([I], b);
                }(cc.Component);
                c.default = J;
                cc._RF.pop();
            }
        }, {
            AnalyticsHelper: "AnalyticsHelper",
            AudioManager: "AudioManager",
            BGMHandler: "BGMHandler",
            GApiClient: "GApiClient",
            GConstants: "GConstants",
            GDataSource: "GDataSource",
            GNormalGameState: "GNormalGameState",
            GRefreshWorldHandler: "GRefreshWorldHandler",
            GRespinGameState: "GRespinGameState",
            GSlotTransactionModel: "GSlotTransactionModel",
            GameEventHandler: "GameEventHandler",
            GameInitializationHandler: "GameInitializationHandler",
            GameLayout: "GameLayout",
            GeneralAudioConstant: "GeneralAudioConstant",
            JakeSlotGameTemplate: "JakeSlotGameTemplate",
            MultiResHandler: "MultiResHandler",
            NotifyHelper: "NotifyHelper",
            ReplayModeHandler: "ReplayModeHandler",
            RequestHandler: "RequestHandler",
            SettingMenuHandlers: "SettingMenuHandlers",
            SettingMenuHelper: "SettingMenuHelper",
            SlotProperties: "SlotProperties",
            SpaceBarInterrupter: "SpaceBarInterrupter",
            SpinConfigHandler: "SpinConfigHandler",
            TransactionStateMachineHandler: "TransactionStateMachineHandler",
            Transitions: "Transitions",
            UIAppearanceHelper: "UIAppearanceHelper",
            Utils: "Utils",
            WalletHandlers: "WalletHandlers",
            WalletHelper: "WalletHelper"
        }],
        MaxBetButton: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "57d52E5rw9F7Iqp2UOZL/vK", "MaxBetButton")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("BetModifierButton");
                var f = a("UIAppearanceHelper");
                var g = a("Utils");
                var h = cc._decorator;
                var i = h.ccclass;
                var j = h.property;
                var k = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.labelNode = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.changeButtonPressedColor = function (a) {
                        if (this.buttonTheme) {
                            var b = f.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".normal");
                            var c = f.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".pressed");
                            if (this.isReachLimit) {
                                var d = f.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".disabled");
                                g.setNodeColorWithOpacity(this.iconSprite, d);
                                this.labelNode.opacity = 127.5;
                            } else {
                                g.setNodeColorWithOpacity(this.iconSprite, a ? c : b);
                                this.labelNode.opacity = a ? 127.5 : 255;
                            }
                        }
                    };
                    b.prototype.interactableButtonColor = function (a) {
                        if (this.buttonTheme) {
                            var b = f.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".normal");
                            var c = f.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".disabled");
                            if (this.isReachLimit) {
                                g.setNodeColorWithOpacity(this.iconSprite, c);
                                this.labelNode.opacity = 127.5;
                            } else {
                                g.setNodeColorWithOpacity(this.iconSprite, a ? b : c);
                                this.labelNode.opacity = a ? 255 : 63.75;
                            }
                        }
                    };
                    __decorate([j(cc.Node)], b.prototype, "labelNode", undefined);
                    return __decorate([i], b);
                }(e.default);
                c.default = k;
                cc._RF.pop();
            }
        }, {
            BetModifierButton: "BetModifierButton",
            UIAppearanceHelper: "UIAppearanceHelper",
            Utils: "Utils"
        }],
        MoreMenuButton: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "ea5caTag+xJsrT667bFPlnC", "MoreMenuButton")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("GenericSettingButton");
                var f = cc._decorator;
                var g = f.ccclass;
                f.property;
                var h = function (a) {
                    function b() {
                        return a !== null && a.apply(this, arguments) || this;
                    }
                    __extends(b, a);
                    b.prototype.customSetup = function () {
                        this.circleCollider.x = -10;
                    };
                    return __decorate([g], b);
                }(e.default);
                c.default = h;
                cc._RF.pop();
            }
        }, {
            GenericSettingButton: "GenericSettingButton"
        }],
        MultiResHandler: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "3ae3du76uBKurm1YFGdqj7/", "MultiResHandler")) {
                var c = System.get("common").MultiResHandler;
                b.exports.default = c;
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        NavigationBar: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "0dc7dijGWtKO4QKzl8UL9Pz", "NavigationBar")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = cc._decorator;
                var f = e.ccclass;
                var g = e.property;
                var h = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.Sa = undefined;
                        b.animatedLayer = undefined;
                        b.defaultLeftItem = undefined;
                        b.rightItemContainer = undefined;
                        b.leftItemContainer = undefined;
                        b.middleItemContainer = undefined;
                        b.titleLabel = undefined;
                        b.background = undefined;
                        b.shadow = undefined;
                        b.ga = [];
                        b.Ca = false;
                        b.ya = undefined;
                        return b;
                    }
                    __extends(b, a);
                    Object.defineProperty(b.prototype, "navigator", {
                        get: function () {
                            return this.Sa;
                        },
                        set: function (a) {
                            this.Sa = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "topItem", {
                        get: function () {
                            if (this.ga && this.ga.length > 0) {
                                return this.ga[this.ga.length - 1];
                            }
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "backItem", {
                        get: function () {
                            if (this.ga && this.ga.length > 1) {
                                return this.ga[this.ga.length - 2];
                            }
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.onLoad = function () {
                        var a = this.node.width;
                        var b = this.node.height;
                        this.background.node.setContentSize(a, b);
                        this.shadow.y = -b;
                    };
                    b.prototype.getBarHeight = function (a, b) {
                        var c = this.node.width;
                        var d = a.height;
                        var e = b.top;
                        var f = d + e;
                        this.animatedLayer.setContentSize(c, d);
                        this.animatedLayer.y = -e;
                        this.node.height = f;
                        this.shadow.y = -d;
                        this.Ma(a.item_space_x);
                        return f;
                    };
                    b.prototype.pushItem = function (a, b) {
                        if (a) {
                            var c = this.ga[this.ga.length - 1];
                            var d = this.leftItemContainer.children[0];
                            var e = this.middleItemContainer.children[1];
                            var f = this.rightItemContainer.children[0];
                            var g = c ? c.title : "";
                            var h = c && !c.leftItem;
                            var i = a.title;
                            var j = undefined;
                            var l = undefined;
                            var n = a.rightItem instanceof cc.Node ? a.rightItem : undefined;
                            var k = true;
                            this.ga.push(a);
                            this.Ca = b;
                            if (a.middleItem instanceof cc.Node) {
                                l = a.middleItem;
                                a.title = "";
                            }
                            if (a.leftItem instanceof cc.Node) {
                                j = a.leftItem;
                                k = false;
                            } else if (this.ga.length > 1) {
                                j = cc.instantiate(this.defaultLeftItem);
                                this.Aa(j);
                                var o = j.children ? j.getComponentInChildren(cc.Label) : undefined;
                                if (o instanceof cc.Label && g) {
                                    o.string = g;
                                }
                            }
                            var p = {
                                leftItem: d,
                                middleItem: e,
                                rightItem: f,
                                title: g,
                                useDefaultLeftItem: h
                            };
                            var q = {
                                leftItem: j,
                                middleItem: l,
                                rightItem: n,
                                title: i,
                                useDefaultLeftItem: k
                            };
                            if (b) {
                                this.Ia(p, q);
                            } else {
                                this.wa(d);
                                this.Oa(this.leftItemContainer, j);
                                this.wa(e);
                                this.Oa(this.middleItemContainer, l);
                                this.wa(f);
                                this.Oa(this.rightItemContainer, n);
                                this.titleLabel.string = i;
                                this.ya = this.titleLabel.node.color;
                                if (shell.environment.getOrientationMode() === "land") {
                                    this.titleLabel.fontSize = 42;
                                    this.titleLabel.lineHeight = 50;
                                }
                            }
                        }
                    };
                    b.prototype.popItem = function (a) {
                        var b = this.topItem;
                        if (b) {
                            var c = this.backItem;
                            this.ga.pop();
                            if (!c) {
                                this.titleLabel.string = "";
                                this.rightItemContainer.removeAllChildren(false);
                                this.leftItemContainer.removeAllChildren(false);
                                if (this.middleItemContainer.children[1]) {
                                    this.middleItemContainer.children[1].removeFromParent(false);
                                }
                                this.ya = this.titleLabel.node.color;
                                return;
                            }
                            var d = this.ga[this.ga.length - 2];
                            var e = "";
                            if (d && !d.middleItem) {
                                e = d.title;
                            }
                            var f = this.leftItemContainer.children[0];
                            var g = this.middleItemContainer.children[1];
                            var h = this.rightItemContainer.children[0];
                            var i = g ? "" : b.title;
                            var j = !b.leftItem;
                            var l = c.title;
                            var m = undefined;
                            var n = undefined;
                            var o = c.rightItem instanceof cc.Node ? c.rightItem : undefined;
                            var p = true;
                            if (c.middleItem instanceof cc.Node) {
                                n = c.middleItem;
                                c.title = "";
                            }
                            if (c.leftItem instanceof cc.Node) {
                                m = c.leftItem;
                                p = false;
                            } else if (this.ga.length > 1) {
                                m = cc.instantiate(this.defaultLeftItem);
                                this.Aa(m);
                                var r = m.children ? m.getComponentInChildren(cc.Label) : null;
                                if (r) {
                                    r.string = e;
                                }
                            }
                            var s = {
                                leftItem: f,
                                middleItem: g,
                                rightItem: h,
                                title: i,
                                useDefaultLeftItem: j
                            };
                            var t = {
                                leftItem: m,
                                middleItem: n,
                                rightItem: o,
                                title: l,
                                useDefaultLeftItem: p
                            };
                            if (a) {
                                this.Ha(s, t);
                            } else {
                                this.wa(f);
                                this.Oa(this.leftItemContainer, m);
                                this.wa(g);
                                this.Oa(this.middleItemContainer, n);
                                this.wa(h);
                                this.Oa(this.rightItemContainer, o);
                                this.titleLabel.string = l;
                                this.ya = this.titleLabel.node.color;
                            }
                        }
                    };
                    b.prototype.enableButtons = function () {
                        var a = this.leftItemContainer.children[0];
                        var b = this.rightItemContainer.children[0];
                        if (a) {
                            var c = a.getComponent(cc.Button);
                            if (c) {
                                c.interactable = true;
                            }
                        }
                        if (b) {
                            var d = b.getComponent(cc.Button);
                            if (d) {
                                d.interactable = true;
                            }
                        }
                    };
                    b.prototype.disableButtons = function () {
                        var a = this.leftItemContainer.children[0];
                        var b = this.rightItemContainer.children[0];
                        if (a) {
                            var c = a.getComponent(cc.Button);
                            if (c) {
                                c.interactable = false;
                            }
                        }
                        if (b) {
                            var d = b.getComponent(cc.Button);
                            if (d) {
                                d.interactable = false;
                            }
                        }
                    };
                    b.prototype.setTitleColor = function (a) {
                        this.titleLabel.node.color = a;
                    };
                    b.prototype.setTitleSize = function (a) {
                        this.titleLabel.fontSize = a;
                    };
                    b.prototype.removeItemsAtIndex = function (a) {
                        if (!(this.ga.length <= a)) {
                            this.ga.splice(a, 1);
                        }
                    };
                    b.prototype.Ba = function (a) {
                        a.node.setContentSize(this.titleLabel.node.width, this.titleLabel.node.height);
                        a.string = this.titleLabel.string;
                        a.fontSize = this.titleLabel.fontSize;
                        a.lineHeight = this.titleLabel.lineHeight;
                        a.verticalAlign = 1;
                        if (this.titleLabel.font) {
                            a.font = this.titleLabel.font;
                        }
                    };
                    b.prototype.Aa = function (a) {
                        var b = new cc.Component.EventHandler();
                        b.target = this.node;
                        b.component = "NavigationBar";
                        b.handler = "onLeftItemPressed";
                        a.getComponent(cc.Button).clickEvents.push(b);
                    };
                    b.prototype.Ma = function (a) {
                        var b = this.node.width;
                        var c = this.leftItemContainer;
                        var d = -b / 2 + a + c.width / 2;
                        var e = this.rightItemContainer;
                        var f = b / 2 - a - e.width / 2;
                        c.x = d;
                        e.x = f;
                    };
                    b.prototype.onLeftItemPressed = function () {
                        var a = this.navigator;
                        this.navigator.topController;
                        if (a && a.topController) {
                            var b = this.Ca;
                            this.navigator.popController(b);
                        }
                    };
                    b.prototype.Ia = function (a, b) {
                        var c = a.leftItem;
                        var d = a.middleItem;
                        var e = a.rightItem;
                        var f = a.title;
                        var g = a.useDefaultLeftItem;
                        var h = b.leftItem;
                        var i = b.middleItem;
                        var j = b.rightItem;
                        var l = b.title;
                        var m = b.useDefaultLeftItem;
                        var k = !d && !i;
                        this.Ga(k, f, l, d, i);
                        this.Na(m, g, k, c, h);
                        this.Ta(e, j);
                    };
                    b.prototype.Ha = function (a, b) {
                        var c = a.leftItem;
                        var d = a.middleItem;
                        var e = a.rightItem;
                        var f = a.title;
                        var g = a.useDefaultLeftItem;
                        var h = b.leftItem;
                        var i = b.middleItem;
                        var j = b.rightItem;
                        var l = b.title;
                        var m = b.useDefaultLeftItem;
                        var k = !d && !i;
                        this.Pa(k, f, l, d, i);
                        this.Ra(m, g, k, c, h);
                        this.Ta(e, j);
                    };
                    b.prototype.Ga = function (a, b, c, d, e, f) {
                        if (a) {
                            var g = this.middleItemContainer;
                            var h = this.leftItemContainer;
                            var i = g.x - g.width * g.anchorX - h.x - h.width * (1 - h.anchorX);
                            if (b) {
                                var j = this.titleLabel.node;
                                var l = j.parent.convertToWorldSpaceAR(cc.v2(j.x, j.y));
                                var m = this.animatedLayer.convertToNodeSpaceAR(l);
                                var k = new cc.Node();
                                var n = k.addComponent(cc.Label);
                                k.parent = this.animatedLayer;
                                k.position = m;
                                n.node.color = this.ya;
                                this.Ba(n);
                                var o = cc.spawn(cc.moveBy(0.2, cc.v2(-i / 2, 0)).easing(cc.easeIn(3)), cc.fadeOut(0.2).easing(cc.easeIn(3)));
                                k.runAction(cc.sequence(o, cc.callFunc(function () {
                                    k.active = false;
                                    k.removeFromParent();
                                })));
                            }
                            g.x += i;
                            g.opacity = 0;
                            this.titleLabel.string = c;
                            var p = cc.spawn(cc.moveBy(0.3, cc.v2(-i, 0)).easing(cc.easeOut(3)), cc.fadeIn(0.3).easing(cc.easeIn(3)));
                            g.runAction(cc.sequence(cc.delayTime(0.1), p, cc.callFunc(function () {
                                g.active = true;
                                g.opacity = 255;
                                if (f) {
                                    f();
                                }
                            })));
                        } else {
                            this.La(d, e, c, f);
                        }
                    };
                    b.prototype.Na = function (a, b, c, d, e, f) {
                        var g = this;
                        if (a && b && c) {
                            var h = undefined;
                            var i = undefined;
                            var j = undefined;
                            var l = undefined;
                            if (d && d.children) {
                                h = d.getComponentInChildren(cc.Label);
                                i = d.getComponentInChildren(cc.Sprite);
                            }
                            if (e && e.children) {
                                j = e.getComponentInChildren(cc.Label);
                                l = e.getComponentInChildren(cc.Sprite);
                            }
                            if (j) {
                                if (h) {
                                    var m = h.node;
                                    var n = m.x;
                                    var o = m.width;
                                    var p = m.anchorX;
                                    var q = n - o * p - n - o * (1 - p);
                                    var r = cc.spawn(cc.moveBy(0.2, cc.v2(-q * 2, 0)).easing(cc.easeOut(3)), cc.fadeOut(0.2).easing(cc.easeIn(3)));
                                    m.runAction(cc.sequence(r, cc.callFunc(function () {
                                        m.active = false;
                                    })));
                                }
                                var s = this.middleItemContainer;
                                var t = this.leftItemContainer;
                                var u = s.x - s.width * s.anchorX - t.x - t.width * (1 - t.anchorX);
                                var v = l.node;
                                var w = j.node;
                                if (e) {
                                    t.addChild(e);
                                }
                                v.active = false;
                                w.opacity = 0;
                                w.x += u / 2;
                                var x = cc.spawn(cc.moveBy(0.2, cc.v2(-u / 2, 0)).easing(cc.easeOut(3)), cc.fadeIn(0.2).easing(cc.easeIn(3)));
                                w.runAction(cc.sequence(cc.delayTime(0.2), x, cc.callFunc(function () {
                                    w.opacity = 255;
                                    v.active = true;
                                    if (d) {
                                        d.removeFromParent(false);
                                    }
                                    if (f) {
                                        f();
                                    }
                                })));
                            } else {
                                this.Ea(d, e, f);
                            }
                        } else if (a && b && d) {
                            h = undefined;
                            i = undefined;
                            if (d && d.children) {
                                h = d.getComponentInChildren(cc.Label);
                                i = d.getComponentInChildren(cc.Sprite);
                            }
                            if (!h || !i) {
                                this.Ea(d, e, f);
                                return;
                            }
                            var y = i.node;
                            var z = h.node;
                            q = z.x - z.width * z.anchorX - y.x - y.width * (1 - y.anchorX);
                            r = cc.spawn(cc.moveBy(0.2, cc.v2(-q, 0)).easing(cc.easeOut(3)), cc.fadeOut(0.2).easing(cc.easeIn(3)));
                            z.runAction(cc.sequence(r, cc.callFunc(function () {
                                if (d) {
                                    d.removeFromParent(false);
                                }
                                if (e) {
                                    g.leftItemContainer.addChild(e);
                                }
                                if (f) {
                                    f();
                                }
                            })));
                        } else {
                            this.Ea(d, e, f);
                        }
                    };
                    b.prototype.Ra = function (a, b, c, d, e, f) {
                        if (a && b && c) {
                            var g = undefined;
                            var h = undefined;
                            var i = undefined;
                            var j = undefined;
                            if (d && d.children) {
                                g = d.getComponentInChildren(cc.Label);
                                h = d.getComponentInChildren(cc.Sprite);
                            }
                            if (e && e.children) {
                                i = e.getComponentInChildren(cc.Label);
                                j = e.getComponentInChildren(cc.Sprite);
                            }
                            if (!i || !g) {
                                this.Ea(d, e, f);
                                return;
                            }
                            var l = this.middleItemContainer;
                            var k = this.leftItemContainer;
                            var m = l.x - l.width * l.anchorX - k.x - k.width * (1 - k.anchorX);
                            var n = g.node;
                            var o = h.node;
                            var p = n.x - n.width * n.anchorX - o.x - o.width * (1 - o.anchorX);
                            var q = cc.spawn(cc.moveBy(0.2, cc.v2(m / 2, 0)).easing(cc.easeOut(3)), cc.fadeOut(0.2).easing(cc.easeIn(3)));
                            if (e) {
                                n.runAction(cc.sequence(q, cc.callFunc(function () {
                                    n.active = false;
                                })));
                                var r = i.node;
                                var s = j.node;
                                s.active = false;
                                r.opacity = 0;
                                k.addChild(e);
                                r.x -= p * 2;
                                var t = cc.spawn(cc.moveBy(0.2, cc.v2(p * 2, 0)).easing(cc.easeOut(3)), cc.fadeIn(0.2).easing(cc.easeIn(3)));
                                r.runAction(cc.sequence(cc.delayTime(0.2), t, cc.callFunc(function () {
                                    r.opacity = 255;
                                    s.active = true;
                                    if (d) {
                                        d.removeFromParent(false);
                                    }
                                    if (f) {
                                        f();
                                    }
                                })));
                            } else {
                                n.runAction(cc.sequence(q, cc.callFunc(function () {
                                    if (d) {
                                        d.removeFromParent(false);
                                    }
                                    if (f) {
                                        f();
                                    }
                                })));
                            }
                        } else if (a && b) {
                            i = undefined;
                            j = undefined;
                            if (e && e.children) {
                                i = e.getComponentInChildren(cc.Label);
                                j = e.getComponentInChildren(cc.Sprite);
                            }
                            if (!i || !j) {
                                this.Ea(d, e, f);
                                return;
                            }
                            var u = i.node;
                            var v = j.node;
                            p = u.x - u.width * u.anchorX - v.x - v.width * (1 - v.anchorX);
                            if (d) {
                                d.removeFromParent(false);
                            }
                            if (e) {
                                this.leftItemContainer.addChild(e);
                            }
                            u.opacity = 0;
                            u.x -= p * 2;
                            t = cc.spawn(cc.moveBy(0.2, cc.v2(p * 2, 0)).easing(cc.easeOut(3)), cc.fadeIn(0.2).easing(cc.easeIn(3)));
                            u.runAction(cc.sequence(cc.delayTime(0.2), t, cc.callFunc(function () {
                                u.opacity = 255;
                                if (f) {
                                    f();
                                }
                            })));
                        } else {
                            this.Ea(d, e, f);
                        }
                    };
                    b.prototype.Pa = function (a, b, c, d, e, f) {
                        if (a) {
                            var g = this.leftItemContainer;
                            var h = this.middleItemContainer;
                            var i = h.x - h.width * h.anchorX - g.x - g.width * (1 - g.anchorX);
                            if (b) {
                                var j = this.titleLabel.node.parent.convertToWorldSpaceAR(cc.v2(this.titleLabel.node.x, this.titleLabel.node.y));
                                var l = this.animatedLayer.convertToNodeSpaceAR(j);
                                var m = new cc.Node();
                                m.addComponent(cc.Label);
                                var k = m.getComponent(cc.Label);
                                m.parent = this.animatedLayer;
                                k.node.color = this.ya;
                                m.position = l;
                                this.Ba(k);
                                var n = cc.spawn(cc.moveBy(0.2, cc.v2(i / 2, 0)).easing(cc.easeOut(3)), cc.fadeOut(0.2).easing(cc.easeOut(3)));
                                m.runAction(cc.sequence(n, cc.callFunc(function () {
                                    m.active = false;
                                    m.removeFromParent();
                                })));
                            }
                            this.titleLabel.string = c;
                            h.x -= i / 2;
                            h.opacity = 0;
                            var o = cc.spawn(cc.moveBy(0.3, cc.v2(i / 2, 0)).easing(cc.easeOut(3)), cc.fadeIn(0.3).easing(cc.easeIn(3)));
                            this.middleItemContainer.runAction(cc.sequence(cc.delayTime(0.1), o, cc.callFunc(function () {
                                h.active = true;
                                h.opacity = 255;
                                if (f) {
                                    f();
                                }
                            })));
                        } else {
                            this.La(d, e, c, f);
                        }
                    };
                    b.prototype.Ea = function (a, b, c) {
                        var d = this.leftItemContainer;
                        if (a) {
                            a.removeFromParent(false);
                        }
                        if (b) {
                            this.leftItemContainer.addChild(b);
                        }
                        d.opacity = 0;
                        d.runAction(cc.sequence(cc.fadeIn(0.3).easing(cc.easeOut(3)), cc.callFunc(function () {
                            if (c) {
                                c();
                            }
                        })));
                    };
                    b.prototype.La = function (a, b, c, d) {
                        var e = this.middleItemContainer;
                        if (a) {
                            a.removeFromParent(false);
                        }
                        if (b) {
                            e.addChild(b);
                        }
                        this.titleLabel.string = c;
                        e.opacity = 0;
                        e.runAction(cc.sequence(cc.fadeIn(0.3), cc.callFunc(function () {
                            if (d) {
                                d();
                            }
                        })));
                    };
                    b.prototype.Ta = function (a, b, c) {
                        var d = this;
                        if (a) {
                            a.removeFromParent(false);
                        }
                        if (b) {
                            this.rightItemContainer.addChild(b);
                        }
                        this.rightItemContainer.opacity = 0;
                        this.rightItemContainer.runAction(cc.sequence(cc.fadeIn(0.3).easing(cc.easeOut(3)), cc.callFunc(function () {
                            d.ya = d.titleLabel.node.color;
                            if (c) {
                                c();
                            }
                        })));
                    };
                    b.prototype.wa = function (a) {
                        if (a && a.parent) {
                            a.removeFromParent(false);
                        }
                    };
                    b.prototype.Oa = function (a, b) {
                        if (a && b) {
                            a.addChild(b);
                        }
                    };
                    __decorate([g(cc.Node)], b.prototype, "animatedLayer", undefined);
                    __decorate([g(cc.Prefab)], b.prototype, "defaultLeftItem", undefined);
                    __decorate([g(cc.Node)], b.prototype, "rightItemContainer", undefined);
                    __decorate([g(cc.Node)], b.prototype, "leftItemContainer", undefined);
                    __decorate([g(cc.Node)], b.prototype, "middleItemContainer", undefined);
                    __decorate([g(cc.Label)], b.prototype, "titleLabel", undefined);
                    __decorate([g(cc.Sprite)], b.prototype, "background", undefined);
                    __decorate([g(cc.Node)], b.prototype, "shadow", undefined);
                    return __decorate([f], b);
                }(cc.Component);
                c.default = h;
                cc._RF.pop();
            }
        }, {}],
        NavigationController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "d742diXy4tHCIVIgSy1jEIb", "NavigationController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("ViewController");
                var f = a("NavigationBar");
                var h = a("TransitionEnum");
                var i = a("NavigationDefaultTransition");
                var j = a("TransitionContext");
                var g = a("UIKit");
                var k = a("TabBarItem");
                var l = cc._decorator;
                var m = l.ccclass;
                var n = l.property;
                var o = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.defaultNavigationBar = undefined;
                        b.statusBarPlaceholderNode = undefined;
                        b.contentNode = undefined;
                        b.ka = undefined;
                        b.Ua = [];
                        b.ja = false;
                        b.Da = undefined;
                        return b;
                    }
                    __extends(b, a);
                    Object.defineProperty(b.prototype, "controllers", {
                        get: function () {
                            return this.Ua.slice();
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "tabBarItem", {
                        get: function () {
                            return this.Da;
                        },
                        set: function (a) {
                            this.Da = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "topController", {
                        get: function () {
                            var a = this.controllers;
                            if (a && a.length > 0) {
                                return a[a.length - 1];
                            }
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "backController", {
                        get: function () {
                            var a = this.controllers;
                            if (a && a.length > 1) {
                                return a[a.length - 2];
                            }
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "navigationBar", {
                        get: function () {
                            if (!this.ka) {
                                this.ka = this.defaultNavigationBar;
                                if (this.ka) {
                                    this.ka.navigator = this;
                                }
                            }
                            return this.ka;
                        },
                        set: function (a) {
                            if (a !== this.ka) {
                                var b = this.ka;
                                this.ka = a;
                                if (this.ka) {
                                    this.ka.navigator = this;
                                }
                                if (b) {
                                    b.navigator = undefined;
                                }
                            }
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.onLoad = function () {
                        var a = cc.Canvas.instance.designResolution;
                        var b = a.height;
                        var c = a.width;
                        this.node.setContentSize(c, b);
                        this.navigationBar.node.width = c;
                        var d = shell.environment.getOrientationMode() === "land" ? g.NavigationConfigs.bar.landscape : g.NavigationConfigs.bar.portrait;
                        var e = this.navigationBar.getBarHeight(d, this.safeAreaInsets);
                        var f = b - e;
                        this.contentNode.setContentSize(c, f);
                        this.contentNode.y = -e;
                        this.statusBarPlaceholderNode.height = this.safeAreaInsets.top;
                        this.node.on("size-changed", this.Wa, this);
                    };
                    b.prototype.onEnable = function () {
                        var a = this.topController;
                        if (a) {
                            a.enabled = true;
                        }
                    };
                    b.prototype.onDisable = function () {
                        var a = this.topController;
                        if (a) {
                            a.enabled = false;
                        }
                    };
                    b.prototype.viewWillAppear = function (a) {
                        var b = this.topController;
                        if (b) {
                            b.viewWillAppear(a);
                        }
                    };
                    b.prototype.viewDidAppear = function (a) {
                        var b = this.topController;
                        if (b) {
                            b.viewDidAppear(a);
                        }
                    };
                    b.prototype.viewWillDisappear = function (a) {
                        var b = this.topController;
                        if (b) {
                            b.viewWillDisappear(a);
                        }
                    };
                    b.prototype.viewDidDisappear = function (a) {
                        var b = this.topController;
                        if (b) {
                            b.viewDidDisappear(a);
                        }
                    };
                    b.prototype.viewDidLayoutSubviews = function () { };
                    b.prototype.pushController = function (a, b) {
                        if (!this.ja && a) {
                            this.ja = true;
                            var c = this.contentNode;
                            var d = c.width;
                            var e = c.height;
                            a.navigator = this;
                            a.view.setContentSize(d, e);
                            var f = (a.node.anchorY - c.anchorY) * e;
                            var k = (a.node.anchorX - c.anchorX) * d;
                            if (b) {
                                k = (a.node.anchorX - c.anchorX + 1) * d;
                            }
                            a.view.setPosition(cc.v2(k, f));
                            c.addChild(a.view);
                            a.enabled = true;
                            if (this.xa()) {
                                a.viewWillAppear(b);
                            } else {
                                b = false;
                            }
                            var l = this.topController;
                            if (l) {
                                l.viewWillDisappear(b);
                            }
                            this.navigationBar.pushItem(a, b);
                            if (b) {
                                var m = undefined;
                                var n = this.navigationDelegate;
                                m = n && n.animationForOperation ? n.animationForOperation(h.NavigationControllerOperation.Push) : new i.DefaultNavigationPushTransition();
                                var o = l ? l.view : undefined;
                                var p = new j.TransitionContext(l, a, o, a.view, c);
                                var g = this.Fa.bind(this, a, true);
                                m.animateTransition(p, g);
                            } else {
                                this.Fa(a, false);
                            }
                        }
                    };
                    b.prototype.popController = function (a) {
                        var b = this.topController;
                        var c = this.backController;
                        if (!this.ja && b && c) {
                            this.ja = true;
                            c.enabled = true;
                            c.viewWillAppear(a);
                            b.viewWillDisappear(a);
                            this.navigationBar.popItem(a);
                            if (a) {
                                var d = undefined;
                                var e = this.navigationDelegate;
                                d = e && e.animationForOperation ? e.animationForOperation(h.NavigationControllerOperation.Pop) : new i.DefaultNavigationPopTransition();
                                var f = new j.TransitionContext(b, c, b.view, c.view, this.contentNode);
                                var g = this.Va.bind(this, true);
                                d.animateTransition(f, g);
                            } else {
                                this.Va(false);
                            }
                        }
                    };
                    b.prototype.popToController = function (a, b) {
                        for (var c = this.controllers.length - b; c;) {
                            var d = this.topController;
                            if (d) {
                                d.enabled = false;
                                this.navigationBar.popItem(false);
                                this.contentNode.removeChild(d.view);
                                this.Ua.pop();
                                d.node.destroy();
                            }
                            c -= 1;
                        }
                        this.popController(a);
                    };
                    b.prototype.popToRootController = function (a) {
                        for (var b = this.controllers.length - 2; b;) {
                            var c = this.topController;
                            if (c) {
                                c.enabled = false;
                                this.navigationBar.popItem(false);
                                this.contentNode.removeChild(c.view);
                                this.Ua.pop();
                                c.node.destroy();
                            }
                            b -= 1;
                        }
                        this.popController(a);
                    };
                    b.prototype.hideNavigationBarBackground = function () {
                        this.navigationBar.background.node.active = false;
                        this.navigationBar.shadow.active = false;
                    };
                    b.prototype.showNavigationBarBackground = function () {
                        this.navigationBar.background.node.active = true;
                        this.navigationBar.shadow.active = true;
                    };
                    b.prototype.hideNavigationBar = function (a) {
                        if (a === undefined) {
                            a = true;
                        }
                        this.navigationBar.node.active = false;
                        if (a) {
                            this.Wa();
                        }
                    };
                    b.prototype.showNavigationBar = function (a) {
                        if (a === undefined) {
                            a = true;
                        }
                        this.navigationBar.node.active = true;
                        if (a) {
                            this.Wa();
                        }
                    };
                    b.prototype.enableItems = function () {
                        this.navigationBar.enableButtons();
                    };
                    b.prototype.disableItems = function () {
                        this.navigationBar.disableButtons();
                    };
                    b.prototype.setControllers = function (a) {
                        if (a && a.length && !(a.length < 1)) {
                            for (var b = this.controllers, c = b.filter(function (b) {
                                return a.indexOf(b) < 0;
                            }), d = c.length - 1; d >= 0; d--) {
                                var e = c[d];
                                e.enabled = false;
                                this.contentNode.removeChild(e.view);
                                var f = b.indexOf(e);
                                this.navigationBar.removeItemsAtIndex(f);
                                e.node.destroy();
                            }
                            this.Ua = a;
                        }
                    };
                    b.prototype.Wa = function () {
                        this.za();
                        this.qa();
                    };
                    b.prototype.za = function () {
                        var a = this.contentNode;
                        var b = this.navigationBar.node.active ? this.navigationBar.node.height : this.statusBarPlaceholderNode.height;
                        var c = this.node.height - b;
                        a.setContentSize(this.node.width, c);
                        a.y = -b;
                    };
                    b.prototype.qa = function () {
                        var a = this.contentNode;
                        var b = a.width;
                        var c = a.height;
                        var d = a.anchorX;
                        var e = a.anchorY;
                        this.controllers.forEach(function (a) {
                            var f = a.node;
                            var g = (f.anchorX - d) * b;
                            var h = (f.anchorY - e) * c;
                            a.viewWillLayoutSubviews();
                            f.setContentSize(b, c);
                            f.setPosition(cc.v2(g, h));
                            a.viewDidLayoutSubviews();
                        });
                    };
                    b.prototype.Fa = function (a, b) {
                        if (b === undefined) {
                            b = false;
                        }
                        if (this.xa()) {
                            a.viewDidAppear(b);
                        }
                        var c = this.topController;
                        this.Ua.push(a);
                        a.view.setContentSize(this.contentNode.width, this.contentNode.height);
                        this.ja = false;
                        if (c) {
                            c.viewDidDisappear(b);
                            c.enabled = false;
                        }
                    };
                    b.prototype.Va = function (a) {
                        if (a === undefined) {
                            a = false;
                        }
                        var b = this.backController;
                        if (b) {
                            b.viewDidAppear(a);
                        }
                        this.scheduleOnce(this.Ja.bind(this, a));
                    };
                    b.prototype.Ja = function (a) {
                        var b = this.topController;
                        if (b) {
                            this.contentNode.removeChild(b.view);
                            this.Ua.pop();
                            this.ja = false;
                            b.viewDidDisappear(a);
                            b.enabled = false;
                            if (b.destroy) {
                                b.destroy();
                            }
                            b.node.destroy();
                        }
                    };
                    b.prototype.xa = function () {
                        return !(this.tabBarItem instanceof k.default && !this.topController);
                    };
                    __decorate([n(f.default)], b.prototype, "defaultNavigationBar", undefined);
                    __decorate([n(cc.Node)], b.prototype, "statusBarPlaceholderNode", undefined);
                    __decorate([n(cc.Node)], b.prototype, "contentNode", undefined);
                    return __decorate([m], b);
                }(e.default);
                c.default = o;
                cc._RF.pop();
            }
        }, {
            NavigationBar: "NavigationBar",
            NavigationDefaultTransition: "NavigationDefaultTransition",
            TabBarItem: "TabBarItem",
            TransitionContext: "TransitionContext",
            TransitionEnum: "TransitionEnum",
            UIKit: "UIKit",
            ViewController: "ViewController"
        }],
        NavigationDefaultTransition: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "2472eYgH9NBWJvtIuLXvIEh", "NavigationDefaultTransition")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.DefaultNavigationPopTransition = c.DefaultNavigationPushTransition = undefined;
                var e = a("ViewControllerTransition");
                var f = function (a) {
                    function b() {
                        return a !== null && a.apply(this, arguments) || this;
                    }
                    __extends(b, a);
                    b.prototype.transitionDuration = function () { };
                    b.prototype.animateTransition = function (b, c) {
                        var d = b.getToController();
                        var e = b.getFromController();
                        var f = b.getContainer();
                        var g = (e.node.anchorX - f.anchorX - 1) * f.width;
                        var h = (e.node.anchorY - f.anchorY) * f.height;
                        e.node.runAction(cc.sequence(cc.moveTo(0.4, cc.v2(g, h)).easing(cc.easeSineIn()), cc.callFunc(function () {
                            e.node.setPosition(g, h);
                        })));
                        var i = (d.node.anchorX - f.anchorX) * f.width;
                        var a = (d.node.anchorY - f.anchorY) * f.height;
                        d.node.runAction(cc.sequence(cc.moveTo(0.4, cc.v2(i, a)).easing(cc.easeSineIn()), cc.callFunc(function () {
                            d.node.setPosition(i, a);
                            if (c) {
                                c();
                            }
                        })));
                    };
                    b.prototype.animationEnd = function () { };
                    return b;
                }(e.default);
                c.DefaultNavigationPushTransition = f;
                var g = function (a) {
                    function b() {
                        return a !== null && a.apply(this, arguments) || this;
                    }
                    __extends(b, a);
                    b.prototype.transitionDuration = function () { };
                    b.prototype.animateTransition = function (b, c) {
                        var d = b.getToController();
                        var e = b.getFromController();
                        var f = b.getContainer();
                        var g = (e.node.anchorX - f.anchorX + 1) * f.width;
                        var h = (e.node.anchorY - f.anchorY) * f.height;
                        e.node.runAction(cc.sequence(cc.moveTo(0.4, cc.v2(g, h)).easing(cc.easeSineIn()), cc.callFunc(function () {
                            e.node.setPosition(g, h);
                        })));
                        var i = (d.node.anchorX - f.anchorX) * f.width;
                        var a = (d.node.anchorY - f.anchorY) * f.height;
                        d.node.runAction(cc.sequence(cc.moveTo(0.4, cc.v2(i, a)).easing(cc.easeSineIn()), cc.callFunc(function () {
                            d.node.setPosition(i, a);
                            if (c) {
                                c();
                            }
                        })));
                    };
                    b.prototype.animationEnd = function () { };
                    return b;
                }(e.default);
                c.DefaultNavigationPopTransition = g;
                cc._RF.pop();
            }
        }, {
            ViewControllerTransition: "ViewControllerTransition"
        }],
        NoSoundAdapter: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "d85610Qhw9DzLM9jdvZsDKB", "NoSoundAdapter")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("Utils");
                var f = a("AudioAdapter");
                var g = {
                    load: function (a, b) {
                        // TOLOOK
                        setTimeout(b, 0);
                    },
                    unload: function () { }
                };
                var h = 2;
                var i = function (a) {
                    function b(b) {
                        var c = a.call(this) || this;
                        c.Ka = false;
                        c.U = 1;
                        c.W = false;
                        c.j = 1;
                        c.Qa = h;
                        c.Ya = 0;
                        c.Xa = 0;
                        c.Za = c.Za.bind(c);
                        c.$a = c.$a.bind(c);
                        c.reset(b);
                        return c;
                    }
                    __extends(b, a);
                    b.prototype.reset = function (b) {
                        this.Ya = 0;
                        this.Xa = 0;
                        if (b !== undefined) {
                            var c = b.loop;
                            var d = b.volume;
                            var e = b.muted;
                            var f = b.rate;
                            var a = b.duration;
                            if (typeof c == "boolean") {
                                this.W = c;
                            }
                            if (typeof d == "number" && d >= 0 && d <= 1) {
                                this.U = d;
                            }
                            if (typeof e == "boolean") {
                                this.Ka = e;
                            }
                            if (typeof f == "number" && f > 0) {
                                this.j = f;
                            }
                            if (typeof a == "number" && a > 0) {
                                this.Qa = a;
                            }
                        }
                    };
                    b.prototype.destroy = function () {
                        this.reset();
                        this.removeAll();
                    };
                    Object.defineProperty(b.prototype, "instantVolume", {
                        get: function () {
                            return this.U;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "volume", {
                        get: function () {
                            return this.U;
                        },
                        set: function (a) {
                            this.U = a;
                            this.tu(undefined);
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "loop", {
                        get: function () {
                            return this.W;
                        },
                        set: function (a) {
                            if (a !== this.W) {
                                this.W = a;
                                if (a) {
                                    this.iu(undefined);
                                } else {
                                    this.su();
                                }
                            }
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "paused", {
                        get: function () {
                            return this.Ya > 0 && this.Xa > 0;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "playing", {
                        get: function () {
                            return this.Ya > 0 && this.Xa === 0;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "stopped", {
                        get: function () {
                            return this.Ya === 0 && this.Xa === 0;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "rate", {
                        get: function () {
                            return this.j;
                        },
                        set: function (a) {
                            if (typeof a == "number" && a > 0 && a !== this.j) {
                                this.j = a;
                            }
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.pause = function () {
                        if (!this.paused) {
                            this.Xa = Date.now();
                            this.tu(undefined);
                            this.iu(undefined);
                        }
                    };
                    b.prototype.resume = function () {
                        if (this.paused) {
                            this.Ya += Date.now() - this.Xa;
                            this.Xa = 0;
                            if (!this.W) {
                                this.su();
                            }
                        }
                    };
                    Object.defineProperty(b.prototype, "muted", {
                        get: function () {
                            return this.Ka;
                        },
                        set: function (a) {
                            this.Ka = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "duration", {
                        get: function () {
                            return this.Qa;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "currentTime", {
                        get: function () {
                            if (this.Xa > 0) {
                                return (this.Xa - this.Ya) / 1000 % this.Qa;
                            } else {
                                return (Date.now() - this.Ya) / 1000 % this.Qa;
                            }
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.seek = function (a) {
                        this.tu(undefined);
                        if (a >= this.Qa && !this.W) {
                            this.iu(undefined);
                            this.Ya = 0;
                            this.Xa = 0;
                            this.$a();
                            this.emit(shell.WebAudioEvent.ENDED);
                            return;
                        }
                        if (this.paused) {
                            this.resume();
                        }
                        this.Ya = Date.now() - a * 1000;
                        if (!this.W) {
                            this.su();
                        }
                        this.emit(shell.WebAudioEvent.SEEK);
                    };
                    b.prototype.play = function (a, b) {
                        this.Ya = Date.now();
                        this.Qa = typeof b == "number" && b > 0 ? b : this.Qa;
                        if (!this.W) {
                            this.su();
                        }
                    };
                    b.prototype.Za = function () {
                        if (this.eu) {
                            this.tu(undefined);
                            this.$a();
                        }
                        this.Ya = 0;
                        this.Xa = 0;
                        this.emit(shell.WebAudioEvent.ENDED);
                    };
                    b.prototype.stop = function () {
                        this.tu(undefined);
                        this.iu(undefined);
                        this.Ya = 0;
                        this.Xa = 0;
                        this.emit(shell.WebAudioEvent.STOP);
                    };
                    b.prototype.fade = function (a, b, c) {
                        this.U = b;
                        this.tu(c);
                    };
                    b.prototype.$a = function () {
                        this.emit(shell.WebAudioEvent.FADED);
                    };
                    b.prototype.su = function () {
                        var a = this.Qa - this.currentTime;
                        if (a >= 0) {
                            this.iu(a);
                        } else {
                            this.iu(undefined);
                        }
                    };
                    b.prototype.iu = function (a) {
                        var b = this.nu;
                        if (b) {
                            b();
                        }
                        this.nu = a == null ? undefined : e.delayCallback(a)(this.Za);
                    };
                    b.prototype.tu = function (a) {
                        var b = this.eu;
                        if (b) {
                            b();
                        }
                        this.eu = a == null ? undefined : e.delayCallback(a)(this.$a);
                    };
                    return b;
                }(shell.CustomEventTarget);
                var j = function (a) {
                    function b(b) {
                        var c = this;
                        b.loader = g;
                        (c = a.call(this, b) || this).ou = b.estimatedDuration || h;
                        return c;
                    }
                    __extends(b, a);
                    b.prototype.getDuration = function (b) {
                        if (typeof b == "number") {
                            return a.prototype.getDuration.call(this, b);
                        } else {
                            return this.ou;
                        }
                    };
                    b.prototype.getAudioFromPool = function () {
                        var a = this.factory.get();
                        var b = {
                            duration: this.ou
                        };
                        var c = {
                            duration: this.ou
                        };
                        if (a) {
                            a.reset(b);
                            return a;
                        } else {
                            return new i(c);
                        }
                    };
                    return b;
                }(f.default);
                c.default = j;
                cc._RF.pop();
            }
        }, {
            AudioAdapter: "AudioAdapter",
            Utils: "Utils"
        }],
        NodePoolHandler: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "b0ddew/TJxHpLx+HkJnRSBk", "NodePoolHandler")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.nodePoolHandler = c.NodePoolHandler = undefined;
                var e = cc._decorator.ccclass;
                var f = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.ni = Object.create(null);
                        b.cu = Object.create(null);
                        b.hu = Object.create(null);
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.registerReusableItem = function (b, c, d, e) {
                        if (b && c) {
                            var f = this.cu;
                            if (!f[b]) {
                                f[b] = c;
                                var g = this.ni;
                                if (!g[b]) {
                                    g[b] = d ? new cc.NodePool(d) : new cc.NodePool();
                                    var h = this.hu;
                                    if (!h[b]) {
                                        h[b] = e;
                                        for (var i = 0; i < e; i++) {
                                            var j = cc.instantiate(c);
                                            this.enqueueReusableItem(j, b);
                                        }
                                    }
                                }
                            }
                        }
                    };
                    b.prototype.dequeueReusableItem = function (a) {
                        var b = this.ni[a];
                        if (b.size() > 0) {
                            return b.get();
                        }
                        var c = this.cu[a];
                        return cc.instantiate(c);
                    };
                    b.prototype.enqueueReusableItem = function (a, b) {
                        var c = this.ni[b];
                        var d = this.hu[b];
                        if (c.size() < d) {
                            c.put(a);
                        } else {
                            a.destroy();
                        }
                    };
                    b.prototype.getPool = function (a) {
                        return this.ni[a];
                    };
                    b.prototype.destroy = function () {
                        var b = this;
                        Object.keys(this.ni).forEach(function (a) {
                            b.ni[a].clear();
                        });
                        return a.prototype.destroy.call(this);
                    };
                    return __decorate([e], b);
                }(cc.Object);
                c.NodePoolHandler = f;
                var g = new f();
                c.nodePoolHandler = g;
                cc._RF.pop();
            }
        }, {}],
        NormalPrizeDecorator: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "106e2xHvchPlqWVXmeFLDHr", "NormalPrizeDecorator")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("SlotGameConstants");
                var f = a("SlotAnalyticsEnum");
                var g = a("AutoSpinHandler");
                var h = a("ButtonHitTest");
                var i = a("JakeSlotGameTemplate");
                var j = function () {
                    function a(a, b) {
                        this.name = "Normal Prize Decorator";
                        this.dataSource = undefined;
                        this.generalControllers = undefined;
                        this.dataSource = a;
                        this.generalControllers = b.generalControllers;
                    }
                    a.prototype.destroy = function () {
                        this.clearAvailableActions();
                        this.dataSource = undefined;
                        this.generalControllers = undefined;
                    };
                    a.prototype.setAvailableActions = function () {
                        var a = this.generalControllers.spinButtonController;
                        if (a.isAutoSpin()) {
                            a.setOnClickCallback(this.ru.bind(this, f.SpinTrigger.CLICK));
                            if (!i.JSGTConfig.spaceBarInterrupterEnabled) {
                                cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.ko, this);
                            }
                        }
                    };
                    a.prototype.clearAvailableActions = function () {
                        this.generalControllers.spinButtonController.clearOnClickCallback();
                        if (!i.JSGTConfig.spaceBarInterrupterEnabled) {
                            cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.ko, this);
                        }
                    };
                    a.prototype.ko = function (a) {
                        if (!i.JSGTConfig.spaceBarInterrupterEnabled && h.buttonHitTest(this.generalControllers.spinButtonController.node)) {
                            switch (a.keyCode) {
                                case e.SPIN_BUTTON_TRIGGER_KEY:
                                    this.ru(f.SpinTrigger.SPACEBAR);
                            }
                        }
                    };
                    a.prototype.ru = function () {
                        var a = this.generalControllers;
                        var b = a.spinButtonController;
                        g.exitAutoSpin(a.spinButtonController);
                        this.clearAvailableActions();
                        b.disableButton();
                    };
                    return a;
                }();
                c.default = j;
                cc._RF.pop();
            }
        }, {
            AutoSpinHandler: "AutoSpinHandler",
            ButtonHitTest: "ButtonHitTest",
            JakeSlotGameTemplate: "JakeSlotGameTemplate",
            SlotAnalyticsEnum: "SlotAnalyticsEnum",
            SlotGameConstants: "SlotGameConstants"
        }],
        NormalResultDecorator: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "94e3b2snKRKspFrhelPCcrj", "NormalResultDecorator")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("SlotStateMachine");
                var f = a("SlotAnalyticsEnum");
                var g = a("AutoSpinHandler");
                var h = a("SlotGameConstants");
                var i = a("ButtonHitTest");
                var j = a("JakeSlotGameTemplate");
                var k = a("SpinConfigHandler");
                var l = function () {
                    function a(a, b) {
                        this.triggerFastStop = undefined;
                        this.name = "Normal Result Decorator";
                        this.dataSource = undefined;
                        this.generalControllers = undefined;
                        this.dataSource = a;
                        this.generalControllers = b.generalControllers;
                    }
                    a.prototype.destroy = function () {
                        this.clearAvailableActions();
                        this.triggerFastStop = undefined;
                        this.dataSource = undefined;
                        this.generalControllers = undefined;
                    };
                    a.prototype.setAvailableActions = function () {
                        var a = this.generalControllers.spinButtonController;
                        if (a.isAutoSpin() || k.featureConfig.fastStopFeature && !this.au()) {
                            a.setOnClickCallback(this.ru.bind(this, f.SpinTrigger.CLICK));
                            if (!j.JSGTConfig.spaceBarInterrupterEnabled) {
                                cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.ko, this);
                            }
                        }
                    };
                    a.prototype.clearAvailableActions = function () {
                        this.generalControllers.spinButtonController.clearOnClickCallback();
                        if (!j.JSGTConfig.spaceBarInterrupterEnabled) {
                            cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.ko, this);
                        }
                    };
                    a.prototype.renderFeature = function (a) {
                        var b = this.generalControllers.spinButtonController;
                        if (!b.isAutoSpin()) {
                            this.clearAvailableActions();
                        }
                        b.stopSpin();
                        if (a) {
                            b.disableButton();
                        }
                    };
                    a.prototype.fastStopTriggeredWhileSpinning = function () {
                        this.uu();
                    };
                    a.prototype.triggerFastStopWhileStopping = function () {
                        this.uu();
                    };
                    a.prototype.ko = function (a) {
                        if (!j.JSGTConfig.spaceBarInterrupterEnabled && i.buttonHitTest(this.generalControllers.spinButtonController.node)) {
                            switch (a.keyCode) {
                                case h.SPIN_BUTTON_TRIGGER_KEY:
                                    this.ru(f.SpinTrigger.SPACEBAR);
                            }
                        }
                    };
                    a.prototype.ru = function (a) {
                        if (this.generalControllers.spinButtonController.isAutoSpin()) {
                            this.Co();
                        } else if (this.triggerFastStop && k.featureConfig.fastStopFeature && !this.au()) {
                            var b = this.triggerFastStop;
                            this.triggerFastStop = undefined;
                            b(a);
                        }
                    };
                    a.prototype.Co = function () {
                        var a = this.generalControllers;
                        var b = a.spinButtonController;
                        g.exitAutoSpin(a.spinButtonController);
                        if (!(k.featureConfig.fastStopFeature && !this.au())) {
                            b.disableButton();
                        }
                    };
                    a.prototype.uu = function () {
                        this.clearAvailableActions();
                        this.generalControllers.spinButtonController.disableButton();
                    };
                    a.prototype.au = function () {
                        return this.generalControllers.slotController.getStopStyle() === e.StopStyle.FAST;
                    };
                    return a;
                }();
                c.default = l;
                cc._RF.pop();
            }
        }, {
            AutoSpinHandler: "AutoSpinHandler",
            ButtonHitTest: "ButtonHitTest",
            JakeSlotGameTemplate: "JakeSlotGameTemplate",
            SlotAnalyticsEnum: "SlotAnalyticsEnum",
            SlotGameConstants: "SlotGameConstants",
            SlotStateMachine: "SlotStateMachine",
            SpinConfigHandler: "SpinConfigHandler"
        }],
        NormalSlotHandler: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "4e7ffkKWR9IMJQyzAP4dvoP", "NormalSlotHandler")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.NormalSlotHandler = c.NORMAL_SLOT_SETUP_PROPERTIES = undefined;
                var e;
                var f = a("SlotHandler");
                var g = a("SlotProperties");
                var h = a("GNormalStopScroller");
                var i = a("Utils");
                var j = a("AudioManager");
                var k = a("GeneralAudioConstant");
                var l = {
                    accelerateDuration: 0.1,
                    accelerateFactor: 1.6,
                    accelerateDistance: -230,
                    bounceDistance: 40,
                    bounceDuration: 0.1,
                    bounceFactor: 1.22
                };
                var m = {
                    endSpeed: -1856,
                    bounceDistance: -40,
                    bounceDuration: 0.4,
                    bounceFactor: 1
                };
                var n = {
                    accelerateDuration: 0.1,
                    accelerateFactor: 1.68,
                    accelerateDistance: -252,
                    bounceDistance: 40,
                    bounceDuration: 0.1,
                    bounceFactor: 1.22
                };
                (function (a) {
                    a[a.NORMAL = 0] = "NORMAL";
                    a[a.RESPIN = 1] = "RESPIN";
                })(e || (e = {}));
                c.NORMAL_SLOT_SETUP_PROPERTIES = {
                    topExtraBufferRow: 0,
                    bottomExtraBufferRow: 0,
                    scrollInterval: 0.1,
                    stopScrollInterval: 0.3,
                    maxSpeed: -4368,
                    turboSpeedFactor: 1.67,
                    blurSpeedFactor: 0.4,
                    unblurSpeedFactor: 0.8,
                    slowDownSpeedDuration: 0.5,
                    slowDownSpeed: -3400,
                    startScrollerConfig: Object.freeze(l),
                    stopScrollerConfig: Object.freeze(m),
                    turboStartScrollerConfig: Object.freeze(n),
                    interruptScrollStopScrollerConfig: Object.freeze({
                        endSpeed: 0,
                        bounceDistance: 0,
                        bounceDuration: 0,
                        bounceFactor: 0
                    })
                };
                var o = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.lu = undefined;
                        b.R = e.NORMAL;
                        b.onReelStopCallback = undefined;
                        b.fu = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.init = function (b) {
                        b = __assign(__assign(__assign({}, b), c.NORMAL_SLOT_SETUP_PROPERTIES), {
                            getRandomSymbol: this.du.bind(this),
                            stopScroller: h.default
                        });
                        a.prototype.init.call(this, b);
                    };
                    Object.defineProperty(b.prototype, "onReelStop", {
                        set: function (a) {
                            this.onReelStopCallback = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.onReelStopCallbackWrapper = function (a) {
                        if (this.onReelStopCallback) {
                            this.onReelStopCallback(a, this.R === e.RESPIN);
                        }
                    };
                    b.prototype.updateRespinSlotConfig = function () {
                        this.stopScrollInterval = c.NORMAL_SLOT_SETUP_PROPERTIES.stopScrollInterval;
                        this.slotHelper.setStopScrollerEndSpeed(2, c.NORMAL_SLOT_SETUP_PROPERTIES.stopScrollerConfig.endSpeed);
                        this.slotHelper.updateRespinSlotHelperConfig();
                        this.R = e.RESPIN;
                    };
                    b.prototype.updateNormalSpinSlotConfig = function () {
                        this.stopScrollInterval = c.NORMAL_SLOT_SETUP_PROPERTIES.stopScrollInterval;
                        this.slotHelper.setStopScrollerEndSpeed(2, c.NORMAL_SLOT_SETUP_PROPERTIES.stopScrollerConfig.endSpeed);
                        this.slotHelper.updateNormalSpinSlotHelperConfig();
                        this.R = e.NORMAL;
                    };
                    b.prototype.resetHiddenMiddleReel = function () {
                        this.slotHelper.setReelData(this.orl);
                        this.slotHelper.reloadSlot();
                    };
                    b.prototype.setOnReelReachesBouncePointCallback = function (a) {
                        this.slotHelper.setOnScrollerReachesBouncePointCallback(a);
                    };
                    b.prototype.setOnReelReachesLowestPointCallback = function (a) {
                        this.slotHelper.setOnScrollerReachesLowestPointCallback(a);
                    };
                    b.prototype.setOnReelReachesSlowDownPointCallback = function (a) {
                        this.slotHelper.setOnScrollerReachesSlowDownPointCallback(a);
                    };
                    b.prototype.runStopScroller = function (a) {
                        var b = this;
                        if (this.isFastStop) {
                            this.runInterrupt();
                        } else {
                            var c;
                            c = function (c, d) {
                                if (b.isFastStop) {
                                    b.runInterrupt();
                                } else {
                                    a(c);
                                    if (d) {
                                        d();
                                    }
                                }
                            };
                            var d = this.scheduleIterator(c, this.stopScrollInterval, this.numberOfColumn);
                            this.abortIterator = d;
                        }
                    };
                    b.prototype.setReelData = function (a) {
                        this.orl = a;
                        var b = a;
                        this.slotHelper.setReelData(b);
                    };
                    b.prototype.du = function () {
                        if (this.R === e.RESPIN) {
                            var a = Math.floor(Math.random() * 6 + 1);
                            if (a >= 1 && a <= 2) {
                                return -1;
                            } else if (a >= 3 && a <= 5) {
                                return this.lu;
                            } else {
                                return g.SLOT_INDEX.WILD;
                            }
                        }
                        var b = g.getRandomSlotSymbol(1);
                        if (b === g.SLOT_INDEX.WILD && Math.floor(Math.random() * 2 + 1) > 1) {
                            b = g.getRandomSlotSymbol(1, 2);
                        }
                        return b;
                    };
                    b.prototype.extraFastStopAction = function () {
                        var a = k.GENERAL_AUDIO.spinStopQuick.key;
                        j.stopAudioIfPlaying(a);
                        j.playAudioIfNotPlaying(a);
                        var b = k.GENERAL_AUDIO.spinActiveLoop.key;
                        j.stopAudioIfPlaying(b);
                    };
                    b.prototype.extraSpinInitialization = function () { };
                    b.prototype.onSpinStopCallbackWrapper = function () {
                        this.abortIterator = undefined;
                        var a = this.fu;
                        this.fu = undefined;
                        if (a) {
                            a();
                        }
                        if (this.spinStopCallback) {
                            this.spinStopCallback();
                        }
                    };
                    b.prototype.vu = function () {
                        var a = c.NORMAL_SLOT_SETUP_PROPERTIES.startScrollerConfig.bounceDuration * 1.2;
                        if (j.GeneralAudioPool.spin_active_loop.isPlaying()) {
                            j.GeneralAudioPool.spin_active_loop.stop();
                        }
                        if (j.GeneralAudioPool.fs_reel_loop.isPlaying()) {
                            j.GeneralAudioPool.fs_reel_loop.stop();
                        }
                        if (this.fu) {
                            this.fu();
                        }
                        this.fu = undefined;
                        this.fu = i.delayCallback(a)(function () {
                            j.GeneralAudioPool.spin_active_loop.setVolume(1);
                            j.GeneralAudioPool.spin_active_loop.play();
                        });
                    };
                    b.prototype.setRespinSymbol = function (a) {
                        this.lu = a;
                    };
                    b.prototype.disableAllSprite = function () {
                        var a;
                        (a = this.slotHelper.slotItemHandler).getSlotItems.apply(a, __spread([0, 1, 2, 3, 4, 5, 6, 7, 8])).forEach(function (a) {
                            if (a) {
                                a.disableSprite();
                            }
                        });
                    };
                    return b;
                }(f.SlotHandler);
                c.NormalSlotHandler = o;
                cc._RF.pop();
            }
        }, {
            AudioManager: "AudioManager",
            GNormalStopScroller: "GNormalStopScroller",
            GeneralAudioConstant: "GeneralAudioConstant",
            SlotHandler: "SlotHandler",
            SlotProperties: "SlotProperties",
            Utils: "Utils"
        }],
        NormalSpinDecorator: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "2e3a0I2XG9HlaoLlfg0FwUG", "NormalSpinDecorator")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("SlotStateMachine");
                var f = a("AutoSpinHandler");
                var g = a("SlotAnalyticsEnum");
                var h = a("SlotGameConstants");
                var i = a("ButtonHitTest");
                var j = a("SettingMenuHelper");
                var k = a("JakeSlotGameTemplate");
                var l = a("SpinConfigHandler");
                var m = function () {
                    function a(a, b) {
                        this.triggerFastStop = undefined;
                        this.name = "Normal Spin Decorator";
                        this.dataSource = undefined;
                        this.generalControllers = undefined;
                        this.dataSource = a;
                        this.generalControllers = b.generalControllers;
                    }
                    a.prototype.destroy = function () {
                        this.clearAvailableActions();
                        this.triggerFastStop = undefined;
                        this.dataSource = undefined;
                        this.generalControllers = undefined;
                    };
                    a.prototype.stateWillStartSpin = function () {
                        this.generalControllers.spinButtonController.spin();
                    };
                    a.prototype.setAvailableActions = function () {
                        var a = this.generalControllers.spinButtonController;
                        if (a.isAutoSpin() || l.featureConfig.fastStopFeature && !j.settingMenuHelper.turboSpinOn) {
                            a.setOnClickCallback(this.ru.bind(this, g.SpinTrigger.CLICK));
                            if (!k.JSGTConfig.spaceBarInterrupterEnabled) {
                                cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.ko, this);
                            }
                        } else {
                            a.disableButton();
                        }
                    };
                    a.prototype.clearAvailableActions = function () {
                        this.generalControllers.spinButtonController.clearOnClickCallback();
                        if (!k.JSGTConfig.spaceBarInterrupterEnabled) {
                            cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.ko, this);
                        }
                    };
                    a.prototype.slotFastStopTriggered = function () {
                        this.clearAvailableActions();
                        this.generalControllers.spinButtonController.disableButton();
                    };
                    a.prototype.startSlotController = function () {
                        this.generalControllers.slotController.spin(j.settingMenuHelper.turboSpinOn);
                    };
                    a.prototype.ko = function (a) {
                        if (!k.JSGTConfig.spaceBarInterrupterEnabled && i.buttonHitTest(this.generalControllers.spinButtonController.node)) {
                            switch (a.keyCode) {
                                case h.SPIN_BUTTON_TRIGGER_KEY:
                                    this.ru(g.SpinTrigger.SPACEBAR);
                            }
                        }
                    };
                    a.prototype.ru = function (a) {
                        if (this.generalControllers.spinButtonController.isAutoSpin()) {
                            this.Co();
                        } else if (l.featureConfig.fastStopFeature && !this.au()) {
                            var b = this.triggerFastStop;
                            this.triggerFastStop = undefined;
                            b(a);
                        }
                    };
                    a.prototype.Co = function () {
                        var a = this.generalControllers;
                        var b = a.spinButtonController;
                        f.exitAutoSpin(a.spinButtonController);
                        if (!(l.featureConfig.fastStopFeature && !this.au())) {
                            b.disableButton();
                        }
                    };
                    a.prototype.au = function () {
                        return this.generalControllers.slotController.getStopStyle() === e.StopStyle.FAST;
                    };
                    return a;
                }();
                c.default = m;
                cc._RF.pop();
            }
        }, {
            AutoSpinHandler: "AutoSpinHandler",
            ButtonHitTest: "ButtonHitTest",
            JakeSlotGameTemplate: "JakeSlotGameTemplate",
            SettingMenuHelper: "SettingMenuHelper",
            SlotAnalyticsEnum: "SlotAnalyticsEnum",
            SlotGameConstants: "SlotGameConstants",
            SlotStateMachine: "SlotStateMachine",
            SpinConfigHandler: "SpinConfigHandler"
        }],
        NormalUIHelper: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "8e1caArY3JI+JrliWQwAV70", "NormalUIHelper")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("SettingMenuHelper");
                var f = a("GSlotTransactionModel");
                var g = a("BaseUIHelper");
                var h = a("SlotProperties");
                var i = a("Utils");
                var j = a("GConstants");
                var l = a("SlotStateMachine");
                var k = a("GeneralAudioConstant");
                var m = a("AudioManager");
                var n = function (a) {
                    function b(b, c) {
                        var d = a.call(this, b, c) || this;
                        d.name = "Normal UI Helper";
                        return d;
                    }
                    __extends(b, a);
                    b.prototype.extraPreSpinningCleanup = function (a) {
                        var b = this.generalControllers;
                        var c = b.paySelectEffectController;
                        var d = b.slotController;
                        var e = this.dataSource.transactionModel;
                        var f = e.winLines;
                        var g = e.accumulatedWinAmount;
                        if (f || g > 0) {
                            c.hide(function () {
                                c.stopPaySelect();
                                if (a) {
                                    a();
                                }
                            });
                        } else if (a) {
                            a();
                        }
                        d.onSpinEffect();
                    };
                    b.prototype.renderBonusFeatureBeforeResult = function (a, b) {
                        i.sequenceCallback(function (b) {
                            if (a) {
                                a();
                            }
                            if (b) {
                                b();
                            }
                        }, this._u.bind(this))(function () {
                            if (b) {
                                b();
                            }
                        });
                    };
                    b.prototype.renderFeatureDuringResult = function (a) {
                        var b = this.dataSource.transactionModel;
                        var c = b.isShowTease;
                        var d = b.stateTransitionTo;
                        function e() {
                            if (a) {
                                a();
                            }
                        }
                        if (c && d !== f.SpinType.RESPIN) {
                            this.mu(e);
                        } else {
                            e();
                        }
                    };
                    b.prototype.renderFeatureAfterResult = function (a) {
                        var b = this.generalControllers;
                        var c = b.trailParticleEffectController;
                        var d = b.slotController;
                        var i = b.tigerController;
                        var j = this.dataSource.transactionModel;
                        var l = j.reels;
                        var n = j.isTriggerWild;
                        var o = j.stateTransitionTo;
                        var p = j.wildCount;
                        function q() {
                            if (a) {
                                a();
                            }
                        }
                        var r = e.settingMenuHelper.turboSpinOn;
                        var g = h.getSlotWilds(l);
                        var s = d.getSlotItem(g);
                        var t = i.getIngotWorldPos();
                        if (n && o === f.SpinType.NORMAL) {
                            c.playWildCollectEffect(s, t, r, function () {
                                i.playIngot(p);
                                var a = k.GENERAL_AUDIO.symWildReach.key;
                                m.stopAudioIfPlaying(a);
                                m.playAudioIfNotPlaying(a);
                            }, q);
                        } else {
                            q();
                        }
                    };
                    b.prototype.renderTeaseFeatureBeforeResult = function (a, b) {
                        var c = this;
                        i.sequenceCallback(function (b) {
                            a();
                            if (b) {
                                b();
                            }
                        }, function (a) {
                            c.pu(function () {
                                if (a) {
                                    a();
                                }
                            });
                        })(function () {
                            if (b) {
                                b();
                            }
                        });
                    };
                    b.prototype.pu = function (a) {
                        var b = this.generalControllers;
                        var c = b.uiShiftController;
                        var d = b.backgroundController;
                        var e = b.tigerController;
                        var f = b.slotController;
                        var g = b.backgroundController2;
                        i.sequenceCallback(i.spawnCallback(function (a) {
                            c.teaseDown(j.TEASE_TIMING.ENTER_TEASE_DURATION, function () {
                                if (a) {
                                    a();
                                }
                            });
                        }, function (a) {
                            g.teaseZoomOut();
                            f.teaseZoomOut();
                            e.teaseZoomOut();
                            d.teaseZoomOut(function () {
                                if (a) {
                                    a();
                                }
                            });
                        }), i.delayCallback(0.1))(function () {
                            if (a) {
                                a();
                            }
                        });
                    };
                    b.prototype.mu = function (a) {
                        var b = this.generalControllers;
                        var c = b.uiShiftController;
                        var d = b.backgroundController;
                        var f = b.backgroundController2;
                        var g = b.slotController;
                        var h = b.tigerController;
                        var k = this.dataSource.transactionModel.wildCount;
                        var m = g.getStopStyle() === l.StopStyle.FAST;
                        var n = e.settingMenuHelper.turboSpinOn || m ? j.TEASE_TIMING.EXIT_TEASE_DURATION * (1 - j.TURBO_SPIN_SPEEDUP_FACTOR) : j.TEASE_TIMING.EXIT_TEASE_DURATION;
                        i.spawnCallback(function (a) {
                            c.teaseUp(n, function () {
                                if (a) {
                                    a();
                                }
                            });
                        }, function (a) {
                            f.teaseZoomIn();
                            g.teaseZoomIn();
                            h.teaseZoomIn(k);
                            d.teaseZoomIn(function () {
                                if (a) {
                                    a();
                                }
                            });
                        })(function () {
                            if (a) {
                                a();
                            }
                        });
                    };
                    b.prototype._u = function (a) {
                        var b = this.generalControllers;
                        var c = b.uiShiftController;
                        var d = b.backgroundController;
                        var e = b.foregroundController;
                        var f = b.tigerController;
                        var h = b.infoboardController;
                        var l = b.slotController;
                        var n = b.backgroundController2;
                        var o = b.stickyController;
                        var p = b.angpaoController;
                        var q = this.dataSource.transactionModel.featureWinSymbol;
                        var g = j.FEATURE_TRANSITION_TIMING.UI_TRANSITION_INTO_BONUS_DURATION;
                        function r(a) {
                            e.playRespin(a);
                            l.setupRespinSlotConfig();
                            l.playRespin();
                            var c = k.GENERAL_AUDIO.featureStart.key;
                            m.stopAudioIfPlaying(c);
                            m.playAudioIfNotPlaying(c);
                        }
                        i.sequenceCallback(i.deferCallback(true), i.spawnCallback(function (a) {
                            c.shiftDown(g, a);
                            h.playZoom();
                            h.resumeInfoboard();
                            o.resetAudioCount();
                        }, i.sequenceCallback(function (a) {
                            n.zoomOut();
                            f.zoomOut();
                            l.zoomOut();
                            d.zoomOut();
                            p.playRespin(q, r, a);
                        }, function (a) {
                            f.playRespin(a);
                        })))(function () {
                            if (a) {
                                a();
                            }
                        });
                    };
                    b.prototype.extraSmallWinAction = function () { };
                    b.prototype.extraMediumWinAction = function () { };
                    return b;
                }(g.default);
                c.default = n;
                cc._RF.pop();
            }
        }, {
            AudioManager: "AudioManager",
            BaseUIHelper: "BaseUIHelper",
            GConstants: "GConstants",
            GSlotTransactionModel: "GSlotTransactionModel",
            GeneralAudioConstant: "GeneralAudioConstant",
            SettingMenuHelper: "SettingMenuHelper",
            SlotProperties: "SlotProperties",
            SlotStateMachine: "SlotStateMachine",
            Utils: "Utils"
        }],
        NotifyHelper: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "9dba9c1YjJGvYgyg8KnkuQD", "NotifyHelper")) {
                var c = System.get("bvframework").Notify;
                for (var d in c) {
                    b.exports[d] = c[d];
                }
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        NumberCurvedController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "22ff3ETL9NJ6LV0gfCqckfH", "NumberCurvedController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("NumberDisplayController");
                var f = cc._decorator;
                var g = f.ccclass;
                var h = f.property;
                var i = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.curveness = 0.1;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.dequeueNumberContainer = function (a) {
                        var b = this.numberContainer.children[a];
                        if (!b) {
                            (b = new cc.Node("container")).width = this.nodeNumberWidth;
                            this.numberContainer.addChild(b);
                            var c = new cc.Node("numberSprite");
                            c.addComponent(cc.Sprite);
                            b.addChild(c);
                        }
                        return b;
                    };
                    b.prototype.displayNumber = function (b, c, d) {
                        if (c === undefined) {
                            c = true;
                        }
                        a.prototype.displayNumber.call(this, b, c, d);
                        this.bu.updateLayout();
                        var e = 0;
                        this.numberContainer.children.forEach(function (a) {
                            e += a.width;
                        });
                        for (var f = 0; f < this.numberContainer.children.length; f++) {
                            var g = this.dequeueNumberContainer(f);
                            var h = e / 2;
                            var i = (100 / Math.abs(this.curveness) + h) / this.numberContainer.scale;
                            var j = undefined;
                            var k = undefined;
                            if (this.curveness > 0) {
                                j = Math.sqrt(Math.pow(i, 2) - Math.pow(g.x, 2));
                                k = Math.atan2(Math.abs(j), g.x) * 180 / Math.PI;
                                g.angle = -(90 - k);
                            } else if (this.curveness < 0) {
                                j = Math.sqrt(Math.pow(i, 2) + Math.pow(g.x, 2));
                                k = Math.atan2(Math.abs(j), g.x) * 180 / Math.PI;
                                g.angle = 90 - k;
                            } else {
                                g.angle = 0;
                            }
                            g.y = j - i;
                        }
                    };
                    __decorate([h({
                        min: -10,
                        max: 10,
                        slide: true,
                        tooltip: false,
                        type: cc.Float
                    })], b.prototype, "curveness", undefined);
                    return __decorate([g], b);
                }(e.default);
                c.default = i;
                cc._RF.pop();
            }
        }, {
            NumberDisplayController: "NumberDisplayController"
        }],
        NumberDisplayController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "e13cc9FLShL66GevrFVSv5p", "NumberDisplayController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("Utils");
                var f = a("NumberDisplayInterface");
                var g = cc._decorator;
                var h = g.ccclass;
                var i = g.property;
                var j = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.numberSpriteAtlas = undefined;
                        b.numberBlurSpriteAtlas = undefined;
                        b.numberSprite = [];
                        b.numberBlurSprite = [];
                        b.kSprite = undefined;
                        b.srcBlendFactor = cc.macro.BlendFactor.SRC_ALPHA;
                        b.dstBlendFactor = cc.macro.BlendFactor.ONE_MINUS_SRC_ALPHA;
                        b.nodeNumberWidth = 141;
                        b.nodeNumberY = 0;
                        b.nodeNumberScale = 1;
                        b.commaWidth = 50;
                        b.commaY = 0;
                        b.commaScale = 1;
                        b.decimalWidth = 60;
                        b.decimalY = 0;
                        b.decimalScale = 1;
                        b.decimalNumberWidth = 121;
                        b.decimalNumberY = 1;
                        b.decimalNumberScale = 0.9;
                        b.multiplySpriteWidth = 50;
                        b.multiplySpriteY = 0;
                        b.multiplySpriteScale = 1;
                        b.layoutSpacingX = 0;
                        b.layoutSpacingY = 0;
                        b.blurScale = 1;
                        b.spriteColor = "FFFFFF";
                        b.disableFixedWidth = false;
                        b.enablePrefixNumber = false;
                        b.Su = false;
                        b.gu = false;
                        b.Cu = "0";
                        b.yu = 0;
                        b.Mu = 0;
                        b.attributesForNumberContainer = undefined;
                        return b;
                    }
                    var c = {
                        tooltip: false
                    };
                    var d = {
                        tooltip: false
                    };
                    var f = {
                        tooltip: false
                    };
                    __extends(b, a);
                    Object.defineProperty(b.prototype, "preview", {
                        get: function () {
                            return this.gu;
                        },
                        set: function (a) {
                            this.gu = a;
                            if (a) {
                                this.displayNumber(this.previewNumber);
                            } else {
                                this.clear();
                            }
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "previewNumber", {
                        get: function () {
                            return this.Cu;
                        },
                        set: function (a) {
                            this.Cu = a;
                            this.displayNumber(a);
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "currentNumberBlurSprite", {
                        get: function () {
                            if (this.numberBlurSpriteAtlas) {
                                return this.numberBlurSpriteAtlas.getSpriteFrames();
                            } else {
                                return this.numberBlurSprite;
                            }
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "currentNumberSprite", {
                        get: function () {
                            if (this.numberSpriteAtlas) {
                                return this.numberSpriteAtlas.getSpriteFrames();
                            } else {
                                return this.numberSprite;
                            }
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.onLoad = function () {
                        this.yu = this.numberContainer.scaleX;
                        this.Mu = this.numberContainer.scaleY;
                        this.numberContainer.on(cc.Node.EventType.SIZE_CHANGED, this.resizeNumberIfNeeded, this);
                    };
                    b.prototype.getNumberList = function (b, c) {
                        var a = /(?:\d+)(?:\.\d+)?/gm.exec(b.toString());
                        if (a) {
                            var d = parseFloat(a[0]);
                            var e = this.Au(d, c);
                            var f = typeof b == "number" ? e : b.replace(a[0], e);
                            var g = Array.from(f);
                            if (this.enablePrefixNumber) {
                                g.unshift("x");
                            }
                            return g;
                        }
                        return Array.from(b.toString());
                    };
                    b.prototype.getSpriteConfig = function (b) {
                        switch (b) {
                            case ",":
                                var c = {
                                    width: this.commaWidth,
                                    scale: this.commaScale,
                                    y: this.commaY,
                                    spriteFrame: this.currentNumberSprite[10]
                                };
                                return c;
                            case ".":
                                var a = {
                                    width: this.decimalWidth,
                                    scale: this.decimalScale,
                                    y: this.decimalY,
                                    spriteFrame: this.currentNumberSprite[11]
                                };
                                return a;
                            case "x":
                                var d = {
                                    width: this.multiplySpriteWidth,
                                    scale: this.multiplySpriteScale,
                                    y: this.multiplySpriteY,
                                    spriteFrame: this.currentNumberSprite[12]
                                };
                                return d;
                            case "k":
                                var e = {
                                    width: this.nodeNumberWidth,
                                    scale: this.nodeNumberScale,
                                    y: this.nodeNumberY,
                                    spriteFrame: this.kSprite
                                };
                                return e;
                            case " ":
                                var f = {
                                    width: this.commaWidth,
                                    scale: this.commaScale,
                                    y: this.commaY,
                                    spriteFrame: undefined
                                };
                                return f;
                            default:
                                return;
                        }
                    };
                    b.prototype.getNumberSpriteConfig = function (b, c, a) {
                        if (a) {
                            return {
                                scale: c ? this.decimalNumberScale * this.blurScale : this.decimalNumberScale,
                                width: this.decimalNumberWidth,
                                y: this.decimalNumberY,
                                spriteFrame: c ? this.currentNumberBlurSprite[parseInt(b, 10)] : this.currentNumberSprite[parseInt(b, 10)]
                            };
                        } else {
                            return {
                                scale: this.nodeNumberScale,
                                width: this.nodeNumberWidth,
                                y: this.nodeNumberY,
                                spriteFrame: c ? this.currentNumberBlurSprite[parseInt(b, 10)] : this.currentNumberSprite[parseInt(b, 10)]
                            };
                        }
                    };
                    b.prototype.displayNumber = function (a, b, c) {
                        if (b === undefined) {
                            b = true;
                        }
                        this.Iu();
                        var d = this.getNumberList(a, b);
                        d = d.reverse();
                        var f = false;
                        this.wu(d.length);
                        for (var g = 0; g < d.length; g++) {
                            var h = this.dequeueNumberContainer(g);
                            var i = h.getChildByName("numberSprite").getComponent(cc.Sprite);
                            var j = this.getSpriteConfig(d[g]);
                            if (j) {
                                h.width = j.width;
                                h.scaleX = h.scaleY = j.scale;
                                i.node.y = j.y;
                                i.spriteFrame = j.spriteFrame;
                            } else {
                                f = false;
                                var l = e.getDefaultCurrencyFormat().decimalSeparator;
                                var n = g < d.indexOf(l);
                                if (n && d.indexOf(l) !== -1) {
                                    f = !b;
                                }
                                var o = this.getNumberSpriteConfig(d[g], f, n && d.indexOf(l) !== -1);
                                h.scale = o.scale;
                                h.width = o.width;
                                i.node.y = o.y;
                                i.spriteFrame = o.spriteFrame;
                            }
                            if (this.disableFixedWidth || h.width === -1) {
                                h.width = i.node.width;
                            }
                            this.Ou(g, d[g], f, h);
                        }
                        if (c) {
                            c();
                        }
                    };
                    b.prototype.wu = function (b) {
                        var c = this.numberContainer.children.length;
                        if (b < c) {
                            for (var a = c - b; a !== 0;) {
                                var d = this.numberContainer.children[0];
                                d.removeFromParent();
                                d.destroy();
                                a--;
                            }
                        }
                    };
                    b.prototype.clear = function () {
                        this.numberContainer.removeAllChildren();
                        this.Hu();
                        this.numberContainer.width = 0;
                    };
                    b.prototype.Hu = function () {
                        if (this.yu && this.Mu) {
                            this.numberContainer.scaleX = this.yu;
                            this.numberContainer.scaleY = this.Mu;
                        }
                    };
                    b.prototype.Au = function (b, c) {
                        var a = b;
                        var d = "";
                        var f = 1;
                        if (this.enableShortenNumber && b > 999) {
                            f = 1000;
                            d = "k";
                        }
                        var g = !e.getDefaultCurrencyFormat().hideDecimal && this.enableDecimal;
                        a = g ? Math.floor(a / f) : Math.round(a / f);
                        if (this.enableComma) {
                            a = this.numberWithComma(a);
                        }
                        if (g) {
                            a += this.Bu(b, c);
                        }
                        return a + d;
                    };
                    b.prototype.Bu = function (b, c) {
                        var a;
                        var d;
                        var f;
                        var g = e.getDefaultCurrencyFormat().decimalSeparator;
                        if (this.enableShortenNumber && b > 999) {
                            a = Math.round(b / 100) / 10;
                            d = 2;
                            f = c ? "" : g + "0";
                        } else {
                            a = b;
                            d = 3;
                            f = g + "00";
                        }
                        var h = a.toString();
                        if (h.indexOf(".") !== -1) {
                            for (f = g + (f = h.substring(h.indexOf(".") + 1, h.indexOf(".") + d)); f.length !== d;) {
                                f += "0";
                            }
                        }
                        return f;
                    };
                    b.prototype.Ou = function (b, c, a, d) {
                        if (this.attributesForNumberContainer) {
                            this.attributesForNumberContainer(b, c, a, d);
                        }
                    };
                    b.prototype.dequeueNumberContainer = function (b) {
                        var c = this.numberContainer.children[b];
                        if (!c) {
                            (c = new cc.Node("container")).width = this.nodeNumberWidth;
                            this.numberContainer.addChild(c);
                            var d = new cc.Node("numberSprite");
                            d.addComponent(cc.Sprite);
                            var e = d.getComponent(cc.Sprite);
                            e.srcBlendFactor = this.srcBlendFactor;
                            e.dstBlendFactor = this.dstBlendFactor;
                            c.addChild(d);
                            d.color = new cc.Color().fromHEX(this.spriteColor);
                        }
                        return c;
                    };
                    b.prototype.resizeNumberIfNeeded = function () {
                        var b = this.numberContainer.width;
                        var c = this.maxContainerSize / b;
                        var a = b * this.numberContainer.scaleX;
                        if (isFinite(c) && Math.round(a) > this.maxContainerSize) {
                            this.numberContainer.scale = c;
                        }
                    };
                    b.prototype.Gu = function (b, c, a) {
                        this.numberContainer.runAction(cc.sequence(cc.scaleTo(0.08, b), cc.scaleTo(0.05, c), cc.callFunc(a, this)));
                    };
                    b.prototype.Iu = function () {
                        if (!this.bu) {
                            var a = this.bu = this.numberContainer.getComponent(cc.Layout);
                            if (!a) {
                                a = this.bu = this.numberContainer.addComponent(cc.Layout);
                            }
                            a.resizeMode = cc.Layout.ResizeMode.CONTAINER;
                            a.horizontalDirection = cc.Layout.HorizontalDirection.RIGHT_TO_LEFT;
                            a.type = cc.Layout.Type.HORIZONTAL;
                            a.spacingX = this.layoutSpacingX;
                            a.spacingY = this.layoutSpacingY;
                        }
                    };
                    b.prototype.onDestroy = function () {
                        this.attributesForNumberContainer = undefined;
                    };
                    __decorate([i({
                        type: cc.SpriteAtlas,
                        tooltip: false
                    })], b.prototype, "numberSpriteAtlas", undefined);
                    __decorate([i({
                        type: cc.SpriteAtlas,
                        tooltip: false
                    })], b.prototype, "numberBlurSpriteAtlas", undefined);
                    __decorate([i({
                        type: [cc.SpriteFrame],
                        tooltip: false
                    })], b.prototype, "numberSprite", undefined);
                    __decorate([i({
                        type: [cc.SpriteFrame]
                    })], b.prototype, "numberBlurSprite", undefined);
                    __decorate([i({
                        type: cc.SpriteFrame
                    })], b.prototype, "kSprite", undefined);
                    __decorate([i({
                        type: cc.macro.BlendFactor,
                        tooltip: false
                    }), i({
                        type: cc.macro.BlendFactor,
                        tooltip: false
                    })], b.prototype, "srcBlendFactor", undefined);
                    __decorate([i({
                        type: cc.macro.BlendFactor,
                        tooltip: false
                    })], b.prototype, "dstBlendFactor", undefined);
                    __decorate([i({
                        type: cc.Integer,
                        tooltip: false
                    })], b.prototype, "nodeNumberWidth", undefined);
                    __decorate([i({
                        type: cc.Integer,
                        tooltip: false
                    })], b.prototype, "nodeNumberY", undefined);
                    __decorate([i({
                        type: cc.Float,
                        tooltip: false
                    })], b.prototype, "nodeNumberScale", undefined);
                    __decorate([i({
                        type: cc.Float,
                        tooltip: false
                    })], b.prototype, "commaWidth", undefined);
                    __decorate([i({
                        type: cc.Integer,
                        tooltip: false
                    })], b.prototype, "commaY", undefined);
                    __decorate([i({
                        type: cc.Float,
                        tooltip: false
                    })], b.prototype, "commaScale", undefined);
                    __decorate([i({
                        type: cc.Integer,
                        tooltip: false
                    })], b.prototype, "decimalWidth", undefined);
                    __decorate([i({
                        type: cc.Integer,
                        tooltip: false
                    })], b.prototype, "decimalY", undefined);
                    __decorate([i({
                        type: cc.Float,
                        tooltip: false
                    })], b.prototype, "decimalScale", undefined);
                    __decorate([i({
                        type: cc.Integer,
                        tooltip: false
                    })], b.prototype, "decimalNumberWidth", undefined);
                    __decorate([i({
                        type: cc.Integer,
                        tooltip: false
                    })], b.prototype, "decimalNumberY", undefined);
                    __decorate([i({
                        type: cc.Float,
                        tooltip: false
                    })], b.prototype, "decimalNumberScale", undefined);
                    __decorate([i({
                        type: cc.Integer,
                        tooltip: false
                    })], b.prototype, "multiplySpriteWidth", undefined);
                    __decorate([i({
                        type: cc.Integer,
                        tooltip: false
                    })], b.prototype, "multiplySpriteY", undefined);
                    __decorate([i({
                        type: cc.Float,
                        tooltip: false
                    })], b.prototype, "multiplySpriteScale", undefined);
                    __decorate([i({
                        type: cc.Float,
                        tooltip: false
                    })], b.prototype, "layoutSpacingX", undefined);
                    __decorate([i({
                        type: cc.Float,
                        tooltip: false
                    })], b.prototype, "layoutSpacingY", undefined);
                    __decorate([i({
                        type: cc.Float,
                        tooltip: false
                    })], b.prototype, "blurScale", undefined);
                    __decorate([i(c)], b.prototype, "spriteColor", undefined);
                    __decorate([i(d)], b.prototype, "disableFixedWidth", undefined);
                    __decorate([i(f)], b.prototype, "enablePrefixNumber", undefined);
                    __decorate([i({
                        type: cc.Float,
                        visible: function () {
                            return this.preview;
                        }
                    })], b.prototype, "previewNumber", null);
                    return __decorate([h], b);
                }(f.default);
                c.default = j;
                cc._RF.pop();
            }
        }, {
            NumberDisplayInterface: "NumberDisplayInterface",
            Utils: "Utils"
        }],
        NumberDisplayInterface: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "6e9deOwoQZHDb/Mv4FAbr3R", "NumberDisplayInterface")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("Utils");
                var f = cc._decorator;
                var g = f.ccclass;
                var h = f.property;
                var i = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.numberContainer = undefined;
                        b.maxContainerSize = 1142;
                        b.enableComma = true;
                        b.enableDecimal = true;
                        b.enableShortenNumber = false;
                        return b;
                    }
                    var c = {
                        tooltip: false
                    };
                    var d = {
                        tooltip: false
                    };
                    var f = {
                        tooltip: false
                    };
                    __extends(b, a);
                    b.prototype.numberWithComma = function (a) {
                        var b = e.getDefaultCurrencyFormat().groupSeparator;
                        return a.toString().replace(/\B(?=(\d{3})+(?!\d))/g, b);
                    };
                    b.prototype.setResizeAnimation = function (a) {
                        this.Nu = a;
                    };
                    b.prototype.displayNumber = function (a, b) {
                        if (b === undefined) {
                            b = true;
                        }
                        throw Error("NumberDisplayInterface: method must be overriden");
                    };
                    b.prototype.clear = function () {
                        throw Error("NumberDisplayInterface: method must be overriden");
                    };
                    b.prototype.resizeNumberIfNeeded = function () {
                        throw Error("NumberDisplayInterface: method must be overriden");
                    };
                    __decorate([h(cc.Node)], b.prototype, "numberContainer", undefined);
                    __decorate([h(cc.Float)], b.prototype, "maxContainerSize", undefined);
                    __decorate([h(c)], b.prototype, "enableComma", undefined);
                    __decorate([h(d)], b.prototype, "enableDecimal", undefined);
                    __decorate([h(f)], b.prototype, "enableShortenNumber", undefined);
                    return __decorate([g], b);
                }(cc.Component);
                c.default = i;
                cc._RF.pop();
            }
        }, {
            Utils: "Utils"
        }],
        NumberLabelControllerLite: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "88c0bvJUDVGt4Zbi3DnKpmf", "NumberLabelControllerLite")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("Utils");
                var f = cc.misc.lerp;
                var g = cc._decorator;
                var h = g.ccclass;
                var i = g.property;
                var j = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.label = undefined;
                        b.rollDuration = 2;
                        b.maxWidth = 0;
                        b.Tu = false;
                        b.Pu = 0;
                        b.Ru = 0;
                        b.Lu = 0;
                        b.Eu = false;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.play = function (a, b) {
                        if (this.Eu) {
                            this.unschedule(this.ku);
                            this.Eu = false;
                        }
                        this.Ru = a;
                        this.Lu = b;
                        this.Pu = 0;
                        this.Eu = true;
                        this.Tu = !(a > b);
                        this.schedule(this.ku, 0);
                    };
                    b.prototype.skip = function (a) {
                        if (this.Eu) {
                            this.unschedule(this.ku);
                            this.Eu = false;
                        }
                        this.label.string = e.formatCurrency(a);
                    };
                    b.prototype.ku = function (a) {
                        this.Pu += a;
                        var b = this.Pu / this.rollDuration;
                        b = b >= 1 ? 1 : 1 - Math.cos(b * Math.PI * 0.5);
                        var c = f(this.Ru, this.Lu, b);
                        if (this.Tu) {
                            if (c >= this.Lu) {
                                c = this.Lu;
                                this.unschedule(this.ku);
                                this.Eu = false;
                            }
                        } else if (c <= this.Lu) {
                            c = this.Lu;
                            this.unschedule(this.ku);
                            this.Eu = false;
                        }
                        this.label.string = e.formatCurrency(c);
                    };
                    __decorate([i(cc.Label)], b.prototype, "label", undefined);
                    __decorate([i(cc.Integer)], b.prototype, "rollDuration", undefined);
                    __decorate([i(cc.Float)], b.prototype, "maxWidth", undefined);
                    return __decorate([h], b);
                }(cc.Component);
                c.default = j;
                cc._RF.pop();
            }
        }, {
            Utils: "Utils"
        }],
        NumberLabelController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "b6e176hgIFCvo12TMjQIRc7", "NumberLabelController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("NumberDisplayInterface");
                var f = a("Utils");
                var g = cc._decorator.ccclass;
                var h = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.Su = false;
                        b.yu = 0;
                        b.Mu = 0;
                        b.Tc = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.onLoad = function () {
                        this.yu = this.numberContainer.scaleX;
                        this.Mu = this.numberContainer.scaleY;
                        this.Iu();
                        this.numberContainer.on(cc.Node.EventType.SIZE_CHANGED, this.resizeNumberIfNeeded, this);
                    };
                    b.prototype.setPrefix = function (a) {
                        this.Uu = a;
                    };
                    b.prototype.displayNumber = function (a, b, c) {
                        if (b === undefined) {
                            b = true;
                        }
                        this.ju = c;
                        var d = this.getNumberList(a, b);
                        this.Tc.string = this.Uu ? this.Uu + d : d;
                        if (b) {
                            var e = this.ju;
                            this.ju = null;
                            if (e) {
                                e();
                            }
                        }
                    };
                    b.prototype.getNumberList = function (a, b) {
                        var c = /(?:\d+)(?:\.\d+)?/gm.exec(a.toString());
                        if (c) {
                            var d = parseFloat(c[0]);
                            var e = this.Au(d, b);
                            if (typeof a == "number") {
                                return e;
                            } else {
                                return a.replace(c[0], e);
                            }
                        }
                        return a.toString();
                    };
                    b.prototype.Au = function (a, b) {
                        var c = a;
                        var d = "";
                        var e = 1;
                        if (this.enableShortenNumber && a > 999) {
                            e = 1000;
                            d = "k";
                        }
                        var g = !f.getDefaultCurrencyFormat().hideDecimal && this.enableDecimal;
                        c = g ? Math.floor(c / e) : Math.round(c / e);
                        if (this.enableComma) {
                            c = this.numberWithComma(c);
                        }
                        if (g) {
                            c += this.Bu(a, b);
                        }
                        return c + d;
                    };
                    b.prototype.Bu = function (b, c) {
                        var d;
                        var e;
                        var g;
                        var h = f.getDefaultCurrencyFormat().decimalSeparator;
                        if (this.enableShortenNumber && b > 999) {
                            d = Math.round(b / 100) / 10;
                            e = 2;
                            g = c ? "" : h + "0";
                        } else {
                            d = b;
                            e = 3;
                            g = h + "00";
                        }
                        var i = d.toString();
                        if (i.indexOf(h) !== -1) {
                            for (g = i.substring(i.indexOf(h), i.indexOf(h) + e); g.length !== e;) {
                                g += "0";
                            }
                        }
                        return g;
                    };
                    b.prototype.clear = function () {
                        this.Tc.string = "";
                        this.Hu();
                    };
                    b.prototype.resizeNumberIfNeeded = function () {
                        var a = this;
                        if (!this.Su) {
                            var b = this.numberContainer.width;
                            var c = this.maxContainerSize / b;
                            var d = b * this.numberContainer.scaleX;
                            var e = this.ju;
                            this.ju = null;
                            if (isFinite(c) && !this.Su && Math.round(d) > this.maxContainerSize) {
                                this.Su = true;
                                var g = c - 0.06;
                                function b() {
                                    a.Su = false;
                                    if (e) {
                                        e();
                                    }
                                }
                                if (this.Nu) {
                                    this.Nu(this.numberContainer, g, c, b);
                                } else {
                                    this.Gu(g, c, b);
                                }
                            } else {
                                f.delayCallback(0)(function () {
                                    if (e) {
                                        e();
                                    }
                                });
                            }
                        }
                    };
                    b.prototype.Hu = function () {
                        if (this.yu && this.Mu) {
                            this.numberContainer.scaleX = this.yu;
                            this.numberContainer.scaleY = this.Mu;
                        }
                    };
                    b.prototype.Gu = function (a, b, c) {
                        this.numberContainer.runAction(cc.sequence(cc.scaleTo(0.08, a), cc.scaleTo(0.05, b), cc.callFunc(c, this)));
                    };
                    b.prototype.Iu = function () {
                        this.Tc = this.numberContainer.getComponent(cc.Label);
                        if (!this.Tc) {
                            this.Tc = this.numberContainer.addComponent(cc.Label);
                            this.Tc.fontSize = 45;
                            this.Tc.lineHeight = 60;
                            this.Tc.string = "";
                        }
                    };
                    b.prototype.onDestroy = function () {
                        this.ju = null;
                        this.Nu = null;
                    };
                    return __decorate([g], b);
                }(e.default);
                c.default = h;
                cc._RF.pop();
            }
        }, {
            NumberDisplayInterface: "NumberDisplayInterface",
            Utils: "Utils"
        }],
        NumberRollBaseController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "b940fHCDN9PkIykJo0EuNqR", "NumberRollBaseController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("NumberDisplayInterface");
                var f = cc._decorator;
                var g = f.ccclass;
                var h = f.property;
                var i = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.rollDuration = 2;
                        b.displayController = undefined;
                        b.Ru = 0;
                        b.Du = 0;
                        b.Qa = 0;
                        b.Pu = 0;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.onLoad = function () {
                        this.enabled = false;
                    };
                    b.prototype.play = function (a, b, c, d) {
                        if (d === undefined) {
                            d = true;
                        }
                        if (!(b < 0 || a < 0)) {
                            if (a === b) {
                                if (d) {
                                    this.displayController.clear();
                                }
                                this.displayController.displayNumber(b, true, c);
                                return;
                            }
                            this.Wu = c;
                            this.Ru = a;
                            this.Du = b;
                            this.Qa = this.rollDuration;
                            this.Pu = 0;
                            if (d) {
                                this.displayController.clear();
                            }
                            this.displayController.displayNumber(a, false);
                            this.enabled = true;
                        }
                    };
                    b.prototype.skip = function () {
                        var a = this;
                        if (this.enabled) {
                            this.stop(false);
                            this.displayController.displayNumber(this.Du, true, function () {
                                var b = a.Wu;
                                a.Wu = undefined;
                                if (b) {
                                    b();
                                }
                            });
                        }
                    };
                    b.prototype.stop = function (a) {
                        this.enabled = false;
                        if (a) {
                            this.displayController.clear();
                            this.Wu = undefined;
                        }
                    };
                    b.prototype.update = function (a) {
                        var b = this;
                        this.Pu += a;
                        var c = this.Pu / this.Qa;
                        if (c >= 1) {
                            this.stop(false);
                            this.displayController.displayNumber(this.Du, true, function () {
                                var a = b.Wu;
                                b.Wu = undefined;
                                if (a) {
                                    a();
                                }
                            });
                        } else {
                            c = 1 - Math.cos(c * Math.PI * 0.5);
                            var d = cc.misc.lerp(this.Ru, this.Du, c);
                            this.displayController.displayNumber(d, false);
                        }
                    };
                    __decorate([h(cc.Integer)], b.prototype, "rollDuration", undefined);
                    __decorate([h({
                        override: true,
                        type: e.default
                    })], b.prototype, "displayController", undefined);
                    return __decorate([g], b);
                }(cc.Component);
                c.default = i;
                cc._RF.pop();
            }
        }, {
            NumberDisplayInterface: "NumberDisplayInterface"
        }],
        NumberRollController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "6ce4aSiKeVGJZPyEX2VbsSD", "NumberRollController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("NumberDisplayController");
                var f = a("NumberRollBaseController");
                var g = cc._decorator;
                var h = g.ccclass;
                var i = g.property;
                var j = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.displayController = undefined;
                        return b;
                    }
                    var c = {
                        type: e.default,
                        override: true
                    };
                    __extends(b, a);
                    __decorate([i(c)], b.prototype, "displayController", undefined);
                    return __decorate([h], b);
                }(f.default);
                c.default = j;
                cc._RF.pop();
            }
        }, {
            NumberDisplayController: "NumberDisplayController",
            NumberRollBaseController: "NumberRollBaseController"
        }],
        NumberRollCurveController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "a0a6doEXuNKgJy7Sh2yc8T3", "NumberRollCurveController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("NumberCurvedController");
                var f = a("NumberRollBaseController");
                var g = cc._decorator;
                var h = g.ccclass;
                var i = g.property;
                var j = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.displayController = undefined;
                        return b;
                    }
                    var c = {
                        type: e.default,
                        override: true
                    };
                    __extends(b, a);
                    __decorate([i(c)], b.prototype, "displayController", undefined);
                    return __decorate([h], b);
                }(f.default);
                c.default = j;
                cc._RF.pop();
            }
        }, {
            NumberCurvedController: "NumberCurvedController",
            NumberRollBaseController: "NumberRollBaseController"
        }],
        NumberRollLabelController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "9b7acp+xyJLMJ5gESfkIJHz", "NumberRollLabelController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("NumberLabelController");
                var f = a("NumberRollBaseController");
                var g = cc._decorator;
                var h = g.ccclass;
                var i = g.property;
                var j = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.displayController = undefined;
                        return b;
                    }
                    var c = {
                        type: e.default,
                        override: true
                    };
                    __extends(b, a);
                    __decorate([i(c)], b.prototype, "displayController", undefined);
                    return __decorate([h], b);
                }(f.default);
                c.default = j;
                cc._RF.pop();
            }
        }, {
            NumberLabelController: "NumberLabelController",
            NumberRollBaseController: "NumberRollBaseController"
        }],
        OperatorJurisdictionModel: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "bcfa7PvQx1LKqzexGjCVrpW", "OperatorJurisdictionModel")) {
                var c = System.get("bvframework").OperatorJurisdictionModel;
                for (var d in c) {
                    b.exports[d] = c[d];
                }
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        PageControlButton: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "49dd983G1VDGoSnw7stgTlI", "PageControlButton")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("Button");
                var f = cc._decorator;
                var g = f.ccclass;
                var h = f.property;
                var i = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.sprite = undefined;
                        b.selectImg = undefined;
                        b.normalImg = undefined;
                        b.selectTintColor = undefined;
                        b.normalTintColor = undefined;
                        b.index = 0;
                        b.xu = false;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.init = function () {
                        if (this.selectImg) {
                            this.sprite.SpriteFrame = this.normalImg;
                        }
                        this.normalColor = this.normalTintColor;
                        this.xu = false;
                    };
                    b.prototype.setSelect = function () {
                        if (!this.xu) {
                            if (this.selectImg) {
                                this.sprite.spriteFrame = this.selectImg;
                            }
                            this.normalColor = this.selectTintColor;
                            this.xu = true;
                        }
                    };
                    b.prototype.setUnselect = function () {
                        if (this.xu) {
                            if (this.selectImg) {
                                this.sprite.spriteFrame = this.normalImg;
                            }
                            this.normalColor = this.normalTintColor;
                            this.xu = false;
                        }
                    };
                    b.prototype.selectDot = function () {
                        if (!(this.delegate && this.delegate.canChangePage && !this.delegate.canChangePage() || this.xu)) {
                            if (this.selectImg) {
                                this.sprite.spriteFrame = this.selectImg;
                            }
                            this.normalColor = this.selectTintColor;
                            this.xu = true;
                            if (this.delegate && this.delegate.didSelectDotAtIndex) {
                                this.delegate.didSelectDotAtIndex(this.index);
                            }
                        }
                    };
                    __decorate([h(cc.Sprite)], b.prototype, "sprite", undefined);
                    __decorate([h(cc.SpriteFrame)], b.prototype, "selectImg", undefined);
                    __decorate([h(cc.SpriteFrame)], b.prototype, "normalImg", undefined);
                    __decorate([h(cc.Color)], b.prototype, "selectTintColor", undefined);
                    __decorate([h(cc.Color)], b.prototype, "normalTintColor", undefined);
                    __decorate([h(cc.Integer)], b.prototype, "index", undefined);
                    return __decorate([g], b);
                }(e.default);
                c.default = i;
                cc._RF.pop();
            }
        }, {
            Button: "Button"
        }],
        PageControl: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "db0df9/6UZNW6sskb9QIFSg", "PageControl")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("PageControlButton");
                var f = cc._decorator;
                var g = f.ccclass;
                var h = f.property;
                var i = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.buttonPrefab = undefined;
                        b.delegate = undefined;
                        b.Fu = 0;
                        b.Vu = 0;
                        b.zu = [];
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.init = function (b, c, d) {
                        if (!(b >= c || b < 0)) {
                            this.node.removeAllChildren();
                            this.Vu = c;
                            this.delegate = d;
                            for (var f = [], g = 0; g < c; g++) {
                                var h = cc.instantiate(this.buttonPrefab);
                                h.parent = this.node;
                                var i = h.getComponent(e.default);
                                i.index = g;
                                i.delegate = this;
                                i.init();
                                f.push(i);
                            }
                            f[b].setSelect();
                            this.Fu = b;
                            this.zu = f;
                        }
                    };
                    b.prototype.layoutContainer = function (a) {
                        this.getComponent(cc.Layout).spacingX = a;
                    };
                    b.prototype.changeCurrentPage = function (a) {
                        var b = this.Vu;
                        if (!(a < 0 || a >= b)) {
                            var c = this.zu;
                            c[this.Fu].setUnselect();
                            c[a].setSelect();
                            this.Fu = a;
                        }
                    };
                    b.prototype.getCurrentPage = function () {
                        return this.Fu;
                    };
                    b.prototype.didSelectDotAtIndex = function (a) {
                        this.zu[this.Fu].setUnselect();
                        this.Fu = a;
                        if (this.delegate && this.delegate.changePage) {
                            this.delegate.changePage(a);
                        }
                    };
                    b.prototype.canChangePage = function () {
                        var a = this.delegate;
                        return !(a && a.enableChangePage && !a.enableChangePage());
                    };
                    __decorate([h(cc.Prefab)], b.prototype, "buttonPrefab", undefined);
                    return __decorate([g], b);
                }(cc.Component);
                c.default = i;
                cc._RF.pop();
            }
        }, {
            PageControlButton: "PageControlButton"
        }],
        PayLineController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "c9f44ISS95Bv42TJHp3d0he", "PayLineController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.LINE_POINT_MAP = undefined;
                var e = a("SlotProperties");
                var f = a("Line");
                c.LINE_POINT_MAP = [[cc.v2(-475, 0), cc.v2(475, 0)], [cc.v2(-475, 260), cc.v2(475, 260)], [cc.v2(-475, -273), cc.v2(475, -273)], [cc.v2(-475, 364), cc.v2(475, -365)], [cc.v2(-475, -365), cc.v2(475, 364)]];
                var g = cc._decorator;
                var h = g.ccclass;
                var i = g.property;
                var j = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.circlePrefab = undefined;
                        b.lineAnimation = undefined;
                        b.circleAnimation = undefined;
                        b.itemColumns = [];
                        b.holder = undefined;
                        b.lineHeaderPrefab = undefined;
                        b.lineMediumPrefab = undefined;
                        b.lineTailPrefab = undefined;
                        b.qu = [undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined, undefined];
                        b.Ju = undefined;
                        b.Ku = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.init = function () {
                        var a = this;
                        this.Ju = this.lineAnimation.duration;
                        this.Ku = this.circleAnimation.duration;
                        var b = e.NORMAL_SLOT_ITEM_SIZE.height;
                        var d = e.NORMAL_SLOT_ITEM_SIZE.width / 2;
                        this.itemColumns.forEach(function (b, a) {
                            b.position = cc.v2(d * (a - 2), 0);
                        });
                        this.qu.forEach(function (c, d) {
                            var f = e.getColumnFromIndex(d);
                            var g = e.getRowFromIndex(d);
                            var h = cc.v2(0, -b * (g - 1));
                            var i = e.NORMAL_SLOT_ROW - g;
                            var j = a.itemColumns[f * 2];
                            var k = cc.instantiate(a.circlePrefab);
                            var l = k.getComponent("PayLineItemController");
                            j.addChild(k, i);
                            k.position = h;
                            l.init();
                            a.qu[d] = l;
                        });
                        f.Line.init(this.holder, 0, this.lineHeaderPrefab, this.lineMediumPrefab, this.lineTailPrefab);
                        var g = [];
                        c.LINE_POINT_MAP.forEach(function (b, a) {
                            g[a] = [];
                            b.forEach(function (b, c) {
                                g[a][c] = cc.v2(b.x, b.y);
                            });
                        });
                        f.Line.setLineMap(g);
                        f.Line.updateLineMargin(8, 8.5, 8);
                        f.Line.updateLineAnimName("payline_header", "payline_medium", "payline_tail");
                    };
                    b.prototype.destroy = function () {
                        this.qu.forEach(function (a) {
                            a.stop();
                            a.node.destroy();
                        });
                        this.qu = [];
                        return a.prototype.destroy.call(this);
                    };
                    b.prototype.show = function (b, c, d) {
                        var e = this;
                        var g = 0.4;
                        if (d) {
                            g *= 0.6;
                        }
                        b.forEach(function (a) {
                            var b = e.qu[a];
                            b.node.active = true;
                            b.play(0, d);
                        });
                        this.itemColumns.forEach(function (a) {
                            a.runAction(cc.sequence(cc.delayTime(0), cc.fadeIn(g)));
                        });
                        if (c.length > 0) {
                            f.Line.showLines(c);
                            f.Line.startLineAnimation(true);
                        }
                    };
                    b.prototype.showLine = function (a) {
                        if (f.Line) {
                            f.Line.hideAllLines();
                        }
                        if (a.length > 0) {
                            f.Line.showLines(a);
                            f.Line.startLineAnimation(true);
                        }
                    };
                    b.prototype.hide = function () {
                        if (f.Line) {
                            f.Line.hideAllLines();
                        }
                        this.qu.forEach(function (a) {
                            a.stop();
                            a.node.active = false;
                        });
                        this.itemColumns.forEach(function (a) {
                            a.stopAllActions();
                            a.opacity = 0;
                        });
                    };
                    __decorate([i(cc.Prefab)], b.prototype, "circlePrefab", undefined);
                    __decorate([i(cc.AnimationClip)], b.prototype, "lineAnimation", undefined);
                    __decorate([i(cc.AnimationClip)], b.prototype, "circleAnimation", undefined);
                    __decorate([i([cc.Node])], b.prototype, "itemColumns", undefined);
                    __decorate([i(cc.Node)], b.prototype, "holder", undefined);
                    __decorate([i(cc.Prefab)], b.prototype, "lineHeaderPrefab", undefined);
                    __decorate([i(cc.Prefab)], b.prototype, "lineMediumPrefab", undefined);
                    __decorate([i(cc.Prefab)], b.prototype, "lineTailPrefab", undefined);
                    return __decorate([h], b);
                }(cc.Component);
                c.default = j;
                cc._RF.pop();
            }
        }, {
            Line: "Line",
            SlotProperties: "SlotProperties"
        }],
        PayLineItemController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "2147bFZHrVDQYbyCvZS/DhX", "PayLineItemController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("GConstants");
                var f = cc._decorator;
                var g = f.ccclass;
                var h = f.property;
                var i = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.animation = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.init = function () {
                        this.node.active = false;
                    };
                    b.prototype.play = function (a, b, c) {
                        var d = this;
                        if (this.Qu) {
                            throw Error("PayLineItemController: play - onPlayComplete callback from the previous iteration still exists!");
                        }
                        this.Qu = function () {
                            d.Qu = undefined;
                            if (c) {
                                c();
                            }
                        };
                        this.Yu();
                        this.animation.stop();
                        this.node.runAction(cc.sequence(cc.delayTime(a), cc.callFunc(function () {
                            d.animation.defaultClip.speed = b ? 1 + e.TURBO_SPIN_SPEEDUP_FACTOR : 1;
                            d.animation.setCurrentTime(0);
                            d.animation.play();
                            d.animation.on("finished", d.Qu.bind(d));
                        })));
                    };
                    b.prototype.stop = function () {
                        this.Xu();
                        this.Yu();
                        if (this.Qu) {
                            var a = this.Qu;
                            this.Qu = undefined;
                            if (a) {
                                a();
                            }
                        }
                    };
                    b.prototype.unuse = function () {
                        this.stop();
                    };
                    b.prototype.destroy = function () {
                        this.stop();
                        return a.prototype.destroy.call(this);
                    };
                    b.prototype.Xu = function () {
                        this.animation.off("finished");
                        this.animation.stop();
                        this.animation.setCurrentTime(0);
                    };
                    b.prototype.Yu = function () {
                        this.node.stopAllActions();
                    };
                    __decorate([h(cc.Animation)], b.prototype, "animation", undefined);
                    return __decorate([g], b);
                }(cc.Component);
                c.default = i;
                cc._RF.pop();
            }
        }, {
            GConstants: "GConstants"
        }],
        PayLineNumberController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "37901L1qc1MGaIbS5+1jIyr", "PayLineNumberController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("PayLineNumberItem");
                var f = cc._decorator;
                var g = f.ccclass;
                var h = f.property;
                var i = [cc.v2(-510, 460), cc.v2(510, 460), cc.v2(-510, 700), cc.v2(510, 700), cc.v2(-510, 200), cc.v2(510, 200), cc.v2(-510, 780), cc.v2(510, 120), cc.v2(-510, 120), cc.v2(510, 780)];
                var j = [1, 1, 2, 2, 3, 3, 4, 4, 5, 5];
                var k = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.payLineNumberItemPrefab = undefined;
                        b.activeLines = [];
                        b.map = [];
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.init = function () {
                        for (var a = 0; a < 10; a++) {
                            var b = cc.instantiate(this.payLineNumberItemPrefab);
                            var c = b.getComponent(e.default);
                            var d = j[a];
                            var f = {
                                payLineNumberItem: c,
                                line: d
                            };
                            var g = i[a];
                            c.init(d);
                            b.setPosition(g);
                            this.node.addChild(b);
                            this.map.push(f);
                        }
                    };
                    b.prototype.destroy = function () {
                        this.activeLines.length = 0;
                        this.map.length = 0;
                        this.node.destroyAllChildren();
                        this.node.destroy();
                        return a.prototype.destroy.call(this);
                    };
                    b.prototype.show = function (a) {
                        var b = this;
                        a.forEach(function (a) {
                            b.activeLines.push(a);
                        });
                        this.map.forEach(function (b) {
                            var c = b.payLineNumberItem;
                            var d = b.line;
                            if (a.includes(d)) {
                                c.play();
                            }
                        });
                    };
                    b.prototype.disable = function () {
                        this.map.forEach(function (a) {
                            a.payLineNumberItem.disable();
                        });
                        this.activeLines.length = 0;
                    };
                    b.prototype.idle = function () {
                        this.map.forEach(function (a) {
                            a.payLineNumberItem.idle();
                        });
                        this.activeLines.length = 0;
                    };
                    __decorate([h(cc.Prefab)], b.prototype, "payLineNumberItemPrefab", undefined);
                    return __decorate([g], b);
                }(cc.Component);
                c.default = k;
                cc._RF.pop();
            }
        }, {
            PayLineNumberItem: "PayLineNumberItem"
        }],
        PayLineNumberItem: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "0c976li/9BBQLbmNpe4DNk4", "PayLineNumberItem")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e;
                var f = cc._decorator;
                var g = f.ccclass;
                var h = f.property;
                (function (a) {
                    a[a.NORMAL = 0] = "NORMAL";
                    a[a.DARK = 1] = "DARK";
                    a[a.GREY = 2] = "GREY";
                    a[a.DARK_GREY = 3] = "DARK_GREY";
                })(e || (e = {}));
                var i = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.normalNumberDisplayNode = undefined;
                        b.greyNumberDisplayNode = undefined;
                        b.backgroundSprite = undefined;
                        b.Zu = undefined;
                        b.$u = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.init = function (a) {
                        this.Zu = this.normalNumberDisplayNode.getComponent("NumberDisplayController");
                        this.Zu.displayNumber(a, false);
                        this.$u = this.greyNumberDisplayNode.getComponent("NumberDisplayController");
                        this.$u.displayNumber(a, false);
                        this.idle();
                    };
                    b.prototype.play = function () {
                        this.normalNumberDisplayNode.active = true;
                        this.greyNumberDisplayNode.active = false;
                        this.backgroundSprite.node.active = true;
                        this.node.scale = 1;
                        this.node.opacity = 255;
                    };
                    b.prototype.disable = function () {
                        this.normalNumberDisplayNode.active = false;
                        this.greyNumberDisplayNode.active = true;
                        this.backgroundSprite.node.active = false;
                        this.node.scale = 0.8;
                        this.node.opacity = 127.5;
                    };
                    b.prototype.idle = function () {
                        this.normalNumberDisplayNode.active = false;
                        this.greyNumberDisplayNode.active = true;
                        this.backgroundSprite.node.active = false;
                        this.node.scale = 0.8;
                        this.node.opacity = 127.5;
                    };
                    __decorate([h(cc.Node)], b.prototype, "normalNumberDisplayNode", undefined);
                    __decorate([h(cc.Node)], b.prototype, "greyNumberDisplayNode", undefined);
                    __decorate([h(cc.Sprite)], b.prototype, "backgroundSprite", undefined);
                    return __decorate([g], b);
                }(cc.Component);
                c.default = i;
                cc._RF.pop();
            }
        }, {}],
        PayOutEffectController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "099ab3FAXlCS6JRUtR13wsh", "PayOutEffectController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = cc._decorator;
                var f = e.ccclass;
                var g = e.property;
                var h = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.payOutItemNode = undefined;
                        b.tl = undefined;
                        b.il = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.init = function (a) {
                        this.tl = a;
                        this.il = this.payOutItemNode.getComponent("PayOutItem");
                        this.il.init();
                    };
                    b.prototype.destroy = function () {
                        this.il = undefined;
                        this.tl = undefined;
                        return a.prototype.destroy.call(this);
                    };
                    b.prototype.play = function (a, b, c) {
                        var d = this.sl(a);
                        var e = this.node.convertToNodeSpaceAR(d);
                        this.payOutItemNode.setPosition(e);
                        this.il.setup(b);
                        this.il.play();
                        if (c) {
                            c();
                        }
                    };
                    b.prototype.stop = function () {
                        this.il.stop();
                    };
                    b.prototype.sl = function (a) {
                        var b = a[1];
                        var c = this.tl.getSlotItemWorldPosition([b])[0];
                        var d = cc.v2(c.x, c.y);
                        if (b === 5) {
                            d = cc.v2(c.x, c.y + 65);
                        }
                        return d;
                    };
                    __decorate([g(cc.Node)], b.prototype, "payOutItemNode", undefined);
                    return __decorate([f], b);
                }(cc.Component);
                c.default = h;
                cc._RF.pop();
            }
        }, {}],
        PayOutItem: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "2c10b5izwFC+pBQLe/G4U1m", "PayOutItem")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = cc._decorator;
                var f = e.ccclass;
                var g = e.property;
                var h = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.winAmountDisplayNode = undefined;
                        b.winAmountBackgroundNode = undefined;
                        b.el = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.init = function () {
                        this.el = this.winAmountDisplayNode.getComponent("NumberDisplayController");
                        this.node.active = false;
                    };
                    b.prototype.destroy = function () {
                        this.el = undefined;
                        return a.prototype.destroy.call(this);
                    };
                    b.prototype.setup = function (a) {
                        this.el.clear();
                        this.el.displayNumber(a);
                        var b = a.toFixed(2).length - 6;
                        if (b > 0) {
                            var c = b * 0.15;
                            this.winAmountBackgroundNode.scaleX = 1 + c;
                        } else {
                            this.winAmountBackgroundNode.scaleX = 1;
                        }
                    };
                    b.prototype.play = function () {
                        this.node.active = true;
                    };
                    b.prototype.stop = function () {
                        this.node.active = false;
                    };
                    __decorate([g(cc.Node)], b.prototype, "winAmountDisplayNode", undefined);
                    __decorate([g(cc.Node)], b.prototype, "winAmountBackgroundNode", undefined);
                    return __decorate([f], b);
                }(cc.Component);
                c.default = h;
                cc._RF.pop();
            }
        }, {}],
        PaySelectEffectController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "e2f7cLFCHFFprer2z6wff9/", "PaySelectEffectController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("Utils");
                var f = a("SlotProperties");
                var g = a("GConstants");
                var h = a("SpineConfigHandler");
                var i = a("AudioManager");
                var j = a("GeneralAudioConstant");
                var k = cc._decorator;
                var l = k.ccclass;
                var m = k.property;
                var n = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.paySelectItemPrefab = undefined;
                        b.paySelectItemHolderNode = undefined;
                        b.nl = new cc.NodePool("PaySelectItem");
                        b.ol = [];
                        b.cl = undefined;
                        b.hl = undefined;
                        b.al = undefined;
                        b.tl = undefined;
                        b.ul = undefined;
                        b.ll = undefined;
                        b.fl = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.init = function (a, b, c, d) {
                        this.tl = a;
                        this.cl = b;
                        this.al = c;
                        this.hl = d;
                        this.dl(f.NO_OF_SLOT_ITEMS);
                    };
                    b.prototype.destroy = function () {
                        this.tl = undefined;
                        this.cl = undefined;
                        this.al = undefined;
                        this.hl = undefined;
                        this.ol = undefined;
                        this.nl.clear();
                        return a.prototype.destroy.call(this);
                    };
                    b.prototype.playAllLines = function (a, b, c, d) {
                        this.node.opacity = 255;
                        this.vl();
                        this._l();
                        this.al.disable();
                        var h = a.winPositions;
                        h.forEach(function (a, b) {
                            h[b] = parseInt(a, 10);
                        });
                        var i = f.getFilteredWinPositions(a);
                        var j = b ? g.PAY_SELECT_TIMING.ALL_LINE_ONE_BY_ONE_INTERVAL : 0;
                        var k = d;
                        var l = g.PAY_SELECT_TIMING.PLAY_ALL_LINE_DURATION;
                        if (l > 0) {
                            k = undefined;
                            e.delayCallback(l)(k);
                        }
                        this.pl(h, i, b, j, c, k);
                    };
                    b.prototype.playAlternateLines = function (a, b) {
                        var c = this;
                        this.node.opacity = 255;
                        var d = a.winPositions;
                        var h = g.PAY_SELECT_TIMING.PLAY_ALTERNATE_LINE_DURATION;
                        var k = g.PAY_SELECT_TIMING.ALTERNATE_LINE_ONE_BY_ONE_INTERVAL;
                        var l = g.PAY_SELECT_TIMING.ALL_LINE_ONE_BY_ONE_INTERVAL;
                        var m = 0;
                        function n() {
                            c.vl();
                            c._l();
                            c.al.disable();
                            var e;
                            var h;
                            var n;
                            var o;
                            var p = j.GENERAL_AUDIO.prizePayoutIdle.key;
                            i.stopAudioIfPlaying(p);
                            i.playAudioIfNotPlaying(p);
                            if (m === d.length) {
                                e = f.getFilteredWinPositions(a);
                                h = true;
                                n = l;
                                o = d;
                                m = 0;
                            } else {
                                e = a.getWinLinesByPosition(d[m]);
                                h = true;
                                n = k;
                                var q = b.getWinValueByPosition(d[m]);
                                c.cl.play(e, q);
                                o = [d[m]];
                                m++;
                            }
                            o.forEach(function (a, c) {
                                o[c] = parseInt(a, 10);
                            });
                            c.pl(o, e, h, n, false, undefined);
                        }
                        this.unscheduleDelayPlayAlternateLine = e.delayCallback(g.PAY_SELECT_TIMING.ALTERNATE_LINE_DELAY_TIME)(function () {
                            c.unscheduleDelayPlayAlternateLine = undefined;
                            n();
                            c.schedule(n, h, undefined, 0);
                        });
                    };
                    b.prototype.stopPaySelect = function (a) {
                        if (a === undefined) {
                            a = true;
                        }
                        this.vl();
                        this._l();
                        if (a) {
                            this.al.idle();
                        }
                        this.unscheduleAllCallbacks();
                        var b = this.unscheduleDelayPlayAlternateLine;
                        this.unscheduleDelayPlayAlternateLine = undefined;
                        if (b) {
                            b();
                        }
                    };
                    b.prototype.show = function () {
                        this.node.opacity = 255;
                    };
                    b.prototype.hide = function (a) {
                        this.unscheduleAllCallbacks();
                        var b = this.unscheduleDelayPlayAlternateLine;
                        this.unscheduleDelayPlayAlternateLine = undefined;
                        if (b) {
                            b();
                        }
                        this.node.runAction(cc.sequence(cc.fadeOut(0.1), cc.callFunc(function () {
                            if (a) {
                                a();
                            }
                        })));
                    };
                    b.prototype.pl = function (a, b, c, d, e, g) {
                        var i = this;
                        this.ol = [];
                        var j = f.sortReelIndex(b);
                        var k = this.tl.getSlotItem(j);
                        var l = 0;
                        function m() {
                            if (l === k.length - 1) {
                                if (g) {
                                    g();
                                }
                            } else {
                                l++;
                            }
                        }
                        this.hl.show(b, a, e);
                        this.al.show(a);
                        k.forEach(function (a, c) {
                            var d = a.symbolIndex;
                            var g = j[c];
                            f.getColumnFromIndex(g);
                            var k = a.worldPosition;
                            var l = a.node.zIndex;
                            var b = i.paySelectItemHolderNode.convertToNodeSpaceAR(k);
                            var n = i.bl();
                            var o = n.getComponent("PaySelectItem");
                            var p = h.spineConfigHandler.getNormalSymbolSpine(d);
                            n.setPosition(b);
                            n.zIndex = l;
                            i.paySelectItemHolderNode.addChild(n);
                            i.ol.push(o);
                            n.active = false;
                            o.setup(p, a);
                            o.play(0, e, m);
                        });
                    };
                    b.prototype.vl = function () {
                        var a = this;
                        if (this.ll) {
                            this.ll();
                        }
                        this.ll = undefined;
                        this.ol.forEach(function (b) {
                            a.Sl(b.node);
                        });
                    };
                    b.prototype._l = function () {
                        this.cl.stop();
                        this.hl.hide();
                    };
                    b.prototype.dl = function (a) {
                        for (var b = 0; b < a; b++) {
                            this.nl.put(cc.instantiate(this.paySelectItemPrefab));
                        }
                    };
                    b.prototype.bl = function () {
                        if (this.nl.size() > 0) {
                            return this.nl.get();
                        } else {
                            return cc.instantiate(this.paySelectItemPrefab);
                        }
                    };
                    b.prototype.Sl = function (a) {
                        this.nl.put(a);
                    };
                    __decorate([m(cc.Prefab)], b.prototype, "paySelectItemPrefab", undefined);
                    __decorate([m(cc.Node)], b.prototype, "paySelectItemHolderNode", undefined);
                    return __decorate([l], b);
                }(cc.Component);
                c.default = n;
                cc._RF.pop();
            }
        }, {
            AudioManager: "AudioManager",
            GConstants: "GConstants",
            GeneralAudioConstant: "GeneralAudioConstant",
            SlotProperties: "SlotProperties",
            SpineConfigHandler: "SpineConfigHandler",
            Utils: "Utils"
        }],
        PaySelectItem: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "9f6dfKNzXBHb5TYrbsh+sWw", "PaySelectItem")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("Utils");
                var f = a("GConstants");
                var g = cc._decorator;
                var h = g.ccclass;
                var i = g.property;
                var j = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.payoutSpine = undefined;
                        b.particle = undefined;
                        b.gl = undefined;
                        b.Cl = undefined;
                        b.yl = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.unuse = function () {
                        if (this.gl && this.yl) {
                            this.gl.visible = true;
                        }
                        this.gl = undefined;
                        if (this.Cl) {
                            this.Cl();
                        }
                        this.payoutSpine.clearTracks();
                        this.payoutSpine.setToSetupPose();
                        this.node.active = false;
                    };
                    b.prototype.setup = function (a, b, c) {
                        if (c === undefined) {
                            c = true;
                        }
                        this.gl = b;
                        this.yl = c;
                        this.payoutSpine.skeletonData = a;
                    };
                    b.prototype.play = function (b, c, d) {
                        var g = this;
                        this.particle.stop();
                        this.particle.setCurrentTime(0);
                        this.particle.node.getComponent(cc.Sprite).spriteFrame = undefined;
                        function h() {
                            if (d) {
                                d();
                            }
                        }
                        function a() {
                            if (g.gl) {
                                g.gl.visible = false;
                            }
                            g.node.active = true;
                            g.payoutSpine.clearTracks();
                            g.payoutSpine.setToSetupPose();
                            g.particle.play();
                            g.payoutSpine.timeScale = c ? 1 + f.TURBO_SPIN_SPEEDUP_FACTOR : 1;
                            var a = g.payoutSpine.setAnimation(0, "win", false);
                            g.payoutSpine.addAnimation(0, "idle", true);
                            var b = c ? a.animation.duration * (1 - f.TURBO_SPIN_SPEEDUP_FACTOR) : a.animation.duration;
                            g.payoutSpine.addAnimation(0, "win_idle", true, 0);
                            e.delayCallback(b)(h);
                        }
                        if (b > 0) {
                            this.Cl = e.delayCallback(b)(a);
                        } else {
                            a();
                        }
                    };
                    b.prototype.Ml = function (a) {
                        return {
                            Al: a,
                            easing: function (a) {
                                if (a === 0 || a === 1) {
                                    return a;
                                } else {
                                    return Math.pow(2, a * -20) * Math.sin((a - this.Al / 4) * Math.PI * 2 / this.Al) + 1;
                                }
                            },
                            reverse: function () {
                                return cc.easeElasticIn(this.Al);
                            }
                        };
                    };
                    b.prototype.destroy = function () {
                        this.node.destroy();
                        a.prototype.destroy.call(this);
                    };
                    __decorate([i(sp.Skeleton)], b.prototype, "payoutSpine", undefined);
                    __decorate([i(cc.Animation)], b.prototype, "particle", undefined);
                    return __decorate([h], b);
                }(cc.Component);
                c.default = j;
                cc._RF.pop();
            }
        }, {
            GConstants: "GConstants",
            Utils: "Utils"
        }],
        PlayerModel: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "a0229IKmbpNBb61dHEQilWX", "PlayerModel")) {
                var c = System.get("bvframework").PlayerModel;
                b.exports.default = c;
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        PopOutItemHandler: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "ed9375KsD1NcYjBhMUREze+", "PopOutItemHandler")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = cc._decorator.ccclass;
                var f = function () {
                    function a() {
                        this.zi = undefined;
                        this.Il = undefined;
                        this.wl = undefined;
                        this.Ol = undefined;
                        this.Hl = undefined;
                    }
                    a.prototype.init = function (a, b) {
                        var c = cc.instantiate(a);
                        b.addChild(c);
                        this.Ol = c;
                        this.Hl = c.getComponent("PopOutItem");
                        this.Il = this.Hl.show.bind(this.Hl);
                        this.wl = this.Hl.hide.bind(this.Hl);
                        c.active = false;
                    };
                    a.prototype.getPopoutItem = function () {
                        return this.Ol;
                    };
                    a.prototype.setCancelCallback = function (a) {
                        this.zi = a;
                    };
                    a.prototype.Bl = function () {
                        var a = this.zi;
                        if (a) {
                            a();
                        }
                    };
                    a.prototype.destroy = function () {
                        this.node.destroy();
                        _super.prototype.destroy.call(this);
                    };
                    a.prototype.setPopoutItemShowCallback = function (a) {
                        this.Il = a;
                    };
                    a.prototype.runPopoutItemShowCallback = function (a, b, c, d, e, f, g, h, i) {
                        this.Ol.active = true;
                        this.Ol.on(cc.Node.EventType.TOUCH_END, this.Bl, this);
                        this.Hl.setCancelCallback(this.Bl.bind(this));
                        if (this.Il) {
                            this.Il(a, b, c, d, e, f, g, h, i);
                        }
                    };
                    a.prototype.setPopoutItemHideCallback = function (a) {
                        this.wl = a;
                    };
                    a.prototype.runPopoutItemHideCallback = function () {
                        var a = this;
                        if (this.wl) {
                            this.wl(function () {
                                a.Ol.off(cc.Node.EventType.TOUCH_END, a.Bl, a);
                                a.Ol.active = false;
                            });
                        }
                    };
                    return __decorate([e], a);
                }();
                c.default = f;
                cc._RF.pop();
            }
        }, {}],
        PopOutItem: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "5beaedmutZIkKPi8z2EJ82d", "PopOutItem")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = cc._decorator;
                var f = e.ccclass;
                e.property;
                var g = function (a) {
                    function b() {
                        return a !== null && a.apply(this, arguments) || this;
                    }
                    __extends(b, a);
                    b.prototype.show = function (b, c, d, e, f, g, h, i, a) {
                        this.showItem(b, c, d, e, f, g, h, i, a);
                    };
                    b.prototype.hide = function () {
                        this.hideItem();
                    };
                    b.prototype.showItem = function (a, b, c, d, e) {
                        this.setPayoutValue(d, b);
                        this.node.active = true;
                        this.node.setPosition(e);
                        if (a) {
                            a();
                        }
                    };
                    b.prototype.hideItem = function () {
                        this.node.active = false;
                    };
                    b.prototype.destroy = function () {
                        this.node.destroy();
                        a.prototype.destroy.call(this);
                    };
                    b.prototype.setPayoutValue = function (a, b) {
                        var c = b[a];
                        Object.keys(c).reverse();
                    };
                    b.prototype.setCancelCallback = function (a) {
                        this.Gl = a;
                    };
                    b.prototype.cancalCallback = function () {
                        if (this.Gl) {
                            this.Gl();
                        }
                    };
                    return __decorate([f], b);
                }(cc.Component);
                c.default = g;
                cc._RF.pop();
            }
        }, {}],
        PopOutTintController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "58b31+llD1BAb9tUvY4+l2s", "PopOutTintController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = {
                    positionX: 0,
                    positionY: 0,
                    width: 1080,
                    height: 2340,
                    color: cc.Color.BLACK,
                    opacityFadeTo: 150,
                    defaultOpacity: 0,
                    fadeInDuration: 0.2,
                    fadeOutDuration: 0.2
                };
                var f = e;
                var g = cc._decorator.ccclass;
                var h = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.Nl = 0;
                        b.Tl = 0.2;
                        b.Pl = 0.2;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.unuse = function () {
                        this.node.opacity = 0;
                    };
                    b.prototype.reuse = function () {
                        this.node.opacity = 0;
                    };
                    b.prototype.setup = function (a) {
                        var b = __assign(__assign({}, f), a);
                        this.node.setPosition(b.positionX, b.positionY);
                        this.node.setContentSize(b.width, b.height);
                        this.node.color = b.color;
                        this.node.opacity = this.Rl = b.defaultOpacity;
                        this.Nl = b.opacityFadeTo;
                        this.Tl = b.fadeInDuration;
                        this.Pl = b.fadeOutDuration;
                    };
                    b.prototype.show = function (a) {
                        var b = this;
                        if (this.Ll) {
                            if (a) {
                                a();
                            }
                        } else {
                            this.node.stopAllActions();
                            this.node.runAction(cc.sequence(cc.fadeTo(this.Tl, this.Nl), cc.callFunc(function () {
                                b.Ll = true;
                                if (a) {
                                    a();
                                }
                            })));
                        }
                    };
                    b.prototype.hide = function (a) {
                        this.Ll = false;
                        this.node.stopAllActions();
                        this.node.runAction(cc.sequence(cc.fadeTo(this.Pl, this.Rl), cc.callFunc(function () {
                            if (a) {
                                a();
                            }
                        })));
                    };
                    b.prototype.destroy = function () {
                        this.node.destroy();
                        a.prototype.destroy.call(this);
                    };
                    return __decorate([g], b);
                }(cc.Component);
                c.default = h;
                cc._RF.pop();
            }
        }, {}],
        Preference: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "f7e90cT1I9BDL45c7FgvgSo", "Preference")) {
                var c = System.get("common").Preference;
                for (var d in c) {
                    b.exports[d] = c[d];
                }
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        Printer: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "75992e1c0JLNIAsOHARyF2L", "Printer")) {
                var c = System.get("bvframework").Printer;
                for (var d in c) {
                    b.exports[d] = c[d];
                }
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        PrizeState: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "b8e16tOyU5GT4m5ZQseMAOn", "PrizeState")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                a("TweaksData");
                var e = a("SettingMenuHelper");
                var f = a("Utils");
                var g = a("GameEventHandler");
                var h = function () {
                    function a(a, b, c, d) {
                        this.name = "Prize State";
                        this.dataSource = undefined;
                        this.generalControllers = undefined;
                        this.finalCallback = undefined;
                        this.El = undefined;
                        this.dataSource = a;
                        this.generalControllers = b.generalControllers;
                        this.finalCallback = c;
                        if (d) {
                            this.El = d;
                        }
                    }
                    a.prototype.setAvailableActions = function () { };
                    a.prototype.clearAvailableActions = function () { };
                    a.prototype.renderPrize = function () {
                        f.spawnCallback(this.renderLines.bind(this), this.playPrize.bind(this))(this.exitState.bind(this));
                    };
                    a.prototype.renderLines = function (a) {
                        if (this.dataSource.transactionModel.winLines) {
                            this.playAllLines(a);
                        } else if (a) {
                            a();
                        }
                    };
                    a.prototype.playAllLines = function (a) {
                        var b = this.dataSource.transactionModel;
                        this.generalControllers.paySelectEffectController.playAllLines(b.winLines, b.reels, a, true);
                    };
                    a.prototype.playPrize = function (a) {
                        var b = this;
                        var c = this.dataSource.transactionModel.totalWinAmount;
                        var d = this.getWinThresholds();
                        var f = c;
                        if (d.bigWinThreshold && f >= d.bigWinThreshold) {
                            g.emitGameEffectStateChangedEvent({
                                displayState: "Start",
                                effectType: "BigWin"
                            });
                            this.runBigPrizeState(f, function () {
                                g.emitGameEffectStateChangedEvent({
                                    displayState: "End",
                                    effectType: "BigWin"
                                });
                                b.winAnnouncement("BigWin", a)();
                            });
                        } else if (d.mediumWinThreshold && f >= d.mediumWinThreshold) {
                            this.runMediumPrizeState(f, this.winAnnouncement("MediumWin", a));
                        } else if (f > 0) {
                            this.runSmallPrizeState(f, this.winAnnouncement("SmallWin", a));
                        } else {
                            var h = this.dataSource.playerModel.balance;
                            e.settingMenuHelper.setBalance(h);
                            if (a) {
                                a();
                            }
                        }
                    };
                    a.prototype.exitState = function () {
                        var a = this;
                        if (this.El && this.El.clearAvailableActions) {
                            this.El.clearAvailableActions();
                        }
                        this.clearAvailableActions();
                        this.preExitStateCleanup();
                        this.onExitState(function () {
                            var b = a.finalCallback;
                            a.finalCallback = undefined;
                            a.destroy();
                            f.deferCallback(true)(function () {
                                f.deferCallback(true)(b);
                            });
                        });
                    };
                    a.prototype.preExitStateCleanup = function () { };
                    a.prototype.additionalDestroyCleanups = function () { };
                    a.prototype.run = function () {
                        if (this.El && this.El.setAvailableActions) {
                            this.El.setAvailableActions();
                        }
                        this.setAvailableActions();
                        this.renderPrize();
                    };
                    a.prototype.destroy = function () {
                        this.dataSource = undefined;
                        this.finalCallback = undefined;
                        this.generalControllers = undefined;
                        if (this.El) {
                            this.El.destroy();
                            this.El = undefined;
                        }
                        this.additionalDestroyCleanups();
                    };
                    a.prototype.winAnnouncement = function (a, b) {
                        return function () {
                            if (b) {
                                b();
                            }
                        };
                    };
                    a.prototype.getWinThresholds = function () {
                        var a = this.dataSource.systemModel;
                        var b = a.maxLineNumber;
                        var c = a.winThresholds;
                        var d = this.dataSource.transactionModel;
                        var e = d.betSizeValue;
                        var f = d.betLevelValue;
                        return c.getAllThresholds(e, f, b);
                    };
                    a.prototype.runBigPrizeState = function (a, b) {
                        if (b) {
                            b();
                        }
                    };
                    a.prototype.runMediumPrizeState = function (a, b) {
                        if (b) {
                            b();
                        }
                    };
                    a.prototype.onExitState = function (a) {
                        a();
                    };
                    return a;
                }();
                c.default = h;
                cc._RF.pop();
            }
        }, {
            GameEventHandler: "GameEventHandler",
            SettingMenuHelper: "SettingMenuHelper",
            TweaksData: "TweaksData",
            Utils: "Utils"
        }],
        QuitGameWithEvent: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "810d7ZWlFFHNJtnMN8hmalR", "QuitGameWithEvent")) {
                var c = System.get("bvframework").QuitGameWithEvent;
                for (var d in c) {
                    b.exports[d] = c[d];
                }
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        QuitGame: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "d5fa8VRcgJD0a9wBWcZ0zoO", "QuitGame")) {
                var c = System.get("bvframework").QuitGame;
                for (var d in c) {
                    b.exports[d] = c[d];
                }
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        RefreshWorldHandler: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "0ba58fxYb1OnKR6fFDkRBO6", "RefreshWorldHandler")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("WalletHelper");
                var f = a("SettingMenuHelper");
                var g = a("Utils");
                var h = a("RequestHandler");
                var i = function () {
                    function a(a, b, c) {
                        if (c === undefined) {
                            c = false;
                        }
                        this.kl = false;
                        this.ci = a;
                        this.Ul = b;
                        this.kl = c;
                    }
                    a.prototype.refreshWorldByChangeWalletIdle = function (a) {
                        g.sequenceCallback(this.zs(), this.qs(), this.Js(), this.Ks(), this.jl(), g.deferCallback(), this.Dl(), this.Qs())(function () {
                            if (a) {
                                a();
                            }
                        });
                    };
                    a.prototype.refreshWorldByBetOptionsIdle = function (a) {
                        g.sequenceCallback(this.zs(), this.Wl(), this.jl(), g.deferCallback(), this.xl(f.settingMenuHelper.betSizeValue, f.settingMenuHelper.betLevelValue), this.qs(), this.Ks(), this.Dl(), this.Fl(), this.Qs())(function () {
                            if (a) {
                                a();
                            }
                        });
                    };
                    a.prototype.refreshWorldByBetOptionsPreIdle = function (a) {
                        g.sequenceCallback(this.zs(), this.Wl(), this.jl(), g.deferCallback(), this.xl(f.settingMenuHelper.betSizeValue, f.settingMenuHelper.betLevelValue), this.qs(), this.Ks(), this.Dl(), this.Fl())(function () {
                            if (a) {
                                a();
                            }
                        });
                    };
                    a.prototype.refreshWorldByFeatureMode = function (a) {
                        g.sequenceCallback(this.zs(), this.qs(), this.Ks(), this.jl(), g.deferCallback(), this.Vl(), this.zl(), this.Dl())(function () {
                            if (a) {
                                a();
                            }
                        });
                    };
                    a.prototype.Ks = function () {
                        var a = this;
                        return function (b) {
                            var c = a.ci;
                            var d = c.lastTransactionRawData;
                            var g = c.transactionModel;
                            var h = c.playerModel;
                            var i = g.accumulatedWinAmount;
                            var j = h.balance;
                            e.walletHelper.setupWallet(d);
                            f.settingMenuHelper.setBalance(j);
                            f.settingMenuHelper.setWinAmount(i);
                            if (b) {
                                b();
                            }
                        };
                    };
                    a.prototype.Js = function () {
                        var a = this;
                        return function (b) {
                            if (f.settingMenuHelper.reevaluateBet()) {
                                if (a.kl) {
                                    a.ql(b);
                                } else {
                                    f.settingMenuHelper.updateBetValues();
                                    b();
                                }
                            } else {
                                b();
                            }
                        };
                    };
                    a.prototype.qs = function () {
                        var a = this;
                        return function (b) {
                            var c = a.ci;
                            var d = c.systemModel;
                            var e = c.transactionModel;
                            var g = c.playerModel;
                            var h = d.betSizeList;
                            var i = d.betLevelList;
                            var j = d.featureBuy;
                            var l = e.betLevelValue;
                            var n = e.betSizeValue;
                            var m = g.minimumBetAmount;
                            f.settingMenuHelper.betSizeList = h;
                            f.settingMenuHelper.betSizeValue = n;
                            f.settingMenuHelper.betLevelList = i;
                            f.settingMenuHelper.betLevelValue = l;
                            f.settingMenuHelper.minimumBetAmount = m;
                            if (j && j.isSupported) {
                                f.settingMenuHelper.featureBuyThreshold = j.threshold;
                            } else {
                                f.settingMenuHelper.featureBuyThreshold = undefined;
                            }
                            f.settingMenuHelper.updateBetValues();
                            if (b) {
                                b();
                            }
                        };
                    };
                    a.prototype.xl = function (a, b) {
                        var c = this;
                        return function (d) {
                            var e = {
                                cs: a,
                                ml: b
                            };
                            var f = e;
                            c.Jl(f, d);
                        };
                    };
                    a.prototype.jl = function () {
                        var a = this;
                        return function (b) {
                            a.cleanup();
                            if (b) {
                                b();
                            }
                        };
                    };
                    a.prototype.Qs = function () {
                        var a = this;
                        return function (b) {
                            a.enableSpinButton();
                            if (b) {
                                b();
                            }
                        };
                    };
                    a.prototype.zs = function () {
                        var a = this;
                        return function (b) {
                            a.disableSpinButton();
                            if (b) {
                                b();
                            }
                        };
                    };
                    a.prototype.Fl = function () {
                        var a = this;
                        return function (b) {
                            a.hideLoadingPage(b);
                        };
                    };
                    a.prototype.Wl = function () {
                        var a = this;
                        return function (b) {
                            a.showLoadingPage(b);
                        };
                    };
                    a.prototype.Dl = function () {
                        var a = this;
                        return function (b) {
                            a.setupNewWorld(b);
                        };
                    };
                    a.prototype.Vl = function () {
                        var a = this;
                        return function (b) {
                            a.releaseResource(b);
                        };
                    };
                    a.prototype.zl = function () {
                        var a = this;
                        return function (b) {
                            a.loadResource(b);
                        };
                    };
                    a.prototype.Jl = function (a, b) {
                        h.doAPIRequest({
                            name: "Update Game Info",
                            apiRequest: this.Ul.updateGameInfo.bind(this.Ul),
                            apiRequestParam: a
                        }, function (a, c) {
                            if (c && c.dt && b) {
                                b();
                            }
                        });
                    };
                    a.prototype.ql = function (a) {
                        g.sequenceCallback(this.xl(f.settingMenuHelper.betSizeValue, f.settingMenuHelper.betLevelValue), this.qs())(a);
                    };
                    return a;
                }();
                c.default = i;
                cc._RF.pop();
            }
        }, {
            RequestHandler: "RequestHandler",
            SettingMenuHelper: "SettingMenuHelper",
            Utils: "Utils",
            WalletHelper: "WalletHelper"
        }],
        RegionUtils: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "478c5ZURp1N1Ide2QVm+Hgx", "RegionUtils")) {
                var c = System.get("bvframework").RegionUtils;
                for (var d in c) {
                    b.exports[d] = c[d];
                }
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        ReplayModeHandler: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "10cedajpphPS4PRVhRvT3S5", "ReplayModeHandler")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.fmReplayModeHandler = undefined;
                var e = a("TransactionStateMachineHandler");
                var f = a("Utils");
                var g = a("SpaceBarInterrupter");
                var h = function () {
                    function a() {
                        this.Kl = false;
                        this.Ql = false;
                    }
                    a.prototype.startReplay = function () {
                        e.cacheTransitionCallback();
                        e.clearTransition();
                        g.spaceBarInterrupter.pause();
                        this.Ql = true;
                    };
                    a.prototype.completeReplay = function () {
                        this.Kl = true;
                    };
                    a.prototype.stopReplay = function (a) {
                        f.deferCallback(this)(function () {
                            e.retrieveTransitionCallback();
                            if (a) {
                                a();
                            }
                        });
                    };
                    a.prototype.endReplay = function () {
                        this.Ql = false;
                        this.Kl = false;
                        g.spaceBarInterrupter.resume();
                    };
                    a.prototype.replayStarted = function () {
                        return this.Ql;
                    };
                    a.prototype.replayCompleted = function () {
                        return this.Kl;
                    };
                    return a;
                }();
                c.default = h;
                var i = new h();
                c.fmReplayModeHandler = i;
                cc._RF.pop();
            }
        }, {
            SpaceBarInterrupter: "SpaceBarInterrupter",
            TransactionStateMachineHandler: "TransactionStateMachineHandler",
            Utils: "Utils"
        }],
        RequestHandler: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "d74abPCXkJA5YnU3Ax3A+KB", "RequestHandler")) {
                var c = System.get("bvframework").RequestHandler;
                for (var d in c) {
                    b.exports[d] = c[d];
                }
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        ResRC: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "741a8m7jWlDQowhgiMh2U/V", "ResRC")) {
                var c = function (a, b) {
                    var c = {};
                    for (var d in b) {
                        if (a.hasOwnProperty(d)) {
                            c[a[d]] = b[d];
                        } else {
                            c[d] = b[d];
                        }
                    }
                    return c;
                }({
                    unloadBundleAsset: "releaseBundleAsset",
                    unload: "release",
                    unloadBundle: "releaseBundle",
                    deleteBundle: "removeBundle",
                    loadByBundleAsset: "loadBundleAsset",
                    loadRemoteBySingle: "loadRemoteSingle"
                }, System.get("common").ResRC);
                for (var d in c) {
                    if (c.hasOwnProperty(d)) {
                        b.exports[d] = c[d];
                    }
                }
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        ResourceLoader: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "517d1jsi4lLyboQPLjM/Od/", "ResourceLoader")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.LoaderType = undefined;
                var e;
                var f = a("RetryHandler");
                var g = a("ResRC");
                var h = a("ResourceQualifierHelper");
                (function (a) {
                    a[a.CUSTOM = -1] = "CUSTOM";
                })(e = c.LoaderType || (c.LoaderType = {}));
                var i = function () {
                    function a() {
                        this.Yl = new f.default();
                    }
                    a.prototype.loadAsset = function (a) {
                        if (a.type === e.CUSTOM) {
                            return this.Xl(a);
                        } else {
                            return this.Zl(a);
                        }
                    };
                    a.prototype.releaseAsset = function (a) {
                        if (a.type === e.CUSTOM) {
                            return this.$l(a);
                        } else {
                            return this.tf(a);
                        }
                    };
                    a.prototype.loadBundle = function (b) {
                        var c = this;
                        var d = this.Yl;
                        var e = b.bundle;
                        var f = b.retryMessage;
                        var g = b.retryHandling;
                        var h = b.retryingCallback;
                        var a = b.progressCallback;
                        return new Promise(function (b) {
                            var i = 0;
                            var j = e.length;
                            var l = e.slice();
                            var n = e.slice();
                            var o = [];
                            var p = Object.create(null);
                            d.init(f, function () {
                                l = o.slice();
                                n = o.slice();
                                o = [];
                                s();
                            });
                            function r() {
                                if (n.length === 0) {
                                    if (o.length === 0) {
                                        b(p);
                                        return;
                                    }
                                    if (o.length > 0) {
                                        if (d.canRetry()) {
                                            h(d.getRetryCount());
                                            d.execute();
                                        } else {
                                            g(d.execute.bind(d), p, o, d.getRetryCount());
                                        }
                                    }
                                }
                            }
                            function s() {
                                l.forEach(function (b) {
                                    c.loadAsset(b).then(function (c) {
                                        i++;
                                        var d = c.config.name;
                                        p[d];
                                        p[d] = c;
                                        n.splice(n.indexOf(b), 1);
                                        a(i, j);
                                        r();
                                    }).catch(function () {
                                        o.push(b);
                                        n.splice(n.indexOf(b), 1);
                                        r();
                                    });
                                });
                            }
                            s();
                        });
                    };
                    a.prototype.releaseBundle = function (a) {
                        var b = this;
                        var c = [];
                        a.forEach(function (a) {
                            c.push(b.releaseAsset(a));
                        });
                        return new Promise(function (a) {
                            Promise.all(c).then(function (b) {
                                var c = Object.create(null);
                                b.forEach(function (b) {
                                    c[b.config.name] = b;
                                });
                                a(c);
                            });
                        });
                    };
                    a.prototype.Zl = function (b) {
                        return new Promise(function (c, a) {
                            var d = b.isLocalized ? h.getResourceURL(b.url) : b.url;
                            g.load(d, b.type, function (d, e) {
                                var f = {
                                    config: b,
                                    result: e
                                };
                                if (d) {
                                    a(d);
                                } else {
                                    c(f);
                                }
                            });
                        });
                    };
                    a.prototype.Xl = function (a) {
                        return new Promise(function (b, c) {
                            a.loadFunc(function (c) {
                                var d = {
                                    config: a,
                                    result: c
                                };
                                b(d);
                            }, function (a) {
                                c(a);
                            });
                        });
                    };
                    a.prototype.tf = function (a) {
                        return new Promise(function (b) {
                            var c = a.isLocalized ? h.getResourceURL(a.url) : a.url;
                            g.release(c, a.type);
                            b({
                                config: a
                            });
                        });
                    };
                    a.prototype.$l = function (a) {
                        return new Promise(function (b) {
                            if (a.releaseFunc) {
                                new Promise(a.releaseFunc).then(function () {
                                    var c = {
                                        config: a
                                    };
                                    b(c);
                                });
                            } else {
                                b({
                                    config: a
                                });
                            }
                        });
                    };
                    return a;
                }();
                c.default = i;
                cc._RF.pop();
            }
        }, {
            ResRC: "ResRC",
            ResourceQualifierHelper: "ResourceQualifierHelper",
            RetryHandler: "RetryHandler"
        }],
        ResourceQualifierHelper: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "95cabP+u+lNbIwBxruULrww", "ResourceQualifierHelper")) {
                var c = System.get("bvframework").ResourceQualifierHelper;
                for (var d in c) {
                    b.exports[d] = c[d];
                }
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        RespinReelStatusHandler: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "d93adui3bdMRqlY/gx8HH9d", "RespinReelStatusHandler")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.respinReelStatusHandler = c.RespinReelStatus = undefined;
                var e;
                var f = a("SlotProperties");
                (function (a) {
                    a[a.NORMAL = 0] = "NORMAL";
                    a[a.GOOD = 1] = "GOOD";
                    a[a.GREAT = 2] = "GREAT";
                })(e = c.RespinReelStatus || (c.RespinReelStatus = {}));
                var g = function () {
                    function a() {
                        this.ci = undefined;
                        this.if = undefined;
                        this.sf = undefined;
                        this.if = 0;
                        this.sf = 0;
                    }
                    a.prototype.updateRespinReelStatus = function (a) {
                        var b = a.transactionModel;
                        var c = b.betLevelValue;
                        var d = b.betSizeValue;
                        var g = b.accumulatedWinAmount;
                        var h = b.reels;
                        var i = g / (a.systemModel.maxLineNumber * c * d);
                        if (h[0] === h[1] === h[2] === f.SLOT_INDEX.WILD) {
                            this.if = e.GOOD;
                            this.sf = g > 0 && i >= 20 ? e.GREAT : e.NORMAL;
                        } else if (h[0] === h[1] === h[2] === f.SLOT_INDEX.FU) {
                            this.if = e.GOOD;
                            this.sf = g > 0 ? e.GREAT : e.NORMAL;
                        } else {
                            this.if = e.NORMAL;
                            this.sf = g > 0 && i >= 20 ? e.GOOD : e.NORMAL;
                        }
                    };
                    Object.defineProperty(a.prototype, "leftReelStatus", {
                        get: function () {
                            return this.if;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(a.prototype, "rightReelStatus", {
                        get: function () {
                            return this.sf;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    return a;
                }();
                c.default = g;
                var h = new g();
                c.respinReelStatusHandler = h;
                cc._RF.pop();
            }
        }, {
            SlotProperties: "SlotProperties"
        }],
        RespinUIHelper: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "6078eW/s/VLPI6NLX3ti/oi", "RespinUIHelper")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("GSlotTransactionModel");
                var f = a("BaseUIHelper");
                var g = a("Utils");
                var h = a("AutomationDecorator");
                var i = a("WinLine.spec");
                var j = a("BGMHandler");
                var k = a("GeneralAudioConstant");
                var l = a("AudioManager");
                var m = function (a) {
                    function b(b, c) {
                        var d = a.call(this, b, c) || this;
                        d.name = "Respin UI Helper";
                        return d;
                    }
                    __extends(b, a);
                    b.prototype.extraPreSpinningCleanup = function (a) {
                        var b = this.dataSource.transactionModel.stateTransitionTo;
                        var c = this.generalControllers.slotController;
                        if (b === e.SpinType.RESPIN) {
                            c.disableAllSprite();
                        }
                        if (a) {
                            a();
                        }
                    };
                    b.prototype.playAllLines = function (a) {
                        var b = this.dataSource.transactionModel;
                        var c = b.reels;
                        var d = b.featureWinSymbol;
                        var e = b.winLines;
                        b.stateTransitionTo;
                        var g = this.generalControllers;
                        var h = g.stickyController;
                        var i = g.payLineNumberController;
                        var j = g.payLineController;
                        g.angpaoController;
                        function k() {
                            if (a) {
                                a();
                            }
                        }
                        if (d) {
                            var l = e.winPositions;
                            l.forEach(function (a, b) {
                                l[b] = parseInt(a, 10);
                            });
                            i.show(l);
                            j.showLine(l);
                            h.playSticky(c, e, d, k);
                        } else {
                            k();
                        }
                    };
                    b.prototype.renderFeatureAfterResult = function (a) {
                        var b = this.generalControllers.slotController;
                        var c = this.dataSource.transactionModel;
                        var d = c.stateTransitionFrom;
                        var f = c.stateTransitionTo;
                        if (d === e.SpinType.RESPIN && f === e.SpinType.NORMAL) {
                            b.resetHiddenMiddleReel();
                        }
                        if (a) {
                            a();
                        }
                    };
                    b.prototype.extraPlayAllLinesAction = function () { };
                    b.prototype.exitRespinTransition = function (a) {
                        this.ef(function () {
                            if (a) {
                                a();
                            }
                        });
                    };
                    b.prototype.ef = function (a) {
                        var b = this.generalControllers;
                        var c = b.uiShiftController;
                        var d = b.backgroundController;
                        var e = b.backgroundController2;
                        var f = b.tigerController;
                        var h = b.slotController;
                        var i = b.angpaoController;
                        j.crossFadePlayRespinBGMtoNormal();
                        g.spawnCallback(function (a) {
                            c.shiftUp(1.75, a);
                        }, function (a) {
                            g.delayCallback(0.2)(function () {
                                var a = k.GENERAL_AUDIO.featureQuit.key;
                                l.stopAudioIfPlaying(a);
                                l.playAudioIfNotPlaying(a);
                            });
                            e.zoomIn();
                            f.zoomIn();
                            h.zoomIn();
                            i.stopRespin();
                            d.zoomIn(a);
                        }, function (a) {
                            f.playNormal(a);
                        })(function () {
                            if (a) {
                                a();
                            }
                        });
                    };
                    __decorate([h.automationDec({
                        func: i.winHighlightShown
                    })], b.prototype, "playAllLines", null);
                    return b;
                }(f.default);
                c.default = m;
                cc._RF.pop();
            }
        }, {
            AudioManager: "AudioManager",
            AutomationDecorator: "AutomationDecorator",
            BGMHandler: "BGMHandler",
            BaseUIHelper: "BaseUIHelper",
            GSlotTransactionModel: "GSlotTransactionModel",
            GeneralAudioConstant: "GeneralAudioConstant",
            Utils: "Utils",
            "WinLine.spec": "WinLine.spec"
        }],
        ResultState: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "08d5bAN5GxAf5RE9cTgDCu5", "ResultState")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("SlotStateMachine");
                var f = a("SlotAnalyticsHelper");
                var g = a("SlotAnalyticsEnum");
                var h = a("Utils");
                var i = a("SpinConfigHandler");
                var j = function () {
                    function a(a, b, c, d) {
                        this.name = "Result State";
                        this.process = g.SpinStateProcess.REEL_SPINNING;
                        this.dataSource = undefined;
                        this.generalControllers = undefined;
                        this.finalCallback = undefined;
                        this.hasFeature = undefined;
                        this.El = undefined;
                        this.dataSource = a;
                        this.generalControllers = b.generalControllers;
                        this.finalCallback = c;
                        if (d) {
                            this.El = d;
                            d.triggerFastStop = this.handleSlotRegionFastStop.bind(this);
                        }
                    }
                    a.prototype.setAvailableActions = function () { };
                    a.prototype.resultDidStartRender = function (a) {
                        if (a) {
                            a();
                        }
                    };
                    a.prototype.slotDidStartStopping = function (a) {
                        if (a) {
                            a();
                        }
                    };
                    a.prototype.invokeSlotStop = function () {
                        var a = this.generalControllers.slotController;
                        if (a.getStopStyle() === e.StopStyle.FAST) {
                            a.fastStop();
                        } else {
                            a.stopSpin();
                        }
                    };
                    a.prototype.setupFeatureProperties = function () {
                        this.hasFeature = false;
                    };
                    a.prototype.preExitStateCleanup = function () { };
                    a.prototype.clearAvailableActions = function () { };
                    a.prototype.additionalDestroyCleanups = function () { };
                    a.prototype.setSlotData = function () {
                        this.generalControllers.slotController.setReelData(this.dataSource.transactionModel.originalReels);
                    };
                    a.prototype.onExitState = function (a) {
                        a();
                    };
                    a.prototype.run = function () {
                        this.nf();
                        this.cf();
                    };
                    a.prototype.nf = function () {
                        this.hf();
                        if (this.El && this.El.setAvailableActions) {
                            this.El.setAvailableActions();
                        }
                        this.setAvailableActions();
                    };
                    a.prototype.cf = function () {
                        h.sequenceCallback(this.resultDidStartRender.bind(this), this.rf.bind(this), this.af.bind(this), this.uf.bind(this))(this.Is.bind(this));
                    };
                    a.prototype.rf = function (a) {
                        this.setSlotData();
                        h.spawnCallback(this.lf.bind(this), this.slotDidStartStopping.bind(this))(a);
                    };
                    a.prototype.lf = function (a) {
                        if (this.process === g.SpinStateProcess.REEL_SPINNING) {
                            this.process = g.SpinStateProcess.REEL_STOPPING;
                            this.generalControllers.slotController.setStopCompletedCallback(a);
                            this.invokeSlotStop();
                        } else if (a) {
                            a();
                        }
                    };
                    a.prototype.af = function (a) {
                        this.setupFeatureProperties();
                        if (a) {
                            a();
                        }
                    };
                    a.prototype.uf = function (a) {
                        var b = this.dataSource.transactionModel.winLines;
                        this.process = g.SpinStateProcess.REEL_STOPPED;
                        if (this.El && this.El) {
                            this.El.renderFeature(b || this.hasFeature);
                        }
                        this.renderFeature(a);
                    };
                    a.prototype.Is = function () {
                        var a = this;
                        this.generalControllers.slotController.setOnClickCallback(undefined);
                        this.preExitStateCleanup();
                        this.onExitState(function () {
                            var b = a.finalCallback;
                            a.finalCallback = undefined;
                            a.destroy();
                            h.deferCallback(true)(b);
                        });
                    };
                    a.prototype.destroy = function () {
                        this.generalControllers.slotController.setOnClickCallback(undefined);
                        if (this.El && this.El.clearAvailableActions) {
                            this.El.clearAvailableActions();
                        }
                        this.clearAvailableActions();
                        this.dataSource = undefined;
                        this.finalCallback = undefined;
                        this.generalControllers = undefined;
                        if (this.El) {
                            this.El.destroy();
                            this.El = undefined;
                        }
                        this.additionalDestroyCleanups();
                    };
                    a.prototype.hf = function () {
                        var a = this.generalControllers.slotController;
                        if (i.featureConfig.fastStopFeature && a.getStopStyle() !== e.StopStyle.FAST) {
                            a.setOnClickCallback(this.handleSlotRegionFastStop.bind(this, g.SpinTrigger.CLICK));
                        }
                    };
                    a.prototype.handleSlotRegionFastStop = function (a) {
                        var b = this.generalControllers;
                        var c = b.slotController;
                        switch (this.process) {
                            case g.SpinStateProcess.REEL_SPINNING:
                                f.sendFastStopGA(a, b.spinButtonController.isAutoSpin());
                                if (this.El && this.El.fastStopTriggeredWhileSpinning) {
                                    this.El.fastStopTriggeredWhileSpinning();
                                }
                                this.fastStopTriggeredWhileSpinning();
                                c.setOnClickCallback(undefined);
                                c.markFastStop();
                                break;
                            case g.SpinStateProcess.REEL_STOPPING:
                                f.sendFastStopGA(a, b.spinButtonController.isAutoSpin());
                                if (this.El && this.El.triggerFastStopWhileStopping) {
                                    this.El.triggerFastStopWhileStopping();
                                }
                                this.triggerFastStopWhileStopping();
                                c.setOnClickCallback(undefined);
                                c.fastStop();
                        }
                    };
                    a.prototype.fastStopTriggeredWhileSpinning = function () { };
                    a.prototype.triggerFastStopWhileStopping = function () { };
                    return a;
                }();
                c.default = j;
                cc._RF.pop();
            }
        }, {
            SlotAnalyticsEnum: "SlotAnalyticsEnum",
            SlotAnalyticsHelper: "SlotAnalyticsHelper",
            SlotStateMachine: "SlotStateMachine",
            SpinConfigHandler: "SpinConfigHandler",
            Utils: "Utils"
        }],
        RetryHandler: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "e77ca51GO5Az7liIm6SBn3P", "RetryHandler")) {
                var c = System.get("bvframework").RetryHandler;
                b.exports.default = c;
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        RtConfig: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "7712dgg0/hBbbrh98akcuVw", "RtConfig")) {
                c.__esModule = true;
                c.cs_Config = undefined;
                var d = a("LaunchConfig");
                c.cs_Launch = d.cs_Launch;
                var e = {
                    gameId: 126,
                    globalDomain: "com.pgsoft",
                    bundleId: "com.pgsoft.slot.fortunetiger",
                    loginMethod: window.LoginMethod,
                    apiDomain: window.ApiDomain,
                    version: "2.19.0.6",
                    certifiedVersion: "1.0.0.0"
                };
                var f = Object.freeze(e);
                c.cs_Config = f;
                cc._RF.pop();
            }
        }, {
            LaunchConfig: "LaunchConfig"
        }],
        ScrollViewEx: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "4403eAPMfNGO4d5KWMoVrU7", "ScrollViewEx")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = cc._decorator;
                var f = e.ccclass;
                var g = e.property;
                var h = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.speed = 1;
                        b.freeCells = [];
                        b.snapPause = false;
                        b.snapDone = false;
                        b.nextAppearTarget = undefined;
                        b.snapFinish = undefined;
                        b.clickPos = undefined;
                        b.clickTarget = undefined;
                        b.timer = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.cellsInsertToParent = function () {
                        if (this.freeCells.length) {
                            for (var a = 0; a < this.content.children.length; a++) {
                                if (this.freeCells[a]) {
                                    this.freeCells[a].cellNode.parent = this.content.children[a];
                                    this.freeCells[a].cellNode.setPosition(cc.v2(0, 0));
                                    this._i(this.freeCells[a].cellNode);
                                }
                            }
                            this.freeCells = [];
                        }
                        this.snapPause = false;
                    };
                    b.prototype.cellsPullOutFromParent = function (a) {
                        if (!this.freeCells.length) {
                            this.snapPause = true;
                            this.setSnapDone(true);
                            for (var b = 0; b < this.content.children.length; b++) {
                                var c = this.content.children[b].children[0];
                                if (c) {
                                    this.ff(c);
                                    var d = c.parent.convertToWorldSpaceAR(c.getPosition());
                                    var e = a.convertToNodeSpaceAR(d);
                                    this.freeCells[b] = {
                                        cellNode: c,
                                        position: e,
                                        index: b
                                    };
                                    this.freeCells[b].cellNode.setPosition(e);
                                    this.freeCells[b].cellNode.parent = a;
                                }
                            }
                            return this.freeCells;
                        }
                    };
                    b.prototype.setSnapPause = function (a) {
                        this.snapPause = a;
                    };
                    b.prototype.setSnapDone = function (a) {
                        this.snapDone = a;
                    };
                    b.prototype.isSnapDone = function () {
                        return this.snapDone;
                    };
                    b.prototype.setNextAppearTarget = function (a) {
                        this.nextAppearTarget = a;
                    };
                    b.prototype.setSnapFinish = function (a) {
                        this.snapFinish = a;
                    };
                    b.prototype._i = function (a) {
                        a.on(cc.Node.EventType.TOUCH_START, this.df, this);
                        a.on(cc.Node.EventType.TOUCH_END, this.vf, this);
                        a.on(cc.Node.EventType.TOUCH_MOVE, this._f, this);
                        a.on(cc.Node.EventType.TOUCH_CANCEL, this.mf, this);
                    };
                    b.prototype.ff = function (a) {
                        a.off(cc.Node.EventType.TOUCH_START, this.df, this);
                        a.off(cc.Node.EventType.TOUCH_END, this.vf, this);
                        a.off(cc.Node.EventType.TOUCH_MOVE, this._f, this);
                        a.off(cc.Node.EventType.TOUCH_CANCEL, this.mf, this);
                    };
                    b.prototype.df = function (a) {
                        var b = a.touch.getLocation();
                        this.clickPos = b;
                        this.clickTarget = a.currentTarget;
                        this.timer = Date.now();
                    };
                    b.prototype._f = function () { };
                    b.prototype.vf = function (a) {
                        if (this.clickPos) {
                            var b = a.touch.getLocation();
                            var c = this.clickPos;
                            var d = this.timer;
                            if (!(this.Mi(c.x, b.x) || this.Mi(c.y, b.y) || !d || Date.now() - d > 120)) {
                                this.bf();
                            }
                        }
                    };
                    b.prototype.mf = function (a) {
                        if (this.clickPos) {
                            var b = a.touch.getLocation();
                            var c = this.clickPos;
                            var d = this.timer;
                            if (!(this.Mi(c.x, b.x) || this.Mi(c.y, b.y) || !d || Date.now() - d > 120)) {
                                this.bf();
                            }
                        }
                    };
                    b.prototype.Mi = function (a, b) {
                        return Math.abs(b - a) > 100;
                    };
                    b.prototype.bi = function (b, c, d, e, f) {
                        if (e === undefined) {
                            e = 1;
                        }
                        g = cc.v2(b, 0);
                        h = cc.v2(c, 0);
                        if (g.sub(h).mag() <= 1) {
                            this.setSnapDone(true);
                            if (f) {
                                f();
                            }
                            return c;
                        }
                        var g;
                        var h;
                        var i = b + (d *= e) * (c - b);
                        if (b >= c) {
                            if (i <= c) {
                                if (f) {
                                    f();
                                }
                                i = c;
                            }
                        } else if (i >= c) {
                            if (f) {
                                f();
                            }
                            i = c;
                        }
                        return i;
                    };
                    b.prototype.bf = function () {
                        this.clickTarget = undefined;
                        this.timer = undefined;
                    };
                    __decorate([g(cc.Integer)], b.prototype, "speed", undefined);
                    return __decorate([f], b);
                }(cc.ScrollView);
                c.default = h;
                cc._RF.pop();
            }
        }, {}],
        Serializer: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "0e825vJtv1K6qUCtfPjN7c9", "Serializer")) {
                var c = System.get("common").Serialiser;
                b.exports.Serializer = c;
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        SettingInfoFooterController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "06e65rpYzVNHbDR0e2vljl/", "SettingInfoFooterController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.SettingInfoFooterController = c.ICON_FOOTER_TYPE = c.WALLET_FOOTER_TYPE = undefined;
                var e;
                var f = a("Utils");
                var g = a("UIAppearanceHelper");
                var h = cc._decorator;
                var i = h.ccclass;
                var j = h.property;
                (function (a) {
                    a[a.CASH = 1] = "CASH";
                    a[a.FREE_GAME = 2] = "FREE_GAME";
                    a[a.BONUS = 3] = "BONUS";
                    a[a.POINT = 4] = "POINT";
                })(e = c.WALLET_FOOTER_TYPE || (c.WALLET_FOOTER_TYPE = {}));
                (function (a) {
                    a[a.SPIN = 2] = "SPIN";
                    a[a.ROLL_OVER = 3] = "ROLL_OVER";
                })(c.ICON_FOOTER_TYPE || (c.ICON_FOOTER_TYPE = {}));
                var k = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.background = undefined;
                        b.balanceNode = undefined;
                        b.customLeftFooterTitle = undefined;
                        b.balanceValueNode = undefined;
                        b.rightSlotNode = undefined;
                        b.winValueNode = undefined;
                        b.winHolderNode = undefined;
                        b.winCashIconNode = undefined;
                        b.winButton = undefined;
                        b.totalWinNode = undefined;
                        b.totalWinValueNode = undefined;
                        b.freeGamesNode = undefined;
                        b.specialIcon = undefined;
                        b.freeSpinValue = undefined;
                        b.walletButton = undefined;
                        b.walletButtonSensor = undefined;
                        b.walletNavigateIcon = undefined;
                        b.walletNotificationIcon = undefined;
                        b.betAmountLabel = undefined;
                        b.betOptionsButton = undefined;
                        b.betOptionsIcon = undefined;
                        b.walletFooterTypeSFList = [];
                        b.rewardFooterTypeSFList = [];
                        b.maxBetButtonHolder = undefined;
                        b.languageSensitiveLayoutList = [];
                        b.Sf = false;
                        b.gf = false;
                        b.currentBalance = 0;
                        b.targetBalance = 0;
                        b.winBalance = 0;
                        b.walletNotify = false;
                        b.lockWalletButton = false;
                        b.lockBetOptionsButton = false;
                        b.Cf = 0;
                        b.yf = false;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.updateBetAmount = function (a, b) {
                        var c = this;
                        if (b === undefined) {
                            b = 0;
                        }
                        if (this.Mf) {
                            this.betAmountLabel.string = this.Af = this.Mf;
                            this.betAmountLabel.node.stopAllActions();
                            var d = b * 0.5 + 1.2;
                            this.betAmountLabel.node.runAction(cc.sequence(cc.scaleTo(0.1, d).easing(cc.easeOut(0.2)), cc.callFunc(function () {
                                c.betAmountLabel.string = a;
                            }), cc.scaleTo(0.2, 0.9), cc.scaleTo(0.1, 1.05), cc.scaleTo(0.1, 0.95), cc.scaleTo(0.1, 1)));
                            this.Mf = a;
                        } else {
                            this.betAmountLabel.string = this.Af = this.Mf = a;
                        }
                    };
                    Object.defineProperty(b.prototype, "currentBetAmount", {
                        get: function () {
                            if (this.Af === undefined || this.Af.length === 0) {
                                throw Error("SettingInfoFooterController :: currentBetAmount : Please set legit bet amount by calling updateBetAmount first!");
                            }
                            return parseFloat(this.Af);
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.setOpenBetOptionsMenuCallback = function (a) {
                        this.If = a;
                    };
                    b.prototype.openBetOptionsMenu = function () {
                        if (this.If) {
                            this.If();
                        }
                    };
                    b.prototype.setBetOptionsButtonLock = function (a) {
                        if (a === undefined) {
                            a = false;
                        }
                        this.lockBetOptionsButton = a;
                    };
                    b.prototype.interactableBetOptionsButton = function (a) {
                        this.betOptionsButton.interactable = a;
                        if (a) {
                            if (this.wf === undefined) {
                                throw Error("SettingInfoFooter :: interactableBetOptionsButton : Please call boot() to setup default label color first!");
                            }
                            this.betAmountLabel.node.color = this.wf;
                        } else {
                            this.betAmountLabel.node.color = cc.Color.WHITE;
                        }
                    };
                    b.prototype.setOpenWinMenuCallback = function (a) {
                        this.Of = a;
                    };
                    b.prototype.openWinMenu = function () {
                        if (this.Of) {
                            this.Of();
                        }
                    };
                    b.prototype.interactableWinButton = function (a) {
                        this.winButton.interactable = a;
                        if (a) {
                            if (this.wf === undefined) {
                                throw Error("SettingInfoFooter :: interactableWinButton : Please call boot() to setup default label color first!");
                            }
                            this.winValueNode.color = this.freeSpinValue.node.color = this.wf;
                        } else {
                            this.winValueNode.color = this.freeSpinValue.node.color = cc.Color.WHITE;
                        }
                    };
                    b.prototype.setWinIcon = function (a) {
                        this.winCashIconNode.spriteFrame = a;
                    };
                    b.prototype.setWalletNavigateIcon = function (a) {
                        switch (a) {
                            case e.CASH:
                                this.walletNavigateIcon.getComponent(cc.Sprite).spriteFrame = this.walletFooterTypeSFList[a - 1];
                                break;
                            case e.FREE_GAME:
                            case e.BONUS:
                                this.walletNavigateIcon.getComponent(cc.Sprite).spriteFrame = this.walletFooterTypeSFList[a - 1];
                                this.specialIcon.spriteFrame = this.rewardFooterTypeSFList[a - 2];
                                break;
                            default:
                                this.walletNavigateIcon.getComponent(cc.Sprite).spriteFrame = undefined;
                        }
                    };
                    b.prototype.boot = function () {
                        this.Hf = this.balanceValueNode.getComponent("NumberLabelControllerLite");
                        this.Bf = this.winValueNode.getComponent("NumberLabelControllerLite");
                        this.Gf = this.totalWinValueNode.getComponent("NumberLabelControllerLite");
                        this.betOptionsButton.normalColor = g.uiAppearanceHelper.v("setting.color_button_transition_a.normal");
                        this.betOptionsButton.pressedColor = g.uiAppearanceHelper.v("setting.color_button_transition_a.pressed");
                        this.betOptionsButton.hoverColor = g.uiAppearanceHelper.v("setting.color_button_transition_a.normal");
                        this.betOptionsButton.disabledColor = g.uiAppearanceHelper.v("setting.color_button_transition_a.normal");
                        this.walletButton.normalColor = g.uiAppearanceHelper.v("setting.color_button_transition_a.normal");
                        this.walletButton.pressedColor = g.uiAppearanceHelper.v("setting.color_button_transition_a.pressed");
                        this.walletButton.hoverColor = g.uiAppearanceHelper.v("setting.color_button_transition_a.normal");
                        this.walletButton.disabledColor = g.uiAppearanceHelper.v("setting.color_button_transition_a.normal");
                        this.winButton.normalColor = g.uiAppearanceHelper.v("setting.color_button_transition_a.normal");
                        this.winButton.pressedColor = g.uiAppearanceHelper.v("setting.color_button_transition_a.pressed");
                        this.winButton.hoverColor = g.uiAppearanceHelper.v("setting.color_button_transition_a.normal");
                        this.winButton.disabledColor = g.uiAppearanceHelper.v("setting.color_button_transition_a.normal");
                        this.wf = this.betAmountLabel.node.color;
                        this.Hf.skip(0);
                        this.Bf.skip(0);
                        this.Gf.skip(0);
                    };
                    b.prototype.changeWalletIconColor = function (a) {
                        this.walletNavigateIcon.opacity = a ? g.uiAppearanceHelper.v("setting.color_button_transition_a.pressed").a : g.uiAppearanceHelper.v("setting.color_button_transition_a.normal").a;
                    };
                    b.prototype.showBackground = function (a, b) {
                        if (b === undefined) {
                            b = 225;
                        }
                        this.background.active = a;
                        this.background.opacity = b;
                    };
                    b.prototype.setOpenWalletMenuCallback = function (a) {
                        this.Nf = a;
                    };
                    b.prototype.setWalletButtonLock = function (a) {
                        if (a === undefined) {
                            a = false;
                        }
                        this.lockWalletButton = a;
                    };
                    b.prototype.interactableWalletButton = function (a) {
                        this.walletButton.interactable = a;
                        if (a) {
                            if (this.wf === undefined) {
                                throw Error("SettingInfoFooter :: interactableWalletButton : Please call boot() to setup default label color first!");
                            }
                            this.balanceValueNode.color = this.wf;
                        } else {
                            this.balanceValueNode.color = cc.Color.WHITE;
                        }
                    };
                    b.prototype.changeWalletButtonColor = function (a) {
                        this.walletNavigateIcon.opacity = a ? g.uiAppearanceHelper.v("setting.color_button_transition_a.pressed").a : g.uiAppearanceHelper.v("setting.color_button_transition_a.normal").a;
                    };
                    b.prototype.showBalanceNode = function (a) {
                        this.balanceNode.active = a;
                    };
                    b.prototype.showTotalWinNode = function (a) {
                        this.totalWinNode.active = a;
                    };
                    b.prototype.showFreeGamesNode = function (a) {
                        this.freeGamesNode.active = a;
                    };
                    b.prototype.activateWalletNotify = function (a) {
                        this.walletNotify = a;
                        if (a === true) {
                            this.walletNotificationIcon.active = a;
                            this.walletNotificationIcon.stopAllActions();
                            this.walletNotificationIcon.runAction(cc.repeatForever(cc.sequence(cc.scaleTo(0.5, 1.2), cc.scaleTo(0.5, 1))));
                        } else {
                            this.walletNotificationIcon.stopAllActions();
                            this.walletNotificationIcon.active = a;
                        }
                    };
                    b.prototype.openWalletMenu = function () {
                        if (this.Nf) {
                            this.Nf();
                        }
                    };
                    b.prototype.changeHolder = function (a) {
                        if (!this.Tf) {
                            this.Tf = a;
                        }
                        this.node.removeFromParent(false);
                        a.addChild(this.node);
                    };
                    b.prototype.returnHolder = function () {
                        if (!this.Tf) {
                            throw Error("SettingInfoFooter :: returnHolder : Do not have parent to return");
                        }
                        this.node.removeFromParent(false);
                        this.Tf.addChild(this.node);
                    };
                    b.prototype.showCustomInfoFooter = function () {
                        this.Sf = true;
                        this.freeGamesNode.active = true;
                        if (this.Sf) {
                            this.Pf(true);
                        }
                    };
                    b.prototype.hideCustomInfoFooter = function () {
                        this.Sf = false;
                        this.freeGamesNode.active = false;
                        this.winHolderNode.active = true;
                        var a = this.Rf;
                        this.Rf = undefined;
                        if (a) {
                            a();
                        }
                        var b = this.Lf;
                        this.Lf = undefined;
                        if (b) {
                            b();
                        }
                        this.rightSlotNode.stopAllActions();
                        this.rightSlotNode.scale = 1;
                    };
                    b.prototype.isCustomInfoFooter = function () {
                        return this.Sf;
                    };
                    b.prototype.updateBalance = function (a, b, c) {
                        if (this.Hf === undefined) {
                            throw Error("SettingInfoFooter :: updateBalance : Please call boot() to setup balance label controller first!");
                        }
                        a = this.currentBalance ? this.currentBalance : this.currentBalance = f.isNumeric(b) ? b : 0;
                        if (f.isNumeric(b)) {
                            this.targetBalance = b;
                        } else {
                            b = this.targetBalance;
                        }
                        if (b <= a) {
                            c = false;
                        }
                        if (c) {
                            this.Hf.play(a, b);
                        } else {
                            this.Hf.skip(b);
                        }
                        this.currentBalance = this.targetBalance;
                    };
                    Object.defineProperty(b.prototype, "currentWinAmount", {
                        get: function () {
                            return this.Cf;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.updateWinAmount = function (a, b, c) {
                        if (c === undefined) {
                            c = true;
                        }
                        if (this.Bf === undefined) {
                            throw Error("SettingInfoFooter :: updateWinAmount : Please call boot() to setup win label controller first!");
                        }
                        var d = this.Cf;
                        if (f.isNumeric(a)) {
                            this.winBalance = a;
                        } else {
                            a = this.winBalance;
                        }
                        if (a <= d) {
                            b = false;
                        }
                        if (b) {
                            this.Bf.play(d, a);
                        } else {
                            this.Bf.skip(a);
                        }
                        if (this.Sf && !this.gf) {
                            this.Pf(false, c);
                        }
                        this.Cf = this.winBalance;
                    };
                    b.prototype.updateTotalWinAmount = function (a, b) {
                        if (this.Gf === undefined) {
                            throw Error("SettingInfoFooter :: updateTotalWinAmount : Please call boot() to setup total win label controller first!");
                        }
                        if (f.isNumeric(a)) {
                            this.currentBalance = a;
                        } else {
                            a = this.currentBalance;
                        }
                        if (b) {
                            this.Gf.play(0, a);
                        } else {
                            this.Gf.skip(a);
                        }
                    };
                    b.prototype.setCustomMiddleInfoFooter = function (a, b) {
                        if (b === undefined) {
                            b = true;
                        }
                        this.freeSpinValue.string = a;
                        this.gf = !b;
                        if (this.Sf) {
                            this.Pf(true, b);
                        }
                    };
                    b.prototype.updateLayout = function (a) {
                        this.languageSensitiveLayoutList.forEach(function (b) {
                            return b.horizontalDirection = a ? cc.Layout.HorizontalDirection.RIGHT_TO_LEFT : cc.Layout.HorizontalDirection.LEFT_TO_RIGHT;
                        });
                    };
                    b.prototype.Pf = function (a, b) {
                        if (b === undefined) {
                            b = true;
                        }
                        var c = 0;
                        if (a) {
                            this.winHolderNode.active = false;
                            this.freeGamesNode.active = true;
                            c = 3;
                            this.yf = true;
                        } else {
                            this.winHolderNode.active = true;
                            this.freeGamesNode.active = false;
                            c = 5;
                            this.yf = false;
                        }
                        this.Ef(c, b);
                    };
                    b.prototype.Ef = function (a, b) {
                        if (b === undefined) {
                            b = true;
                        }
                        var c = this.Rf;
                        this.Rf = undefined;
                        if (c) {
                            c();
                        }
                        var d = this.Lf;
                        this.Lf = undefined;
                        if (d) {
                            d();
                        }
                        this.rightSlotNode.stopAllActions();
                        this.rightSlotNode.scale = 1;
                        if (b) {
                            this.Rf = f.delayCallback(a)(this.kf.bind(this));
                        }
                    };
                    b.prototype.kf = function () {
                        var a = this;
                        this.Rf = undefined;
                        function b() {
                            if (a.yf) {
                                a.winHolderNode.active = true;
                                a.freeGamesNode.active = false;
                                a.yf = false;
                            } else {
                                a.winHolderNode.active = false;
                                a.freeGamesNode.active = true;
                                a.yf = true;
                            }
                        }
                        this.Lf = f.sequenceCallback(function (c) {
                            a.rightSlotNode.runAction(cc.sequence(cc.scaleTo(0.1, 1, 0), cc.callFunc(b), cc.scaleTo(0.1, 1, 1), cc.callFunc(function () {
                                c();
                            })));
                        })(function () {
                            var b;
                            b = a.yf ? 3 : 5;
                            a.Lf = undefined;
                            a.Ef(b);
                        });
                    };
                    __decorate([j(cc.Node)], b.prototype, "background", undefined);
                    __decorate([j(cc.Node)], b.prototype, "balanceNode", undefined);
                    __decorate([j(cc.Label)], b.prototype, "customLeftFooterTitle", undefined);
                    __decorate([j(cc.Node)], b.prototype, "balanceValueNode", undefined);
                    __decorate([j(cc.Node)], b.prototype, "rightSlotNode", undefined);
                    __decorate([j(cc.Node)], b.prototype, "winValueNode", undefined);
                    __decorate([j(cc.Node)], b.prototype, "winHolderNode", undefined);
                    __decorate([j(cc.Sprite)], b.prototype, "winCashIconNode", undefined);
                    __decorate([j(cc.Button)], b.prototype, "winButton", undefined);
                    __decorate([j(cc.Node)], b.prototype, "totalWinNode", undefined);
                    __decorate([j(cc.Node)], b.prototype, "totalWinValueNode", undefined);
                    __decorate([j(cc.Node)], b.prototype, "freeGamesNode", undefined);
                    __decorate([j(cc.Sprite)], b.prototype, "specialIcon", undefined);
                    __decorate([j(cc.Label)], b.prototype, "freeSpinValue", undefined);
                    __decorate([j(cc.Button)], b.prototype, "walletButton", undefined);
                    __decorate([j(cc.Node)], b.prototype, "walletButtonSensor", undefined);
                    __decorate([j(cc.Node)], b.prototype, "walletNavigateIcon", undefined);
                    __decorate([j(cc.Node)], b.prototype, "walletNotificationIcon", undefined);
                    __decorate([j(cc.Label)], b.prototype, "betAmountLabel", undefined);
                    __decorate([j(cc.Button)], b.prototype, "betOptionsButton", undefined);
                    __decorate([j(cc.Node)], b.prototype, "betOptionsIcon", undefined);
                    __decorate([j([cc.SpriteFrame])], b.prototype, "walletFooterTypeSFList", undefined);
                    __decorate([j([cc.SpriteFrame])], b.prototype, "rewardFooterTypeSFList", undefined);
                    __decorate([j(cc.Node)], b.prototype, "maxBetButtonHolder", undefined);
                    __decorate([j([cc.Layout])], b.prototype, "languageSensitiveLayoutList", undefined);
                    return __decorate([i], b);
                }(cc.Component);
                c.SettingInfoFooterController = k;
                cc._RF.pop();
            }
        }, {
            UIAppearanceHelper: "UIAppearanceHelper",
            Utils: "Utils"
        }],
        SettingMenuButtonHelper: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "1ddf5VqGQ9OiqajxiLxeBVw", "SettingMenuButtonHelper")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = cc._decorator.ccclass;
                var f = function () {
                    function a() {
                        this.Uf = [];
                        this.jf = Object.create(null);
                        this.Df = Object.create(null);
                        this.Wf = Object.create(null);
                        this.xf = Object.create(null);
                        this.Ff = Object.create(null);
                        this.Vf = Object.create(null);
                    }
                    a.prototype.setButtonPrefab = function (a, b, c) {
                        this.jf[a] = b;
                        this.Vf[a] = c;
                    };
                    a.prototype.totalButtonsOccupied = function () {
                        return this.Uf.length;
                    };
                    a.prototype.getButtonInList = function (a) {
                        return cc.instantiate(this.jf[a]).getComponent("GenericSettingButton");
                    };
                    a.prototype.setupSettingMenuButtonInList = function (a, b, c) {
                        var d = cc.instantiate(this.jf[a]);
                        var e = d.getComponent("GenericSettingButton");
                        this.Uf.push(e.button);
                        e.onClick = b;
                        this.Wf[a] = false;
                        this.xf[a] = e;
                        if (c) {
                            d.getComponent("ButtonTheme").colorKey = c;
                        }
                        return e;
                    };
                    a.prototype.setupIndependentSettingMenuButton = function (a, b) {
                        if (this.jf[a]) {
                            var c = cc.instantiate(this.jf[a]).getComponent("GenericSettingButton");
                            c.onClick = b;
                            this.Wf[a] = false;
                            this.xf[a] = c;
                            return c;
                        }
                    };
                    a.prototype.setupOtherButtonInList = function (a, b) {
                        var c = {
                            isInteractable: b
                        };
                        this.Wf[a] = false;
                        this.Ff[a] = c;
                        this.Vf[a] = false;
                    };
                    a.prototype.setButtonInteractableFlag = function (a, b) {
                        if (b === undefined) {
                            b = false;
                        }
                        this.Df[a] = b;
                    };
                    a.prototype.setButtonInteractable = function (a) {
                        if (!(this.Vf[a] || this.Wf[a] !== false)) {
                            if (this.Ff[a]) {
                                this.Ff[a].isInteractable(this.Df[a]);
                            } else {
                                this.xf[a].isInteractable = this.Df[a];
                            }
                        }
                    };
                    a.prototype.setButtonLock = function (a, b) {
                        if (b === undefined) {
                            b = false;
                        }
                        this.Wf[a] = b;
                    };
                    a.prototype.isButtonLocked = function (a) {
                        return this.Wf[a];
                    };
                    a.prototype.setAllButtonsInteractable = function (a) {
                        for (var b = Object.keys(this.xf), c = 0, d = b.length; c < d; c++) {
                            this.setButtonInteractableFlag(parseInt(b[c]), a);
                            this.setButtonInteractable(parseInt(b[c]));
                        }
                        var e = Object.keys(this.Ff);
                        c = 0;
                        d = e.length;
                        for (; c < d; c++) {
                            this.setButtonInteractableFlag(parseInt(e[c]), a);
                            this.setButtonInteractable(parseInt(e[c]));
                        }
                    };
                    a.prototype.setButtonsLock = function (a) {
                        for (var b = 0, c = Object.keys(this.xf).length; b < c; b++) {
                            this.setButtonLock(b + 1, a);
                        }
                        b = 0;
                        c = Object.keys(this.Ff).length;
                        for (; b < c; b++) {
                            this.setButtonLock(b + 1, a);
                        }
                    };
                    a.prototype.setLockAccess = function (a, b) {
                        this.setButtonLock(a, b);
                        if (b) {
                            if (this.Ff[a]) {
                                this.Ff[a].isInteractable(!b);
                            } else {
                                this.xf[a].isInteractable = !b;
                            }
                        } else {
                            this.setButtonInteractable(a);
                        }
                    };
                    a.prototype.getButtonNode = function (a) {
                        var b = this.xf[a];
                        if (b) {
                            return b.node;
                        } else {
                            return undefined;
                        }
                    };
                    return __decorate([e("SettingMenuButtonHelper")], a);
                }();
                c.default = f;
                cc._RF.pop();
            }
        }, {}],
        SettingMenuController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "fba916JMWpJiL2n5fnfp4nN", "SettingMenuController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.SettingMenuController = undefined;
                var e = a("CanvasResizeBroadcaster");
                var f = a("HitPassThrough");
                var g = a("Utils");
                var h = a("UIAppearanceHelper");
                var i = a("BVFramework");
                var j = cc._decorator;
                var k = j.ccclass;
                var l = j.property;
                var m = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.blackTintBackground = undefined;
                        b.dimBackground = undefined;
                        b.subControllerHolder = undefined;
                        b.menusLayerHolder = undefined;
                        b.defaultMenuLayerNode = undefined;
                        b.moreMenuLayerNode = undefined;
                        b.subControllerBG = undefined;
                        b.settingInfoFooterFrontHolder = undefined;
                        b.settingInfoFooterMiddleBottomHolder = undefined;
                        b.settingInfoFooterBottomHolder = undefined;
                        b.walletButtonSensor = undefined;
                        b.hitPassThroughComponent = undefined;
                        b.settingToast = undefined;
                        b.settingToastBg = undefined;
                        b.settingToastLayout = undefined;
                        b.settingToastLabel = undefined;
                        b.settingTurboSprite = undefined;
                        b.settingTurboOnSprite = undefined;
                        b.settingTurboOffSprite = undefined;
                        b.featureBuyToast = undefined;
                        b.featureBuyToastBg = undefined;
                        b.featureBuyToastLayout = undefined;
                        b.featureBuyToastLabel = undefined;
                        b.featureBuyTurboSprite = undefined;
                        b.reminderBoard = undefined;
                        b.originalBetAmountLabel = undefined;
                        b.reminderBoardLabel = undefined;
                        b.holders = [];
                        b.muteIcon = undefined;
                        b.settingMenuUIBlock = undefined;
                        b.zf = false;
                        b.Qc = true;
                        b.Kc = false;
                        b.qf = [];
                        b.yh = [];
                        b.Jf = false;
                        b.FRONT_MAX_HOLDER = 4;
                        b.Kf = false;
                        b.Qf = false;
                        b.Yf = 0.2;
                        b.Xf = false;
                        b.Zf = 0;
                        b.$f = false;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.onLoad = function () {
                        this.settingTurboSprite.node.color = h.uiAppearanceHelper.v("setting.theme_color");
                        this.defaultMenuLayerNode.y = 0;
                        this.settingToast.opacity = 0;
                        this.featureBuyToast.opacity = 0;
                        this.featureBuyToast.active = false;
                        this.moreMenuLayerNode.y = -this.defaultMenuLayerNode.height;
                        this.moreMenuLayerNode.opacity = 0;
                        this.moreMenuLayerNode.active = false;
                        this.reminderBoard.active = false;
                        this.reminderBoard.opacity = 1;
                        this.blackTintBackground.active = false;
                        this.settingMenuUIBlock.active = false;
                        this.subControllerHolder.height = this.qc = cc.view.getVisibleSize().height;
                        var a = e.default.subscribe(this.ui.bind(this));
                        this.Jc = typeof a == "function" ? a : undefined;
                        this.td = i.getGameContext();
                    };
                    b.prototype.ui = function () {
                        var a = this;
                        var b = this.sd;
                        this.sd = undefined;
                        if (b) {
                            b();
                        }
                        var c = [];
                        if (this.Jf) {
                            c.push(function () {
                                var b = cc.view.getVisibleSize().height;
                                var c = a.zc();
                                a.subControllerHolder.height = b - c;
                                a.subControllerBG.height = b;
                            });
                        } else {
                            c.push(function () {
                                if (a.qc === undefined) {
                                    throw Error("SettingMenuController :: _onSizeChanged : Please update holder height using updateSubControllerHolderHeight first!");
                                }
                                var b = a.zc();
                                a.subControllerHolder.height = a.qc;
                                a.subControllerBG.height = a.qc + b;
                            });
                        }
                        this.sd = g.sequenceCallback(g.delayCallback(0))(function () {
                            a.sd = undefined;
                            for (var b = 0; b < c.length; b++) {
                                c[b]();
                            }
                        });
                    };
                    b.prototype.onDestroy = function () {
                        var a = this.Jc;
                        this.Jc = undefined;
                        if (a) {
                            a();
                        }
                    };
                    b.prototype.setBetChangeReminderLabel = function (a) {
                        this.reminderBoardLabel.string = a;
                    };
                    b.prototype.showBetReminderBoard = function (a) {
                        if (!this.Qf) {
                            this.Qf = true;
                            this.reminderBoard.active = true;
                            this.reminderBoard.stopAllActions();
                            this.reminderBoard.runAction(cc.fadeIn(0.2));
                            this.originalBetAmountLabel.string = a;
                        }
                    };
                    b.prototype.hideBetReminderBoard = function () {
                        var a = this;
                        if (this.Qf) {
                            this.Qf = false;
                            this.reminderBoard.stopAllActions();
                            this.reminderBoard.runAction(cc.sequence(cc.fadeOut(0.2), cc.callFunc(function () {
                                a.reminderBoard.active = false;
                            })));
                        }
                    };
                    b.prototype.isSettingBetReminderBoardShowed = function () {
                        return this.Qf;
                    };
                    b.prototype.cancelToChangeBetAmount = function () {
                        if (this.ed) {
                            this.ed();
                        }
                    };
                    b.prototype.confirmToChangeBetAmount = function () {
                        if (this.nd) {
                            this.nd();
                        }
                    };
                    b.prototype.setBetReminderCancelAndConfirmCallback = function (a, b) {
                        this.ed = a;
                        this.nd = b;
                    };
                    b.prototype.showSettingTurboToast = function (a, b, c) {
                        var d = this;
                        if (c === undefined) {
                            c = 2;
                        }
                        var e = this.od;
                        this.od = undefined;
                        if (e) {
                            e();
                        }
                        this.settingToast.stopAllActions();
                        if (!e) {
                            this.settingToast.opacity = 1;
                        }
                        this.settingToastLabel.string = a;
                        this.settingTurboSprite.node.active = true;
                        this.settingTurboSprite.spriteFrame = b ? this.settingTurboOnSprite : this.settingTurboOffSprite;
                        this.settingTurboSprite.node.stopAllActions();
                        this.settingTurboSprite.node.opacity = 0;
                        this.od = g.delayCallback(0)(function () {
                            d.settingToastBg.width = d.settingToastLabel.node.width + 48 + d.settingTurboSprite.node.width;
                            d.settingToastBg.height = d.settingToastLabel.node.height + 24;
                            d.settingToast.opacity = 255;
                            d.settingToast.runAction(cc.sequence(cc.scaleTo(0.1, 1.2), cc.spawn(cc.scaleTo(0.1, 1), cc.sequence(cc.delayTime(0.05), cc.callFunc(function () {
                                d.settingTurboSprite.node.runAction(cc.fadeTo(0.05, 255));
                            }))), cc.delayTime(c), cc.fadeOut(0.3), cc.callFunc(function () {
                                d.od = undefined;
                            })));
                        });
                    };
                    b.prototype.showSettingToast = function (a, b) {
                        var c = this;
                        if (b === undefined) {
                            b = 2;
                        }
                        var d = this.od;
                        this.od = undefined;
                        if (d) {
                            d();
                        }
                        this.settingToast.stopAllActions();
                        this.settingTurboSprite.node.stopAllActions();
                        this.settingTurboSprite.node.active = false;
                        this.settingTurboSprite.node.opacity = 0;
                        if (!d) {
                            this.settingToast.opacity = 1;
                        }
                        this.settingToastLabel.string = a;
                        this.od = g.delayCallback(0)(function () {
                            c.settingToastBg.width = c.settingToastLabel.node.width + 48;
                            c.settingToastBg.height = c.settingToastLabel.node.height + 24;
                            c.settingToast.opacity = 255;
                            c.settingToast.runAction(cc.sequence(cc.scaleTo(0.1, 1.2), cc.scaleTo(0.1, 1), cc.delayTime(b), cc.fadeOut(0.3), cc.callFunc(function () {
                                c.od = undefined;
                            })));
                        });
                    };
                    b.prototype.hideSettingToast = function () {
                        var a = this;
                        var b = this.od;
                        this.od = undefined;
                        if (b) {
                            b();
                        }
                        this.settingToast.stopAllActions();
                        this.settingToast.runAction(cc.sequence(cc.fadeOut(0.3), cc.callFunc(function () {
                            a.od = undefined;
                        })));
                    };
                    b.prototype.showFeatureBuyToast = function (a, b) {
                        var c = this;
                        if (b === undefined) {
                            b = 2;
                        }
                        var d = this.hd;
                        this.hd = undefined;
                        if (d) {
                            d();
                        }
                        this.featureBuyToast.active = true;
                        this.featureBuyToast.stopAllActions();
                        this.featureBuyTurboSprite.node.stopAllActions();
                        this.featureBuyTurboSprite.node.active = false;
                        this.featureBuyTurboSprite.node.opacity = 0;
                        if (!d) {
                            this.featureBuyToast.opacity = 1;
                        }
                        this.featureBuyToastLabel.string = a;
                        this.hd = g.delayCallback(0)(function () {
                            c.featureBuyToastBg.width = c.featureBuyToastLabel.node.width + 20;
                            c.featureBuyToastBg.height = c.featureBuyToastLabel.node.height + 48;
                            c.featureBuyToast.opacity = 255;
                            c.featureBuyToast.runAction(cc.sequence(cc.scaleTo(0.1, 1.2), cc.scaleTo(0.1, 1), cc.delayTime(b), cc.fadeOut(0.3), cc.callFunc(function () {
                                c.hd = undefined;
                            })));
                        });
                    };
                    b.prototype.hideFeatureBuyToast = function () {
                        var a = this;
                        var b = this.hd;
                        this.hd = undefined;
                        if (b) {
                            b();
                        }
                        this.featureBuyToast.stopAllActions();
                        this.featureBuyToast.runAction(cc.sequence(cc.fadeOut(0.3), cc.callFunc(function () {
                            a.hd = undefined;
                        })));
                    };
                    b.prototype.setFeatureBuyToastNodePosition = function (a, b, c) {
                        this.featureBuyToast.setPosition(a, b, c);
                    };
                    b.prototype.buttonsHolder = function () {
                        return this.holders;
                    };
                    b.prototype.addMenuItem = function (a) {
                        this.holders[this.qf.length].addChild(a);
                        this.qf.push(a);
                        this.Yc();
                        return this.holders[this.qf.length - 1];
                    };
                    b.prototype.addEmptyItem = function () {
                        this.qf.push(null);
                        this.Yc();
                        return this.holders[this.qf.length - 1];
                    };
                    b.prototype.replaceMenuItems = function (a) {
                        this.qf.length = 0;
                        for (var b = 0, c = a.length; b < c; b++) {
                            this.qf.push(a[b]);
                        }
                        this.Yc();
                    };
                    b.prototype.Yc = function () {
                        this.yh.length = 0;
                        for (var a = 0, b = this.qf.length; a < b; a++) {
                            if (this.Qc) {
                                if (a >= this.FRONT_MAX_HOLDER) {
                                    break;
                                }
                                this.yh.push(this.qf[a]);
                            } else if (a >= this.FRONT_MAX_HOLDER) {
                                this.yh.push(this.qf[a]);
                            }
                        }
                    };
                    b.prototype.isItemVisible = function (a) {
                        return this.yh.indexOf(a) !== -1;
                    };
                    b.prototype.visibleItems = function () {
                        return this.yh.slice();
                    };
                    b.prototype.getTotalItems = function () {
                        return this.qf.slice();
                    };
                    b.prototype.isIdle = function () {
                        return !this.zf && this.Qc;
                    };
                    b.prototype.isShowingDefaultMenu = function () {
                        return this.Qc;
                    };
                    b.prototype.setHitPassThroughPosAndSize = function (a, b, c, d) {
                        var e = this.walletButtonSensor.convertToNodeSpaceAR(cc.v2(a, b));
                        this.hitPassThroughComponent.passPoint = cc.v2(e.x, e.y);
                        this.hitPassThroughComponent.passSize = cc.size(c, d);
                    };
                    b.prototype.setHidden = function (a) {
                        this.node.active = !a;
                    };
                    b.prototype.getSettingInfoFooterFrontHolder = function () {
                        return this.settingInfoFooterFrontHolder;
                    };
                    b.prototype.getSettingInfoFooterBottomHolder = function () {
                        return this.settingInfoFooterBottomHolder;
                    };
                    b.prototype.getSettingInfoFooterMiddleBottomHolder = function () {
                        return this.settingInfoFooterMiddleBottomHolder;
                    };
                    b.prototype.setMenusLayerHolderOffsetPosition = function (a, b) {
                        var c = this.menusLayerHolder;
                        c.setPosition(c.x + a, c.y + b);
                    };
                    b.prototype.isSwitchingMenuLayer = function () {
                        return this.Kc;
                    };
                    b.prototype.showMoreMenuLayer = function (a) {
                        var b = this;
                        if (a === undefined) {
                            a = false;
                        }
                        if (!this.Kc) {
                            this.Kc = true;
                            this.Qc = false;
                            this.Yc();
                            this.defaultMenuLayerNode.runAction(cc.sequence(cc.spawn(cc.moveTo(0.2, 0, -this.defaultMenuLayerNode.height).easing(cc.easeQuadraticActionOut()), cc.fadeOut(0.2)), cc.callFunc(function () {
                                b.defaultMenuLayerNode.active = false;
                                b.Kc = false;
                                if (b.onMenuEndChanged) {
                                    b.onMenuEndChanged();
                                }
                            })));
                            this.moreMenuLayerNode.active = true;
                            this.moreMenuLayerNode.runAction(cc.spawn(cc.moveTo(0.2, 0, 0).easing(cc.easeQuadraticActionOut()), cc.fadeIn(0.2).easing(cc.easeQuadraticActionOut())));
                            if (a) {
                                this.blackTintBackground.active = true;
                                this.blackTintBackground.runAction(cc.fadeTo(0.2, 127.5));
                            }
                            var c = this.onMenuStartChanged;
                            if (c) {
                                c(true, true);
                            }
                        }
                    };
                    b.prototype.hideMoreMenuLayer = function () {
                        var a = this;
                        if (!this.Kc) {
                            this.Kc = true;
                            this.Qc = true;
                            this.Yc();
                            this.defaultMenuLayerNode.active = true;
                            this.defaultMenuLayerNode.runAction(cc.sequence(cc.spawn(cc.moveTo(0.2, 0, 0).easing(cc.easeQuadraticActionOut()), cc.fadeIn(0.2)), cc.callFunc(function () {
                                a.Kc = false;
                                if (a.onMenuEndChanged) {
                                    a.onMenuEndChanged();
                                }
                            })));
                            this.moreMenuLayerNode.runAction(cc.sequence(cc.spawn(cc.moveTo(0.2, 0, -this.defaultMenuLayerNode.height).easing(cc.easeQuadraticActionOut()), cc.fadeOut(0.2).easing(cc.easeQuadraticActionOut())), cc.callFunc(function () {
                                a.moreMenuLayerNode.active = false;
                            })));
                            if (this.blackTintBackground.active === true) {
                                this.blackTintBackground.runAction(cc.sequence(cc.fadeOut(0.2), cc.callFunc(function () {
                                    a.blackTintBackground.active = false;
                                })));
                            }
                            var b = this.onMenuStartChanged;
                            if (b) {
                                b(false, true);
                            }
                        }
                    };
                    b.prototype.isControllerPresenting = function () {
                        return this.zf;
                    };
                    b.prototype.setIsControllerPresenting = function (a) {
                        this.zf = a;
                    };
                    b.prototype.setSubControllerHolderMoveDuration = function (a) {
                        this.Yf = a;
                    };
                    b.prototype.zc = function () {
                        return this.node.parent.convertToWorldSpaceAR(cc.v2(this.node.x, this.node.y)).y;
                    };
                    b.prototype.getGapBetweenBottomScreenValue = function () {
                        return this.zc();
                    };
                    b.prototype.updateSubControllerHolderHeight = function (a) {
                        this.subControllerHolder.height = this.qc = a;
                    };
                    b.prototype.isPanelTouchMoving = function () {
                        return this.Kf;
                    };
                    b.prototype.startMovePanel = function (a, b) {
                        if (!this.zf) {
                            this.Kf = false;
                            this.Xf = false;
                            this.subControllerHolder.height = b;
                            this.subControllerHolder.y = -b;
                            this.Zf = a;
                            this.subControllerBG.height = this.zc() + b;
                        }
                    };
                    b.prototype.movePanel = function (a) {
                        if (!this.zf) {
                            this.Kf = true;
                            var b = this.subControllerHolder;
                            var c = this.subControllerHolder.height;
                            var d = b.parent.convertToNodeSpaceAR(cc.v2(0, a)).y;
                            var e = Math.abs(this.Zf - a);
                            if (this.Xf) {
                                b.y = d - c;
                                if (b.y >= 0) {
                                    b.y = 0;
                                }
                            } else if (e > 60) {
                                if (a > this.Zf) {
                                    this.Xf = true;
                                    this.subControllerBG.opacity = 255;
                                    if (this.rd) {
                                        this.rd();
                                    }
                                }
                            } else {
                                b.y = d - c;
                            }
                        }
                    };
                    b.prototype.closePanel = function () {
                        var a = this;
                        if (!this.zf) {
                            this.zf = true;
                            var b = this.subControllerHolder.height + this.zc();
                            this.subControllerHolder.runAction(cc.sequence(cc.moveTo(this.Yf, 0, -b), cc.callFunc(function () {
                                a.zf = false;
                                a.Kf = false;
                                a.subControllerBG.opacity = 0;
                            })));
                        }
                    };
                    b.prototype.getCurrentPanelTopPositionY = function () {
                        var a = this.subControllerHolder;
                        return a.y + a.height;
                    };
                    b.prototype.setWalletButtonLock = function (a) {
                        if (a === undefined) {
                            a = false;
                        }
                        this.$f = a;
                    };
                    b.prototype.interactableWalletButton = function (a, b) {
                        if (this.$f === false && !a && b) {
                            this.closePanel();
                        }
                    };
                    b.prototype.setMenuUIBlock = function (a) {
                        this.settingMenuUIBlock.active = a;
                    };
                    b.prototype.updateLayout = function (a) {
                        if (a) {
                            this.settingToastLayout.horizontalDirection = cc.Layout.HorizontalDirection.RIGHT_TO_LEFT;
                        }
                    };
                    __decorate([l(cc.Node)], b.prototype, "blackTintBackground", undefined);
                    __decorate([l(cc.Node)], b.prototype, "dimBackground", undefined);
                    __decorate([l(cc.Node)], b.prototype, "subControllerHolder", undefined);
                    __decorate([l(cc.Node)], b.prototype, "menusLayerHolder", undefined);
                    __decorate([l(cc.Node)], b.prototype, "defaultMenuLayerNode", undefined);
                    __decorate([l(cc.Node)], b.prototype, "moreMenuLayerNode", undefined);
                    __decorate([l(cc.Node)], b.prototype, "subControllerBG", undefined);
                    __decorate([l(cc.Node)], b.prototype, "settingInfoFooterFrontHolder", undefined);
                    __decorate([l(cc.Node)], b.prototype, "settingInfoFooterMiddleBottomHolder", undefined);
                    __decorate([l(cc.Node)], b.prototype, "settingInfoFooterBottomHolder", undefined);
                    __decorate([l(cc.Node)], b.prototype, "walletButtonSensor", undefined);
                    __decorate([l(f.default)], b.prototype, "hitPassThroughComponent", undefined);
                    __decorate([l(cc.Node)], b.prototype, "settingToast", undefined);
                    __decorate([l(cc.Node)], b.prototype, "settingToastBg", undefined);
                    __decorate([l(cc.Layout)], b.prototype, "settingToastLayout", undefined);
                    __decorate([l(cc.Label)], b.prototype, "settingToastLabel", undefined);
                    __decorate([l(cc.Sprite)], b.prototype, "settingTurboSprite", undefined);
                    __decorate([l(cc.SpriteFrame)], b.prototype, "settingTurboOnSprite", undefined);
                    __decorate([l(cc.SpriteFrame)], b.prototype, "settingTurboOffSprite", undefined);
                    __decorate([l(cc.Node)], b.prototype, "featureBuyToast", undefined);
                    __decorate([l(cc.Node)], b.prototype, "featureBuyToastBg", undefined);
                    __decorate([l(cc.Layout)], b.prototype, "featureBuyToastLayout", undefined);
                    __decorate([l(cc.RichText)], b.prototype, "featureBuyToastLabel", undefined);
                    __decorate([l(cc.Sprite)], b.prototype, "featureBuyTurboSprite", undefined);
                    __decorate([l(cc.Node)], b.prototype, "reminderBoard", undefined);
                    __decorate([l(cc.Label)], b.prototype, "originalBetAmountLabel", undefined);
                    __decorate([l(cc.Label)], b.prototype, "reminderBoardLabel", undefined);
                    __decorate([l([cc.Node])], b.prototype, "holders", undefined);
                    __decorate([l(cc.Node)], b.prototype, "muteIcon", undefined);
                    __decorate([l(cc.Node)], b.prototype, "settingMenuUIBlock", undefined);
                    return __decorate([k], b);
                }(cc.Component);
                c.SettingMenuController = m;
                cc._RF.pop();
            }
        }, {
            BVFramework: "BVFramework",
            CanvasResizeBroadcaster: "CanvasResizeBroadcaster",
            HitPassThrough: "HitPassThrough",
            UIAppearanceHelper: "UIAppearanceHelper",
            Utils: "Utils"
        }],
        SettingMenuHandlers: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "e4a87/dIGtMT5oq5NQEGbT5", "SettingMenuHandlers")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.handleSettingMenuMusicChange = c.handleSettingMenuFlipped = c.additionalBetCalculation = c.updateDataSourceBetValue = c.getBetChangeCallback = c.updateBetChangesCallback = c.initializeSettingMenu = c.setupSettingMenu = undefined;
                var e = a("LaunchConfig");
                var f = a("AnalyticsHelper");
                var g = a("QuitGameWithEvent");
                var h = {
                    settingMenuLibPath: "lib/setting_menu/"
                };
                c.setupSettingMenu = function (a) {
                    var b = Object.assign({}, h, a.settingMenuDependenciesPath);
                    var c = a.settingMenuHelper;
                    var d = a.dataSource;
                    var f = a.callback;
                    c.path = b.settingMenuLibPath;
                    c.showChangeBetReminder = a.isProgressiveGame;
                    c.manualUpdateBetFactorCallBack = j(d, c, a.betChangeCallback);
                    c.betModifierUpdateCallback = i(d, c, a.betChangeCallback);
                    c.reevaluateBetCallback = l(d, a.reevaluateBetCallback);
                    c.additionalBetCalculationCallback = a.additionalBetCalculation ? a.additionalBetCalculation : n;
                    c.changeSoundVolume = p(a.toggleEffectMuted, a.toggleMusicMuted);
                    var g = e.cs_Launch.noAudio !== "1";
                    c.audioConfigure = g;
                    if (f) {
                        f();
                    }
                };
                c.initializeSettingMenu = function (a) {
                    var b = a.settingMenuHelper;
                    var c = a.dataSource;
                    var d = a.callback;
                    b.setSettingMenuController(a.settingController);
                    b.addSettingInfoFooter(a.settingWalletPanelController);
                    b.setOnClickReturnButtonCallback(function () {
                        g.quitGameWithEvent("Setting Quit")();
                    });
                    b.setupSettingMenuButtons();
                    b.menuChangedCallBack = a.settingMenuChangedHandling ? a.settingMenuChangedHandling : o(a.spinButtonController);
                    var e = c.playerModel.balance;
                    b.setBalance(e);
                    b.updateBetValues();
                    b.setAllButtonsInteractable(false);
                    if (d) {
                        d();
                    }
                };
                c.updateBetChangesCallback = i;
                c.getBetChangeCallback = j;
                c.updateDataSourceBetValue = l;
                c.additionalBetCalculation = n;
                c.handleSettingMenuFlipped = o;
                c.handleSettingMenuMusicChange = p;
                cc._RF.pop();
            }
            function i(a, b, c) {
                return function (d, e) {
                    var g = a.systemModel.maxLineNumber;
                    b.betSizeValue = d;
                    b.betLevelValue = e;
                    l(a)(d, e);
                    f.sendEvent(shell.ga.CATEGORY_GAME, shell.ga.EVENT_SLOT_CHANGE_BET, {
                        amount: d * e * g
                    });
                    if (c) {
                        c();
                    }
                };
            }
            function j(a, b, c) {
                return function (d, e) {
                    i(a, b)(d, e);
                    b.updateBetValues();
                    if (c) {
                        c();
                    }
                };
            }
            function l(a, b) {
                return function (c, d) {
                    a.transactionModel.betSizeValue = c;
                    a.transactionModel.betLevelValue = d;
                    if (b) {
                        b();
                    }
                };
            }
            function n(a, b, c) {
                return a * b * c;
            }
            function o(a) {
                return function (b) {
                    if (b) {
                        a.hide();
                    } else {
                        a.show();
                    }
                };
            }
            function p(a, b) {
                return function (c) {
                    a(!c);
                    b(!c);
                };
            }
        }, {
            AnalyticsHelper: "AnalyticsHelper",
            LaunchConfig: "LaunchConfig",
            QuitGameWithEvent: "QuitGameWithEvent"
        }],
        SettingMenuHelper: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "35d29M3VudMFqjm4gRoo2G6", "SettingMenuHelper")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.BackButtonType = c.settingMenuHelper = c.SettingMenuType = c.ButtonPrefabType = c.SubControllers = undefined;
                var e;
                var f;
                var g;
                var h = a("Utils");
                var i = a("SettingMenuButtonHelper");
                var j = a("NotifyHelper");
                var l = a("Preference");
                var m = a("BVFramework");
                var n = a("GameEventHandler");
                var o = System.get("wallet");
                var p = System.get("slot-menu");
                var r = System.get("game-history");
                var s = System.get("paytable-rules");
                var k = cc._decorator.ccclass;
                var t = l.getPreference("setting_menu");
                t.defineItem("soundOn", true);
                (function (a) {
                    a[a.SPIN_OPTIONS = 0] = "SPIN_OPTIONS";
                    a[a.BET_OPTIONS = 1] = "BET_OPTIONS";
                    a[a.SOUND = 2] = "SOUND";
                    a[a.HISTORY = 3] = "HISTORY";
                    a[a.PAYTABLE = 4] = "PAYTABLE";
                    a[a.RULE = 5] = "RULE";
                    a[a.WALLET = 6] = "WALLET";
                })(c.SubControllers || (c.SubControllers = {}));
                (function (a) {
                    a[a.SPIN_OPTIONS = 2] = "SPIN_OPTIONS";
                    a[a.BET_OPTIONS = 3] = "BET_OPTIONS";
                    a[a.MORE_MENU = 4] = "MORE_MENU";
                    a[a.SOUND = 5] = "SOUND";
                    a[a.PAYTABLE = 6] = "PAYTABLE";
                    a[a.RULE = 7] = "RULE";
                    a[a.HISTORY = 8] = "HISTORY";
                    a[a.HIDE_MORE = 9] = "HIDE_MORE";
                    a[a.MINUS_BET = 10] = "MINUS_BET";
                    a[a.PLUS_BET = 11] = "PLUS_BET";
                    a[a.WALLET = 12] = "WALLET";
                    a[a.WIN = 13] = "WIN";
                    a[a.TURBO_SPIN = 14] = "TURBO_SPIN";
                    a[a.QUIT = 15] = "QUIT";
                    a[a.MAX_BET = 16] = "MAX_BET";
                })(e = c.ButtonPrefabType || (c.ButtonPrefabType = {}));
                (function (a) {
                    a[a.HIDDEN = 0] = "HIDDEN";
                    a[a.NORMAL_BACK_FUNC = 1] = "NORMAL_BACK_FUNC";
                })(f || (f = {}));
                c.BackButtonType = f;
                (function (a) {
                    a[a.LEGACY = 0] = "LEGACY";
                    a[a.NEW = 1] = "NEW";
                })(g = c.SettingMenuType || (c.SettingMenuType = {}));
                var u = new (function (a) {
                    function b() {
                        var b = a.call(this) || this;
                        var c = {
                            sliderEffect: false,
                            listItemClick: false,
                            menuIconPress: false,
                            walletCountingAbove: false
                        };
                        b.soundOn = t.soundOn;
                        b.turboSpinOn = false;
                        b.isFreeGameMode = false;
                        b.ad = false;
                        b.ud = true;
                        b.ld = f.HIDDEN;
                        b.fd = 0;
                        b.dd = "";
                        b.vd = 0;
                        b._d = [];
                        b.md = [];
                        b.lt = 0;
                        b.ut = 0;
                        b.pd = "";
                        b.bd = {
                            sliderEffect: "audio/slider_effect",
                            listItemClick: "audio/list_item_click",
                            menuIconPress: "audio/menu_icon_press",
                            walletCountingAbove: "audio/wallet_counting_above"
                        };
                        b.Sd = c;
                        b.gd = 0;
                        b.balanceAmountLessThan = 0;
                        b.autoSpinCount = 0;
                        b.balanceAmountMoreThan = 0;
                        b.singleWinAmount = 0;
                        b.Cd = false;
                        b.yd = false;
                        b.Md = false;
                        b.Ad = new i.default();
                        b.td = m.getGameContext();
                        b.Id = false;
                        b.wd();
                        b.Od();
                        b.td.on("Game.Initialized", b.Hd.bind(b));
                        return b;
                    }
                    __extends(b, a);
                    Object.defineProperty(b.prototype, "path", {
                        get: function () {
                            return this.dd;
                        },
                        set: function (a) {
                            this.dd = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.setSettingMenuController = function (a) {
                        this.Bd = a;
                    };
                    Object.defineProperty(b.prototype, "settingMenuController", {
                        get: function () {
                            if (!this.Bd) {
                                throw Error("SettingMenuHelper :: settingMenuController : Cannot find settingMenuController. Please setup using setSettingMenuController first!");
                            }
                            return this.Bd;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.initAudio = function (a) {
                        this.Gd(a);
                    };
                    b.prototype.loadAudio = function (a) {
                        this.Nd(a);
                    };
                    b.prototype.setButtonPrefab = function (a, b, c) {
                        if (c === undefined) {
                            c = false;
                        }
                        this.Ad.setButtonPrefab(a, b, c);
                    };
                    Object.defineProperty(b.prototype, "autoSpinButtonLocaleIcon", {
                        get: function () {
                            if (!this.Td) {
                                throw Error("SettingMenuHelper :: autoSpinButtonLocaleIcon : Cannot find autoSpinButtonLocaleIcon. Please setup using settingMenuLocaleIcons setter first!");
                            }
                            return this.Td;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "historyButtonLocaleIcon", {
                        get: function () {
                            if (!this.Pd) {
                                throw Error("SettingMenuHelper :: historyButtonLocaleIcon : Cannot find historyButtonLocaleIcon. Please setup using settingMenuLocaleIcons setter first!");
                            }
                            return this.Pd;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "settingInfoFooterLocaleWinIcon", {
                        get: function () {
                            if (!this.Rd) {
                                throw Error("SettingMenuHelper :: settingInfoFooterLocaleWinIcon : Cannot find settingInfoFooterLocaleWinIcon. Please setup using settingMenuLocaleIcons setter first!");
                            }
                            return this.Rd;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "turboOnButtonLocaleIcon", {
                        get: function () {
                            if (!this.Ld) {
                                throw Error("SettingMenuHelper :: turboOnButtonLocaleIcon : Cannot find turboOnButtonLocaleIcon. Please setup using settingMenuLocaleIcons setter first!");
                            }
                            return this.Ld;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "turboOffButtonLocaleIcon", {
                        get: function () {
                            if (!this.Ed) {
                                throw Error("SettingMenuHelper :: turboOffButtonLocaleIcon : Cannot find turboOffButtonLocaleIcon. Please setup using settingMenuLocaleIcons setter first!");
                            }
                            return this.Ed;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "settingMenuLocaleIcons", {
                        set: function (a) {
                            this.Td = a.getSpriteFrame("txt_auto");
                            this.Pd = a.getSpriteFrame("ic_hist");
                            if (this.kd) {
                                this.kd.setIconSprite(this.Pd);
                            }
                            this.Rd = a.getSpriteFrame("ic_win");
                            if (this.Ud) {
                                this.Ud.setWinIcon(this.Rd);
                            }
                            this.Ld = a.getSpriteFrame("txt_turbo_on");
                            this.Ed = a.getSpriteFrame("txt_turbo_off");
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.jd = function () {
                        var a = this;
                        var b = this.settingMenuController;
                        var c = this.Ad.setupSettingMenuButtonInList(e.TURBO_SPIN, function () {
                            if (!b.isSwitchingMenuLayer()) {
                                a.setTurboSpinButtonState(!a.turboSpinOn);
                                a.playMenuIconPressSound();
                                if (v()) {
                                    b.hideMoreMenuLayer();
                                }
                            }
                        });
                        c.setTurboSprites(this.turboOnButtonLocaleIcon, this.turboOffButtonLocaleIcon);
                        c.getTurboSpinCallback = function () {
                            return this.turboSpinOn;
                        }.bind(this);
                        c.setButtonOnColor("setting", "color_button_transition_a");
                        c.setButtonOffColor("setting", "white_button_transition_a");
                        c.sprite.spriteFrame = c.turboSpinOn;
                        c.spriteEffect.spriteFrame = c.turboSpinEffectOn;
                        c.changeButtonColor(true);
                        c.changeSpriteEffectColor();
                        var d = this;
                        this.Dd = function () {
                            this.stopTurboLighting();
                            if (d.turboSpinOn) {
                                this.playTurboLighting();
                            } else {
                                this.sprite.spriteFrame = this.turboSpinOff;
                                this.spriteEffect.spriteFrame = c.turboSpinEffectOff;
                            }
                            this.changeButtonColor(true);
                            b.showSettingTurboToast(d.turboSpinOn ? shell.I18n.t("SettingMenu.TurboSpinEnable") : shell.I18n.t("SettingMenu.TurboSpinDisable"), d.turboSpinOn, 2);
                            d.sendEventToGoogleAnalytic(d.turboSpinOn);
                        }.bind(c);
                        this.Wd = h.observeCallback(this, "turboSpinOn")(this.Dd);
                        b.addMenuItem(c.node);
                        this.td.on("Game.OnTurboSpin", function () {
                            a.setTurboSpinButtonState(true);
                        });
                        this.td.on("Game.OffTurboSpin", function () {
                            a.setTurboSpinButtonState(false);
                        });
                    };
                    b.prototype.setTurboSpinButtonState = function (a) {
                        this.turboSpinOn = a;
                        this.td.emit("Game.TurboSpinStateChanged", this.turboSpinOn);
                    };
                    b.prototype.sendEventToGoogleAnalytic = function (a) {
                        var b = {
                            name: "Turbo Spin",
                            index: a
                        };
                        if (cc.sys.isBrowser) {
                            shell.ga.sendEvent(shell.ga.CATEGORY_GENERAL, shell.ga.EVENT_CHANGE_SETTING, b);
                        }
                    };
                    b.prototype.setupSettingMenuButtons = function () {
                        var a = this;
                        var b = this.settingMenuController;
                        var c = this.Ad;
                        var d = this;
                        this.xd = function () {
                            if (v()) {
                                b.muteIcon.active = false;
                            } else if (b.isIdle()) {
                                b.muteIcon.active = !a.soundOn;
                            }
                        };
                        this.xd();
                        this.Fd = h.observeCallback(this, "soundOn")(this.xd);
                        var g;
                        function i(f) {
                            var g = c.setupSettingMenuButtonInList(e.SOUND, function () {
                                a.Vd();
                                if (v()) {
                                    b.hideMoreMenuLayer();
                                }
                            });
                            g.setTitle(shell.I18n.t("SettingMenu.SettingSoundWord"));
                            var i = b.addMenuItem(g.node);
                            a.zd = function () {
                                this.sprite.spriteFrame = d.soundOn ? this.soundOn : this.soundOff;
                                if (this.largeSprite) {
                                    this.largeSprite.spriteFrame = d.soundOn ? this.largeSoundOnIcon : this.largeSoundOffIcon;
                                }
                            }.bind(g);
                            a.qd = g.node;
                            a.Jd = i;
                            if (!a.ud) {
                                a.soundEnable = a.ud;
                                a.setLockAccess(e.SOUND, true);
                            }
                            a.zd();
                            a.Kd = h.observeCallback(a, "soundOn")(a.zd);
                            if (f) {
                                g.customSetup();
                            }
                        }
                        if (this.Qd) {
                            this.jd();
                            if (v()) {
                                (function () {
                                    var f = c.setupIndependentSettingMenuButton(e.SOUND, function () {
                                        a.Vd();
                                        b.hideMoreMenuLayer();
                                    });
                                    if (!f) {
                                        throw Error("SettingMenuHelper :: setupSettingMenuButtons : fail to setupIndependentSettingMenuButton when creating landscape sound button");
                                    }
                                    f.setTitle(shell.I18n.t("SettingMenu.SettingSoundWord"));
                                    b.landscapeSoundButtonHolder.addChild(f.node);
                                    a.zd = function () {
                                        this.sprite.spriteFrame = d.soundOn ? this.soundOn : this.soundOff;
                                        if (this.largeSprite) {
                                            this.largeSprite.spriteFrame = d.soundOn ? this.largeSoundOnIcon : this.largeSoundOffIcon;
                                        }
                                    }.bind(f);
                                    a.qd = f.node;
                                    a.Jd = b.landscapeSoundButtonHolder;
                                    if (!a.ud) {
                                        a.soundEnable = a.ud;
                                        a.setLockAccess(e.SOUND, true);
                                    }
                                    a.zd();
                                    a.Kd = h.observeCallback(a, "soundOn")(a.zd);
                                    f.customSetup();
                                })();
                            }
                        } else {
                            i(true);
                        }
                        (g = this.Yd = c.setupSettingMenuButtonInList(e.MINUS_BET, this.decreaseBet.bind(this))).setShowSettingToastCallback(b.showSettingToast.bind(b));
                        g.setHideSettingToastCallback(b.hideSettingToast.bind(b));
                        b.addMenuItem(g.node);
                        (g = this.Xd = c.setupSettingMenuButtonInList(e.PLUS_BET, this.increaseBet.bind(this))).setShowSettingToastCallback(b.showSettingToast.bind(b));
                        g.setHideSettingToastCallback(b.hideSettingToast.bind(b));
                        b.addMenuItem(g.node);
                        if (this.Zd) {
                            (g = this.$d = c.setupSettingMenuButtonInList(e.SPIN_OPTIONS, this.tv.bind(this))).setAutoSpinSprite(this.autoSpinButtonLocaleIcon);
                            b.addMenuItem(g.node);
                        }
                        g = c.setupSettingMenuButtonInList(e.MORE_MENU, this.showMoreMenuLayer.bind(this), this.Zd ? "white_button_transition_a" : "color_button_transition_a");
                        b.addMenuItem(g.node);
                        if (!this.Zd) {
                            g.customSetup();
                            b.addEmptyItem();
                            this.fd += 1;
                        }
                        if (this.ld === f.NORMAL_BACK_FUNC) {
                            g = c.setupSettingMenuButtonInList(e.QUIT, this.onClickQuitButton.bind(this));
                            b.addMenuItem(g.node);
                        }
                        if (this.Qd && !v()) {
                            i(false);
                        }
                        g = c.setupSettingMenuButtonInList(e.PAYTABLE, this.iv.bind(this));
                        b.addMenuItem(g.node);
                        g = c.setupSettingMenuButtonInList(e.RULE, this.sv.bind(this));
                        b.addMenuItem(g.node);
                        (g = this.kd = c.setupSettingMenuButtonInList(e.HISTORY, this.ev.bind(this))).setIconSprite(this.historyButtonLocaleIcon);
                        b.addMenuItem(g.node);
                        g = c.setupSettingMenuButtonInList(e.HIDE_MORE, this.nv.bind(this));
                        b.addMenuItem(g.node);
                        if (g = this.ov = this.Ad.setupIndependentSettingMenuButton(e.MAX_BET, this.maxBet.bind(this))) {
                            this.settingInfoFooter.maxBetButtonHolder.addChild(g.node);
                            g.setShowSettingToastCallback(b.showSettingToast.bind(b));
                            g.setHideSettingToastCallback(b.hideSettingToast.bind(b));
                        }
                        this.cv();
                        b.updateLayout(y());
                    };
                    b.prototype.cv = function () {
                        for (var a = this.settingMenuController.buttonsHolder(), b = this.Ad.totalButtonsOccupied(), c = a.length - b - this.fd, d = a.length - 1; d >= 0 && !(c <= 0); d--) {
                            a[d].active = false;
                            c--;
                        }
                    };
                    b.prototype.setFeatureBuyToastNodePosition = function (a, b, c) {
                        this.settingMenuController.setFeatureBuyToastNodePosition(a, b, c);
                    };
                    Object.defineProperty(b.prototype, "menuChangedCallBack", {
                        set: function (a) {
                            this.hv = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "backButtonType", {
                        get: function () {
                            return this.ld;
                        },
                        set: function (a) {
                            this.ld = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.setOnClickReturnButtonCallback = function (a) {
                        this.rv = a;
                    };
                    b.prototype.setIsControllerPresenting = function (a) {
                        this.settingMenuController.setIsControllerPresenting(a);
                    };
                    b.prototype.tv = function () {
                        this.playMenuIconPressSound();
                        if (!this.settingMenuController.isPanelTouchMoving()) {
                            this.openAutoSpinMenu();
                        }
                    };
                    b.prototype.av = function () {
                        this.playMenuIconPressSound();
                        if (!this.settingMenuController.isPanelTouchMoving()) {
                            this.openBetMenu();
                        }
                    };
                    b.prototype.Vd = function () {
                        this.playMenuIconPressSound();
                        this.toggleSound();
                    };
                    b.prototype.ev = function (a) {
                        if (a === undefined) {
                            a = false;
                        }
                        this.playMenuIconPressSound();
                        if (!this.settingMenuController.isPanelTouchMoving()) {
                            this.openHistoryMenu(a);
                        }
                    };
                    b.prototype.iv = function () {
                        this.playMenuIconPressSound();
                        if (!this.settingMenuController.isPanelTouchMoving()) {
                            this.openPayoutMenu();
                        }
                    };
                    b.prototype.sv = function () {
                        this.playMenuIconPressSound();
                        if (!this.settingMenuController.isPanelTouchMoving()) {
                            this.openRulesMenu();
                        }
                    };
                    b.prototype.uv = function () {
                        this.playMenuIconPressSound();
                        this.openWalletMenu();
                    };
                    b.prototype.nv = function () {
                        this.playMenuIconPressSound();
                        this.hideMoreMenuLayer();
                    };
                    b.prototype.openAutoSpinMenu = function () {
                        var a = this.settingMenuController;
                        if (!(a.isControllerPresenting() || a.isSwitchingMenuLayer())) {
                            this.lv();
                            if (v()) {
                                a.hideMoreMenuLayer();
                            }
                            a.setIsControllerPresenting(true);
                            this.td.emit("SlotMenu.ShowSpinOptions", undefined);
                        }
                    };
                    b.prototype.openBetMenu = function () {
                        var a = this.settingMenuController;
                        if (!(a.isControllerPresenting() || a.isSwitchingMenuLayer())) {
                            this.lv();
                            this.hideMoreMenuLayer();
                            a.setIsControllerPresenting(true);
                            this.fv(true);
                            this.td.emit("SlotMenu.ShowBetOptions", undefined);
                        }
                    };
                    b.prototype.toggleSound = function () {
                        var a = this.settingMenuController;
                        if (!a.isControllerPresenting() && !a.isSwitchingMenuLayer()) {
                            this.soundEnable = !this.soundEnable;
                            var b = this.soundEnable === true ? "OnGameSound" : "OffGameSound";
                            this.dv(b);
                            this.playMenuIconPressSound();
                        }
                    };
                    b.prototype.openHistoryMenu = function (a) {
                        if (a === undefined) {
                            a = false;
                        }
                        var b = this.settingMenuController;
                        if (!(b.isControllerPresenting() || b.isSwitchingMenuLayer())) {
                            if (a) {
                                this.hideMoreMenuLayer();
                            }
                            b.setIsControllerPresenting(true);
                            this.td.emit("History.ShowGame");
                            this.lv();
                        }
                    };
                    b.prototype.openPayoutMenu = function () {
                        var a = this.settingMenuController;
                        if (!(a.isControllerPresenting() || a.isSwitchingMenuLayer())) {
                            if (v()) {
                                a.hideMoreMenuLayer();
                            }
                            a.setIsControllerPresenting(true);
                            this.td.emit("Paytable.Show");
                        }
                    };
                    b.prototype.openRulesMenu = function () {
                        var a = this.settingMenuController;
                        if (!(a.isControllerPresenting() || a.isSwitchingMenuLayer())) {
                            if (v()) {
                                a.hideMoreMenuLayer();
                            }
                            a.setIsControllerPresenting(true);
                            this.td.emit("GameRules.Show");
                        }
                    };
                    b.prototype.openWalletMenu = function () {
                        var a = this.settingMenuController;
                        if (!(a.isControllerPresenting() || a.isSwitchingMenuLayer())) {
                            if (o) {
                                this.activateWalletNotify(false);
                                this.vv(o.WalletEventEnum.EN_WALLET_LIST_ANIM);
                            }
                        }
                    };
                    b.prototype.showMoreMenuLayer = function () {
                        var a = this.settingMenuController;
                        this.playMenuIconPressSound();
                        if (shell.environment.getOrientationMode() === "port") {
                            a.muteIcon.active = false;
                        }
                        if (!a.isControllerPresenting() && !a.isSwitchingMenuLayer()) {
                            this.lv();
                            a.showMoreMenuLayer(this.Md);
                            var b = this.hv;
                            if (b) {
                                b(true, true);
                            }
                        }
                    };
                    b.prototype.hideMoreMenuLayer = function () {
                        var a = this.settingMenuController;
                        if (v()) {
                            a.muteIcon.active = false;
                        } else if (this.soundOn) {
                            a.muteIcon.active = false;
                        } else {
                            a.muteIcon.active = true;
                        }
                        if (!a.isControllerPresenting() && !a.isSwitchingMenuLayer()) {
                            this.settingInfoFooter.changeHolder(a.getSettingInfoFooterFrontHolder());
                            a.hideMoreMenuLayer();
                            var b = this.hv;
                            if (b) {
                                b(false, true);
                            }
                        }
                    };
                    b.prototype.onClickQuitButton = function () {
                        var a = this;
                        var b = this.settingMenuController;
                        if (!b.isSwitchingMenuLayer() && !b.isControllerPresenting()) {
                            var c = {
                                title_message: shell.I18n.t("SettingMenuHelper.QuitGameTitle"),
                                content_message: shell.I18n.t("SettingMenuHelper.QuitGameMessage"),
                                actions: [{
                                    title: shell.I18n.t("SettingMenuHelper.Cancel"),
                                    handler: function () {
                                        b.setIsControllerPresenting(false);
                                    }
                                }, {
                                    title: shell.I18n.t("SettingMenuHelper.Quit"),
                                    handler: function () {
                                        b.setIsControllerPresenting(false);
                                        if (a.rv) {
                                            a.rv();
                                        }
                                    },
                                    auto_dismiss: false
                                }]
                            };
                            b.setIsControllerPresenting(true);
                            j.showDialog(c);
                            this.playMenuIconPressSound();
                        }
                    };
                    b.prototype.isBalanceHitTargetInAutoSpinMode = function (a, b) {
                        var c = false;
                        var d = this.singleWinAmount;
                        var e = this.balanceAmountMoreThan;
                        var f = this.balanceAmountLessThan;
                        var g = this.gd;
                        if (d && a > d) {
                            c = true;
                        }
                        if (e && b >= g + e) {
                            c = true;
                        }
                        if (f && b <= g - f) {
                            c = true;
                        }
                        return c;
                    };
                    b.prototype.stopSpinOptionButtonAnim = function () {
                        if (this.$d) {
                            this.$d.stopAutoSpinAnim();
                        }
                    };
                    b.prototype.playSpinOptionButtonAnim = function () {
                        if (this.$d) {
                            this.$d.playAutoSpinAnim();
                        }
                    };
                    Object.defineProperty(b.prototype, "autoSpinCallback", {
                        set: function (a) {
                            var b = this;
                            this._v = function (c) {
                                var d = c.payload;
                                b.autoSpinCount = d.autoSpinCount;
                                b.singleWinAmount = d.singleWinAmount;
                                b.balanceAmountMoreThan = d.balanceAmountMoreThan;
                                b.balanceAmountLessThan = d.balanceAmountLessThan;
                                b.gd = d.autoSpinStartBalance;
                                if (b.autoSpinCount > 0) {
                                    b.playSpinOptionButtonAnim();
                                }
                                if (a) {
                                    a();
                                }
                            };
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "turboSpinCallback", {
                        set: function (a) {
                            if (this.mv) {
                                if (this.pv) {
                                    this.pv();
                                }
                                this.mv = undefined;
                            }
                            this.mv = function () {
                                if (a) {
                                    a();
                                }
                            };
                            this.pv = h.observeCallback(this, "turboSpinOn")(this.mv);
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "additionalBetCalculationCallback", {
                        set: function (a) {
                            this.td.emit("SlotMenu.UpdateAdditionalBetCalculation", a);
                            this.bv = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "audioConfigure", {
                        get: function () {
                            return this.ud;
                        },
                        set: function (a) {
                            this.ud = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "showChangeBetReminder", {
                        set: function (a) {
                            this.Cd = a;
                            this.td.emit("SlotMenu.SetShowChangeBetReminder", a);
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "showForfeitProgressReminder", {
                        set: function (a) {
                            this.yd = a;
                            this.td.emit("SlotMenu.SetShowForfeitProgressReminder", a);
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "manualUpdateBetFactorCallBack", {
                        set: function (a) {
                            var b = this;
                            this.Sv = function (c, d) {
                                b.checkSelectedValue(h.toDecimalWithExp(c * d * b.betLineValue, 2));
                                a(c, d);
                            };
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "finishBetPickCallback", {
                        set: function (a) {
                            this.gv = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "cancelBetPanelCallback", {
                        set: function (a) {
                            this.Cv = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.updateBetLabelCallback = function (a) {
                        this.yv = a;
                    };
                    b.prototype.updateBetValues = function (a) {
                        if (a === undefined) {
                            a = 0;
                        }
                        if (!this.bv) {
                            this.bv = function (a, b, c) {
                                return a * b * c;
                            };
                            this.td.emit("SlotMenu.UpdateAdditionalBetCalculation", this.bv);
                        }
                        this.Mv = h.toFixed(this.betLineValue * this.betLevelValue * this.betSizeValue, 2);
                        var b = this.bv(this.betLineValue, this.betLevelValue, this.betSizeValue);
                        var c = h.formatCurrency(b);
                        if (this.yv) {
                            this.yv(c, a);
                        }
                        this.Av({
                            totalBet: h.toDecimalWithExp(b, 2)
                        });
                    };
                    b.prototype.Iv = function () {
                        var a = this.betSizeList;
                        var b = this.betSizeValue;
                        return !(!a || !cc.js.isNumber(b)) && a.indexOf(b) !== -1;
                    };
                    b.prototype.wv = function () {
                        var a = this.betLevelList;
                        var b = this.betLevelValue;
                        return !(!a || !cc.js.isNumber(b)) && a.indexOf(b) !== -1;
                    };
                    b.prototype.Ov = function () {
                        var a = h.toDecimalWithExp(this.betLineValue * this.betLevelValue * this.betSizeValue, 2);
                        return this.Hv && a < this.Hv && (!this.Bv || a > this.Bv) && a.toFixed(2) !== this.Gv;
                    };
                    b.prototype.reevaluateBet = function () {
                        return !(this.Iv() && this.wv() && !this.Ov() || (this.Nv(), this.checkSelectedValue(h.toDecimalWithExp(this.betSizeValue * this.betLevelValue * this.betLineValue, 2)), this.Tv && this.Tv(this.betSizeValue, this.betLevelValue), 0));
                    };
                    b.prototype.showInvalidBetDialog = function () {
                        var a = this;
                        var b = {
                            title_message: undefined,
                            content_message: shell.I18n.t("SettingMenuHelper.ReevaluateBet"),
                            actions: [{
                                title: shell.I18n.t("SettingMenuHelper.Select"),
                                handler: function () {
                                    a.openBetMenu();
                                }
                            }]
                        };
                        j.showDialog(b);
                    };
                    Object.defineProperty(b.prototype, "betModifierUpdateCallback", {
                        get: function () {
                            return this.Pv;
                        },
                        set: function (a) {
                            this.Pv = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "reevaluateBetCallback", {
                        set: function (a) {
                            this.Tv = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.lv = function () {
                        var a = this.settingMenuController;
                        if (a.isSettingBetReminderBoardShowed()) {
                            this.Mv = this.Rv;
                            this.betSizeValue = this.Lv;
                            this.betLevelValue = this.Ev;
                            this.kv = this.Uv;
                            this.updateBetValues();
                            this.checkSelectedValue(this.Rv);
                            a.hideBetReminderBoard();
                            if (this.jv) {
                                this.jv();
                            }
                        }
                    };
                    b.prototype.setBetReminderCancelAndConfirmCallback = function (a, b) {
                        var c = this;
                        var d = this.settingMenuController;
                        this.jv = a;
                        d.setBetReminderCancelAndConfirmCallback(this.lv.bind(this), function () {
                            if (c.Lv !== c.betSizeValue || c.Ev !== c.betLevelValue) {
                                d.hideBetReminderBoard();
                                if (b) {
                                    b(c.betSizeValue, c.betLevelValue);
                                }
                                c.td.emit("SlotMenu.ChangeBet", c.Mv);
                            } else {
                                c.lv();
                            }
                        });
                    };
                    b.prototype.setBetReminderTriggerCallback = function (a) {
                        this.Dv = a;
                    };
                    b.prototype.preCalculateCombination = function () {
                        var a = this.betSizeList || [];
                        var b = this.betLevelList || [];
                        var c = this.betLineValue || 0;
                        if (a.length !== 0 && b.length !== 0 && c !== 0) {
                            var d;
                            var e = this.Hv;
                            var f = this.Bv;
                            var g = [];
                            this.Gv = undefined;
                            if (e) {
                                if (f) {
                                    d = [];
                                }
                                m = 0;
                                for (var i = a.length; m < i; m++) {
                                    for (var j = 0, k = b.length; j < k; j++) {
                                        var l = h.toDecimalWithExp(a[m] * b[j] * c, 2);
                                        if (l >= e) {
                                            if (this.Gv === undefined) {
                                                this.Gv = h.toFixed(l, 2);
                                            }
                                            g[m] = b.slice(j);
                                            break;
                                        }
                                        if (f && (f < e && l <= f || f >= e && l < e)) {
                                            if (!d[m]) {
                                                d[m] = [];
                                            }
                                            d[m].push(b[j]);
                                        }
                                        if (j === k - 1) {
                                            g[m] = [];
                                        }
                                    }
                                }
                                if (this.Gv === undefined) {
                                    this.Gv = h.toFixed(a[0] * b[0] * c, 2);
                                    this.Wv = Object.create(null);
                                    this.Wv[this.Gv] = {
                                        betSize: a[0],
                                        betLevel: b[0]
                                    };
                                    return;
                                }
                            } else {
                                for (var m = 0; m < a.length; m++) {
                                    g[m] = b;
                                }
                                this.Gv = h.toFixed(a[0] * b[0] * c, 2);
                            }
                            function r(a, b) {
                                if (a < 2) {
                                    return b.slice();
                                }
                                var c = b.length;
                                if (c < (a > 2 ? 4 : 6)) {
                                    return b.slice();
                                }
                                var d = b[b.length - 1];
                                var e = [d];
                                if (a === 2) {
                                    e.unshift(d - (Math.round(c / 5) || 1));
                                }
                                e.unshift(d - (Math.floor(c / 2) || 1));
                                if (a === 2) {
                                    e.unshift(e[0] - (Math.floor(c / 5) || 1));
                                }
                                var f = b[0];
                                e.unshift(f + (Math.floor(c / 10) || 1));
                                e.unshift(f);
                                return e;
                            }
                            var n = Object.create(null);
                            m = 0;
                            i = a.length;
                            for (; m < i; m++) {
                                var o = r(m, g[m]);
                                if (d && d[m]) {
                                    o = o.concat(d[m]);
                                }
                                if (o.length !== 0) {
                                    j = 0;
                                    k = b.length;
                                    j = 0;
                                    k = b.length;
                                    for (; j < k; j++) {
                                        if (o.includes(b[j])) {
                                            var p = h.toFixed(a[m] * b[j] * c, 2);
                                            var q = {
                                                betSize: a[m],
                                                betLevel: b[j]
                                            };
                                            if (!n[p]) {
                                                n[p] = q;
                                            }
                                        }
                                    }
                                }
                            }
                            this.Wv = n;
                        }
                    };
                    b.prototype.Nv = function () {
                        var a = this.Wv[this.Gv];
                        this.betSizeValue = a.betSize;
                        this.betLevelValue = a.betLevel;
                    };
                    b.prototype.checkSelectedValue = function (a) {
                        var b;
                        var c;
                        var d = +a;
                        if (this.Hv && d < this.Hv && (!this.Bv || d > this.Bv)) {
                            d = this.Hv;
                        }
                        a = h.toFixed(d, 2);
                        if (!this.Wv) {
                            throw Error("SettingMenuHelper :: checkSelectedValue : bet combination did not generate due to size or level empty");
                        }
                        var e = Object.keys(this.Wv).sort(function (a, b) {
                            var c = parseFloat(a);
                            var d = parseFloat(b);
                            if (c < d) {
                                return -1;
                            } else if (c > d) {
                                return 1;
                            } else {
                                return 0;
                            }
                        });
                        var f = e.indexOf(a);
                        if (f === -1) {
                            this.Mv = a;
                            this.kv = undefined;
                            this.Yd.updateBetModifierColor(1);
                            this.Xd.updateBetModifierColor(1, e.length - 1);
                            if (!((b = this.ov) === null || b === undefined)) {
                                b.updateBetModifierColor(1, e.length - 1);
                            }
                        } else {
                            this.kv = f;
                            this.Yd.updateBetModifierColor(f);
                            this.Xd.updateBetModifierColor(f, e.length - 1);
                            if (!((c = this.ov) === null || c === undefined)) {
                                c.updateBetModifierColor(f, e.length - 1);
                            }
                        }
                    };
                    b.prototype.xv = function (a) {
                        var b;
                        var c = this;
                        var d = this.settingMenuController;
                        if (this.Cd || this.yd) {
                            if (!d.isSettingBetReminderBoardShowed()) {
                                this.Rv = this.Mv;
                                this.Lv = this.betSizeValue;
                                this.Ev = this.betLevelValue;
                                this.Uv = this.kv;
                                if (a.selectedBet !== this.Uv) {
                                    if (!((b = this.td) === null || b === undefined)) {
                                        b.emit("SlotMenu.GetShowChangeBetReminder", undefined, function (a) {
                                            var b;
                                            var e = "";
                                            if (a.response) {
                                                e = shell.I18n.t("BetOptions.BetChangeProgressRemind");
                                                d.setBetChangeReminderLabel(e);
                                            } else if (!((b = c.td) === null || b === undefined)) {
                                                b.emit("SlotMenu.GetShowForfeitProgressReminder", undefined, function (a) {
                                                    if (a.response) {
                                                        e = shell.I18n.t("BetOptions.BetChangeForfeitProgressRemind");
                                                        d.setBetChangeReminderLabel(e);
                                                    }
                                                });
                                            }
                                            d.showBetReminderBoard(h.formatCurrency(parseFloat(c.Rv)));
                                        });
                                    }
                                    if (this.Dv) {
                                        this.Dv();
                                    }
                                }
                            }
                        } else {
                            this.Fv(parseFloat(a.selectedBetAmount));
                        }
                    };
                    b.prototype.Vv = function (a, b) {
                        var c = RegExp("<" + a + " style=['\"]color:\\s*([^'\"]+)['\"]>", "gi");
                        return b.replace(c, "<color=$1>").replace("</" + a + ">", "</color>");
                    };
                    b.prototype.zv = function (a) {
                        if (this.Hv && this.Bv) {
                            if (a < this.Hv && a <= this.Bv) {
                                var b = this.Vv("span", shell.I18n.t("FeatureBuy.BetForFeatureBuyOnly"));
                                var c = this.Vv("span", shell.I18n.t("FeatureBuy.BetSuggestion", {
                                    amount: h.formatCurrency(this.Hv)
                                }));
                                this.settingMenuController.showFeatureBuyToast(b + "\n" + c, 2);
                            } else {
                                this.settingMenuController.hideFeatureBuyToast();
                            }
                        }
                    };
                    b.prototype.increaseBet = function () {
                        var a;
                        var b = this.settingMenuController;
                        if (!b.isSwitchingMenuLayer()) {
                            if (!this.Wv) {
                                throw Error("SettingMenuHelper :: increaseBet : bet combination did not generate");
                            }
                            var c = Object.keys(this.Wv).sort(function (a, b) {
                                var c = parseFloat(a);
                                var d = parseFloat(b);
                                if (c < d) {
                                    return -1;
                                } else if (c > d) {
                                    return 1;
                                } else {
                                    return 0;
                                }
                            });
                            var d = this.Xd.increaseBet(c, this.kv, this.Mv);
                            this.xv(d);
                            this.zv(+d.selectedBetAmount);
                            this.Yd.updateBetModifierColor(d.selectedBet);
                            this.Xd.updateBetModifierColor(d.selectedBet, c.length - 1);
                            if (!((a = this.ov) === null || a === undefined)) {
                                a.updateBetModifierColor(d.selectedBet, c.length - 1);
                            }
                            var e = this.kv = d.selectedBet;
                            this.Mv = d.selectedBetAmount;
                            this.betSizeValue = this.Wv[c[e]].betSize;
                            this.betLevelValue = this.Wv[c[e]].betLevel;
                            this.updateBetValues(q(e, this.Wv));
                            if (!(this.Cd || this.yd)) {
                                if (this.Pv) {
                                    this.Pv(this.betSizeValue, this.betLevelValue);
                                }
                            }
                            if (v()) {
                                b.hideMoreMenuLayer();
                            }
                        }
                    };
                    b.prototype.decreaseBet = function () {
                        var a;
                        var b = this.settingMenuController;
                        if (!b.isSwitchingMenuLayer()) {
                            if (!this.Wv) {
                                throw Error("SettingMenuHelper :: decreaseBet : bet combination did not generate");
                            }
                            var c = Object.keys(this.Wv).sort(function (a, b) {
                                var c = parseFloat(a);
                                var d = parseFloat(b);
                                if (c < d) {
                                    return -1;
                                } else if (c > d) {
                                    return 1;
                                } else {
                                    return 0;
                                }
                            });
                            var d = this.Yd.decreaseBet(c, this.kv, this.Mv);
                            this.xv(d);
                            this.zv(+d.selectedBetAmount);
                            this.Yd.updateBetModifierColor(d.selectedBet);
                            this.Xd.updateBetModifierColor(d.selectedBet, c.length - 1);
                            if (!((a = this.ov) === null || a === undefined)) {
                                a.updateBetModifierColor(d.selectedBet, c.length - 1);
                            }
                            var e = this.kv = d.selectedBet;
                            this.Mv = d.selectedBetAmount;
                            this.betSizeValue = this.Wv[c[e]].betSize;
                            this.betLevelValue = this.Wv[c[e]].betLevel;
                            this.updateBetValues(q(e, this.Wv));
                            if (!(this.Cd || this.yd)) {
                                if (this.Pv) {
                                    this.Pv(this.betSizeValue, this.betLevelValue);
                                }
                            }
                            if (v()) {
                                b.hideMoreMenuLayer();
                            }
                        }
                    };
                    b.prototype.maxBet = function () {
                        var a = this.settingMenuController;
                        if (!a.isSwitchingMenuLayer()) {
                            if (!this.Wv) {
                                throw Error("SettingMenuHelper :: maxBet : bet combination did not generate");
                            }
                            if (!this.ov) {
                                throw Error("SettingMenuHelper :: maxBet : max bet button cannot be found");
                            }
                            var b = Object.keys(this.Wv).sort(function (a, b) {
                                var c = parseFloat(a);
                                var d = parseFloat(b);
                                if (c < d) {
                                    return -1;
                                } else if (c > d) {
                                    return 1;
                                } else {
                                    return 0;
                                }
                            });
                            var c = this.ov.maxBet(b);
                            this.xv(c);
                            this.Yd.updateBetModifierColor(c.selectedBet);
                            this.Xd.updateBetModifierColor(c.selectedBet, b.length - 1);
                            this.ov.updateBetModifierColor(c.selectedBet, b.length - 1);
                            var d = this.kv = c.selectedBet;
                            this.Mv = c.selectedBetAmount;
                            this.betSizeValue = this.Wv[b[d]].betSize;
                            this.betLevelValue = this.Wv[b[d]].betLevel;
                            this.updateBetValues(q(d, this.Wv));
                            if (!(this.Cd || this.yd)) {
                                if (this.Pv) {
                                    this.Pv(this.betSizeValue, this.betLevelValue);
                                }
                            }
                            if (v()) {
                                a.hideMoreMenuLayer();
                            }
                        }
                    };
                    Object.defineProperty(b.prototype, "changeSoundVolume", {
                        set: function (a) {
                            var b = this;
                            if (this.qv) {
                                if (this.Jv) {
                                    this.Jv();
                                }
                                this.qv = undefined;
                            }
                            this.qv = function () {
                                b.Kv(b.soundOn);
                                if (a) {
                                    a(b.soundOn);
                                }
                            };
                            this.Jv = h.observeCallback(this, "soundOn")(this.qv);
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.setBalance = function (a, b) {
                        var c = this;
                        if (b === undefined) {
                            b = true;
                        }
                        var d = this.Qv(a);
                        this.Yv(function (e) {
                            if (d) {
                                c.playWalletCountingAboveSfx();
                            }
                            var f = h.toDecimalWithExp(e && e.balance || a, 2);
                            c.settingInfoFooter.updateBalance(undefined, f, b);
                            c.Av({
                                balance: f
                            });
                        });
                    };
                    b.prototype.setWinAmount = function (a, b, c) {
                        if (b === undefined) {
                            b = true;
                        }
                        if (c === undefined) {
                            c = true;
                        }
                        this.settingInfoFooter.updateWinAmount(a, b, c);
                        this.td.emit("SlotMenu.UpdateWinAmount", a);
                        this.Av({
                            totalWin: h.toDecimalWithExp(a, 2)
                        });
                    };
                    b.prototype.setAllButtonsInteractable = function (a, b) {
                        if (b === undefined) {
                            b = true;
                        }
                        this.Ad.setAllButtonsInteractable(a);
                        if (a) {
                            this.checkSelectedValue(h.toDecimalWithExp(this.betSizeValue * this.betLevelValue * this.betLineValue, 2));
                        }
                    };
                    b.prototype.setLockAccess = function (a, b) {
                        this.Ad.setLockAccess(a, b);
                    };
                    b.prototype.isButtonLocked = function (a) {
                        return this.Ad.isButtonLocked(a);
                    };
                    b.prototype.setButtonInteractableFlag = function (a, b) {
                        if (b === undefined) {
                            b = false;
                        }
                        this.Ad.setButtonInteractableFlag(a, b);
                    };
                    b.prototype.setButtonInteractable = function (a) {
                        this.Ad.setButtonInteractable(a);
                    };
                    b.prototype.setLockAccessAutoSpinPanel = function (a) {
                        this.setLockAccess(e.SPIN_OPTIONS, a);
                    };
                    b.prototype.setLockAccessBetPanel = function (a) {
                        this.setLockAccess(e.BET_OPTIONS, a);
                    };
                    b.prototype.setLockMoreMenuButton = function (a) {
                        this.setLockAccess(e.MORE_MENU, a);
                    };
                    b.prototype.setHidden = function (a) {
                        this.ad = a;
                        this.settingMenuController.setHidden(a);
                    };
                    b.prototype.isIdle = function () {
                        return this.settingMenuController.isIdle();
                    };
                    Object.defineProperty(b.prototype, "isShowBlackTintBg", {
                        set: function (a) {
                            this.Md = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.activateWalletNotify = function (a) {
                        this.settingInfoFooter.activateWalletNotify(a);
                    };
                    b.prototype.addSettingInfoFooter = function (a) {
                        this.Ud = a;
                        this.Ad.setupOtherButtonInList(e.WALLET, a.interactableWalletButton.bind(a));
                        a.updateLayout(y());
                        a.setWinIcon(this.settingInfoFooterLocaleWinIcon);
                        a.setOpenWalletMenuCallback(this.uv.bind(this));
                        a.showBackground(false);
                        a.changeHolder(this.settingMenuController.getSettingInfoFooterFrontHolder());
                        this.Ad.setupOtherButtonInList(e.BET_OPTIONS, a.interactableBetOptionsButton.bind(a));
                        a.setOpenBetOptionsMenuCallback(this.av.bind(this));
                        this.updateBetLabelCallback(a.updateBetAmount.bind(a));
                        this.Ad.setupOtherButtonInList(e.WIN, a.interactableWinButton.bind(a));
                        a.setOpenWinMenuCallback(this.ev.bind(this, true));
                        a.boot();
                    };
                    b.prototype.getSettingInfoFooter = function () {
                        return this.settingInfoFooter;
                    };
                    Object.defineProperty(b.prototype, "settingInfoFooter", {
                        get: function () {
                            if (!this.Ud) {
                                throw Error("SettingMenuHelper :: settingInfoFooter : Cannot find settingInfoFooter. Please setup setting info footer first! (addSettingInfoFooter)");
                            }
                            return this.Ud;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.showSettingInfoFooterBackground = function (a) {
                        this.settingInfoFooter.showBackground(a);
                    };
                    b.prototype.setFreeGameMode = function (a) {
                        var b;
                        var c;
                        this.isFreeGameMode = a;
                        if (a) {
                            this.setLockAccess(e.BET_OPTIONS, true);
                            this.Xd.buttonActivate(false);
                            this.Yd.buttonActivate(false);
                            if (!((b = this.ov) === null || b === undefined)) {
                                b.buttonActivate(false);
                            }
                        } else {
                            this.setLockAccess(e.BET_OPTIONS, false);
                            this.Xd.buttonActivate(true);
                            this.Yd.buttonActivate(true);
                            if (!((c = this.ov) === null || c === undefined)) {
                                c.buttonActivate(true);
                            }
                            this.checkSelectedValue(h.toDecimalWithExp(this.betSizeValue * this.betLevelValue * this.betLineValue, 2));
                        }
                    };
                    b.prototype.getCurrentBalance = function () {
                        return this.settingInfoFooter.currentBalance;
                    };
                    b.prototype.additionalBetCalculation = function () {
                        if (!this.bv) {
                            throw Error("SettingMenuHelper :: additionalBetCalculation : Please set calculation callback via additionalBetCalculationCallback setter first!");
                        }
                        return this.bv(this.betLineValue, this.betLevelValue, this.betSizeValue);
                    };
                    Object.defineProperty(b.prototype, "betLineValue", {
                        get: function () {
                            return this.vd;
                        },
                        set: function (a) {
                            this.td.emit("SlotMenu.SetBetLineValue", a);
                            this.vd = a;
                            this.preCalculateCombination();
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "betSizeList", {
                        get: function () {
                            return this._d;
                        },
                        set: function (a) {
                            this.td.emit("SlotMenu.SetBetSizeList", a);
                            this._d = a;
                            this.preCalculateCombination();
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "betSizeValue", {
                        get: function () {
                            return this.lt;
                        },
                        set: function (a) {
                            this.td.emit("SlotMenu.SetBetSizeValue", a);
                            this.lt = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "minimumBetAmount", {
                        get: function () {
                            return this.Hv;
                        },
                        set: function (a) {
                            this.td.emit("SlotMenu.SetMinimumBetAmount", a);
                            this.Hv = a;
                            this.preCalculateCombination();
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "featureBuyThreshold", {
                        get: function () {
                            return this.Bv;
                        },
                        set: function (a) {
                            this.td.emit("SlotMenu.SetFeatureBuyThreshold", a);
                            this.Bv = a;
                            this.preCalculateCombination();
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "betLevelList", {
                        get: function () {
                            return this.md;
                        },
                        set: function (a) {
                            this.td.emit("SlotMenu.SetBetLevelList", a);
                            this.md = a;
                            this.preCalculateCombination();
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "betLevelValue", {
                        get: function () {
                            return this.ut;
                        },
                        set: function (a) {
                            this.td.emit("SlotMenu.SetBetLevelValue", a);
                            this.ut = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "baseBet", {
                        get: function () {
                            return this.pd;
                        },
                        set: function (a) {
                            this.pd = a;
                            this.td.emit("SlotMenu.SetBaseBet", a);
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "soundEnable", {
                        get: function () {
                            return t.soundOn;
                        },
                        set: function (a) {
                            this.soundOn = a;
                            t.soundOn = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.playWalletCountingAboveSfx = function () {
                        var a = this.walletCountingAbove;
                        if (a) {
                            a.play();
                        }
                    };
                    b.prototype.playMenuIconPressSound = function () {
                        var a = this.menuIconPress;
                        if (a) {
                            a.play();
                        }
                    };
                    b.prototype.playListItemClickSound = function () {
                        var a = this.listItemClick;
                        if (a) {
                            a.play();
                        }
                    };
                    b.prototype.playSliderEffectSound = function () {
                        var a = this.sliderEffect;
                        if (a) {
                            a.play();
                        }
                    };
                    b.prototype.Gd = function (a) {
                        for (var b in this.bd) {
                            this[b] = new a({
                                preload: false,
                                src: h.getCocosMajor() >= 4 ? "/lib/setting_menu/" + this.bd[b] : cc.url.raw("/resources/lib/setting_menu/" + this.bd[b] + ".mp3")
                            });
                        }
                    };
                    b.prototype.Nd = function (a) {
                        var b = this;
                        if (this.Xv) {
                            var c = this.Xv;
                            this.Xv = undefined;
                            if (c) {
                                c();
                            }
                        }
                        this.Xv = h.sequenceCallback(function (c) {
                            b.Zv("menuIconPress", function (b) {
                                if (b) {
                                    a(b);
                                } else {
                                    c();
                                }
                            });
                        }, function (c) {
                            b.Zv("listItemClick", function (b) {
                                if (b) {
                                    a(b);
                                } else {
                                    c();
                                }
                            });
                        }, function (c) {
                            b.Zv("sliderEffect", function (b) {
                                if (b) {
                                    a(b);
                                } else {
                                    c();
                                }
                            });
                        }, function (c) {
                            b.Zv("walletCountingAbove", function (b) {
                                if (b) {
                                    a(b);
                                } else {
                                    c();
                                }
                            });
                        })(a);
                    };
                    b.prototype.Zv = function (a, b) {
                        var c = this;
                        if (this.Sd[a]) {
                            if (b) {
                                b();
                            }
                        } else {
                            var d = this[a];
                            function e() {
                                d.off("loaderror", f);
                                c.Sd[a] = true;
                                if (b) {
                                    b();
                                }
                            }
                            function f(a, c) {
                                d.off("load", e);
                                if (b) {
                                    b(c);
                                }
                            }
                            d.once("load", e);
                            d.once("loaderror", f);
                            d.load();
                        }
                    };
                    b.prototype.reset = function () {
                        var a = {
                            sliderEffect: false,
                            listItemClick: false,
                            menuIconPress: false
                        };
                        if (this.Wd) {
                            this.Wd();
                        }
                        if (this.pv) {
                            this.pv();
                        }
                        if (this.Kd) {
                            this.Kd();
                        }
                        if (this.Jv) {
                            this.Jv();
                        }
                        if (this.Fd) {
                            this.Fd();
                        }
                        this.yv = undefined;
                        this._v = undefined;
                        this.mv = undefined;
                        this.qv = undefined;
                        this.hv = undefined;
                        this.zd = undefined;
                        this.Dd = undefined;
                        this.Ad = new i.default();
                        this.Xv = undefined;
                        this.Sd = a;
                    };
                    b.prototype.vv = function (a) {
                        this.td.emit("Wallet.ShowWalletList", a);
                    };
                    b.prototype.Av = function (a) {
                        this.td.emit("Game.TransactionInfoChanged", a);
                    };
                    b.prototype.Kv = function (a) {
                        var b = a ? "On" : "Off";
                        this.td.emit("Game.AudioStateChanged", b);
                    };
                    b.prototype.wd = function () {
                        var a = this;
                        n.setGamePlayUIBlockEventCallback("settingmenu", function (b) {
                            a.settingMenuController.setMenuUIBlock(b);
                        });
                        if (o) {
                            this.td.on("Wallet.Hidden", function () {
                                a.settingMenuController.setIsControllerPresenting(false);
                            });
                            this.td.on("Wallet.Shown", function () {
                                a.lv();
                                a.hideMoreMenuLayer();
                                a.settingMenuController.setIsControllerPresenting(true);
                                a.activateWalletNotify(false);
                            });
                            this.td.on("SlotMenu.StartAutoSpin", function (b) {
                                if (a._v) {
                                    a._v(b);
                                }
                            }, this);
                        }
                        if (p) {
                            this.td.on("SlotMenu.HiddenBetOptions", function () {
                                a.settingMenuController.setIsControllerPresenting(false);
                            });
                            this.td.on("SlotMenu.HiddenSpinOptions", function () {
                                a.settingMenuController.setIsControllerPresenting(false);
                            });
                            this.td.on("Game.ShowOptions", this.openBetMenu, this);
                            this.td.on("Game.HideOptions", this.$v, this);
                            this.td.on("SlotMenu.ManualUpdateBetFactorCallback", function (b) {
                                var c = b.payload;
                                var d = c.betSize;
                                var e = c.betLevel;
                                if (a.Sv) {
                                    a.Sv(d, e);
                                }
                            }, this);
                            this.td.on("SlotMenu.CancelBetPanelCallback", function () {
                                if (a.Cv) {
                                    a.Cv();
                                }
                            }, this);
                            this.td.on("SlotMenu.FinishBetPickCallback", function (b) {
                                var c = b.payload;
                                var d = c.betSize;
                                var e = c.betLevel;
                                if (a.gv) {
                                    a.gv(d, e);
                                }
                            }, this);
                        }
                        if (s) {
                            this.td.on("Paytable.Hide", function () {
                                a.settingMenuController.setIsControllerPresenting(false);
                            });
                            this.td.on("GameRules.Hide", function () {
                                a.settingMenuController.setIsControllerPresenting(false);
                            });
                        }
                        if (r) {
                            this.td.on("History.Close", function () {
                                a.settingMenuController.setIsControllerPresenting(false);
                            });
                        }
                        this.td.on("Game.OnAudio", function () {
                            a.soundEnable = true;
                        });
                        this.td.on("Game.OffAudio", function () {
                            a.soundEnable = false;
                        });
                        this.td.on("Game.RequestAudioState", function (b) {
                            if (a.soundEnable === true) {
                                b.response = "On";
                            } else {
                                b.response = "Off";
                            }
                        });
                        this.td.on("SettingMenuHelper.GetSettingMenuType", function (a) {
                            a.response = g.NEW;
                        });
                        this.td.on("Game.GetSettingMenuType", function (a) {
                            a.response = g.NEW;
                        });
                        this.td.on("Game.ReplayInitiated", function () {
                            var b = a.settingMenuController;
                            if (v()) {
                                b.muteIcon.active = false;
                            } else if (a.soundOn) {
                                b.muteIcon.active = false;
                            } else {
                                b.muteIcon.active = true;
                            }
                            if (!b.isControllerPresenting() && !b.isSwitchingMenuLayer()) {
                                b.hideMoreMenuLayer();
                                var c = a.hv;
                                if (c) {
                                    c(a.ad, true);
                                }
                            }
                        });
                    };
                    b.prototype.Od = function () {
                        var a = this;
                        this.td.on("Game.TransactionStateComplete", function (b) {
                            if (a.t_) {
                                var c = b.payload.to;
                                if (c === "setup" && a.Id) {
                                    a.Id = false;
                                }
                                if (!(c !== "action" || a.Id)) {
                                    a.Id = true;
                                }
                            }
                        });
                        this.td.on("Game.TransactionInfoUpdated", function (b) {
                            if (a.t_) {
                                a.i_ = b.payload.tbb;
                            }
                        });
                    };
                    b.prototype.Hd = function () {
                        var a = this;
                        this.td.emit("Game.RequestSession", undefined, function (b) {
                            var c = b.response;
                            if (!c || !c.gameId) {
                                throw Error("SettingMenuHelper:: Game.RequestSession return invalid data");
                            }
                            a.Qd = c.operatorJurisdictionConfig.turboSpinEnable;
                            a.Zd = c.operatorJurisdictionConfig.autoPlayConfig;
                            a.t_ = c.operatorJurisdictionConfig.hideNonProfitEffect;
                            a.ld = c.operatorJurisdictionConfig.backButton;
                        });
                        this.td.off("Game.Initialized", this.Hd.bind(this));
                    };
                    b.prototype.fv = function (a) {
                        if (a) {
                            this.td.on("Game.HideOptions", this.$v, this);
                        } else {
                            this.td.off("Game.HideOptions", this.$v, this);
                        }
                    };
                    b.prototype.$v = function () {
                        this.fv(false);
                        this.td.emit("SlotMenu.HideBetOptions");
                    };
                    b.prototype.Yv = function (a) {
                        if (a) {
                            this.td.emit("Game.RequestTransactionInfo", undefined, function (b) {
                                a(b.response);
                            });
                        }
                    };
                    b.prototype.dv = function (a) {
                        var b = {
                            actionName: a
                        };
                        this.td.emit("Analytics.Event", b);
                    };
                    b.prototype.Fv = function (a) {
                        var b = this;
                        if (this.s_) {
                            this.s_();
                        } else {
                            this.e_ = parseFloat(this.Mv);
                        }
                        this.s_ = h.delayCallback(0.6)(function () {
                            if (a !== b.e_) {
                                b.td.emit("SlotMenu.ChangeBet", a);
                            }
                            b.s_ = undefined;
                            b.e_ = undefined;
                        });
                    };
                    b.prototype.changeSoundButtonHolder = function () {
                        if (v()) {
                            var a = this.settingInfoFooter;
                            if (a.landscapeSoundButtonHolder && this.qd) {
                                this.qd.parent = a.landscapeSoundButtonHolder;
                                if (!this.Qd) {
                                    this.qd.getComponent("GenericSettingButton").sprite.node.active = true;
                                    this.qd.getComponent("GenericSettingButton").largeSprite.node.active = false;
                                }
                            }
                        }
                    };
                    b.prototype.returnSoundButtonHolder = function () {
                        if (v() && this.Jd && this.qd) {
                            this.qd.parent = this.Jd;
                            if (!this.Qd) {
                                this.qd.getComponent("GenericSettingButton").largeSprite.node.active = true;
                                this.qd.getComponent("GenericSettingButton").sprite.node.active = false;
                            }
                        }
                    };
                    b.prototype.getSettingMenuButtonNode = function (a) {
                        return this.Ad.getButtonNode(a);
                    };
                    b.prototype.Qv = function (a) {
                        var b = this.settingInfoFooter;
                        if (this.Id && this.t_) {
                            var c = b.currentBalance;
                            var d = +h.toFixed(a - b.currentBalance, 2);
                            if (this.i_ && a > c && d > this.i_) {
                                return true;
                            }
                        }
                        return false;
                    };
                    return __decorate([k("SettingMenuHelper")], b);
                }(cc.Object))();
                c.settingMenuHelper = u;
                cc._RF.pop();
            }
            function q(a, b) {
                return (a + 1) / Object.keys(b).length;
            }
            function v() {
                return shell.environment.getOrientationMode() === "land";
            }
            function y() {
                return shell.isRTLLanguage && shell.isRTLLanguage();
            }
        }, {
            BVFramework: "BVFramework",
            GameEventHandler: "GameEventHandler",
            NotifyHelper: "NotifyHelper",
            Preference: "Preference",
            SettingMenuButtonHelper: "SettingMenuButtonHelper",
            Utils: "Utils"
        }],
        SettingSliderNum: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "89028I5vilAgJwUYY+0IKoT", "SettingSliderNum")) {
                c.__esModule = true;
                c.default = undefined;
                var d = a("Utils");
                var e = cc.Class({
                    extends: cc.Component,
                    properties: {
                        numberLabel: cc.Label,
                        numSprites: [cc.Sprite],
                        pixelSprites: [cc.SpriteFrame],
                        num: 10,
                        shortLine: cc.Node,
                        onColor: cc.Color,
                        offColor: cc.Color,
                        isMin: false
                    },
                    setColor: function (a, b) {
                        this.onColor = a;
                        this.offColor = b;
                    },
                    setDisplayValue: function (a, b) {
                        this.numberLabel.string = b;
                        this.numberLabel.node.active = a;
                    },
                    onLoad: function () {
                        if (this.isMin) {
                            this.shortLine.active = false;
                        }
                    },
                    setLight: function (a) {
                        if (a) {
                            (0, d.setNodeColorWithOpacity)(this.numberLabel.node, this.onColor);
                        } else {
                            (0, d.setNodeColorWithOpacity)(this.numberLabel.node, this.offColor);
                        }
                    }
                });
                c.default = e;
                b.exports = c.default;
                cc._RF.pop();
            }
        }, {
            Utils: "Utils"
        }],
        SettingSliderSingleNum: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "449bftyQ69GBqYbHra7PRW2", "SettingSliderSingleNum")) {
                c.__esModule = true;
                c.default = undefined;
                var d = a("Utils");
                var e = cc.Class({
                    extends: cc.Component,
                    properties: {
                        numberLabel: cc.Label,
                        num: 10,
                        onColor: cc.Color,
                        offColor: cc.Color
                    },
                    onLoad: function () {
                        this.numberLabel.string = this.num;
                    },
                    setColor: function (a, b) {
                        this.onColor = a;
                        this.offColor = b;
                    },
                    setLight: function (a) {
                        if (a) {
                            (0, d.setNodeColorWithOpacity)(this.numberLabel.node, this.onColor);
                        } else {
                            (0, d.setNodeColorWithOpacity)(this.numberLabel.node, this.offColor);
                        }
                    }
                });
                c.default = e;
                b.exports = c.default;
                cc._RF.pop();
            }
        }, {
            Utils: "Utils"
        }],
        SettingSliderSingle: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "41cdfy0E9FKC7KilcTyf7iZ", "SettingSliderSingle")) {
                c.__esModule = true;
                c.default = undefined;
                var d = cc.Class({
                    extends: cc.Component,
                    properties: {
                        settingSliderNum: cc.Prefab,
                        numbers: [cc.Float],
                        content: cc.Node,
                        valueLabel: cc.Label,
                        alwaysShow: false
                    },
                    onEnable: function () {
                        this.n_();
                        this.node.on("size-changed", this.n_, this);
                    },
                    onDisable: function () {
                        this.node.off("size-changed", this.n_, this);
                    },
                    n_: function () {
                        this.o_ = cc.Canvas.instance.node.width / 2;
                        if (this.c_) {
                            for (var a = this.h_, b = 0, c = a.length; b < c; b++) {
                                a[b].node.x = this.o_ + b * 183;
                            }
                            this.updateSlider();
                        }
                    },
                    setBiggestValue: function () {
                        var a = this.numbers.length - 1;
                        this.setLight(a);
                        this.content.x = -this.o_ - a * 183;
                    },
                    setNumberList: function (a) {
                        this.numbers = a;
                    },
                    setValueColor: function (a, b) {
                        this.r_ = a;
                        this.a_ = b;
                    },
                    setPlaySound: function (a) {
                        this.u_ = a;
                    },
                    init: function () {
                        var a = this;
                        this.c_ = false;
                        for (var b = this.h_ = [], c = this.numbers, d = this.numbers.length - 1, e = this.content, f = 0, g = this.numbers.length; f < g; f++) {
                            var h = cc.instantiate(this.settingSliderNum);
                            var i = b[f] = h.getComponent("SettingSliderSingleNum");
                            i.setColor(this.r_, this.a_);
                            i.num = c[f];
                            h.x = this.o_ + f * 183;
                            h.parent = this.content;
                        }
                        var j = -this.o_ - d * 183;
                        var l = -this.o_;
                        var n = this.node;
                        n.on(cc.Node.EventType.TOUCH_START, function (b) {
                            if (n.active) {
                                b.stopPropagation();
                                a.l_ = b.getLocation().x;
                                a.f_ = e.x;
                            }
                        });
                        n.on(cc.Node.EventType.TOUCH_MOVE, function (b) {
                            if (n.active) {
                                b.stopPropagation();
                                var c = b.getLocation().x - a.l_;
                                var f = a.f_ + c;
                                if (f < j) {
                                    e.x = j;
                                    a.setLight(d);
                                } else if (f > l) {
                                    e.x = l;
                                    a.setLight(0);
                                } else {
                                    var g = Math.round(c / 183);
                                    var h = g * 183;
                                    var i = a.f_ + h;
                                    e.x = i;
                                    a.setLight(-((a.o_ + a.f_) / 183 + g));
                                }
                            }
                        });
                        n.on(cc.Node.EventType.TOUCH_CANCEL, function (b) {
                            if (n.active) {
                                b.stopPropagation();
                                if (a.updateValue) {
                                    a.updateValue(a.d_);
                                }
                            }
                        });
                        n.on(cc.Node.EventType.TOUCH_END, function (b) {
                            if (n.active) {
                                b.stopPropagation();
                                if (a.updateValue) {
                                    a.updateValue(a.d_);
                                }
                            }
                        });
                        if (this.alwaysShow) {
                            var k = this.d_ || 0;
                            this.setDefaultFirstSliderNum(k);
                        } else {
                            n.active = false;
                        }
                        this.c_ = true;
                    },
                    setLight: function (a, b) {
                        if (b === undefined) {
                            b = false;
                        }
                        a = Math.round(a);
                        var c = this.d_;
                        if (this.valueLabel) {
                            this.d_ = this.valueLabel.string = this.numbers[a];
                        } else {
                            this.d_ = this.numbers[a];
                        }
                        if (!(b || c == this.d_)) {
                            this.u_();
                        }
                        if (a % 1 == 0) {
                            var d = this.h_[a];
                            if (d == this.v_) {
                                return;
                            }
                            d.setLight(true);
                            if (this.v_) {
                                this.v_.setLight(false);
                            }
                            this.v_ = d;
                        } else if (this.v_) {
                            this.v_.setLight(false);
                            this.v_ = null;
                        }
                        if (this.saveValue) {
                            this.saveValue(this.d_);
                        }
                    },
                    setDefaultFirstSliderNum: function (a) {
                        var b = this.numbers.indexOf(a);
                        if (b === -1) {
                            b = 0;
                        }
                        var c = b * 183;
                        var d = -this.o_ - c;
                        this.content.x = d;
                        this.setLight(b, true);
                    },
                    setValue: function (a) {
                        this.d_ = a;
                    },
                    getValue: function () {
                        return this.d_;
                    },
                    updateSlider: function () {
                        this.setDefaultFirstSliderNum(this.d_);
                    },
                    testSetSliderNum: function () {
                        this.setDefaultFirstSliderNum(Math.floor(Math.random() * 21) * 5);
                    },
                    u_: function () { }
                });
                c.default = d;
                b.exports = c.default;
                cc._RF.pop();
            }
        }, {}],
        SettingSlider: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "357638pYQ9Eibsf8KFNqaZK", "SettingSlider")) {
                c.__esModule = true;
                c.default = undefined;
                var d = cc.Class({
                    extends: cc.Component,
                    properties: {
                        settingSliderNum: cc.Prefab,
                        numInterval: 10,
                        maxUnit: 10,
                        minNum: 0,
                        content: cc.Node,
                        alwaysShow: false,
                        isPositive: false,
                        showValue: false
                    },
                    setValueColor: function (a, b) {
                        this.r_ = a;
                        this.a_ = b;
                    },
                    init: function () {
                        for (var a = this, b = this.h_ = [], c = this.numInterval, d = this.minNum, e = this.maxUnit, f = this.content, g = 0; g <= e; g++) {
                            var h = cc.instantiate(this.settingSliderNum);
                            var i = b[g] = h.getComponent("SettingSliderNum");
                            i.setColor(this.r_, this.a_);
                            i.num = d + g * c;
                            h.x = 621 + g * 210;
                            if (g == 0) {
                                i.isMin = true;
                            } else {
                                i.setDisplayValue(this.showValue, i.num);
                            }
                            h.parent = f;
                        }
                        var j = -621 - e * 210;
                        var l = this.node;
                        l.on(cc.Node.EventType.TOUCH_START, function (b) {
                            if (l.active) {
                                b.stopPropagation();
                                a.l_ = b.getLocation().x;
                                a.f_ = f.x;
                            }
                        });
                        l.on(cc.Node.EventType.TOUCH_MOVE, function (b) {
                            if (l.active) {
                                b.stopPropagation();
                                var c = b.getLocation().x - a.l_;
                                var d = a.f_ + c;
                                if (d < j) {
                                    f.x = j;
                                    a.setLight(e);
                                } else if (d > -621) {
                                    f.x = -621;
                                    a.setLight(0);
                                } else {
                                    var g = Math.round(c / 105);
                                    var h = g * 105;
                                    var i = a.f_ + h;
                                    f.x = i;
                                    a.setLight(-((621 + a.f_) / 105 + g) / 2);
                                }
                            }
                        });
                        l.on(cc.Node.EventType.TOUCH_CANCEL, function (b) {
                            if (l.active) {
                                b.stopPropagation();
                                if (a.saveValue) {
                                    a.saveValue(a.d_);
                                }
                            }
                        });
                        l.on(cc.Node.EventType.TOUCH_END, function (b) {
                            if (l.active) {
                                b.stopPropagation();
                                if (a.saveValue) {
                                    a.saveValue(a.d_);
                                }
                            }
                        });
                        if (this.alwaysShow) {
                            var k = this.d_ || 0;
                            this.setDefaultFirstSliderNum(k);
                        } else {
                            l.active = false;
                        }
                    },
                    setLight: function (a, b) {
                        if (b === undefined) {
                            b = false;
                        }
                        this.d_;
                        if (!b) {
                            this.d_;
                        }
                        if (a % 1 == 0) {
                            var c = this.h_[a];
                            if (c == this.v_) {
                                if (this.saveValue) {
                                    this.saveValue(this.d_);
                                }
                                return;
                            }
                            c.setLight(true);
                            if (this.v_) {
                                this.v_.setLight(false);
                            }
                            this.v_ = c;
                        } else if (this.v_) {
                            this.v_.setLight(false);
                            this.v_ = null;
                        }
                        if (this.saveValue) {
                            this.saveValue(this.d_);
                        }
                    },
                    setDefaultFirstSliderNum: function (a) {
                        var b = (a - this.minNum) / 5;
                        var c = -621 - b * 105;
                        this.content.x = c;
                        this.setLight(b / 2, true);
                    },
                    setValue: function (a) {
                        this.d_ = a;
                    },
                    getValue: function () {
                        return this.d_;
                    },
                    updateSlider: function () {
                        this.setDefaultFirstSliderNum(this.d_);
                    },
                    testSetSliderNum: function () {
                        this.setDefaultFirstSliderNum(Math.floor(Math.random() * 21) * 5);
                    }
                });
                c.default = d;
                b.exports = c.default;
                cc._RF.pop();
            }
        }, {}],
        SettingTurboSpinButton: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "eaed475bBBLf69c2AHexgPy", "SettingTurboSpinButton")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("GenericSettingButton");
                var f = a("UIAppearanceHelper");
                var g = a("Utils");
                var h = a("TurboButtonEffect");
                var i = cc._decorator;
                var j = i.ccclass;
                var k = i.property;
                function b(a, b) {
                    return Math.floor(Math.random() * (b - a + 1)) + a;
                }
                var l = function (a) {
                    function c() {
                        var c = a !== null && a.apply(this, arguments) || this;
                        c.sprite = undefined;
                        c.spriteEffect = undefined;
                        c.titleLabel = undefined;
                        c.turboSpinOn = undefined;
                        c.turboSpinOff = undefined;
                        c.turboSpinEffectOn = undefined;
                        c.turboSpinEffectOff = undefined;
                        c.turboSpinEffectAnim = undefined;
                        c.lightingEffectAnim = undefined;
                        c.spriteLightEffectNode = undefined;
                        c.spriteLightShadowEffectNode = undefined;
                        c.turboButtonEffect = undefined;
                        c.kr = true;
                        c.__ = undefined;
                        c.m_ = undefined;
                        c.p_ = [{
                            animName: "turbo_lighting_style_1",
                            positionOffsetXLeft: 0,
                            positionOffsetXRight: b(1, 3),
                            positionOffsetYLeft: b(0, 3),
                            positionOffsetYRight: b(0, 6),
                            scaleX: 1.2,
                            scaleY: 1.2,
                            rotation: 0
                        }, {
                            animName: "turbo_lighting_style_2",
                            positionOffsetXLeft: b(0, 4),
                            positionOffsetXRight: b(0, 10),
                            positionOffsetYLeft: b(0, 22),
                            positionOffsetYRight: b(0, 8),
                            scaleX: 1.4,
                            scaleY: 1.2,
                            rotation: 0
                        }, {
                            animName: "turbo_lighting_style_3",
                            positionOffsetXLeft: b(0, 11),
                            positionOffsetXRight: b(0, 22),
                            positionOffsetYLeft: b(0, 5),
                            positionOffsetYRight: b(0, 20),
                            scaleX: 1.2,
                            scaleY: 1.2,
                            rotation: b(-10, 10)
                        }];
                        return c;
                    }
                    __extends(c, a);
                    c.prototype.onLoad = function () {
                        a.prototype.onLoad.call(this);
                        this.turboButtonEffect.getComponent(h.default).setUpdateTurboMiddleIconCallback(this.changeTurboSprite.bind(this));
                    };
                    c.prototype.setTurboSprites = function (a, b) {
                        this.turboSpinOn = a;
                        this.turboSpinOff = b;
                    };
                    c.prototype.playTurboLighting = function () {
                        this.spriteEffect.spriteFrame = undefined;
                        this.turboSpinEffectAnim.once("finished", this.b_, this);
                        if (this.kr) {
                            this.turboSpinEffectAnim.play("turbo_icon_1st_up");
                            this.kr = undefined;
                        } else {
                            this.turboSpinEffectAnim.play("turbo_icon_up");
                        }
                    };
                    c.prototype.stopTurboLighting = function () {
                        var a = this.__;
                        this.__ = undefined;
                        if (a) {
                            a();
                        }
                        var b = this.m_;
                        this.m_ = undefined;
                        if (b) {
                            b();
                        }
                        this.turboSpinEffectAnim.stop();
                        this.lightingEffectAnim.stop();
                        this.spriteLightShadowEffectNode.opacity = 0;
                        this.spriteLightEffectNode.getComponent(cc.Sprite).spriteFrame = undefined;
                        this.spriteLightEffectNode.x = 0;
                        this.spriteLightEffectNode.y = 0;
                        this.spriteEffect.node.opacity = 255;
                    };
                    c.prototype.changeTurboSprite = function () {
                        var a = this.getTurboSpinCallback && this.getTurboSpinCallback();
                        this.sprite.spriteFrame = a ? this.turboSpinOn : this.turboSpinOff;
                    };
                    c.prototype.b_ = function () {
                        this.S_();
                        this.g_();
                    };
                    c.prototype.S_ = function () {
                        var a = this;
                        this.m_ = g.delayCallback(1)(function () {
                            var c = a.p_[b(0, 2)];
                            var d = b(0, 1);
                            var e = b(0, 1);
                            a.spriteLightEffectNode.x = d ? c.positionOffsetXRight : -c.positionOffsetXLeft;
                            a.spriteLightEffectNode.y = e ? c.positionOffsetYRight : -c.positionOffsetYLeft;
                            a.spriteLightEffectNode.scaleX = c.scaleX;
                            a.spriteLightEffectNode.scaleY = c.scaleY;
                            a.spriteLightEffectNode.angle = -c.rotation;
                            a.lightingEffectAnim.once("finished", a.S_, a);
                            a.lightingEffectAnim.play(c.animName);
                        });
                    };
                    c.prototype.g_ = function () {
                        var a = this;
                        this.__ = g.delayCallback(3)(function () {
                            a.turboSpinEffectAnim.once("finished", a.g_, a);
                            a.turboSpinEffectAnim.play("turbo_icon_loop");
                        });
                    };
                    c.prototype.setSpriteScaleSize = function (a) {
                        this.sprite.node.setScale(cc.v2(a, a));
                    };
                    c.prototype.setTitle = function (a) {
                        this.titleLabel.string = a;
                    };
                    c.prototype.setButtonOnColor = function (a, b) {
                        this.C_ = a;
                        this.y_ = b;
                    };
                    c.prototype.setButtonOffColor = function (a, b) {
                        this.M_ = a;
                        this.A_ = b;
                    };
                    c.prototype.changeButtonColor = function (b) {
                        this.buttonTheme.domainKey = b ? this.C_ : this.M_;
                        this.buttonTheme.colorKey = b ? this.y_ : this.A_;
                        a.prototype.changeButtonColor.call(this, false);
                    };
                    c.prototype.changeButtonPressedColor = function (a) {
                        if (a) {
                            this.node.runAction(cc.scaleTo(0.05, 0.9));
                        } else {
                            this.node.runAction(cc.sequence(cc.scaleTo(0.05, 1.1), cc.scaleTo(0.05, 1.05), cc.scaleTo(0.05, 1)));
                        }
                    };
                    c.prototype.interactableButtonColor = function (a) {
                        if (this.buttonTheme) {
                            var b = f.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".normal");
                            var c = f.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".disabled");
                            var d = a ? b : c;
                            this.turboSpinEffectAnim.node.opacity = d.a;
                            g.setNodeColorWithOpacity(this.iconSprite, d);
                            g.setNodeColorWithOpacity(this.spriteEffect.node, d);
                            g.setNodeColorWithOpacity(this.spriteLightEffectNode, d);
                            g.setNodeColorWithOpacity(this.spriteLightShadowEffectNode, d);
                            g.setNodeColorWithOpacity(this.sprite.node, d);
                        }
                    };
                    c.prototype.changeSpriteEffectColor = function () {
                        if (this.buttonTheme) {
                            var a = f.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".normal");
                            g.setNodeColorWithOpacity(this.spriteEffect.node, a);
                            g.setNodeColorWithOpacity(this.spriteLightEffectNode, a);
                            g.setNodeColorWithOpacity(this.iconSprite, a);
                            g.setNodeColorWithOpacity(this.spriteLightShadowEffectNode, a);
                        }
                    };
                    c.prototype.destroy = function () {
                        this.stopTurboLighting();
                        return a.prototype.destroy.call(this);
                    };
                    __decorate([k(cc.Sprite)], c.prototype, "sprite", undefined);
                    __decorate([k(cc.Sprite)], c.prototype, "spriteEffect", undefined);
                    __decorate([k(cc.Label)], c.prototype, "titleLabel", undefined);
                    __decorate([k(cc.SpriteFrame)], c.prototype, "turboSpinOn", undefined);
                    __decorate([k(cc.SpriteFrame)], c.prototype, "turboSpinOff", undefined);
                    __decorate([k(cc.SpriteFrame)], c.prototype, "turboSpinEffectOn", undefined);
                    __decorate([k(cc.SpriteFrame)], c.prototype, "turboSpinEffectOff", undefined);
                    __decorate([k(cc.Animation)], c.prototype, "turboSpinEffectAnim", undefined);
                    __decorate([k(cc.Animation)], c.prototype, "lightingEffectAnim", undefined);
                    __decorate([k(cc.Node)], c.prototype, "spriteLightEffectNode", undefined);
                    __decorate([k(cc.Node)], c.prototype, "spriteLightShadowEffectNode", undefined);
                    __decorate([k(h.default)], c.prototype, "turboButtonEffect", undefined);
                    return __decorate([j], c);
                }(e.default);
                c.default = l;
                cc._RF.pop();
            }
        }, {
            GenericSettingButton: "GenericSettingButton",
            TurboButtonEffect: "TurboButtonEffect",
            UIAppearanceHelper: "UIAppearanceHelper",
            Utils: "Utils"
        }],
        SinglePayoutModel: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "029b1Bdw8RM4ZEeOX8HEoFh", "SinglePayoutModel")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = function () {
                    function a() {
                        this.I_ = [];
                    }
                    Object.defineProperty(a.prototype, "reelData", {
                        get: function () {
                            return this.I_;
                        },
                        set: function (a) {
                            this.I_ = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(a.prototype, "payoutData", {
                        get: function () {
                            return this.w_;
                        },
                        set: function (a) {
                            this.w_ = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(a.prototype, "extendSymbolData", {
                        get: function () {
                            return this.O_;
                        },
                        set: function (a) {
                            this.O_ = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(a.prototype, "extendBlockData", {
                        get: function () {
                            return this.H_;
                        },
                        set: function (a) {
                            this.H_ = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(a.prototype, "positionArray", {
                        get: function () {
                            return this.B_;
                        },
                        set: function (a) {
                            this.B_ = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(a.prototype, "additionalData", {
                        get: function () {
                            return this.G_;
                        },
                        set: function (a) {
                            this.G_ = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    return a;
                }();
                c.default = e;
                cc._RF.pop();
            }
        }, {}],
        SkipHandler: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "eee58Gk/h5Ii6sEAYgH+CZ6", "SkipHandler")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = cc._decorator.ccclass;
                var f = new (function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.clickEffectController = null;
                        b.notifyStack = [];
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.init = function (a, b) {
                        this.clickEffectController = b;
                        a.on(cc.Node.EventType.TOUCH_START, this.onTouchStart, this, false);
                    };
                    b.prototype.subscribeOnce = function (a) {
                        var b = this;
                        this.notifyStack.push(a);
                        return function () {
                            var c = b.notifyStack.indexOf(a);
                            if (c > -1) {
                                b.notifyStack.splice(c, 1);
                            }
                        };
                    };
                    b.prototype.onTouchStart = function (a) {
                        if (this.clickEffectController && !(this.notifyStack.length < 1)) {
                            this.clickEffectController.showClickEffect(a.getLocation());
                            var b = this.notifyStack.shift();
                            if (b) {
                                b();
                            }
                        }
                    };
                    b.prototype.removeEvent = function (a) {
                        a.off(cc.Node.EventType.TOUCH_START, this.onTouchStart, this, false);
                    };
                    return __decorate([e], b);
                }(cc.Object))();
                c.default = f;
                cc._RF.pop();
            }
        }, {}],
        SliderEx: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "dbb33H+Xs1Dw7xtUJLC1l6D", "SliderEx")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = cc._decorator;
                var f = e.ccclass;
                var g = e.property;
                var h = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.content = undefined;
                        b.contentHeight = 0;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.onEnable = function () {
                        this.node.on(cc.Node.EventType.TOUCH_START, this.Si, this);
                        this.node.on(cc.Node.EventType.TOUCH_MOVE, this.tt, this);
                        this.node.on(cc.Node.EventType.TOUCH_END, this.yi, this);
                        this.node.on(cc.Node.EventType.TOUCH_CANCEL, this.Ii, this);
                        if (this.handle && this.handle.isValid) {
                            this.handle.node.on(cc.Node.EventType.TOUCH_START, this.N_, this);
                            this.handle.node.on(cc.Node.EventType.TOUCH_MOVE, this.tt, this);
                            this.handle.node.on(cc.Node.EventType.TOUCH_END, this.yi, this);
                        }
                        this.T_();
                    };
                    b.prototype.onDisable = function () {
                        this.node.off(cc.Node.EventType.TOUCH_START, this.Si, this);
                        this.node.off(cc.Node.EventType.TOUCH_MOVE, this.tt, this);
                        this.node.off(cc.Node.EventType.TOUCH_END, this.yi, this);
                        this.node.off(cc.Node.EventType.TOUCH_CANCEL, this.Ii, this);
                        if (this.handle && this.handle.isValid) {
                            this.handle.node.off(cc.Node.EventType.TOUCH_START, this.N_, this);
                            this.handle.node.off(cc.Node.EventType.TOUCH_MOVE, this.tt, this);
                            this.handle.node.off(cc.Node.EventType.TOUCH_END, this.yi, this);
                        }
                        this.P_();
                    };
                    b.prototype.R_ = function (a) {
                        this.L_(a);
                        this.do();
                        this.E_();
                    };
                    b.prototype.ki = function (a) {
                        var b = -cc.view._scaleY;
                        var c = cc.v2(0, a.getScrollY() * b);
                        var d = this.node.convertToWorldSpace(this.handle.node.position).x;
                        var e = d + c.y / 10;
                        this.progress = cc.misc.clamp01(this.progress + (e - d) / this.node.width);
                        this.k_();
                        this.do();
                        this.E_();
                    };
                    b.prototype.T_ = function () {
                        if (this.content) {
                            this.content.parent.on(cc.Node.EventType.MOUSE_WHEEL, this.ki, this, true);
                        }
                    };
                    b.prototype.P_ = function () {
                        if (this.content) {
                            this.content.parent.off(cc.Node.EventType.MOUSE_WHEEL, this.ki, this, true);
                        }
                    };
                    b.prototype.do = function () {
                        if (this.content) {
                            this.content.y = this.progress * (this.content.height - cc.view.getVisibleSize().height);
                        }
                    };
                    __decorate([g(cc.Node)], b.prototype, "content", undefined);
                    return __decorate([f], b);
                }(cc.Slider);
                c.default = h;
                cc._RF.pop();
            }
        }, {}],
        SlotAnalyticsEnum: [function (a, b, c) {
            'use strict';

            var d = {
                value: true
            };
            if (!cc._RF.push(b, "c270fgpIPxIwJGIYJlAbqmn", "SlotAnalyticsEnum")) {
                Object.defineProperty(c, "__esModule", d);
                c.SpinStateProcess = c.SpinCredits = c.SpinTrigger = undefined;
                (function (a) {
                    a[a.CLICK = 0] = "CLICK";
                    a[a.SPACEBAR = 1] = "SPACEBAR";
                    a[a.AUTOSPIN = 2] = "AUTOSPIN";
                    a[a.FEATURE_BUY = 3] = "FEATURE_BUY";
                })(c.SpinTrigger || (c.SpinTrigger = {}));
                (function (a) {
                    a[a.FREE_GAME = 0] = "FREE_GAME";
                    a[a.CASH = 1] = "CASH";
                    a[a.BONUS = 2] = "BONUS";
                    a[a.INSUFFICIENT = 3] = "INSUFFICIENT";
                    a[a.BET_INVALID = 4] = "BET_INVALID";
                })(c.SpinCredits || (c.SpinCredits = {}));
                (function (a) {
                    a[a.REEL_SPINNING = 0] = "REEL_SPINNING";
                    a[a.REEL_STOPPING = 1] = "REEL_STOPPING";
                    a[a.REEL_STOPPED = 2] = "REEL_STOPPED";
                })(c.SpinStateProcess || (c.SpinStateProcess = {}));
                cc._RF.pop();
            }
        }, {}],
        SlotAnalyticsHelper: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "4d769Qc8epMlozoEYpeBTit", "SlotAnalyticsHelper")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.sendFastStopGA = undefined;
                var e = a("AnalyticsHelper");
                c.sendFastStopGA = function (a, b) {
                    var c = {
                        type: a,
                        is_auto: b
                    };
                    e.sendEvent(shell.ga.CATEGORY_GAME, shell.ga.EVENT_SLOT_STOP_SPIN, c);
                };
                cc._RF.pop();
            }
        }, {
            AnalyticsHelper: "AnalyticsHelper"
        }],
        "SlotController.spec": [function (a, b, c) {
            'use strict';

            var d = {
                value: true
            };
            if (!cc._RF.push(b, "a3e43/zCkNOHLpHC2GOChmq", "SlotController.spec")) {
                Object.defineProperty(c, "__esModule", d);
                c.initSlotControllerNodes = undefined;
                c.initSlotControllerNodes = function (a) {
                    var b = System.get("automation") && System.get("automation").GameConfigs;
                    if (b) {
                        b.initNodeConfig(a.reelNode, "reel_area");
                    }
                };
                cc._RF.pop();
            }
        }, {}],
        SlotController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "b51b3D3XN5Phpw2GjwMG4k+", "SlotController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("SlotStateMachine");
                var f = a("NodePoolHandler");
                var g = a("SlotProperties");
                var h = a("NormalSlotHandler");
                var i = a("GeneralAudioConstant");
                var j = a("AudioManager");
                var k = cc._decorator;
                var l = k.ccclass;
                var m = k.property;
                var n = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.slotItemPrefab = undefined;
                        b.wildItemPrefab = undefined;
                        b.slotHolder = undefined;
                        b.fallingAnim = undefined;
                        b.backGold = undefined;
                        b.frontGold = undefined;
                        b.reelShine = undefined;
                        b.U_ = new h.NormalSlotHandler();
                        b.j_ = new e.default();
                        b.D_ = undefined;
                        b.zi = undefined;
                        b.W_ = undefined;
                        b.x_ = undefined;
                        b.F_ = undefined;
                        b.V_ = undefined;
                        b.z_ = undefined;
                        b.q_ = undefined;
                        b.J_ = undefined;
                        b.fu = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.setOnClickCallback = function (a) {
                        this.zi = a;
                    };
                    b.prototype.setStopCompletedCallback = function (a) {
                        this.W_ = a;
                    };
                    b.prototype.setDoneReloadDataCallback = function (a) {
                        this.x_ = a;
                    };
                    b.prototype.setReelStopCallback = function (a) {
                        this.F_ = a;
                    };
                    b.prototype.setSlotHandlerReelStopCallback = function (a) {
                        this.U_.onReelStop = a;
                    };
                    b.prototype.setOnSlotBeginInterruptCallback = function (a) {
                        this.V_ = a;
                    };
                    b.prototype.setOnSlotInterruptCallback = function (a) {
                        this.z_ = a;
                    };
                    b.prototype.setOnReelReachesBouncePointCallback = function (a) {
                        this.U_.setOnReelReachesBouncePointCallback(a);
                    };
                    b.prototype.setOnReelReachesLowestPointCallback = function (a) {
                        this.U_.setOnReelReachesLowestPointCallback(a);
                    };
                    b.prototype.setOnReelReachesSlowDownPointCallback = function (a) {
                        this.U_.setOnReelReachesSlowDownPointCallback(a);
                    };
                    b.prototype.setSymbolImageHandler = function (a) {
                        this.K_ = a;
                    };
                    b.prototype.setSpinTiming = function (a, b) {
                        this.q_ = a;
                        this.J_ = b;
                    };
                    b.prototype.setClickEffectController = function (a) {
                        this.Q_ = a;
                    };
                    b.prototype.setSlotItemsVisible = function (a, b) {
                        if (b && b.length !== 0) {
                            this.U_.setSlotItemsVisible(a, b);
                        }
                    };
                    b.prototype.disableAllSprite = function () {
                        this.U_.disableAllSprite();
                    };
                    b.prototype.getStopStyle = function () {
                        return this.j_.getStopStyle();
                    };
                    b.prototype.getSlotItem = function (a) {
                        if (a) {
                            if (a.length === 0) {
                                return [];
                            } else {
                                return this.U_.getSlotItemByIndices(a);
                            }
                        }
                    };
                    b.prototype.getSlotItemWorldPosition = function (a) {
                        if (a) {
                            if (a.length === 0) {
                                return [];
                            } else {
                                return this.U_.getSlotItemsWorldPosition(a);
                            }
                        }
                    };
                    b.prototype.getIsFastStopped = function () {
                        return this.U_.getFastStop();
                    };
                    Object.defineProperty(b.prototype, "mask", {
                        get: function () {
                            return this.U_.mask;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.init = function (a, b, c) {
                        var d = {
                            up: -5,
                            down: -10,
                            left: -10,
                            right: -15
                        };
                        f.nodePoolHandler.registerReusableItem("slotItem", this.slotItemPrefab, "GSlotItem", 15);
                        f.nodePoolHandler.registerReusableItem("wildItem", this.wildItemPrefab, "WildItemController", 9);
                        this.U_.init({
                            reelData: a,
                            containerNode: this.slotHolder,
                            row: g.NORMAL_SLOT_ROW,
                            column: g.NORMAL_SLOT_COLUMN,
                            slotItemSize: {
                                height: g.NORMAL_SLOT_ITEM_SIZE.height,
                                width: g.NORMAL_SLOT_ITEM_SIZE.width
                            },
                            symbolNormalScale: g.NORMAL_SYMBOL_SCALE,
                            symbolBlurScale: g.BLUR_SCALE,
                            normalSymbolSpriteFrame: this.K_.symbolImages,
                            blurSymbolSpriteFrame: this.K_.blurredSymbolImages,
                            maskMargin: d,
                            onReelStopCallbackWrapper: this.Y_.bind(this),
                            onSpinStopCallbackWrapper: this.X_.bind(this)
                        });
                        if (c) {
                            c();
                        }
                    };
                    b.prototype.setReelData = function (a) {
                        this.U_.setReelData(a);
                    };
                    b.prototype.reloadData = function (a) {
                        this.U_.reloadData(a);
                    };
                    b.prototype.setupRespinSlotConfig = function () {
                        this.U_.updateRespinSlotConfig();
                    };
                    b.prototype.setupNormalSpinSlotConfig = function () {
                        this.U_.updateNormalSpinSlotConfig();
                    };
                    b.prototype.resetHiddenMiddleReel = function () {
                        this.U_.resetHiddenMiddleReel();
                    };
                    b.prototype.show = function () {
                        this.node.active = true;
                    };
                    b.prototype.hide = function () {
                        this.node.active = false;
                    };
                    b.prototype.spin = function (a, b) {
                        if (b === undefined) {
                            b = false;
                        }
                        var c = b ? 0.5 : 0;
                        var d = a ? this.q_ : this.q_ + this.U_.scrollInterval * g.NORMAL_SLOT_COLUMN + c;
                        var e = this.J_ - 0.25 + c;
                        this.V_ = undefined;
                        this.j_.spin(d, e);
                        this.U_.spin(a);
                        var f = i.GENERAL_AUDIO.spinActiveLoop.key;
                        j.stopAudioIfPlaying(f);
                        j.playAudioIfNotPlaying(f, false, 0, true);
                        if (a) {
                            this.markFastStop();
                        } else {
                            this.Z_();
                        }
                    };
                    b.prototype.stopSpin = function () {
                        var a = this;
                        this.j_.stop(function () {
                            a.U_.stopSpin();
                        });
                    };
                    b.prototype.fastStop = function () {
                        var a = this;
                        this.j_.fastStop(function () {
                            var b = a.V_;
                            a.V_ = undefined;
                            if (b) {
                                b();
                            }
                            a.U_.fastStop();
                            if (a.z_) {
                                a.z_();
                            }
                        });
                    };
                    b.prototype.markFastStop = function () {
                        this.j_.markFastStop();
                    };
                    b.prototype.unmarkFastStop = function () {
                        this.j_.unmarkFastStop();
                        this.U_.unsetFastStop();
                    };
                    b.prototype.enableTouchEvent = function () {
                        this.Z_();
                    };
                    b.prototype.disableTouchEvent = function () {
                        this.tm();
                    };
                    b.prototype.Y_ = function (a) {
                        var b = this.F_;
                        if (b) {
                            b(a);
                        }
                    };
                    b.prototype.X_ = function () {
                        this.j_.stopped();
                        this.V_ = undefined;
                        var a = this.W_;
                        this.W_ = undefined;
                        if (a) {
                            a();
                        }
                        var b = i.GENERAL_AUDIO.spinActiveLoop.key;
                        j.stopAudioIfPlaying(b);
                    };
                    b.prototype.im = function (a) {
                        var b = a + 1;
                        var c = this.sm;
                        if (c) {
                            c(b);
                        }
                    };
                    b.prototype.Z_ = function () {
                        this.node.on(cc.Node.EventType.TOUCH_START, this.em, this);
                    };
                    b.prototype.tm = function () {
                        this.node.off(cc.Node.EventType.TOUCH_START, this.em, this);
                    };
                    b.prototype.em = function (a) {
                        if (this.zi) {
                            this.tm();
                            this.Q_.showClickEffect(a.getLocation());
                            this.Q_.showFlash();
                            var b = this.zi;
                            this.zi = undefined;
                            if (b) {
                                b();
                            }
                        }
                    };
                    b.prototype.onKeyBoardDownClicked = function () {
                        if (this.zi) {
                            var a = this.zi;
                            this.zi = undefined;
                            if (a) {
                                a();
                            }
                        }
                    };
                    b.prototype.setRespinSymbol = function (a) {
                        this.U_.setRespinSymbol(a);
                    };
                    b.prototype.playRespin = function () {
                        this.fallingAnim.node.opacity = 0;
                        this.fallingAnim.node.runAction(cc.fadeIn(0.5));
                        this.fallingAnim.play();
                    };
                    b.prototype.stopRespin = function () {
                        this.fallingAnim.stop();
                        this.fallingAnim.setCurrentTime(0);
                        this.fallingAnim.node.getComponent(cc.Sprite).spriteFrame = undefined;
                    };
                    b.prototype.zoomOut = function () {
                        this.backGold.stopAllActions();
                        this.frontGold.stopAllActions();
                        this.backGold.scale = 1.62;
                        this.backGold.runAction(cc.sequence(cc.delayTime(0.5), cc.scaleTo(2.1, 1.58).easing(cc.easeCubicActionInOut())));
                        this.frontGold.scale = 1.6;
                        this.frontGold.runAction(cc.scaleTo(2.1, 1.55).easing(cc.easeCubicActionInOut()));
                    };
                    b.prototype.zoomIn = function () {
                        this.backGold.stopAllActions();
                        this.frontGold.stopAllActions();
                        this.backGold.scale = 1.58;
                        this.backGold.runAction(cc.scaleTo(2.5, 1.6).easing(cc.easeCubicActionInOut()));
                        this.frontGold.scale = 1.55;
                        this.frontGold.runAction(cc.scaleTo(2.1, 1.6).easing(cc.easeCubicActionInOut()));
                    };
                    b.prototype.teaseZoomOut = function () {
                        this.backGold.stopAllActions();
                        this.frontGold.stopAllActions();
                        this.backGold.scale = 1.62;
                        this.backGold.runAction(cc.sequence(cc.delayTime(0.5), cc.scaleTo(1, 1.6).easing(cc.easeCubicActionInOut())));
                        this.frontGold.scale = 1.6;
                        this.frontGold.runAction(cc.scaleTo(1, 1.575).easing(cc.easeCubicActionInOut()));
                    };
                    b.prototype.teaseZoomIn = function () {
                        this.backGold.stopAllActions();
                        this.frontGold.stopAllActions();
                        this.backGold.scale = 1.6;
                        this.backGold.runAction(cc.scaleTo(1, 1.6).easing(cc.easeCubicActionInOut()));
                        this.frontGold.scale = 1.575;
                        this.frontGold.runAction(cc.scaleTo(1, 1.6).easing(cc.easeCubicActionInOut()));
                    };
                    b.prototype.onSpinEffect = function () {
                        this.reelShine.stop();
                        this.reelShine.setCurrentTime(0);
                        this.reelShine.play();
                    };
                    b.prototype.setupToNormalState = function () {
                        this.backGold.scale = 1.62;
                        this.frontGold.scale = 1.6;
                    };
                    b.prototype.setupToRespinState = function () {
                        this.backGold.scale = 1.58;
                        this.frontGold.scale = 1.55;
                    };
                    __decorate([m(cc.Prefab)], b.prototype, "slotItemPrefab", undefined);
                    __decorate([m(cc.Prefab)], b.prototype, "wildItemPrefab", undefined);
                    __decorate([m(cc.Node)], b.prototype, "slotHolder", undefined);
                    __decorate([m(cc.Animation)], b.prototype, "fallingAnim", undefined);
                    __decorate([m(cc.Node)], b.prototype, "backGold", undefined);
                    __decorate([m(cc.Node)], b.prototype, "frontGold", undefined);
                    __decorate([m(cc.Animation)], b.prototype, "reelShine", undefined);
                    return __decorate([l], b);
                }(cc.Component);
                c.default = n;
                cc._RF.pop();
            }
        }, {
            AudioManager: "AudioManager",
            GeneralAudioConstant: "GeneralAudioConstant",
            NodePoolHandler: "NodePoolHandler",
            NormalSlotHandler: "NormalSlotHandler",
            SlotProperties: "SlotProperties",
            SlotStateMachine: "SlotStateMachine"
        }],
        SlotDataHandler: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "c92e6Vflr1IcZlyJUaCowMg", "SlotDataHandler")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = function () {
                    function a() {
                        this.slotViews = undefined;
                        this.spinType = undefined;
                        this.topBufferRow = undefined;
                        this.bottomBufferRow = undefined;
                        this.numberOfRow = undefined;
                        this.numberOfColumn = undefined;
                        this.getSymbolSize = undefined;
                        this.getRandomSymbol = undefined;
                        this.isStopping = undefined;
                        this.formattedReelData = undefined;
                        this.backupBufferedSymbol = undefined;
                        this.bufferedEmptyItemInfo = undefined;
                        this.formattedDataPositions = undefined;
                    }
                    a.prototype.init = function (a) {
                        this.slotViews = a.slotViews;
                        this.topBufferRow = a.topBufferRow ? a.topBufferRow : 0;
                        this.bottomBufferRow = a.bottomBufferRow ? a.bottomBufferRow : 0;
                        this.numberOfRow = a.numberOfRow;
                        this.numberOfColumn = a.numberOfColumn;
                        this.getSymbolSize = a.getSymbolSize;
                        this.getRandomSymbol = a.getRandomSymbol;
                        this.formattedDataPositions = [];
                        this.bufferedEmptyItemInfo = [];
                        for (var b = 0; b < a.numberOfColumn; b++) {
                            this.formattedDataPositions[b] = -this.bottomBufferRow;
                        }
                        this.setSpinType(a.spinType);
                        this.setReelData(a.reelData, a.largeSymbolDatas);
                    };
                    a.prototype.reset = function () {
                        this.isStopping = false;
                        this.bufferedEmptyItemInfo.length = 0;
                        for (var a = 0; a < this.formattedDataPositions.length; a++) {
                            this.formattedDataPositions[a] = -this.bottomBufferRow;
                        }
                    };
                    a.prototype.setSpinType = function (a) {
                        this.spinType = a;
                    };
                    a.prototype.setReelDataPosition = function (a, b) {
                        this.isStopping = true;
                        this.formattedDataPositions[a] = b - this.bottomBufferRow;
                    };
                    a.prototype.getReelDataPosition = function (a) {
                        return this.formattedDataPositions[a] + this.bottomBufferRow;
                    };
                    a.prototype.getItemInfo = function (a, b) {
                        var c = this.slotViews.indexOf(a);
                        var d = this.bufferedEmptyItemInfo[c];
                        if (d) {
                            this.bufferedEmptyItemInfo[c] = undefined;
                            return d;
                        }
                        for (var e = b, f = this.getSymbol(c, e); f === undefined;) {
                            e--;
                            f = this.getSymbol(c, e);
                        }
                        if (f < 0) {
                            return this.createEmptyItemInfo(-f, e);
                        }
                        var g = this.getSymbolSize;
                        var h = g ? g(f) : cc.size(1, 1);
                        var i = {
                            positionIndex: e,
                            symbolColumn: h.width,
                            symbolRow: h.height,
                            symbolIndex: f
                        };
                        return i;
                    };
                    a.prototype.setReelData = function (a, b) {
                        for (var c = this.numberOfColumn, d = this.numberOfRow, e = this.topBufferRow, f = this.bottomBufferRow, g = this.spinType, h = this.getRandomSymbol, i = f + d, j = i + e, k = this.backupBufferedSymbol = [], l = 0; l < c; l++) {
                            for (var m = k[l] = [], n = 0; n < f; n++) {
                                m[n] = h(l, g, n, false, true, 1);
                            }
                            for (n = i; n < j; n++) {
                                m[n] = h(l, g, n, false, true, 1);
                            }
                        }
                        this.updateReelData(a, b);
                    };
                    a.prototype.updateReelData = function (a, b) {
                        for (var c = this.numberOfColumn, d = this.numberOfRow, e = this.bottomBufferRow, f = this.backupBufferedSymbol, g = this.getSymbolSize, h = this.formattedReelData = [], i = 0; i < c; i++) {
                            var j = i * d;
                            var k = __spread(f[i]);
                            k.splice.apply(k, __spread([e, d], a.slice(j, j + d).reverse()));
                            h.push(k);
                        }
                        if (g && b) {
                            b.forEach(function (b) {
                                b.sort(function (a, b) {
                                    return a - b;
                                });
                                for (var c, f, i = a[b[0]], j = g(i), k = Math.floor(b[0] / d), l = b[0] % d, m = 1; m < b.length; m++) {
                                    if (Math.floor(b[m] / d) !== k) {
                                        c = b[m - 1] % d;
                                        break;
                                    }
                                }
                                f = l === 0 ? d - c - 1 + e : d - l + e - j.height;
                                m = 0;
                                for (; m < j.width; m++) {
                                    var n = h[m + k];
                                    n[f] = m ? -j.height : i;
                                    for (var o = 1; o < j.height; o++) {
                                        n[o + f] = undefined;
                                    }
                                }
                            });
                        }
                    };
                    a.prototype.getFormattedData = function (a) {
                        return __spread(this.formattedReelData[a]);
                    };
                    a.prototype.overwriteFormattedData = function (a, b, c) {
                        this.formattedReelData[a][b] = c;
                    };
                    a.prototype.getSymbol = function (a, b) {
                        var c = this.formattedDataPositions[a];
                        if (c !== undefined) {
                            var d = this.formattedReelData[a];
                            if (b >= c && b <= c + d.length - 1) {
                                return d[b - c];
                            }
                        }
                        var e = this.getSymbolSize;
                        var f = 1;
                        if (e) {
                            for (var g = a + 1; g < this.numberOfColumn && !this.slotViews[g].isIndexVisible(b); g++) {
                                f++;
                            }
                        }
                        var h = this.getRandomSymbol(a, this.spinType, b, this.isStopping, false, f);
                        if (e) {
                            var i = e(h);
                            for (g = 1; g < i.width; g++) {
                                this.bufferedEmptyItemInfo[a + g] = this.createEmptyItemInfo(i.height, b);
                            }
                        }
                        return h;
                    };
                    a.prototype.createEmptyItemInfo = function (a, b) {
                        var c = {
                            positionIndex: b,
                            symbolColumn: 1,
                            symbolRow: a,
                            symbolIndex: -1
                        };
                        return c;
                    };
                    return a;
                }();
                c.default = e;
                cc._RF.pop();
            }
        }, {}],
        SlotDependencyManager: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "f64caMdMMxCYYPxBmpx6+nL", "SlotDependencyManager")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.walletHelper = undefined;
                var e = a("WalletHelper");
                var f = {
                    enumerable: true,
                    get: function () {
                        return e.walletHelper;
                    }
                };
                Object.defineProperty(c, "walletHelper", f);
                cc._RF.pop();
            }
        }, {
            WalletHelper: "WalletHelper"
        }],
        SlotGameConstants: [function (a, b, c) {
            'use strict';

            var d = {
                value: true
            };
            if (!cc._RF.push(b, "d7af7yj0OxMqZa0P2+9ESqP", "SlotGameConstants")) {
                Object.defineProperty(c, "__esModule", d);
                c.DEFAULT_AUTO_SPIN_DELAY_TIME = c.SPIN_BUTTON_TRIGGER_KEY = c.TOTAL_WIN_DISMISS_TIME = c.BIG_WIN_DISMISS_TIME = undefined;
                c.BIG_WIN_DISMISS_TIME = 6;
                c.TOTAL_WIN_DISMISS_TIME = 6;
                c.SPIN_BUTTON_TRIGGER_KEY = cc.macro.KEY.space;
                c.DEFAULT_AUTO_SPIN_DELAY_TIME = 0.3;
                cc._RF.pop();
            }
        }, {}],
        SlotGenerator: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "213874uZn5HSqZznN5luzQQ", "SlotGenerator")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.generateSlot = undefined;
                var e = a("SlotView");
                var f = a("SlotScrollerController");
                var g = {
                    up: 0,
                    down: 0,
                    left: 0,
                    right: 0
                };
                var h = {
                    containerNode: undefined,
                    numberOfColumn: undefined,
                    slotView: e.default,
                    slotScrollerController: f.default
                };
                c.generateSlot = function (a) {
                    var b;
                    var c = (a = __assign(__assign({}, h), a)).containerNode;
                    var d = a.slotSize ? a.slotSize : c.getContentSize();
                    var e = d.width;
                    var f = d.height;
                    var i = new cc.Node("slot_scroller");
                    if (a.dontGenerateMask) {
                        i.parent = c;
                        i.width = e;
                        i.height = f;
                    } else {
                        var j = __assign(__assign({}, g), a.maskMargin);
                        var l = new cc.Node("slot_mask");
                        l.parent = c;
                        l.width = e + j.left + j.right;
                        l.height = f + j.up + j.down;
                        l.x = (j.right - j.left) / 2;
                        l.y = (j.up - j.down) / 2;
                        (b = l.addComponent(cc.Mask)).type = cc.Mask.Type.RECT;
                        b.inverted = false;
                        i.parent = l;
                        i.width = e;
                        i.height = f;
                        i.x = -l.x;
                        i.y = -l.y;
                    }
                    for (var n = a.numberOfColumn, o = e / n, m = (o - e) / 2, k = [], p = 0; p < n; p++) {
                        k[p] = new a.slotView(i, m + o * p);
                    }
                    return {
                        mask: b,
                        slotScrollerController: i.addComponent(a.slotScrollerController),
                        slotViews: k
                    };
                };
                cc._RF.pop();
            }
        }, {
            SlotScrollerController: "SlotScrollerController",
            SlotView: "SlotView"
        }],
        SlotHandler: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "c4b3eXoiTVPErUy7lNx9598", "SlotHandler")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.SlotHandler = undefined;
                var e = a("SlotDataHandler");
                var f = a("SlotView");
                var g = a("SlotScrollerController");
                var h = a("SlotGenerator");
                var i = a("SlotHelper");
                var j = a("GSlotItem");
                var l = a("GSlotHelper");
                var m = a("GSlotItemPool");
                var k = a("SlotProperties");
                var n = a("Utils");
                var o = function () {
                    function a() {
                        this.slotHelper = undefined;
                        this.onReelStartCallback = undefined;
                        this.spinStopCallback = undefined;
                        this.onFastScrollEffectStartCallback = undefined;
                        this.onFastScrollEffectStopCallback = undefined;
                        this.isFastStop = false;
                        this.isTurbo = false;
                        this.isInterrupt = false;
                        this.abortIterator = undefined;
                        this.numberOfRow = undefined;
                        this.numberOfColumn = undefined;
                        this.slot = undefined;
                        this.maxSpeed = undefined;
                        this.startScrollerConfig = undefined;
                        this.turboSpeedFactor = undefined;
                        this.turboStartScrollerConfig = undefined;
                        this.scrollInterval = undefined;
                        this.stopScrollInterval = undefined;
                        this.interruptScrollStopScrollerConfig = undefined;
                        this.orl = [];
                        this.allSymbolIndexList = undefined;
                    }
                    a.prototype.init = function (a) {
                        var b = this;
                        var c = this.numberOfColumn = a.column;
                        var d = this.numberOfRow = a.row;
                        var i = a.slotItemSize.height;
                        var k = a.slotItemSize.width;
                        var n = this.maxSpeed = a.maxSpeed;
                        var o = cc.size(k, i);
                        var p = this.startScrollerConfig = __assign(__assign({}, a.startScrollerConfig), {
                            maxSpeed: n
                        });
                        var q = __assign(__assign({}, a.stopScrollerConfig), {
                            maxSpeed: n
                        });
                        this.turboSpeedFactor = a.turboSpeedFactor;
                        this.turboStartScrollerConfig = a.turboStartScrollerConfig;
                        this.scrollInterval = a.scrollInterval;
                        this.stopScrollInterval = a.stopScrollInterval;
                        this.interruptScrollStopScrollerConfig = a.interruptScrollStopScrollerConfig;
                        var r = a.containerNode;
                        r.height = i * d;
                        r.width = k * c;
                        var s = {
                            containerNode: r,
                            numberOfColumn: c,
                            maskMargin: a.maskMargin,
                            dontGenerateMask: a.dontGenerateMask,
                            slotScrollerController: g.default,
                            slotView: f.default
                        };
                        var t = this.slot = h.generateSlot(s);
                        var u = this.slotHelper = new l.default();
                        var v = new m.default();
                        this.orl = a.reelData;
                        u.init({
                            slotItem: j.default,
                            slotItemPool: v,
                            numberOfColumn: c,
                            numberOfRow: d,
                            topBufferRow: a.topExtraBufferRow,
                            bottomBufferRow: a.bottomExtraBufferRow,
                            sortBottomItemToFront: true,
                            getSymbolZOrder: this.getSymbolZOrder.bind(this),
                            stopScroller: a.stopScroller,
                            startScrollerConfig: p,
                            stopScrollerConfig: q,
                            reelData: a.reelData,
                            symbolSize: o,
                            normalSymbolScale: a.symbolNormalScale,
                            blurSymbolScale: a.symbolBlurScale,
                            slotViews: t.slotViews,
                            slotScrollerController: t.slotScrollerController,
                            normalSymbolSpriteFrame: a.normalSymbolSpriteFrame,
                            blurSymbolSpriteFrame: a.blurSymbolSpriteFrame,
                            getRandomSymbol: a.getRandomSymbol,
                            calculateStopIndexOffset: a.calculateStopIndexOffset,
                            calculateStopDistanceIndexOffset: a.calculateStopDistanceIndexOffset,
                            runScroller: this.runScroller.bind(this),
                            blurSpeedFactor: a.blurSpeedFactor,
                            unblurSpeedFactor: a.unblurSpeedFactor,
                            slotDataHandler: new e.default()
                        });
                        u.setOnReelStopCallback(function (c) {
                            var d = a.onReelStopCallbackWrapper;
                            if (d) {
                                d(c);
                            }
                            b.onReelStopCallbackWrapper(c);
                        });
                        u.setOnSlotStopCallback(function () {
                            var c = a.onSpinStopCallbackWrapper;
                            if (c) {
                                c();
                            }
                            b.onSpinStopCallbackWrapper();
                        });
                        this.extraInitialization();
                    };
                    a.prototype.extraInitialization = function () { };
                    a.prototype.preSpinningCleanup = function () { };
                    Object.defineProperty(a.prototype, "onReelStart", {
                        set: function (a) {
                            this.onReelStartCallback = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(a.prototype, "onSpinStop", {
                        set: function (a) {
                            this.spinStopCallback = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(a.prototype, "onFastScrollEffectStart", {
                        set: function (a) {
                            this.onFastScrollEffectStartCallback = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(a.prototype, "onFastScrollEffectStop", {
                        set: function (a) {
                            this.onFastScrollEffectStopCallback = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    a.prototype.onReelStopCallbackWrapper = function () { };
                    a.prototype.onSpinStopCallbackWrapper = function () {
                        this.abortIterator = undefined;
                        if (this.spinStopCallback) {
                            this.spinStopCallback();
                        }
                    };
                    a.prototype.reloadData = function (a) {
                        var b = this.slotHelper;
                        this.setReelData(a);
                        b.reloadSlot();
                    };
                    a.prototype.spin = function (a) {
                        if (a === undefined) {
                            a = false;
                        }
                        this.preSpinningCleanup();
                        var b = this.slotHelper;
                        if (this.isTurbo !== a) {
                            this.isTurbo = a;
                            for (var c = this.maxSpeed * (a ? this.turboSpeedFactor : 1), d = a ? this.turboStartScrollerConfig : this.startScrollerConfig, e = 0; e < this.numberOfColumn; e++) {
                                b.setStartScrollerConfig(e, __assign({
                                    maxSpeed: c
                                }, d));
                                b.setStopScrollerConfig(e, {
                                    maxSpeed: c
                                });
                            }
                        }
                        b.startScroll();
                        this.isInterrupt = false;
                        this.isFastStop = false;
                        this.abortIterator = undefined;
                        this.extraSpinInitialization();
                        if (a) {
                            this.setFastStop(false);
                        }
                    };
                    a.prototype.stopSpin = function () {
                        this.slotHelper.stopScroll();
                    };
                    a.prototype.setReelData = function (a) {
                        this.setReelData(a);
                    };
                    a.prototype.setFastStop = function (a) {
                        if (a === undefined) {
                            a = false;
                        }
                        this.isInterrupt = a;
                        this.isFastStop = true;
                    };
                    a.prototype.unsetFastStop = function () {
                        this.isInterrupt = false;
                        this.isFastStop = false;
                    };
                    a.prototype.fastStop = function () {
                        this.isFastStop = true;
                        this.extraFastStopAction();
                        this.runInterrupt();
                    };
                    a.prototype.extraFastStopAction = function () { };
                    a.prototype.getFastStop = function () {
                        return this.isFastStop;
                    };
                    a.prototype.changeSymbol = function (a, b) {
                        this.slotHelper.changeSymbol(a, b);
                    };
                    a.prototype.getSlotItemsWorldPosition = function (a) {
                        var b;
                        return (b = this.slotHelper).getItemsWorldPositionAR.apply(b, __spread(a));
                    };
                    a.prototype.setSlotItemsVisible = function (a, b) {
                        var c;
                        (c = this.slotHelper.slotItemHandler).getSlotItems.apply(c, __spread(b)).forEach(function (b) {
                            if (b) {
                                b.setActive(a);
                            }
                        });
                    };
                    a.prototype.getSlotItemByIndices = function (a) {
                        var b;
                        return (b = this.slotHelper.slotItemHandler).getSlotItems.apply(b, __spread(a));
                    };
                    Object.defineProperty(a.prototype, "mask", {
                        get: function () {
                            return this.slot.mask;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(a.prototype, "slotViewNode", {
                        get: function () {
                            return this.slot.slotScrollerController.node;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    a.prototype.getSymbolZOrder = function (a) {
                        if (a === k.SLOT_INDEX.WILD) {
                            return 2;
                        } else {
                            return 1;
                        }
                    };
                    a.prototype.runScroller = function (a, b) {
                        if (a === i.SlotState.START) {
                            return this.runStartScroller(b);
                        } else if (a === i.SlotState.STOP) {
                            return this.runStopScroller(b);
                        } else {
                            return undefined;
                        }
                    };
                    a.prototype.runStartScroller = function (a) {
                        var b = this;
                        var c = this.onReelStartCallback;
                        if (!this.isTurbo && this.scrollInterval !== 0) {
                            var d = 0;
                            var e = this.scheduleIterator(function (b, e) {
                                a(b);
                                if (c) {
                                    c(b);
                                }
                                d++;
                                e();
                            }, this.scrollInterval, this.numberOfColumn);
                            return function () {
                                e();
                                for (var a = d; a < b.numberOfColumn; a++) {
                                    if (c) {
                                        c(a);
                                    }
                                }
                            };
                        }
                        for (var f = 0; f < this.numberOfColumn; f++) {
                            a(f);
                            if (c) {
                                c(f);
                            }
                        }
                    };
                    a.prototype.runStopScroller = function (a) {
                        var b = this;
                        if (this.isFastStop) {
                            this.runInterrupt();
                        } else {
                            var c;
                            c = function (c, d) {
                                if (b.isFastStop) {
                                    b.runInterrupt();
                                } else {
                                    a(c);
                                    if (d) {
                                        d();
                                    }
                                }
                            };
                            var d = this.scheduleIterator(c, this.stopScrollInterval, this.numberOfColumn);
                            this.abortIterator = d;
                        }
                    };
                    a.prototype.runInterrupt = function () {
                        for (var a = 0; a < this.numberOfColumn; a++) {
                            this.slotHelper.scrollerAtIndex(a).updateRunTimeConfig(this.interruptScrollStopScrollerConfig);
                        }
                        var b = this.abortIterator;
                        if (b) {
                            b();
                        }
                        this.slotHelper.instantStopScroll();
                        this.slotHelper.reloadSlot();
                    };
                    a.prototype.setReelData = function (a) {
                        this.orl = a;
                        this.slotHelper.setReelData(a);
                    };
                    a.prototype.extraSpinInitialization = function () { };
                    a.prototype.scheduleIterator = function (a, b, c, d) {
                        var e = 0;
                        var f = 0;
                        function g() {
                            if (++f === c && d) {
                                d();
                            }
                        }
                        function h() {
                            a(e, g);
                            e++;
                        }
                        h();
                        if (c >= 2) {
                            n.getSharedScheduler().schedule(h, b, c - 2);
                        }
                        return function () {
                            if (c >= 2) {
                                n.getSharedScheduler().unschedule(h);
                            }
                            d = undefined;
                        };
                    };
                    return a;
                }();
                c.SlotHandler = o;
                cc._RF.pop();
            }
        }, {
            GSlotHelper: "GSlotHelper",
            GSlotItem: "GSlotItem",
            GSlotItemPool: "GSlotItemPool",
            SlotDataHandler: "SlotDataHandler",
            SlotGenerator: "SlotGenerator",
            SlotHelper: "SlotHelper",
            SlotProperties: "SlotProperties",
            SlotScrollerController: "SlotScrollerController",
            SlotView: "SlotView",
            Utils: "Utils"
        }],
        SlotHelper: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "f967cJUpgBPeZxa4E081RBj", "SlotHelper")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.SlotState = undefined;
                var e;
                var f = a("SlotItem");
                var g = a("SlotItemPool");
                var h = a("SlotItemHandler");
                var i = a("SlotDataHandler");
                var j = a("BaseScroller");
                var k = a("DefaultStartScroller");
                var l = a("DefaultStopScroller");
                (function (a) {
                    a[a.IDLE = 0] = "IDLE";
                    a[a.START = 1] = "START";
                    a[a.STOP = 2] = "STOP";
                })(e = c.SlotState || (c.SlotState = {}));
                var m = {
                    spinType: undefined,
                    reelData: undefined,
                    symbolSize: undefined,
                    numberOfColumn: undefined,
                    numberOfRow: undefined,
                    normalSymbolSpriteFrame: undefined,
                    blurSymbolSpriteFrame: undefined,
                    slotViews: undefined,
                    slotScrollerController: undefined,
                    getSymbolSize: undefined,
                    getRandomSymbol: undefined,
                    runScroller: undefined,
                    topBufferRow: 1,
                    bottomBufferRow: 1,
                    normalSymbolScale: 1,
                    blurSymbolScale: 1,
                    blurSpeedFactor: 0.9,
                    unblurSpeedFactor: 0.9,
                    slotItem: f.default,
                    startScroller: k.default,
                    stopScroller: l.default
                };
                var n = m;
                var o = function () {
                    function a() {
                        this.nm = undefined;
                        this.om = undefined;
                        this.cm = undefined;
                        this.hm = undefined;
                        this.rm = undefined;
                        this.am = undefined;
                        this.um = undefined;
                        this.ie = undefined;
                        this.lm = undefined;
                        this.fm = undefined;
                        this.te = undefined;
                        this.dm = undefined;
                        this.vm = undefined;
                        this._m = undefined;
                        this.F_ = undefined;
                        this.mm = undefined;
                    }
                    var b = {
                        get: function () {
                            return this.dm;
                        },
                        enumerable: false,
                        configurable: true
                    };
                    Object.defineProperty(a.prototype, "slotDataHandler", b);
                    Object.defineProperty(a.prototype, "slotItemPool", {
                        get: function () {
                            return this.vm;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(a.prototype, "slotItemHandler", {
                        get: function () {
                            return this._m;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(a.prototype, "slotViews", {
                        get: function () {
                            return this.ie;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(a.prototype, "isSlotViewBlur", {
                        get: function () {
                            return this.cm;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    a.prototype.init = function (a) {
                        n.getScroller = this.getScroller.bind(this);
                        n.willChangeSlotState = this.willChangeSlotState.bind(this);
                        n.onSlotStateEnd = this.onScrollerEnd.bind(this);
                        n.slotViewGetItem = this.slotViewGetItem.bind(this);
                        n.slotViewReleaseItem = this.slotViewReleaseItem.bind(this);
                        n.onScrollerAccelerate = this.onScrollerAccelerate.bind(this);
                        n.onScrollerDecelerate = this.onScrollerDecelerate.bind(this);
                        n.onScrollerStop = this.onScrollerStop.bind(this);
                        var b = (a = __assign(__assign({}, n), a)).symbolSize;
                        var c = this.nm = a.numberOfColumn;
                        var d = this.om = a.numberOfRow;
                        var f = this.ie = a.slotViews;
                        var k = this.lm = a.slotScrollerController;
                        var l = !!a.getSymbolSize;
                        this.hm = a.blurSpeedFactor;
                        this.rm = a.unblurSpeedFactor;
                        var m = a.topBufferRow;
                        var o = a.bottomBufferRow;
                        this.am = m * (l ? 2 : 1) + this.om;
                        this.um = o * (l ? 2 : 1) + 1;
                        for (var p = this.cm = [], q = 0; q < d; q++) {
                            p[q] = false;
                        }
                        (this.vm = a.slotItemPool ? a.slotItemPool : new g.default()).init({
                            slotItem: a.slotItem,
                            normalSpriteFrame: a.normalSymbolSpriteFrame,
                            blurSpriteFrame: a.blurSymbolSpriteFrame,
                            normalScale: a.normalSymbolScale,
                            blurScale: a.blurSymbolScale,
                            getSymbolZOrder: a.getSymbolZOrder
                        });
                        (this._m = a.slotItemHandler ? a.slotItemHandler : new h.default()).init(d);
                        (this.dm = a.slotDataHandler ? a.slotDataHandler : new i.default()).init({
                            slotViews: f,
                            reelData: a.reelData,
                            largeSymbolDatas: a.largeSymbolDatas,
                            spinType: a.spinType,
                            numberOfColumn: c,
                            numberOfRow: d,
                            topBufferRow: m,
                            bottomBufferRow: o,
                            getSymbolSize: a.getSymbolSize,
                            getRandomSymbol: a.getRandomSymbol
                        });
                        var r = this.fm = [];
                        var s = this.te = [];
                        var t = this.scrollerGetStopDistance.bind(this);
                        var u = this.scrollerScroll.bind(this);
                        for (q = 0; q < f.length; q++) {
                            var v = {
                                functionalRow: d,
                                symbolSize: b,
                                getItem: a.slotViewGetItem,
                                releaseItem: a.slotViewReleaseItem,
                                sortBottomItemToFront: a.sortBottomItemToFront
                            };
                            var x = {
                                scrollCallback: u
                            };
                            f[q].init(v);
                            (r[q] = new a.startScroller(__assign(x, a.startScrollerConfig))).on(j.SCROLLER_EVENT.ACCELERATE, a.onScrollerAccelerate);
                            var y = {
                                scrollCallback: u,
                                getStopDistance: t
                            };
                            var z = s[q] = new a.stopScroller(__assign(y, a.stopScrollerConfig));
                            z.on(j.SCROLLER_EVENT.DECELERATE, a.onScrollerDecelerate);
                            z.on(j.SCROLLER_EVENT.END, a.onScrollerStop);
                        }
                        var A = {
                            getScroller: a.getScroller,
                            releaseScroller: a.releaseScroller,
                            runScroller: a.runScroller,
                            willChangeSlotState: a.willChangeSlotState,
                            didChangeSlotState: a.didChangeSlotState,
                            onSlotStateEnd: a.onSlotStateEnd
                        };
                        this.pm();
                        k.init(f, A);
                        k.setSlotState(e.IDLE);
                    };
                    a.prototype.changeSymbol = function (a, b) {
                        var c = this._m.getSlotItems(a)[0];
                        this.vm.updateSlotItemSymbolIndex(c, b);
                    };
                    a.prototype.setOnReelStopCallback = function (a) {
                        this.F_ = a;
                    };
                    a.prototype.setOnSlotStopCallback = function (a) {
                        this.mm = a;
                    };
                    a.prototype.setSpinType = function (a) {
                        this.dm.setSpinType(a);
                    };
                    a.prototype.setReelData = function (a, b) {
                        this.dm.setReelData(a, b);
                    };
                    a.prototype.updateReelData = function (a, b) {
                        this.dm.updateReelData(a, b);
                    };
                    a.prototype.getReelStopPosition = function (a) {
                        return this.dm.getReelDataPosition(a);
                    };
                    a.prototype.getFormattedData = function (a) {
                        return this.dm.getFormattedData(a);
                    };
                    a.prototype.overwriteFormattedData = function (a, b, c) {
                        this.dm.overwriteFormattedData(a, b, c);
                    };
                    a.prototype.reloadSlot = function () {
                        for (var a = this.dm, b = this.ie, c = 0, d = this.ie.length; c < d; c++) {
                            a.setReelDataPosition(c, 0);
                            b[c].reloadItems();
                        }
                        this.pm();
                    };
                    a.prototype.setFunctionalRow = function (a) {
                        this.ie.forEach(function (b) {
                            return b.setFunctionalRow(a);
                        });
                    };
                    a.prototype.setSlotAnchor = function (a) {
                        this.ie.forEach(function (b) {
                            return b.setSlotAnchor(a);
                        });
                    };
                    a.prototype.setItemsVisible = function (a) {
                        for (var b, c = [], d = 1; d < arguments.length; d++) {
                            c[d - 1] = arguments[d];
                        }
                        (b = this._m).getSlotItems.apply(b, __spread(c)).forEach(function (b) {
                            return b.visible = a;
                        });
                    };
                    a.prototype.setItemsBlur = function (a, b) {
                        var c = this.ie[b];
                        this.cm[b] = a;
                        for (var d = c.getVisibleItems(), e = 0, f = d.length; e < f; e++) {
                            d[e].setBlur(a);
                        }
                    };
                    a.prototype.getItemsVisible = function () {
                        for (var a, b = [], c = 0; c < arguments.length; c++) {
                            b[c] = arguments[c];
                        }
                        var d = [];
                        (a = this._m).getSlotItems.apply(a, __spread(b)).forEach(function (a) {
                            return d.push(a.visible);
                        });
                        return d;
                    };
                    a.prototype.getItemsWorldPositionAR = function () {
                        for (var a, b = [], c = 0; c < arguments.length; c++) {
                            b[c] = arguments[c];
                        }
                        var d = cc.v2();
                        var e = [];
                        (a = this._m).getSlotItems.apply(a, __spread(b)).forEach(function (a) {
                            return e.push(a.node.convertToWorldSpaceAR(d));
                        });
                        return e;
                    };
                    a.prototype.scrollerAtIndex = function (a) {
                        return this.lm.scrollerAtIndex(a);
                    };
                    a.prototype.indexOfScroller = function (a) {
                        return this.lm.indexOfScroller(a);
                    };
                    a.prototype.getSlotState = function () {
                        return this.lm.getSlotState();
                    };
                    a.prototype.startScroll = function () {
                        var a = this.lm;
                        if (a.getSlotState() === e.IDLE) {
                            this.dm.reset();
                            a.setSlotState(e.START);
                        }
                    };
                    a.prototype.stopScroll = function () {
                        var a = this.lm;
                        if (a.getSlotState() === e.START) {
                            a.setSlotState(e.STOP);
                        }
                    };
                    a.prototype.instantStopScroll = function () {
                        var a = this.lm;
                        if (a.getSlotState() !== e.IDLE) {
                            a.setSlotState(e.STOP);
                            a.endCurrentState();
                        }
                    };
                    a.prototype.setStartScrollerConfig = function (a, b) {
                        this.fm[a].setConfig(b);
                    };
                    a.prototype.setStopScrollerConfig = function (a, b) {
                        this.te[a].setConfig(b);
                    };
                    a.prototype.updateStartScrollerRunTimeConfig = function (a, b) {
                        this.fm[a].updateRunTimeConfig(b);
                    };
                    a.prototype.updateStopScrollerRunTimeConfig = function (a, b) {
                        this.te[a].updateRunTimeConfig(b);
                    };
                    a.prototype.pm = function () {
                        var a = this._m;
                        a.reset();
                        this.ie.forEach(function (b, c) {
                            b.getFunctionalItems().forEach(function (b) {
                                if (b.symbolIndex !== -1) {
                                    a.setSlotItem(c, b);
                                }
                            });
                        });
                    };
                    a.prototype.slotViewGetItem = function (a, b) {
                        var c = this.dm.getItemInfo(a, b);
                        var d = this.ie.indexOf(a);
                        var e = this.vm.getSlotItem(c.symbolIndex, this.cm[d]);
                        e.positionIndex = c.positionIndex;
                        e.symbolColumn = c.symbolColumn;
                        e.symbolRow = c.symbolRow;
                        return e;
                    };
                    a.prototype.slotViewReleaseItem = function (a, b) {
                        this.vm.releaseSlotItem(b);
                    };
                    a.prototype.scrollerScroll = function (a, b) {
                        var c = this.lm.indexOfScroller(a);
                        this.ie[c].changePositionY(b);
                    };
                    a.prototype.scrollerGetStopDistance = function (a) {
                        var b;
                        var c = this.lm.indexOfScroller(a);
                        var d = this.ie[c];
                        b = a.getRunTimeConfig().maxSpeed > 0 ? d.getNextBottomIndex(this.am) : d.getNextTopIndex(this.um);
                        this.dm.setReelDataPosition(c, b);
                        return d.getDistanceToIndex(b);
                    };
                    a.prototype.onScrollerAccelerate = function (a) {
                        var b = a.speedFactor;
                        var c = this.cm;
                        var d = this.lm.indexOfScroller(a.scroller);
                        if (b > this.hm && !c[d]) {
                            this.setItemsBlur(true, d);
                        }
                    };
                    a.prototype.onScrollerDecelerate = function (a) {
                        var b = a.speedFactor;
                        var c = this.cm;
                        var d = this.lm.indexOfScroller(a.scroller);
                        if (b < this.rm && c[d]) {
                            this.setItemsBlur(false, d);
                        }
                    };
                    a.prototype.onScrollerStop = function (a) {
                        var b = this.lm.indexOfScroller(a.scroller);
                        var c = this.ie[b];
                        var d = this._m;
                        c.resetPositionIndex();
                        c.getFunctionalItems().forEach(function (a) {
                            if (a.symbolIndex !== -1) {
                                d.setSlotItem(b, a);
                            }
                        });
                        var e = this.F_;
                        if (e) {
                            e(b);
                        }
                    };
                    a.prototype.getScroller = function (a, b, c) {
                        if (c === e.START) {
                            return this.fm[a];
                        } else if (c === e.STOP) {
                            return this.te[a];
                        } else {
                            return undefined;
                        }
                    };
                    a.prototype.willChangeSlotState = function (a, b) {
                        if (a === e.IDLE && b === e.STOP) {
                            this.lm.endCurrentState();
                        }
                    };
                    a.prototype.onScrollerEnd = function (a) {
                        if (a === e.STOP) {
                            this.lm.setSlotState(e.IDLE);
                            var b = this.mm;
                            if (b) {
                                b();
                            }
                        }
                    };
                    return a;
                }();
                c.default = o;
                cc._RF.pop();
            }
        }, {
            BaseScroller: "BaseScroller",
            DefaultStartScroller: "DefaultStartScroller",
            DefaultStopScroller: "DefaultStopScroller",
            SlotDataHandler: "SlotDataHandler",
            SlotItem: "SlotItem",
            SlotItemHandler: "SlotItemHandler",
            SlotItemPool: "SlotItemPool"
        }],
        SlotItemHandler: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "cbfb0c2igtO8oHCc6bYN0xe", "SlotItemHandler")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = function () {
                    function a() {
                        this.numberOfRow = undefined;
                        this.functionalSlotItems = undefined;
                    }
                    a.prototype.init = function (a) {
                        this.numberOfRow = a;
                        this.functionalSlotItems = [];
                    };
                    a.prototype.reset = function () {
                        this.functionalSlotItems.length = 0;
                    };
                    a.prototype.setSlotItem = function (a, b, c) {
                        if (c === undefined) {
                            c = 0;
                        }
                        var d = this.numberOfRow;
                        var e = d - 1 - (b.positionIndex - c);
                        if (b.symbolRow === 1 && b.symbolColumn === 1) {
                            this.functionalSlotItems[a * this.numberOfRow + e] = b;
                        } else {
                            for (var f = Math.min(d - 1, e), g = Math.max(0, e - b.symbolRow + 1), h = a + b.symbolColumn - 1, i = a; i <= h; i++) {
                                for (var j = g; j <= f; j++) {
                                    this.functionalSlotItems[i * d + j] = b;
                                }
                            }
                        }
                    };
                    a.prototype.getSlotItems = function () {
                        for (var a = [], b = 0; b < arguments.length; b++) {
                            a[b] = arguments[b];
                        }
                        var c = this.functionalSlotItems;
                        if (a.length) {
                            var d = [];
                            a.forEach(function (a) {
                                d.push(c[a]);
                            });
                            return d;
                        }
                        return __spread(c);
                    };
                    return a;
                }();
                c.default = e;
                cc._RF.pop();
            }
        }, {}],
        SlotItemPool: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "4cb49tzG5ZEy6QJghScmBDK", "SlotItemPool")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = function () {
                    function a() {
                        this.slotItemConstructor = undefined;
                        this.slotItemPool = undefined;
                        this.normalSpriteFrames = undefined;
                        this.blurSpriteFrames = undefined;
                        this.normalScale = undefined;
                        this.blurScale = undefined;
                        this.getSymbolZOrder = undefined;
                    }
                    a.prototype.init = function (a) {
                        this.slotItemConstructor = a.slotItem;
                        var b = a.normalSpriteFrame;
                        this.normalSpriteFrames = b[0] instanceof Array ? b[0] : b;
                        var c = a.blurSpriteFrame;
                        this.blurSpriteFrames = c ? c[0] instanceof Array ? c[0] : c : this.normalSpriteFrames;
                        this.normalScale = a.normalScale === undefined ? 1 : a.normalScale;
                        this.blurScale = a.blurScale === undefined ? 1 : a.blurScale;
                        this.getSymbolZOrder = a.getSymbolZOrder;
                        this.slotItemPool = new cc.NodePool(a.slotItem);
                    };
                    a.prototype.getSlotItem = function (a, b) {
                        if (b === undefined) {
                            b = false;
                        }
                        if (a < 0) {
                            var c = new cc.Node().addComponent(this.slotItemConstructor);
                            c.symbolIndex = a;
                            return c;
                        }
                        var d;
                        var e = this.slotItemPool;
                        (d = e.size() ? e.get().getComponent(this.slotItemConstructor) : this.createNewSlotItem()).setup(a, this.normalSpriteFrames[a], this.blurSpriteFrames[a], b);
                        return d;
                    };
                    a.prototype.releaseSlotItem = function (a) {
                        if (a.symbolIndex < 0) {
                            a.node.destroy();
                        } else {
                            this.slotItemPool.put(a.node);
                        }
                    };
                    a.prototype.updateSlotItemSymbolIndex = function (a, b) {
                        a.setup(b, this.normalSpriteFrames[b], this.blurSpriteFrames[b]);
                    };
                    a.prototype.createNewSlotItem = function () {
                        var a = new cc.Node("slot_item");
                        var b = new cc.Node("sprite");
                        b.parent = a;
                        var c = b.addComponent(cc.Sprite);
                        c.sizeMode = cc.Sprite.SizeMode.RAW;
                        c.trim = false;
                        var d = a.addComponent(this.slotItemConstructor);
                        var e = {
                            sprite: c,
                            normalScale: this.normalScale,
                            blurScale: this.blurScale,
                            getSymbolZOrder: this.getSymbolZOrder
                        };
                        d.init(e);
                        return d;
                    };
                    return a;
                }();
                c.default = e;
                cc._RF.pop();
            }
        }, {}],
        SlotItem: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "cba1dJ8KHJAlrAxCvyls0+u", "SlotItem")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("SlotSymbol");
                var f = cc._decorator.ccclass;
                var g = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.positionIndex = 0;
                        b.sprite = undefined;
                        b.normalSpriteFrame = undefined;
                        b.blurSpriteFrame = undefined;
                        b.normalScale = undefined;
                        b.blurScale = undefined;
                        b.getSymbolZOrder = undefined;
                        return b;
                    }
                    __extends(b, a);
                    Object.defineProperty(b.prototype, "visible", {
                        get: function () {
                            return this.sprite && this.sprite.node.active;
                        },
                        set: function (a) {
                            if (this.sprite) {
                                this.sprite.node.active = a;
                            }
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.init = function (a) {
                        this.sprite = a.sprite;
                        var b = this.normalScale = a.normalScale === undefined ? 1 : a.normalScale;
                        this.blurScale = a.blurScale === undefined ? b : a.blurScale;
                        this.getSymbolZOrder = a.getSymbolZOrder;
                    };
                    b.prototype.setup = function (a, b, c, d) {
                        if (d === undefined) {
                            d = false;
                        }
                        this.symbolIndex = a;
                        this.normalSpriteFrame = b;
                        this.blurSpriteFrame = c;
                        this.zOrder = this.getSymbolZOrder ? this.getSymbolZOrder(a) : 0;
                        this.setZIndex();
                        this.setBlur(d);
                    };
                    b.prototype.setZIndex = function (a) {
                        if (a === undefined) {
                            a = 0;
                        }
                        this.node.zIndex = a + this.zOrder * 100;
                    };
                    b.prototype.unuse = function () {
                        this.normalSpriteFrame = undefined;
                        this.blurSpriteFrame = undefined;
                        this.visible = true;
                        a.prototype.unuse.call(this);
                    };
                    b.prototype.setBlur = function (a) {
                        var b = this.sprite;
                        if (b) {
                            b.spriteFrame = a ? this.blurSpriteFrame : this.normalSpriteFrame;
                            b.node.scale = a ? this.blurScale : this.normalScale;
                        }
                    };
                    return __decorate([f], b);
                }(e.default);
                c.default = g;
                cc._RF.pop();
            }
        }, {
            SlotSymbol: "SlotSymbol"
        }],
        SlotProperties: [function (a, b, c) {
            'use strict';

            var d = {
                value: true
            };
            if (!cc._RF.push(b, "23a69zGpqhNhJndUhrzZ/2c", "SlotProperties")) {
                Object.defineProperty(c, "__esModule", d);
                c.tenShake = c.createSymbolShake = c.parseRespinReelData = c.getSlotWildsAtReel = c.getSlotWilds = c.slotContainsWild = c.getRandomSlotSymbol = c.getIndicesFromReel = c.sortReelIndex = c.getRowFromIndex = c.getColumnFromIndex = c.getFilteredWinPositions = c.SLOT_INDEX = c.SLOT_ITEM_IMAGE_SIZE = c.MAX_NO_OF_BONUS_SLOT_ITEMS = c.BONUS_SYMBOL_SCALE = c.BONUS_SLOT_COLUMN = c.BONUS_SLOT_ROW = c.BONUS_SLOT_ITEM_SIZE = c.NO_OF_SLOT_ITEMS = c.BLUR_SCALE = c.NORMAL_SYMBOL_SCALE = c.NORMAL_SLOT_COLUMN = c.NORMAL_SLOT_ROW = c.NORMAL_SLOT_ITEM_SIZE = undefined;
                c.NORMAL_SLOT_ITEM_SIZE = {
                    width: 320,
                    height: 305
                };
                c.NORMAL_SLOT_ROW = 3;
                c.NORMAL_SLOT_COLUMN = 3;
                c.NORMAL_SYMBOL_SCALE = {
                    x: 1,
                    y: 1
                };
                c.BLUR_SCALE = {
                    x: 2,
                    y: 2
                };
                c.NO_OF_SLOT_ITEMS = 9;
                c.BONUS_SLOT_ITEM_SIZE = {
                    width: 1032,
                    height: 900
                };
                c.BONUS_SLOT_ROW = 1;
                c.BONUS_SLOT_COLUMN = 1;
                c.BONUS_SYMBOL_SCALE = {
                    x: 3.043,
                    y: 2.916
                };
                c.MAX_NO_OF_BONUS_SLOT_ITEMS = 2;
                c.SLOT_ITEM_IMAGE_SIZE = {
                    width: 406,
                    height: 406
                };
                c.SLOT_INDEX = cc.Enum({
                    WILD: 0,
                    SCATTER: 1,
                    INGOTS: 2,
                    RUYI: 3,
                    MONEYBAG: 4,
                    REDPACKETS: 5,
                    FIRECRACKER: 6,
                    ORANGE: 7,
                    EMPTY: 99
                });
                c.getFilteredWinPositions = function (b) {
                    var c = [];
                    b.winPositions.map(function (a) {
                        return b.getWinLinesByPosition(a);
                    }).forEach(function (a) {
                        c.push.apply(c, __spread(a));
                    });
                    return c.filter(function (a, b, c) {
                        return c.indexOf(a) === b;
                    });
                };
                c.getColumnFromIndex = function (b, d) {
                    if (d === undefined) {
                        d = c.NORMAL_SLOT_ROW;
                    }
                    return Math.floor(b / d);
                };
                c.getRowFromIndex = function (b, d) {
                    if (d === undefined) {
                        d = c.NORMAL_SLOT_ROW;
                    }
                    return b % d;
                };
                c.sortReelIndex = function (b) {
                    var c = b;
                    c.sort(function (a, b) {
                        return a - b;
                    });
                    return c;
                };
                c.getIndicesFromReel = function (b, d) {
                    var a = d * c.NORMAL_SLOT_COLUMN;
                    return [b[0 + a], b[1 + a], b[2 + a]];
                };
                c.getRandomSlotSymbol = function (b, c) {
                    if (c === undefined) {
                        c = 0;
                    }
                    var d = Math.floor(7 + Math.random() * (c - 7));
                    if (b && d === b) {
                        d = d + 1 > c ? b === c ? 7 : c : d + 1;
                    }
                    return d;
                };
                c.slotContainsWild = function (a) {
                    return a.includes(c.SLOT_INDEX.WILD);
                };
                c.getSlotWilds = function (b) {
                    var d = [];
                    b.forEach(function (a, b) {
                        if (a === c.SLOT_INDEX.WILD) {
                            d.push(b);
                        }
                    });
                    return d;
                };
                c.getSlotWildsAtReel = function (b, d) {
                    var a = [];
                    [0 + d * c.NORMAL_SLOT_ROW, 1 + d * c.NORMAL_SLOT_ROW, 2 + d * c.NORMAL_SLOT_ROW].forEach(function (d) {
                        if (b[d] === c.SLOT_INDEX.WILD) {
                            a.push(d);
                        }
                    });
                    return a;
                };
                c.parseRespinReelData = function (b) {
                    var d = new (Array.bind.apply(Array, __spread([undefined], b)))();
                    d[3] = d[4] = d[5] = c.SLOT_INDEX.EMPTY;
                    return d;
                };
                c.createSymbolShake = function () {
                    var a = (Math.floor(Math.random()) + 30) * 0.001;
                    return cc.repeatForever(cc.sequence(cc.moveBy(a, cc.v2(-8.5, 0)), cc.moveBy(a, cc.v2(11, 1.5)), cc.moveBy(a, cc.v2(-7, -4)), cc.moveBy(a, cc.v2(-9, 4.5)), cc.moveBy(a, cc.v2(10, -2)), cc.moveBy(a, cc.v2(-10, -1.5)), cc.moveBy(a, cc.v2(-1, 2.5)), cc.moveBy(a, cc.v2(8.5, -1))));
                };
                c.tenShake = function () {
                    var a = (Math.floor(Math.random()) + 30) * 0.001;
                    return cc.sequence(cc.moveBy(a, cc.v2(-8.5, 0)), cc.moveBy(a, cc.v2(11, 1.5)), cc.moveBy(a, cc.v2(-7, -4)), cc.moveBy(a, cc.v2(-9, 4.5)), cc.moveBy(a, cc.v2(10, -2)), cc.moveBy(a, cc.v2(-10, -1.5)), cc.moveBy(a, cc.v2(-1, 2.5)), cc.moveBy(a, cc.v2(8.5, -1)));
                };
                cc._RF.pop();
            }
        }, {}],
        "SlotScrollerController.spec": [function (a, b, c) {
            'use strict';

            var d = {
                value: true
            };
            if (!cc._RF.push(b, "e08af4I5BlAUaisYXf6Oz5Q", "SlotScrollerController.spec")) {
                Object.defineProperty(c, "__esModule", d);
                c.onStateChange = undefined;
                c.onStateChange = function (a) {
                    var b = System.get("automation") && System.get("automation").GameData;
                    if (a > 0 && b) {
                        b.emit("ScrollEvent", a === 1 ? "start" : "stop");
                    }
                };
                cc._RF.pop();
            }
        }, {}],
        SlotScrollerController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "3383aiogiFCOKC9u2Q0E3sA", "SlotScrollerController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("SlotScrollerController.spec");
                var f = a("AutomationDecorator");
                var g = cc._decorator.ccclass;
                var h = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.slotViews = undefined;
                        b.isEnded = true;
                        b.slotState = undefined;
                        b.pendingSlotState = undefined;
                        b.scrollers = [];
                        b.abortRunScroller = undefined;
                        b.bindedRunScrollerAtIndex = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.onEnable = function () {
                        if (this.pendingSlotState !== undefined) {
                            var a = this.pendingSlotState;
                            this.pendingSlotState = undefined;
                            var b = this.slotState;
                            if (b !== a) {
                                this.onStateChange(a, b);
                            }
                        }
                    };
                    b.prototype.onDisable = function () {
                        var b;
                        var a;
                        try {
                            for (var c = __values(this.scrollers), d = c.next(); !d.done; d = c.next()) {
                                var e = d.value;
                                if (!e.isEnded) {
                                    e.end();
                                }
                            }
                        } catch (c) {
                            var f = {
                                error: c
                            };
                            b = f;
                        } finally {
                            try {
                                if (d && !d.done && (a = c.return)) {
                                    a.call(c);
                                }
                            } finally {
                                if (b) {
                                    throw b.error;
                                }
                            }
                        }
                    };
                    b.prototype.update = function (a) {
                        var b;
                        var c;
                        var d;
                        var e;
                        if (this.isEnded) {
                            try {
                                for (var f = __values(this.scrollers), g = f.next(); !g.done; g = f.next()) {
                                    if ((n = g.value) && n.update) {
                                        n.update(a);
                                    }
                                }
                            } catch (a) {
                                var h = {
                                    error: a
                                };
                                b = h;
                            } finally {
                                try {
                                    if (g && !g.done && (c = f.return)) {
                                        c.call(f);
                                    }
                                } finally {
                                    if (b) {
                                        throw b.error;
                                    }
                                }
                            }
                        } else {
                            var i = true;
                            try {
                                for (var j = __values(this.scrollers), l = j.next(); !l.done; l = j.next()) {
                                    var n;
                                    if (n = l.value) {
                                        if (n.update) {
                                            n.update(a);
                                        }
                                        if (!n.isEnded) {
                                            i = false;
                                        }
                                    }
                                }
                            } catch (a) {
                                var o = {
                                    error: a
                                };
                                d = o;
                            } finally {
                                try {
                                    if (l && !l.done && (e = j.return)) {
                                        e.call(j);
                                    }
                                } finally {
                                    if (d) {
                                        throw d.error;
                                    }
                                }
                            }
                            if (i) {
                                this.isEnded = true;
                                this.abortRunScroller = undefined;
                                var p = this.callbacks.onSlotStateEnd;
                                if (p) {
                                    p(this.slotState);
                                }
                            }
                        }
                    };
                    b.prototype.init = function (a, b) {
                        this.slotViews = a;
                        this.callbacks = b;
                        this.bindedRunScrollerAtIndex = this.runScrollerAtIndex.bind(this);
                    };
                    b.prototype.scrollerAtIndex = function (a) {
                        return this.scrollers[a];
                    };
                    b.prototype.indexOfScroller = function (a) {
                        return this.scrollers.indexOf(a);
                    };
                    b.prototype.getSlotState = function () {
                        return this.slotState;
                    };
                    b.prototype.setSlotState = function (a) {
                        if (this.enabledInHierarchy) {
                            this.pendingSlotState = undefined;
                            var b = this.slotState;
                            if (b !== a) {
                                this.onStateChange(a, b);
                            }
                        } else {
                            this.pendingSlotState = a;
                        }
                    };
                    b.prototype.endCurrentState = function () {
                        var b;
                        var c;
                        var d = this.abortRunScroller;
                        if (d) {
                            this.abortRunScroller = undefined;
                            d();
                        }
                        try {
                            for (var e = __values(this.scrollers), f = e.next(); !f.done; f = e.next()) {
                                var g = f.value;
                                if (g) {
                                    g.end();
                                }
                            }
                        } catch (a) {
                            var h = {
                                error: a
                            };
                            b = h;
                        } finally {
                            try {
                                if (f && !f.done && (c = e.return)) {
                                    c.call(e);
                                }
                            } finally {
                                if (b) {
                                    throw b.error;
                                }
                            }
                        }
                    };
                    b.prototype.onStateChange = function (a, b) {
                        var c = this.slotViews;
                        var d = this.scrollers;
                        var e = this.callbacks;
                        if (e.willChangeSlotState) {
                            e.willChangeSlotState(a, b);
                        }
                        var f = this.abortRunScroller;
                        if (f) {
                            this.abortRunScroller = undefined;
                            f();
                        }
                        for (var g = 0, h = c.length; g < h; g++) {
                            var i = d[g];
                            var j = e.getScroller(g, c[g], a, b, i);
                            d[g] = j;
                            if (i) {
                                if (!i.isEnded) {
                                    i.end();
                                }
                                if (e.releaseScroller) {
                                    e.releaseScroller(g, i);
                                }
                            }
                            if (j) {
                                j.reset();
                                this.isEnded = false;
                            }
                        }
                        this.slotState = a;
                        if (e.didChangeSlotState) {
                            e.didChangeSlotState(a, b);
                        }
                        this.abortRunScroller = e.runScroller(a, this.bindedRunScrollerAtIndex);
                    };
                    b.prototype.runScrollerAtIndex = function (a) {
                        var b = this.scrollers[a];
                        if (b) {
                            b.run();
                        }
                    };
                    __decorate([f.automationDec({
                        func: e.onStateChange
                    })], b.prototype, "onStateChange", null);
                    return __decorate([g], b);
                }(cc.Component);
                c.default = h;
                cc._RF.pop();
            }
        }, {
            AutomationDecorator: "AutomationDecorator",
            "SlotScrollerController.spec": "SlotScrollerController.spec"
        }],
        SlotStateMachine: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "f1d53JqS5hGVbtNCz0JAnwN", "SlotStateMachine")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.StopStyle = c.SlotStates = undefined;
                var e;
                var f;
                var g = a("Utils");
                (function (a) {
                    a[a.SPINNING = 0] = "SPINNING";
                    a[a.STOPPING = 1] = "STOPPING";
                    a[a.STOPPED = 2] = "STOPPED";
                })(e = c.SlotStates || (c.SlotStates = {}));
                (function (a) {
                    a[a.NORMAL = 0] = "NORMAL";
                    a[a.FAST = 1] = "FAST";
                })(f = c.StopStyle || (c.StopStyle = {}));
                var h = function () {
                    function a() {
                        this.R = e.STOPPED;
                        this.bm = f.NORMAL;
                        this.Sm = false;
                        this.gm = false;
                        this.Cm = undefined;
                        this.ym = undefined;
                    }
                    a.prototype.getState = function () {
                        return this.R;
                    };
                    a.prototype.getStopStyle = function () {
                        return this.bm;
                    };
                    a.prototype.spin = function (a, b) {
                        if (this.R === e.STOPPED) {
                            this.R = e.SPINNING;
                            g.delayCallback(a)(this.Mm.bind(this));
                            this.Cm = g.delayCallback(b)(this.Am.bind(this));
                        }
                    };
                    a.prototype.markFastStop = function () {
                        if (this.R === e.SPINNING) {
                            this.bm = f.FAST;
                        }
                    };
                    a.prototype.unmarkFastStop = function () {
                        if (this.bm === f.FAST && this.R === e.SPINNING) {
                            this.bm = f.NORMAL;
                        }
                    };
                    a.prototype.fastStop = function (a) {
                        if (!(this.R !== e.SPINNING && this.R !== e.STOPPING)) {
                            this.bm = f.FAST;
                            this.R = e.STOPPING;
                            this.ym = a;
                            if (this.Sm) {
                                this.Im();
                            }
                        }
                    };
                    a.prototype.stop = function (a) {
                        if (this.R === e.SPINNING) {
                            if (this.bm === f.FAST) {
                                return;
                            }
                            this.R = e.STOPPING;
                            this.ym = a;
                            if (this.gm) {
                                this.wm();
                            }
                        }
                    };
                    a.prototype.stopped = function () {
                        this.R = e.STOPPED;
                        this.Gc();
                    };
                    a.prototype.Mm = function () {
                        this.Sm = true;
                        if (this.R === e.STOPPING && this.bm === f.FAST) {
                            this.Im();
                        }
                    };
                    a.prototype.Am = function () {
                        this.gm = true;
                        if (this.R === e.STOPPING && this.bm === f.NORMAL) {
                            this.wm();
                        }
                    };
                    a.prototype.Im = function () {
                        var a = this.Cm;
                        this.Cm = undefined;
                        if (a) {
                            a();
                        }
                        this.wm();
                    };
                    a.prototype.wm = function () {
                        var a = this.ym;
                        this.ym = undefined;
                        if (a) {
                            a();
                        }
                    };
                    a.prototype.Gc = function () {
                        this.bm = f.NORMAL;
                        this.Sm = false;
                        this.gm = false;
                        this.ym = undefined;
                        this.Cm = undefined;
                    };
                    return a;
                }();
                c.default = h;
                cc._RF.pop();
            }
        }, {
            Utils: "Utils"
        }],
        SlotSymbol: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "95c9eiMihhJPZX0QzA3D4uZ", "SlotSymbol")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("BVFramework");
                var f = cc._decorator.ccclass;
                var g = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.symbolRow = 1;
                        b.symbolColumn = 1;
                        b.Om = true;
                        b.Hm = false;
                        return b;
                    }
                    __extends(b, a);
                    Object.defineProperty(b.prototype, "visible", {
                        get: function () {
                            return this.node.active;
                        },
                        set: function (a) {
                            this.node.active = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.onLoad = function () {
                        if (this.Om) {
                            e.getGameContext().emit("Game.SymbolCreated", this);
                            this.Hm = true;
                        }
                    };
                    b.prototype.unuse = function () {
                        this.symbolRow = 1;
                        this.symbolColumn = 1;
                        if (this.Om && this.Hm) {
                            e.getGameContext().emit("Game.SymbolRemoved", this);
                        }
                    };
                    b.prototype.reuse = function () {
                        if (this.Om && this.Hm) {
                            e.getGameContext().emit("Game.SymbolCreated", this);
                        }
                    };
                    b.prototype.onDestroy = function () {
                        if (this.Om && this.Hm) {
                            e.getGameContext().emit("Game.SymbolRemoved", this);
                        }
                    };
                    b.prototype.enableEvent = function (a) {
                        this.Om = a;
                    };
                    return __decorate([f], b);
                }(cc.Component);
                c.default = g;
                cc._RF.pop();
            }
        }, {
            BVFramework: "BVFramework"
        }],
        SlotSystemModel: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "b8e48q3OlREgpqZ/fqigt7Z", "SlotSystemModel")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("SystemModel");
                var f = a("WinThresholdsModel");
                var g = function (a) {
                    function b() {
                        return a !== null && a.apply(this, arguments) || this;
                    }
                    __extends(b, a);
                    b.prototype.updateGameInfo = function (a) {
                        var b = a.cs;
                        var c = a.ml;
                        var d = a.mxl;
                        var e = a.fbbm;
                        var g = a.wt;
                        this._d = b || [];
                        this.md = c || [];
                        this.Bm = d;
                        this.Gm = e;
                        this.Nm = g ? new f.WinThresholdsModel(g) : undefined;
                    };
                    Object.defineProperty(b.prototype, "betLevelList", {
                        get: function () {
                            return this.md;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "betSizeList", {
                        get: function () {
                            return this._d;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "maxLineNumber", {
                        get: function () {
                            return this.Bm;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "featureBuyBetMultiplier", {
                        get: function () {
                            return this.Gm;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "winThresholds", {
                        get: function () {
                            return this.Nm;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    return b;
                }(e.default);
                c.default = g;
                cc._RF.pop();
            }
        }, {
            SystemModel: "SystemModel",
            WinThresholdsModel: "WinThresholdsModel"
        }],
        SlotTintController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "a2d09YiJcRAgoIHw+TUmuSO", "SlotTintController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = cc._decorator;
                var f = e.ccclass;
                var g = e.property;
                var h = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.slotTintHolder = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.init = function () {
                        this.slotTintHolder.width = 2000;
                        this.slotTintHolder.height = 2000;
                        this.slotTintHolder.opacity = 0;
                    };
                    b.prototype.fadeIn = function (a, b) {
                        if (a === undefined) {
                            a = 0;
                        }
                        this.slotTintHolder.stopAllActions();
                        this.slotTintHolder.runAction(cc.sequence(cc.fadeTo(a, 143), cc.callFunc(function () {
                            if (b) {
                                b();
                            }
                        })));
                    };
                    b.prototype.fadeOut = function (a, b) {
                        if (a === undefined) {
                            a = 0;
                        }
                        this.slotTintHolder.stopAllActions();
                        this.slotTintHolder.runAction(cc.sequence(cc.fadeOut(a), cc.callFunc(function () {
                            if (b) {
                                b();
                            }
                        })));
                    };
                    __decorate([g(cc.Node)], b.prototype, "slotTintHolder", undefined);
                    return __decorate([f], b);
                }(cc.Component);
                c.default = h;
                cc._RF.pop();
            }
        }, {}],
        SlotTransactionModel: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "d5629sKgMRK16ZrOMxnkzm9", "SlotTransactionModel")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("WinValuesModel");
                var f = a("WinLinesModel");
                var g = a("BetRepository");
                var h = function (a) {
                    function b() {
                        return a !== null && a.apply(this, arguments) || this;
                    }
                    var c = {
                        get: function () {
                            return this.Tm;
                        },
                        enumerable: false,
                        configurable: true
                    };
                    var d = {
                        get: function () {
                            return this.Pm;
                        },
                        enumerable: false,
                        configurable: true
                    };
                    __extends(b, a);
                    Object.defineProperty(b.prototype, "winLines", c);
                    Object.defineProperty(b.prototype, "winValues", d);
                    Object.defineProperty(b.prototype, "betLevelValue", {
                        get: function () {
                            return this.Rm.selectedBetLevelValue;
                        },
                        set: function (a) {
                            this.Rm.selectedBetLevelValue = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "betSizeValue", {
                        get: function () {
                            return this.Rm.selectedBetSizeValue;
                        },
                        set: function (a) {
                            this.Rm.selectedBetSizeValue = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "reels", {
                        get: function () {
                            return this.Lm;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "originalReels", {
                        get: function () {
                            return this.Em;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.updateTransactionInfo = function (a) {
                        var b = a.wp;
                        var c = a.lw;
                        var d = a.ml;
                        var h = a.cs;
                        var i = a.orl;
                        var j = a.rl;
                        this.Tm = b ? new f.WinLinesModel(b) : undefined;
                        this.Pm = c ? new e.WinValuesModel(c) : undefined;
                        if (!this.Rm) {
                            this.Rm = new g.BetRepository(d, h);
                        }
                        this.Rm.updateRemoteBets(d, h);
                        this.Lm = j;
                        this.Em = i;
                        this.updateSlotGameTransactionInfo(a);
                    };
                    return b;
                }(a("TransactionModel").default);
                c.default = h;
                cc._RF.pop();
            }
        }, {
            BetRepository: "BetRepository",
            TransactionModel: "TransactionModel",
            WinLinesModel: "WinLinesModel",
            WinValuesModel: "WinValuesModel"
        }],
        SlotView: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "dd04eu7yQpIx4UwS/QtQOjh", "SlotView")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.SlotAnchor = undefined;
                var e;
                var f = cc._decorator.ccclass;
                (function (a) {
                    a[a.BOTTOM = -1] = "BOTTOM";
                    a[a.MIDDLE = 0] = "MIDDLE";
                    a[a.TOP = 1] = "TOP";
                })(e = c.SlotAnchor || (c.SlotAnchor = {}));
                var g = function () {
                    function a(a, b) {
                        if (b === undefined) {
                            b = 0;
                        }
                        this.functionalRow = 0;
                        this.symbolSize = undefined;
                        this.viewHeight = 0;
                        this.holder = undefined;
                        this.offsetX = 0;
                        this.sortBottomItemToFront = undefined;
                        this.slotAnchor = e.MIDDLE;
                        this.topIndex = 0;
                        this.bottomIndex = 0;
                        this.accumulatedPositionY = 0;
                        this.slotItems = [];
                        this.isDirty = true;
                        this.bottomSlotIndex = undefined;
                        this.holder = a;
                        this.offsetX = b;
                        this.viewHeight = a.height;
                        a.on(cc.Node.EventType.SIZE_CHANGED, this.onSizeChanged, this);
                    }
                    a.prototype.init = function (a) {
                        this.functionalRow = a.functionalRow;
                        this.symbolSize = a.symbolSize;
                        this.getItem = a.getItem;
                        this.releaseItem = a.releaseItem;
                        this.sortBottomItemToFront = a.sortBottomItemToFront;
                        this.reloadItemsToIndex(0);
                    };
                    a.prototype.getFunctionalItems = function () {
                        for (var a, b, c = this.slotItems, d = c.length, e = this.symbolSize.height * 0.5, f = this.functionalRow * e, g = 0; g < d; g++) {
                            var h = (i = c[g]).node.y - i.symbolRow * e;
                            if (h < f) {
                                a = f - h >= e ? g : g + 1;
                                break;
                            }
                        }
                        for (g = d - 1; g >= 0; g--) {
                            var i;
                            var j = (i = c[g]).node.y + i.symbolRow * e;
                            if (j > -f) {
                                b = j + f > e ? g : g - 1;
                                break;
                            }
                        }
                        return c.slice(a, b + 1);
                    };
                    a.prototype.getVisibleItems = function () {
                        return this.slotItems;
                    };
                    a.prototype.getAccumulatedPositionY = function () {
                        return this.accumulatedPositionY;
                    };
                    a.prototype.getItemAtIndex = function (a) {
                        var b;
                        var c;
                        if (this.isIndexVisible(a)) {
                            try {
                                for (var d = __values(this.slotItems), e = d.next(); !e.done; e = d.next()) {
                                    var f = e.value;
                                    if (f.positionIndex <= a) {
                                        return f;
                                    }
                                }
                            } catch (a) {
                                var g = {
                                    error: a
                                };
                                b = g;
                            } finally {
                                try {
                                    if (e && !e.done && (c = d.return)) {
                                        c.call(d);
                                    }
                                } finally {
                                    if (b) {
                                        throw b.error;
                                    }
                                }
                            }
                        }
                    };
                    a.prototype.getNextTopIndex = function (a) {
                        return Math.max(this.topIndex + 1, this.getBottomSlotIndex() + this.functionalRow + a);
                    };
                    a.prototype.getNextBottomIndex = function (a) {
                        return Math.min(this.bottomIndex - 1, this.getBottomSlotIndex() - a - 1);
                    };
                    a.prototype.getDistanceToIndex = function (a) {
                        var b = this.symbolSize.height;
                        var c = this.getBottomSlotIndex();
                        var d = this.getItemAtIndex(c);
                        var e = (c - d.positionIndex - (d.symbolRow - 1) / 2) * b;
                        var f = d.node.y + e;
                        return (c - a) * b + ((1 - this.functionalRow) * 0.5 * b - f);
                    };
                    a.prototype.getAccumulatedPositionAtIndex = function (a) {
                        return this.symbolSize.height * -a;
                    };
                    a.prototype.getOffsetX = function () {
                        return this.offsetX;
                    };
                    a.prototype.isIndexVisible = function (a) {
                        return a >= this.bottomIndex && a <= this.topIndex;
                    };
                    a.prototype.setFunctionalRow = function (a) {
                        this.functionalRow = a;
                        this.isDirty = true;
                    };
                    a.prototype.setSlotAnchor = function (a) {
                        this.slotAnchor = a;
                    };
                    a.prototype.changePositionY = function (a) {
                        this.accumulatedPositionY += a;
                        for (var b = this.slotItems, c = 0, d = b.length; c < d; c++) {
                            b[c].node.y += a;
                        }
                        this.reviseVisibleItem();
                    };
                    a.prototype.resetPositionIndex = function () {
                        var a = this.slotItems;
                        var b = this.getBottomSlotIndex();
                        a.forEach(function (a) {
                            return a.positionIndex -= b;
                        });
                        this.topIndex -= b;
                        this.bottomIndex -= b;
                        this.accumulatedPositionY += b * this.symbolSize.height;
                        this.isDirty = true;
                    };
                    a.prototype.scrollTo = function (a) {
                        var b = this.getItemAtIndex(a);
                        if (b) {
                            var c = this.symbolSize.height;
                            var d = (b.symbolRow - this.functionalRow) * 0.5 * c;
                            var e = (a - b.positionIndex) * c;
                            this.changePositionY(d - b.node.y - e);
                        } else {
                            this.reloadItemsToIndex(a);
                        }
                    };
                    a.prototype.reloadItems = function (a) {
                        if (a === undefined) {
                            a = true;
                        }
                        if (a) {
                            this.reloadItemsToIndex(0);
                        } else {
                            this.reloadItemsToIndex(this.getBottomSlotIndex());
                        }
                    };
                    a.prototype.onSizeChanged = function () {
                        var a = this.holder.height;
                        if (this.viewHeight !== a) {
                            var b = this.viewHeight;
                            this.viewHeight = a;
                            var c = this.slotAnchor;
                            if (c) {
                                var d = a - b;
                                this.changePositionY(c * d / 2);
                            } else {
                                this.reviseVisibleItem();
                            }
                        }
                    };
                    a.prototype.reloadItemsToIndex = function (a) {
                        var b = this;
                        var c = this.slotItems;
                        var d = this.symbolSize;
                        if (c.length) {
                            c.forEach(function (a) {
                                return b.releaseItem(b, a);
                            });
                            c.length = 0;
                        }
                        var e = c[0] = this.getItem(this, a);
                        var f = e.positionIndex;
                        var g = e.node;
                        g.parent = this.holder;
                        g.y = ((e.symbolRow - this.functionalRow) / 2 + f) * d.height;
                        g.x = (e.symbolColumn - 1) / 2 * d.width + this.offsetX;
                        this.bottomIndex = f;
                        this.topIndex = f + e.symbolRow - 1;
                        this.accumulatedPositionY = -a * d.height;
                        this.reviseVisibleItem();
                    };
                    a.prototype.reviseVisibleItem = function () {
                        var a = this.slotItems;
                        var b = this.symbolSize.height / 2;
                        var c = this.viewHeight / 2 - 0.000005;
                        var d = a[0];
                        var e = a[a.length - 1];
                        var f = false;
                        if (d.node.y + d.symbolRow * b < c) {
                            do {
                                this.addItemAtTop();
                                d = a[0];
                            } while (d.node.y + d.symbolRow * b < c);
                        } else if (d.node.y - d.symbolRow * b > c) {
                            f = true;
                        }
                        if (e.node.y - e.symbolRow * b > -c) {
                            do {
                                this.addItemAtBottom();
                                e = a[a.length - 1];
                            } while (e.node.y - e.symbolRow * b > -c);
                        } else if (e.node.y + e.symbolRow * b < -c) {
                            do {
                                this.removeItemAtBottom();
                                e = a[a.length - 1];
                            } while (e.node.y + e.symbolRow * b < -c);
                        }
                        if (f) {
                            do {
                                this.removeItemAtTop();
                                d = a[0];
                            } while (d.node.y - d.symbolRow * b > c);
                        }
                        this.isDirty = true;
                    };
                    a.prototype.addItemAtTop = function () {
                        var a = this.symbolSize;
                        var b = this.slotItems;
                        var c = b[0];
                        var d = this.topIndex + 1;
                        var e = this.getItem(this, d);
                        var f = e.node;
                        f.parent = this.holder;
                        f.y = c.node.y + (c.symbolRow + e.symbolRow) / 2 * a.height;
                        f.x = (e.symbolColumn - 1) / 2 * a.width + this.offsetX;
                        b.unshift(e);
                        e.positionIndex = d;
                        this.topIndex += e.symbolRow;
                        if (this.sortBottomItemToFront) {
                            e.setZIndex(this.getBottomSlotIndex() - e.positionIndex);
                        }
                    };
                    a.prototype.addItemAtBottom = function () {
                        var b = this.symbolSize;
                        var c = this.slotItems;
                        var d = c[c.length - 1];
                        var e = this.bottomIndex - 1;
                        var f = this.getItem(this, e);
                        var g = f.node;
                        g.parent = this.holder;
                        g.y = d.node.y - (d.symbolRow + f.symbolRow) / 2 * b.height;
                        g.x = (f.symbolColumn - 1) / 2 * b.width + this.offsetX;
                        c.push(f);
                        f.positionIndex = this.bottomIndex -= f.symbolRow;
                        if (this.sortBottomItemToFront) {
                            for (var h = this.getBottomSlotIndex(), i = 0, j = c.length; i < j; i++) {
                                c[i].setZIndex(h - c[i].positionIndex);
                            }
                        }
                    };
                    a.prototype.removeItemAtTop = function () {
                        var a = this.slotItems.shift();
                        a.node.parent = undefined;
                        this.topIndex -= a.symbolRow;
                        this.releaseItem(this, a);
                    };
                    a.prototype.removeItemAtBottom = function () {
                        var a = this.slotItems;
                        var b = a.pop();
                        b.node.parent = undefined;
                        this.bottomIndex += b.symbolRow;
                        this.releaseItem(this, b);
                        if (this.sortBottomItemToFront) {
                            for (var c = this.getBottomSlotIndex(), d = 0, e = a.length; d < e; d++) {
                                a[d].setZIndex(c - a[d].positionIndex);
                            }
                        }
                    };
                    a.prototype.getBottomSlotIndex = function () {
                        if (!this.isDirty) {
                            return this.bottomSlotIndex;
                        }
                        this.isDirty = false;
                        for (var a = this.slotItems, b = this.symbolSize.height * 0.5, c = (1 - this.functionalRow) * b, d = a.length - 1; d >= 0; d--) {
                            var e = a[d];
                            var f = e.node.y + e.symbolRow * b;
                            if (f > c) {
                                var g = Math.ceil((f - c) / this.symbolSize.height);
                                return this.bottomSlotIndex = e.positionIndex + e.symbolRow - g;
                            }
                        }
                        return -1;
                    };
                    return __decorate([f], a);
                }();
                c.default = g;
                cc._RF.pop();
            }
        }, {}],
        SoundButton: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "47f2aqFJBBCiYjiG/SqB5jv", "SoundButton")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("GenericSettingButton");
                var f = cc._decorator;
                var g = f.ccclass;
                var h = f.property;
                var i = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.sprite = undefined;
                        b.soundOn = undefined;
                        b.soundOff = undefined;
                        b.title = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.setTitle = function (a) {
                        this.title.string = a;
                    };
                    b.prototype.customSetup = function () {
                        var a;
                        this.sprite.node.y = 0;
                        this.title.node.active = false;
                        if (!((a = this.circleCollider) === null || a === undefined)) {
                            a.y = 0;
                        }
                    };
                    __decorate([h(cc.Sprite)], b.prototype, "sprite", undefined);
                    __decorate([h(cc.SpriteFrame)], b.prototype, "soundOn", undefined);
                    __decorate([h(cc.SpriteFrame)], b.prototype, "soundOff", undefined);
                    __decorate([h(cc.Label)], b.prototype, "title", undefined);
                    return __decorate([g], b);
                }(e.default);
                c.default = i;
                cc._RF.pop();
            }
        }, {
            GenericSettingButton: "GenericSettingButton"
        }],
        SpaceBarInterrupter: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "676cajSckdANomyB/3kyE3c", "SpaceBarInterrupter")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.spaceBarInterrupter = undefined;
                var e = a("BVFramework");
                var f = cc._decorator.ccclass;
                var g = new (function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.km = [];
                        b.Um = false;
                        b.jm = false;
                        b.Dm = false;
                        b.Wm = false;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.init = function (a) {
                        var b = this;
                        var c = e.getGameContext();
                        c.emit("Game.RequestUIIdleState", undefined, function (d) {
                            b.Dm = d.response;
                            b.subscribeEventInterrupter("default", undefined, b.Dm ? a.spinButtonClickCallback : a.reelClickCallback);
                            b.xm = a;
                            c.on("Game.BlockUI", b.Fm, b);
                            c.on("Game.InUIIdleState", b.Vm, b);
                            b.zm = b.qm.bind(b);
                            cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, b.zm);
                            c.on("Game.SkipEvent", b.Jm, b);
                            c.on("Game.RequestReplay", b.Km, b);
                            c.on("Game.ReplayQuit", b.Qm, b);
                        });
                    };
                    b.prototype.Km = function () {
                        this.Wm = true;
                    };
                    b.prototype.Qm = function () {
                        this.Wm = false;
                    };
                    b.prototype.subscribeEventInterrupter = function (a, b, c) {
                        for (var d = this.km, e = 0, f = d.length; e < f; e++) {
                            if (d[e].event === a) {
                                return;
                            }
                        }
                        var g = {
                            event: a,
                            node: b,
                            callback: c
                        };
                        d.push(g);
                    };
                    b.prototype.unsubscribeEventInterrupter = function (a) {
                        for (var b = this.km, c = 0, d = b.length; c < d; c++) {
                            if (b[c].event === a) {
                                b.splice(c, 1);
                                break;
                            }
                        }
                    };
                    b.prototype.pause = function () {
                        if (this.xm) {
                            if (!this.Um) {
                                cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.zm);
                                this.Um = true;
                            }
                        }
                    };
                    b.prototype.resume = function () {
                        if (this.xm && this.Um) {
                            cc.systemEvent.on(cc.SystemEvent.EventType.KEY_DOWN, this.zm);
                            this.Um = false;
                        }
                    };
                    b.prototype.stop = function () {
                        var a = e.getGameContext();
                        a.off("Game.InUIIdleState", this.Vm, this);
                        a.off("Game.BlockUI", this.Fm, this);
                        cc.systemEvent.off(cc.SystemEvent.EventType.KEY_DOWN, this.zm);
                        a.off("Game.SkipEvent", this.Jm, this);
                        a.off("Game.RequestReplay", this.Km, this);
                        a.off("Game.ReplayQuit", this.Qm, this);
                        this.xm = undefined;
                        this.zm = undefined;
                        this.km.length = 0;
                    };
                    b.prototype.qm = function (a) {
                        if (a.keyCode === cc.macro.KEY.space) {
                            this.Jm();
                        }
                    };
                    b.prototype.Jm = function () {
                        for (var a = this.km, b = a.length - 1; b >= 0; b--) {
                            var c = a[b];
                            var d = c.node;
                            if (!d) {
                                if (e = c.callback) {
                                    e();
                                }
                                break;
                            }
                            if (cc.isValid(d)) {
                                if (d.active) {
                                    var e;
                                    if (e = c.callback) {
                                        e();
                                    }
                                    break;
                                }
                            } else {
                                a.splice(b, 1);
                            }
                        }
                    };
                    b.prototype.Vm = function (a) {
                        this.Dm = a.payload;
                        this.Ym();
                    };
                    b.prototype.Fm = function (a) {
                        var b = a.payload;
                        this.jm = typeof b == "boolean" ? b : b.isBlocked;
                        this.Ym();
                    };
                    b.prototype.Ym = function () {
                        var a = this.jm;
                        var b = this.Dm;
                        var c = this.Wm;
                        var d = this.km[0];
                        if (c) {
                            d.callback = this.xm.spinButtonClickCallback;
                        } else if (a) {
                            if (d.callback) {
                                d.callback = undefined;
                            }
                        } else {
                            var e = this.xm;
                            var f = e.spinButtonClickCallback;
                            var g = e.reelClickCallback;
                            d.callback = b ? f : g;
                        }
                    };
                    return __decorate([f("SpaceBarInterrupter")], b);
                }(cc.Object))();
                c.spaceBarInterrupter = g;
                cc._RF.pop();
            }
        }, {
            BVFramework: "BVFramework"
        }],
        "SpinButtonController.spec": [function (a, b, c) {
            'use strict';

            var d = {
                value: true
            };
            if (!cc._RF.push(b, "19f67zHH4dJhr5p+qxj4Jky", "SpinButtonController.spec")) {
                Object.defineProperty(c, "__esModule", d);
                c.setButtonInteractivity = c.initSpinButtonControllerNodes = undefined;
                c.initSpinButtonControllerNodes = function (a) {
                    var b = System.get("automation") && System.get("automation").GameConfigs;
                    if (b) {
                        b.initNodeConfig(a.spinButtonNode, "spin_button");
                    }
                };
                c.setButtonInteractivity = function (a) {
                    var b = System.get("automation") && System.get("automation").GameData;
                    if (b) {
                        b.emit("SpinButtonInteractivity", a);
                    }
                };
                cc._RF.pop();
            }
        }, {}],
        SpinButtonController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "43d12n8a1BInJvBu7QtjALE", "SpinButtonController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.SpinButtonMode = c.SpinButtonAnimationState = undefined;
                var e;
                var f;
                var g = a("SettingMenuHelper");
                var h = a("ButtonHitTest");
                var i = a("SlotAnalyticsEnum");
                var j = cc._decorator.ccclass;
                (function (a) {
                    a[a.IDLE = 1] = "IDLE";
                    a[a.SPINNING = 2] = "SPINNING";
                    a[a.STOPPED = 3] = "STOPPED";
                })(e = c.SpinButtonAnimationState || (c.SpinButtonAnimationState = {}));
                (function (a) {
                    a[a.ENABLED = 0] = "ENABLED";
                    a[a.DISABLED = 1] = "DISABLED";
                    a[a.AUTOSPIN = 2] = "AUTOSPIN";
                })(f = c.SpinButtonMode || (c.SpinButtonMode = {}));
                var k = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.Xm = f.DISABLED;
                        b.Zm = e.STOPPED;
                        b.$m = false;
                        b.tp = undefined;
                        b.ip = undefined;
                        return b;
                    }
                    __extends(b, a);
                    Object.defineProperty(b.prototype, "clickCallback", {
                        get: function () {
                            return this.ip;
                        },
                        set: function (a) {
                            this.ip = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.showAutoSpinLook = function () {
                        if (this.tp) {
                            this.tp();
                        }
                    };
                    Object.defineProperty(b.prototype, "mode", {
                        get: function () {
                            return this.Xm;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "isHover", {
                        get: function () {
                            return this.$m;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "isHovered", {
                        get: function () {
                            return this.$m;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "animationState", {
                        get: function () {
                            return this.Zm;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.setOnClickCallback = function (a) {
                        this.ip = a;
                    };
                    b.prototype.clearOnClickCallback = function () {
                        this.ip = undefined;
                    };
                    b.prototype.destroy = function () {
                        this.ip = undefined;
                        this.tp = undefined;
                        this.sp();
                        this.node.destroy();
                        return a.prototype.destroy.call(this);
                    };
                    b.prototype.sp = function () {
                        this.disableMouseHover();
                        if (this.onHideMouseOverEffect) {
                            this.onHideMouseOverEffect();
                        }
                        if (this.onStopAllAnimations) {
                            this.onStopAllAnimations();
                        }
                    };
                    b.prototype.init = function () {
                        this.enableMouseHover();
                        this.onDisableButton();
                        if (this.onInit) {
                            this.onInit();
                        }
                    };
                    b.prototype.idle = function () {
                        this.Zm = e.IDLE;
                        if (this.Xm !== f.AUTOSPIN) {
                            if (this.onShowIdleAnimation) {
                                this.onShowIdleAnimation();
                            }
                            if (this.$m) {
                                this.ep();
                            }
                        }
                    };
                    b.prototype.spin = function () {
                        this.Zm = e.SPINNING;
                        if (this.Xm !== f.AUTOSPIN) {
                            if (this.Xm !== f.DISABLED && this.onReplaceSpinBlurredSpriteFrame) {
                                this.onReplaceSpinBlurredSpriteFrame();
                            }
                            if (this.onHideMouseOverEffect) {
                                this.onHideMouseOverEffect();
                            }
                            if (this.onShowSpinAnimation) {
                                this.onShowSpinAnimation();
                            }
                        }
                    };
                    b.prototype.stopSpin = function () {
                        this.Zm = e.STOPPED;
                        if (this.Xm !== f.AUTOSPIN && this.onShowStopSpinningAnimation) {
                            this.onShowStopSpinningAnimation();
                        }
                    };
                    b.prototype.enableButton = function () {
                        if (this.Xm === f.DISABLED) {
                            this.Xm = f.ENABLED;
                            if (this.onEnableButton) {
                                this.onEnableButton();
                            }
                        }
                    };
                    b.prototype.disableButton = function () {
                        if (this.Xm === f.ENABLED) {
                            this.Xm = f.DISABLED;
                            if (this.onDisableButton) {
                                this.onDisableButton();
                            }
                        }
                    };
                    b.prototype.show = function () {
                        this.node.active = true;
                    };
                    b.prototype.hide = function () {
                        this.node.active = false;
                    };
                    b.prototype.isAutoSpin = function () {
                        return this.Xm === f.AUTOSPIN;
                    };
                    b.prototype.enterAutoSpinMode = function (a, b) {
                        if (this.Zm === e.IDLE && a > 0) {
                            this.Xm = f.AUTOSPIN;
                            this.tp = b;
                            this.showAutoSpinLook(a);
                        }
                    };
                    b.prototype.updateAutoSpinCount = function (a) {
                        if (this.Xm === f.AUTOSPIN && this.onUpdateAutoSpinCount) {
                            this.onUpdateAutoSpinCount(a);
                        }
                    };
                    b.prototype.exitAutoSpinMode = function () {
                        if (this.Xm === f.AUTOSPIN) {
                            this.Xm = f.ENABLED;
                            if (this.onHideMouseOverEffect) {
                                this.onHideMouseOverEffect();
                            }
                            if (this.onExitAutoSpinMode) {
                                this.onExitAutoSpinMode();
                            }
                            switch (this.Zm) {
                                case e.IDLE:
                                    if (this.onResumeIdle) {
                                        this.onResumeIdle();
                                    }
                                    break;
                                case e.SPINNING:
                                    if (this.onResumeSpin) {
                                        this.onResumeSpin();
                                    }
                                    break;
                                case e.STOPPED:
                                    if (this.onResumeStop) {
                                        this.onResumeStop();
                                    }
                            }
                            if (g.settingMenuHelper.stopSpinOptionButtonAnim) {
                                g.settingMenuHelper.stopSpinOptionButtonAnim();
                            }
                        }
                    };
                    b.prototype.clickSpinButton = function (a) {
                        if (a === undefined) {
                            a = i.SpinTrigger.CLICK;
                        }
                        if (this.node.active === true && this.Xm !== f.DISABLED && h.buttonHitTest(this.node)) {
                            var b = this.ip;
                            if (b) {
                                b(a);
                            }
                        }
                    };
                    b.prototype.enableMouseHover = function () {
                        this.node.on(cc.Node.EventType.MOUSE_ENTER, this.mouseHovered, this);
                        this.node.on(cc.Node.EventType.MOUSE_LEAVE, this.mouseLeave, this);
                    };
                    b.prototype.disableMouseHover = function () {
                        this.node.off(cc.Node.EventType.MOUSE_ENTER, this.mouseHovered, this);
                        this.node.off(cc.Node.EventType.MOUSE_LEAVE, this.mouseLeave, this);
                    };
                    b.prototype.mouseHovered = function () {
                        this.$m = true;
                        this.ep();
                    };
                    b.prototype.mouseLeave = function () {
                        this.$m = false;
                        if (this.onHideMouseOverEffect) {
                            this.onHideMouseOverEffect();
                        }
                    };
                    b.prototype.ep = function () {
                        var a = this.Xm;
                        var b = this.Zm;
                        if ((a === f.AUTOSPIN || a !== f.DISABLED && b !== e.STOPPED) && this.onPlayMouseOverEffect) {
                            this.onPlayMouseOverEffect();
                        }
                    };
                    return __decorate([j], b);
                }(cc.Component);
                c.default = k;
                cc._RF.pop();
            }
        }, {
            ButtonHitTest: "ButtonHitTest",
            SettingMenuHelper: "SettingMenuHelper",
            SlotAnalyticsEnum: "SlotAnalyticsEnum"
        }],
        SpinConfigHandler: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "932b5xCb0FH57DavWl/zOYi", "SpinConfigHandler")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.initSpinConfig = c.featureConfig = undefined;
                var e = {
                    minimumSpinningTime: 0,
                    regularSpinningTime: 1,
                    fastStopFeature: false,
                    turboSpinFeature: false
                };
                var f = e;
                c.featureConfig = f;
                c.initSpinConfig = function (a) {
                    var b = f;
                    var d = a.jurisdictionModel.singlePlayMinDuration;
                    var e = d > 0 ? a.minimumSpinningTimeOffset || 0 : a.minimumSpinningTime;
                    var g = d > 0 ? a.regularSpinningTimeOffset || 0 : a.regularSpinningTime;
                    b.minimumSpinningTime = d + e;
                    b.regularSpinningTime = d + g;
                    b.turboSpinFeature = a.jurisdictionModel.turboSpinEnable;
                    b.fastStopFeature = a.jurisdictionModel.turboSpinEnable;
                    c.featureConfig = Object.freeze(b);
                };
                cc._RF.pop();
            }
        }, {}],
        SpinOptionsButton: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "3ee68qGxY9G3q+WVKsHebfZ", "SpinOptionsButton")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("GenericSettingButton");
                var f = a("UIAppearanceHelper");
                var g = a("Utils");
                var h = cc._decorator;
                var i = h.ccclass;
                var j = h.property;
                var k = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.holder = undefined;
                        b.autoSpinTurn = undefined;
                        b.autoSpinIcon = undefined;
                        b.autoSpinIconShadow = undefined;
                        b.np = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.onLoad = function () {
                        a.prototype.onLoad.call(this);
                        if (this.buttonTheme) {
                            var b = f.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".normal");
                            g.setNodeColorWithOpacity(this.autoSpinTurn, b);
                            g.setNodeColorWithOpacity(this.autoSpinIcon, b);
                            g.setNodeColorWithOpacity(this.autoSpinIconShadow, b);
                        }
                    };
                    b.prototype.setAutoSpinSprite = function (a) {
                        this.iconSprite.getComponent(cc.Sprite).spriteFrame = a;
                    };
                    b.prototype.playAutoSpinAnim = function () {
                        this.stopAutoSpinAnim();
                        var a = cc.repeatForever(cc.rotateBy(6, 360));
                        this.autoSpinTurn.runAction(a);
                        this.autoSpinIconShadow.parent.opacity = 0;
                        this.op();
                    };
                    b.prototype.stopAutoSpinAnim = function () {
                        var a = this.np;
                        this.np = undefined;
                        if (a) {
                            a();
                        }
                        this.autoSpinTurn.stopAllActions();
                        this.autoSpinIconShadow.parent.stopAllActions();
                        this.autoSpinIconShadow.parent.opacity = 0;
                        this.autoSpinIconShadow.parent.scale = 1;
                    };
                    b.prototype.changeButtonPressedColor = function (a) {
                        if (a) {
                            this.node.runAction(cc.scaleTo(0.05, 0.9));
                        } else {
                            this.node.runAction(cc.sequence(cc.scaleTo(0.05, 1.1), cc.scaleTo(0.05, 1.05), cc.scaleTo(0.05, 1)));
                        }
                    };
                    b.prototype.op = function () {
                        var a = this;
                        this.np = g.delayCallback(3)(function () {
                            a.autoSpinIconShadow.parent.opacity = 180;
                            a.autoSpinIconShadow.parent.scale = 1;
                            a.autoSpinIconShadow.parent.runAction(cc.sequence(cc.spawn(cc.scaleTo(1.2, 2.2), cc.fadeOut(1.2)), cc.callFunc(function () {
                                a.op();
                            })));
                        });
                    };
                    b.prototype.interactableButtonColor = function (a) {
                        if (this.buttonTheme) {
                            var b = f.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".normal");
                            var c = f.uiAppearanceHelper.v(this.buttonTheme.domainKey + "." + this.buttonTheme.colorKey + ".disabled");
                            var d = a ? b : c;
                            this.holder.opacity = d.a;
                            g.setNodeColorWithOpacity(this.iconSprite, d);
                            g.setNodeColorWithOpacity(this.autoSpinTurn, d);
                            g.setNodeColorWithOpacity(this.autoSpinIcon, d);
                            g.setNodeColorWithOpacity(this.autoSpinIconShadow, d);
                        }
                    };
                    b.prototype.destroy = function () {
                        var b = this.np;
                        this.np = undefined;
                        if (b) {
                            b();
                        }
                        this.autoSpinTurn.stopAllActions();
                        return a.prototype.destroy.call(this);
                    };
                    __decorate([j(cc.Node)], b.prototype, "holder", undefined);
                    __decorate([j(cc.Node)], b.prototype, "autoSpinTurn", undefined);
                    __decorate([j(cc.Node)], b.prototype, "autoSpinIcon", undefined);
                    __decorate([j(cc.Node)], b.prototype, "autoSpinIconShadow", undefined);
                    return __decorate([i], b);
                }(e.default);
                c.default = k;
                cc._RF.pop();
            }
        }, {
            GenericSettingButton: "GenericSettingButton",
            UIAppearanceHelper: "UIAppearanceHelper",
            Utils: "Utils"
        }],
        SpinState: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "f1de36UCZVLKpe2qk9vzSaC", "SpinState")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("SlotAnalyticsEnum");
                var f = a("SlotAnalyticsHelper");
                var g = a("Utils");
                var h = a("SpinConfigHandler");
                var i = function () {
                    function a(a, b, c, d) {
                        this.name = "Spin State";
                        this.dataSource = undefined;
                        this.generalControllers = undefined;
                        this.finalCallback = undefined;
                        this.stateDecorator = undefined;
                        this.dataSource = a;
                        this.generalControllers = b.generalControllers;
                        this.finalCallback = c;
                        if (d) {
                            this.stateDecorator = d;
                            d.triggerFastStop = this.triggerFastStop.bind(this);
                        }
                    }
                    a.prototype.setAvailableActions = function () { };
                    a.prototype.clearAvailableActions = function () { };
                    a.prototype.preExitStateCleanup = function () { };
                    a.prototype.additionalDestroyCleanups = function () { };
                    a.prototype.triggerFastStop = function (a) {
                        var b = this.generalControllers;
                        var c = b.slotController;
                        f.sendFastStopGA(a, b.spinButtonController.isAutoSpin());
                        c.setOnClickCallback(undefined);
                        c.markFastStop();
                        if (this.stateDecorator && this.stateDecorator.slotFastStopTriggered) {
                            this.stateDecorator.slotFastStopTriggered();
                        }
                        this.slotFastStopTriggered();
                    };
                    a.prototype.slotFastStopTriggered = function () { };
                    a.prototype.onExitState = function (a) {
                        a();
                    };
                    a.prototype.run = function () {
                        if (this.stateDecorator) {
                            if (this.stateDecorator.stateWillStartSpin) {
                                this.stateDecorator.stateWillStartSpin();
                            }
                            if (this.stateDecorator.setAvailableActions) {
                                this.stateDecorator.setAvailableActions();
                            }
                        }
                        this.stateWillStartSpin();
                        this.setAvailableActions();
                        this.cp();
                        this.hp();
                    };
                    a.prototype.hp = function () {
                        this.callApi(this.rp.bind(this));
                    };
                    a.prototype.cp = function () {
                        var a = this.generalControllers.slotController;
                        if (h.featureConfig.fastStopFeature) {
                            a.setOnClickCallback(this.triggerFastStop.bind(this, e.SpinTrigger.CLICK));
                        }
                        if (this.stateDecorator && this.stateDecorator.startSlotController) {
                            this.stateDecorator.startSlotController();
                        } else {
                            this.ap();
                        }
                    };
                    a.prototype.rp = function () {
                        this.Is();
                    };
                    a.prototype.Is = function () {
                        var a = this;
                        if (this.stateDecorator) {
                            if (this.stateDecorator.clearAvailableActions) {
                                this.stateDecorator.clearAvailableActions();
                            }
                            if (this.stateDecorator.preExitStateCleanup) {
                                this.stateDecorator.preExitStateCleanup();
                            }
                        }
                        this.clearAvailableActions();
                        this.preExitStateCleanup();
                        this.onExitState(function () {
                            var b = a.finalCallback;
                            a.finalCallback = undefined;
                            a.destroy();
                            g.deferCallback(true)(function () {
                                g.deferCallback(true)(b);
                            });
                        });
                    };
                    a.prototype.destroy = function () {
                        this.generalControllers.slotController.setOnClickCallback(undefined);
                        this.dataSource = undefined;
                        this.finalCallback = undefined;
                        this.generalControllers = undefined;
                        if (this.stateDecorator) {
                            this.stateDecorator.destroy();
                            this.stateDecorator = undefined;
                        }
                        this.additionalDestroyCleanups();
                    };
                    a.prototype.ap = function () {
                        this.generalControllers.slotController.spin();
                    };
                    return a;
                }();
                c.default = i;
                cc._RF.pop();
            }
        }, {
            SlotAnalyticsEnum: "SlotAnalyticsEnum",
            SlotAnalyticsHelper: "SlotAnalyticsHelper",
            SpinConfigHandler: "SpinConfigHandler",
            Utils: "Utils"
        }],
        SpineConfigHandler: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "41ed4d0xT1Izbrt84+ace0R", "SpineConfigHandler")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.spineConfigHandler = undefined;
                var e = function () {
                    function a() {
                        this.lp = [];
                    }
                    a.prototype.setSymbolSpine = function (a) {
                        this.lp = a;
                    };
                    a.prototype.getNormalSymbolSpine = function (a) {
                        return this.lp[a];
                    };
                    return a;
                }();
                c.spineConfigHandler = new e();
                cc._RF.pop();
            }
        }, {}],
        StickyController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "ad358E+oKdDwIThq37L8ZXx", "StickyController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("Utils");
                var f = a("GeneralAudioConstant");
                var h = a("SlotProperties");
                var g = a("AudioManager");
                var i = cc._decorator;
                var j = i.ccclass;
                var k = i.property;
                var l = [-320, 0, 320];
                var m = [305, 0, -305];
                var n = ["featureWinLine1", "featureWinLine2", "featureWinLine3", "featureWinLine4", "featureWinLine5"];
                var o = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.stickyPrefab = undefined;
                        b.stickyHolder = undefined;
                        b.bigSymbolNode = undefined;
                        b.tint = undefined;
                        b.fp = undefined;
                        b.dp = [];
                        b.vp = [];
                        b._p = 0;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.init = function () {
                        this.fp = new cc.NodePool("StickyItemController");
                        this.mp(9);
                    };
                    b.prototype.resetAudioCount = function () {
                        this._p = 0;
                    };
                    b.prototype.playSticky = function (a, b, c, d) {
                        var i = this;
                        var j = b.rawData;
                        var k = Object.keys(b.rawData);
                        var o = new Set();
                        k.forEach(function (a) {
                            j[a].forEach(function (a) {
                                o.add(a);
                            });
                        });
                        if (this.vp.length !== k.length) {
                            var p = f.GENERAL_AUDIO[n[this._p]].key;
                            g.stopAudioIfPlaying(p);
                            g.playAudioIfNotPlaying(p);
                            this._p++;
                            if (this._p >= 5) {
                                this._p = 0;
                            }
                        }
                        this.vp = k;
                        a.forEach(function (a, d) {
                            if (a === c || a === h.SLOT_INDEX.WILD) {
                                if (i.dp[d]) {
                                    if (o.has(d) && (g = i.dp[d])) {
                                        (b = g.getComponent("StickyItemController")).play(a);
                                    }
                                } else {
                                    var e = h.getRowFromIndex(d);
                                    var f = h.getColumnFromIndex(d);
                                    var g = i.pp();
                                    var j = l[f];
                                    var k = m[e];
                                    g.parent = i.stickyHolder;
                                    g.position = cc.v3(j, k);
                                    var b = g.getComponent("StickyItemController");
                                    if (o.has(d)) {
                                        b.play(a);
                                    } else {
                                        b.show(a);
                                    }
                                    i.dp[d] = g;
                                }
                            }
                        });
                        e.delayCallback(0.3)(function () {
                            if (d) {
                                d();
                            }
                        });
                    };
                    b.prototype.stopSticky = function (a) {
                        var b = this;
                        var c = 1;
                        function d() {
                            if (! --c) {
                                if (a) {
                                    a();
                                }
                            }
                        }
                        this.dp.forEach(function (a, e) {
                            if (a) {
                                c++;
                                a.getComponent("StickyItemController").hide(function () {
                                    b.dp[e] = undefined;
                                    b.bp(a);
                                    d();
                                });
                            }
                        });
                        d();
                    };
                    b.prototype.clearSticky = function () {
                        var a = this;
                        this.dp.forEach(function (b, c) {
                            if (b) {
                                a.dp[c] = undefined;
                                a.bp(b);
                            }
                        });
                    };
                    b.prototype.playLargeSymbol = function (a, b, c, d) {
                        function e() {
                            if (d) {
                                d();
                            }
                        }
                        if (b && b.rawData) {
                            if (b.winPositions.length >= 5) {
                                var i = __spread(new Set(a));
                                if (i.length === 2 && i.indexOf(h.SLOT_INDEX.WILD) || i.length === 1) {
                                    var j = i[0];
                                    if (i.length === 2) {
                                        j = i.filter(function (a) {
                                            return a !== h.SLOT_INDEX.WILD;
                                        })[0];
                                    }
                                    var k = this.bigSymbolNode.getComponent("BigSymbolItemController");
                                    this.tint.stopAllActions();
                                    this.tint.runAction(cc.fadeTo(0.4, 255));
                                    k.playBigSymbol(j, e);
                                    if (c) {
                                        c();
                                    }
                                    this.dp.forEach(function (a) {
                                        if (a) {
                                            a.opacity = 0;
                                        }
                                    });
                                } else {
                                    e();
                                }
                                var l = f.GENERAL_AUDIO.prizeWinFullscreen.key;
                                g.stopAudioIfPlaying(l);
                                g.playAudioIfNotPlaying(l);
                            } else {
                                e();
                            }
                        } else {
                            e();
                        }
                    };
                    b.prototype.playWin = function (a) {
                        var b = a.rawData;
                        var c = Object.keys(a.rawData);
                        var d = new Set();
                        c.forEach(function (a) {
                            b[a].forEach(function (a) {
                                d.add(a);
                            });
                        });
                        this.stickyMap.forEach(function (a, b) {
                            if (a) {
                                var c = a.getComponent("StickyItemController");
                                if (d.has(b)) {
                                    c.playWin();
                                } else {
                                    c.hide();
                                }
                            }
                        });
                    };
                    Object.defineProperty(b.prototype, "stickyMap", {
                        get: function () {
                            return this.dp;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.clearLargeSymbol = function (a) {
                        this.tint.stopAllActions();
                        this.tint.runAction(cc.fadeTo(0.4, 0));
                        this.dp.forEach(function (a) {
                            if (a) {
                                a.opacity = 255;
                            }
                        });
                        this.bigSymbolNode.getComponent("BigSymbolItemController").stopBigSymbol(a);
                    };
                    b.prototype.mp = function (a) {
                        for (var b = 0; b < a; b++) {
                            this.fp.put(cc.instantiate(this.stickyPrefab));
                        }
                    };
                    b.prototype.pp = function () {
                        if (this.fp.size() > 0) {
                            return this.fp.get();
                        } else {
                            return cc.instantiate(this.stickyPrefab);
                        }
                    };
                    b.prototype.bp = function (a) {
                        this.fp.put(a);
                    };
                    __decorate([k(cc.Prefab)], b.prototype, "stickyPrefab", undefined);
                    __decorate([k(cc.Node)], b.prototype, "stickyHolder", undefined);
                    __decorate([k(cc.Node)], b.prototype, "bigSymbolNode", undefined);
                    __decorate([k(cc.Node)], b.prototype, "tint", undefined);
                    return __decorate([j], b);
                }(cc.Component);
                c.default = o;
                cc._RF.pop();
            }
        }, {
            AudioManager: "AudioManager",
            GeneralAudioConstant: "GeneralAudioConstant",
            SlotProperties: "SlotProperties",
            Utils: "Utils"
        }],
        StickyItemController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "09093gTG49IL6y7P7Ay2KSq", "StickyItemController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("GConstants");
                var f = a("SymbolImageHandler");
                var g = cc._decorator;
                var h = g.ccclass;
                var i = g.property;
                var j = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.symbolSprite = undefined;
                        b.shine = undefined;
                        b.shineParticle = undefined;
                        b.shineCircle = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.play = function (a) {
                        this.symbolSprite.spriteFrame = f.symbolImageHandler.symbolImages[a];
                        this.symbolSprite.node.runAction(cc.scaleTo(0.3, 1.1).easing(cc.easeCircleActionOut()));
                        this.shine.runAction(cc.fadeIn(0.5));
                        this.shineParticle.play();
                    };
                    b.prototype.show = function (a) {
                        this.symbolSprite.spriteFrame = f.symbolImageHandler.symbolImages[a];
                        this.symbolSprite.node.runAction(cc.scaleTo(0.3, 1.1).easing(cc.easeCircleActionOut()));
                    };
                    b.prototype.playWin = function () {
                        this.shineCircle.node.runAction(cc.tintTo(0.25, e.WHITE));
                        this.shineCircle.play();
                    };
                    b.prototype.stopWin = function () {
                        this.shineCircle.node.stopAllActions();
                        this.shineCircle.stop();
                        this.shineCircle.setCurrentTime(0);
                        this.shineCircle.node.getComponent(cc.Sprite).spriteFrame = undefined;
                        this.shineCircle.node.color = e.BLACK;
                    };
                    b.prototype.hide = function (a) {
                        var b = this;
                        this.symbolSprite.node.runAction(cc.spawn(cc.fadeOut(0.3), cc.scaleTo(0.3, 1).easing(cc.easeCircleActionOut())));
                        this.shine.runAction(cc.sequence(cc.fadeOut(0.3), cc.callFunc(function () {
                            b.symbolSprite.spriteFrame = undefined;
                            b.symbolSprite.node.opacity = 255;
                            if (a) {
                                a();
                            }
                        })));
                        this.shineParticle.stop();
                        this.shineParticle.setCurrentTime(0);
                        this.shineParticle.node.getComponent(cc.Sprite).spriteFrame = undefined;
                        this.stopWin();
                    };
                    b.prototype._t = function () {
                        this.symbolSprite.node.stopAllActions();
                        this.symbolSprite.node.opacity = 255;
                        this.symbolSprite.spriteFrame = undefined;
                        this.shine.stopAllActions();
                        this.shine.opacity = 0;
                        this.shineParticle.stop();
                        this.shineParticle.setCurrentTime(0);
                        this.shineParticle.node.getComponent(cc.Sprite).spriteFrame = undefined;
                        this.stopWin();
                    };
                    b.prototype.reuse = function () {
                        this._t();
                    };
                    b.prototype.unuse = function () {
                        this._t();
                    };
                    __decorate([i(cc.Sprite)], b.prototype, "symbolSprite", undefined);
                    __decorate([i(cc.Node)], b.prototype, "shine", undefined);
                    __decorate([i(cc.Animation)], b.prototype, "shineParticle", undefined);
                    __decorate([i(cc.Animation)], b.prototype, "shineCircle", undefined);
                    return __decorate([h], b);
                }(cc.Component);
                c.default = j;
                cc._RF.pop();
            }
        }, {
            GConstants: "GConstants",
            SymbolImageHandler: "SymbolImageHandler"
        }],
        SubControllerConfig: [function (a, b, c) {
            'use strict';

            var d = {
                value: true
            };
            if (!cc._RF.push(b, "24ea0V+c1hBKJve2dHxdOZ/", "SubControllerConfig")) {
                Object.defineProperty(c, "__esModule", d);
                c.SubControllers = undefined;
                (function (a) {
                    a[a.AUTOSPIN = 0] = "AUTOSPIN";
                    a[a.BET = 1] = "BET";
                    a[a.USER_SETTING = 2] = "USER_SETTING";
                    a[a.HISTORY = 3] = "HISTORY";
                    a[a.PAYTABLE = 4] = "PAYTABLE";
                    a[a.RULE = 5] = "RULE";
                    a[a.WALLET = 6] = "WALLET";
                })(c.SubControllers || (c.SubControllers = {}));
                cc._RF.pop();
            }
        }, {}],
        SymbolImageHandler: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "e5abbnVc/1Ov4XANddRxDja", "SymbolImageHandler")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.symbolImageHandler = c.SymbolImageHandler = undefined;
                var e = a("SlotProperties");
                var f = function () {
                    function a() {
                        this.Sp = [];
                        this.gp = [];
                    }
                    a.prototype.setSymbolImage = function (a) {
                        this.Sp[e.SLOT_INDEX.FIRECRACKER] = a.getSpriteFrame("h_firecracker");
                        this.Sp[e.SLOT_INDEX.INGOTS] = a.getSpriteFrame("h_ingot");
                        this.Sp[e.SLOT_INDEX.MONEYBAG] = a.getSpriteFrame("h_pouch");
                        this.Sp[e.SLOT_INDEX.ORANGE] = a.getSpriteFrame("h_orange");
                        this.Sp[e.SLOT_INDEX.REDPACKETS] = a.getSpriteFrame("h_angbao");
                        this.Sp[e.SLOT_INDEX.RUYI] = a.getSpriteFrame("h_ruyi");
                        this.gp[e.SLOT_INDEX.FIRECRACKER] = a.getSpriteFrame("h_firecracker_blur");
                        this.gp[e.SLOT_INDEX.INGOTS] = a.getSpriteFrame("h_ingot_blur");
                        this.gp[e.SLOT_INDEX.MONEYBAG] = a.getSpriteFrame("h_pouch_blur");
                        this.gp[e.SLOT_INDEX.ORANGE] = a.getSpriteFrame("h_orange_blur");
                        this.gp[e.SLOT_INDEX.REDPACKETS] = a.getSpriteFrame("h_angbao_blur");
                        this.gp[e.SLOT_INDEX.RUYI] = a.getSpriteFrame("h_ruyi_blur");
                    };
                    a.prototype.setLocalizedWildImage = function (a) {
                        this.Sp[e.SLOT_INDEX.WILD] = a.getSpriteFrame("s_wild");
                        this.gp[e.SLOT_INDEX.WILD] = a.getSpriteFrame("s_wild_blur");
                    };
                    Object.defineProperty(a.prototype, "symbolImages", {
                        get: function () {
                            return this.Sp;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(a.prototype, "blurredSymbolImages", {
                        get: function () {
                            return this.gp;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    a.prototype.getLocalizedWildImage = function () {
                        return this.Sp[e.SLOT_INDEX.WILD];
                    };
                    return a;
                }();
                c.SymbolImageHandler = f;
                c.symbolImageHandler = new f();
                cc._RF.pop();
            }
        }, {
            SlotProperties: "SlotProperties"
        }],
        SymbolPayoutController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "7c05ali6OlCEJ+GOnxbYWHT", "SymbolPayoutController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("SymbolPayoutPanelGenerator");
                var f = a("SinglePayoutModel");
                var g = a("Utils");
                var h = a("PopOutItemHandler");
                var i = cc._decorator;
                var j = i.ccclass;
                var k = i.property;
                var l = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.popOutItem = undefined;
                        b.popOutTint = undefined;
                        b.Cp = [];
                        b.yp = undefined;
                        b.Mp = undefined;
                        b.Ap = new h.default();
                        b.Ip = undefined;
                        b.Op = new f.default();
                        b.Hp = e.symbolPayoutPanelGenerator;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.init = function (a) {
                        a.containerNode = a.containerNode ? a.containerNode : this.node;
                        this.Bp = a;
                        var b = a.numberOfTint ? a.numberOfTint : 1;
                        this.Hp.generatePanel(a);
                        if (b > 1) {
                            this.Cp = [];
                            for (var c = 0; c < b; c++) {
                                var d = cc.instantiate(this.popOutTint);
                                if (Array.isArray(this.Gp)) {
                                    this.Gp[c].addChild(d);
                                } else {
                                    this.Gp.addChild(d);
                                }
                                var e;
                                var f = d.getComponent("PopOutTintController");
                                e = Array.isArray(this.Np) ? this.Np[c] : this.Np;
                                this.Cp.push(f);
                                f.setup(e);
                            }
                        } else {
                            d = cc.instantiate(this.popOutTint);
                            this.Gp.addChild(d);
                            this.Cp = d.getComponent("PopOutTintController");
                            this.Cp.setup(this.Np);
                        }
                        this.Ap.init(this.popOutItem, this.Tp);
                        this.Op.payoutData = a.payoutData;
                        if (this.Ip) {
                            this.Ip(a);
                        }
                    };
                    b.prototype.resetPanel = function (a) {
                        a.containerNode = a.containerNode ? a.containerNode : this.node;
                        this.Bp = a;
                        this.Hp.regeneratePanel(a);
                        this.Op.payoutData = a.payoutData ? a.payoutData : this.Op.payoutData;
                    };
                    b.prototype.setExtraInitialzation = function (a) {
                        this.Ip = a;
                    };
                    b.prototype.setPopOutDisplayHolder = function (a) {
                        this.Tp = a;
                    };
                    b.prototype.setPopOutTintHolder = function (a) {
                        this.Gp = a;
                    };
                    b.prototype.setReelData = function (a, b, c) {
                        this.Op.reelData = a;
                        this.Op.extendSymbolData = b;
                        this.Op.extendBlockData = c;
                    };
                    b.prototype.setAdditionalData = function (a) {
                        this.Op.additionalData = a;
                    };
                    b.prototype.setTintConfig = function (a) {
                        this.Np = a;
                    };
                    b.prototype.setupButtonEvent = function (a) {
                        var b = this;
                        if (a === undefined) {
                            a = [];
                        }
                        var c = this.Hp.getButtonControllerList();
                        var d = this.Hp.getButtonComponentList();
                        c.forEach(function (c, e) {
                            if (a.includes(e)) {
                                c.setClickCallback(undefined);
                                d[e].clickEvents = [];
                            } else {
                                var f = b.Pp.bind(b, e, b.Op.reelData[e], b.Op.payoutData);
                                c.setClickCallback(f);
                                var g = c.getControllerAndHandlerName();
                                var h = g.ControllerName;
                                var i = g.HandlerName;
                                var j = new cc.Component.EventHandler();
                                j.target = c.node;
                                j.component = h;
                                j.handler = i;
                                d[e].clickEvents = [];
                                d[e].clickEvents.push(j);
                            }
                        });
                    };
                    b.prototype.setAdditionalOnClickCallback = function (a) {
                        this.yp = a;
                    };
                    b.prototype.setAdditionalOnCancelCallback = function (a) {
                        this.Mp = a;
                    };
                    b.prototype.clearOnClickCallback = function () {
                        this.Hp.getButtonControllerList().forEach(function (a) {
                            a.clearClickCallback();
                        });
                    };
                    b.prototype.enablePanel = function () {
                        this.node.active = true;
                        this.Hp.getButtonComponentList().forEach(function (a) {
                            a.interactable = true;
                        });
                    };
                    b.prototype.disablePanel = function () {
                        this.Hp.getButtonComponentList().forEach(function (a) {
                            a.interactable = false;
                        });
                        this.node.active = false;
                    };
                    b.prototype.hidePopOutItem = function (a) {
                        this.Rp(a);
                    };
                    Object.defineProperty(b.prototype, "buttonList", {
                        get: function () {
                            return this.Hp.getButtonList();
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "buttonControllerList", {
                        get: function () {
                            return this.Hp.getButtonControllerList();
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "buttonComponentList", {
                        get: function () {
                            return this.Hp.getButtonComponentList();
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.Pp = function (a, b, c) {
                        var d = this;
                        this.Lp(this.Rp.bind(this));
                        g.spawnCallback(this.Ep.bind(this, a, b), this.kp.bind(this, a, b, c))(function () {
                            d.Up();
                        });
                    };
                    b.prototype.setPopOutItemLayout = function (a, b) {
                        var c;
                        c = b < Math.round(this.Bp.numberOfColumn / 2) * this.Bp.numberOfRow;
                        var d = a.parent.convertToWorldSpaceAR(a.position);
                        return {
                            isLeftToRight: c,
                            position: this.Tp.convertToNodeSpaceAR(d)
                        };
                    };
                    b.prototype.kp = function (a, b, c, d) {
                        var e = this.Op;
                        var g = e.extendSymbolData;
                        var f = e.extendBlockData;
                        var h = e.additionalData;
                        if (g) {
                            Object.keys(g).forEach(function (b) {
                                if (g[b].includes(a)) {
                                    var c = g[b].length;
                                    a = g[b][c - 1];
                                }
                            });
                        }
                        var i = this.Hp.getButtonList()[a];
                        var j = this.setPopOutItemLayout(i, a);
                        var k = j.isLeftToRight;
                        var l = j.position;
                        this.Ap.runPopoutItemShowCallback(d, c, a, b, cc.v2(l), k, g, f, h);
                    };
                    b.prototype.Lp = function (a) {
                        this.Ap.setCancelCallback(a);
                    };
                    b.prototype.Ep = function (a, b, c) {
                        function d() {
                            if (c) {
                                c();
                            }
                        }
                        if (Array.isArray(this.Cp)) {
                            var e = [];
                            this.Cp.forEach(function (a) {
                                e.push(a.show.bind(a));
                            });
                            g.spawnCallback(e)(d);
                        } else {
                            this.Cp.show(function () {
                                d();
                            });
                        }
                    };
                    b.prototype.Rp = function (a) {
                        this.Ap.runPopoutItemHideCallback();
                        function b() {
                            if (a) {
                                a();
                            }
                        }
                        if (Array.isArray(this.Cp)) {
                            var c = [];
                            this.Cp.forEach(function (a) {
                                c.push(a.hide.bind(a));
                            });
                            g.spawnCallback(c)(b);
                        } else {
                            this.Cp.hide(b);
                        }
                        this.jp();
                    };
                    b.prototype.Up = function () {
                        if (this.yp) {
                            this.yp();
                        }
                    };
                    b.prototype.jp = function () {
                        if (this.Mp) {
                            this.Mp();
                        }
                    };
                    Object.defineProperty(b.prototype, "singlePayoutModel", {
                        get: function () {
                            return this.Op;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    __decorate([k(cc.Prefab)], b.prototype, "popOutItem", undefined);
                    __decorate([k(cc.Prefab)], b.prototype, "popOutTint", undefined);
                    return __decorate([j], b);
                }(cc.Component);
                c.default = l;
                cc._RF.pop();
            }
        }, {
            PopOutItemHandler: "PopOutItemHandler",
            SinglePayoutModel: "SinglePayoutModel",
            SymbolPayoutPanelGenerator: "SymbolPayoutPanelGenerator",
            Utils: "Utils"
        }],
        SymbolPayoutPanelGenerator: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "b4807S7wZxNyKaQIPwkQNfI", "SymbolPayoutPanelGenerator")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.regeneratePanel = c.getButtonList = c.getButtonComponentList = c.getButtonControllerList = c.generatePanel = c.symbolPayoutPanelGenerator = undefined;
                var e = a("ButtonController");
                var f = function () {
                    function a() {
                        this.Zi = [];
                        this.Dp = [];
                        this.Wp = [];
                        this.xp = new cc.NodePool();
                    }
                    a.prototype.Fp = function (a, b, c, d, e, f, g) {
                        var h = Math.floor(c % g);
                        var i = Math.floor(c / g);
                        var j = e * (1 - a.anchorY);
                        var l = d * a.anchorX;
                        var n = j - b.height / 2;
                        var o = -(l - b.width / 2);
                        var p = n - b.height * h;
                        var m = o + b.width * i;
                        b.setPosition(m, p);
                    };
                    a.prototype.generatePanel = function (a) {
                        var b = a.containerNode;
                        var c = a.containerSize ? a.containerSize : b.getContentSize();
                        var d = c.width;
                        var f = c.height;
                        b.width = d;
                        b.height = f;
                        for (var g = a.numberOfColumn, h = a.numberOfRow, i = a.numberOfButton ? a.numberOfButton : g * h, j = d / g, l = f / h, m = 0; m < i; m++) {
                            var n = this.xp.get();
                            var o = undefined;
                            var p = undefined;
                            if (n) {
                                o = n.getComponent(e.default);
                                p = n.getComponent(cc.Button);
                            } else {
                                n = new cc.Node("payout_button");
                                var r = new cc.Node("background");
                                n.addChild(r);
                                p = n.addComponent(cc.Button);
                                o = n.addComponent(e.default);
                                p.target = r;
                                n.height = a.buttonHeight ? a.buttonHeight : l;
                                n.width = a.buttonWidth ? a.buttonWidth : j;
                                p.transition = cc.Button.Transition.COLOR;
                                p.pressedColor = cc.Color.GRAY;
                                var s = r.addComponent(cc.Sprite);
                                s.sizeMode = cc.Sprite.SizeMode.CUSTOM;
                                if (a.buttonBase) {
                                    s.spriteFrame = a.buttonBase.spriteFrame;
                                }
                                r.height = l;
                                r.width = j;
                            }
                            n.parent = b;
                            var t = a.buttonPosition;
                            if (t) {
                                n.setPosition(t[m]);
                            } else {
                                this.Fp(b, n, m, d, f, g, h);
                            }
                            this.Zi.push(n);
                            this.Dp.push(o);
                            this.Wp.push(p);
                        }
                    };
                    a.prototype.getButtonList = function () {
                        return this.Zi;
                    };
                    a.prototype.getButtonControllerList = function () {
                        return this.Dp;
                    };
                    a.prototype.getButtonComponentList = function () {
                        return this.Wp;
                    };
                    a.prototype.regeneratePanel = function (a) {
                        var b = this;
                        this.Zi.forEach(function (a) {
                            b.xp.put(a);
                        });
                        this.Zi = [];
                        this.Wp = [];
                        this.Dp = [];
                        this.generatePanel(a);
                    };
                    return a;
                }();
                c.default = f;
                c.symbolPayoutPanelGenerator = new f();
                c.generatePanel = c.symbolPayoutPanelGenerator.generatePanel.bind(c.symbolPayoutPanelGenerator);
                c.getButtonControllerList = c.symbolPayoutPanelGenerator.getButtonControllerList.bind(c.symbolPayoutPanelGenerator);
                c.getButtonComponentList = c.symbolPayoutPanelGenerator.getButtonComponentList.bind(c.symbolPayoutPanelGenerator);
                c.getButtonList = c.symbolPayoutPanelGenerator.getButtonList.bind(c.symbolPayoutPanelGenerator);
                c.regeneratePanel = c.symbolPayoutPanelGenerator.regeneratePanel.bind(c.symbolPayoutPanelGenerator);
                cc._RF.pop();
            }
        }, {
            ButtonController: "ButtonController"
        }],
        SystemFeatureHandler: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "c93d5OmEfVKSLl/iM1N4BVc", "SystemFeatureHandler")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.checkSpinValidity = c.handleSystemEvent = c.getReevaluateBet = undefined;
                var e = a("SlotAnalyticsEnum");
                var f = a("Utils");
                var g = a("GameEventHandler");
                c.getReevaluateBet = i;
                c.handleSystemEvent = function (a) {
                    var b = a.autoSpinCount;
                    var c = a.exitAutoSpinHandler;
                    var d = a.walletHelper;
                    var e = a.settingMenuHelper;
                    var g = a.betChangedHandler;
                    f.sequenceCallback(h(d, b, c), i(e, g))(a.callback);
                };
                c.checkSpinValidity = function (a) {
                    var b = a.callback;
                    var c = a.walletHelper;
                    var d = a.getCostPerSpinFunction;
                    var f = a.dataSource;
                    var h = d();
                    var i = {
                        totalBet: h
                    };
                    g.emitRequestPlayEvent(i, function (d) {
                        if (d) {
                            if (c.isFreeGameMode() && c.hasFreeGame()) {
                                b(e.SpinCredits.FREE_GAME);
                            } else {
                                b(e.SpinCredits.CASH);
                            }
                        } else if (h > f.playerModel.balance) {
                            b(e.SpinCredits.INSUFFICIENT);
                        } else {
                            b(e.SpinCredits.BET_INVALID);
                        }
                    });
                };
                cc._RF.pop();
            }
            function h(a, b, c) {
                return function (d) {
                    if (a.isWalletCompleted() && b > 0 && c) {
                        c();
                    }
                    if (d) {
                        d();
                    }
                };
            }
            function i(a, b) {
                return function (c) {
                    if (a.reevaluateBet()) {
                        if (b) {
                            b(c);
                        } else {
                            a.updateBetValues();
                            if (c) {
                                c();
                            }
                        }
                    } else if (c) {
                        c();
                    }
                };
            }
        }, {
            GameEventHandler: "GameEventHandler",
            SlotAnalyticsEnum: "SlotAnalyticsEnum",
            Utils: "Utils"
        }],
        SystemModel: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "daa8eblXeJHyaG5qwoh+Te0", "SystemModel")) {
                var c = System.get("bvframework").SystemModel;
                b.exports.default = c;
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        TabBarController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "b2f70mOAvdOxZtKjfDu/lHM", "TabBarController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("TabBar");
                var f = a("TabBarItem");
                var g = a("TransitionContext");
                var h = a("ViewController");
                var i = cc._decorator;
                var j = i.ccclass;
                var k = i.property;
                var l = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.content = undefined;
                        b.tabBar = undefined;
                        b.bottomNode = undefined;
                        b.tabBarItemPrefab = undefined;
                        b.Vp = [];
                        b.Ua = [];
                        b.zp = undefined;
                        b.qp = 0;
                        b.ja = false;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.onLoad = function () {
                        this.Jp();
                        this.Kp();
                        this.Qp();
                        this.node.on("size-changed", this.Wa, this);
                    };
                    b.prototype.onEnable = function () {
                        var a = this.zp;
                        if (a) {
                            a.enabled = true;
                        }
                    };
                    b.prototype.onDisable = function () {
                        var a = this.zp;
                        if (a) {
                            a.enabled = false;
                        }
                    };
                    b.prototype.viewWillAppear = function (a) {
                        var b = this.zp;
                        if (b) {
                            b.viewWillAppear(a);
                        }
                    };
                    b.prototype.viewDidAppear = function (a) {
                        var b = this.zp;
                        if (b) {
                            b.viewDidAppear(a);
                        }
                    };
                    b.prototype.viewWillDisappear = function (a) {
                        var b = this.zp;
                        if (b) {
                            b.viewWillDisappear(a);
                        }
                    };
                    b.prototype.viewDidDisappear = function (a) {
                        var b = this.zp;
                        if (b) {
                            b.viewDidDisappear(a);
                        }
                    };
                    b.prototype.viewDidLayoutSubviews = function () { };
                    b.prototype.setControllers = function (a, b, c) {
                        if (b === undefined) {
                            b = 0;
                        }
                        if (c === undefined) {
                            c = false;
                        }
                        if (Array.isArray(a)) {
                            this.qp = b;
                            this.Ua = a;
                            this.Yp();
                            this.Vp = [];
                            for (var d = this.Vp, e = 0; e < a.length; e++) {
                                var g = a[e];
                                g.node.parent = this.content;
                                this.Xp(e);
                                var h = g.tabBarItem;
                                if (!(h && h instanceof f.default)) {
                                    var i = g.title;
                                    (h = cc.instantiate(this.tabBarItemPrefab).getComponent(f.default)).init(i, undefined, undefined, e);
                                    g.tabBarItem = h;
                                }
                                h.selectAction = this.Zp.bind(this, e, c);
                                d.push(h);
                                g.enabled = e === b;
                            }
                            this.tabBar.setItems(d, b);
                            var j = a[b];
                            this.zp = j;
                            j.viewWillAppear(false);
                            j.viewDidAppear(false);
                            if (j.tabBarItem && j.tabBarItem.animFinish) {
                                j.tabBarItem.animFinish();
                            }
                            this.$p(b);
                        }
                    };
                    b.prototype.getSelectedController = function () {
                        return this.zp;
                    };
                    b.prototype.getSelectedTabBarItem = function () {
                        return this.tabBar.getSelectedItem();
                    };
                    b.prototype.hideTabBar = function () {
                        if (this.tabBar.node.active || this.bottomNode.active) {
                            this.tabBar.node.active = false;
                            this.bottomNode.active = false;
                            this.Wa();
                        }
                    };
                    b.prototype.showTabBar = function () {
                        if (!(this.tabBar.node.active && this.bottomNode.active)) {
                            this.tabBar.node.active = true;
                            this.bottomNode.active = true;
                            this.Wa();
                        }
                    };
                    b.prototype.Xp = function (a) {
                        var b = this.Ua[a];
                        var c = this.content;
                        if (b && b.node.getContentSize() !== c.getContentSize()) {
                            var d = b.node;
                            var e = c.width;
                            var f = c.height;
                            var g = c.anchorX;
                            var h = c.anchorY;
                            var i = (d.anchorX - g + a) * e;
                            var j = (d.anchorY - h) * f;
                            d.setContentSize(e, f);
                            d.setPosition(i, j);
                        }
                    };
                    b.prototype.tb = function () {
                        if (this.tabBar.node.active === true) {
                            return this.safeAreaInsets.bottom;
                        } else {
                            return 0;
                        }
                    };
                    b.prototype.Jp = function () {
                        var a = this.tb();
                        var b = this.node;
                        var c = b.width;
                        var d = b.height;
                        this.content.setContentSize(c, d - a);
                    };
                    b.prototype.Kp = function () {
                        var a = this.tb();
                        var b = this.node.height;
                        this.tabBar.node.y = a + this.tabBar.node.height - b;
                    };
                    b.prototype.Qp = function () {
                        if (this.tabBar.node.active) {
                            var a = this.tb();
                            var b = this.node;
                            var c = b.width;
                            var d = b.height;
                            var e = this.bottomNode;
                            e.setContentSize(c, a);
                            e.y = a - d;
                        }
                    };
                    b.prototype.Wa = function () {
                        var a = this.qp;
                        this.Jp();
                        this.Kp();
                        this.Qp();
                        this.Xp(a);
                    };
                    b.prototype.$p = function (a) {
                        this.content.x = -a * this.content.width;
                    };
                    b.prototype.Zp = function (a, b) {
                        if (!this.ja && a !== this.qp) {
                            var c = this.Ua;
                            if (!(a >= c.length)) {
                                var d = this.zp;
                                var e = c[a];
                                if (d !== undefined && e !== undefined) {
                                    this.ib(a);
                                    this.ja = true;
                                    this.tabBar.selectItemAtIndex(a);
                                    this.qp = a;
                                    this.zp = e;
                                    if (e.setSelect) {
                                        e.setSelect();
                                    }
                                    e.enabled = true;
                                    if (d.viewWillDisappear) {
                                        d.viewWillDisappear(b);
                                    }
                                    if (e.viewWillAppear) {
                                        e.viewWillAppear(b);
                                    }
                                    if (b) {
                                        if (this.tabBarControllerDelegate && (this.tabBarControllerDelegate.transitionAnimationForTabBarToRight || this.tabBarControllerDelegate.transitionAnimationForTabBarToLeft)) {
                                            var f;
                                            if (f = a > this.qp ? this.tabBarControllerDelegate.transitionAnimationForTabBarToRight() : this.tabBarControllerDelegate.transitionAnimationForTabBarToLeft()) {
                                                this.sb(f, d, e, a);
                                            } else {
                                                this.$p(a);
                                                this.eb(d, e, a);
                                            }
                                        } else {
                                            this.$p(a);
                                            this.eb(d, e, a);
                                        }
                                    } else {
                                        this.$p(a);
                                        this.nb(d, e, a, false);
                                    }
                                }
                            }
                        }
                    };
                    b.prototype.sb = function (a, b, c, d) {
                        var e = this;
                        var f = new g.TransitionContext(b, c, b.view, c.view, this.content);
                        a.animateTransition(f, function () {
                            e.nb(b, c, d, true);
                        });
                    };
                    b.prototype.eb = function (a, b, c) {
                        var d = this;
                        var e = b.navigator ? b.navigator : b;
                        e.node.opacity = 0;
                        var f = cc.sequence(cc.fadeTo(1, 255).easing(cc.easeSineIn()), cc.callFunc(function () {
                            e.node.opacity = 255;
                            d.nb(a, b, c, true);
                        }));
                        e.node.runAction(f);
                    };
                    b.prototype.nb = function (a, b, c, d) {
                        if (b.tabBarItem && b.tabBarItem.animFinish) {
                            b.tabBarItem.animFinish();
                        }
                        if (b) {
                            b.viewDidAppear(d);
                        }
                        if (a) {
                            a.viewDidDisappear(d);
                        }
                        if (a) {
                            a.enabled = false;
                        }
                        this.ja = false;
                        this.Yp();
                    };
                    b.prototype.ib = function (a) {
                        var b;
                        var c;
                        var d = this.qp;
                        var e = this.Ua;
                        if (d > a) {
                            b = a;
                            c = d;
                        } else {
                            b = d;
                            c = a;
                        }
                        for (var f = b; f <= c; f++) {
                            e[f].node.opacity = 255;
                        }
                    };
                    b.prototype.Yp = function () {
                        for (var a = this.qp, b = this.Ua, c = 0; c < b.length; c++) {
                            if (c !== a) {
                                b[c].node.opacity = 0;
                            }
                        }
                    };
                    __decorate([k(cc.Node)], b.prototype, "content", undefined);
                    __decorate([k(e.default)], b.prototype, "tabBar", undefined);
                    __decorate([k(cc.Node)], b.prototype, "bottomNode", undefined);
                    __decorate([k(cc.Prefab)], b.prototype, "tabBarItemPrefab", undefined);
                    return __decorate([j], b);
                }(h.default);
                c.default = l;
                cc._RF.pop();
            }
        }, {
            TabBar: "TabBar",
            TabBarItem: "TabBarItem",
            TransitionContext: "TransitionContext",
            ViewController: "ViewController"
        }],
        TabBarItem: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "cd0fbm4LQBEVL5LzWleSsGj", "TabBarItem")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = cc._decorator;
                var f = e.ccclass;
                var g = e.property;
                var h = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.icon = undefined;
                        b.titleLabel = undefined;
                        b.tintColor = undefined;
                        b.selectedTintColor = undefined;
                        b.ob = undefined;
                        b.cb = undefined;
                        b.hb = undefined;
                        b.rb = undefined;
                        b.ab = undefined;
                        return b;
                    }
                    __extends(b, a);
                    Object.defineProperty(b.prototype, "tag", {
                        get: function () {
                            return this.rb;
                        },
                        set: function (a) {
                            this.rb = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "selectAction", {
                        set: function (a) {
                            this.ab = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.init = function (a, b, c, d) {
                        if (a) {
                            this.titleLabel.string = a;
                        }
                        if (b) {
                            this.icon.spriteFrame = b;
                            this.ob = b;
                        }
                        this.hb = c;
                        this.rb = d;
                        this.cb = false;
                    };
                    b.prototype.setupTouchAction = function () {
                        this.node.on(cc.Node.EventType.TOUCH_START, this.$, this);
                        this.node.on(cc.Node.EventType.TOUCH_END, this.it, this);
                    };
                    b.prototype.setTintColor = function (a) {
                        if (!this.cb) {
                            this.icon.node.color = a;
                            this.titleLabel.node.color = a;
                        }
                        this.tintColor = a;
                    };
                    b.prototype.setSelectedTintColor = function (a) {
                        if (this.cb) {
                            this.icon.node.color = a;
                            this.titleLabel.node.color = a;
                        }
                        this.selectedTintColor = a;
                    };
                    b.prototype.setTitleAttributes = function (a) {
                        var b = a.getFontSize();
                        var c = a.getNormalFontColor();
                        var d = a.getFontName();
                        var e = a.getLineHeight();
                        this.titleLabel.fontSize = b;
                        this.titleLabel.font = d;
                        this.titleLabel.node.color = c;
                        this.titleLabel.lineHeight = e;
                    };
                    b.prototype.setSelect = function () {
                        var a = this.selectedTintColor;
                        this.icon.node.color = a;
                        this.titleLabel.node.color = a;
                        this.icon.spriteFrame = this.hb;
                        this.cb = true;
                    };
                    b.prototype.setUnselected = function () {
                        var a = this.tintColor;
                        this.icon.node.color = a;
                        this.titleLabel.node.color = a;
                        this.icon.spriteFrame = this.ob;
                        this.cb = false;
                    };
                    b.prototype.animFinish = function () { };
                    b.prototype.$ = function () { };
                    b.prototype.it = function (a) {
                        a.stopPropagation();
                        if (this.ab) {
                            this.ab();
                        }
                    };
                    __decorate([g(cc.Sprite)], b.prototype, "icon", undefined);
                    __decorate([g(cc.Label)], b.prototype, "titleLabel", undefined);
                    __decorate([g(cc.Color)], b.prototype, "tintColor", undefined);
                    __decorate([g(cc.Color)], b.prototype, "selectedTintColor", undefined);
                    return __decorate([f], b);
                }(cc.Component);
                c.default = h;
                cc._RF.pop();
            }
        }, {}],
        TabBar: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "b8f7436fYdNnryqvtnVtqIL", "TabBar")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = cc._decorator;
                var f = e.ccclass;
                var g = e.property;
                var h = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.background = undefined;
                        b.itemsContainer = undefined;
                        b.shadow = undefined;
                        b.Vp = [];
                        b.ub = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.onLoad = function () {
                        var a = this.node.width;
                        var b = this.node.height;
                        this.background.node.setContentSize(a, b);
                        this.shadow.node.width = a;
                        this.itemsContainer.setContentSize(a, b);
                    };
                    b.prototype.setItems = function (a, b) {
                        var c = a.length;
                        if (c && !(c < 1)) {
                            for (var d = 0; d < c; d++) {
                                var e = a[d];
                                e.setupTouchAction();
                                e.node.parent = this.itemsContainer;
                            }
                            var f = a[b];
                            f.setSelect();
                            this.ub = f;
                            this.Vp = a;
                        }
                    };
                    b.prototype.getItems = function () {
                        return this.Vp;
                    };
                    b.prototype.selectItemAtIndex = function (a) {
                        if (!(a >= this.Vp.length)) {
                            var b = this.ub;
                            if (b) {
                                b.setUnselected();
                            }
                            var c = this.Vp[a];
                            c.setSelect();
                            this.ub = c;
                        }
                    };
                    b.prototype.getSelectedItem = function () {
                        return this.ub;
                    };
                    b.prototype.setTintColor = function (a) {
                        for (var b = this.Vp, c = 0; c < b.length; c++) {
                            b[c].setTintColor(a);
                        }
                    };
                    b.prototype.setSelectedTintColor = function (a) {
                        for (var b = this.Vp, c = 0; c < b.length; c++) {
                            b[c].setSelectedTintColor(a);
                        }
                    };
                    b.prototype.setTitleAttributes = function (a) {
                        for (var b = this.Vp, c = 0; c < b.length; c++) {
                            b[c].setTitleAttributes(a);
                        }
                    };
                    b.prototype.setBackgroundImage = function (a, b) {
                        if (a) {
                            this.background.spriteFrame = a;
                        } else if (b) {
                            this.background.node.color = b;
                        }
                    };
                    __decorate([g(cc.Sprite)], b.prototype, "background", undefined);
                    __decorate([g(cc.Node)], b.prototype, "itemsContainer", undefined);
                    __decorate([g(cc.Sprite)], b.prototype, "shadow", undefined);
                    return __decorate([f], b);
                }(cc.Component);
                c.default = h;
                cc._RF.pop();
            }
        }, {}],
        TigerController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "ac8aaXi1jdK56Xm1MRmZZeQ", "TigerController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("Utils");
                var f = a("GeneralAudioConstant");
                var g = a("AudioManager");
                var h = cc._decorator;
                var i = h.ccclass;
                var j = h.property;
                var k = ["voxSmallwin1a", "voxSmallwin1b", "voxSmallwin1c"];
                var l = ["voxSmallwin2a", "voxSmallwin2b"];
                var m = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.tiger = undefined;
                        b.ingotHolder = undefined;
                        b.shine = undefined;
                        b.shine2 = undefined;
                        b.rain = undefined;
                        b.lb = undefined;
                        b.fb = 0;
                        b.vb = 0;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.init = function () { };
                    b.prototype.getIngotWorldPos = function () {
                        return this.node.convertToWorldSpaceAR(this.ingotHolder.position);
                    };
                    b.prototype.getTigerPosition = function () {
                        return this.node.parent.convertToWorldSpaceAR(this.node.position);
                    };
                    b.prototype.setRespin = function () {
                        var a = this.lb;
                        this.lb = undefined;
                        if (a) {
                            a();
                        }
                        this.node.position = cc.v3(0, -70);
                        this.rain.node.active = true;
                        this.rain.play();
                        this.tiger.setAnimation(0, "rs_idle", true);
                    };
                    b.prototype.setNormal = function (a) {
                        this.node.position = cc.v3(0, 0);
                        this.rain.stop();
                        this.rain.setCurrentTime(0);
                        this.rain.node.getComponent(cc.Sprite).spriteFrame = undefined;
                        this.rain.node.active = false;
                        this._b(a);
                    };
                    b.prototype.playRespin = function (a) {
                        this.rain.node.active = true;
                        this.rain.play();
                        this.rain.node.runAction(cc.fadeIn(1));
                        if (a) {
                            a();
                        }
                    };
                    b.prototype.playNormal = function (a) {
                        if (a) {
                            a();
                        }
                        this.rain.stop();
                        this.rain.setCurrentTime(0);
                        this.rain.node.getComponent(cc.Sprite).spriteFrame = undefined;
                        this.rain.node.active = false;
                    };
                    b.prototype.playIngot = function (a) {
                        var b = this.lb;
                        this.lb = undefined;
                        if (b) {
                            b();
                        }
                        var c = "fx_wild_collect";
                        if (a >= 20) {
                            c = "fx_wild_collect3";
                        } else if (a >= 12) {
                            c = "fx_wild_collect2";
                        }
                        this.tiger.setAnimation(0, "wild_collect", false);
                        this.tiger.setAnimation(1, c, false);
                        this._b(a);
                    };
                    b.prototype.playWin = function (a) {
                        var b = this.lb;
                        this.lb = undefined;
                        if (b) {
                            b();
                        }
                        var c = f.GENERAL_AUDIO[k[this.fb]].key;
                        g.stopAudioIfPlaying(c);
                        g.playAudioIfNotPlaying(c);
                        this.fb++;
                        if (this.fb >= 3) {
                            this.fb = 0;
                        }
                        this.tiger.setAnimation(0, "win", false);
                        this._b(a);
                    };
                    b.prototype.playBigWin = function (a) {
                        var b = this.lb;
                        this.lb = undefined;
                        if (b) {
                            b();
                        }
                        var c = f.GENERAL_AUDIO[l[this.vb]].key;
                        g.stopAudioIfPlaying(c);
                        g.playAudioIfNotPlaying(c);
                        this.vb++;
                        if (this.vb >= 2) {
                            this.vb = 0;
                        }
                        this.tiger.setAnimation(0, "win2", false);
                        this._b(a);
                    };
                    b.prototype.playRespinWin = function () {
                        var a = this.lb;
                        this.lb = undefined;
                        if (a) {
                            a();
                        }
                        this.tiger.clearTracks();
                        this.tiger.setToSetupPose();
                        var b = f.GENERAL_AUDIO.voxRsWin.key;
                        g.stopAudioIfPlaying(b);
                        g.playAudioIfNotPlaying(b);
                        this.tiger.setAnimation(0, "rs_win", false);
                        this.tiger.addAnimation(0, "rs_win_idle", true);
                    };
                    b.prototype.zoomOut = function () {
                        var a = this.lb;
                        this.lb = undefined;
                        if (a) {
                            a();
                        }
                        this.tiger.clearTracks();
                        this.tiger.setToSetupPose();
                        this.tiger.setAnimation(0, "zo_start", false);
                        this.tiger.addAnimation(0, "zo_idle", false);
                        this.tiger.addAnimation(0, "rs_start", false);
                        this.tiger.addAnimation(0, "rs_idle", true);
                        this.node.stopAllActions();
                        this.node.position = cc.v3(0, 0);
                        this.node.runAction(cc.sequence(cc.delayTime(0.35), cc.moveTo(1.75, cc.v2(0, -70)).easing(cc.easeCubicActionInOut())));
                    };
                    b.prototype.zoomIn = function () {
                        var a = this.lb;
                        this.lb = undefined;
                        if (a) {
                            a();
                        }
                        this.node.stopAllActions();
                        this.node.position = cc.v3(0, -70);
                        this.node.runAction(cc.moveTo(1.75, cc.v2(0, 0)).easing(cc.easeCubicActionInOut()));
                        var b = this.tiger.addAnimation(0, "rs_win_exit", false);
                        this._b(0, b.animation.duration);
                    };
                    b.prototype.teaseZoomOut = function () {
                        var a = this.lb;
                        this.lb = undefined;
                        if (a) {
                            a();
                        }
                        this.tiger.setAnimation(0, "zo_start", false);
                        this.tiger.addAnimation(0, "zo_idle", true);
                        this.node.stopAllActions();
                        this.node.position = cc.v3(0, 0);
                        this.node.runAction(cc.sequence(cc.delayTime(0.35), cc.moveTo(0.85, cc.v2(0, -35)).easing(cc.easeCubicActionInOut())));
                    };
                    b.prototype.teaseZoomIn = function (a) {
                        var b = this.lb;
                        this.lb = undefined;
                        if (b) {
                            b();
                        }
                        this.node.stopAllActions();
                        this.node.position = cc.v3(0, -35);
                        this.node.runAction(cc.moveTo(0.85, cc.v2(0, 0)).easing(cc.easeCubicActionInOut()));
                        var c = f.GENERAL_AUDIO.voxZoExit.key;
                        g.stopAudioIfPlaying(c);
                        g.playAudioIfNotPlaying(c);
                        this.tiger.setAnimation(0, "zo_exit", false);
                        this._b(a);
                    };
                    b.prototype.noSpin = function (a) {
                        var b = this.lb;
                        this.lb = undefined;
                        if (b) {
                            b();
                        }
                        var c = f.GENERAL_AUDIO.voxIdle4.key;
                        g.stopAudioIfPlaying(c);
                        g.playAudioIfNotPlaying(c);
                        this.tiger.setAnimation(0, "idle4", false);
                        this._b(a);
                    };
                    b.prototype.noWin = function (a) {
                        var b = this.lb;
                        this.lb = undefined;
                        if (b) {
                            b();
                        }
                        this.tiger.addAnimation(0, "idle5", false);
                        this._b(a);
                    };
                    b.prototype._b = function (a, b) {
                        var c = this;
                        if (b === undefined) {
                            b = 0;
                        }
                        var d = this.lb;
                        this.lb = undefined;
                        if (d) {
                            d();
                        }
                        var f = "fx_idle";
                        if (a >= 20) {
                            f = "fx_idle3";
                        } else if (a >= 12) {
                            f = "fx_idle2";
                        }
                        this.tiger.addAnimation(0, "idle", true);
                        this.tiger.addAnimation(1, f, true, b);
                        var g = "idle3";
                        function h() {
                            var a = Math.floor(Math.random() * 20 + 12);
                            c.lb = e.delayCallback(a)(function () {
                                c.tiger.addAnimation(0, "idle2", false);
                                c.tiger.addAnimation(0, g, true);
                                g = "idle";
                                h();
                            });
                        }
                        h();
                    };
                    b.prototype.resetTiger = function (a) {
                        var b = this;
                        var c = this.lb;
                        this.lb = undefined;
                        if (c) {
                            c();
                        }
                        var d = "fx_idle";
                        if (a >= 20) {
                            d = "fx_idle3";
                        } else if (a >= 12) {
                            d = "fx_idle2";
                        }
                        this.tiger.setAnimation(0, "idle", true);
                        this.tiger.setAnimation(1, d, true);
                        var f = "idle3";
                        function g() {
                            var a = Math.floor(Math.random() * 20 + 12);
                            b.lb = e.delayCallback(a)(function () {
                                b.tiger.addAnimation(0, "idle2", false);
                                b.tiger.addAnimation(0, f, true);
                                f = "idle";
                                g();
                            });
                        }
                        g();
                    };
                    __decorate([j(sp.Skeleton)], b.prototype, "tiger", undefined);
                    __decorate([j(cc.Node)], b.prototype, "ingotHolder", undefined);
                    __decorate([j(cc.Node)], b.prototype, "shine", undefined);
                    __decorate([j(cc.Node)], b.prototype, "shine2", undefined);
                    __decorate([j(cc.Animation)], b.prototype, "rain", undefined);
                    return __decorate([i], b);
                }(cc.Component);
                c.default = m;
                cc._RF.pop();
            }
        }, {
            AudioManager: "AudioManager",
            GeneralAudioConstant: "GeneralAudioConstant",
            Utils: "Utils"
        }],
        TimedWinRollBaseController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "12aa3hO3pdL6oUvYmprts/7", "TimedWinRollBaseController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("NumberDisplayInterface");
                var f = {
                    big: 0,
                    mega: 1,
                    superMega: 2,
                    overflow: 3
                };
                var g = cc._decorator;
                var h = g.ccclass;
                var i = g.property;
                var j = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.displayController = undefined;
                        b.mb = 0;
                        b.pb = 0;
                        b.Du = -1;
                        b.bb = 0;
                        b.Sb = [];
                        b.gb = undefined;
                        b.Cb = undefined;
                        b.yb = undefined;
                        b.Mb = [];
                        b.Ab = false;
                        b.Ib = -1;
                        b.wb = -1;
                        b.Ob = [];
                        b.Hb = [];
                        b.Xo = [];
                        b.Bb = [];
                        b.Gb = [];
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.update = function () { };
                    b.prototype.setNumbersCallback = function (a) {
                        this.Sb = a;
                    };
                    b.prototype.setTimeCallback = function (a, b) {
                        this.Mb = a;
                        this.Cb = b;
                    };
                    b.prototype.init = function (a) {
                        this.Xo = [a.bigWinThreshold, a.megaWinThreshold, a.superMegaWinThreshold];
                        this.Bb = [a.bigWinDuration, a.megaWinDuration, a.superMegaWinDuration];
                        this.Du = a.totalWin;
                        this.Gb = [];
                        for (var b = 0; b < 3; b++) {
                            this.Gb[b] = this.Bb[b].reduce(function (a, b) {
                                return a + b;
                            });
                        }
                        this.Nb();
                    };
                    b.prototype.getWinType = function () {
                        var a = {
                            winStyle: this.Ib,
                            winStep: this.wb
                        };
                        return a;
                    };
                    b.prototype.play = function (a) {
                        if (this.Tb()) {
                            this.mb = 0;
                            this.bb = 0;
                            this.pb = 0;
                            this.gb = a;
                            this.displayController.clear();
                            this.update = this.Pb;
                            this.Ab = true;
                        }
                    };
                    b.prototype.skip = function () {
                        var a = this;
                        if (this.Ab) {
                            this.stop(false);
                            this.displayController.displayNumber(this.Du, true, function () {
                                if (a.gb) {
                                    a.gb(a.Du);
                                }
                            });
                        }
                    };
                    b.prototype.stop = function (a) {
                        if (a === undefined) {
                            a = true;
                        }
                        if (a) {
                            this.displayController.clear();
                            this.gb = undefined;
                            this.Cb = undefined;
                        }
                        this.mb = 0;
                        this.Ab = false;
                        this.update = function () { };
                    };
                    b.prototype.Tb = function () {
                        if (!!this.Sb) {
                            this.Sb.length;
                        }
                        return !(!this.Bb || !this.Xo || this.Du < 0);
                    };
                    b.prototype.Nb = function () {
                        var a = this.Du;
                        var b = this.Xo;
                        var c = this.Gb;
                        var d = f;
                        var e = b[d.superMega] + (b[d.superMega] - b[d.mega]) * c[d.superMega] / c[d.mega];
                        var g = [];
                        var h = [];
                        if (a < b[d.mega]) {
                            this.Ib = d.big;
                            h[d.big] = a;
                            g[d.big] = this.Rb(a, 0, b[d.mega], d.big, 0);
                        } else if (a < b[d.superMega]) {
                            this.Ib = d.mega;
                            h[d.big] = b[d.mega];
                            g[d.big] = c[d.big];
                            h[d.mega] = a;
                            g[d.mega] = this.Rb(a, b[d.mega], b[d.superMega], d.mega, b[d.mega] / c[d.big]);
                        } else if (a < e) {
                            this.Ib = d.superMega;
                            h[d.big] = b[d.mega];
                            g[d.big] = c[d.big];
                            h[d.mega] = b[d.superMega];
                            g[d.mega] = c[d.mega];
                            h[d.superMega] = a;
                            g[d.superMega] = this.Rb(a, b[d.superMega], e, d.superMega, (b[d.superMega] - b[d.mega]) / c[d.mega]);
                        } else {
                            this.Ib = d.overflow;
                            this.wb = 0;
                            h[d.big] = b[d.mega];
                            h[d.mega] = b[d.superMega];
                            h[d.superMega] = a;
                            g = c;
                        }
                        this.Ob = g;
                        this.Hb = h;
                        this.yb = k(0, this.Hb[0]);
                    };
                    b.prototype.Rb = function (a, b, c, d, e) {
                        for (var f = this.Gb[d], g = this.Bb[d], h = (a - b) / (c - b), i = 0, j = 0; j < g.length; j++) {
                            var k = i + g[j];
                            if (h < k / f) {
                                if (e) {
                                    if ((a - b) / k >= e) {
                                        this.wb = j + 1;
                                        return k;
                                    } else {
                                        this.wb = j;
                                        return i;
                                    }
                                } else if (i && h < (k + i) / 2 / f) {
                                    this.wb = j;
                                    return i;
                                } else {
                                    this.wb = j + 1;
                                    return k;
                                }
                            }
                            i = k;
                        }
                        return i;
                    };
                    b.prototype.Pb = function (a) {
                        var b;
                        var c;
                        var d;
                        var e;
                        var g;
                        var h = (this.mb += a) - this.pb;
                        var i = this.Ob[0];
                        if (h < i) {
                            h += a * (Math.random() * 0.2 - 0.1);
                            b = this.yb.evaluate(h / i);
                        } else {
                            var j = undefined;
                            var l = undefined;
                            do {
                                j = this.Ob.shift();
                                i = this.Ob[0];
                                l = this.Hb.shift();
                                this.pb += j;
                                h -= j;
                            } while (i !== undefined && h >= i);
                            if (i === undefined) {
                                this.yb = undefined;
                                this.Ab = false;
                                this.update = function () { };
                                b = this.Du;
                            } else {
                                if (this.Ib === f.overflow && this.Ob.length === 1) {
                                    var n = this.yb.getDistance() / j;
                                    this.yb = (c = l, d = this.Hb[0], g = d - c - (e = n * i), {
                                        evaluate: function (a) {
                                            return c + e * a + g * Math.pow(2, (a - 1) * 20);
                                        }
                                    });
                                } else {
                                    this.yb = k(l, this.Hb[0]);
                                }
                                h += a * (Math.random() * 0.2 - 0.1);
                                b = this.yb.evaluate(h / i);
                            }
                        }
                        this.Lb(b);
                        if (this.Cb) {
                            this.Eb(this.mb);
                        }
                    };
                    b.prototype.Lb = function (a) {
                        var b = this.Sb;
                        var c = this.Du;
                        var d = a;
                        var e = false;
                        var f = [];
                        var g = this.gb;
                        if (b !== undefined) {
                            for (; b.length && b[0] <= a;) {
                                var h = b.shift();
                                f.push(h);
                            }
                        }
                        if (c <= a) {
                            this.stop(false);
                            d = c;
                            e = true;
                            f.push(c);
                            this.gb = undefined;
                        }
                        this.displayController.displayNumber(d, e, function () {
                            f.forEach(function (a) {
                                if (g) {
                                    g(a);
                                }
                            });
                        });
                    };
                    b.prototype.Eb = function (a) {
                        var b = this.Mb;
                        if (b !== undefined && b.length && b[0] <= a) {
                            var c = b.shift();
                            this.Cb(c);
                        }
                    };
                    __decorate([i({
                        type: e.default,
                        override: true
                    })], b.prototype, "displayController", undefined);
                    return __decorate([h], b);
                }(cc.Component);
                c.default = j;
                cc._RF.pop();
            }
            function k(a, b) {
                var c = b - a;
                return {
                    evaluate: function (b) {
                        return a + c * b;
                    },
                    getDistance: function () {
                        return c;
                    }
                };
            }
        }, {
            NumberDisplayInterface: "NumberDisplayInterface"
        }],
        TimedWinRollController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "bbc6c4tBJdFQ76rTU5OtO2a", "TimedWinRollController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("NumberDisplayController");
                var f = a("TimedWinRollBaseController");
                var g = cc._decorator;
                var h = g.ccclass;
                var i = g.property;
                var j = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.displayController = undefined;
                        return b;
                    }
                    var c = {
                        type: e.default,
                        override: true
                    };
                    __extends(b, a);
                    __decorate([i(c)], b.prototype, "displayController", undefined);
                    return __decorate([h], b);
                }(f.default);
                c.default = j;
                cc._RF.pop();
            }
        }, {
            NumberDisplayController: "NumberDisplayController",
            TimedWinRollBaseController: "TimedWinRollBaseController"
        }],
        TimedWinRollCurveController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "ac3b0Ey1QlMtZGe7RPoOsSH", "TimedWinRollCurveController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("NumberCurvedController");
                var f = a("TimedWinRollBaseController");
                var g = cc._decorator;
                var h = g.ccclass;
                var i = g.property;
                var j = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.displayController = undefined;
                        return b;
                    }
                    var c = {
                        type: e.default,
                        override: true
                    };
                    __extends(b, a);
                    __decorate([i(c)], b.prototype, "displayController", undefined);
                    return __decorate([h], b);
                }(f.default);
                c.default = j;
                cc._RF.pop();
            }
        }, {
            NumberCurvedController: "NumberCurvedController",
            TimedWinRollBaseController: "TimedWinRollBaseController"
        }],
        TimedWinRollLabelController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "aa2360L0o1DHbvfzQuldvyg", "TimedWinRollLabelController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("NumberLabelController");
                var f = a("TimedWinRollBaseController");
                var g = cc._decorator;
                var h = g.ccclass;
                var i = g.property;
                var j = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.displayController = undefined;
                        return b;
                    }
                    var c = {
                        type: e.default,
                        override: true
                    };
                    __extends(b, a);
                    __decorate([i(c)], b.prototype, "displayController", undefined);
                    return __decorate([h], b);
                }(f.default);
                c.default = j;
                cc._RF.pop();
            }
        }, {
            NumberLabelController: "NumberLabelController",
            TimedWinRollBaseController: "TimedWinRollBaseController"
        }],
        TrailParticleEffectController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "e655bq0JEFHRJPA8Vxz7abO", "TrailParticleEffectController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("SlotProperties");
                var f = cc._decorator;
                var g = f.ccclass;
                var h = f.property;
                var i = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.trailParticleItemHolderNode = undefined;
                        b.trailParticleItemPrefab = undefined;
                        b.wildParticleItemPrefab = undefined;
                        b.kb = new cc.NodePool("TrailParticleItemController");
                        b.Ub = new cc.NodePool("WildParticleItemController");
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.init = function () {
                        this.jb(e.NO_OF_SLOT_ITEMS + 1);
                    };
                    b.prototype.playWildCollectEffect = function (b, c, d, e, f) {
                        var g = this;
                        if (b.length <= 0) {
                            if (f) {
                                f();
                            }
                        } else {
                            var a = 0;
                            function d() {
                                if (e) {
                                    e();
                                }
                                if (a === b.length - 1) {
                                    if (f) {
                                        f();
                                    }
                                } else {
                                    a++;
                                }
                            }
                            b.forEach(function (a, b) {
                                var e = b * 0.15;
                                var f = a.worldPosition;
                                var h = cc.v2(f.x - 100, f.y);
                                var i = g.Db();
                                var j = g.Wb();
                                var k = i.getComponent("TrailParticleItemController");
                                var l = j.getComponent("WildParticleItemController");
                                a.showWildShine(e, function () {
                                    var a = {
                                        x: -300,
                                        y: 0
                                    };
                                    j.setParent(g.trailParticleItemHolderNode);
                                    l.play(h, 0, g.Ub);
                                    i.setParent(g.trailParticleItemHolderNode);
                                    i.position = g.trailParticleItemHolderNode.convertToNodeSpaceAR(h);
                                    k.wildCollectEffectSetup();
                                    k.fly(h, c, 0.25, 0, a, g.kb, d);
                                });
                            });
                        }
                    };
                    b.prototype.jb = function (a) {
                        for (var b = 0; b < a; b++) {
                            this.kb.put(cc.instantiate(this.trailParticleItemPrefab));
                            this.Ub.put(cc.instantiate(this.wildParticleItemPrefab));
                        }
                    };
                    b.prototype.Db = function () {
                        if (this.kb.size() > 0) {
                            return this.kb.get();
                        } else {
                            return cc.instantiate(this.trailParticleItemPrefab);
                        }
                    };
                    b.prototype.Wb = function () {
                        if (this.Ub.size() > 0) {
                            return this.Ub.get();
                        } else {
                            return cc.instantiate(this.wildParticleItemPrefab);
                        }
                    };
                    __decorate([h(cc.Node)], b.prototype, "trailParticleItemHolderNode", undefined);
                    __decorate([h(cc.Prefab)], b.prototype, "trailParticleItemPrefab", undefined);
                    __decorate([h(cc.Prefab)], b.prototype, "wildParticleItemPrefab", undefined);
                    return __decorate([g], b);
                }(cc.Component);
                c.default = i;
                cc._RF.pop();
            }
        }, {
            SlotProperties: "SlotProperties"
        }],
        TrailParticleItemController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "5f8f55wzsNMjqYq3mN49W0b", "TrailParticleItemController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("Utils");
                var f = a("GConstants");
                var g = cc._decorator;
                var h = g.ccclass;
                var i = g.property;
                var j = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.emitterA = undefined;
                        b.emitterHolder = undefined;
                        b.ballAnim = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.mouseShiftEffectSetup = function () {
                        this.emitterA.node.position.x = 40;
                    };
                    b.prototype.wildCollectEffectSetup = function () {
                        this.emitterA.node.position.x = 20;
                    };
                    b.prototype.fly = function (a, b, c, d, g, h, i) {
                        var j = this;
                        if (c === undefined) {
                            c = 1;
                        }
                        if (g === undefined) {
                            g = {
                                x: 0,
                                y: 0
                            };
                        }
                        var l = this.node.convertToNodeSpaceAR(a);
                        var k = this.node.convertToNodeSpaceAR(b);
                        var m = this.emitterA.life + this.emitterA.lifeVar;
                        var n = this.xb(l, k, c, g.x, g.y);
                        var o = this.Fb(l, k);
                        this.emitterHolder.stopAllActions();
                        this.emitterA.resetSystem();
                        this.ballAnim.play();
                        this.ballAnim.node.stopAllActions();
                        this.emitterHolder.angle = -o;
                        this.emitterHolder.position = l;
                        this.emitterHolder.runAction(cc.sequence(n, cc.callFunc(function () {
                            j.emitterA.stopSystem();
                            j.ballAnim.node.runAction(cc.tintTo(0.3, f.BLACK));
                        }), cc.callFunc(function () {
                            e.delayCallback(m)(function () {
                                h.put(j.node);
                            });
                            if (i) {
                                i();
                            }
                        })));
                    };
                    b.prototype.unuse = function () {
                        this.emitterA.resetSystem();
                        this.emitterA.stopSystem();
                        this.emitterHolder.stopAllActions();
                        this.ballAnim.node.stopAllActions();
                        this.ballAnim.node.color = f.WHITE;
                        this.ballAnim.stop();
                        this.ballAnim.setCurrentTime(0);
                        this.ballAnim.getComponent(cc.Sprite).spriteFrame = undefined;
                    };
                    b.prototype.reuse = function () {
                        this.emitterA.resetSystem();
                        this.emitterA.stopSystem();
                        this.emitterHolder.stopAllActions();
                        this.ballAnim.node.stopAllActions();
                        this.ballAnim.node.color = f.WHITE;
                        this.ballAnim.stop();
                        this.ballAnim.setCurrentTime(0);
                        this.ballAnim.getComponent(cc.Sprite).spriteFrame = undefined;
                    };
                    b.prototype.destroy = function () {
                        this.unuse();
                        return a.prototype.destroy.call(this);
                    };
                    b.prototype.xb = function (b, c, d, e, f) {
                        if (d === undefined) {
                            d = 0.5;
                        }
                        var a = (c.x + b.x) * Math.sin(this.Vb(60)) + e;
                        var g = (c.y + b.y) * Math.cos(this.Vb(70)) + f;
                        var h = [b, cc.v2(a, g), c];
                        return cc.bezierTo(d, h);
                    };
                    b.prototype.Fb = function (b, c) {
                        var d = b;
                        var e = c;
                        var f = {
                            x: e.x - d.x,
                            y: e.y - d.y
                        };
                        var a = Math.atan2(f.y, f.x);
                        var g = this.zb(a);
                        if (g < 0) {
                            g += 360;
                        }
                        return 360 - g;
                    };
                    b.prototype.zb = function (a) {
                        return a * 180 / Math.PI;
                    };
                    b.prototype.Vb = function (a) {
                        return a * Math.PI / 180;
                    };
                    __decorate([i(cc.ParticleSystem)], b.prototype, "emitterA", undefined);
                    __decorate([i(cc.Node)], b.prototype, "emitterHolder", undefined);
                    __decorate([i(cc.Animation)], b.prototype, "ballAnim", undefined);
                    return __decorate([h], b);
                }(cc.Component);
                c.default = j;
                cc._RF.pop();
            }
        }, {
            GConstants: "GConstants",
            Utils: "Utils"
        }],
        TransactionModel: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "54c92i9GeNK1JtqIIU4fhIX", "TransactionModel")) {
                var c = System.get("bvframework").TransactionModel;
                b.exports.default = c;
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        TransactionStateMachineHandler: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "c42f8INb4ZMyJTA7LnNSlci", "TransactionStateMachineHandler")) {
                var c = System.get("bvframework").TransactionStateMachineHandler;
                for (var d in c) {
                    if (c.hasOwnProperty(d)) {
                        b.exports[d] = c[d];
                    }
                }
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        TransitionContext: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "9fd10r5SF9AY7ViKPJFg+fR", "TransitionContext")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.TransitionContext = undefined;
                var e = function () {
                    function a(a, b, c, d, e) {
                        this.qb = a;
                        this.Jb = b;
                        this.Kb = c;
                        this.Qb = d;
                        this.Yb = e;
                    }
                    a.prototype.getFromController = function () {
                        return this.qb;
                    };
                    a.prototype.getToController = function () {
                        return this.Jb;
                    };
                    a.prototype.getFromView = function () {
                        return this.Kb;
                    };
                    a.prototype.getToView = function () {
                        return this.Qb;
                    };
                    a.prototype.getContainer = function () {
                        return this.Yb;
                    };
                    return a;
                }();
                c.TransitionContext = e;
                cc._RF.pop();
            }
        }, {}],
        TransitionEnum: [function (a, b, c) {
            'use strict';

            var d = {
                value: true
            };
            if (!cc._RF.push(b, "ba325vamDZMr5FAGrgPtoRH", "TransitionEnum")) {
                Object.defineProperty(c, "__esModule", d);
                c.NavigationControllerOperation = undefined;
                (function (a) {
                    a[a.None = 0] = "None";
                    a[a.Push = 1] = "Push";
                    a[a.Pop = 2] = "Pop";
                })(c.NavigationControllerOperation || (c.NavigationControllerOperation = {}));
                cc._RF.pop();
            }
        }, {}],
        Transitions: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "33e4esYSRxEnZ3KD136K54g", "Transitions")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.ToRespinTransition = c.ToNormalSpinTransition = undefined;
                var e = a("Utils");
                var f = a("SettingMenuHelper");
                var h = a("GDataSource");
                var g = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.ps = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.instanceRun = function (a, b) {
                        this.ps = a.generalControllers;
                        this.Xb(b);
                    };
                    b.prototype.run = function (a, b) {
                        this.ps = a.generalControllers;
                        this.Zb(b);
                    };
                    b.prototype.$b = function () {
                        var a = this.ps.spinButtonController;
                        if (f.settingMenuHelper.isIdle()) {
                            a.show();
                        }
                        a.enableButton();
                    };
                    b.prototype.Xr = function () {
                        var a = this.ps.slotController;
                        a.stopRespin();
                        a.setupNormalSpinSlotConfig();
                    };
                    b.prototype.Zb = function (a) {
                        var b = this.ps.stickyController;
                        this.$b();
                        this.Xr();
                        b.stopSticky();
                        if (a) {
                            a();
                        }
                    };
                    b.prototype.Xb = function (a) {
                        var b = this.ps;
                        var c = b.stickyController;
                        var d = b.slotController;
                        var e = b.backgroundController;
                        var g = b.backgroundController2;
                        var i = b.uiShiftController;
                        var j = b.tigerController;
                        var l = b.angpaoController;
                        var m = b.infoboardController;
                        var k = h.gDataSource.transactionModel;
                        var n = k.accumulatedWinAmount;
                        var o = k.betLevelValue;
                        var p = k.betSizeValue;
                        var q = k.wildCount;
                        var r = h.gDataSource.systemModel.maxLineNumber;
                        var s = h.gDataSource.systemModel.winThresholds.getAllThresholds(p, o, r);
                        this.$b();
                        this.Xr();
                        c.clearSticky();
                        if (n > 0) {
                            m.setThreshold(s);
                            m.playDynamicWin(n);
                            f.settingMenuHelper.setWinAmount(n);
                        } else {
                            m.resetInfoboard(false);
                            m.resumeInfoboard();
                        }
                        l.setupToNormalState();
                        e.setupToNormalState();
                        g.setupToNormalState();
                        i.setupToNormalState();
                        d.setupToNormalState();
                        j.setNormal(q);
                        if (a) {
                            a();
                        }
                    };
                    b.prototype.destroy = function () {
                        this.ps = undefined;
                        return a.prototype.destroy.call(this);
                    };
                    return b;
                }(cc.Object);
                c.ToNormalSpinTransition = g;
                var i = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.ps = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.run = function (a, b) {
                        this.ps = a.generalControllers;
                        e.sequenceCallback(this.tS.bind(this), this.iS.bind(this))(b);
                    };
                    b.prototype.instanceRun = function (a, b) {
                        this.ps = a.generalControllers;
                        e.sequenceCallback(this.sS.bind(this), this.tS.bind(this))(b);
                    };
                    b.prototype.iS = function (a) {
                        this.ps.spinButtonController.disableButton();
                        if (a) {
                            a();
                        }
                    };
                    b.prototype.sS = function (a) {
                        var b = this.ps;
                        var c = b.backgroundController;
                        var d = b.backgroundController2;
                        var e = b.infoboardController;
                        var f = b.uiShiftController;
                        var i = b.tigerController;
                        var j = b.stickyController;
                        var l = b.slotController;
                        var m = b.spinButtonController;
                        var k = b.payLineNumberController;
                        var n = b.payLineController;
                        var o = b.angpaoController;
                        var p = h.gDataSource.transactionModel;
                        var q = p.featureWinSymbol;
                        var r = p.reels;
                        var s = p.winLines;
                        l.setSlotItemsVisible(false, [0, 1, 2, 3, 4, 5, 6, 7, 8]);
                        o.setupToRespinState();
                        c.setupToRespinState();
                        d.setupToRespinState();
                        l.setupToRespinState();
                        l.playRespin();
                        f.setupToRespinState();
                        m.disableButton();
                        e.playRespin(q);
                        e.resumeInfoboard();
                        j.playSticky(r, s, q, a);
                        var t = s.winPositions;
                        t.forEach(function (a, b) {
                            t[b] = parseInt(a, 10);
                        });
                        k.show(t);
                        n.showLine(t);
                        i.setRespin(q);
                    };
                    b.prototype.tS = function (a) {
                        var b = this.ps.slotController;
                        var c = h.gDataSource.transactionModel.featureWinSymbol;
                        b.setupRespinSlotConfig();
                        b.setRespinSymbol(c);
                        if (a) {
                            a();
                        }
                    };
                    b.prototype.destroy = function () {
                        this.ps = undefined;
                        return a.prototype.destroy.call(this);
                    };
                    return b;
                }(cc.Object);
                c.ToRespinTransition = i;
                cc._RF.pop();
            }
        }, {
            GDataSource: "GDataSource",
            SettingMenuHelper: "SettingMenuHelper",
            Utils: "Utils"
        }],
        TurboButtonEffect: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "5e837vEECVAj4O05haO7Gt+", "TurboButtonEffect")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = cc._decorator.ccclass;
                var f = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.eS = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.setUpdateTurboMiddleIconCallback = function (a) {
                        this.eS = a;
                    };
                    b.prototype.changeTurboSprite = function () {
                        if (this.eS) {
                            this.eS();
                        }
                    };
                    return __decorate([e], b);
                }(cc.Component);
                c.default = f;
                cc._RF.pop();
            }
        }, {}],
        TweaksConfig: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "0602bmSQ0NBZrhW+yhcJtSb", "TweaksConfig")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                a("RtConfig");
                a("GamePreference");
                a("CreatorTweaks");
                a("Utils");
                a("QuitGame");
                a("Printer");
                a("TweaksData");
                c.default = undefined;
                cc._RF.pop();
            }
        }, {
            CreatorTweaks: "CreatorTweaks",
            GamePreference: "GamePreference",
            Printer: "Printer",
            QuitGame: "QuitGame",
            RtConfig: "RtConfig",
            TweaksData: "TweaksData",
            Utils: "Utils"
        }],
        TweaksData: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "b0089xUdQRLiZXeZmKk7dCG", "TweaksData")) {
                b.exports = {};
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        UIAppearanceHelper: [function (a, c, d) {
            'use strict';

            if (!cc._RF.push(c, "f4549VlHlxOL4w7V7h4rhZg", "UIAppearanceHelper")) {
                var e = {
                    value: true
                };
                Object.defineProperty(d, "__esModule", e);
                d.uiAppearanceHelper = d.getOffsetY = undefined;
                var f = a("BACKUP_DATA");
                var h = function () {
                    function a() { }
                    a.prototype.interpret = function (a) {
                        return a[0];
                    };
                    return a;
                }();
                var i = function () {
                    function a() { }
                    a.prototype.interpret = function (a) {
                        return new cc.Color(a[0], a[1], a[2], a[3]);
                    };
                    return a;
                }();
                var j = cc._decorator.ccclass;
                var k = function (a) {
                    function c() {
                        var b = a.call(this) || this;
                        b.nS = undefined;
                        var c = b.nS = shell.uiAppearance;
                        if (c) {
                            c.registerInterpreter("font", new h());
                            c.registerInterpreter("value", new h());
                            c.registerInterpreter("path", new h());
                            c.registerInterpreter("color", new i());
                            c.registerInterpreter("classname", new h());
                        }
                        return b;
                    }
                    __extends(c, a);
                    c.prototype.v = function (a) {
                        var c = this.nS && this.nS.v(a);
                        if (c === null) {
                            c = b(a);
                        }
                        return c;
                    };
                    c.prototype.unregisterInterpreter = function (a) {
                        return this.nS && this.nS.unregisterInterpreter(a);
                    };
                    return __decorate([j("UIAppearanceHelper")], c);
                }(cc.Object);
                var l = Object.freeze({
                    windows: {
                        native: 4,
                        non_native: 3
                    },
                    macos: {
                        native: 4,
                        non_native: 5
                    },
                    ios: {
                        native: 2,
                        non_native: 2
                    },
                    android: {
                        native: 5,
                        non_native: 4
                    }
                });
                var m = Object.freeze({
                    windows: {
                        native: 0,
                        non_native: 5
                    },
                    macos: {
                        native: 2,
                        non_native: 3
                    },
                    ios: {
                        native: 0,
                        non_native: 3
                    },
                    android: {
                        native: 4,
                        non_native: 4
                    }
                });
                var g = shell.I18n.currentLocale;
                var n = shell.getBrowserBaseType().toLowerCase();
                var o = g === "zh" || g === "ko" || g === "ja" ? m : l;
                d.getOffsetY = function () {
                    switch (cc.sys.os) {
                        case cc.sys.OS_WINDOWS:
                            if (n === "ie" || n === "edge") {
                                return o.windows.native;
                            } else {
                                return o.windows.non_native;
                            }
                        case cc.sys.OS_ANDROID:
                            if (n === "chrome") {
                                return o.android.native;
                            } else {
                                return o.android.non_native;
                            }
                        case cc.sys.OS_OSX:
                            if (n === "safari") {
                                return o.macos.native;
                            } else {
                                return o.macos.non_native;
                            }
                        case cc.sys.OS_IOS:
                            if (n === "mobile safari") {
                                return o.ios.native;
                            } else {
                                return o.ios.non_native;
                            }
                        default:
                            return o.macos.non_native;
                    }
                };
                var p = new k();
                d.uiAppearanceHelper = p;
                cc._RF.pop();
            }
            function b(a) {
                for (var b, c = a.split("."), d = 0, e = c.length; d < e; d++) {
                    var g = c[d];
                    if ((b = b && b[g] || f.default[g]) === undefined) {
                        return null;
                    }
                }
                return b;
            }
        }, {
            BACKUP_DATA: "BACKUP_DATA"
        }],
        UIKitUtils: [function (a, b, c) {
            'use strict';

            function d() {
                return cc.sys.os === cc.sys.OS_IOS;
            }
            var e = {
                value: true
            };
            if (!cc._RF.push(b, "b3045XdzRhDNrJLCqWLZ6eT", "UIKitUtils")) {
                Object.defineProperty(c, "__esModule", e);
                c.isNotBrowserMode = c.deviceHasNotch = c.isIphoneX = c.isIphone = undefined;
                c.isIphone = d;
                c.isIphoneX = function () {
                    var a = cc.view.getFrameSize();
                    return d() && (a.width === 812 && a.height === 375 || a.width === 375 && a.height === 812);
                };
                c.deviceHasNotch = function () {
                    return shell.environment.hasNotch();
                };
                c.isNotBrowserMode = function () {
                    return window.navigator.standalone || shell.getEnvironment() === "app";
                };
                cc._RF.pop();
            }
        }, {}],
        UIKit: [function (a, b, c) {
            'use strict';

            var d = {
                value: true
            };
            if (!cc._RF.push(b, "cfcacQ0hpxOzKvh1YNNRBbk", "UIKit")) {
                Object.defineProperty(c, "__esModule", d);
                c.safeArea = c.TabBarConfigs = c.NavigationConfigs = undefined;
                c.NavigationConfigs = {
                    bar: {
                        landscape: {
                            height: 139.5,
                            item_space_x: 48
                        },
                        portrait: {
                            height: 186,
                            item_space_x: 48
                        }
                    }
                };
                c.TabBarConfigs = {
                    bar: {
                        landscape: {
                            height: 180
                        },
                        portrait: {
                            height: 180
                        }
                    }
                };
                c.safeArea = Object.freeze({
                    iphone_x: {
                        top: 80,
                        left: 0,
                        bottom: 102,
                        right: 0
                    },
                    iphone: {
                        top: 50,
                        left: 0,
                        bottom: 0,
                        right: 0
                    },
                    normal: {
                        top: 0,
                        left: 0,
                        bottom: 0,
                        right: 0
                    }
                });
                cc._RF.pop();
            }
        }, {}],
        UIShiftController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "feb71KMpjlDuYJBTJhGMq3H", "UIShiftController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("GeneralAudioConstant");
                var f = a("AudioManager");
                var g = cc._decorator;
                var h = g.ccclass;
                var i = g.property;
                var j = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.shiftNode = undefined;
                        b.oS = undefined;
                        b.cS = 0.92;
                        b.hS = 0.95;
                        b.Z = undefined;
                        b.X = undefined;
                        b.rS = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.init = function () {
                        this.oS = 1;
                    };
                    b.prototype.setupToNormalState = function () {
                        this.shiftNode.scale = this.oS;
                    };
                    b.prototype.setupToRespinState = function () {
                        this.shiftNode.scale = this.cS;
                    };
                    b.prototype.shiftDown = function (a, b) {
                        this.shiftNode.stopAllActions();
                        this.shiftNode.getComponent(cc.Animation).play("ui_shift");
                        this.shiftNode.getComponent(cc.Animation).once(cc.Animation.EventType.FINISHED, function () {
                            if (b) {
                                b();
                            }
                        });
                        var c = e.GENERAL_AUDIO.featureTease.key;
                        f.stopAudioIfPlaying(c);
                        f.playAudioIfNotPlaying(c);
                    };
                    b.prototype.shiftUp = function (a, b) {
                        this.shiftNode.getComponent(cc.Animation).play("ui_shift_in");
                        this.shiftNode.getComponent(cc.Animation).once(cc.Animation.EventType.FINISHED, function () {
                            if (b) {
                                b();
                            }
                        });
                    };
                    b.prototype.teaseDown = function (a, b) {
                        var c = this;
                        this.X = b;
                        var d = e.GENERAL_AUDIO.featureTease.key;
                        f.stopAudioIfPlaying(d);
                        f.playAudioIfNotPlaying(d);
                        this.shiftNode.getComponent(cc.Animation).play("ui_shift_tease");
                        this.shiftNode.getComponent(cc.Animation).once(cc.Animation.EventType.FINISHED, function () {
                            var b = c.X;
                            c.X = undefined;
                            if (b) {
                                b();
                            }
                        });
                    };
                    b.prototype.teaseUp = function (a, b) {
                        var c = this;
                        this.Z = b;
                        this.shiftNode.getComponent(cc.Animation).play("ui_shift_in_tease");
                        this.shiftNode.getComponent(cc.Animation).once(cc.Animation.EventType.FINISHED, function () {
                            var a = c.Z;
                            c.Z = undefined;
                            if (a) {
                                a();
                            }
                        });
                    };
                    __decorate([i(cc.Node)], b.prototype, "shiftNode", undefined);
                    return __decorate([h], b);
                }(cc.Component);
                c.default = j;
                cc._RF.pop();
            }
        }, {
            AudioManager: "AudioManager",
            GeneralAudioConstant: "GeneralAudioConstant"
        }],
        Utils: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "03755Dj0/VFQbz7rFuRrlJG", "Utils")) {
                var c = System.get("common").Utils;
                var d = function (a, b) {
                    var c = {};
                    for (var d in b) {
                        if (a.hasOwnProperty(d)) {
                            c[a[d]] = b[d];
                        } else {
                            c[d] = b[d];
                        }
                    }
                    return c;
                }({
                    convertNodeSpace: "convertToNodeSpace",
                    convertNodeSpaceAR: "convertToNodeSpaceAR",
                    getAbsolutePos: "getAbsolutePosition",
                    getAbsoluteXPos: "getAbsoluteX",
                    getAbsoluteYPos: "getAbsoluteY",
                    setAbsolutePos: "setAbsolutePosition",
                    setAbsoluteXPos: "setAbsoluteX",
                    setAbsoluteYPos: "setAbsoluteY",
                    transferToNewParent: "transferToParent",
                    getSharedSimpleScheduler: "getSharedScheduler",
                    delay: "delayCallback",
                    timeout: "timeoutCallback",
                    selector: "selectorCallback",
                    sequence: "sequenceCallback",
                    spawn: "spawnCallback",
                    waterfall: "waterfCallback",
                    condition: "condCallback",
                    defer: "deferCallback",
                    tick: "tickCallback",
                    observe: "observeCallback",
                    formatLeadingZero: "formatTwoDigit",
                    formatDateTime: "formatDate",
                    isRightToLeft: "isRTL",
                    getLocationProtocol: "getProtocol",
                    getLocationOrigin: "getOrigin"
                }, c);
                for (var e in d) {
                    if (d.hasOwnProperty(e)) {
                        b.exports[e] = d[e];
                    }
                }
                b.exports.__esModule = true;
                if (c.sharedScheduler == null) {
                    b.exports.sharedScheduler = d.getSharedScheduler();
                }
                cc._RF.pop();
            }
        }, {}],
        ViewControllerTransition: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "8e202781KBBRIxVxe3NWQ9e", "ViewControllerTransition")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = function () {
                    function a() { }
                    a.prototype.transitionDuration = function () {
                        return 0.3;
                    };
                    a.prototype.animateTransition = function () { };
                    a.prototype.animationEnd = function () { };
                    return a;
                }();
                c.default = e;
                cc._RF.pop();
            }
        }, {}],
        ViewController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "ef8ab8zk59N1LEX0M2uhmRU", "ViewController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("UIKitUtils");
                var f = a("UIKit");
                var g = cc._decorator;
                var h = g.ccclass;
                var i = g.property;
                var j = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.title = "";
                        b.leftItem = undefined;
                        b.middleItem = undefined;
                        b.rightItem = undefined;
                        b.Sa = undefined;
                        b.aS = undefined;
                        return b;
                    }
                    __extends(b, a);
                    Object.defineProperty(b.prototype, "navigator", {
                        get: function () {
                            return this.Sa;
                        },
                        set: function (a) {
                            this.Sa = a;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "view", {
                        get: function () {
                            return this.node;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(b.prototype, "safeAreaInsets", {
                        get: function () {
                            var a;
                            var b;
                            var c;
                            var d;
                            if (!this.aS) {
                                this.aS = (a = e.deviceHasNotch(), b = e.isIphone(), c = e.isNotBrowserMode(), d = shell.is1959Supported, a && c && d ? f.safeArea.iphone_x : a && d ? {
                                    top: f.safeArea.normal.top,
                                    left: f.safeArea.iphone_x.left,
                                    bottom: f.safeArea.iphone_x.bottom,
                                    right: f.safeArea.iphone_x.right
                                } : b && c ? f.safeArea.iphone : f.safeArea.normal);
                            }
                            return this.aS;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    b.prototype.onEnable = function () { };
                    b.prototype.onDisable = function () { };
                    b.prototype.viewWillAppear = function () { };
                    b.prototype.viewDidAppear = function () { };
                    b.prototype.viewWillDisappear = function () { };
                    b.prototype.viewDidDisappear = function () { };
                    b.prototype.viewWillLayoutSubviews = function () { };
                    b.prototype.viewDidLayoutSubviews = function () { };
                    __decorate([i(cc.String)], b.prototype, "title", undefined);
                    return __decorate([h], b);
                }(cc.Component);
                c.default = j;
                cc._RF.pop();
            }
        }, {
            UIKit: "UIKit",
            UIKitUtils: "UIKitUtils"
        }],
        WalletHandlers: [function (a, b, c) {
            'use strict';

            var d = {
                value: true
            };
            if (!cc._RF.push(b, "16fa48YcbZClp+85Xk1WOH4", "WalletHandlers")) {
                Object.defineProperty(c, "__esModule", d);
                c.setupWallets = undefined;
                c.setupWallets = function (a) {
                    var b = a.dataSource;
                    var c = a.settingMenuHelper;
                    var d = a.walletHelper;
                    var e = a.callback;
                    var f = b.playerModel.currencySymbol;
                    d.setup({
                        openWalletMenuFunc: c.openWalletMenu.bind(c),
                        setFreeGameModeFunc: c.setFreeGameMode.bind(c),
                        currencySymbol: f,
                        footerController: a.settingWalletPanelController
                    });
                    d.setupWallet(b.lastTransactionRawData);
                    if (e) {
                        e();
                    }
                };
                cc._RF.pop();
            }
        }, {}],
        WalletHelper: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "1ca2eEH71NDaahNBchOvZgw", "WalletHelper")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.walletHelper = undefined;
                var e;
                var f = a("SettingInfoFooterController");
                var g = a("Utils");
                var h = a("BVFramework");
                (function (a) {
                    a[a.INACTIVE = 0] = "INACTIVE";
                    a[a.ACTIVE = 1] = "ACTIVE";
                    a[a.EXPIRED = 2] = "EXPIRED";
                    a[a.CONVERTED = 3] = "CONVERTED";
                    a[a.COMPLETED = 4] = "COMPLETED";
                    a[a.NEW = 5] = "NEW";
                    a[a.DISCARDED = 6] = "DISCARDED";
                    a[a.LOCKED = 7] = "LOCKED";
                })(e || (e = {}));
                var i = cc._decorator.ccclass;
                var j = new (function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.uS = false;
                        b.lS = false;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.init = function (a) {
                        var b = this;
                        this.ha = a.getGameInfo;
                        var c = h.getGameContext();
                        c.on("Game.TransactionInfoUpdated", function (c) {
                            b.fS = c.payload;
                            if (b.lS) {
                                var d = b.fS;
                                if (b.isFreeGameMode()) {
                                    b.dS(d.wfg.gc);
                                } else if (b.isBonusGameMode()) {
                                    b.vS(d.wbn.bra);
                                }
                                b.lS = false;
                            }
                        });
                        c.on("Game.HasNewWallet", function () {
                            b._S.activateWalletNotify(true);
                        });
                    };
                    b.prototype.processInitGameInfo = function (b, c) {
                        var d = this;
                        var f = b.dt.ls.si;
                        this.uS = b.dt.inwe;
                        function g(a) {
                            if (a) {
                                switch (a.s) {
                                    case e.EXPIRED:
                                    case e.DISCARDED:
                                    case e.INACTIVE:
                                        if (!d.ha) {
                                            throw Error("Wallethelper :: processInitGameInfo : getGameInfo callback not found!");
                                        }
                                        d.ha("0_C", function () {
                                            if (c) {
                                                c();
                                            }
                                        });
                                        return;
                                }
                            }
                            if (c) {
                                c();
                            }
                        }
                        switch (f.wt) {
                            case "B":
                                g(f.wbn);
                                break;
                            case "G":
                                g(f.wfg);
                                break;
                            default:
                                if (c) {
                                    c();
                                }
                        }
                    };
                    b.prototype.setup = function (a) {
                        this.mS = a.setFreeGameModeFunc;
                        this._S = a.footerController;
                        this._S.activateWalletNotify(this.uS);
                    };
                    b.prototype.setupWallet = function (b) {
                        var c = this._S;
                        var d = this.mS;
                        var e = b.wfg;
                        var g = b.wbn;
                        if (g) {
                            var a = g.bra !== g.ibra;
                            if (d) {
                                d(false);
                            }
                            c.showCustomInfoFooter();
                            this.vS(g.bra, a);
                            c.setWalletNavigateIcon(f.WALLET_FOOTER_TYPE.BONUS);
                        } else if (e) {
                            a = e.gc !== e.tg;
                            if (d) {
                                d(true);
                            }
                            c.showCustomInfoFooter();
                            this.dS(e.gc, a);
                            c.setWalletNavigateIcon(f.WALLET_FOOTER_TYPE.FREE_GAME);
                        } else {
                            if (d) {
                                d(false);
                            }
                            c.hideCustomInfoFooter();
                            c.setWalletNavigateIcon(f.WALLET_FOOTER_TYPE.CASH);
                        }
                        this.fS = b;
                    };
                    b.prototype.hasFreeGame = function () {
                        return this.isFreeGameMode() && this.fS.wfg.gc > 0;
                    };
                    b.prototype.spin = function (a) {
                        if (this.isFreeGameMode()) {
                            var b = this.fS.wfg.gc;
                            this.dS(b - 1);
                            this.lS = true;
                        } else if (this.isBonusGameMode()) {
                            var c = this.fS.wbn.bra;
                            var d = a > c ? 0 : c - a;
                            this.vS(d);
                            this.lS = true;
                        }
                    };
                    b.prototype.isFreeGameMode = function () {
                        return this.fS && this.fS.wfg;
                    };
                    b.prototype.isBonusGameMode = function () {
                        return this.fS && this.fS.wbn;
                    };
                    b.prototype.isWalletCompleted = function () {
                        var a = this.fS;
                        var b = a.wfg;
                        var c = a.wbn;
                        if (b || c) {
                            switch (b ? b.s : c.s) {
                                case e.CONVERTED:
                                case e.COMPLETED:
                                    return true;
                            }
                        }
                        return false;
                    };
                    b.prototype.cleanUp = function () {
                        this._S = undefined;
                    };
                    b.prototype.dS = function (a, b) {
                        if (b === undefined) {
                            b = true;
                        }
                        this._S.setCustomMiddleInfoFooter(a, b);
                    };
                    b.prototype.vS = function (a, b) {
                        if (b === undefined) {
                            b = true;
                        }
                        this._S.setCustomMiddleInfoFooter(g.formatCurrency(a), b);
                    };
                    return __decorate([i("WalletHelper")], b);
                }(cc.Object))();
                c.walletHelper = j;
                cc._RF.pop();
            }
        }, {
            BVFramework: "BVFramework",
            SettingInfoFooterController: "SettingInfoFooterController",
            Utils: "Utils"
        }],
        WebSocketHandler: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "d571cdfj6pHMqHdyAI82QnG", "WebSocketHandler")) {
                var c = System.get("bvframework").WebSocketHandler;
                for (var d in c) {
                    if (c.hasOwnProperty(d)) {
                        b.exports[d] = c[d];
                    }
                }
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        WildItemController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "9d45e1LqR9AHbq4NAqXoeWW", "WildItemController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("Utils");
                var f = cc._decorator;
                var g = f.ccclass;
                var h = f.property;
                var i = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.wildSpine = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.init = function (a) {
                        this.wildSpine.skeletonData = a;
                    };
                    b.prototype.setup = function () {
                        this.wildSpine.clearTracks();
                        this.wildSpine.setToSetupPose();
                    };
                    b.prototype.playIdle = function () {
                        var a = this;
                        this.wildSpine.timeScale = 1;
                        this.wildSpine.clearTracks();
                        this.wildSpine.setToSetupPose();
                        e.deferCallback()(function () {
                            a.wildSpine.setAnimation(0, "idle", true);
                        });
                    };
                    b.prototype.unuse = function () {
                        this.pS();
                    };
                    b.prototype.pS = function () {
                        this.node.stopAllActions();
                        this.wildSpine.clearTracks();
                        this.wildSpine.setToSetupPose();
                    };
                    b.prototype.destroy = function () {
                        this.unuse();
                        return a.prototype.destroy.call(this);
                    };
                    __decorate([h(sp.Skeleton)], b.prototype, "wildSpine", undefined);
                    return __decorate([g], b);
                }(cc.Component);
                c.default = i;
                cc._RF.pop();
            }
        }, {
            Utils: "Utils"
        }],
        WildParticleItemController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "ce19axFpJNLbbqVTwfZz+hx", "WildParticleItemController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("Utils");
                var f = cc._decorator;
                var g = f.ccclass;
                var h = f.property;
                var i = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.anim = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.play = function (b, c, d, f) {
                        var g = this;
                        var h = this.node.parent.convertToNodeSpaceAR(b);
                        this.node.position = h;
                        e.delayCallback(c)(function () {
                            g.anim.play();
                        });
                        this.anim.on(cc.Animation.EventType.FINISHED, function () {
                            d.put(g.node);
                            if (f) {
                                f();
                            }
                        });
                    };
                    b.prototype.unuse = function () {
                        this.anim.stop();
                        this.anim.setCurrentTime(0);
                        this.anim.node.getComponent(cc.Sprite).spriteFrame = undefined;
                    };
                    b.prototype.reuse = function () {
                        this.anim.stop();
                        this.anim.setCurrentTime(0);
                        this.anim.node.getComponent(cc.Sprite).spriteFrame = undefined;
                    };
                    __decorate([h(cc.Animation)], b.prototype, "anim", undefined);
                    return __decorate([g], b);
                }(cc.Component);
                c.default = i;
                cc._RF.pop();
            }
        }, {
            Utils: "Utils"
        }],
        "WinLine.spec": [function (a, b, c) {
            'use strict';

            var d = {
                value: true
            };
            if (!cc._RF.push(b, "1ad51xvdcdBSrnjptTWh1P+", "WinLine.spec")) {
                Object.defineProperty(c, "__esModule", d);
                c.winHighlightShown = undefined;
                c.winHighlightShown = function () {
                    var a = System.get("automation") && System.get("automation").GameData;
                    if (a) {
                        a.emit("WinHighlightShown");
                    }
                };
                cc._RF.pop();
            }
        }, {}],
        WinLinesModel: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "24a5eWztK9Pkb2VKy4b0JAV", "WinLinesModel")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.WinLinesModel = undefined;
                var e = function () {
                    function a(a) {
                        if (a) {
                            this.bS = JSON.parse(JSON.stringify(a));
                            this.SS = Object.keys(this.bS);
                        }
                    }
                    a.prototype.getWinLinesByPosition = function (a) {
                        return this.bS[a];
                    };
                    Object.defineProperty(a.prototype, "winPositions", {
                        get: function () {
                            return this.SS;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(a.prototype, "rawData", {
                        get: function () {
                            return JSON.parse(JSON.stringify(this.bS));
                        },
                        enumerable: false,
                        configurable: true
                    });
                    return a;
                }();
                c.WinLinesModel = e;
                cc._RF.pop();
            }
        }, {}],
        WinRollBaseController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "adab7txcZBOsJ6NClaGwrmO", "WinRollBaseController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = {
                    playing: -1,
                    stop: -1
                };
                var f = a("NumberDisplayInterface");
                var g = cc.Enum(e);
                var h = cc._decorator;
                var i = h.ccclass;
                var j = h.property;
                var k = function (a) {
                    function b() {
                        var b = a !== null && a.apply(this, arguments) || this;
                        b.gS = 2;
                        b.CS = 2;
                        b.yS = 2;
                        b.MS = false;
                        b.AS = false;
                        b.mb = 0;
                        b.IS = 0;
                        b.Du = 0;
                        b.wS = 0;
                        b.Yo = g.stop;
                        b.Sb = [];
                        b.gb = undefined;
                        b.OS = undefined;
                        b.defaultVelocityStallDuration = 8;
                        b.displayController = undefined;
                        return b;
                    }
                    __extends(b, a);
                    b.prototype.setNumbersCallback = function (a) {
                        this.Sb = a;
                    };
                    b.prototype.setWinThresholds = function (b, c, d) {
                        this.HS = b;
                        this.BS = c;
                        this.GS = d;
                        this.MS = true;
                    };
                    b.prototype.NS = function (b, c, d) {
                        if (d < this.defaultVelocityStallDuration) {
                            return c;
                        } else {
                            return b + Math.pow(2, d - this.defaultVelocityStallDuration);
                        }
                    };
                    b.prototype.setWinDurations = function (a, b) {
                        this.gS = a;
                        this.CS = b;
                        this.AS = true;
                    };
                    b.prototype.setVelocityCalculation = function (a) {
                        this.OS = a;
                    };
                    b.prototype.play = function (b, c) {
                        if (this.Tb()) {
                            this.Yo = g.playing;
                            this.gb = c;
                            this.displayController.clear();
                            this.mb = 0;
                            this.TS = 0;
                            this.IS = 0;
                            this.Du = b;
                            var d = this.BS;
                            this.PS = this.wS = d / this.gS;
                        }
                    };
                    b.prototype.skip = function () {
                        var a = this;
                        if (this.Yo === g.playing) {
                            this.stop(false);
                            this.displayController.displayNumber(this.Du, true, function () {
                                a.RS(a.Du);
                                a.gb = null;
                            });
                        }
                    };
                    b.prototype.Tb = function () {
                        this.AS;
                        if (!!this.Sb) {
                            this.Sb.length;
                        }
                        if (!this.OS) {
                            this.OS = this.NS;
                        }
                        return !!this.MS;
                    };
                    b.prototype.stop = function (a) {
                        if (a === undefined) {
                            a = true;
                        }
                        if (a) {
                            this.displayController.clear();
                            this.gb = null;
                        }
                        this.mb = 0;
                        this.Yo = g.stop;
                    };
                    b.prototype.update = function (a) {
                        if (this.Yo === g.playing) {
                            if (this.TS >= this.GS) {
                                this.mb += a;
                                this.wS = this.OS(this.PS, this.wS, this.mb, a);
                                this.TS = this.TS + this.wS * a * (0.9 + Math.random() * 0.2);
                            } else {
                                this.TS = this.TS + this.wS * a * (0.9 + Math.random() * 0.2);
                            }
                            this.Lb();
                        }
                    };
                    b.prototype.RS = function (b) {
                        var c = this.CS;
                        var d = this.GS;
                        var a = this.BS;
                        if (b === a) {
                            var e = d - a;
                            this.PS = this.wS = e / c;
                        }
                        if (b === d) {
                            this.PS = this.wS = (d - a) / c;
                        }
                        if (this.gb) {
                            this.gb(b);
                        }
                    };
                    b.prototype.Lb = function () {
                        var b = this;
                        var c = this.TS;
                        var d = this.Sb;
                        var a = this.Du;
                        if (a <= c) {
                            this.stop(false);
                            this.displayController.displayNumber(a, true, function () {
                                b.RS(a);
                                b.gb = null;
                            });
                            return;
                        }
                        if (d !== undefined && d.length && d[0] <= c) {
                            var e = d.shift();
                            this.displayController.displayNumber(c, false, function () {
                                b.RS(e);
                            });
                        } else {
                            this.displayController.displayNumber(c, false);
                        }
                    };
                    __decorate([j(cc.Float)], b.prototype, "defaultVelocityStallDuration", undefined);
                    __decorate([j({
                        type: f.default,
                        override: true
                    })], b.prototype, "displayController", undefined);
                    return __decorate([i], b);
                }(cc.Component);
                c.default = k;
                cc._RF.pop();
            }
        }, {
            NumberDisplayInterface: "NumberDisplayInterface"
        }],
        WinRollController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "00616+xbv9I/qAMwXqWbdkY", "WinRollController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("NumberDisplayController");
                var f = a("WinRollBaseController");
                var g = cc._decorator;
                var h = g.ccclass;
                var i = g.property;
                var j = function (a) {
                    function b() {
                        return a !== null && a.apply(this, arguments) || this;
                    }
                    var c = {
                        type: e.default,
                        override: true
                    };
                    __extends(b, a);
                    __decorate([i(c)], b.prototype, "displayController", undefined);
                    return __decorate([h], b);
                }(f.default);
                c.default = j;
                cc._RF.pop();
            }
        }, {
            NumberDisplayController: "NumberDisplayController",
            WinRollBaseController: "WinRollBaseController"
        }],
        WinRollCurveController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "a210c4WXCdAmKbdwKdx5P30", "WinRollCurveController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("NumberCurvedController");
                var f = a("WinRollBaseController");
                var g = cc._decorator;
                var h = g.ccclass;
                var i = g.property;
                var j = function (a) {
                    function b() {
                        return a !== null && a.apply(this, arguments) || this;
                    }
                    var c = {
                        type: e.default,
                        override: true
                    };
                    __extends(b, a);
                    __decorate([i(c)], b.prototype, "displayController", undefined);
                    return __decorate([h], b);
                }(f.default);
                c.default = j;
                cc._RF.pop();
            }
        }, {
            NumberCurvedController: "NumberCurvedController",
            WinRollBaseController: "WinRollBaseController"
        }],
        WinRollLabelController: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "f7e1diBGQ5A8KF1oMrYEMNU", "WinRollLabelController")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                var e = a("NumberLabelController");
                var f = a("WinRollBaseController");
                var g = cc._decorator;
                var h = g.ccclass;
                var i = g.property;
                var j = function (a) {
                    function b() {
                        return a !== null && a.apply(this, arguments) || this;
                    }
                    var c = {
                        type: e.default,
                        override: true
                    };
                    __extends(b, a);
                    __decorate([i(c)], b.prototype, "displayController", undefined);
                    return __decorate([h], b);
                }(f.default);
                c.default = j;
                cc._RF.pop();
            }
        }, {
            NumberLabelController: "NumberLabelController",
            WinRollBaseController: "WinRollBaseController"
        }],
        WinThresholdsModel: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "43fa7kpruFLXK4fYDhrIgSc", "WinThresholdsModel")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.WinThresholdsModel = undefined;
                var e = a("Utils");
                var f = function () {
                    function a(a) {
                        if (a) {
                            this.bS = JSON.parse(JSON.stringify(a));
                            this.LS = a.mw;
                            this.ES = a.bw;
                            this.kS = a.mgw;
                            this.US = a.smgw;
                        }
                    }
                    a.prototype.getAllThresholds = function (a, b, c) {
                        var d = a * b * c;
                        return {
                            mediumWinThreshold: e.toDecimalWithExp(d * this.LS, 2),
                            bigWinThreshold: e.toDecimalWithExp(d * this.ES, 2),
                            megaWinThreshold: e.toDecimalWithExp(d * this.kS, 2),
                            superMegaWinThreshold: e.toDecimalWithExp(d * this.US, 2)
                        };
                    };
                    Object.defineProperty(a.prototype, "rawData", {
                        get: function () {
                            return this.bS;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(a.prototype, "mediumWin", {
                        get: function () {
                            return this.LS;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(a.prototype, "bigWin", {
                        get: function () {
                            return this.ES;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(a.prototype, "megaWin", {
                        get: function () {
                            return this.kS;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(a.prototype, "superMegaWin", {
                        get: function () {
                            return this.US;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    return a;
                }();
                c.WinThresholdsModel = f;
                cc._RF.pop();
            }
        }, {
            Utils: "Utils"
        }],
        WinValuesModel: [function (a, b, c) {
            'use strict';

            if (!cc._RF.push(b, "501f6RTfh9LVInQJ/Y+n54G", "WinValuesModel")) {
                var d = {
                    value: true
                };
                Object.defineProperty(c, "__esModule", d);
                c.WinValuesModel = undefined;
                var e = function () {
                    function a(a) {
                        if (a) {
                            this.bS = JSON.parse(JSON.stringify(a));
                            this.jS = Object.keys(this.bS);
                        }
                    }
                    a.prototype.getWinValueByPosition = function (a) {
                        return this.bS[a];
                    };
                    Object.defineProperty(a.prototype, "winValuePositions", {
                        get: function () {
                            return this.jS;
                        },
                        enumerable: false,
                        configurable: true
                    });
                    Object.defineProperty(a.prototype, "rawData", {
                        get: function () {
                            return JSON.parse(JSON.stringify(this.bS));
                        },
                        enumerable: false,
                        configurable: true
                    });
                    return a;
                }();
                c.WinValuesModel = e;
                cc._RF.pop();
            }
        }, {}],
        XHRFactory: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "f3dd4hmiBJHSqrMVzx2qXWg", "XHRFactory")) {
                var c = System.get("common").XHR;
                b.exports.XHRFactory = c;
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        XHRHandler: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "77926JsF5hDL5NbzKF89qZh", "XHRHandler")) {
                var c = System.get("bvframework").XHRHandler;
                for (var d in c) {
                    b.exports[d] = c[d];
                }
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}],
        XHRHelper: [function (a, b) {
            'use strict';

            if (!cc._RF.push(b, "d29eaTApqFCCLK6u/sH0xO/", "XHRHelper")) {
                var c = System.get("bvframework").XHRHelper;
                for (var d in c) {
                    b.exports[d] = c[d];
                }
                b.exports.__esModule = true;
                cc._RF.pop();
            }
        }, {}]
    }, {}, ["GameLayout", "AnimParticleSystem", "AnimParticleSystemPoolHandler", "AnimParticleSystemUtils", "Appearance", "ButtonTheme", "LabelTheme", "AdapterEventEmitter", "AudioAdapter", "AudioAdapterConstant", "AudioFactory", "NoSoundAdapter", "AutomationDecorator", "ButtonHitTest", "APIClient", "AnalyticsHelper", "BVFramework", "BVFrameworkEnum", "DataSource", "ErrorHandler", "GameEventHandler", "GameHeaderHelper", "GameInitializationHandler", "GameMaintenanceHandler", "GameMaintenanceModel", "GamePluginModel", "GameTitle", "GameUtils", "LaunchConfig", "NotifyHelper", "OperatorJurisdictionModel", "PlayerModel", "Printer", "QuitGame", "QuitGameWithEvent", "RegionUtils", "RequestHandler", "ResourceQualifierHelper", "RetryHandler", "SystemModel", "TransactionModel", "TransactionStateMachineHandler", "WebSocketHandler", "XHRHandler", "XHRHelper", "ClickEffectController", "CanvasResizeBroadcaster", "CommonDummy", "Deserializer", "JSONSerializer", "MultiResHandler", "Preference", "ResRC", "Serializer", "Utils", "XHRFactory", "CreatorTweaks", "TweaksData", "HitPassThrough", "InfoboardMessageController", "InfoboardMessageController.spec", "JakeSlotGameTemplate", "SpinButtonController", "TweaksConfig", "SlotAnalyticsEnum", "SlotDependencyManager", "SlotGameConstants", "NormalPrizeDecorator", "NormalResultDecorator", "NormalSpinDecorator", "AutoSpinHandler", "SettingMenuHandlers", "SpinConfigHandler", "SystemFeatureHandler", "WalletHandlers", "SlotAnalyticsHelper", "BetRepository", "SlotSystemModel", "SlotTransactionModel", "WinLinesModel", "WinThresholdsModel", "WinValuesModel", "SlotStateMachine", "IdleState", "PrizeState", "ResultState", "SpinState", "NumberCurvedController", "NumberDisplayController", "NumberDisplayInterface", "NumberLabelController", "NumberRollBaseController", "NumberRollController", "NumberRollCurveController", "NumberRollLabelController", "TimedWinRollBaseController", "TimedWinRollController", "TimedWinRollCurveController", "TimedWinRollLabelController", "WinRollBaseController", "WinRollController", "WinRollCurveController", "WinRollLabelController", "RefreshWorldHandler", "ResourceLoader", "BetModifierButton", "GenericSettingButton", "MoreMenuButton", "SettingMenuController", "SettingSlider", "SettingSliderNum", "SettingSliderSingle", "SettingSliderSingleNum", "SettingTurboSpinButton", "SoundButton", "SpinOptionsButton", "SubControllerConfig", "TurboButtonEffect", "NumberLabelControllerLite", "SettingInfoFooterController", "LandscapeSettingInfoFooterController", "ButtonBackground", "LandscapeSettingMenuController", "LandscapeSoundButton", "MaxBetButton", "SettingMenuButtonHelper", "SettingMenuHelper", "SlotScrollerController.spec", "SlotDataHandler", "SlotHelper", "SlotItemHandler", "SlotSymbol", "BaseScroller", "DefaultStartScroller", "DefaultStopScroller", "SlotScrollerController", "SlotGenerator", "SlotItem", "SlotItemPool", "SlotView", "SpaceBarInterrupter", "ButtonController", "PopOutItem", "PopOutItemHandler", "PopOutTintController", "SinglePayoutModel", "SymbolPayoutController", "SymbolPayoutPanelGenerator", "BACKUP_DATA", "UIAppearanceHelper", "BaseListViewCell", "BookView", "Button", "DrawLine", "GridView", "LabelLocalized", "ListView", "ListViewCellUpdateAnim", "ListViewEnum", "NavigationBar", "NavigationController", "NavigationDefaultTransition", "PageControl", "PageControlButton", "ScrollViewEx", "SliderEx", "TabBar", "TabBarController", "TabBarItem", "TransitionContext", "TransitionEnum", "UIKit", "UIKitUtils", "ViewController", "ViewControllerTransition", "WalletHelper", "Line", "LineController", "LinePrefabController", "AngpaoController", "BackgroundController", "BackgroundControllerTwo", "BigSymbolItemController", "BigWinController", "BigWinFireworkController", "BigWinFireworkItem", "ColumnTintController", "CustomAnimParticleSystem", "FeatureWinController", "FireworkItem", "ForegroundController", "GApiClient", "GConstants", "GPopOutItem", "GSpinButtonController", "GeneralAudioConstant", "InfoboardController", "Main", "PayLineController", "PayLineItemController", "PayLineNumberController", "PayLineNumberItem", "PayOutEffectController", "PayOutItem", "PaySelectEffectController", "PaySelectItem", "SlotTintController", "StickyController", "StickyItemController", "TigerController", "TrailParticleEffectController", "TrailParticleItemController", "Transitions", "UIShiftController", "WildItemController", "WildParticleItemController", "APIClient.spec", "BigWinController.spec", "SlotController.spec", "SpinButtonController.spec", "WinLine.spec", "BGMHandler", "GRefreshWorldHandler", "NodePoolHandler", "ReplayModeHandler", "RespinReelStatusHandler", "SkipHandler", "SpineConfigHandler", "BaseUIHelper", "NormalUIHelper", "RespinUIHelper", "AudioAssetConfig", "CustomAssetConfig", "GeneralAssetConfig", "LoadingController", "GameTweaksConfig", "GameTweaksData", "GDataSource", "GSlotTransactionModel", "GNormalStopScroller", "GSlotHelper", "GSlotItem", "GSlotItemPool", "NormalSlotHandler", "SlotController", "SlotHandler", "SlotProperties", "SymbolImageHandler", "GRespinDecorator", "GResultDecorator", "GNormalGameState", "GRespinGameState", "GIdleState", "GNormalResultState", "GPrizeState", "GRespinResultState", "GRespinState", "GSpinState", "AudioManager", "GameAudioAdapter", "GamePreference", "RtConfig"]);
})(); //# sourceMappingURL=index.js.map