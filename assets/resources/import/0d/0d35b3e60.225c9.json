[1,["e4Eh8Vrq9PT6upAEaa2nMF","90JilKxn5HqKSsujjndI7U","2crixoCFNCWKJesrFp4HcA"],["node","root","data","texture","_effectAsset"],[["cc.EffectAsset",["_name","shaders","techniques"],0],["cc.Prefab",["_name"],2],["cc.Node",["_name","_components","_prefab","_trs"],2,9,4,7],["cc.MeshRenderer",["node","_materials"],3,1,3],["95a3dIihBlE1bM4psBuANTA",["node"],3,1],["cc.PrefabInfo",["root","asset"],3,1,1],["cc.Material",["_name","_techniqueData"],2,11]],[[0,0,1,2,4],[1,0,2],[2,0,1,2,3,2],[3,0,1,1],[4,0,1],[5,0,1,1],[6,0,1,2]],[[[[0,"lightLineMesh",[{"hash":2114443581,"record":null,"name":"lightLineMesh|sprite-vs:vert|sprite-fs:frag","glsl3":{"vert":"\nprecision highp float;\nuniform CCGlobal {\n  mat4 cc_matView;\n  mat4 cc_matViewInv;\n  mat4 cc_matProj;\n  mat4 cc_matProjInv;\n  mat4 cc_matViewProj;\n  mat4 cc_matViewProjInv;\n  vec4 cc_cameraPos;\n  vec4 cc_time;\n  mediump vec4 cc_screenSize;\n  mediump vec4 cc_screenScale;\n};\nuniform CCLocal {\n  mat4 cc_matWorld;\n  mat4 cc_matWorldIT;\n};\nin vec3 a_position;\n#if USE_TEXTURE\nin vec2 a_uv0;\nout vec2 uv0;\n#endif\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  uv0 = a_uv0;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform ALPHA_TEST {\n    float alphaThreshold;\n  };\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n#if USE_TEXTURE\nin vec2 uv0;\nuniform sampler2D texture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  o *= texture(texture, uv0);\n    #if _USE_ETC1_TEXTURE\n    o.a *= texture2D(texture, uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  ALPHA_TEST(o);\n  return o;\n}\nout vec4 cc_FragColor;\nvoid main() { cc_FragColor = frag(); }"},"glsl1":{"vert":"\nprecision highp float;\nuniform mat4 cc_matViewProj;\nuniform mat4 cc_matWorld;\nattribute vec3 a_position;\n#if USE_TEXTURE\nattribute vec2 a_uv0;\nvarying vec2 uv0;\n#endif\nvec4 vert () {\n  vec4 pos = vec4(a_position, 1);\n  #if USE_MODEL\n  pos = cc_matViewProj * cc_matWorld * pos;\n  #else\n  pos = cc_matViewProj * pos;\n  #endif\n  #if USE_TEXTURE\n  uv0 = a_uv0;\n  #endif\n  return pos;\n}\nvoid main() { gl_Position = vert(); }","frag":"\nprecision highp float;\n#if USE_ALPHA_TEST\n  uniform float alphaThreshold;\n#endif\nvoid ALPHA_TEST (in vec4 color) {\n  #if USE_ALPHA_TEST\n      if (color.a < alphaThreshold) discard;\n  #endif\n}\nvoid ALPHA_TEST (in float alpha) {\n  #if USE_ALPHA_TEST\n      if (alpha < alphaThreshold) discard;\n  #endif\n}\n#if USE_TEXTURE\nvarying vec2 uv0;\nuniform sampler2D texture;\n#endif\nvec4 frag () {\n  vec4 o = vec4(1, 1, 1, 1);\n  #if USE_TEXTURE\n  o *= texture2D(texture, uv0);\n    #if _USE_ETC1_TEXTURE\n    o.a *= texture2D(texture, uv0 + vec2(0, 0.5)).r;\n    #endif\n  #endif\n  ALPHA_TEST(o);\n  return o;\n}\nvoid main() { gl_FragColor = frag(); }"},"builtins":{"globals":{"blocks":[{"name":"CCGlobal","defines":[]}],"samplers":[]},"locals":{"blocks":[{"name":"CCLocal","defines":[]}],"samplers":[]}},"defines":[{"name":"USE_TEXTURE","type":"boolean","defines":[]},{"name":"USE_MODEL","type":"boolean","defines":[]},{"name":"USE_ALPHA_TEST","type":"boolean","defines":[]},{"name":"_USE_ETC1_TEXTURE","type":"boolean","defines":["USE_TEXTURE"]}],"blocks":[{"name":"ALPHA_TEST","binding":0,"members":[{"name":"alphaThreshold","type":13,"count":1}],"defines":["USE_ALPHA_TEST"]}],"samplers":[{"name":"texture","type":29,"count":1,"binding":30,"defines":["USE_TEXTURE"]}]}],[{"passes":[{"program":"lightLineMesh|sprite-vs:vert|sprite-fs:frag","blendState":{"targets":[{"blend":true}]},"rasterizerState":{"cullMode":0},"properties":{"texture":{"value":"white","type":29},"alphaThreshold":{"type":13,"value":[0.5]}}}]}]]],0,0,[],[],[]],[[[1,"lightLineNode"],[2,"lightLineNode",[[3,-2,[0]],[4,-3]],[5,-1,0],[21.798,5.049,0,0,0,0,1,1,1,1]]],0,[0,1,1,0,0,1,0,0,1,0,2,1,3],[0],[-1],[0]],[[[6,"lightLineMesh",[{},"0",11,[{"defines":{"USE_TEXTURE":true,"USE_MODEL":true}},"props",11,[{},"texture",6,0]]]]],0,0,[0,0],[3,4],[1,2]]]]